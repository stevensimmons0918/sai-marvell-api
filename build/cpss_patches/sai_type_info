GNU gdb (Ubuntu 7.7.1-0ubuntu5~14.04.3) 7.7.1
Copyright (C) 2014 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
<http://www.gnu.org/software/gdb/documentation/>.
For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from ./dist/xpSaiApp...done.
(gdb) All defined types:

File ../cpss/common/h/cpss/common/config/cpssGenCfg.h:
typedef struct {
    CPSS_PP_DEVICE_TYPE devType;
    GT_U8 revision;
    CPSS_PP_FAMILY_TYPE_ENT devFamily;
    CPSS_PP_SUB_FAMILY_TYPE_ENT devSubFamily;
    GT_U32 maxPortNum;
    GT_U32 numOfVirtPorts;
    CPSS_PORTS_BMP_STC existingPorts;
    CPSS_GEN_CFG_HW_DEV_NUM_MODE_ENT hwDevNumMode;
    CPSS_NET_CPU_PORT_MODE_ENT cpuPortMode;
    GT_U32 numOfLedInfPerPortGroup;
    GT_U32 supportedSipBmp[1];
} CPSS_GEN_CFG_DEV_INFO_STC;
typedef enum {CPSS_GEN_CFG_HW_DEV_NUM_MODE_SINGLE_E, CPSS_GEN_CFG_HW_DEV_NUM_MODE_DUAL_E} CPSS_GEN_CFG_HW_DEV_NUM_MODE_ENT;
typedef enum {CPSS_GEN_SIP_LEGACY_E, CPSS_GEN_SIP_5_E, CPSS_GEN_SIP_5_10_E, CPSS_GEN_SIP_5_15_E, CPSS_GEN_SIP_5_16_E, 
    CPSS_GEN_SIP_5_20_E, CPSS_GEN_SIP_5_25_E, CPSS_GEN_SIP_6_E, CPSS_GEN_SIP_6_10_E, CPSS_GEN_SIP_6_15_E, CPSS_GEN_SIP_6_20_E, 
    CPSS_GEN_SIP_6_30_E, CPSS_GEN_SIP_MAX_NUM_E} CPSS_GEN_SIP_ENT;

File ../cpss/common/h/cpss/common/config/private/prvCpssCommonRegs.h:
PRV_CPSS_RESET_AND_INIT_CTRL_REGS_ADDR_STC;
typedef PRV_CPSS_RESET_AND_INIT_CTRL_REGS_ADDR_STC PRV_CPSS_RESET_AND_INIT_CTRL_REGS_ADDR_STC;

File ../cpss/common/h/cpss/common/config/private/prvCpssConfigTypes.h:
PRV_CPSS_DXCH_SIP6_PDQ_SCHED_DB_STC;
PRV_CPSS_GEN_PP_CONFIG_STC;
PRV_CPSS_GEN_PP_MULTI_PIPES_INFO_STC;
PRV_CPSS_GEN_PP_PORT_GROUPS_INFO_STC;
PRV_CPSS_GEN_TM_DB_STC;
PRV_CPSS_PP_HW_INFO_STC;
typedef enum {CPSS_UNDEFINED_DEVICE_E, CPSS_CH1_E, CPSS_CH1_DIAMOND_E, CPSS_CH2_E = 4, CPSS_CH3_E = 8, CPSS_XCAT_E = 16, 
    CPSS_LION_E = 32, CPSS_XCAT2_E = 64, CPSS_LION2_E = 128, CPSS_PUMA_E = 256, CPSS_PUMA3_E = 512, CPSS_BOBCAT2_E = 2048, 
    CPSS_XCAT3_E = 4096, CPSS_BOBCAT3_E = 8192, CPSS_CAELUM_E = 16384, CPSS_ALDRIN_E = 32768, CPSS_AC3X_E = 65536, 
    CPSS_ALDRIN2_E = 131072, CPSS_FALCON_E = 262144, CPSS_PIPE_E = 1048576, CPSS_AC5P_E = 2097152, CPSS_AC5X_E = 4194304, 
    CPSS_AC5_E = 8388608, CPSS_PP_FAMILY_BIT_LAST_E} CPSS_PP_FAMILY_BIT_ENT;
typedef PRV_CPSS_DXCH_SIP6_PDQ_SCHED_DB_STC PRV_CPSS_DXCH_SIP6_PDQ_SCHED_DB_STC;
typedef PRV_CPSS_GEN_PP_CONFIG_STC PRV_CPSS_GEN_PP_CONFIG_STC;
typedef PRV_CPSS_GEN_PP_MULTI_PIPES_INFO_STC PRV_CPSS_GEN_PP_MULTI_PIPES_INFO_STC;
typedef PRV_CPSS_GEN_PP_PORT_GROUPS_INFO_STC PRV_CPSS_GEN_PP_PORT_GROUPS_INFO_STC;
typedef PRV_CPSS_GEN_TM_DB_STC PRV_CPSS_GEN_TM_DB_STC;
typedef PRV_CPSS_PP_HW_INFO_STC PRV_CPSS_PP_HW_INFO_STC;

File ../cpss/common/h/cpss/common/config/private/prvCpssGenIntDefs.h:
PRV_CPSS_AU_DESC_CTRL_FOR_DEAD_LOCK_STC;
PRV_CPSS_AU_DESC_CTRL_STC;
PRV_CPSS_INTERRUPT_CTRL_STC;
PRV_CPSS_RX_DESC_LIST_STC;
PRV_CPSS_RX_DESC_STC;
PRV_CPSS_SHARED_CNC_IN_PORT_GROUPS_CTRL_STC;
PRV_CPSS_SW_RX_DESC_STCT;
PRV_CPSS_SW_TX_DESC_STCT;
PRV_CPSS_TX_DESC_LIST_STC;
PRV_CPSS_TX_DESC_STC;
typedef enum {PRV_CPSS_AUQ_STATE_ALL_FULL_E, PRV_CPSS_AUQ_STATE_ONE_EMPTY_E, PRV_CPSS_AUQ_STATE_ALL_EMPTY_E} PRV_CPSS_AUQ_STATE_ENT;
typedef PRV_CPSS_AU_DESC_CTRL_FOR_DEAD_LOCK_STC PRV_CPSS_AU_DESC_CTRL_FOR_DEAD_LOCK_STC;
typedef PRV_CPSS_AU_DESC_CTRL_STC PRV_CPSS_AU_DESC_CTRL_STC;
typedef PRV_CPSS_INTERRUPT_CTRL_STC PRV_CPSS_INTERRUPT_CTRL_STC;
typedef PRV_CPSS_RX_DESC_LIST_STC PRV_CPSS_RX_DESC_LIST_STC;
typedef PRV_CPSS_RX_DESC_STC PRV_CPSS_RX_DESC_STC;
typedef PRV_CPSS_SHARED_CNC_IN_PORT_GROUPS_CTRL_STC PRV_CPSS_SHARED_CNC_IN_PORT_GROUPS_CTRL_STC;
typedef PRV_CPSS_SW_RX_DESC_STCT PRV_CPSS_SW_RX_DESC_STC;
struct PRV_CPSS_SW_RX_DESC_STCT;
typedef PRV_CPSS_SW_TX_DESC_STCT PRV_CPSS_SW_TX_DESC_STC;
struct PRV_CPSS_SW_TX_DESC_STCT;
typedef PRV_CPSS_TX_DESC_LIST_STC PRV_CPSS_TX_DESC_LIST_STC;
typedef PRV_CPSS_TX_DESC_STC PRV_CPSS_TX_DESC_STC;

File ../cpss/common/h/cpss/common/cos/cpssCosTypes.h:
typedef enum {CPSS_DP_FOR_RX_LOW_E, CPSS_DP_FOR_RX_HIGH_E} CPSS_DP_FOR_RX_ENT;
typedef enum {CPSS_DP_GREEN_E, CPSS_DP_YELLOW_E, CPSS_DP_RED_E, CPSS_DP_LAST_E} CPSS_DP_LEVEL_ENT;

File ../cpss/common/h/cpss/common/cpssHwInit/cpssCommonLedCtrl.h:
typedef enum {CPSS_LED_BLINK_DURATION_0_E, CPSS_LED_BLINK_DURATION_1_E, CPSS_LED_BLINK_DURATION_2_E, CPSS_LED_BLINK_DURATION_3_E, 
    CPSS_LED_BLINK_DURATION_4_E, CPSS_LED_BLINK_DURATION_5_E, CPSS_LED_BLINK_DURATION_6_E, 
    CPSS_LED_BLINK_DURATION_7_E} CPSS_LED_BLINK_DURATION_ENT;
typedef enum {CPSS_LED_BLINK_DUTY_CYCLE_0_E, CPSS_LED_BLINK_DUTY_CYCLE_1_E, CPSS_LED_BLINK_DUTY_CYCLE_2_E, 
    CPSS_LED_BLINK_DUTY_CYCLE_3_E} CPSS_LED_BLINK_DUTY_CYCLE_ENT;
typedef enum {CPSS_LED_BLINK_SELECT_0_E, CPSS_LED_BLINK_SELECT_1_E} CPSS_LED_BLINK_SELECT_ENT;
typedef enum {CPSS_LED_CLOCK_OUT_FREQUENCY_500_E, CPSS_LED_CLOCK_OUT_FREQUENCY_1000_E, CPSS_LED_CLOCK_OUT_FREQUENCY_2000_E, 
    CPSS_LED_CLOCK_OUT_FREQUENCY_3000_E} CPSS_LED_CLOCK_OUT_FREQUENCY_ENT;
typedef enum {CPSS_LED_ORDER_MODE_BY_PORT_E, CPSS_LED_ORDER_MODE_BY_CLASS_E} CPSS_LED_ORDER_MODE_ENT;
typedef enum {CPSS_LED_PULSE_STRETCH_0_NO_E, CPSS_LED_PULSE_STRETCH_1_E, CPSS_LED_PULSE_STRETCH_2_E, CPSS_LED_PULSE_STRETCH_3_E, 
    CPSS_LED_PULSE_STRETCH_4_E, CPSS_LED_PULSE_STRETCH_5_E, CPSS_LED_PULSE_STRETCH_6_E, 
    CPSS_LED_PULSE_STRETCH_7_E} CPSS_LED_PULSE_STRETCH_ENT;

File ../cpss/common/h/cpss/common/cpssHwInit/cpssHwInit.h:
CPSS_MULTI_NET_IF_CFG_STC;
CPSS_MULTI_NET_IF_RX_SDMA_QUEUE_STC;
CPSS_MULTI_NET_IF_TX_SDMA_QUEUE_STC;
CPSS_RX_BUF_INFO_STC;
typedef struct {
    GT_U8 *auDescBlock;
    GT_U32 auDescBlockSize;
} CPSS_AUQ_CFG_STC;
typedef enum {CPSS_HW_PP_RESET_SKIP_TYPE_REGISTER_E, CPSS_HW_PP_RESET_SKIP_TYPE_TABLE_E, CPSS_HW_PP_RESET_SKIP_TYPE_EEPROM_E, 
    CPSS_HW_PP_RESET_SKIP_TYPE_PEX_E, CPSS_HW_PP_RESET_SKIP_TYPE_LINK_LOSS_E, CPSS_HW_PP_RESET_SKIP_TYPE_CHIPLETS_E, 
    CPSS_HW_PP_RESET_SKIP_TYPE_POE_E, CPSS_HW_PP_RESET_SKIP_TYPE_ALL_E, 
    CPSS_HW_PP_RESET_SKIP_TYPE_ALL_EXCLUDE_PEX_E} CPSS_HW_PP_RESET_SKIP_TYPE_ENT;
typedef CPSS_MULTI_NET_IF_CFG_STC CPSS_MULTI_NET_IF_CFG_STC;
typedef CPSS_MULTI_NET_IF_RX_SDMA_QUEUE_STC CPSS_MULTI_NET_IF_RX_SDMA_QUEUE_STC;
typedef CPSS_MULTI_NET_IF_TX_SDMA_QUEUE_STC CPSS_MULTI_NET_IF_TX_SDMA_QUEUE_STC;
typedef struct {
    GT_U32 *txDescBlock;
    GT_U32 txDescBlockSize;
    GT_U32 *rxDescBlock;
    GT_U32 rxDescBlockSize;
    CPSS_RX_BUF_INFO_STC rxBufInfo;
} CPSS_NET_IF_CFG_STC;
typedef enum {CPSS_CHANNEL_PCI_E, CPSS_CHANNEL_SMI_E, CPSS_CHANNEL_TWSI_E, CPSS_CHANNEL_PEX_E, CPSS_CHANNEL_PEX_MBUS_E, 
    CPSS_CHANNEL_PEX_EAGLE_E, CPSS_CHANNEL_PEX_FALCON_Z_E, CPSS_CHANNEL_PEX_KERNEL_E, 
    CPSS_CHANNEL_LAST_E} CPSS_PP_INTERFACE_CHANNEL_ENT;
typedef enum {CPSS_RX_BUFF_DYNAMIC_ALLOC_E, CPSS_RX_BUFF_STATIC_ALLOC_E, CPSS_RX_BUFF_NO_ALLOC_E} CPSS_RX_BUFF_ALLOC_METHOD_ENT;
typedef GT_U8 *(*)(GT_U32, GT_U32) CPSS_RX_BUFF_MALLOC_FUNC;
typedef CPSS_RX_BUF_INFO_STC CPSS_RX_BUF_INFO_STC;
typedef enum {CPSS_SYS_HA_MODE_ACTIVE_E, CPSS_SYS_HA_MODE_STANDBY_E} CPSS_SYS_HA_MODE_ENT;
typedef enum {CPSS_TX_BUFF_DYNAMIC_ALLOC_E, CPSS_TX_BUFF_STATIC_ALLOC_E} CPSS_TX_BUFF_ALLOC_METHOD_ENT;
typedef GT_U8 *(*)(GT_U32, GT_U32) CPSS_TX_BUFF_MALLOC_FUNC;
typedef enum {CPSS_TX_SDMA_QUEUE_MODE_NORMAL_E, CPSS_TX_SDMA_QUEUE_MODE_PACKET_GENERATOR_E} CPSS_TX_SDMA_QUEUE_MODE_ENT;

File ../cpss/common/h/cpss/common/cpssHwInit/private/prvCpssHwInit.h:
typedef enum {PRV_CPSS_DXCH_UNIT___NOT_VALID___E, PRV_CPSS_DXCH_UNIT_TTI_E, PRV_CPSS_DXCH_UNIT_PCL_E, PRV_CPSS_DXCH_UNIT_L2I_E, 
    PRV_CPSS_DXCH_UNIT_FDB_E, PRV_CPSS_DXCH_UNIT_EQ_E, PRV_CPSS_DXCH_UNIT_LPM_E, PRV_CPSS_DXCH_UNIT_EGF_EFT_E, 
    PRV_CPSS_DXCH_UNIT_EGF_QAG_E, PRV_CPSS_DXCH_UNIT_EGF_SHT_E, PRV_CPSS_DXCH_UNIT_HA_E, PRV_CPSS_DXCH_UNIT_ETS_E, 
    PRV_CPSS_DXCH_UNIT_MLL_E, PRV_CPSS_DXCH_UNIT_IPLR_E, PRV_CPSS_DXCH_UNIT_EPLR_E, PRV_CPSS_DXCH_UNIT_IPVX_E, 
    PRV_CPSS_DXCH_UNIT_IOAM_E, PRV_CPSS_DXCH_UNIT_EOAM_E, PRV_CPSS_DXCH_UNIT_TCAM_E, PRV_CPSS_DXCH_UNIT_RXDMA_E, 
    PRV_CPSS_DXCH_UNIT_EPCL_E, PRV_CPSS_DXCH_UNIT_TM_FCU_E, PRV_CPSS_DXCH_UNIT_TM_DROP_E, PRV_CPSS_DXCH_UNIT_TM_QMAP_E, 
    PRV_CPSS_DXCH_UNIT_TM_E, PRV_CPSS_DXCH_UNIT_GOP_E, PRV_CPSS_DXCH_UNIT_MIB_E, PRV_CPSS_DXCH_UNIT_SERDES_E, 
    PRV_CPSS_DXCH_UNIT_ERMRK_E, PRV_CPSS_DXCH_UNIT_BM_E, PRV_CPSS_DXCH_UNIT_TM_INGRESS_GLUE_E, PRV_CPSS_DXCH_UNIT_TM_EGRESS_GLUE_E, 
    PRV_CPSS_DXCH_UNIT_ETH_TXFIFO_E, PRV_CPSS_DXCH_UNIT_ILKN_TXFIFO_E, PRV_CPSS_DXCH_UNIT_ILKN_E, PRV_CPSS_DXCH_UNIT_LMS0_0_E, 
    PRV_CPSS_DXCH_UNIT_LMS0_1_E, PRV_CPSS_DXCH_UNIT_LMS0_2_E, PRV_CPSS_DXCH_UNIT_LMS0_3_E, PRV_CPSS_DXCH_UNIT_TX_FIFO_E, 
    PRV_CPSS_DXCH_UNIT_BMA_E, PRV_CPSS_DXCH_UNIT_CNC_0_E, PRV_CPSS_DXCH_UNIT_CNC_1_E, PRV_CPSS_DXCH_UNIT_TXQ_QUEUE_E, 
    PRV_CPSS_DXCH_UNIT_TXQ_LL_E, PRV_CPSS_DXCH_UNIT_TXQ_PFC_E, PRV_CPSS_DXCH_UNIT_TXQ_QCN_E, PRV_CPSS_DXCH_UNIT_TXQ_DQ_E, 
    PRV_CPSS_DXCH_UNIT_DFX_SERVER_E, PRV_CPSS_DXCH_UNIT_MPPM_E, PRV_CPSS_DXCH_UNIT_LMS1_0_E, PRV_CPSS_DXCH_UNIT_LMS1_1_E, 
    PRV_CPSS_DXCH_UNIT_LMS1_2_E, PRV_CPSS_DXCH_UNIT_LMS1_3_E, PRV_CPSS_DXCH_UNIT_LMS2_0_E, PRV_CPSS_DXCH_UNIT_LMS2_1_E, 
    PRV_CPSS_DXCH_UNIT_LMS2_2_E, PRV_CPSS_DXCH_UNIT_LMS2_3_E, PRV_CPSS_DXCH_UNIT_MPPM_1_E, PRV_CPSS_DXCH_UNIT_CTU_0_E, 
    PRV_CPSS_DXCH_UNIT_CTU_1_E, PRV_CPSS_DXCH_UNIT_TXQ_SHT_E, PRV_CPSS_DXCH_UNIT_TXQ_EGR0_E, PRV_CPSS_DXCH_UNIT_TXQ_EGR1_E, 
    PRV_CPSS_DXCH_UNIT_TXQ_DIST_E, PRV_CPSS_DXCH_UNIT_IPLR_1_E, PRV_CPSS_DXCH_UNIT_TXDMA_E, PRV_CPSS_DXCH_UNIT_MG_E, 
    PRV_CPSS_DXCH_UNIT_TCC_IPCL_E, PRV_CPSS_DXCH_UNIT_TCC_IPVX_E, PRV_CPSS_DXCH_UNIT_TCC_IPCL_1_E, 
    PRV_CPSS_DXCH_UNIT___LAST_USED_AS_DIRECT_INDEX____E, PRV_CPSS_DXCH_UNIT_CNM_RFU_E, PRV_CPSS_DXCH_UNIT_CNM_MPP_RFU_E, 
    PRV_CPSS_DXCH_UNIT_CNM_AAC_E, PRV_CPSS_DXCH_UNIT_CNM_RUNIT_E, PRV_CPSS_DXCH_UNIT_SMI_0_E, PRV_CPSS_DXCH_UNIT_SMI_1_E, 
    PRV_CPSS_DXCH_UNIT_SMI_2_E, PRV_CPSS_DXCH_UNIT_SMI_3_E, PRV_CPSS_DXCH_UNIT_LED_0_E, PRV_CPSS_DXCH_UNIT_LED_1_E, 
    PRV_CPSS_DXCH_UNIT_LED_2_E, PRV_CPSS_DXCH_UNIT_LED_3_E, PRV_CPSS_DXCH_UNIT_LED_4_E, PRV_CPSS_DXCH_UNIT_LED_5_E, 
    PRV_CPSS_DXCH_UNIT_RXDMA1_E, PRV_CPSS_DXCH_UNIT_TXDMA1_E, PRV_CPSS_DXCH_UNIT_TX_FIFO1_E, PRV_CPSS_DXCH_UNIT_ETH_TXFIFO1_E, 
    PRV_CPSS_DXCH_UNIT_RXDMA_GLUE_E, PRV_CPSS_DXCH_UNIT_TXDMA_GLUE_E, PRV_CPSS_DXCH_UNIT_RXDMA2_E, PRV_CPSS_DXCH_UNIT_RXDMA3_E, 
    PRV_CPSS_DXCH_UNIT_RXDMA4_E, PRV_CPSS_DXCH_UNIT_RXDMA5_E, PRV_CPSS_DXCH_UNIT_RXDMA6_E, PRV_CPSS_DXCH_UNIT_RXDMA7_E, 
    PRV_CPSS_DXCH_UNIT_TXDMA2_E, PRV_CPSS_DXCH_UNIT_TXDMA3_E, PRV_CPSS_DXCH_UNIT_TXDMA4_E, PRV_CPSS_DXCH_UNIT_TXDMA5_E, 
    PRV_CPSS_DXCH_UNIT_TXDMA6_E, PRV_CPSS_DXCH_UNIT_TXDMA7_E, PRV_CPSS_DXCH_UNIT_TX_FIFO2_E, PRV_CPSS_DXCH_UNIT_TX_FIFO3_E, 
    PRV_CPSS_DXCH_UNIT_TX_FIFO4_E, PRV_CPSS_DXCH_UNIT_TX_FIFO5_E, PRV_CPSS_DXCH_UNIT_TX_FIFO6_E, PRV_CPSS_DXCH_UNIT_TX_FIFO7_E, 
    PRV_CPSS_DXCH_UNIT_TXQ_DQ1_E, PRV_CPSS_DXCH_UNIT_TXQ_DQ2_E, PRV_CPSS_DXCH_UNIT_TXQ_DQ3_E, PRV_CPSS_DXCH_UNIT_TXQ_DQ4_E, 
    PRV_CPSS_DXCH_UNIT_TXQ_DQ5_E, PRV_CPSS_DXCH_UNIT_MIB1_E, PRV_CPSS_DXCH_UNIT_GOP1_E, PRV_CPSS_DXCH_UNIT_TAI_E, 
    PRV_CPSS_DXCH_UNIT_TAI1_E, PRV_CPSS_DXCH_UNIT_TAI2_E, PRV_CPSS_DXCH_UNIT_TAI3_E, PRV_CPSS_DXCH_UNIT_TAI4_E, 
    PRV_CPSS_DXCH_UNIT_EGF_SHT_1_E, PRV_CPSS_DXCH_UNIT_TTI_1_E, PRV_CPSS_DXCH_UNIT_IPCL_1_E, PRV_CPSS_DXCH_UNIT_L2I_1_E, 
    PRV_CPSS_DXCH_UNIT_IPVX_1_E, PRV_CPSS_DXCH_UNIT_IPLR_0_1_E, PRV_CPSS_DXCH_UNIT_IPLR_1_1_E, PRV_CPSS_DXCH_UNIT_IOAM_1_E, 
    PRV_CPSS_DXCH_UNIT_MLL_1_E, PRV_CPSS_DXCH_UNIT_EQ_1_E, PRV_CPSS_DXCH_UNIT_EGF_EFT_1_E, PRV_CPSS_DXCH_UNIT_CNC_0_1_E, 
    PRV_CPSS_DXCH_UNIT_CNC_1_1_E, PRV_CPSS_DXCH_UNIT_SERDES_1_E, PRV_CPSS_DXCH_UNIT_HA_1_E, PRV_CPSS_DXCH_UNIT_ERMRK_1_E, 
    PRV_CPSS_DXCH_UNIT_EPCL_1_E, PRV_CPSS_DXCH_UNIT_EPLR_1_E, PRV_CPSS_DXCH_UNIT_EOAM_1_E, PRV_CPSS_DXCH_UNIT_RX_DMA_GLUE_1_E, 
    PRV_CPSS_DXCH_UNIT_POE_E, PRV_CPSS_DXCH_UNIT_TXQ_BMX_E, PRV_CPSS_DXCH_UNIT_LPM_1_E, PRV_CPSS_DXCH_UNIT_IA_E, 
    PRV_CPSS_DXCH_UNIT_IA_1_E, PRV_CPSS_DXCH_UNIT_EREP_E, PRV_CPSS_DXCH_UNIT_EREP_1_E, PRV_CPSS_DXCH_UNIT_PREQ_E, 
    PRV_CPSS_DXCH_UNIT_PREQ_1_E, PRV_CPSS_DXCH_UNIT_PHA_E, PRV_CPSS_DXCH_UNIT_PHA_1_E, PRV_CPSS_PX_UNIT_PHA_E, 
    PRV_CPSS_PX_UNIT_PCP_E, PRV_CPSS_PX_UNIT_MCFC_E, PRV_CPSS_DXCH_UNIT_SHM_E, PRV_CPSS_DXCH_UNIT_MG_0_1_E, 
    PRV_CPSS_DXCH_UNIT_MG_0_2_E, PRV_CPSS_DXCH_UNIT_MG_0_3_E, PRV_CPSS_DXCH_UNIT_MG_1_0_E, PRV_CPSS_DXCH_UNIT_MG_1_1_E, 
    PRV_CPSS_DXCH_UNIT_MG_1_2_E, PRV_CPSS_DXCH_UNIT_MG_1_3_E, PRV_CPSS_DXCH_UNIT_BMA_1_E, PRV_CPSS_DXCH_UNIT_EGF_QAG_1_E, 
    PRV_CPSS_DXCH_UNIT_TXQ_PSI_E, PRV_CPSS_DXCH_UNIT_TXQ_PDX_E, PRV_CPSS_DXCH_UNIT_TXQ_PDX_PAC_0_E, 
    PRV_CPSS_DXCH_UNIT_TXQ_PDX_PAC_1_E, PRV_CPSS_DXCH_UNIT_TXQ_PFCC_E, PRV_CPSS_DXCH_UNIT_EM_E, PRV_CPSS_DXCH_UNIT_TXQ_PIPE0_PDS0_E, 
    PRV_CPSS_DXCH_UNIT_TXQ_PIPE0_PDS1_E, PRV_CPSS_DXCH_UNIT_TXQ_PIPE0_PDS2_E, PRV_CPSS_DXCH_UNIT_TXQ_PIPE0_PDS3_E, 
    PRV_CPSS_DXCH_UNIT_TXQ_PIPE1_PDS0_E, PRV_CPSS_DXCH_UNIT_TXQ_PIPE1_PDS1_E, PRV_CPSS_DXCH_UNIT_TXQ_PIPE1_PDS2_E, 
    PRV_CPSS_DXCH_UNIT_TXQ_PIPE1_PDS3_E, PRV_CPSS_DXCH_UNIT_TXQ_PIPE0_SDQ0_E, PRV_CPSS_DXCH_UNIT_TXQ_PIPE0_SDQ1_E, 
    PRV_CPSS_DXCH_UNIT_TXQ_PIPE0_SDQ2_E, PRV_CPSS_DXCH_UNIT_TXQ_PIPE0_SDQ3_E, PRV_CPSS_DXCH_UNIT_TXQ_PIPE1_SDQ0_E, 
    PRV_CPSS_DXCH_UNIT_TXQ_PIPE1_SDQ1_E, PRV_CPSS_DXCH_UNIT_TXQ_PIPE1_SDQ2_E, PRV_CPSS_DXCH_UNIT_TXQ_PIPE1_SDQ3_E, 
    PRV_CPSS_DXCH_UNIT_TXQ_PIPE0_QFC0_E, PRV_CPSS_DXCH_UNIT_TXQ_PIPE0_QFC1_E, PRV_CPSS_DXCH_UNIT_TXQ_PIPE0_QFC2_E, 
    PRV_CPSS_DXCH_UNIT_TXQ_PIPE0_QFC3_E, PRV_CPSS_DXCH_UNIT_TXQ_PIPE1_QFC0_E, PRV_CPSS_DXCH_UNIT_TXQ_PIPE1_QFC1_E, 
    PRV_CPSS_DXCH_UNIT_TXQ_PIPE1_QFC2_E, PRV_CPSS_DXCH_UNIT_TXQ_PIPE1_QFC3_E, PRV_CPSS_DXCH_UNIT_TAI_SLAVE_PIPE0_TAI0_E, 
    PRV_CPSS_DXCH_UNIT_TAI_SLAVE_PIPE0_TAI1_E, PRV_CPSS_DXCH_UNIT_TAI_SLAVE_PIPE1_TAI0_E, PRV_CPSS_DXCH_UNIT_TAI_SLAVE_PIPE1_TAI1_E, 
    PRV_CPSS_DXCH_UNIT_TXQ_TAI_SLAVE_PIPE0_TAI0_E, PRV_CPSS_DXCH_UNIT_TXQ_TAI_SLAVE_PIPE0_TAI1_E, 
    PRV_CPSS_DXCH_UNIT_TXQ_TAI_SLAVE_PIPE1_TAI0_E, PRV_CPSS_DXCH_UNIT_TXQ_TAI_SLAVE_PIPE1_TAI1_E, 
    PRV_CPSS_DXCH_UNIT_PB_CENTER_BLK_E, PRV_CPSS_DXCH_UNIT_PB_COUNTER_E, PRV_CPSS_DXCH_UNIT_PB_SMB_WRITE_ARBITER_E, 
    PRV_CPSS_DXCH_UNIT_PB_SMB_WRITE_ARBITER_1_E, PRV_CPSS_DXCH_UNIT_PB_SMB_WRITE_ARBITER_2_E, 
    PRV_CPSS_DXCH_UNIT_PB_SMB_WRITE_ARBITER_3_E, PRV_CPSS_DXCH_UNIT_PB_GPC_GRP_PACKET_WRITE_0_E, 
    PRV_CPSS_DXCH_UNIT_PB_GPC_GRP_CELL_READ_0_E, PRV_CPSS_DXCH_UNIT_PB_GPC_GRP_CELL_READ_1_E, 
    PRV_CPSS_DXCH_UNIT_PB_GPC_GRP_PACKET_READ_0_E, PRV_CPSS_DXCH_UNIT_PB_GPC_GRP_PACKET_READ_1_E, 
    PRV_CPSS_DXCH_UNIT_PB_GPC_GRP_PACKET_WRITE_1_E, PRV_CPSS_DXCH_UNIT_PB_GPC_GRP_PACKET_WRITE_2_E, 
    PRV_CPSS_DXCH_UNIT_PB_GPC_GRP_PACKET_WRITE_3_E, PRV_CPSS_DXCH_UNIT_PB_GPC_GRP_CELL_READ_2_E, 
    PRV_CPSS_DXCH_UNIT_PB_GPC_GRP_CELL_READ_3_E, PRV_CPSS_DXCH_UNIT_PB_GPC_GRP_PACKET_READ_2_E, 
    PRV_CPSS_DXCH_UNIT_PB_GPC_GRP_PACKET_READ_3_E, PRV_CPSS_DXCH_UNIT_PB_NEXT_POINTER_MEMO_0_E, 
    PRV_CPSS_DXCH_UNIT_PB_NEXT_POINTER_MEMO_1_E, PRV_CPSS_DXCH_UNIT_PB_NEXT_POINTER_MEMO_2_E, 
    PRV_CPSS_DXCH_UNIT_PB_SHARED_MEMO_BUF_0_0_E, PRV_CPSS_DXCH_UNIT_PB_SHARED_MEMO_BUF_0_1_E, 
    PRV_CPSS_DXCH_UNIT_PB_SHARED_MEMO_BUF_1_0_E, PRV_CPSS_DXCH_UNIT_PB_SHARED_MEMO_BUF_1_1_E, 
    PRV_CPSS_DXCH_UNIT_PB_SHARED_MEMO_BUF_2_0_E, PRV_CPSS_DXCH_UNIT_PB_SHARED_MEMO_BUF_2_1_E, PRV_CPSS_DXCH_UNIT_PCA_BRG_0_E, 
    PRV_CPSS_DXCH_UNIT_PCA_PZ_ARBITER_I_0_E, PRV_CPSS_DXCH_UNIT_PCA_PZ_ARBITER_E_0_E, PRV_CPSS_DXCH_UNIT_PCA_SFF_0_E, 
    PRV_CPSS_DXCH_UNIT_PCA_LMU_0_E, PRV_CPSS_DXCH_UNIT_PCA_CTSU_0_E, PRV_CPSS_DXCH_UNIT_PCA_BRG_1_E, 
    PRV_CPSS_DXCH_UNIT_PCA_PZ_ARBITER_I_1_E, PRV_CPSS_DXCH_UNIT_PCA_PZ_ARBITER_E_1_E, PRV_CPSS_DXCH_UNIT_PCA_SFF_1_E, 
    PRV_CPSS_DXCH_UNIT_PCA_LMU_1_E, PRV_CPSS_DXCH_UNIT_PCA_CTSU_1_E, PRV_CPSS_DXCH_UNIT_PCA_BRG_2_E, 
    PRV_CPSS_DXCH_UNIT_PCA_PZ_ARBITER_I_2_E, PRV_CPSS_DXCH_UNIT_PCA_PZ_ARBITER_E_2_E, PRV_CPSS_DXCH_UNIT_PCA_SFF_2_E, 
    PRV_CPSS_DXCH_UNIT_PCA_LMU_2_E, PRV_CPSS_DXCH_UNIT_PCA_CTSU_2_E, PRV_CPSS_DXCH_UNIT_PCA_BRG_3_E, 
    PRV_CPSS_DXCH_UNIT_PCA_PZ_ARBITER_I_3_E, PRV_CPSS_DXCH_UNIT_PCA_PZ_ARBITER_E_3_E, PRV_CPSS_DXCH_UNIT_PCA_SFF_3_E, 
    PRV_CPSS_DXCH_UNIT_PCA_LMU_3_E, PRV_CPSS_DXCH_UNIT_PCA_CTSU_3_E, PRV_CPSS_DXCH_UNIT_PCA_MACSEC_EXT_I_163_0_E, 
    PRV_CPSS_DXCH_UNIT_PCA_MACSEC_EXT_I_164_0_E, PRV_CPSS_DXCH_UNIT_PCA_MACSEC_EXT_E_163_0_E, 
    PRV_CPSS_DXCH_UNIT_PCA_MACSEC_EXT_E_164_0_E, PRV_CPSS_DXCH_UNIT_PCA_MACSEC_EXT_I_163_1_E, 
    PRV_CPSS_DXCH_UNIT_PCA_MACSEC_EXT_I_164_1_E, PRV_CPSS_DXCH_UNIT_PCA_MACSEC_EXT_E_163_1_E, 
    PRV_CPSS_DXCH_UNIT_PCA_MACSEC_EXT_E_164_1_E, PRV_CPSS_DXCH_UNIT_PCA_MACSEC_EXT_I_163_2_E, 
    PRV_CPSS_DXCH_UNIT_PCA_MACSEC_EXT_I_164_2_E, PRV_CPSS_DXCH_UNIT_PCA_MACSEC_EXT_E_163_2_E, 
    PRV_CPSS_DXCH_UNIT_PCA_MACSEC_EXT_E_164_2_E, PRV_CPSS_DXCH_UNIT_PCA_MACSEC_EXT_I_163_3_E, 
    PRV_CPSS_DXCH_UNIT_PCA_MACSEC_EXT_I_164_3_E, PRV_CPSS_DXCH_UNIT_PCA_MACSEC_EXT_E_163_3_E, 
    PRV_CPSS_DXCH_UNIT_PCA_MACSEC_EXT_E_164_3_E, PRV_CPSS_DXCH_UNIT_PCA_MACSEC_EIP_163_I_0_E, 
    PRV_CPSS_DXCH_UNIT_PCA_MACSEC_EIP_163_E_0_E, PRV_CPSS_DXCH_UNIT_PCA_MACSEC_EIP_164_I_0_E, 
    PRV_CPSS_DXCH_UNIT_PCA_MACSEC_EIP_164_E_0_E, PRV_CPSS_DXCH_UNIT_PCA_MACSEC_EIP_163_I_1_E, 
    PRV_CPSS_DXCH_UNIT_PCA_MACSEC_EIP_163_E_1_E, PRV_CPSS_DXCH_UNIT_PCA_MACSEC_EIP_164_I_1_E, 
    PRV_CPSS_DXCH_UNIT_PCA_MACSEC_EIP_164_E_1_E, PRV_CPSS_DXCH_UNIT_BASE_RAVEN_0_E, PRV_CPSS_DXCH_UNIT_BASE_RAVEN_1_E, 
    PRV_CPSS_DXCH_UNIT_BASE_RAVEN_2_E, PRV_CPSS_DXCH_UNIT_BASE_RAVEN_3_E, PRV_CPSS_DXCH_UNIT_RAVEN_0_TAI0_E, 
    PRV_CPSS_DXCH_UNIT_RAVEN_0_TAI1_E, PRV_CPSS_DXCH_UNIT_RAVEN_1_TAI0_E, PRV_CPSS_DXCH_UNIT_RAVEN_1_TAI1_E, 
    PRV_CPSS_DXCH_UNIT_RAVEN_2_TAI0_E, PRV_CPSS_DXCH_UNIT_RAVEN_2_TAI1_E, PRV_CPSS_DXCH_UNIT_RAVEN_3_TAI0_E, 
    PRV_CPSS_DXCH_UNIT_RAVEN_3_TAI1_E, PRV_CPSS_DXCH_UNIT_EAGLE_D2D_0_E, PRV_CPSS_DXCH_UNIT_EAGLE_D2D_1_E, 
    PRV_CPSS_DXCH_UNIT_EAGLE_D2D_2_E, PRV_CPSS_DXCH_UNIT_EAGLE_D2D_3_E, PRV_CPSS_DXCH_UNIT_EAGLE_D2D_4_E, 
    PRV_CPSS_DXCH_UNIT_EAGLE_D2D_5_E, PRV_CPSS_DXCH_UNIT_EAGLE_D2D_6_E, PRV_CPSS_DXCH_UNIT_EAGLE_D2D_7_E, 
    PRV_CPSS_DXCH_UNIT_EAGLE_D2D_CP_IN_RAVEN_E, PRV_CPSS_DXCH_UNIT_MAC_400G_0_E, PRV_CPSS_DXCH_UNIT_MAC_400G_1_E, 
    PRV_CPSS_DXCH_UNIT_MAC_400G_2_E, PRV_CPSS_DXCH_UNIT_MAC_400G_3_E, PRV_CPSS_DXCH_UNIT_PCS_400G_0_E, 
    PRV_CPSS_DXCH_UNIT_PCS_400G_1_E, PRV_CPSS_DXCH_UNIT_PCS_400G_2_E, PRV_CPSS_DXCH_UNIT_PCS_400G_3_E, 
    PRV_CPSS_DXCH_UNIT_MAC_CPU_0_E, PRV_CPSS_DXCH_UNIT_PCS_CPU_0_E, PRV_CPSS_DXCH_UNIT_LED_CPU_0_E, PRV_CPSS_DXCH_UNIT_CNC_2_E, 
    PRV_CPSS_DXCH_UNIT_CNC_3_E, PRV_CPSS_DXCH_UNIT_PPU_E, PRV_CPSS_DXCH_UNIT_MIF_400G_0_E, PRV_CPSS_DXCH_UNIT_MIF_400G_1_E, 
    PRV_CPSS_DXCH_UNIT_MIF_400G_2_E, PRV_CPSS_DXCH_UNIT_MIF_400G_3_E, PRV_CPSS_DXCH_UNIT_MIF_USX_0_E, 
    PRV_CPSS_DXCH_UNIT_MIF_USX_1_E, PRV_CPSS_DXCH_UNIT_MIF_USX_2_E, PRV_CPSS_DXCH_UNIT_MIF_CPU_0_E, PRV_CPSS_DXCH_UNIT_ANP_400G_0_E, 
    PRV_CPSS_DXCH_UNIT_ANP_400G_1_E, PRV_CPSS_DXCH_UNIT_ANP_400G_2_E, PRV_CPSS_DXCH_UNIT_ANP_400G_3_E, 
    PRV_CPSS_DXCH_UNIT_ANP_USX_0_E, PRV_CPSS_DXCH_UNIT_ANP_USX_1_E, PRV_CPSS_DXCH_UNIT_ANP_USX_2_E, PRV_CPSS_DXCH_UNIT_ANP_USX_3_E, 
    PRV_CPSS_DXCH_UNIT_ANP_USX_4_E, PRV_CPSS_DXCH_UNIT_ANP_USX_5_E, PRV_CPSS_DXCH_UNIT_ANP_CPU_0_E, PRV_CPSS_DXCH_UNIT_ANP_CPU_1_E, 
    PRV_CPSS_DXCH_UNIT_MTI_USX_0_MAC_0_E, PRV_CPSS_DXCH_UNIT_MTI_USX_1_MAC_0_E, PRV_CPSS_DXCH_UNIT_MTI_USX_2_MAC_0_E, 
    PRV_CPSS_DXCH_UNIT_MTI_USX_0_MAC_1_E, PRV_CPSS_DXCH_UNIT_MTI_USX_1_MAC_1_E, PRV_CPSS_DXCH_UNIT_MTI_USX_2_MAC_1_E, 
    PRV_CPSS_DXCH_UNIT_MTI_USX_0_PCS_0_E, PRV_CPSS_DXCH_UNIT_MTI_USX_1_PCS_0_E, PRV_CPSS_DXCH_UNIT_MTI_USX_2_PCS_0_E, 
    PRV_CPSS_DXCH_UNIT_MTI_USX_0_PCS_1_E, PRV_CPSS_DXCH_UNIT_MTI_USX_1_PCS_1_E, PRV_CPSS_DXCH_UNIT_MTI_USX_2_PCS_1_E, 
    PRV_CPSS_DXCH_UNIT_L2I_TAI0_E, PRV_CPSS_DXCH_UNIT_L2I_TAI1_E, PRV_CPSS_DXCH_UNIT_TTI_TAI0_E, PRV_CPSS_DXCH_UNIT_TTI_TAI1_E, 
    PRV_CPSS_DXCH_UNIT_TXQS_TAI0_E, PRV_CPSS_DXCH_UNIT_TXQS_TAI1_E, PRV_CPSS_DXCH_UNIT_TXQS1_TAI0_E, 
    PRV_CPSS_DXCH_UNIT_TXQS1_TAI1_E, PRV_CPSS_DXCH_UNIT_PHA_TAI0_E, PRV_CPSS_DXCH_UNIT_PHA_TAI1_E, 
    PRV_CPSS_DXCH_UNIT_EPCL_HA_TAI0_E, PRV_CPSS_DXCH_UNIT_EPCL_HA_TAI1_E, PRV_CPSS_DXCH_UNIT_CPU_PORT_TAI0_E, 
    PRV_CPSS_DXCH_UNIT_CPU_PORT_TAI1_E, PRV_CPSS_DXCH_UNIT_400G0_TAI0_E, PRV_CPSS_DXCH_UNIT_400G0_TAI1_E, 
    PRV_CPSS_DXCH_UNIT_400G1_TAI0_E, PRV_CPSS_DXCH_UNIT_400G1_TAI1_E, PRV_CPSS_DXCH_UNIT_400G2_TAI0_E, 
    PRV_CPSS_DXCH_UNIT_400G2_TAI1_E, PRV_CPSS_DXCH_UNIT_400G3_TAI0_E, PRV_CPSS_DXCH_UNIT_400G3_TAI1_E, 
    PRV_CPSS_DXCH_UNIT_USX0_TAI0_E, PRV_CPSS_DXCH_UNIT_USX0_TAI1_E, PRV_CPSS_DXCH_UNIT_USX1_TAI0_E, PRV_CPSS_DXCH_UNIT_USX1_TAI1_E, 
    PRV_CPSS_DXCH_UNIT_PCA2_TAI0_E, PRV_CPSS_DXCH_UNIT_PCA2_TAI1_E, PRV_CPSS_DXCH_UNIT_PCA3_TAI0_E, PRV_CPSS_DXCH_UNIT_PCA3_TAI1_E, 
    PRV_CPSS_DXCH_UNIT_PCA0_TAI0_E, PRV_CPSS_DXCH_UNIT_PCA0_TAI1_E, PRV_CPSS_DXCH_UNIT_PCA1_TAI0_E, PRV_CPSS_DXCH_UNIT_PCA1_TAI1_E, 
    PRV_CPSS_DXCH_UNIT_MAC_CPUM_TAI0_E, PRV_CPSS_DXCH_UNIT_MAC_CPUM_TAI1_E, PRV_CPSS_DXCH_UNIT_MAC_CPUC_TAI0_E, 
    PRV_CPSS_DXCH_UNIT_MAC_CPUC_TAI1_E, PRV_CPSS_DXCH_UNIT_100G_TAI0_E, PRV_CPSS_DXCH_UNIT_100G_TAI1_E, 
    PRV_CPSS_DXCH_UNIT_USX2_0_TAI0_E, PRV_CPSS_DXCH_UNIT_USX2_0_TAI1_E, PRV_CPSS_DXCH_UNIT_USX2_1_TAI0_E, 
    PRV_CPSS_DXCH_UNIT_USX2_1_TAI1_E, PRV_CPSS_DXCH_UNIT_MAC_CPU_1_E, PRV_CPSS_DXCH_UNIT_PCS_CPU_1_E, PRV_CPSS_DXCH_UNIT_SDW0_0_E, 
    PRV_CPSS_DXCH_UNIT_SDW1_0_E, PRV_CPSS_DXCH_UNIT_SDW0_1_E, PRV_CPSS_DXCH_UNIT_SDW1_1_E, PRV_CPSS_DXCH_UNIT_SDW0_2_E, 
    PRV_CPSS_DXCH_UNIT_SDW1_2_E, PRV_CPSS_DXCH_UNIT_SDW0_3_E, PRV_CPSS_DXCH_UNIT_SDW1_3_E, PRV_CPSS_DXCH_UNIT_HBU_E, 
    PRV_CPSS_DXCH_UNIT_HBU_1_E, PRV_CPSS_DXCH_UNIT_LAST____IN_TILE_0____E, PRV_CPSS_DXCH_UNIT_IN_TILE_1_BASE_E, 
    PRV_CPSS_DXCH_UNIT_IN_TILE_2_BASE_E = 806, PRV_CPSS_DXCH_UNIT_IN_TILE_3_BASE_E = 1209, 
    PRV_CPSS_DXCH_UNIT_IN_TILE_3_LAST_E = 1611, PRV_CPSS_DXCH_UNIT___DUMMY_PLACE_HOLDER___E, 
    PRV_CPSS_DXCH_UNIT_LAST_E} PRV_CPSS_DXCH_UNIT_ENT;

File ../cpss/common/h/cpss/common/cpssHwInit/private/prvCpssHwRegisters.h:
PRV_CPSS_DUPLICATED_ADDITIONAL_ADDRESSES_INFO_STC;
typedef GT_BOOL (*)(GT_SW_DEV_NUM, GT_U32, GT_U32, GT_PORT_GROUPS_BMP *, GT_BOOL *, 
    PRV_CPSS_DUPLICATED_ADDITIONAL_ADDRESSES_INFO_STC *, GT_BOOL *) PRV_CPSS_DUPLICATED_ADDITIONAL_ADDRESSES_GET_FUNC;
typedef PRV_CPSS_DUPLICATED_ADDITIONAL_ADDRESSES_INFO_STC PRV_CPSS_DUPLICATED_ADDITIONAL_ADDRESSES_INFO_STC;

File ../cpss/common/h/cpss/common/cpssTypes.h:
CPSS_INTERFACE_DEV_PORT_STC;
CPSS_INTERFACE_INFO_STC;
CPSS_PORTS_BMP_STC;
CPSS_TRUNK_MEMBER_STC;
GT_ETHERADDR;
GT_IPADDR;
GT_IPV6ADDR;
typedef enum {CPSS_DIRECTION_INGRESS_E, CPSS_DIRECTION_EGRESS_E, CPSS_DIRECTION_BOTH_E} CPSS_DIRECTION_ENT;
typedef CPSS_INTERFACE_DEV_PORT_STC CPSS_INTERFACE_DEV_PORT_STC;
typedef CPSS_INTERFACE_INFO_STC CPSS_INTERFACE_INFO_STC;
typedef enum {CPSS_INTERFACE_PORT_E, CPSS_INTERFACE_TRUNK_E, CPSS_INTERFACE_VIDX_E, CPSS_INTERFACE_VID_E, CPSS_INTERFACE_DEVICE_E, 
    CPSS_INTERFACE_FABRIC_VIDX_E, CPSS_INTERFACE_INDEX_E} CPSS_INTERFACE_TYPE_ENT;
typedef enum {CPSS_IP_PROTOCOL_IPV4_E, CPSS_IP_PROTOCOL_IPV6_E, CPSS_IP_PROTOCOL_IPV4V6_E, CPSS_IP_PROTOCOL_FCOE_E, 
    CPSS_IP_PROTOCOL_ALL_E} CPSS_IP_PROTOCOL_STACK_ENT;
typedef CPSS_PORTS_BMP_STC CPSS_PORTS_BMP_STC;
typedef unsigned int CPSS_PP_DEVICE_TYPE;
typedef enum {CPSS_PP_FAMILY_START_EXMX_E, CPSS_PP_FAMILY_TWISTC_E, CPSS_PP_FAMILY_TWISTD_E, CPSS_PP_FAMILY_SAMBA_E, 
    CPSS_PP_FAMILY_TIGER_E, CPSS_PP_FAMILY_END_EXMX_E, CPSS_PP_FAMILY_START_DXSAL_E, CPSS_PP_FAMILY_SALSA_E, 
    CPSS_PP_FAMILY_END_DXSAL_E, CPSS_PP_FAMILY_START_DXCH_E, CPSS_PP_FAMILY_CHEETAH_E, CPSS_PP_FAMILY_CHEETAH2_E, 
    CPSS_PP_FAMILY_CHEETAH3_E, CPSS_PP_FAMILY_DXCH_XCAT_E, CPSS_PP_FAMILY_DXCH_XCAT3_E, CPSS_PP_FAMILY_DXCH_AC5_E, 
    CPSS_PP_FAMILY_DXCH_LION_E, CPSS_PP_FAMILY_DXCH_XCAT2_E, CPSS_PP_FAMILY_DXCH_LION2_E, CPSS_PP_FAMILY_DXCH_LION3_E, 
    CPSS_PP_FAMILY_DXCH_BOBCAT2_E, CPSS_PP_FAMILY_DXCH_BOBCAT3_E, CPSS_PP_FAMILY_DXCH_ALDRIN_E, CPSS_PP_FAMILY_DXCH_AC3X_E, 
    CPSS_PP_FAMILY_DXCH_ALDRIN2_E, CPSS_PP_FAMILY_DXCH_FALCON_E, CPSS_PP_FAMILY_DXCH_AC5P_E, CPSS_PP_FAMILY_DXCH_AC5X_E, 
    CPSS_PP_FAMILY_DXCH_HARRIER_E, CPSS_PP_FAMILY_DXCH_IRONMAN_E, CPSS_PP_FAMILY_END_DXCH_E, CPSS_PP_FAMILY_START_EXMXPM_E, 
    CPSS_PP_FAMILY_PUMA_E, CPSS_PP_FAMILY_PUMA3_E, CPSS_PP_FAMILY_END_EXMXPM_E, CPSS_PX_FAMILY_START_E, CPSS_PX_FAMILY_PIPE_E, 
    CPSS_PX_FAMILY_END_E, CPSS_PP_FAMILY_LAST_E, CPSS_MAX_FAMILY = 2147483647} CPSS_PP_FAMILY_TYPE_ENT;
typedef enum {CPSS_PP_SUB_FAMILY_NONE_E, CPSS_PP_SUB_FAMILY_BOBCAT2_BOBK_E, CPSS_PP_SUB_FAMILY_IRONMAN_S_E, CPSS_MAX_SUB_FAMILY, 
    CPSS_BAD_SUB_FAMILY = 2147483647} CPSS_PP_SUB_FAMILY_TYPE_ENT;
typedef CPSS_TRUNK_MEMBER_STC CPSS_TRUNK_MEMBER_STC;
typedef enum {CPSS_UNICAST_E, CPSS_MULTICAST_E, CPSS_UNICAST_MULTICAST_E} CPSS_UNICAST_MULTICAST_ENT;
typedef unsigned int GT_DATA_PATH_BMP;
typedef GT_ETHERADDR GT_ETHERADDR;
typedef unsigned int GT_HW_DEV_NUM;
typedef GT_IPADDR GT_IPADDR;
typedef GT_IPV6ADDR GT_IPV6ADDR;
typedef unsigned int GT_PHYSICAL_PORT_NUM;
typedef unsigned int GT_PORT_GROUPS_BMP;
typedef unsigned int GT_PORT_NUM;
typedef unsigned int GT_SW_DEV_NUM;
typedef unsigned short GT_TRUNK_ID;

File ../cpss/common/h/cpss/common/diag/cpssCommonDiag.h:
CPSS_DIAG_DATA_INTEGRITY_DFX_INSTANCE_STC;
typedef enum {CPSS_DIAG_DATA_INTEGRITY_DFX_INSTANCE_TILE_E, 
    CPSS_DIAG_DATA_INTEGRITY_DFX_INSTANCE_CHIPLET_E} CPSS_DIAG_DATA_INTEGRITY_DFX_INSTANCE_ENT;
typedef CPSS_DIAG_DATA_INTEGRITY_DFX_INSTANCE_STC CPSS_DIAG_DATA_INTEGRITY_DFX_INSTANCE_STC;

File ../cpss/common/h/cpss/common/diag/private/prvCpssCommonDiag.h:
PRV_CPSS_DIAG_STC;
typedef GT_STATUS (*)(GT_U8, GT_U32, GT_U32, GT_U32, GT_U32 *) PRV_CPSS_DFX_CLIENT_REG_READ_FUNC;
typedef GT_STATUS (*)(GT_U8, GT_U32) PRV_CPSS_DFX_MEMORY_PIPE_ID_SET_FUNC;
typedef GT_STATUS (*)(GT_U8, GT_U32, GT_U32, GT_U32, GT_U32, GT_U32 *) PRV_CPSS_DFX_MEMORY_REG_READ_FUNC;
typedef GT_STATUS (*)(GT_U8, GT_U32, GT_U32, GT_U32, GT_U32, GT_U32) PRV_CPSS_DFX_MEMORY_REG_WRITE_FUNC;
typedef GT_STATUS (*)(GT_U8, GT_U32 *) PRV_CPSS_DFX_PIPES_BMP_GET_FUNC;
typedef PRV_CPSS_DIAG_STC PRV_CPSS_DIAG_STC;

File ../cpss/common/h/cpss/common/labServices/port/gop/port/mvHwsPortInitIf.h:
typedef enum {_100Base_FX, SGMII, _1000Base_X, SGMII2_5, QSGMII, _10GBase_KX4, _10GBase_KX2, _10GBase_KR, _20GBase_KR2, _40GBase_KR, 
    _100GBase_KR10, HGL, RHGL, CHGL, RXAUI, _20GBase_KX4, _10GBase_SR_LR, _20GBase_SR_LR2, _40GBase_SR_LR, _12_1GBase_KR, XLHGL_KR4, 
    HGL16G, HGS, HGS4, _100GBase_SR10, CHGL_LR12, TCAM, INTLKN_12Lanes_6_25G, INTLKN_16Lanes_6_25G, INTLKN_24Lanes_6_25G, 
    INTLKN_12Lanes_10_3125G, INTLKN_16Lanes_10_3125G, INTLKN_12Lanes_12_5G, INTLKN_16Lanes_12_5G, INTLKN_16Lanes_3_125G, 
    INTLKN_24Lanes_3_125G, CHGL11_LR12, INTLKN_4Lanes_3_125G, INTLKN_8Lanes_3_125G, INTLKN_4Lanes_6_25G, INTLKN_8Lanes_6_25G, 
    _2_5GBase_QX, _5GBase_DQX, _5GBase_HX, _12GBaseR, _5_625GBaseR, _48GBaseR, _12GBase_SR, _48GBase_SR, _5GBaseR, _22GBase_SR, 
    _24GBase_KR2, _12_5GBase_KR, _25GBase_KR2, _50GBase_KR4, _25GBase_KR, _50GBase_KR2, _100GBase_KR4, _25GBase_SR, _50GBase_SR2, 
    _100GBase_SR4, _100GBase_MLG, _107GBase_KR4, _25GBase_KR_C, _50GBase_KR2_C, _40GBase_KR2, _29_09GBase_SR4, _40GBase_CR4, 
    _25GBase_CR, _50GBase_CR2, _100GBase_CR4, _25GBase_KR_S, _25GBase_CR_S, _25GBase_CR_C, _50GBase_CR2_C, _50GBase_KR, 
    _100GBase_KR2, _200GBase_KR4, _200GBase_KR8, _400GBase_KR8, _102GBase_KR4, _52_5GBase_KR2, _40GBase_KR4, _26_7GBase_KR, 
    _40GBase_SR_LR4, _50GBase_CR, _100GBase_CR2, _200GBase_CR4, _200GBase_CR8, _400GBase_CR8, _200GBase_SR_LR4, _200GBase_SR_LR8, 
    _400GBase_SR_LR8, _50GBase_SR_LR, _100GBase_SR_LR2, _20GBase_KR, _106GBase_KR4, _2_5G_SXGMII, _5G_SXGMII, _10G_SXGMII, 
    _5G_DXGMII, _10G_DXGMII, _20G_DXGMII, _5G_QUSGMII, _10G_QXGMII, _20G_QXGMII, _10G_OUSGMII, _20G_OXGMII, _42GBase_KR4, 
    _53GBase_KR2, _424GBase_KR8, _2500Base_X, _212GBase_KR4, _106GBase_KR2, NON_SUP_MODE, LAST_PORT_MODE = 114} MV_HWS_PORT_STANDARD;

File ../cpss/common/h/cpss/common/networkIf/cpssGenNetIfTypes.h:
typedef enum {CPSS_NET_CPU_PORT_MODE_SDMA_E, CPSS_NET_CPU_PORT_MODE_MII_E, CPSS_NET_CPU_PORT_MODE_NONE_E} CPSS_NET_CPU_PORT_MODE_ENT;
typedef struct {
    GT_U32 counterArray[128];
} CPSS_NET_SDMA_RX_ERROR_COUNTERS_STC;

File ../cpss/common/h/cpss/common/phy/cpssGenPhySmi.h:
CPSS_VCT_GEN_BIND_FUNC_STC;
typedef enum {CPSS_PHY_SMI_INTERFACE_0_E, CPSS_PHY_SMI_INTERFACE_1_E, CPSS_PHY_SMI_INTERFACE_2_E, CPSS_PHY_SMI_INTERFACE_3_E, 
    CPSS_PHY_SMI_INTERFACE_MAX_E, CPSS_PHY_SMI_INTERFACE_INVALID_E = -1} CPSS_PHY_SMI_INTERFACE_ENT;
typedef enum {CPSS_PHY_XSMI_INTERFACE_0_E, CPSS_PHY_XSMI_INTERFACE_1_E, CPSS_PHY_XSMI_INTERFACE_2_E, CPSS_PHY_XSMI_INTERFACE_3_E, 
    CPSS_PHY_XSMI_INTERFACE_4_E, CPSS_PHY_XSMI_INTERFACE_5_E, CPSS_PHY_XSMI_INTERFACE_6_E, CPSS_PHY_XSMI_INTERFACE_7_E, 
    CPSS_PHY_XSMI_INTERFACE_8_E, CPSS_PHY_XSMI_INTERFACE_9_E, CPSS_PHY_XSMI_INTERFACE_10_E, CPSS_PHY_XSMI_INTERFACE_11_E, 
    CPSS_PHY_XSMI_INTERFACE_12_E, CPSS_PHY_XSMI_INTERFACE_13_E, CPSS_PHY_XSMI_INTERFACE_14_E, CPSS_PHY_XSMI_INTERFACE_15_E, 
    CPSS_PHY_XSMI_INTERFACE_MAX_E} CPSS_PHY_XSMI_INTERFACE_ENT;
typedef CPSS_VCT_GEN_BIND_FUNC_STC CPSS_VCT_GEN_BIND_FUNC_STC;
typedef GT_STATUS (*)(GT_U8, GT_PHYSICAL_PORT_NUM, GT_BOOL *) CPSS_VCT_PHY_AUTONEG_GET_FUN;
typedef GT_STATUS (*)(GT_U8, GT_PHYSICAL_PORT_NUM, GT_BOOL) CPSS_VCT_PHY_AUTONEG_SET_FUN;
typedef GT_STATUS (*)(GT_U8, GT_PHYSICAL_PORT_NUM, GT_U8, GT_U16 *) CPSS_VCT_PHY_READ_PHY_REGISTER_FUN;
typedef GT_STATUS (*)(GT_U8, GT_PHYSICAL_PORT_NUM, GT_U8, GT_U16) CPSS_VCT_PHY_WRITE_PHY_REGISTER_FUN;

File ../cpss/common/h/cpss/common/phy/private/prvCpssPhy.h:
PRV_CPSS_PHY_INFO_STC;
PRV_CPSS_PHY_PORT_SMI_IF_INFO_STC;
PRV_CPSS_SMI_GEN_BIND_FUNC_STC;
PRV_CPSS_XSMI_GEN_BIND_FUNC_STC;
typedef PRV_CPSS_PHY_INFO_STC PRV_CPSS_PHY_INFO_STC;
typedef PRV_CPSS_PHY_PORT_SMI_IF_INFO_STC PRV_CPSS_PHY_PORT_SMI_IF_INFO_STC;
typedef PRV_CPSS_SMI_GEN_BIND_FUNC_STC PRV_CPSS_SMI_GEN_BIND_FUNC_STC;
typedef GT_STATUS (*)(GT_U8, CPSS_PHY_SMI_INTERFACE_ENT, GT_U32 *) PRV_CPSS_SMI_PHY_MNG_REGISTERS_ADDR_GET_FUN;
typedef PRV_CPSS_XSMI_GEN_BIND_FUNC_STC PRV_CPSS_XSMI_GEN_BIND_FUNC_STC;
typedef GT_STATUS (*)(GT_U8, CPSS_PHY_XSMI_INTERFACE_ENT, GT_U32 *, GT_U32 *) PRV_CPSS_XSMI_PHY_MNG_REGISTERS_ADDR_GET_FUN;

File ../cpss/common/h/cpss/common/port/cpssPortCtrl.h:
CPSS_PORT_AP_PARAMS_STC;
CPSS_PORT_AP_SERDES_TX_OFFSETS_STC;
CPSS_PORT_AP_STATUS_STC;
CPSS_PORT_ATTRIBUTES_STC;
CPSS_PORT_AVAGO_SERDES_RX_CONFIG_STC;
CPSS_PORT_AVAGO_SERDES_TX_CONFIG_STC;
CPSS_PORT_COMPHY_C112G_RX_CONFIG_STC;
CPSS_PORT_COMPHY_C112G_TX_CONFIG_STC;
CPSS_PORT_COMPHY_C12GP41P2V_RX_CONFIG_STC;
CPSS_PORT_COMPHY_C12G_TX_CONFIG_STC;
CPSS_PORT_COMPHY_C28GP4_RX_CONFIG_STC;
CPSS_PORT_COMPHY_C28G_TX_CONFIG_STC;
CPSS_PORT_COMPHY_SERDES_RX_CONFIG_STC;
CPSS_PORT_COMPHY_SERDES_TX_CONFIG_STC;
CPSS_PORT_MAC_STATUS_STC;
CPSS_PORT_MODE_SPEED_STC;
CPSS_PORT_SERDES_RX_CONFIG_UNT;
CPSS_PORT_SERDES_TUNE_STC;
CPSS_PORT_SERDES_TX_CONFIG_UNT;
typedef enum {CPSS_PORT_AP_FLOW_CONTROL_SYMMETRIC_E, CPSS_PORT_AP_FLOW_CONTROL_ASYMMETRIC_E} CPSS_PORT_AP_FLOW_CONTROL_ENT;
typedef CPSS_PORT_AP_PARAMS_STC CPSS_PORT_AP_PARAMS_STC;
typedef CPSS_PORT_AP_SERDES_TX_OFFSETS_STC CPSS_PORT_AP_SERDES_TX_OFFSETS_STC;
typedef CPSS_PORT_AP_STATUS_STC CPSS_PORT_AP_STATUS_STC;
typedef CPSS_PORT_ATTRIBUTES_STC CPSS_PORT_ATTRIBUTES_STC;
typedef CPSS_PORT_AVAGO_SERDES_RX_CONFIG_STC CPSS_PORT_AVAGO_SERDES_RX_CONFIG_STC;
typedef CPSS_PORT_AVAGO_SERDES_TX_CONFIG_STC CPSS_PORT_AVAGO_SERDES_TX_CONFIG_STC;
typedef CPSS_PORT_COMPHY_C112G_RX_CONFIG_STC CPSS_PORT_COMPHY_C112G_RX_CONFIG_STC;
typedef CPSS_PORT_COMPHY_C112G_TX_CONFIG_STC CPSS_PORT_COMPHY_C112G_TX_CONFIG_STC;
typedef CPSS_PORT_COMPHY_C12GP41P2V_RX_CONFIG_STC CPSS_PORT_COMPHY_C12GP41P2V_RX_CONFIG_STC;
typedef CPSS_PORT_COMPHY_C12G_TX_CONFIG_STC CPSS_PORT_COMPHY_C12G_TX_CONFIG_STC;
typedef CPSS_PORT_COMPHY_C28GP4_RX_CONFIG_STC CPSS_PORT_COMPHY_C28GP4_RX_CONFIG_STC;
typedef CPSS_PORT_COMPHY_C28G_TX_CONFIG_STC CPSS_PORT_COMPHY_C28G_TX_CONFIG_STC;
typedef CPSS_PORT_COMPHY_SERDES_RX_CONFIG_STC CPSS_PORT_COMPHY_SERDES_RX_CONFIG_STC;
typedef CPSS_PORT_COMPHY_SERDES_TX_CONFIG_STC CPSS_PORT_COMPHY_SERDES_TX_CONFIG_STC;
typedef enum {CPSS_PORT_DIRECTION_RX_E, CPSS_PORT_DIRECTION_TX_E, CPSS_PORT_DIRECTION_BOTH_E} CPSS_PORT_DIRECTION_ENT;
typedef enum {CPSS_PORT_FULL_DUPLEX_E, CPSS_PORT_HALF_DUPLEX_E} CPSS_PORT_DUPLEX_ENT;
typedef enum {CPSS_PORT_FEC_MODE_ENABLED_E, CPSS_PORT_FEC_MODE_DISABLED_E, CPSS_PORT_RS_FEC_MODE_ENABLED_E, 
    CPSS_PORT_BOTH_FEC_MODE_ENABLED_E, CPSS_PORT_RS_FEC_544_514_MODE_ENABLED_E, CPSS_PORT_FEC_MODE_LAST_E} CPSS_PORT_FEC_MODE_ENT;
typedef enum {CPSS_PORT_FLOW_CONTROL_DISABLE_E, CPSS_PORT_FLOW_CONTROL_RX_TX_E, CPSS_PORT_FLOW_CONTROL_RX_ONLY_E, 
    CPSS_PORT_FLOW_CONTROL_TX_ONLY_E} CPSS_PORT_FLOW_CONTROL_ENT;
typedef enum {CPSS_PORT_INTERFACE_MODE_REDUCED_10BIT_E, CPSS_PORT_INTERFACE_MODE_REDUCED_GMII_E, CPSS_PORT_INTERFACE_MODE_MII_E, 
    CPSS_PORT_INTERFACE_MODE_SGMII_E, CPSS_PORT_INTERFACE_MODE_XGMII_E, CPSS_PORT_INTERFACE_MODE_MGMII_E, 
    CPSS_PORT_INTERFACE_MODE_1000BASE_X_E, CPSS_PORT_INTERFACE_MODE_GMII_E, CPSS_PORT_INTERFACE_MODE_MII_PHY_E, 
    CPSS_PORT_INTERFACE_MODE_QX_E, CPSS_PORT_INTERFACE_MODE_HX_E, CPSS_PORT_INTERFACE_MODE_RXAUI_E, 
    CPSS_PORT_INTERFACE_MODE_100BASE_FX_E, CPSS_PORT_INTERFACE_MODE_QSGMII_E, CPSS_PORT_INTERFACE_MODE_XLG_E, 
    CPSS_PORT_INTERFACE_MODE_LOCAL_XGMII_E, CPSS_PORT_INTERFACE_MODE_NO_SERDES_PORT_E = 15, CPSS_PORT_INTERFACE_MODE_KR_E, 
    CPSS_PORT_INTERFACE_MODE_HGL_E, CPSS_PORT_INTERFACE_MODE_CHGL_12_E, CPSS_PORT_INTERFACE_MODE_ILKN12_E, 
    CPSS_PORT_INTERFACE_MODE_SR_LR_E, CPSS_PORT_INTERFACE_MODE_ILKN16_E, CPSS_PORT_INTERFACE_MODE_ILKN24_E, 
    CPSS_PORT_INTERFACE_MODE_ILKN4_E, CPSS_PORT_INTERFACE_MODE_ILKN8_E, CPSS_PORT_INTERFACE_MODE_XHGS_E, 
    CPSS_PORT_INTERFACE_MODE_XHGS_SR_E, CPSS_PORT_INTERFACE_MODE_KR2_E, CPSS_PORT_INTERFACE_MODE_KR4_E, 
    CPSS_PORT_INTERFACE_MODE_SR_LR2_E, CPSS_PORT_INTERFACE_MODE_SR_LR4_E, CPSS_PORT_INTERFACE_MODE_MLG_40G_10G_40G_10G_E, 
    CPSS_PORT_INTERFACE_MODE_KR_C_E, CPSS_PORT_INTERFACE_MODE_CR_C_E, CPSS_PORT_INTERFACE_MODE_KR2_C_E, 
    CPSS_PORT_INTERFACE_MODE_CR2_C_E, CPSS_PORT_INTERFACE_MODE_CR_E, CPSS_PORT_INTERFACE_MODE_CR2_E, CPSS_PORT_INTERFACE_MODE_CR4_E, 
    CPSS_PORT_INTERFACE_MODE_KR_S_E, CPSS_PORT_INTERFACE_MODE_CR_S_E, CPSS_PORT_INTERFACE_MODE_KR8_E, 
    CPSS_PORT_INTERFACE_MODE_CR8_E, CPSS_PORT_INTERFACE_MODE_SR_LR8_E, CPSS_PORT_INTERFACE_MODE_USX_2_5G_SXGMII_E, 
    CPSS_PORT_INTERFACE_MODE_USX_5G_SXGMII_E, CPSS_PORT_INTERFACE_MODE_USX_10G_SXGMII_E, CPSS_PORT_INTERFACE_MODE_USX_5G_DXGMII_E, 
    CPSS_PORT_INTERFACE_MODE_USX_10G_DXGMII_E, CPSS_PORT_INTERFACE_MODE_USX_20G_DXGMII_E, CPSS_PORT_INTERFACE_MODE_USX_QUSGMII_E, 
    CPSS_PORT_INTERFACE_MODE_USX_10G_QXGMII_E, CPSS_PORT_INTERFACE_MODE_USX_20G_QXGMII_E, CPSS_PORT_INTERFACE_MODE_USX_OUSGMII_E, 
    CPSS_PORT_INTERFACE_MODE_USX_20G_OXGMII_E, CPSS_PORT_INTERFACE_MODE_2500BASE_X_E, CPSS_PORT_INTERFACE_MODE_REMOTE_E, 
    CPSS_PORT_INTERFACE_MODE_NA_E, CPSS_PORT_INTERFACE_MODE_NA_HCD_E = 255} CPSS_PORT_INTERFACE_MODE_ENT;
typedef CPSS_PORT_MAC_STATUS_STC CPSS_PORT_MAC_STATUS_STC;
typedef struct {
    GT_U8 serdesLanes[10];
} CPSS_PORT_MAC_TO_SERDES_STC;
typedef enum {CPSS_PORT_MAC_TYPE_NOT_EXISTS_E, CPSS_PORT_MAC_TYPE_FE_E, CPSS_PORT_MAC_TYPE_GE_E, CPSS_PORT_MAC_TYPE_XG_E, 
    CPSS_PORT_MAC_TYPE_XLG_E, CPSS_PORT_MAC_TYPE_HGL_E, CPSS_PORT_MAC_TYPE_CG_E, CPSS_PORT_MAC_TYPE_ILKN_E, 
    CPSS_PORT_MAC_TYPE_MTI_100_E, CPSS_PORT_MAC_TYPE_MTI_400_E, CPSS_PORT_MAC_TYPE_MTI_CPU_E, CPSS_PORT_MAC_TYPE_MTI_USX_E, 
    CPSS_PORT_MAC_TYPE_NOT_APPLICABLE_E, CPSS_PORT_MAC_TYPE_LAST_E = 12} CPSS_PORT_MAC_TYPE_ENT;
typedef CPSS_PORT_MODE_SPEED_STC CPSS_PORT_MODE_SPEED_STC;
typedef enum {CPSS_PORT_PA_BW_MODE_REGULAR_E, CPSS_PORT_PA_BW_EXT_MODE_1_E, CPSS_PORT_PA_BW_EXT_MODE_2_E, 
    CPSS_PORT_PA_BW_EXT_MODE_3_E, CPSS_PORT_PA_BW_EXT_MODE_4_E, CPSS_PORT_PA_BW_EXT_MODE_5_E, CPSS_PORT_PA_BW_EXT_MODE_6_E, 
    CPSS_PORT_PA_BW_EXT_MODE_7_E, CPSS_PORT_PA_BW_EXT_MODE_8_E, CPSS_PORT_PA_BW_MODE_LAST_E} CPSS_PORT_PA_BW_MODE_ENT;
typedef enum {CPSS_PORT_PCS_LOOPBACK_DISABLE_E, CPSS_PORT_PCS_LOOPBACK_TX2RX_E, 
    CPSS_PORT_PCS_LOOPBACK_RX2TX_E} CPSS_PORT_PCS_LOOPBACK_MODE_ENT;
typedef enum {CPSS_PORT_PERIODIC_FLOW_CONTROL_DISABLE_E, CPSS_PORT_PERIODIC_FLOW_CONTROL_XON_XOFF_E, 
    CPSS_PORT_PERIODIC_FLOW_CONTROL_XON_ONLY_E, 
    CPSS_PORT_PERIODIC_FLOW_CONTROL_XOFF_ONLY_E} CPSS_PORT_PERIODIC_FLOW_CONTROL_TYPE_ENT;
typedef enum {CPSS_PORT_REF_CLOCK_SOURCE_PRIMARY_E, CPSS_PORT_REF_CLOCK_SOURCE_SECONDARY_E, 
    CPSS_PORT_REF_CLOCK_SOURCE_LAST_E} CPSS_PORT_REF_CLOCK_SOURCE_ENT;
typedef enum {CPSS_PORT_RX_FC_PROFILE_1_E, CPSS_PORT_RX_FC_PROFILE_2_E, CPSS_PORT_RX_FC_PROFILE_3_E, CPSS_PORT_RX_FC_PROFILE_4_E, 
    CPSS_PORT_RX_FC_PROFILE_5_E, CPSS_PORT_RX_FC_PROFILE_6_E, CPSS_PORT_RX_FC_PROFILE_7_E, 
    CPSS_PORT_RX_FC_PROFILE_8_E} CPSS_PORT_RX_FC_PROFILE_SET_ENT;
typedef enum {CPSS_PORT_SERDES_AUTO_TUNE_MODE_TX_TRAINING_CFG_E, CPSS_PORT_SERDES_AUTO_TUNE_MODE_TX_TRAINING_START_E, 
    CPSS_PORT_SERDES_AUTO_TUNE_MODE_TX_TRAINING_STATUS_E, CPSS_PORT_SERDES_AUTO_TUNE_MODE_RX_TRAINING_E, 
    CPSS_PORT_SERDES_AUTO_TUNE_MODE_TRAINING_STOP_E, CPSS_PORT_SERDES_AUTO_TUNE_MODE_ADAPTIVE_RX_TRAINING_START_E, 
    CPSS_PORT_SERDES_AUTO_TUNE_MODE_ADAPTIVE_RX_TRAINING_STOP_E, CPSS_PORT_SERDES_AUTO_TUNE_MODE_ENHANCE_E, 
    CPSS_PORT_SERDES_AUTO_TUNE_MODE_EDGE_DETECT_E, CPSS_PORT_SERDES_AUTO_TUNE_MODE_RX_TRAINING_WAIT_FOR_FINISH_E, 
    CPSS_PORT_SERDES_AUTO_TUNE_MODE_RX_TRAINING_VSR_E, CPSS_PORT_SERDES_AUTO_TUNE_MODE_FIXED_CTLE_E, 
    CPSS_PORT_SERDES_AUTO_TUNE_MODE_LAST_E} CPSS_PORT_SERDES_AUTO_TUNE_MODE_ENT;
typedef enum {CPSS_PORT_SERDES_AUTO_TUNE_PASS_E, CPSS_PORT_SERDES_AUTO_TUNE_FAIL_E, 
    CPSS_PORT_SERDES_AUTO_TUNE_NOT_COMPLITED_E} CPSS_PORT_SERDES_AUTO_TUNE_STATUS_ENT;
typedef enum {CPSS_PORT_SERDES_LOOPBACK_DISABLE_E, CPSS_PORT_SERDES_LOOPBACK_ANALOG_TX2RX_E, 
    CPSS_PORT_SERDES_LOOPBACK_DIGITAL_TX2RX_E, CPSS_PORT_SERDES_LOOPBACK_DIGITAL_RX2TX_E, 
    CPSS_PORT_SERDES_LOOPBACK_MAX_E} CPSS_PORT_SERDES_LOOPBACK_MODE_ENT;
typedef struct {
    CPSS_PORT_SERDES_TYPE_ENT type;
    CPSS_PORT_SERDES_RX_CONFIG_UNT rxTune;
} CPSS_PORT_SERDES_RX_CONFIG_STC;
typedef CPSS_PORT_SERDES_RX_CONFIG_UNT CPSS_PORT_SERDES_RX_CONFIG_UNT;
typedef enum {CPSS_PORT_SERDES_SPEED_1_25_E, CPSS_PORT_SERDES_SPEED_3_125_E, CPSS_PORT_SERDES_SPEED_3_75_E, 
    CPSS_PORT_SERDES_SPEED_6_25_E, CPSS_PORT_SERDES_SPEED_5_E, CPSS_PORT_SERDES_SPEED_4_25_E, CPSS_PORT_SERDES_SPEED_2_5_E, 
    CPSS_PORT_SERDES_SPEED_5_156_E, CPSS_PORT_SERDES_SPEED_10_3125_E, CPSS_PORT_SERDES_SPEED_3_333_E, CPSS_PORT_SERDES_SPEED_12_5_E, 
    CPSS_PORT_SERDES_SPEED_7_5_E, CPSS_PORT_SERDES_SPEED_11_25_E, CPSS_PORT_SERDES_SPEED_11_5625_E, 
    CPSS_PORT_SERDES_SPEED_10_9375_E, CPSS_PORT_SERDES_SPEED_12_1875_E, CPSS_PORT_SERDES_SPEED_5_625_E, 
    CPSS_PORT_SERDES_SPEED_12_8906_E, CPSS_PORT_SERDES_SPEED_20_625_E, CPSS_PORT_SERDES_SPEED_25_78125_E, 
    CPSS_PORT_SERDES_SPEED_27_5_E, CPSS_PORT_SERDES_SPEED_28_05_E, CPSS_PORT_SERDES_SPEED_26_25_E, CPSS_PORT_SERDES_SPEED_27_1_E, 
    CPSS_PORT_SERDES_SPEED_NA_E} CPSS_PORT_SERDES_SPEED_ENT;
typedef CPSS_PORT_SERDES_TUNE_STC CPSS_PORT_SERDES_TUNE_STC;
typedef CPSS_PORT_SERDES_TUNE_STC * CPSS_PORT_SERDES_TUNE_STC_PTR;
typedef struct {
    CPSS_PORT_SERDES_TYPE_ENT type;
    CPSS_PORT_SERDES_TX_CONFIG_UNT txTune;
} CPSS_PORT_SERDES_TX_CONFIG_STC;
typedef CPSS_PORT_SERDES_TX_CONFIG_UNT CPSS_PORT_SERDES_TX_CONFIG_UNT;
typedef enum {CPSS_PORT_SERDES_COMPHY_H_E, CPSS_PORT_SERDES_AVAGO_E, CPSS_PORT_SERDES_COMPHY_C12G_E, CPSS_PORT_SERDES_COMPHY_C28G_E, 
    CPSS_PORT_SERDES_COMPHY_C112G_E, CPSS_PORT_SERDES_TYPE_LAST_E} CPSS_PORT_SERDES_TYPE_ENT;
typedef enum {CPSS_PORT_SPEED_10_E, CPSS_PORT_SPEED_100_E, CPSS_PORT_SPEED_1000_E, CPSS_PORT_SPEED_10000_E, CPSS_PORT_SPEED_12000_E, 
    CPSS_PORT_SPEED_2500_E, CPSS_PORT_SPEED_5000_E, CPSS_PORT_SPEED_13600_E, CPSS_PORT_SPEED_20000_E, CPSS_PORT_SPEED_40000_E, 
    CPSS_PORT_SPEED_16000_E, CPSS_PORT_SPEED_15000_E, CPSS_PORT_SPEED_75000_E, CPSS_PORT_SPEED_100G_E, CPSS_PORT_SPEED_50000_E, 
    CPSS_PORT_SPEED_140G_E, CPSS_PORT_SPEED_11800_E, CPSS_PORT_SPEED_47200_E, CPSS_PORT_SPEED_22000_E, CPSS_PORT_SPEED_23600_E, 
    CPSS_PORT_SPEED_12500_E, CPSS_PORT_SPEED_25000_E, CPSS_PORT_SPEED_107G_E, CPSS_PORT_SPEED_29090_E, CPSS_PORT_SPEED_200G_E, 
    CPSS_PORT_SPEED_400G_E, CPSS_PORT_SPEED_102G_E, CPSS_PORT_SPEED_52500_E, CPSS_PORT_SPEED_26700_E, CPSS_PORT_SPEED_106G_E, 
    CPSS_PORT_SPEED_42000_E, CPSS_PORT_SPEED_53000_E, CPSS_PORT_SPEED_424G_E, CPSS_PORT_SPEED_212G_E, CPSS_PORT_SPEED_REMOTE_E, 
    CPSS_PORT_SPEED_NA_E, CPSS_PORT_SPEED_NA_HCD_E = 255} CPSS_PORT_SPEED_ENT;
typedef enum {CPSS_SERDES_TERMINATION_GND, CPSS_SERDES_TERMINATION_VDD, CPSS_SERDES_TERMINATION_FLOATING} CPSS_SERDES_TERMINATION;

File ../cpss/common/h/cpss/common/port/cpssPortManager.h:
CPSS_PORT_MANAGER_GLOBAL_PARAMS_STC;
CPSS_PORT_MANAGER_LKB_CONFIG_STC;
CPSS_PORT_MANAGER_LOOPBACK_CONFIG_STC;
CPSS_PORT_MANAGER_SGMII_AUTO_NEGOTIATION_STC;
CPSS_PORT_MANAGER_SIGNAL_DETECT_CONFIG_STC;
CPSS_PORT_MANAGER_STATISTICS_STC;
typedef enum {CPSS_PM_AP_LANE_SERDES_SPEED_10000_E, CPSS_PM_AP_LANE_SERDES_SPEED_25000_E, CPSS_PM_AP_LANE_SERDES_SPEED_PAM4_E, 
    CPSS_PM_AP_LANE_SERDES_SPEED_NONE_E} CPSS_PM_AP_LANE_SERDES_SPEED;
typedef struct {
    GT_U32 validApLaneParamsBitMask;
    CPSS_PORT_SERDES_TX_CONFIG_STC txParams;
    CPSS_PORT_SERDES_RX_CONFIG_STC rxParams;
    GT_U8 etlMinDelay;
    GT_U8 etlMaxDelay;
} CPSS_PM_AP_MODE_LANE_PARAM_STC;
typedef struct {
    CPSS_PORT_INTERFACE_MODE_ENT ifMode;
    CPSS_PORT_SPEED_ENT speed;
    CPSS_PORT_FEC_MODE_ENT fecSupported;
    CPSS_PORT_FEC_MODE_ENT fecRequested;
} CPSS_PM_AP_PORT_ADV_STC;
typedef struct {
    GT_U32 validAttrsBitMask;
    GT_BOOL nonceDisable;
    GT_BOOL fcPause;
    CPSS_PORT_AP_FLOW_CONTROL_ENT fcAsmDir;
    GT_U32 negotiationLaneNum;
    CPSS_PM_AP_MODE_LANE_PARAM_STC overrideLaneParams[3][8];
    CPSS_PORT_MANAGER_LKB_CONFIG_STC linkBinding;
    GT_U32 portExtraOperation;
    CPSS_PORT_MANAGER_INTERCONNECT_PROFILE_ENT interconnectProfile;
    GT_BOOL skipRes;
} CPSS_PM_AP_PORT_ATTR_STC;
typedef struct {
    GT_U32 numOfModes;
    CPSS_PM_AP_PORT_ADV_STC modesArr[10];
    CPSS_PM_AP_PORT_ATTR_STC apAttrs;
} CPSS_PM_AP_PORT_PARAMS_STC;
typedef struct {
    GT_U8 minLF;
    GT_U8 maxLF;
} CPSS_PM_ET_OVERRIDE_CFG_STC;
typedef enum {CPSS_PM_MAC_PREEMPTION_DISABLED_E, CPSS_PM_MAC_PREEMPTION_ENABLED_AGGREGATED_E, 
    CPSS_PM_MAC_PREEMPTION_ENABLED_SEPARATED_E} CPSS_PM_MAC_PREEMPTION_TYPE_ENT;
typedef struct {
    GT_U32 validLaneParamsBitMask;
    GT_U16 globalLaneNum;
    CPSS_PORT_SERDES_TX_CONFIG_STC txParams;
    CPSS_PORT_SERDES_RX_CONFIG_STC rxParams;
} CPSS_PM_MODE_LANE_PARAM_STC;
typedef struct {
    GT_U32 validAttrsBitMask;
    CPSS_PORT_SERDES_AUTO_TUNE_MODE_ENT trainMode;
    GT_BOOL adaptRxTrainSupp;
    GT_BOOL edgeDetectSupported;
    CPSS_PORT_MANAGER_LOOPBACK_CONFIG_STC loopback;
    CPSS_PM_ET_OVERRIDE_CFG_STC etOverride;
    CPSS_PORT_FEC_MODE_ENT fecMode;
    CPSS_PORT_MANAGER_CALIBRATION_MODE_STC calibrationMode;
    CPSS_PORT_MANAGER_UNMASK_EVENTS_MODE_ENT unMaskEventsMode;
    CPSS_PORT_PA_BW_MODE_ENT bwMode;
    CPSS_PORT_MANAGER_LKB_CONFIG_STC linkBinding;
    GT_U32 portExtraOperation;
    CPSS_PORT_MANAGER_INTERCONNECT_PROFILE_ENT interconnectProfile;
    CPSS_PM_MAC_PREEMPTION_TYPE_ENT preemptionFeature;
    CPSS_PORT_MANAGER_SGMII_AUTO_NEGOTIATION_STC autoNegotiation;
} CPSS_PM_PORT_ATTR_STC;
typedef struct {
    CPSS_PORT_MANAGER_PORT_TYPE_ENT portType;
    GT_U32 magic;
    CPSS_PM_PORT_PARAMS_TYPE_UNT portParamsType;
} CPSS_PM_PORT_PARAMS_STC;
typedef union {
    CPSS_PM_PORT_REG_PARAMS_STC regPort;
    CPSS_PM_AP_PORT_PARAMS_STC apPort;
} CPSS_PM_PORT_PARAMS_TYPE_UNT;
typedef struct {
    CPSS_PORT_INTERFACE_MODE_ENT ifMode;
    CPSS_PORT_SPEED_ENT speed;
    CPSS_PM_MODE_LANE_PARAM_STC laneParams[8];
    CPSS_PM_PORT_ATTR_STC portAttributes;
} CPSS_PM_PORT_REG_PARAMS_STC;
typedef enum {CPSS_PORT_MANAGER_AN_RESOLUTION_BIT_32_E, CPSS_PORT_MANAGER_AN_RESOLUTION_BIT_33_E, 
    CPSS_PORT_MANAGER_AN_RESOLUTION_BIT_34_E, CPSS_PORT_MANAGER_AN_RESOLUTION_BIT_35_E, CPSS_PORT_MANAGER_AN_RESOLUTION_BIT_36_E, 
    CPSS_PORT_MANAGER_AN_RESOLUTION_BIT_37_E, CPSS_PORT_MANAGER_AN_RESOLUTION_BIT_38_E, CPSS_PORT_MANAGER_AN_RESOLUTION_BIT_39_E, 
    CPSS_PORT_MANAGER_AN_RESOLUTION_BIT_LAST_E} CPSS_PORT_MANAGER_AN_RESOLUTION_BIT_ENT;
typedef struct {
    CPSS_PORT_MANAGER_CALIBRATION_TYPE_ENT calibrationType;
    CPSS_PORT_MANAGER_CONFIDENCE_DATA_CONFIG_STC confidenceCfg;
} CPSS_PORT_MANAGER_CALIBRATION_MODE_STC;
typedef enum {CPSS_PORT_MANAGER_DEFAULT_CALIBRATION_TYPE_E, CPSS_PORT_MANAGER_OPTICAL_CALIBRATION_TYPE_E, 
    CPSS_PORT_MANAGER_CALIBRATION_TYPE_LAST_E} CPSS_PORT_MANAGER_CALIBRATION_TYPE_ENT;
typedef struct {
    GT_U32 lfMinThreshold;
    GT_U32 lfMaxThreshold;
    GT_U32 hfMinThreshold;
    GT_U32 hfMaxThreshold;
    GT_U32 eoMinThreshold;
    GT_U32 eoMaxThreshold;
    GT_U32 confidenceEnableBitMap;
    GT_U32 calibrationTimeOutSec;
} CPSS_PORT_MANAGER_CONFIDENCE_DATA_CONFIG_STC;
typedef enum {CPSS_PORT_MANAGER_EVENT_CREATE_E, CPSS_PORT_MANAGER_EVENT_DELETE_E, CPSS_PORT_MANAGER_EVENT_ENABLE_E, 
    CPSS_PORT_MANAGER_EVENT_DISABLE_E, CPSS_PORT_MANAGER_EVENT_INIT_E, CPSS_PORT_MANAGER_EVENT_LOW_LEVEL_STATUS_CHANGED_E, 
    CPSS_PORT_MANAGER_EVENT_MAC_LEVEL_STATUS_CHANGED_E, CPSS_PORT_MANAGER_EVENT_PORT_AP_HCD_FOUND_E, 
    CPSS_PORT_MANAGER_EVENT_CREATE_AND_DISABLE_E, CPSS_PORT_MANAGER_EVENT_REMOTE_FAULT_TX_CHANGE_E, 
    CPSS_PORT_MANAGER_EVENT_PORT_AP_DISABLE_E, CPSS_PORT_MANAGER_EVENT_TYPE_LAST_E} CPSS_PORT_MANAGER_EVENT_ENT;
typedef enum {CPSS_PORT_MANAGER_FAILURE_NONE_E, CPSS_PORT_MANAGER_FAILURE_SIGNAL_STABILITY_FAILED_E, 
    CPSS_PORT_MANAGER_FAILURE_TRAINING_FAILED_E, CPSS_PORT_MANAGER_FAILURE_ALIGNMENT_TIMER_EXPIRED_E, 
    CPSS_PORT_MANAGER_FAILURE_CONFIDENCE_INTERVAL_TIMER_EXPIRED_E, CPSS_PORT_MANAGER_FAILURE_CREATE_PORT_FAILED_E, 
    CPSS_PORT_MANAGER_FAILURE_LAST_E} CPSS_PORT_MANAGER_FAILURE_ENT;
typedef CPSS_PORT_MANAGER_GLOBAL_PARAMS_STC CPSS_PORT_MANAGER_GLOBAL_PARAMS_STC;
typedef enum {CPSS_PORT_MANAGER_INTERCONNECT_PROFILE_DEFAULT_E, CPSS_PORT_MANAGER_INTERCONNECT_PROFILE_1_E, 
    CPSS_PORT_MANAGER_INTERCONNECT_PROFILE_2_E, 
    CPSS_PORT_MANAGER_INTERCONNECT_PROFILE_LAST_E} CPSS_PORT_MANAGER_INTERCONNECT_PROFILE_ENT;
typedef CPSS_PORT_MANAGER_LKB_CONFIG_STC CPSS_PORT_MANAGER_LKB_CONFIG_STC;
typedef CPSS_PORT_MANAGER_LOOPBACK_CONFIG_STC CPSS_PORT_MANAGER_LOOPBACK_CONFIG_STC;
typedef enum {CPSS_PORT_MANAGER_LOOPBACK_TYPE_MAC_E, CPSS_PORT_MANAGER_LOOPBACK_TYPE_SERDES_E, 
    CPSS_PORT_MANAGER_LOOPBACK_TYPE_LAST_E} CPSS_PORT_MANAGER_LOOPBACK_TYPE_ENT;
typedef enum {CPSS_PORT_MANAGER_PORT_TYPE_REGULAR_E, CPSS_PORT_MANAGER_PORT_TYPE_802_3AP_E, 
    CPSS_PORT_MANAGER_PORT_TYPE_LAST_E} CPSS_PORT_MANAGER_PORT_TYPE_ENT;
typedef enum {CPSS_PORT_MANAGER_RESET_E, CPSS_PORT_MANAGER_IN_PROGRESS_E, 
    CPSS_PORT_MANAGER_DONE_E} CPSS_PORT_MANAGER_PROGRESS_TYPE_ENT;
typedef CPSS_PORT_MANAGER_SGMII_AUTO_NEGOTIATION_STC CPSS_PORT_MANAGER_SGMII_AUTO_NEGOTIATION_STC;
typedef CPSS_PORT_MANAGER_SIGNAL_DETECT_CONFIG_STC CPSS_PORT_MANAGER_SIGNAL_DETECT_CONFIG_STC;
typedef enum {CPSS_PORT_MANAGER_STATE_RESET_E, CPSS_PORT_MANAGER_STATE_LINK_DOWN_E, CPSS_PORT_MANAGER_STATE_INIT_IN_PROGRESS_E, 
    CPSS_PORT_MANAGER_STATE_LINK_UP_E, CPSS_PORT_MANAGER_STATE_MAC_LINK_DOWN_E, CPSS_PORT_MANAGER_STATE_FAILURE_E, 
    CPSS_PORT_MANAGER_STATE_LAST_E} CPSS_PORT_MANAGER_STATE_ENT;
typedef CPSS_PORT_MANAGER_STATISTICS_STC CPSS_PORT_MANAGER_STATISTICS_STC;
typedef struct {
    CPSS_PORT_MANAGER_STATE_ENT portState;
    GT_BOOL portUnderOperDisable;
    CPSS_PORT_MANAGER_FAILURE_ENT failure;
    CPSS_PORT_INTERFACE_MODE_ENT ifMode;
    CPSS_PORT_SPEED_ENT speed;
    CPSS_PORT_FEC_MODE_ENT fecType;
    GT_BOOL remoteFaultConfig;
} CPSS_PORT_MANAGER_STATUS_STC;
typedef struct {
    CPSS_PORT_MANAGER_EVENT_ENT portEvent;
} CPSS_PORT_MANAGER_STC;
typedef enum {CPSS_PORT_MANAGER_UNMASK_MAC_LOW_LEVEL_EVENTS_ENABLE_MODE_E, 
    CPSS_PORT_MANAGER_UNMASK_MAC_LOW_LEVEL_EVENTS_DISABLE_MODE_E, CPSS_PORT_MANAGER_UNMASK_MAC_LEVEL_EVENTS_DISABLE_MODE_E, 
    CPSS_PORT_MANAGER_UNMASK_LOW_LEVEL_EVENTS_DISABLE_MODE_E, 
    CPSS_PORT_MANAGER_UNMASK_EVENTS_MODE_LAST_E} CPSS_PORT_MANAGER_UNMASK_EVENTS_MODE_ENT;

File ../cpss/common/h/cpss/common/port/cpssPortStat.h:
CPSS_PORT_EGRESS_CNTR_STC;
CPSS_PORT_MAC_COUNTER_SET_STC;
typedef CPSS_PORT_EGRESS_CNTR_STC CPSS_PORT_EGRESS_CNTR_STC;
typedef enum {CPSS_EGRESS_CNT_PORT_E = 1, CPSS_EGRESS_CNT_VLAN_E, CPSS_EGRESS_CNT_TC_E = 4, CPSS_EGRESS_CNT_DP_E = 8, 
    CPSS_EGRESS_CNT_ANY_E = 0, CPSS_EGRESS_CNT_PORT_VLAN_E = 3, CPSS_EGRESS_CNT_PORT_TC_E = 5, CPSS_EGRESS_CNT_PORT_DP_E = 9, 
    CPSS_EGRESS_CNT_VLAN_TC_E = 6, CPSS_EGRESS_CNT_VLAN_DP_E = 10, CPSS_EGRESS_CNT_TC_DP_E = 12, CPSS_EGRESS_CNT_PORT_VLAN_TC_E = 7, 
    CPSS_EGRESS_CNT_PORT_VLAN_DP_E = 11, CPSS_EGRESS_CNT_VLAN_TC_DP_E = 14, CPSS_EGRESS_CNT_PORT_TC_DP_E = 13, 
    CPSS_EGRESS_CNT_ALL_E = 15} CPSS_PORT_EGRESS_CNT_MODE_ENT;
typedef enum {CPSS_CG_IF_OUT_OCTETS_E, CPSS_CG_IF_OUT_MC_PKTS_E, CPSS_CG_IF_OUT_ERRORS_E, CPSS_CG_IF_OUT_UC_PKTS_E, 
    CPSS_CG_IF_OUT_BC_PKTS_E, CPSS_CG_IF_IN_OCTETS_E, CPSS_CG_IF_IN_ERRORS_E, CPSS_CG_IF_IN_BC_PKTS_E, CPSS_CG_IF_IN_MC_PKTS_E, 
    CPSS_CG_IF_IN_UC_PKTS_E, CPSS_CG_A_FRAMES_TRANSMITTED_OK_E, CPSS_CG_A_FRAMES_RECIEVED_OK_E, 
    CPSS_CG_A_FRAME_CHECK_SEQUENCE_ERRORS_E, CPSS_CG_A_MAC_CONTROL_FRAMES_TRANSMITTED_E, CPSS_CG_A_MAC_CONTROL_FRAMES_RECIEVED_E, 
    CPSS_CG_A_PAUSE_MAC_CTRL_FRAMES_TRANSMITTED_E, CPSS_CG_A_PAUSE_MAC_CTRL_FRAMES_RECIEVED_E, 
    CPSS_CG_A_CBFC_PAUSE_FRAMES_TRANSMITTED_0_E, CPSS_CG_A_CBFC_PAUSE_FRAMES_TRANSMITTED_1_E, 
    CPSS_CG_A_CBFC_PAUSE_FRAMES_TRANSMITTED_2_E, CPSS_CG_A_CBFC_PAUSE_FRAMES_TRANSMITTED_3_E, 
    CPSS_CG_A_CBFC_PAUSE_FRAMES_TRANSMITTED_4_E, CPSS_CG_A_CBFC_PAUSE_FRAMES_TRANSMITTED_5_E, 
    CPSS_CG_A_CBFC_PAUSE_FRAMES_TRANSMITTED_6_E, CPSS_CG_A_CBFC_PAUSE_FRAMES_TRANSMITTED_7_E, 
    CPSS_CG_A_CBFC_PAUSE_FRAMES_RECIEVED_0_E, CPSS_CG_A_CBFC_PAUSE_FRAMES_RECIEVED_1_E, CPSS_CG_A_CBFC_PAUSE_FRAMES_RECIEVED_2_E, 
    CPSS_CG_A_CBFC_PAUSE_FRAMES_RECIEVED_3_E, CPSS_CG_A_CBFC_PAUSE_FRAMES_RECIEVED_4_E, CPSS_CG_A_CBFC_PAUSE_FRAMES_RECIEVED_5_E, 
    CPSS_CG_A_CBFC_PAUSE_FRAMES_RECIEVED_6_E, CPSS_CG_A_CBFC_PAUSE_FRAMES_RECIEVED_7_E, CPSS_CG_ETHER_STATS_OCTETS_E, 
    CPSS_CG_ETHER_STATS_UNDERSIZE_PKTS_E, CPSS_CG_ETHER_STATS_OVERSIZE_PKTS_E, CPSS_CG_ETHER_STATS_JABBERS_E, 
    CPSS_CG_ETHER_STATS_DROP_EVENTS_E, CPSS_CG_ETHER_STATS_FRAGMENTS_E, CPSS_CG_ETHER_STATS_PKTS_E, 
    CPSS_CG_ETHER_STATS_PTKS_64OCTETS_E, CPSS_CG_ETHER_STATS_PTKS_65TO127_OCTETS_E, CPSS_CG_ETHER_STATS_PTKS_128TO255_OCTETS_E, 
    CPSS_CG_ETHER_STATS_PTKS_256TO511_OCTETS_E, CPSS_CG_ETHER_STATS_PTKS_512TO1023_OCTETS_E, 
    CPSS_CG_ETHER_STATS_PTKS_1024TO1518_OCTETS_E, CPSS_CG_ETHER_STATS_PTKS_1519TOMAX_OCTETS_E, CPSS_CG_A_ALIGNMENT_ERRORS_E, 
    CPSS_CG_A_FRAME_TOO_LONG_ERRORS_E, CPSS_CG_A_IN_RANGE_LENGTH_ERRORS_E, CPSS_CG_VLAN_TRANSMITED_OK_E, CPSS_CG_VLAN_RECIEVED_OK_E, 
    CPSS_CG_LAST_E} CPSS_PORT_MAC_CG_COUNTER_ENT;
typedef enum {CPSS_GOOD_OCTETS_RCV_E, CPSS_BAD_OCTETS_RCV_E, CPSS_MAC_TRANSMIT_ERR_E, CPSS_GOOD_PKTS_RCV_E, CPSS_BAD_PKTS_RCV_E, 
    CPSS_BRDC_PKTS_RCV_E, CPSS_MC_PKTS_RCV_E, CPSS_PKTS_64_OCTETS_E, CPSS_PKTS_65TO127_OCTETS_E, CPSS_PKTS_128TO255_OCTETS_E, 
    CPSS_PKTS_256TO511_OCTETS_E, CPSS_PKTS_512TO1023_OCTETS_E, CPSS_PKTS_1024TOMAX_OCTETS_E, CPSS_GOOD_OCTETS_SENT_E, 
    CPSS_GOOD_PKTS_SENT_E, CPSS_EXCESSIVE_COLLISIONS_E, CPSS_MC_PKTS_SENT_E, CPSS_BRDC_PKTS_SENT_E, CPSS_UNRECOG_MAC_CNTR_RCV_E, 
    CPSS_FC_SENT_E, CPSS_GOOD_FC_RCV_E, CPSS_DROP_EVENTS_E, CPSS_UNDERSIZE_PKTS_E, CPSS_FRAGMENTS_PKTS_E, CPSS_OVERSIZE_PKTS_E, 
    CPSS_JABBER_PKTS_E, CPSS_MAC_RCV_ERROR_E, CPSS_BAD_CRC_E, CPSS_COLLISIONS_E, CPSS_LATE_COLLISIONS_E, CPSS_BadFC_RCV_E, 
    CPSS_GOOD_UC_PKTS_RCV_E, CPSS_GOOD_UC_PKTS_SENT_E, CPSS_MULTIPLE_PKTS_SENT_E, CPSS_DEFERRED_PKTS_SENT_E, 
    CPSS_PKTS_1024TO1518_OCTETS_E, CPSS_PKTS_1519TOMAX_OCTETS_E, CPSS_LAST_MAC_COUNTER_NUM_E} CPSS_PORT_MAC_COUNTERS_ENT;
typedef CPSS_PORT_MAC_COUNTER_SET_STC CPSS_PORT_MAC_COUNTER_SET_STC;
typedef struct {
    CPSS_PORT_MAC_MTI_RX_COUNTER_SET_STC rxCounterStc;
    CPSS_PORT_MAC_MTI_TX_COUNTER_SET_STC txCounterStc;
} CPSS_PORT_MAC_MTI_COUNTER_SET_STC;
typedef struct {
    GT_U64 etherStatsOctets;
    GT_U64 ifInOctets;
    GT_U64 aAlignmentErrors;
    GT_U64 aMACControlFramesReceived;
    GT_U64 aFrameTooLongErrors;
    GT_U64 aInRangeLengthErrors;
    GT_U64 aFramesReceivedOK;
    GT_U64 aFrameCheckSequenceErrors;
    GT_U64 VLANRecievedOK;
    GT_U64 ifInErrors;
    GT_U64 ifInUcastPkts;
    GT_U64 ifInMulticastPkts;
    GT_U64 ifInBroadcastPkts;
    GT_U64 etherStatsDropEvents;
    GT_U64 etherStatsPkts;
    GT_U64 etherStatsUndersizePkts;
    GT_U64 etherStatsPkts64Octets;
    GT_U64 etherStatsPkts65to127Octets;
    GT_U64 etherStatsPkts128to255Octets;
    GT_U64 etherStatsPkts256to511Octets;
    GT_U64 etherStatsPkts512to1023Octets;
    GT_U64 etherStatsPkts1024to1518Octets;
    GT_U64 etherStatsPkts1519toMaxOctets;
    GT_U64 etherStatsOversizePkts;
    GT_U64 etherStatsJabbers;
    GT_U64 etherStatsFragments;
    GT_U64 aCBFCPAUSEFramesReceived_0;
    GT_U64 aCBFCPAUSEFramesReceived_1;
    GT_U64 aCBFCPAUSEFramesReceived_2;
    GT_U64 aCBFCPAUSEFramesReceived_3;
    GT_U64 aCBFCPAUSEFramesReceived_4;
    GT_U64 aCBFCPAUSEFramesReceived_5;
    GT_U64 aCBFCPAUSEFramesReceived_6;
    GT_U64 aCBFCPAUSEFramesReceived_7;
    GT_U64 aCBFCPAUSEFramesReceived_8;
    GT_U64 aCBFCPAUSEFramesReceived_9;
    GT_U64 aCBFCPAUSEFramesReceived_10;
    GT_U64 aCBFCPAUSEFramesReceived_11;
    GT_U64 aCBFCPAUSEFramesReceived_12;
    GT_U64 aCBFCPAUSEFramesReceived_13;
    GT_U64 aCBFCPAUSEFramesReceived_14;
    GT_U64 aCBFCPAUSEFramesReceived_15;
    GT_U64 aPAUSEMACCtrlFramesReceived;
} CPSS_PORT_MAC_MTI_RX_COUNTER_SET_STC;
typedef struct {
    GT_U64 ifOutOctets;
    GT_U64 octetsTransmittedOk;
    GT_U64 aPAUSEMACCtrlFramesTransmitted;
    GT_U64 aFramesTransmittedOK;
    GT_U64 VLANTransmittedOK;
    GT_U64 ifOutErrors;
    GT_U64 ifOutUcastPkts;
    GT_U64 ifOutMulticastPkts;
    GT_U64 ifOutBroadcastPkts;
    GT_U64 etherStatsPkts64Octets;
    GT_U64 etherStatsPkts65to127Octets;
    GT_U64 etherStatsPkts128to255Octets;
    GT_U64 etherStatsPkts256to511Octets;
    GT_U64 etherStatsPkts512to1023Octets;
    GT_U64 etherStatsPkts1024to1518Octets;
    GT_U64 etherStatsPkts1519toMaxOctets;
    GT_U64 aCBFCPAUSEFramesTransmitted_0;
    GT_U64 aCBFCPAUSEFramesTransmitted_1;
    GT_U64 aCBFCPAUSEFramesTransmitted_2;
    GT_U64 aCBFCPAUSEFramesTransmitted_3;
    GT_U64 aCBFCPAUSEFramesTransmitted_4;
    GT_U64 aCBFCPAUSEFramesTransmitted_5;
    GT_U64 aCBFCPAUSEFramesTransmitted_6;
    GT_U64 aCBFCPAUSEFramesTransmitted_7;
    GT_U64 aCBFCPAUSEFramesTransmitted_8;
    GT_U64 aCBFCPAUSEFramesTransmitted_9;
    GT_U64 aCBFCPAUSEFramesTransmitted_10;
    GT_U64 aCBFCPAUSEFramesTransmitted_11;
    GT_U64 aCBFCPAUSEFramesTransmitted_12;
    GT_U64 aCBFCPAUSEFramesTransmitted_13;
    GT_U64 aCBFCPAUSEFramesTransmitted_14;
    GT_U64 aCBFCPAUSEFramesTransmitted_15;
    GT_U64 aMACControlFramesTransmitted;
    GT_U64 etherStatsPkts;
} CPSS_PORT_MAC_MTI_TX_COUNTER_SET_STC;

File ../cpss/common/h/cpss/common/port/private/prvCpssPortCtrl.h:
PRV_CPSS_PORT_REG_CONFIG_STC;
PRV_CPSS_PORT_SERDES_CYCLIC_TUNE_COOKIE_STC;
PRV_CPSS_PORT_SERDES_CYCLIC_TUNE_DB_STC;
PRV_CPSS_PORT_SERDES_CYCLIC_TUNE_SEQUENCE_STC;
typedef PRV_CPSS_PORT_REG_CONFIG_STC PRV_CPSS_PORT_REG_CONFIG_STC;
typedef PRV_CPSS_PORT_SERDES_CYCLIC_TUNE_COOKIE_STC PRV_CPSS_PORT_SERDES_CYCLIC_TUNE_COOKIE_STC;
typedef PRV_CPSS_PORT_SERDES_CYCLIC_TUNE_DB_STC PRV_CPSS_PORT_SERDES_CYCLIC_TUNE_DB_STC;
typedef PRV_CPSS_PORT_SERDES_CYCLIC_TUNE_SEQUENCE_STC PRV_CPSS_PORT_SERDES_CYCLIC_TUNE_SEQUENCE_STC;

File ../cpss/common/h/cpss/common/port/private/prvCpssPortManagerTypes.h:
PRV_CPSS_PORT_MNG_AP_ATTRIBUTES_STC;
PRV_CPSS_PORT_MNG_AP_PORT_ATTRIBUTES_DB_STC;
PRV_CPSS_PORT_MNG_AP_PORT_RESOLUTION_STC;
PRV_CPSS_PORT_MNG_CALIBRATION_DB_STC;
PRV_CPSS_PORT_MNG_DB_STC;
PRV_CPSS_PORT_MNG_GENERAL_PORT_CONFIGURATIONS_DB_STC;
PRV_CPSS_PORT_MNG_MAC_SM_DB_STC;
PRV_CPSS_PORT_MNG_PHY_PORT_SM_DB_STC;
PRV_CPSS_PORT_MNG_PORT_ATTRIBUTES_DB_STC;
PRV_CPSS_PORT_MNG_PORT_SM_DB_STC;
PRV_CPSS_PORT_MNG_SERDES_SM_DB_STC;
PRV_CPSS_PORT_MNG_SERDES_TXRX_PARAMS_STC;
typedef PRV_CPSS_PORT_MNG_AP_ATTRIBUTES_STC PRV_CPSS_PORT_MNG_AP_ATTRIBUTES_STC;
typedef PRV_CPSS_PORT_MNG_AP_PORT_ATTRIBUTES_DB_STC PRV_CPSS_PORT_MNG_AP_PORT_ATTRIBUTES_DB_STC;
typedef PRV_CPSS_PORT_MNG_AP_PORT_RESOLUTION_STC PRV_CPSS_PORT_MNG_AP_PORT_RESOLUTION_STC;
typedef PRV_CPSS_PORT_MNG_CALIBRATION_DB_STC PRV_CPSS_PORT_MNG_CALIBRATION_DB_STC;
typedef PRV_CPSS_PORT_MNG_DB_STC PRV_CPSS_PORT_MNG_DB_STC;
typedef PRV_CPSS_PORT_MNG_GENERAL_PORT_CONFIGURATIONS_DB_STC PRV_CPSS_PORT_MNG_GENERAL_PORT_CONFIGURATIONS_DB_STC;
typedef PRV_CPSS_PORT_MNG_MAC_SM_DB_STC PRV_CPSS_PORT_MNG_MAC_SM_DB_STC;
typedef PRV_CPSS_PORT_MNG_PHY_PORT_SM_DB_STC PRV_CPSS_PORT_MNG_PHY_PORT_SM_DB_STC;
typedef PRV_CPSS_PORT_MNG_PORT_ATTRIBUTES_DB_STC PRV_CPSS_PORT_MNG_PORT_ATTRIBUTES_DB_STC;
typedef PRV_CPSS_PORT_MNG_PORT_SM_DB_STC PRV_CPSS_PORT_MNG_PORT_SM_DB_STC;
typedef PRV_CPSS_PORT_MNG_SERDES_SM_DB_STC PRV_CPSS_PORT_MNG_SERDES_SM_DB_STC;
typedef PRV_CPSS_PORT_MNG_SERDES_TXRX_PARAMS_STC PRV_CPSS_PORT_MNG_SERDES_TXRX_PARAMS_STC;

File ../cpss/common/h/cpss/common/port/private/prvCpssPortTypes.h:
PRV_CPSS_PORT_FC_THRESHOLD_STC;
PRV_CPSS_PORT_FUNC_PTRS_STC;
PRV_CPSS_PORT_INFO_ARRAY_STC;
PRV_CPSS_PORT_LED_INFO_STC;
PRV_CPSS_PORT_REF_CLOCK_SOURCE_STC;
typedef GT_STATUS (*)(GT_SW_DEV_NUM, GT_PHYSICAL_PORT_NUM, CPSS_PORT_INTERFACE_MODE_ENT, 
    CPSS_PORT_MANAGER_SGMII_AUTO_NEGOTIATION_STC *) PRV_CPSS_AUTO_NEG_1G_SGMII_FUNC;
typedef GT_STATUS (*)(GT_SW_DEV_NUM) PRV_CPSS_PM_INIT_FUNC;
typedef GT_STATUS (*)(GT_U8, GT_PHYSICAL_PORT_NUM, GT_BOOL, CPSS_PORT_AP_PARAMS_STC *, GT_U32, 
    GT_BOOL) PRV_CPSS_PORT_AP_CONFIG_SET_FUNC;
typedef GT_STATUS (*)(GT_U8, GT_PHYSICAL_PORT_NUM, GT_U8, 
    CPSS_PORT_AP_SERDES_TX_OFFSETS_STC *) PRV_CPSS_PORT_AP_SERDES_TX_PARAMS_OFFSETS_SET_FUNC;
typedef GT_STATUS (*)(GT_U8, GT_PHYSICAL_PORT_NUM, CPSS_PORT_AP_STATUS_STC *) PRV_CPSS_PORT_AP_STATUS_GET_FUNC;
typedef GT_STATUS (*)(GT_SW_DEV_NUM, GT_PHYSICAL_PORT_NUM, CPSS_PORT_SERDES_AUTO_TUNE_STATUS_ENT *, 
    CPSS_PORT_SERDES_AUTO_TUNE_STATUS_ENT *) PRV_CPSS_PORT_AUTO_TUNE_STATUS_GET_FUNC;
typedef GT_STATUS (*)(GT_U8, GT_PHYSICAL_PORT_NUM, CPSS_PORT_PA_BW_MODE_ENT) PRV_CPSS_PORT_BW_TX_FIFO_SET_FUNC;
typedef GT_STATUS (*)(GT_SW_DEV_NUM, GT_PHYSICAL_PORT_NUM, GT_U32 *) PRV_CPSS_PORT_CG_CONVERTERS_GET_FUNC;
typedef GT_STATUS (*)(GT_SW_DEV_NUM, GT_PHYSICAL_PORT_NUM, GT_U32 *) PRV_CPSS_PORT_CG_CONVERTERS_STATUS2_GET_FUNC;
typedef GT_STATUS (*)(GT_SW_DEV_NUM, GT_PHYSICAL_PORT_NUM, GT_U32 *) PRV_CPSS_PORT_CHECK_AND_GET_MAC_FUNC;
typedef GT_STATUS (*)(GT_SW_DEV_NUM, GT_U32, GT_PHYSICAL_PORT_NUM *) PRV_CPSS_PORT_CONVERT_MAC_TO_PORT_FUNC;
typedef GT_STATUS (*)(GT_SW_DEV_NUM, GT_PHYSICAL_PORT_NUM, GT_BOOL *) PRV_CPSS_PORT_ENABLE_GET_FUNC;
typedef GT_STATUS (*)(GT_SW_DEV_NUM, GT_PHYSICAL_PORT_NUM, GT_BOOL) PRV_CPSS_PORT_ENABLE_SET_FUNC;
typedef GT_STATUS (*)(GT_U8, GT_PHYSICAL_PORT_NUM) PRV_CPSS_PORT_ENABLE_WA_WITH_LINK_FUNC;
typedef GT_STATUS (*)(GT_U8, GT_PHYSICAL_PORT_NUM, GT_U32, CPSS_PORT_INTERFACE_MODE_ENT, CPSS_PORT_SPEED_ENT, GT_U32, 
    GT_U32 *) PRV_CPSS_PORT_EXTRA_OPERATIONS_SET_FUNC;
typedef GT_STATUS (*)(GT_U8, GT_PHYSICAL_PORT_NUM, GT_BOOL) PRV_CPSS_PORT_FAST_LINK_DOWN_SET_FUNC;
typedef PRV_CPSS_PORT_FC_THRESHOLD_STC PRV_CPSS_PORT_FC_THRESHOLD_STC;
typedef GT_STATUS (*)(GT_SW_DEV_NUM, GT_PHYSICAL_PORT_NUM, CPSS_PORT_FEC_MODE_ENT *) PRV_CPSS_PORT_FEC_MODE_GET_FUNC;
typedef GT_STATUS (*)(GT_SW_DEV_NUM, GT_PHYSICAL_PORT_NUM, CPSS_PORT_FEC_MODE_ENT) PRV_CPSS_PORT_FEC_MODE_SET_FUNC;
typedef GT_STATUS (*)(GT_SW_DEV_NUM, GT_PHYSICAL_PORT_NUM, GT_BOOL) PRV_CPSS_PORT_FORCE_LINK_DOWN_SET_FUNC;
typedef GT_STATUS (*)(GT_U8, GT_PHYSICAL_PORT_NUM, GT_BOOL *) PRV_CPSS_PORT_FORCE_LINK_PASS_GET_FUNC;
typedef GT_STATUS (*)(GT_U8, GT_PHYSICAL_PORT_NUM, GT_BOOL) PRV_CPSS_PORT_FORCE_LINK_PASS_SET_FUNC;
typedef PRV_CPSS_PORT_FUNC_PTRS_STC PRV_CPSS_PORT_FUNC_PTRS_STC;
typedef GT_STATUS (*)(GT_SW_DEV_NUM, GT_BOOL) PRV_CPSS_PORT_HIGH_SPEED_SET_FUNC;
typedef GT_STATUS (*)(GT_SW_DEV_NUM, GT_PHYSICAL_PORT_NUM, GT_BOOL) PRV_CPSS_PORT_HW_RESET_FUNC;
typedef GT_STATUS (*)(GT_SW_DEV_NUM, GT_PHYSICAL_PORT_NUM) PRV_CPSS_PORT_HW_UNRESET_FUNC;
typedef PRV_CPSS_PORT_INFO_ARRAY_STC PRV_CPSS_PORT_INFO_ARRAY_STC;
typedef GT_STATUS (*)(GT_SW_DEV_NUM, GT_PHYSICAL_PORT_NUM, CPSS_PORT_INTERFACE_MODE_ENT *) PRV_CPSS_PORT_INTERFACE_GET_FUNC;
typedef GT_STATUS (*)(GT_SW_DEV_NUM, GT_U32, GT_U32, CPSS_PORT_SERDES_SPEED_ENT, 
    CPSS_PORT_SERDES_TUNE_STC *) PRV_CPSS_PORT_LANE_TUNE_GET_FUNC;
typedef GT_STATUS (*)(GT_SW_DEV_NUM, GT_U32, GT_U32, CPSS_PORT_SERDES_SPEED_ENT, 
    CPSS_PORT_SERDES_TUNE_STC *) PRV_CPSS_PORT_LANE_TUNE_SET_FUNC;
typedef PRV_CPSS_PORT_LED_INFO_STC PRV_CPSS_PORT_LED_INFO_STC;
typedef GT_STATUS (*)(GT_SW_DEV_NUM, GT_PHYSICAL_PORT_NUM, MV_HWS_PORT_STANDARD, GT_PHYSICAL_PORT_NUM, 
    GT_BOOL) PRV_CPSS_PORT_LINK_BINDING_SET_FUNC;
typedef GT_STATUS (*)(GT_SW_DEV_NUM, GT_PHYSICAL_PORT_NUM, CPSS_PORT_MANAGER_PORT_TYPE_ENT, 
    GT_BOOL) PRV_CPSS_PORT_LINK_STATUS_CHANGED_NOTIFY_FUNC;
typedef GT_STATUS (*)(GT_SW_DEV_NUM, GT_PHYSICAL_PORT_NUM, GT_BOOL *) PRV_CPSS_PORT_LINK_STATUS_GET_FUNC;
typedef GT_STATUS (*)(GT_U8, GT_PHYSICAL_PORT_NUM, GT_U32, GT_BOOL) PRV_CPSS_PORT_LOW_POWER_SET_FUNC;
typedef GT_STATUS (*)(GT_SW_DEV_NUM, GT_PHYSICAL_PORT_NUM, 
    const PRV_CPSS_PORT_REG_CONFIG_STC *) PRV_CPSS_PORT_MAC_CONFIGURATION_FUNC;
typedef GT_STATUS (*)(PRV_CPSS_PORT_REG_CONFIG_STC *) PRV_CPSS_PORT_MAC_CONFIG_CLEAR_FUNC;
typedef GT_STATUS (*)(GT_SW_DEV_NUM, PRV_CPSS_EV_CONVERT_DIRECTION_ENT, GT_U32, GT_U32 *) PRV_CPSS_PORT_MAC_CONVERT_FUNC;
typedef GT_STATUS (*)(GT_SW_DEV_NUM, GT_U32, GT_U32 *) PRV_CPSS_PORT_MAC_DMA_MODE_REG_ADDR_GET_FUNC;
typedef GT_STATUS (*)(GT_SW_DEV_NUM, GT_PHYSICAL_PORT_NUM, GT_BOOL) PRV_CPSS_PORT_MAC_LOOPBACK_MODE_SET_FUNC;
typedef GT_STATUS (*)(GT_SW_DEV_NUM, PRV_CPSS_PORT_MNG_DB_STC **) PRV_CPSS_PORT_MANAGER_DB_GET_FUNC;
typedef GT_STATUS (*)(GT_SW_DEV_NUM, CPSS_PORTS_BMP_STC, GT_BOOL, CPSS_PORT_INTERFACE_MODE_ENT, CPSS_PORT_SPEED_ENT, 
    CPSS_PORT_FEC_MODE_ENT) PRV_CPSS_PORT_MODE_SPEED_SET_FUNC;
typedef GT_STATUS (*)(GT_SW_DEV_NUM, GT_PHYSICAL_PORT_NUM, GT_U32 *) PRV_CPSS_PORT_MPCS40G_REG_ADDR_GET_FUNC;
typedef GT_U32 (*)(GT_SW_DEV_NUM) PRV_CPSS_PORT_NUM_OF_SERDES_GET_FUNC;
typedef GT_STATUS (*)(GT_SW_DEV_NUM, GT_PHYSICAL_PORT_NUM, CPSS_PORT_PCS_LOOPBACK_MODE_ENT) PRV_CPSS_PORT_PCS_LOOPBACK_MODE_SET_FUNC;
typedef GT_STATUS (*)(GT_SW_DEV_NUM, GT_PHYSICAL_PORT_NUM, CPSS_PM_MAC_PREEMPTION_TYPE_ENT) PRV_CPSS_PORT_PREEMPTION_PARAMS_SET_FUNC;
typedef GT_STATUS (*)(GT_SW_DEV_NUM, GT_PHYSICAL_PORT_NUM) PRV_CPSS_PORT_PTP_DELAY_PARAMS_SET_FUNC;
typedef PRV_CPSS_PORT_REF_CLOCK_SOURCE_STC PRV_CPSS_PORT_REF_CLOCK_SOURCE_STC;
typedef GT_STATUS (*)(GT_SW_DEV_NUM, GT_PHYSICAL_PORT_NUM, GT_BOOL *) PRV_CPSS_PORT_REMOTE_FAULT_CONFIG_GET_FUNC;
typedef GT_STATUS (*)(GT_SW_DEV_NUM, GT_PHYSICAL_PORT_NUM, CPSS_PORT_INTERFACE_MODE_ENT, CPSS_PORT_SPEED_ENT, 
    GT_BOOL) PRV_CPSS_PORT_REMOTE_FAULT_SET_FUNC;
typedef GT_STATUS (*)(GT_SW_DEV_NUM, GT_PHYSICAL_PORT_NUM, GT_U32, 
    CPSS_PORT_SERDES_LOOPBACK_MODE_ENT) PRV_CPSS_PORT_SERDES_LOOPBACK_MODE_SET_FUNC;
typedef GT_STATUS (*)(GT_SW_DEV_NUM, GT_PHYSICAL_PORT_NUM, CPSS_PORT_INTERFACE_MODE_ENT, GT_U32 *, 
    GT_U32 *) PRV_CPSS_PORT_SERDES_NUM_GET_FUNC;
typedef GT_STATUS (*)(GT_SW_DEV_NUM, GT_U32, GT_U32, GT_BOOL, GT_BOOL) PRV_CPSS_PORT_SERDES_POLARITY_SET_FUNC;
typedef GT_STATUS (*)(GT_SW_DEV_NUM, GT_PHYSICAL_PORT_NUM, GT_U32, 
    CPSS_PORT_SERDES_TUNE_STC *) PRV_CPSS_PORT_SERDES_TUNE_RESULT_GET_FUNC;
typedef GT_STATUS (*)(GT_SW_DEV_NUM, GT_PHYSICAL_PORT_NUM, GT_BOOL *) PRV_CPSS_PORT_SIG_DET_GET_FUNC;
typedef GT_STATUS (*)(GT_SW_DEV_NUM, GT_PHYSICAL_PORT_NUM, CPSS_PORT_SPEED_ENT *) PRV_CPSS_PORT_SPEED_GET_FUNC;
typedef GT_STATUS (*)(GT_SW_DEV_NUM, GT_PHYSICAL_PORT_NUM, CPSS_PORT_SERDES_AUTO_TUNE_MODE_ENT) PRV_CPSS_PORT_TUNE_SET_FUNC;
typedef enum {PRV_CPSS_PORT_NOT_EXISTS_E, PRV_CPSS_PORT_FE_E, PRV_CPSS_PORT_GE_E, PRV_CPSS_PORT_XG_E, PRV_CPSS_PORT_XLG_E, 
    PRV_CPSS_PORT_HGL_E, PRV_CPSS_PORT_CG_E, PRV_CPSS_PORT_ILKN_E, PRV_CPSS_PORT_MTI_100_E, PRV_CPSS_PORT_MTI_400_E, 
    PRV_CPSS_PORT_MTI_CPU_E, PRV_CPSS_PORT_MTI_USX_E, PRV_CPSS_PORT_NOT_APPLICABLE_E} PRV_CPSS_PORT_TYPE_ENT;
typedef enum {PRV_CPSS_XG_PORT_XG_ONLY_E, PRV_CPSS_XG_PORT_HX_QX_ONLY_E, PRV_CPSS_XG_PORT_XG_HX_QX_E, PRV_CPSS_GE_PORT_GE_ONLY_E, 
    PRV_CPSS_XG_PORT_XLG_SGMII_E, PRV_CPSS_XG_PORT_CG_SGMII_E, PRV_CPSS_XG_PORT_OPTIONS_MAX_E} PRV_CPSS_PORT_TYPE_OPTIONS_ENT;
typedef GT_STATUS (*)(GT_SW_DEV_NUM, GT_U32, GT_U32 *) PRV_CPSS_PORT_XLG_MAC_MASK_GET_FUNC;
typedef GT_BOOL (*)(GT_U8, GT_PHYSICAL_PORT_NUM) PRV_CPSS_REMOTE_PORT_CHECK_FUNC;

File ../cpss/common/h/cpss/extServices/cpssExtServices.h:
typedef struct {
    CPSS_EXT_DRV_MGMT_CACHE_STC extDrvMgmtCacheBindInfo;
    CPSS_EXT_DRV_HW_IF_SMI_STC extDrvHwIfSmiBindInfo;
    CPSS_EXT_DRV_HW_IF_TWSI_STC extDrvHwIfTwsiBindInfo;
    CPSS_EXT_DRV_DMA_STC extDrvDmaBindInfo;
    CPSS_EXT_DRV_ETH_PORT_STC extDrvEthPortBindInfo;
    CPSS_EXT_DRV_HSU_DRV_STC extDrvHsuDrvBindInfo;
    CPSS_EXT_DRV_INT_STC extDrvIntBindInfo;
    CPSS_EXT_DRV_PCI_STC extDrvPciInfo;
    CPSS_EXT_DRV_MGMT_HW_IF_STC extDrvMgmtHwIfBindInfo;
    CPSS_EXT_DRV_DRAGONITE_STC extDrvDragoniteInfo;
} CPSS_EXT_DRV_FUNC_BIND_STC;
typedef struct {
    CPSS_OS_MEM_BIND_STC osMemBindInfo;
    CPSS_OS_STR_BIND_STC osStrBindInfo;
    CPSS_OS_SEM_BIND_STC osSemBindInfo;
    CPSS_OS_IO_BIND_STC osIoBindInfo;
    CPSS_OS_INET_BIND_STC osInetBindInfo;
    CPSS_OS_TIME_BIND_STC osTimeBindInfo;
    CPSS_OS_INT_BIND_STC osIntBindInfo;
    CPSS_OS_RAND_BIND_STC osRandBindInfo;
    CPSS_OS_TASK_BIND_STC osTaskBindInfo;
    CPSS_OS_STDLIB_BIND_STC osStdLibBindInfo;
    CPSS_OS_MSGQ_BIND_STC osMsgQBindInfo;
    CPSS_OS_LOG_BIND_STC osLogBindInfo;
    CPSS_SOCKET_BIND_STC osSocketInfo;
    CPSS_SOCKET_SELECT_BIND_STC osSocketSelectInfo;
} CPSS_OS_FUNC_BIND_STC;
typedef struct {
    CPSS_TRACE_HW_ACCESS_FUNC_BIND_STC traceHwBindInfo;
} CPSS_TRACE_FUNC_BIND_STC;

File ../cpss/common/h/cpss/extServices/extDrv/drivers/cpssCacheMng.h:
typedef GT_STATUS (*)(CPSS_MGMT_CACHE_TYPE_ENT, void *, size_t) CPSS_EXT_DRV_MGMT_CACHE_FLUSH_FUNC;
typedef GT_STATUS (*)(CPSS_MGMT_CACHE_TYPE_ENT, void *, size_t) CPSS_EXT_DRV_MGMT_CACHE_INVALIDATE_FUNC;
typedef struct {
    CPSS_EXT_DRV_MGMT_CACHE_FLUSH_FUNC extDrvMgmtCacheFlush;
    CPSS_EXT_DRV_MGMT_CACHE_INVALIDATE_FUNC extDrvMgmtCacheInvalidate;
} CPSS_EXT_DRV_MGMT_CACHE_STC;
typedef enum {CPSS_MGMT_INSTRUCTION_CACHE_E, CPSS_MGMT_DATA_CACHE_E} CPSS_MGMT_CACHE_TYPE_ENT;

File ../cpss/common/h/cpss/extServices/extDrv/drivers/cpssDmaDrv.h:
typedef GT_STATUS (*)(GT_UINTPTR, GT_U32, GT_U32, GT_U32 *) CPSS_EXTDRV_DMA_READ_FUNC;
typedef GT_STATUS (*)(GT_UINTPTR, GT_U32 *, GT_U32, GT_U32) CPSS_EXTDRV_DMA_WRITE_FUNC;
typedef struct {
    CPSS_EXTDRV_DMA_WRITE_FUNC extDrvDmaWriteDriverFunc;
    CPSS_EXTDRV_DMA_READ_FUNC extDrvDmaReadFunc;
} CPSS_EXT_DRV_DMA_STC;

File ../cpss/common/h/cpss/extServices/extDrv/drivers/cpssDragoniteDrv.h:
typedef GT_STATUS (*)(GT_U32 *) CPSS_EXTDRV_DRAGONITE_GET_BASE_ADDRESS_FUNC;
typedef struct {
    CPSS_EXTDRV_DRAGONITE_GET_BASE_ADDRESS_FUNC extDrvDragoniteShMemBaseAddrGetFunc;
} CPSS_EXT_DRV_DRAGONITE_STC;

File ../cpss/common/h/cpss/extServices/extDrv/drivers/cpssEthPortCtrl.h:
typedef GT_STATUS (*)(GT_U32, GT_U8) CPSS_EXTDRV_ETH_CPU_CODE_TO_QUEUE;
typedef GT_STATUS (*)(GT_BOOL) CPSS_EXTDRV_ETH_CPU_PREPEND_TWO_BYTES_FUNC;
typedef GT_STATUS (*)(void) CPSS_EXTDRV_ETH_PORT_DISABLE_FUNC;
typedef GT_STATUS (*)(void) CPSS_EXTDRV_ETH_PORT_ENABLE_FUNC;
typedef GT_STATUS (*)(CPSS_EXTDRV_ETH_PORT_RX_FUNC) CPSS_EXTDRV_ETH_PORT_INPUT_HOOK_ADD_FUNC;
typedef GT_STATUS (*)(GT_U8_PTR *, GT_U32 *, GT_U32, GT_U32) CPSS_EXTDRV_ETH_PORT_RX_FUNC;
typedef GT_STATUS (*)(GT_U32, GT_U8_PTR, GT_U32, GT_U32 *, GT_U32, GT_U32 *, GT_U32) CPSS_EXTDRV_ETH_PORT_RX_INIT_FUNC;
typedef GT_STATUS (*)(GT_U8_PTR *, GT_U32, GT_U32) CPSS_EXTDRV_ETH_PORT_RX_PACKET_FREE_FUNC;
typedef GT_STATUS (*)(GT_U8_PTR *, GT_U32) CPSS_EXTDRV_ETH_PORT_TX_COMPLETE_FUNC;
typedef GT_STATUS (*)(CPSS_EXTDRV_ETH_PORT_TX_COMPLETE_FUNC) CPSS_EXTDRV_ETH_PORT_TX_COMPLETE_HOOK_ADD_FUNC;
typedef GT_STATUS (*)(GT_U8_PTR *, GT_U32 *, GT_U32, GT_U32) CPSS_EXTDRV_ETH_PORT_TX_FUNC;
typedef GT_STATUS (*)(GT_U32) CPSS_EXTDRV_ETH_PORT_TX_INIT_FUNC;
typedef GT_STATUS (*)(CPSS_EXTDRV_ETH_TX_MODE_ENT) CPSS_EXTDRV_ETH_PORT_TX_MODE_SET_FUNC;
typedef GT_BOOL (*)(void) CPSS_EXTDRV_ETH_RAW_SOCKET_MODE_GET_FUNC;
typedef GT_STATUS (*)(GT_BOOL) CPSS_EXTDRV_ETH_RAW_SOCKET_MODE_SET_FUNC;
typedef GT_STATUS (*)(GT_U8_PTR, GT_U32, GT_U32) CPSS_EXTDRV_ETH_RAW_SOCKET_RX_FUNC;
typedef GT_STATUS (*)(CPSS_EXTDRV_ETH_RAW_SOCKET_RX_FUNC) CPSS_EXTDRV_ETH_RAW_SOCKET_RX_HOOK_ADD_FUNC;
typedef enum {CPSS_EXTDRV_ETH_TX_MODE_ASYNC_E, CPSS_EXTDRV_ETH_TX_MODE_SYNC_E} CPSS_EXTDRV_ETH_TX_MODE_ENT;
typedef GT_BOOL (*)(GT_U32) CPSS_EXTDRV_LINUX_MODE_GET_FUNC;
typedef GT_STATUS (*)(GT_U32, GT_U32, GT_U32, GT_U32, GT_U32) CPSS_EXTDRV_LINUX_MODE_SET_FUNC;
typedef struct {
    CPSS_EXTDRV_ETH_PORT_RX_INIT_FUNC extDrvEthPortRxInitFunc;
    CPSS_EXTDRV_ETH_RAW_SOCKET_MODE_SET_FUNC extDrvEthRawSocketModeSetFunc;
    CPSS_EXTDRV_ETH_RAW_SOCKET_MODE_GET_FUNC extDrvEthRawSocketModeGetFunc;
    CPSS_EXTDRV_LINUX_MODE_SET_FUNC extDrvLinuxModeSetFunc;
    CPSS_EXTDRV_LINUX_MODE_GET_FUNC extDrvLinuxModeGetFunc;
    CPSS_EXTDRV_ETH_PORT_TX_INIT_FUNC extDrvEthPortTxInitFunc;
    CPSS_EXTDRV_ETH_PORT_ENABLE_FUNC extDrvEthPortEnableFunc;
    CPSS_EXTDRV_ETH_PORT_DISABLE_FUNC extDrvEthPortDisableFunc;
    CPSS_EXTDRV_ETH_PORT_TX_FUNC extDrvEthPortTxFunc;
    CPSS_EXTDRV_ETH_PORT_INPUT_HOOK_ADD_FUNC extDrvEthPortInputHookAddFunc;
    CPSS_EXTDRV_ETH_RAW_SOCKET_RX_HOOK_ADD_FUNC extDrvEthRawSocketRxHookAddFunc;
    CPSS_EXTDRV_ETH_PORT_TX_COMPLETE_HOOK_ADD_FUNC extDrvEthPortTxCompleteHookAddFunc;
    CPSS_EXTDRV_ETH_PORT_RX_PACKET_FREE_FUNC extDrvEthPortRxPacketFreeFunc;
    CPSS_EXTDRV_ETH_PORT_TX_MODE_SET_FUNC extDrvEthPortTxModeSetFunc;
    CPSS_EXTDRV_ETH_CPU_CODE_TO_QUEUE extDrvEthCpuCodeToQueueFunc;
    CPSS_EXTDRV_ETH_CPU_PREPEND_TWO_BYTES_FUNC extDrvEthPrePendTwoBytesHeaderSetFunc;
} CPSS_EXT_DRV_ETH_PORT_STC;

File ../cpss/common/h/cpss/extServices/extDrv/drivers/cpssHsuDrv.h:
typedef GT_STATUS (*)(void) CPSS_EXTDRV_HSU_INBOUND_SDMA_DISABLE_FUNC;
typedef GT_STATUS (*)(void) CPSS_EXTDRV_HSU_INBOUND_SDMA_ENABLE_FUNC;
typedef GT_STATUS (*)(GT_BOOL *) CPSS_EXTDRV_HSU_INBOUND_SDMA_STATE_GET_FUNC;
typedef GT_STATUS (*)(GT_U32 **) CPSS_EXTDRV_HSU_MEM_BASE_ADDR_GET_FUNC;
typedef void (*)(void) CPSS_EXTDRV_HSU_WARM_RESTART_FUNC;
typedef struct {
    CPSS_EXTDRV_HSU_MEM_BASE_ADDR_GET_FUNC extDrvHsuMemBaseAddrGetFunc;
    CPSS_EXTDRV_HSU_WARM_RESTART_FUNC extDrvHsuWarmRestartFunc;
    CPSS_EXTDRV_HSU_INBOUND_SDMA_ENABLE_FUNC extDrvHsuInboundSdmaEnableFunc;
    CPSS_EXTDRV_HSU_INBOUND_SDMA_DISABLE_FUNC extDrvHsuInboundSdmaDisableFunc;
    CPSS_EXTDRV_HSU_INBOUND_SDMA_STATE_GET_FUNC extDrvHsuInboundSdmaStateGetFunc;
} CPSS_EXT_DRV_HSU_DRV_STC;

File ../cpss/common/h/cpss/extServices/extDrv/drivers/cpssIntDrv.h:
typedef GT_STATUS (*)(GT_U32, GT_VOIDFUNCPTR, GT_U32) CPSS_EXTDRV_INT_CONNECT_FUNC;
typedef GT_STATUS (*)(GT_U32) CPSS_EXTDRV_INT_DISABLE_FUNC;
typedef GT_STATUS (*)(GT_U32) CPSS_EXTDRV_INT_DISCONNECT_FUNC;
typedef GT_STATUS (*)(GT_U32) CPSS_EXTDRV_INT_ENABLE_FUNC;
typedef GT_32 (*)(CPSS_OS_INTR_MODE_ENT, GT_32 *) CPSS_EXTDRV_INT_LOCK_MODE_SET_FUNC;
typedef struct {
    CPSS_EXTDRV_INT_CONNECT_FUNC extDrvIntConnectFunc;
    CPSS_EXTDRV_INT_DISCONNECT_FUNC extDrvIntDisconnectFunc;
    CPSS_EXTDRV_INT_ENABLE_FUNC extDrvIntEnableFunc;
    CPSS_EXTDRV_INT_DISABLE_FUNC extDrvIntDisableFunc;
    CPSS_EXTDRV_INT_LOCK_MODE_SET_FUNC extDrvIntLockModeSetFunc;
} CPSS_EXT_DRV_INT_STC;

File ../cpss/common/h/cpss/extServices/extDrv/drivers/cpssMgmtHwIfDrv.h:
typedef union {
    GT_U8 devNum;
    GT_U16 i2cBaseAddr;
} CPSS_EXTDRV_DEV_ID_UNT;
typedef GT_STATUS (*)(void) CPSS_EXTDRV_I2C_MGMT_MASTER_INIT_FUNC;
typedef enum {CPSS_EXTDRV_MGMT_VIA_PP_E, CPSS_EXTDRV_MGMT_I2C_E} CPSS_EXTDRV_MGMT_IF_TYPE_ENT;
typedef GT_32 (*)(CPSS_EXTDRV_MGMT_IF_TYPE_ENT, CPSS_EXTDRV_DEV_ID_UNT, GT_U32, GT_U32 *) CPSS_EXTDRV_MGMT_ISR_READ_REGISTER_FUNC;
typedef GT_32 (*)(CPSS_EXTDRV_MGMT_IF_TYPE_ENT, CPSS_EXTDRV_DEV_ID_UNT, GT_U32, GT_U32) CPSS_EXTDRV_MGMT_ISR_WRITE_REGISTER_FUNC;
typedef GT_STATUS (*)(CPSS_EXTDRV_MGMT_IF_TYPE_ENT, CPSS_EXTDRV_DEV_ID_UNT, GT_U32, GT_U32 *) CPSS_EXTDRV_MGMT_READ_REGISTER_FUNC;
typedef GT_STATUS (*)(CPSS_EXTDRV_MGMT_IF_TYPE_ENT, CPSS_EXTDRV_DEV_ID_UNT, GT_U32, GT_U32) CPSS_EXTDRV_MGMT_WRITE_REGISTER_FUNC;
typedef struct {
    CPSS_EXTDRV_I2C_MGMT_MASTER_INIT_FUNC extDrvI2cMgmtMasterInitFunc;
    CPSS_EXTDRV_MGMT_READ_REGISTER_FUNC extDrvMgmtReadRegisterFunc;
    CPSS_EXTDRV_MGMT_WRITE_REGISTER_FUNC extDrvMgmtWriteRegisterFunc;
    CPSS_EXTDRV_MGMT_ISR_READ_REGISTER_FUNC extDrvMgmtIsrReadRegisterFunc;
    CPSS_EXTDRV_MGMT_ISR_WRITE_REGISTER_FUNC extDrvMgmtIsrWriteRegisterFunc;
} CPSS_EXT_DRV_MGMT_HW_IF_STC;

File ../cpss/common/h/cpss/extServices/extDrv/drivers/cpssPciDrv.h:
typedef GT_STATUS (*)(CPSS_EXTDRV_PCI_INT_ENT, GT_UINTPTR *) CPSS_EXTDRV_INT_MASK_GET_FUNC;
typedef GT_STATUS (*)(GT_BOOL, GT_BOOL) CPSS_EXTDRV_PCI_COMBINED_ACCESS_ENABLE_FUNC;
typedef GT_STATUS (*)(GT_U32, GT_U32, GT_U32, GT_U32, GT_U32 *) CPSS_EXTDRV_PCI_CONFIG_READ_REG_FUNC;
typedef GT_STATUS (*)(GT_U32, GT_U32, GT_U32, GT_U32, GT_U32) CPSS_EXTDRV_PCI_CONFIG_WRITE_REG_FUNC;
typedef GT_STATUS (*)(GT_U16, GT_U16, GT_U32, GT_U32 *, GT_U32 *, GT_U32 *) CPSS_EXTDRV_PCI_DEV_FIND_FUNC;
typedef GT_STATUS (*)(GT_U32, GT_U64 *) CPSS_EXTDRV_PCI_DOUBLE_READ_FUNC;
typedef GT_STATUS (*)(GT_U32, GT_U32, GT_U32) CPSS_EXTDRV_PCI_DOUBLE_WRITE_FUNC;
typedef enum {CPSS_EXTDRV_PCI_INT_A_E = 1, CPSS_EXTDRV_GT_PCI_INT_B_E, CPSS_EXTDRV_GT_PCI_INT_C_E, 
    CPSS_EXTDRV_GT_PCI_INT_D_E} CPSS_EXTDRV_PCI_INT_ENT;
typedef GT_STATUS (*)(CPSS_EXTDRV_PCI_INT_ENT, void **) CPSS_EXTDRV_PCI_INT_VEC_GET_FUNC;
typedef GT_STATUS (*)(GT_U16) CPSS_EXTDRV_PCI_SET_DEV_ID_FUNC;
typedef struct {
    CPSS_EXTDRV_PCI_CONFIG_WRITE_REG_FUNC extDrvPciConfigWriteRegFunc;
    CPSS_EXTDRV_PCI_CONFIG_READ_REG_FUNC extDrvPciConfigReadRegFunc;
    CPSS_EXTDRV_PCI_DEV_FIND_FUNC extDrvPciDevFindFunc;
    CPSS_EXTDRV_PCI_INT_VEC_GET_FUNC extDrvPciIntVecFunc;
    CPSS_EXTDRV_INT_MASK_GET_FUNC extDrvPciIntMaskFunc;
    CPSS_EXTDRV_PCI_COMBINED_ACCESS_ENABLE_FUNC extDrvPciCombinedAccessEnableFunc;
    CPSS_EXTDRV_PCI_DOUBLE_WRITE_FUNC extDrvPciDoubleWriteFunc;
    CPSS_EXTDRV_PCI_DOUBLE_READ_FUNC extDrvPciDoubleReadFunc;
    CPSS_EXTDRV_PCI_SET_DEV_ID_FUNC extDrvPciSetDevIdFunc;
} CPSS_EXT_DRV_PCI_STC;

File ../cpss/common/h/cpss/extServices/extDrv/drivers/cpssSmiHwCtrl.h:
typedef GT_STATUS (*)(GT_U16 *, GT_U16 *, GT_U32) CPSS_EXTDRV_HW_IF_SMI_DEV_VENDOR_ID_GET_FUNC;
typedef GT_STATUS (*)(void) CPSS_EXTDRV_HW_IF_SMI_INIT_DRIVER_FUNC;
typedef GT_STATUS (*)(GT_U32, GT_U32, GT_U32 *) CPSS_EXTDRV_HW_IF_SMI_INTERRUPT_READ_REG_FUNC;
typedef GT_STATUS (*)(GT_U32, GT_U32, GT_U32) CPSS_EXTDRV_HW_IF_SMI_INTERRUPT_WRITE_REG_FUNC;
typedef GT_STATUS (*)(GT_U32, GT_U32, GT_U32 *) CPSS_EXTDRV_HW_IF_SMI_READ_REG_FUNC;
typedef GT_STATUS (*)(GT_U32, GT_U32, GT_U32 *) CPSS_EXTDRV_HW_IF_SMI_TASK_READ_REG_FUNC;
typedef GT_STATUS (*)(GT_U32, GT_U32, GT_U32 *, GT_U32) CPSS_EXTDRV_HW_IF_SMI_TASK_REG_RAM_READ_FUNC;
typedef GT_STATUS (*)(GT_U32, GT_U32, GT_U32 *, GT_U32) CPSS_EXTDRV_HW_IF_SMI_TASK_REG_RAM_WRITE_FUNC;
typedef GT_STATUS (*)(GT_U32, GT_U32 *, GT_U32 *, GT_U32) CPSS_EXTDRV_HW_IF_SMI_TASK_REG_VEC_READ_FUNC;
typedef GT_STATUS (*)(GT_U32, GT_U32 *, GT_U32 *, GT_U32) CPSS_EXTDRV_HW_IF_SMI_TASK_REG_VEC_WRITE_FUNC;
typedef GT_STATUS (*)(GT_U32, GT_U32, GT_U32, GT_U32) CPSS_EXTDRV_HW_IF_SMI_TASK_WRITE_REG_FIELD_FUNC;
typedef GT_STATUS (*)(GT_U32, GT_U32, GT_U32) CPSS_EXTDRV_HW_IF_SMI_TASK_WRITE_REG_FUNC;
typedef GT_STATUS (*)(GT_U32, GT_U32, GT_U32) CPSS_EXTDRV_HW_IF_SMI_WRITE_REG_FUNC;
typedef struct {
    CPSS_EXTDRV_HW_IF_SMI_INIT_DRIVER_FUNC extDrvHwIfSmiInitDriverFunc;
    CPSS_EXTDRV_HW_IF_SMI_WRITE_REG_FUNC extDrvHwIfSmiWriteRegFunc;
    CPSS_EXTDRV_HW_IF_SMI_READ_REG_FUNC extDrvHwIfSmiReadRegFunc;
    CPSS_EXTDRV_HW_IF_SMI_TASK_REG_RAM_READ_FUNC extDrvHwIfSmiTaskRegRamReadFunc;
    CPSS_EXTDRV_HW_IF_SMI_TASK_REG_RAM_WRITE_FUNC extDrvHwIfSmiTaskRegRamWriteFunc;
    CPSS_EXTDRV_HW_IF_SMI_TASK_REG_VEC_READ_FUNC extDrvHwIfSmiTaskRegVecReadFunc;
    CPSS_EXTDRV_HW_IF_SMI_TASK_REG_VEC_WRITE_FUNC extDrvHwIfSmiTaskRegVecWriteFunc;
    CPSS_EXTDRV_HW_IF_SMI_TASK_WRITE_REG_FUNC extDrvHwIfSmiTaskWriteRegFunc;
    CPSS_EXTDRV_HW_IF_SMI_TASK_READ_REG_FUNC extDrvHwIfSmiTaskReadRegFunc;
    CPSS_EXTDRV_HW_IF_SMI_INTERRUPT_READ_REG_FUNC extDrvHwIfSmiIntReadRegFunc;
    CPSS_EXTDRV_HW_IF_SMI_INTERRUPT_WRITE_REG_FUNC extDrvHwIfSmiIntWriteRegFunc;
    CPSS_EXTDRV_HW_IF_SMI_DEV_VENDOR_ID_GET_FUNC extDrvHwIfSmiDevVendorIdGetFunc;
    CPSS_EXTDRV_HW_IF_SMI_TASK_WRITE_REG_FIELD_FUNC extDrvHwIfSmiTaskWriteFieldFunc;
} CPSS_EXT_DRV_HW_IF_SMI_STC;

File ../cpss/common/h/cpss/extServices/extDrv/drivers/cpssTwsiHwCtrl.h:
typedef GT_STATUS (*)(void) CPSS_EXTDRV_HW_IF_TWSI_INIT_DRIVER_FUNC;
typedef GT_STATUS (*)(GT_U32, GT_U32, GT_U32 *) CPSS_EXTDRV_HW_IF_TWSI_READ_REG_FUNC;
typedef GT_STATUS (*)(GT_U32, GT_U32, GT_U32) CPSS_EXTDRV_HW_IF_TWSI_WRITE_REG_FUNC;
typedef struct {
    CPSS_EXTDRV_HW_IF_TWSI_INIT_DRIVER_FUNC extDrvHwIfTwsiInitDriverFunc;
    CPSS_EXTDRV_HW_IF_TWSI_WRITE_REG_FUNC extDrvHwIfTwsiWriteRegFunc;
    CPSS_EXTDRV_HW_IF_TWSI_READ_REG_FUNC extDrvHwIfTwsiReadRegFunc;
} CPSS_EXT_DRV_HW_IF_TWSI_STC;

File ../cpss/common/h/cpss/extServices/os/gtOs/cpssOsInet.h:
typedef struct {
    CPSS_OS_INET_NTOHL_FUNC osInetNtohlFunc;
    CPSS_OS_INET_HTONL_FUNC osInetHtonlFunc;
    CPSS_OS_INET_NTOHS_FUNC osInetNtohsFunc;
    CPSS_OS_INET_HTONS_FUNC osInetHtonsFunc;
    CPSS_OS_INET_NTOA_FUNC osInetNtoaFunc;
} CPSS_OS_INET_BIND_STC;
typedef GT_U32 (*)(GT_U32) CPSS_OS_INET_HTONL_FUNC;
typedef GT_U16 (*)(GT_U16) CPSS_OS_INET_HTONS_FUNC;
typedef void (*)(GT_U32, GT_U8 *) CPSS_OS_INET_NTOA_FUNC;
typedef GT_U32 (*)(GT_U32) CPSS_OS_INET_NTOHL_FUNC;
typedef GT_U16 (*)(GT_U16) CPSS_OS_INET_NTOHS_FUNC;

File ../cpss/common/h/cpss/extServices/os/gtOs/cpssOsIntr.h:
typedef enum {CPSS_OS_INTR_MODE_LOCK_E, CPSS_OS_INTR_MODE_UNLOCK_E} CPSS_OS_INTR_MODE_ENT;
typedef struct {
    CPSS_OS_INT_ENABLE_FUNC osIntEnableFunc;
    CPSS_OS_INT_DISABLE_FUNC osIntDisableFunc;
    CPSS_OS_INT_MODE_SET_FUNC osIntModeSetFunc;
    CPSS_OS_INT_CONNECT_FUNC osIntConnectFunc;
    CPSS_OS_INT_DISCONNECT_FUNC osIntDisconnectFunc;
} CPSS_OS_INT_BIND_STC;
typedef GT_STATUS (*)(GT_U32, GT_VOIDFUNCPTR, GT_U32) CPSS_OS_INT_CONNECT_FUNC;
typedef GT_STATUS (*)(GT_U32) CPSS_OS_INT_DISABLE_FUNC;
typedef GT_STATUS (*)(GT_U32) CPSS_OS_INT_DISCONNECT_FUNC;
typedef GT_STATUS (*)(GT_U32) CPSS_OS_INT_ENABLE_FUNC;
typedef GT_32 (*)(CPSS_OS_INTR_MODE_ENT, GT_32 *) CPSS_OS_INT_MODE_SET_FUNC;

File ../cpss/common/h/cpss/extServices/os/gtOs/cpssOsIo.h:
typedef int (*)(void *, const char *, int) CPSS_OS_BIND_STDOUT_FUNC_PTR;
typedef void (*)(CPSS_OS_FATAL_ERROR_TYPE, char *) CPSS_OS_FATAL_ERROR_FUNC;
typedef enum {CPSS_OS_FATAL_RESET, CPSS_OS_FATAL_MONITOR, CPSS_OS_FATAL_WARNING} CPSS_OS_FATAL_ERROR_TYPE;
typedef struct {
    CPSS_OS_IO_BIND_STDOUT_FUNC osIoBindStdOutFunc;
    CPSS_OS_IO_PRINTF_FUNC osIoPrintfFunc;
    CPSS_OS_IO_VPRINTF_FUNC osIoVprintfFunc;
    CPSS_OS_IO_SPRINTF_FUNC osIoSprintfFunc;
    CPSS_OS_IO_VSPRINTF_FUNC osIoVsprintfFunc;
    CPSS_OS_IO_SNPRINTF_FUNC osIoSnprintfFunc;
    CPSS_OS_IO_VSNPRINTF_FUNC osIoVsnprintfFunc;
    CPSS_OS_IO_PRINT_SYNC_FUNC osIoPrintSynchFunc;
    CPSS_OS_IO_GETS_FUNC osIoGetsFunc;
    CPSS_OS_IO_F_LAST_ERROR_STR_FUNC osIoFlastErrorStrFunc;
    CPSS_OS_IO_FOPEN_FUNC osIoFopenFunc;
    CPSS_OS_IO_FCLOSE_FUNC osIoFcloseFunc;
    CPSS_OS_IO_REWIND_FUNC osIoRewindFunc;
    CPSS_OS_IO_FPRINTF_FUNC osIoFprintfFunc;
    CPSS_OS_IO_FGETS_FUNC osIoFgets;
    CPSS_OS_IO_FWRITE_FUNC osIoFwriteFunc;
    CPSS_OS_IO_FREAD_FUNC osIoFreadFunc;
    CPSS_OS_IO_FGET_LENGTH_FUNC osIoFgetLengthFunc;
    CPSS_OS_FATAL_ERROR_FUNC osIoFatalErrorFunc;
} CPSS_OS_IO_BIND_STC;
typedef GT_STATUS (*)(CPSS_OS_BIND_STDOUT_FUNC_PTR, void *) CPSS_OS_IO_BIND_STDOUT_FUNC;
typedef int (*)(CPSS_OS_FILE_TYPE_STC *) CPSS_OS_IO_FCLOSE_FUNC;
typedef char *(*)(char *, int, CPSS_OS_FILE) CPSS_OS_IO_FGETS_FUNC;
typedef GT_UINTPTR (*)(CPSS_OS_FILE) CPSS_OS_IO_FGET_LENGTH_FUNC;
typedef CPSS_OS_FILE (*)(const char *, const char *, CPSS_OS_FILE_TYPE_STC *) CPSS_OS_IO_FOPEN_FUNC;
typedef int (*)(CPSS_OS_FILE, const char *, ...) CPSS_OS_IO_FPRINTF_FUNC;
typedef int (*)(void *, int, int, CPSS_OS_FILE_TYPE_STC *) CPSS_OS_IO_FREAD_FUNC;
typedef int (*)(const void *, int, int, CPSS_OS_FILE_TYPE_STC *) CPSS_OS_IO_FWRITE_FUNC;
typedef const char *(*)(void) CPSS_OS_IO_F_LAST_ERROR_STR_FUNC;
typedef char *(*)(char *) CPSS_OS_IO_GETS_FUNC;
typedef int (*)(const char *, ...) CPSS_OS_IO_PRINTF_FUNC;
typedef int (*)(const char *, ...) CPSS_OS_IO_PRINT_SYNC_FUNC;
typedef void (*)(CPSS_OS_FILE) CPSS_OS_IO_REWIND_FUNC;
typedef int (*)(char *, int, const char *, ...) CPSS_OS_IO_SNPRINTF_FUNC;
typedef int (*)(char *, const char *, ...) CPSS_OS_IO_SPRINTF_FUNC;
typedef int (*)(const char *, struct __va_list_tag *) CPSS_OS_IO_VPRINTF_FUNC;
typedef int (*)(char *, int, const char *, typedef __va_list_tag __va_list_tag *) CPSS_OS_IO_VSNPRINTF_FUNC;
typedef int (*)(char *, const char *, struct __va_list_tag *) CPSS_OS_IO_VSPRINTF_FUNC;

File ../cpss/common/h/cpss/extServices/os/gtOs/cpssOsLog.h:
typedef struct {
    CPSS_OS_LOG_FUNC osLogFunc;
} CPSS_OS_LOG_BIND_STC;
typedef void (*)(CPSS_LOG_LIB_ENT, CPSS_LOG_TYPE_ENT, const char *, ...) CPSS_OS_LOG_FUNC;

File ../cpss/common/h/cpss/extServices/os/gtOs/cpssOsMem.h:
typedef void (*)(GT_CHAR *, GT_U32) CPSS_OS_BZERO_FUNC;
typedef GT_STATUS (*)(void *) CPSS_OS_CACHE_DMA_FREE_FUNC;
typedef void *(*)(GT_U32) CPSS_OS_CACHE_DMA_MALLOC_FUNC;
typedef void (*)(void *) CPSS_OS_FREE_FUNC;
typedef void *(*)(GT_U32) CPSS_OS_MALLOC_FUNC;
typedef struct {
    CPSS_OS_BZERO_FUNC osMemBzeroFunc;
    CPSS_OS_MEM_SET_FUNC osMemSetFunc;
    CPSS_OS_MEM_CPY_FUNC osMemCpyFunc;
    CPSS_OS_MEM_MOVE_FUNC osMemMoveFunc;
    CPSS_OS_MEM_CMP_FUNC osMemCmpFunc;
    CPSS_OS_STATIC_MALLOC_FUNC osMemStaticMallocFunc;
    CPSS_OS_MALLOC_FUNC osMemMallocFunc;
    CPSS_OS_REALLOC_FUNC osMemReallocFunc;
    CPSS_OS_FREE_FUNC osMemFreeFunc;
    CPSS_OS_CACHE_DMA_MALLOC_FUNC osMemCacheDmaMallocFunc;
    CPSS_OS_CACHE_DMA_FREE_FUNC osMemCacheDmaFreeFunc;
    CPSS_OS_PHY_TO_VIRT_FUNC osMemPhyToVirtFunc;
    CPSS_OS_VIRT_TO_PHY_FUNC osMemVirtToPhyFunc;
    CPSS_OS_MEM_GLOBAL_DB_SHMEM_INIT osMemGlobalDbShmemInit;
    CPSS_OS_MEM_GLOBAL_DB_SHMEM_UNLINK osMemGlobalDbShmemUnlink;
} CPSS_OS_MEM_BIND_STC;
typedef GT_32 (*)(const void *, const void *, GT_U32) CPSS_OS_MEM_CMP_FUNC;
typedef void *(*)(void *, const void *, GT_U32) CPSS_OS_MEM_CPY_FUNC;
typedef GT_STATUS (*)(unsigned int, GT_CHAR_PTR, GT_BOOL *, void **) CPSS_OS_MEM_GLOBAL_DB_SHMEM_INIT;
typedef GT_STATUS (*)(GT_CHAR_PTR) CPSS_OS_MEM_GLOBAL_DB_SHMEM_UNLINK;
typedef void *(*)(void *, const void *, GT_U32) CPSS_OS_MEM_MOVE_FUNC;
typedef void *(*)(void *, int, GT_U32) CPSS_OS_MEM_SET_FUNC;
typedef GT_STATUS (*)(GT_UINTPTR, GT_UINTPTR *) CPSS_OS_PHY_TO_VIRT_FUNC;
typedef void *(*)(void *, GT_U32) CPSS_OS_REALLOC_FUNC;
typedef void *(*)(GT_U32) CPSS_OS_STATIC_MALLOC_FUNC;
typedef GT_STATUS (*)(GT_UINTPTR, GT_UINTPTR *) CPSS_OS_VIRT_TO_PHY_FUNC;

File ../cpss/common/h/cpss/extServices/os/gtOs/cpssOsMsgQ.h:
typedef struct {
    CPSS_OS_MSGQ_CREATE_FUNC osMsgQCreateFunc;
    CPSS_OS_MSGQ_DELETE_FUNC osMsgQDeleteFunc;
    CPSS_OS_MSGQ_SEND_FUNC osMsgQSendFunc;
    CPSS_OS_MSGQ_RECV_FUNC osMsgQRecvFunc;
    CPSS_OS_MSGQ_NUM_MSGS_FUNC osMsgQNumMsgsFunc;
} CPSS_OS_MSGQ_BIND_STC;
typedef GT_STATUS (*)(const char *, GT_U32, GT_U32, CPSS_OS_MSGQ_ID *) CPSS_OS_MSGQ_CREATE_FUNC;
typedef GT_STATUS (*)(CPSS_OS_MSGQ_ID) CPSS_OS_MSGQ_DELETE_FUNC;
typedef unsigned long CPSS_OS_MSGQ_ID;
typedef GT_STATUS (*)(CPSS_OS_MSGQ_ID, GT_U32 *) CPSS_OS_MSGQ_NUM_MSGS_FUNC;
typedef GT_STATUS (*)(CPSS_OS_MSGQ_ID, GT_PTR, GT_U32 *, GT_U32) CPSS_OS_MSGQ_RECV_FUNC;
typedef GT_STATUS (*)(CPSS_OS_MSGQ_ID, GT_PTR, GT_U32, GT_U32) CPSS_OS_MSGQ_SEND_FUNC;

File ../cpss/common/h/cpss/extServices/os/gtOs/cpssOsRand.h:
typedef struct {
    CPSS_OS_RAND_FUNC osRandFunc;
    CPSS_OS_SRAND_FUNC osSrandFunc;
} CPSS_OS_RAND_BIND_STC;
typedef GT_32 (*)(void) CPSS_OS_RAND_FUNC;
typedef void (*)(GT_U32) CPSS_OS_SRAND_FUNC;

File ../cpss/common/h/cpss/extServices/os/gtOs/cpssOsSem.h:
typedef unsigned long CPSS_OS_MUTEX;
typedef GT_STATUS (*)(const char *, CPSS_OS_MUTEX *) CPSS_OS_MUTEX_CREATE_FUNC;
typedef GT_STATUS (*)(CPSS_OS_MUTEX) CPSS_OS_MUTEX_DELETE_FUNC;
typedef GT_STATUS (*)(CPSS_OS_MUTEX) CPSS_OS_MUTEX_LOCK_FUNC;
typedef GT_STATUS (*)(CPSS_OS_MUTEX) CPSS_OS_MUTEX_UNLOCK_FUNC;
typedef enum {CPSS_OS_SEMB_EMPTY_E, CPSS_OS_SEMB_FULL_E} CPSS_OS_SEMB_STATE_ENT;
typedef struct {
    CPSS_OS_MUTEX_CREATE_FUNC osMutexCreateFunc;
    CPSS_OS_MUTEX_DELETE_FUNC osMutexDeleteFunc;
    CPSS_OS_MUTEX_LOCK_FUNC osMutexLockFunc;
    CPSS_OS_MUTEX_UNLOCK_FUNC osMutexUnlockFunc;
    CPSS_OS_SIG_SEM_BIN_CREATE_FUNC osSigSemBinCreateFunc;
    CPSS_OS_SIG_SEM_M_CREATE_FUNC osSigSemMCreateFunc;
    CPSS_OS_SIG_SEM_C_CREATE_FUNC osSigSemCCreateFunc;
    CPSS_OS_SIG_SEM_DELETE_FUNC osSigSemDeleteFunc;
    CPSS_OS_SIG_SEM_WAIT_FUNC osSigSemWaitFunc;
    CPSS_OS_SIG_SEM_SIGNAL_FUNC osSigSemSignalFunc;
} CPSS_OS_SEM_BIND_STC;
typedef unsigned long CPSS_OS_SIG_SEM;
typedef GT_STATUS (*)(const char *, CPSS_OS_SEMB_STATE_ENT, CPSS_OS_SIG_SEM *) CPSS_OS_SIG_SEM_BIN_CREATE_FUNC;
typedef GT_STATUS (*)(const char *, GT_U32, CPSS_OS_SIG_SEM *) CPSS_OS_SIG_SEM_C_CREATE_FUNC;
typedef GT_STATUS (*)(CPSS_OS_SIG_SEM) CPSS_OS_SIG_SEM_DELETE_FUNC;
typedef GT_STATUS (*)(const char *, CPSS_OS_SIG_SEM *) CPSS_OS_SIG_SEM_M_CREATE_FUNC;
typedef GT_STATUS (*)(CPSS_OS_SIG_SEM) CPSS_OS_SIG_SEM_SIGNAL_FUNC;
typedef GT_STATUS (*)(CPSS_OS_SIG_SEM, GT_U32) CPSS_OS_SIG_SEM_WAIT_FUNC;

File ../cpss/common/h/cpss/extServices/os/gtOs/cpssOsStdLib.h:
typedef int (*)(const void *, const void *) CPSS_OS_COMPARE_ITEMS_FUNC_PTR;
typedef struct {
    CPSS_OS_STDLIB_QSORT_FUNC osQsortFunc;
    CPSS_OS_STDLIB_BSEARCH_FUNC osBsearchFunc;
} CPSS_OS_STDLIB_BIND_STC;
typedef GT_STATUS (*)(const void *, const void *, GT_U32, GT_U32, CPSS_OS_COMPARE_ITEMS_FUNC_PTR, 
    GT_VOID_PTR *) CPSS_OS_STDLIB_BSEARCH_FUNC;
typedef GT_STATUS (*)(void *, GT_U32, GT_U32, CPSS_OS_COMPARE_ITEMS_FUNC_PTR) CPSS_OS_STDLIB_QSORT_FUNC;

File ../cpss/common/h/cpss/extServices/os/gtOs/cpssOsStr.h:
typedef struct {
    CPSS_OS_STR_LEN_FUNC osStrlenFunc;
    CPSS_OS_STR_CPY_FUNC osStrCpyFunc;
    CPSS_OS_STR_N_CPY_FUNC osStrNCpyFunc;
    CPSS_OS_STR_CHR_FUNC osStrChrFunc;
    CPSS_OS_STR_STR_FUNC osStrStrFunc;
    CPSS_OS_STR_REV_CHR_FUNC osStrRevChrFunc;
    CPSS_OS_STR_CMP_FUNC osStrCmpFunc;
    CPSS_OS_STR_N_CMP_FUNC osStrNCmpFunc;
    CPSS_OS_STR_CAT_FUNC osStrCatFunc;
    CPSS_OS_STR_N_CAT_FUNC osStrStrNCatFunc;
    CPSS_OS_TO_UPPER_FUNC osStrChrToUpperFunc;
    CPSS_OS_STR_TO_32_FUNC osStrTo32Func;
    CPSS_OS_STR_TO_U32_FUNC osStrToU32Func;
    CPSS_OS_STR_TOL_FUNC osStrTolFunc;
} CPSS_OS_STR_BIND_STC;
typedef GT_CHAR *(*)(GT_CHAR *, const GT_CHAR *) CPSS_OS_STR_CAT_FUNC;
typedef GT_CHAR *(*)(const GT_CHAR *, GT_32) CPSS_OS_STR_CHR_FUNC;
typedef GT_32 (*)(const GT_CHAR *, const GT_CHAR *) CPSS_OS_STR_CMP_FUNC;
typedef GT_CHAR *(*)(GT_CHAR *, const GT_CHAR *) CPSS_OS_STR_CPY_FUNC;
typedef GT_U32 (*)(const void *) CPSS_OS_STR_LEN_FUNC;
typedef GT_CHAR *(*)(GT_CHAR *, const GT_CHAR *, GT_U32) CPSS_OS_STR_N_CAT_FUNC;
typedef GT_32 (*)(const GT_CHAR *, const GT_CHAR *, GT_U32) CPSS_OS_STR_N_CMP_FUNC;
typedef GT_CHAR *(*)(GT_CHAR *, const GT_CHAR *, GT_U32) CPSS_OS_STR_N_CPY_FUNC;
typedef GT_CHAR *(*)(const GT_CHAR *, GT_32) CPSS_OS_STR_REV_CHR_FUNC;
typedef GT_CHAR *(*)(const GT_CHAR *, const GT_CHAR *) CPSS_OS_STR_STR_FUNC;
typedef GT_32 (*)(const GT_CHAR *, GT_CHAR **, GT_32) CPSS_OS_STR_TOL_FUNC;
typedef GT_32 (*)(const GT_CHAR *) CPSS_OS_STR_TO_32_FUNC;
typedef GT_U32 (*)(const GT_CHAR *, GT_CHAR **, GT_32) CPSS_OS_STR_TO_U32_FUNC;
typedef GT_32 (*)(const GT_32) CPSS_OS_TO_UPPER_FUNC;

File ../cpss/common/h/cpss/extServices/os/gtOs/cpssOsTask.h:
typedef struct {
    CPSS_OS_TASK_CREATE_FUNC osTaskCreateFunc;
    CPSS_OS_TASK_DELETE_FUNC osTaskDeleteFunc;
    CPSS_OS_TASK_GET_SELF_FUNC osTaskGetSelfFunc;
    CPSS_OS_TASK_LOCK_FUNC osTaskLockFunc;
    CPSS_OS_TASK_UNLOCK_FUNC osTaskUnLockFunc;
} CPSS_OS_TASK_BIND_STC;
typedef GT_STATUS (*)(const GT_CHAR *, GT_U32, GT_U32, unsigned int (*)(void *), void *, CPSS_TASK *) CPSS_OS_TASK_CREATE_FUNC;
typedef GT_STATUS (*)(CPSS_TASK) CPSS_OS_TASK_DELETE_FUNC;
typedef GT_STATUS (*)(GT_U32 *) CPSS_OS_TASK_GET_SELF_FUNC;
typedef GT_STATUS (*)(void) CPSS_OS_TASK_LOCK_FUNC;
typedef GT_STATUS (*)(void) CPSS_OS_TASK_UNLOCK_FUNC;
typedef unsigned int CPSS_TASK;

File ../cpss/common/h/cpss/extServices/os/gtOs/cpssOsTimer.h:
typedef GT_STATUS (*)(GT_U32) CPSS_OS_DELAY_FUNC;
typedef GT_STATUS (*)(GT_U32 *) CPSS_OS_GET_SYS_CLOCK_RATE_FUNC;
typedef GT_U32 (*)(char *, GT_U32, const char *, GT_U32) CPSS_OS_STRF_TIME_FUNC;
typedef struct {
    CPSS_OS_TIME_WK_AFTER_FUNC osTimeWkAfterFunc;
    CPSS_OS_TIME_TICK_GET_FUNC osTimeTickGetFunc;
    CPSS_OS_TIME_GET_FUNC osTimeGetFunc;
    CPSS_OS_TIME_RT_FUNC osTimeRTFunc;
    CPSS_OS_GET_SYS_CLOCK_RATE_FUNC osGetSysClockRateFunc;
    CPSS_OS_DELAY_FUNC osDelayFunc;
    CPSS_OS_STRF_TIME_FUNC osStrftimeFunc;
} CPSS_OS_TIME_BIND_STC;
typedef GT_U32 (*)(void) CPSS_OS_TIME_GET_FUNC;
typedef GT_STATUS (*)(GT_U32 *, GT_U32 *) CPSS_OS_TIME_RT_FUNC;
typedef GT_U32 (*)(void) CPSS_OS_TIME_TICK_GET_FUNC;
typedef GT_STATUS (*)(GT_U32) CPSS_OS_TIME_WK_AFTER_FUNC;

File ../cpss/common/h/cpss/extServices/os/gtOs/gtEnvDep.h:
GT_U64;
typedef short GT_16;
typedef int GT_32;
typedef signed char GT_8;
typedef enum {GT_FALSE, GT_TRUE} GT_BOOL;
typedef char GT_CHAR;
typedef char * GT_CHAR_PTR;
typedef void * GT_PTR;
typedef unsigned long GT_SIZE_T;
typedef long GT_SSIZE_T;
typedef unsigned short GT_U16;
typedef unsigned int GT_U32;
typedef uint32_t * GT_U32_PTR;
typedef GT_U64 GT_U64;
typedef unsigned char GT_U8;
typedef uint8_t * GT_U8_PTR;
typedef unsigned long GT_UINTPTR;
typedef void * GT_VOID_PTR;

File ../cpss/common/h/cpss/extServices/os/gtOs/gtGenTypes.h:
typedef unsigned long CPSS_OS_FILE;
struct CPSS_OS_FILE_TYPE_STC;
typedef unsigned int GT_STATUS;
typedef void (*)() GT_VOIDFUNCPTR;

File ../cpss/common/h/cpss/extServices/os/gtStack/cpssOsSelect.h:
typedef void (*)(void *, CPSS_SOCKET_FD) CPSS_SOCKET_SELECT_ADD_FD_TO_SET_FUNC;
typedef struct {
    CPSS_SOCKET_SELECT_CREATE_SET_FUNC osSelectCreateSetFunc;
    CPSS_SOCKET_SELECT_ERASE_SET_FUNC osSelectEraseSetFunc;
    CPSS_SOCKET_SELECT_ZERO_SET_FUNC osSelectZeroSetFunc;
    CPSS_SOCKET_SELECT_ADD_FD_TO_SET_FUNC osSelectAddFdToSetFunc;
    CPSS_SOCKET_SELECT_CLEAR_FD_FROM_SET_FUNC osSelectClearFdFromSetFunc;
    CPSS_SOCKET_SELECT_IS_FD_SET_FUNC osSelectIsFdSetFunc;
    CPSS_SOCKET_SELECT_COPY_SET_FUNC osSelectCopySetFunc;
    CPSS_SOCKET_SELECT_FUNC osSelectFunc;
    CPSS_SOCKET_SELECT_GET_SOCKET_FD_SIZE_FUNC osSocketGetSocketFdSetSizeFunc;
} CPSS_SOCKET_SELECT_BIND_STC;
typedef void (*)(void *, CPSS_SOCKET_FD) CPSS_SOCKET_SELECT_CLEAR_FD_FROM_SET_FUNC;
typedef void (*)(void *, void *) CPSS_SOCKET_SELECT_COPY_SET_FUNC;
typedef void *(*)(void) CPSS_SOCKET_SELECT_CREATE_SET_FUNC;
typedef void (*)(void *) CPSS_SOCKET_SELECT_ERASE_SET_FUNC;
typedef GT_SSIZE_T (*)(CPSS_SOCKET_FD, void *, void *, void *, GT_U32) CPSS_SOCKET_SELECT_FUNC;
typedef GT_STATUS (*)(GT_U32 *) CPSS_SOCKET_SELECT_GET_SOCKET_FD_SIZE_FUNC;
typedef GT_BOOL (*)(void *, CPSS_SOCKET_FD) CPSS_SOCKET_SELECT_IS_FD_SET_FUNC;
typedef void (*)(void *) CPSS_SOCKET_SELECT_ZERO_SET_FUNC;

File ../cpss/common/h/cpss/extServices/os/gtStack/cpssOsSocket.h:
typedef CPSS_SOCKET_FD (*)(CPSS_SOCKET_FD, void *, GT_SIZE_T *) CPSS_SOCKET_ACCEPT_FUNC;
typedef GT_STATUS (*)(CPSS_SOCKET_FD, void *, GT_SIZE_T) CPSS_SOCKET_BIND_FUNC;
typedef struct {
    CPSS_SOCKET_LAST_ERROR_FUNC osSocketLastErrorFunc;
    CPSS_SOCKET_LAST_ERROR_STR_FUNC osSocketLastErrorStrFunc;
    CPSS_SOCKET_TCP_CREATE_FUNC osSocketTcpCreateFunc;
    CPSS_SOCKET_UDS_CREATE_FUNC osSocketUdsCreateFunc;
    CPSS_SOCKET_UDP_CREATE_FUNC osSocketUdpCreateFunc;
    CPSS_SOCKET_TCP_DESTROY_FUNC osSocketTcpDestroyFunc;
    CPSS_SOCKET_UDP_DESTROY_FUNC osSocketUdpDestroyFunc;
    CPSS_SOCKET_CREATE_ADDR_FUNC osSocketCreateAddrFunc;
    CPSS_SOCKET_DESTROY_ADDR_FUNC osSocketDestroyAddrFunc;
    CPSS_SOCKET_BIND_FUNC osSocketBindFunc;
    CPSS_SOCKET_LISTEN_FUNC osSocketListenFunc;
    CPSS_SOCKET_ACCEPT_FUNC osSocketAcceptFunc;
    CPSS_SOCKET_CONNECT_FUNC osSocketConnectFunc;
    CPSS_SOCKET_SET_NONBLOCK_FUNC osSocketSetNonBlockFunc;
    CPSS_SOCKET_SET_BLOCK_FUNC osSocketSetBlockFunc;
    CPSS_SOCKET_SEND_FUNC osSocketSendFunc;
    CPSS_SOCKET_SENDTO_FUNC osSocketSendToFunc;
    CPSS_SOCKET_RECV_FUNC osSocketRecvFunc;
    CPSS_SOCKET_RECVFROM_FUNC osSocketRecvFromFunc;
    CPSS_SOCKET_SET_SOCKET_NOLINGER_FUNC osSocketSetSocketNoLingerFunc;
    CPSS_SOCKET_EXTRACT_IPADDR_FROM_SOCKET_ADDR_FUNC osSocketExtractIpAddrFromSocketAddrFunc;
    CPSS_SOCKET_GET_ADDR_SIZE_FUNC osSocketGetSocketAddrSizeFunc;
    CPSS_SOCKET_SHUTDOWN_FUNC osSocketShutDownFunc;
} CPSS_SOCKET_BIND_STC;
typedef GT_STATUS (*)(CPSS_SOCKET_FD, void *, GT_SIZE_T) CPSS_SOCKET_CONNECT_FUNC;
typedef GT_STATUS (*)(const GT_CHAR *, CPSS_SOCKET_PORT, void **, GT_SIZE_T *) CPSS_SOCKET_CREATE_ADDR_FUNC;
typedef void (*)(void *) CPSS_SOCKET_DESTROY_ADDR_FUNC;
typedef GT_STATUS (*)(void *, GT_U32 *) CPSS_SOCKET_EXTRACT_IPADDR_FROM_SOCKET_ADDR_FUNC;
typedef int CPSS_SOCKET_FD;
typedef GT_STATUS (*)(GT_U32 *) CPSS_SOCKET_GET_ADDR_SIZE_FUNC;
typedef GT_STATUS (*)(CPSS_SOCKET_FD) CPSS_SOCKET_LAST_ERROR_FUNC;
typedef const char *(*)(void) CPSS_SOCKET_LAST_ERROR_STR_FUNC;
typedef GT_STATUS (*)(CPSS_SOCKET_FD, GT_SSIZE_T) CPSS_SOCKET_LISTEN_FUNC;
typedef int CPSS_SOCKET_PORT;
typedef GT_SSIZE_T (*)(CPSS_SOCKET_FD, void *, GT_SIZE_T, GT_BOOL, void *, GT_SIZE_T *) CPSS_SOCKET_RECVFROM_FUNC;
typedef GT_SSIZE_T (*)(CPSS_SOCKET_FD, void *, GT_SIZE_T, GT_BOOL) CPSS_SOCKET_RECV_FUNC;
typedef GT_SSIZE_T (*)(CPSS_SOCKET_FD, const void *, GT_SIZE_T, void *, GT_SIZE_T) CPSS_SOCKET_SENDTO_FUNC;
typedef GT_SSIZE_T (*)(CPSS_SOCKET_FD, const void *, GT_SIZE_T) CPSS_SOCKET_SEND_FUNC;
typedef GT_STATUS (*)(CPSS_SOCKET_FD) CPSS_SOCKET_SET_BLOCK_FUNC;
typedef GT_STATUS (*)(CPSS_SOCKET_FD) CPSS_SOCKET_SET_NONBLOCK_FUNC;
typedef GT_STATUS (*)(CPSS_SOCKET_FD) CPSS_SOCKET_SET_SOCKET_NOLINGER_FUNC;
typedef GT_STATUS (*)(CPSS_SOCKET_FD, CPSS_SOCKET_SHUTDOWN_OPERATION) CPSS_SOCKET_SHUTDOWN_FUNC;
typedef enum {CPSS_SOCKET_SHUTDOWN_CLOSE_INPUT, CPSS_SOCKET_SHUTDOWN_CLOSE_OUTPUT, 
    CPSS_SOCKET_SHUTDOWN_CLOSE_ALL} CPSS_SOCKET_SHUTDOWN_OPERATION;
typedef CPSS_SOCKET_FD (*)(GT_32) CPSS_SOCKET_TCP_CREATE_FUNC;
typedef GT_STATUS (*)(CPSS_SOCKET_FD) CPSS_SOCKET_TCP_DESTROY_FUNC;
typedef CPSS_SOCKET_FD (*)(GT_32) CPSS_SOCKET_UDP_CREATE_FUNC;
typedef GT_STATUS (*)(CPSS_SOCKET_FD) CPSS_SOCKET_UDP_DESTROY_FUNC;
typedef CPSS_SOCKET_FD (*)() CPSS_SOCKET_UDS_CREATE_FUNC;

File ../cpss/common/h/cpss/extServices/trace/cpssTraceHw.h:
typedef enum {CPSS_TRACE_HW_ACCESS_ADDR_SPACE_PP_E = 3, CPSS_TRACE_HW_ACCESS_ADDR_SPACE_PCI_PEX_E = 0, 
    CPSS_TRACE_HW_ACCESS_ADDR_SPACE_RESET_AND_INIT_CTRL_E = 8, CPSS_TRACE_HW_ACCESS_ADDR_SPACE_MG1_E = 5, 
    CPSS_TRACE_HW_ACCESS_ADDR_SPACE_MG2_E, CPSS_TRACE_HW_ACCESS_ADDR_SPACE_MG3_E} CPSS_TRACE_HW_ACCESS_ADDR_SPACE_ENT;
typedef GT_STATUS (*)(GT_U8, GT_U32, GT_U32) CPSS_TRACE_HW_ACCESS_DELAY_FUNC;
typedef struct {
    CPSS_TRACE_HW_ACCESS_WRITE_FUNC traceHwAccessWriteFunc;
    CPSS_TRACE_HW_ACCESS_READ_FUNC traceHwAccessReadFunc;
    CPSS_TRACE_HW_ACCESS_DELAY_FUNC traceHwAccessDelayFunc;
} CPSS_TRACE_HW_ACCESS_FUNC_BIND_STC;
typedef GT_STATUS (*)(GT_U8, GT_U32, GT_BOOL, CPSS_TRACE_HW_ACCESS_ADDR_SPACE_ENT, GT_U32, GT_U32, 
    GT_U32 *) CPSS_TRACE_HW_ACCESS_READ_FUNC;
typedef GT_STATUS (*)(GT_U8, GT_U32, GT_BOOL, CPSS_TRACE_HW_ACCESS_ADDR_SPACE_ENT, GT_U32, GT_U32, GT_U32 *, 
    GT_U32) CPSS_TRACE_HW_ACCESS_WRITE_FUNC;

File ../cpss/common/h/cpss/generic/cpssHwInfo.h:
typedef enum {CPSS_HW_INFO_BUS_TYPE_NONE_E, CPSS_HW_INFO_BUS_TYPE_PCI_E, CPSS_HW_INFO_BUS_TYPE_PEX_E, CPSS_HW_INFO_BUS_TYPE_SMI_E, 
    CPSS_HW_INFO_BUS_TYPE_MBUS_E, CPSS_HW_INFO_BUS_TYPE_MAX_NUM} CPSS_HW_INFO_BUS_TYPE_ENT;
typedef struct CPSS_HW_INFO_RESOURCE_MAPPING_STCT CPSS_HW_INFO_RESOURCE_MAPPING_STC;
struct CPSS_HW_INFO_RESOURCE_MAPPING_STCT;
typedef struct CPSS_HW_INFO_STCT CPSS_HW_INFO_STC;
struct CPSS_HW_INFO_STCT;
typedef unsigned long long GT_PHYSICAL_ADDR;

File ../cpss/common/h/cpss/generic/events/cpssGenEventCtrl.h:
typedef enum {CPSS_EVENT_GPP_INTERNAL_0_E, CPSS_EVENT_GPP_INTERNAL_1_E, CPSS_EVENT_GPP_INTERNAL_2_E, CPSS_EVENT_GPP_INTERNAL_3_E, 
    CPSS_EVENT_GPP_INTERNAL_4_E, CPSS_EVENT_GPP_INTERNAL_5_E, CPSS_EVENT_GPP_INTERNAL_6_E, CPSS_EVENT_GPP_INTERNAL_7_E, 
    CPSS_EVENT_MPP_INTERNAL_0_E, CPSS_EVENT_MPP_INTERNAL_32_E = 40, CPSS_EVENT_GPP_MAX_NUM_E} CPSS_EVENT_GPP_ID_ENT;

File ../cpss/common/h/cpss/generic/events/cpssGenEventRequests.h:
typedef enum {CPSS_EVENT_MASK_E, CPSS_EVENT_UNMASK_E} CPSS_EVENT_MASK_SET_ENT;

File ../cpss/common/h/cpss/generic/events/cpssGenEventUnifyTypes.h:
typedef enum {CPSS_PP_UNI_EV_MIN_E, CPSS_PP_SLV_WRITE_ERR_E = 0, CPSS_PP_MAS_WRITE_ERR_E, CPSS_PP_ADDR_ERR_E, CPSS_PP_MAS_ABORT_E, 
    CPSS_PP_TARGET_ABORT_E, CPSS_PP_SLV_READ_ERR_E, CPSS_PP_MAS_READ_ERR_E, CPSS_PP_RETRY_CNTR_E, CPSS_PP_MISC_TWSI_TIME_OUT_E, 
    CPSS_PP_MISC_TWSI_STATUS_E, CPSS_PP_MISC_ILLEGAL_ADDR_E, CPSS_PP_MISC_CPU_PORT_RX_OVERRUN_E, CPSS_PP_MISC_CPU_PORT_TX_OVERRUN_E, 
    CPSS_PP_MISC_TX_CRC_PORT_E, CPSS_PP_MISC_C2C_W_FAR_END_UP_E, CPSS_PP_MISC_C2C_N_FAR_END_UP_E, CPSS_PP_MISC_C2C_DATA_ERR_E, 
    CPSS_PP_MISC_MSG_TIME_OUT_E, CPSS_PP_MISC_UPDATED_STAT_E, CPSS_PP_GPP_E, CPSS_PP_MISC_UPLINK_W_ECC_ON_DATA_E, 
    CPSS_PP_MISC_UPLINK_W_ECC_ON_HEADER_E, CPSS_PP_MISC_UPLINK_N_ECC_ON_DATA_E, CPSS_PP_MISC_UPLINK_N_ECC_ON_HEADER_E, 
    CPSS_PP_MISC_PEX_ADDR_UNMAPPED_E, CPSS_PP_MISC_GENXS_READ_DMA_DONE_E, CPSS_PP_BM_EMPTY_CLEAR_E, CPSS_PP_BM_EMPTY_INC_E, 
    CPSS_PP_BM_AGED_PACKET_E, CPSS_PP_BM_MAX_BUFF_REACHED_E, CPSS_PP_BM_PORT_RX_BUFFERS_CNT_UNDERRUN_E, 
    CPSS_PP_BM_PORT_RX_BUFFERS_CNT_OVERRUN_E, CPSS_PP_BM_INVALID_ADDRESS_E, CPSS_PP_BM_WRONG_SRC_PORT_E, 
    CPSS_PP_BM_MC_INC_OVERFLOW_E, CPSS_PP_BM_MC_INC_UNDERRUN_E, CPSS_PP_BM_TQ_PARITY_ERROR_PORT_E, 
    CPSS_PP_BM_RX_MEM_READ_ECC_ERROR_E, CPSS_PP_BM_VLT_ECC_ERR_E, CPSS_PP_BM_MISC_E, CPSS_PP_BM_TRIGGER_AGING_DONE_E, 
    CPSS_PP_BM_PORT_RX_FULL_E, CPSS_PP_BM_ALL_GIGA_PORTS_BUFF_LIMIT_REACHED_E, CPSS_PP_BM_ALL_HG_STACK_PORTS_BUFF_LIMIT_REACHED_E, 
    CPSS_PP_PORT_LINK_STATUS_CHANGED_E, CPSS_PP_PORT_AN_COMPLETED_E, CPSS_PP_PORT_RX_FIFO_OVERRUN_E, 
    CPSS_PP_PORT_TX_FIFO_UNDERRUN_E, CPSS_PP_PORT_TX_FIFO_OVERRUN_E, CPSS_PP_PORT_TX_UNDERRUN_E, 
    CPSS_PP_PORT_ADDRESS_OUT_OF_RANGE_E, CPSS_PP_PORT_PRBS_ERROR_E, CPSS_PP_PORT_SYNC_STATUS_CHANGED_E, CPSS_PP_PORT_TX_CRC_ERROR_E, 
    CPSS_PP_PORT_ILLEGAL_SEQUENCE_E, CPSS_PP_PORT_IPG_TOO_SMALL_E, CPSS_PP_PORT_FAULT_TYPE_CHANGE_E, 
    CPSS_PP_PORT_FC_STATUS_CHANGED_E, CPSS_PP_PORT_CONSECUTIVE_TERM_CODE_E, CPSS_PP_INTERNAL_PHY_E, 
    CPSS_PP_PORT_NO_BUFF_PACKET_DROP_E, CPSS_PP_PORT_XAUI_PHY_E, CPSS_PP_PORT_COUNT_COPY_DONE_E, CPSS_PP_PORT_COUNT_EXPIRED_E, 
    CPSS_PP_GOP_ADDRESS_OUT_OF_RANGE_E, CPSS_PP_GOP_COUNT_EXPIRED_E, CPSS_PP_GOP_COUNT_COPY_DONE_E, 
    CPSS_PP_GOP_GIG_BAD_FC_PACKET_GOOD_CRC_E, CPSS_PP_GOP_XG_BAD_FC_PACKET_GOOD_CRC_E, CPSS_PP_XSMI_WRITE_DONE_E, 
    CPSS_PP_TQ_WATCHDOG_EX_PORT_E, CPSS_PP_TQ_TXQ2_FLUSH_PORT_E, CPSS_PP_TQ_TXQ2_MG_FLUSH_E, CPSS_PP_TQ_ONE_ECC_ERROR_E, 
    CPSS_PP_TQ_TWO_ECC_ERROR_E, CPSS_PP_TQ_MG_READ_ERR_E, CPSS_PP_TQ_HOL_REACHED_PORT_E, CPSS_PP_TQ_RED_REACHED_PORT_E, 
    CPSS_PP_TQ_TOTAL_DESC_UNDERFLOW_E, CPSS_PP_TQ_TOTAL_DESC_OVERFLOW_E, CPSS_PP_TQ_TOTAL_BUFF_UNDERFLOW_E, 
    CPSS_PP_TQ_SNIFF_DESC_DROP_E, CPSS_PP_TQ_MLL_PARITY_ERR_E, CPSS_PP_TQ_MC_FIFO_OVERRUN_E, CPSS_PP_TQ_MISC_E, 
    CPSS_PP_TQ_PORT_DESC_FULL_E, CPSS_PP_TQ_MC_DESC_FULL_E, CPSS_PP_TQ_GIGA_FIFO_FULL_E, CPSS_PP_TQ_XG_MC_FIFO_FULL_E, 
    CPSS_PP_TQ_PORT_FULL_XG_E, CPSS_PP_EB_AUQ_FULL_E, CPSS_PP_EB_AUQ_PENDING_E, CPSS_PP_EB_AUQ_OVER_E, CPSS_PP_EB_AUQ_ALMOST_FULL_E, 
    CPSS_PP_EB_FUQ_FULL_E, CPSS_PP_EB_FUQ_PENDING_E, CPSS_PP_EB_NA_FIFO_FULL_E, CPSS_PP_EB_MG_ADDR_OUT_OF_RANGE_E, 
    CPSS_PP_EB_VLAN_TBL_OP_DONE_E, CPSS_PP_EB_SECURITY_BREACH_UPDATE_E, CPSS_PP_EB_VLAN_SECURITY_BREACH_E, 
    CPSS_PP_EB_NA_NOT_LEARNED_SECURITY_BREACH_E, CPSS_PP_EB_SA_MSG_DISCARDED_E, CPSS_PP_EB_QA_MSG_DISCARDED_E, 
    CPSS_PP_EB_SA_DROP_SECURITY_BREACH_E, CPSS_PP_EB_DA_DROP_SECURITY_BREACH_E, CPSS_PP_EB_DA_SA_DROP_SECURITY_BREACH_E, 
    CPSS_PP_EB_NA_ON_LOCKED_DROP_SECURITY_BREACH_E, CPSS_PP_EB_MAC_RANGE_DROP_SECURITY_BREACH_E, 
    CPSS_PP_EB_INVALID_SA_DROP_SECURITY_BREACH_E, CPSS_PP_EB_VLAN_NOT_VALID_DROP_SECURITY_BREACH_E, 
    CPSS_PP_EB_VLAN_NOT_MEMBER_DROP_DROP_SECURITY_BREACH_E, CPSS_PP_EB_VLAN_RANGE_DROP_SECURITY_BREACH_E, 
    CPSS_PP_EB_INGRESS_FILTER_PCKT_E, CPSS_PP_MAC_TBL_READ_ECC_ERR_E, CPSS_PP_MAC_SFLOW_E, CPSS_PP_MAC_NUM_OF_HOP_EXP_E, 
    CPSS_PP_MAC_NA_LEARNED_E, CPSS_PP_MAC_NA_NOT_LEARNED_E, CPSS_PP_MAC_AGE_VIA_TRIGGER_ENDED_E, CPSS_PP_MAC_MG_ADDR_OUT_OF_RANGE_E, 
    CPSS_PP_MAC_UPDATE_FROM_CPU_DONE_E, CPSS_PP_MAC_MESSAGE_TO_CPU_READY_E, CPSS_PP_MAC_NA_SELF_LEARNED_E, 
    CPSS_PP_MAC_NA_FROM_CPU_LEARNED_E, CPSS_PP_MAC_NA_FROM_CPU_DROPPED_E, CPSS_PP_MAC_AGED_OUT_E, CPSS_PP_MAC_FIFO_2_CPU_EXCEEDED_E, 
    CPSS_PP_MAC_1ECC_ERRORS_E, CPSS_PP_MAC_2ECC_ERRORS_E, CPSS_PP_MAC_TBL_OP_DONE_E, CPSS_PP_MAC_PACKET_RSSI_LESS_THAN_THRESH_E, 
    CPSS_PP_MAC_UPD_AVG_RSSI_LESS_THAN_THRESH_E, CPSS_PP_MAC_STG_TBL_DATA_ERROR_E, CPSS_PP_MAC_VIDX_TBL_DATA_ERROR_E, 
    CPSS_PP_LX_LB_ERR_E, CPSS_PP_LX_CTRL_MEM_2_RF_ERR_E, CPSS_PP_LX_TCB_CNTR_E, CPSS_PP_LX_IPV4_MC_ERR_E, CPSS_PP_LX_IPV4_LPM_ERR_E, 
    CPSS_PP_LX_IPV4_ROUTE_ERR_E, CPSS_PP_LX_IPV4_CNTR_E, CPSS_PP_LX_L3_L7_ERR_ADDR_E, CPSS_PP_LX_TRUNK_ADDR_OUT_OF_RANGE_E, 
    CPSS_PP_LX_IPV4_REFRESH_AGE_OVERRUN_E, CPSS_PP_LX_PCE_PAR_ERR_E, CPSS_PP_LX_TC_2_RF_CNTR_ALRM_E, CPSS_PP_LX_TC_2_RF_PLC_ALRM_E, 
    CPSS_PP_LX_TC_2_RF_TBL_ERR_E, CPSS_PP_LX_CLASSIFIER_HASH_PAR_ERR_E, CPSS_PP_LX_FLOW_LKUP_PAR_ERR_E, 
    CPSS_PP_LX_FLOW_KEY_TBL_PAR_ERR_E, CPSS_PP_LX_MPLS_ILM_TBL_PAR_ERR_E, CPSS_PP_LX_MPLS_CNTR_E, CPSS_PP_EB_TCC_E, 
    CPSS_PP_RX_BUFFER_QUEUE0_E, CPSS_PP_RX_BUFFER_QUEUE1_E, CPSS_PP_RX_BUFFER_QUEUE2_E, CPSS_PP_RX_BUFFER_QUEUE3_E, 
    CPSS_PP_RX_BUFFER_QUEUE4_E, CPSS_PP_RX_BUFFER_QUEUE5_E, CPSS_PP_RX_BUFFER_QUEUE6_E, CPSS_PP_RX_BUFFER_QUEUE7_E, 
    CPSS_PP_RX_ERR_QUEUE0_E, CPSS_PP_RX_ERR_QUEUE1_E, CPSS_PP_RX_ERR_QUEUE2_E, CPSS_PP_RX_ERR_QUEUE3_E, CPSS_PP_RX_ERR_QUEUE4_E, 
    CPSS_PP_RX_ERR_QUEUE5_E, CPSS_PP_RX_ERR_QUEUE6_E, CPSS_PP_RX_ERR_QUEUE7_E, CPSS_PP_RX_CNTR_OVERFLOW_E, 
    CPSS_PP_TX_BUFFER_QUEUE_E, CPSS_PP_TX_ERR_QUEUE_E, CPSS_PP_TX_END_E, CPSS_PP_PORT_LANE_PRBS_ERROR_E, 
    CPSS_PP_PORT_LANE_DISPARITY_ERROR_E, CPSS_PP_PORT_LANE_SYMBOL_ERROR_E, CPSS_PP_PORT_LANE_CJR_PAT_ERROR_E, 
    CPSS_PP_PORT_LANE_SIGNAL_DETECT_CHANGED_E, CPSS_PP_PORT_LANE_SYNC_STATUS_CHANGED_E, CPSS_PP_PORT_LANE_DETECTED_IIAII_E, 
    CPSS_PP_PORT_PCS_LINK_STATUS_CHANGED_E, CPSS_PP_PORT_PCS_DESKEW_TIMEOUT_E, CPSS_PP_PORT_PCS_DETECTED_COLUMN_IIAII_E, 
    CPSS_PP_PORT_PCS_DESKEW_ERROR_E, CPSS_PP_PORT_PCS_PPM_FIFO_UNDERRUN_E, CPSS_PP_PORT_PCS_PPM_FIFO_OVERRUN_E, 
    CPSS_PP_PORT_PCS_ALIGN_LOCK_LOST_E, CPSS_PP_BM_EGRESS_EMPTY_CLEAR_E, CPSS_PP_BM_EGRESS_EMPTY_INC_E, 
    CPSS_PP_BM_EGRESS_AGED_PACKET_E, CPSS_PP_BM_EGRESS_MAX_BUFF_REACHED_E, CPSS_PP_BM_EGRESS_PORT_RX_BUFFERS_CNT_UNDERRUN_E, 
    CPSS_PP_BM_EGRESS_PORT_RX_BUFFERS_CNT_OVERRUN_E, CPSS_PP_BM_EGRESS_INVALID_ADDRESS_E, CPSS_PP_BM_EGRESS_WRONG_SRC_PORT_E, 
    CPSS_PP_BM_EGRESS_MC_INC_OVERFLOW_E, CPSS_PP_BM_EGRESS_MC_INC_UNDERRUN_E, CPSS_PP_BM_EGRESS_TQ_PARITY_ERROR_PORT_E, 
    CPSS_PP_BM_EGRESS_RX_MEM_READ_ECC_ERROR_E, CPSS_PP_BM_EGRESS_VLT_ECC_ERR_E, CPSS_PP_BM_EGRESS_MISC_E, 
    CPSS_PP_PEX_DL_DOWN_TX_ACC_ERR_E, CPSS_PP_PEX_MASTER_DISABLED_E, CPSS_PP_PEX_ERROR_WR_TO_REG_E, 
    CPSS_PP_PEX_HIT_DEFAULT_WIN_ERR_E, CPSS_PP_PEX_COR_ERROR_DET_E, CPSS_PP_PEX_NON_FATAL_ERROR_DET_E, 
    CPSS_PP_PEX_FATAL_ERROR_DET_E, CPSS_PP_PEX_DSTATE_CHANGED_E, CPSS_PP_PEX_BIST_E, CPSS_PP_PEX_RCV_ERROR_FATAL_E, 
    CPSS_PP_PEX_RCV_ERROR_NON_FATAL_E, CPSS_PP_PEX_RCV_ERROR_COR_E, CPSS_PP_PEX_RCV_CRS_E, CPSS_PP_PEX_PEX_SLAVE_HOT_RESET_E, 
    CPSS_PP_PEX_PEX_SLAVE_DISABLE_LINK_E, CPSS_PP_PEX_PEX_SLAVE_LOOPBACK_E, CPSS_PP_PEX_PEX_LINK_FAIL_E, CPSS_PP_PEX_RCV_A_E, 
    CPSS_PP_PEX_RCV_B_E, CPSS_PP_PEX_RCV_C_E, CPSS_PP_PEX_RCV_D_E, CPSS_PP_BUF_MEM_MAC_ERROR_E, CPSS_PP_BUF_MEM_ONE_ECC_ERROR_E, 
    CPSS_PP_BUF_MEM_TWO_OR_MORE_ECC_ERRORS_E, CPSS_PP_POLICER_ADDR_OUT_OF_MEMORY_E, CPSS_PP_POLICER_DATA_ERR_E, 
    CPSS_PP_POLICER_IPFIX_WRAP_AROUND_E, CPSS_PP_POLICER_IPFIX_ALARM_E, CPSS_PP_POLICER_IPFIX_ALARMED_ENTRIES_FIFO_WRAP_AROUND_E, 
    CPSS_PP_PCL_TCC_ECC_ERR_E, CPSS_PP_PCL_MG_ADDR_OUT_OF_RANGE_E, CPSS_PP_PCL_LOOKUP_DATA_ERROR_E, 
    CPSS_PP_PCL_ACTION_ERROR_DETECTED_E, CPSS_PP_PCL_MG_LOOKUP_RESULTS_READY_E, CPSS_PP_PCL_INLIF_TABLE_DATA_ERROR_E, 
    CPSS_PP_PCL_CONFIG_TABLE_DATA_ERROR_E, CPSS_PP_PCL_LOOKUP_FIFO_FULL_E, CPSS_PP_CNC_WRAPAROUND_BLOCK_E, 
    CPSS_PP_CNC_DUMP_FINISHED_E, CPSS_PP_SCT_RATE_LIMITER_E, CPSS_PP_EGRESS_SFLOW_E, CPSS_PP_INGRESS_SFLOW_SAMPLED_CNTR_E, 
    CPSS_PP_EGRESS_SFLOW_SAMPLED_CNTR_E, CPSS_PP_TTI_CPU_ADDRESS_OUT_OF_RANGE_E, CPSS_PP_TTI_ACCESS_DATA_ERROR_E, 
    CPSS_PP_DIT_MC_DIT_TTL_TRHOLD_EXCEED_E, CPSS_PP_DIT_UC_DIT_TTL_TRHOLD_EXCEED_E, CPSS_PP_DIT_DATA_ERROR_E, 
    CPSS_PP_DIT_MC0_PARITY_ERROR_E, CPSS_PP_DIT_INT_TABLE_ECC_ERROR_CNTR_E, CPSS_PP_DIT_MC0_IP_TV_PARITY_ERROR_CNTR_E, 
    CPSS_PP_EXTERNAL_TCAM_INT_SUM_E, CPSS_PP_EXTERNAL_TCAM_IO_ERR_E, CPSS_PP_EXTERNAL_TCAM_RX_PARITY_ERR_E, 
    CPSS_PP_EXTERNAL_TCAM_MG_CMD_EXE_DONE_E, CPSS_PP_EXTERNAL_TCAM_NEW_DATA_IN_MAILBOX_E, 
    CPSS_PP_EXTERNAL_TCAM_MG_WRONG_EXP_RES_LEN_E, CPSS_PP_EXTERNAL_TCAM_RSP_IDQ_EMPTY_E, CPSS_PP_EXTERNAL_TCAM_PHASE_ERROR_E, 
    CPSS_PP_EXTERNAL_TCAM_TRAINING_SEQUENCE_DONE_E, CPSS_PP_EXTERNAL_MEMORY_PARITY_ERROR_E, CPSS_PP_EXTERNAL_MEMORY_ECC_ERROR_E, 
    CPSS_PP_EXTERNAL_MEMORY_RLDRAM_UNIT_PARITY_ERR_LOW_E, CPSS_PP_EXTERNAL_MEMORY_RLDRAM_UNIT_PARITY_ERR_HIGH_E, 
    CPSS_PP_EXTERNAL_MEMORY_RLDRAM_UNIT_MG_CMD_DONE_E, CPSS_PP_VOQ_DROP_DEV_EN_E, CPSS_PP_VOQ_GLOBAL_DESC_FULL_E, 
    CPSS_PP_VOQ_ADDR_OUT_OF_RANGE_E, CPSS_PP_VOQ_ECC_ERR_E, CPSS_PP_VOQ_GLOBAL_BUF_FULL_E, CPSS_PP_XBAR_INVALID_TRG_DROP_CNTR_RL_E, 
    CPSS_PP_XBAR_SRC_FILTER_DROP_CNTR_RL_E, CPSS_PP_XBAR_RX_CELL_CNTR_RL_E, CPSS_PP_XBAR_PRIORITY_0_3_TX_DROP_CNTR_RL_E, 
    CPSS_PP_XBAR_SHP_TX_DROP_CNTR_RL_E, CPSS_PP_XBAR_RX_FIFO_OVERRUN_CNTR_RL_E, CPSS_PP_XBAR_RX_FIFO_OVERRUN_CNTR_INC_E, 
    CPSS_PP_XBAR_INVALID_TRG_DROP_CNTR_INC_E, CPSS_PP_XBAR_SRC_FILTER_DROP_CNTR_INC_E, CPSS_PP_XBAR_RX_CELL_CNTR_INC_E, 
    CPSS_PP_XBAR_PRIORITY_0_3_TX_DROP_CNTR_INC_E, CPSS_PP_XBAR_SHP_TX_DROP_CNTR_INC_E, 
    CPSS_PP_XBAR_PRIORITY_0_3_TX_FC_CHANGED_TO_XOFF_E, CPSS_PP_XBAR_PRIORITY_0_3_TX_FC_CHANGED_TO_XON_E, 
    CPSS_PP_XBAR_INVALID_ADDR_E, CPSS_PP_XBAR_TX_CELL_CNTR_RL_E, CPSS_PP_XBAR_TX_CELL_CNTR_INC_E, CPSS_PP_CRX_MAIL_ARRIVED_E, 
    CPSS_PP_CRX_READ_EMPTY_CPU_E, CPSS_PP_CRX_DATA_DROP_E, CPSS_PP_CRX_CPU_DROP_E, CPSS_PP_CRX_AGED_OUT_CONTEXT_E, 
    CPSS_PP_CRX_CRC_DROP_E, CPSS_PP_CRX_PACKET_LENGTH_DROP_E, CPSS_PP_CRX_MAX_BUFFERS_DROP_E, CPSS_PP_CRX_BAD_CONTEXT_DROP_E, 
    CPSS_PP_CRX_NO_BUFFERS_DROP_E, CPSS_PP_CRX_MULTICAST_CONGESTION_DROP_E, CPSS_PP_CRX_DATA_FIFO_UNDERRUN_E, 
    CPSS_PP_CRX_DATA_FIFO_OVERRUN_E, CPSS_PP_CRX_CPU_UNDERRUN_E, CPSS_PP_CRX_CPU_OVERRUN_E, CPSS_PP_CRX_E2E_FIFO_UNDERRUN_E, 
    CPSS_PP_CRX_E2E_FIFO_OVERRUN_E, CPSS_PP_CRX_UNKNOWN_CELL_TYPE_E, CPSS_PP_CRX_COUNTER_BAD_ADDR_E, CPSS_PP_CRX_PSM_BAD_ADDR_E, 
    CPSS_PP_TXD_SEG_FIFO_PARITY_ERR_E, CPSS_PP_TXD_CPU_MAIL_SENT_E, CPSS_PP_TXD_SEG_FIFO_OVERRUN_E, 
    CPSS_PP_TXD_WRONG_CH_TO_FABRIC_DIST_E, CPSS_PP_IPVX_DATA_ERROR_E, CPSS_PP_IPVX_ADDRESS_OUT_OF_MEMORY_E, 
    CPSS_PP_IPVX_LPM_DATA_ERROR_E, CPSS_PP_STAT_INF_TX_SYNC_FIFO_FULL_E, CPSS_PP_STAT_INF_TX_SYNC_FIFO_OVERRUN_E, 
    CPSS_PP_STAT_INF_TX_SYNC_FIFO_UNDERRUN_E, CPSS_PP_STAT_INF_RX_SYNC_FIFO_FULL_E, CPSS_PP_STAT_INF_RX_SYNC_FIFO_OVERRUN_E, 
    CPSS_PP_STAT_INF_RX_SYNC_FIFO_UNDERRUN_E, CPSS_PP_HGLINK_PING_RECEIVED_E, CPSS_PP_HGLINK_PING_SENT_E, 
    CPSS_PP_HGLINK_MAC_TX_OVERRUN_E, CPSS_PP_HGLINK_MAC_TX_UNDERRUN_E, CPSS_PP_HGLINK_RX_ERR_CNTR_RL_E, 
    CPSS_PP_HGLINK_BAD_PCS_TO_MAC_REFORMAT_RX_E, CPSS_PP_HGLINK_BAD_HEAD_CELL_RX_E, CPSS_PP_HGLINK_BAD_LENGTH_CELL_RX_E, 
    CPSS_PP_HGLINK_FC_CELL_RX_INT_E, CPSS_PP_HGLINK_FC_CELL_TX_INT_E, CPSS_PP_HGLINK_FC_XOFF_DEAD_LOCK_TC0_E, 
    CPSS_PP_HGLINK_FC_XOFF_DEAD_LOCK_TC1_E, CPSS_PP_HGLINK_FC_XOFF_DEAD_LOCK_TC2_E, CPSS_PP_HGLINK_FC_XOFF_DEAD_LOCK_TC3_E, 
    CPSS_PP_HGLINK_ADDR_OUT_OF_RANGE_E, CPSS_PP_TCC_TCAM_ERROR_DETECTED_E, CPSS_PP_TCC_TCAM_BIST_FAILED_E, 
    CPSS_PP_BCN_COUNTER_WRAP_AROUND_ERR_E, CPSS_PP_GTS_GLOBAL_FIFO_FULL_E, CPSS_PP_GTS_VALID_TIME_SAMPLE_MESSAGE_E, 
    CPSS_PP_CRITICAL_HW_ERROR_E, CPSS_PP_PORT_PRBS_ERROR_QSGMII_E, CPSS_PP_PORT_802_3_AP_E, CPSS_PP_PORT_802_3_AP_CORE_1_E, 
    CPSS_PP_PORT_802_3_AP_CORE_2_E, CPSS_PP_PORT_802_3_AP_CORE_3_E, CPSS_PP_PORT_802_3_AP_CORE_4_E, CPSS_PP_PORT_802_3_AP_CORE_5_E, 
    CPSS_PP_PORT_802_3_AP_CORE_6_E, CPSS_PP_PORT_802_3_AP_CORE_7_E, CPSS_PP_PORT_MMPCS_SIGNAL_DETECT_CHANGE_E, 
    CPSS_PP_DATA_INTEGRITY_ERROR_E, CPSS_PP_MAC_BANK_LEARN_COUNTERS_OVERFLOW_E, CPSS_PP_PORT_EEE_E, 
    CPSS_PP_OAM_EXCEPTION_KEEPALIVE_AGING_E, CPSS_PP_OAM_EXCEPTION_EXCESS_KEEPALIVE_E, CPSS_PP_OAM_EXCEPTION_INVALID_KEEPALIVE_E, 
    CPSS_PP_OAM_EXCEPTION_RDI_STATUS_E, CPSS_PP_OAM_EXCEPTION_TX_PERIOD_E, CPSS_PP_OAM_EXCEPTION_MEG_LEVEL_E, 
    CPSS_PP_OAM_EXCEPTION_SOURCE_INTERFACE_E, CPSS_PP_OAM_ILLEGAL_ENTRY_INDEX_E, CPSS_PP_RX_BUFFER_QUEUE8_E, 
    CPSS_PP_RX_BUFFER_QUEUE9_E, CPSS_PP_RX_BUFFER_QUEUE10_E, CPSS_PP_RX_BUFFER_QUEUE11_E, CPSS_PP_RX_BUFFER_QUEUE12_E, 
    CPSS_PP_RX_BUFFER_QUEUE13_E, CPSS_PP_RX_BUFFER_QUEUE14_E, CPSS_PP_RX_BUFFER_QUEUE15_E, CPSS_PP_RX_ERR_QUEUE8_E, 
    CPSS_PP_RX_ERR_QUEUE9_E, CPSS_PP_RX_ERR_QUEUE10_E, CPSS_PP_RX_ERR_QUEUE11_E, CPSS_PP_RX_ERR_QUEUE12_E, CPSS_PP_RX_ERR_QUEUE13_E, 
    CPSS_PP_RX_ERR_QUEUE14_E, CPSS_PP_RX_ERR_QUEUE15_E, CPSS_PP_RX_BUFFER_QUEUE16_E, CPSS_PP_RX_BUFFER_QUEUE17_E, 
    CPSS_PP_RX_BUFFER_QUEUE18_E, CPSS_PP_RX_BUFFER_QUEUE19_E, CPSS_PP_RX_BUFFER_QUEUE20_E, CPSS_PP_RX_BUFFER_QUEUE21_E, 
    CPSS_PP_RX_BUFFER_QUEUE22_E, CPSS_PP_RX_BUFFER_QUEUE23_E, CPSS_PP_RX_ERR_QUEUE16_E, CPSS_PP_RX_ERR_QUEUE17_E, 
    CPSS_PP_RX_ERR_QUEUE18_E, CPSS_PP_RX_ERR_QUEUE19_E, CPSS_PP_RX_ERR_QUEUE20_E, CPSS_PP_RX_ERR_QUEUE21_E, 
    CPSS_PP_RX_ERR_QUEUE22_E, CPSS_PP_RX_ERR_QUEUE23_E, CPSS_PP_RX_BUFFER_QUEUE24_E, CPSS_PP_RX_BUFFER_QUEUE25_E, 
    CPSS_PP_RX_BUFFER_QUEUE26_E, CPSS_PP_RX_BUFFER_QUEUE27_E, CPSS_PP_RX_BUFFER_QUEUE28_E, CPSS_PP_RX_BUFFER_QUEUE29_E, 
    CPSS_PP_RX_BUFFER_QUEUE30_E, CPSS_PP_RX_BUFFER_QUEUE31_E, CPSS_PP_RX_ERR_QUEUE24_E, CPSS_PP_RX_ERR_QUEUE25_E, 
    CPSS_PP_RX_ERR_QUEUE26_E, CPSS_PP_RX_ERR_QUEUE27_E, CPSS_PP_RX_ERR_QUEUE28_E, CPSS_PP_RX_ERR_QUEUE29_E, 
    CPSS_PP_RX_ERR_QUEUE30_E, CPSS_PP_RX_ERR_QUEUE31_E, CPSS_PP_PIPE_PCP_E, CPSS_PP_PHA_E, CPSS_PP_PORT_PCS_GB_LOCK_SYNC_CHANGE_E, 
    CPSS_PP_RX_BUFFER_QUEUE32_E, CPSS_PP_RX_BUFFER_QUEUE33_E, CPSS_PP_RX_BUFFER_QUEUE34_E, CPSS_PP_RX_BUFFER_QUEUE35_E, 
    CPSS_PP_RX_BUFFER_QUEUE36_E, CPSS_PP_RX_BUFFER_QUEUE37_E, CPSS_PP_RX_BUFFER_QUEUE38_E, CPSS_PP_RX_BUFFER_QUEUE39_E, 
    CPSS_PP_RX_BUFFER_QUEUE40_E, CPSS_PP_RX_BUFFER_QUEUE41_E, CPSS_PP_RX_BUFFER_QUEUE42_E, CPSS_PP_RX_BUFFER_QUEUE43_E, 
    CPSS_PP_RX_BUFFER_QUEUE44_E, CPSS_PP_RX_BUFFER_QUEUE45_E, CPSS_PP_RX_BUFFER_QUEUE46_E, CPSS_PP_RX_BUFFER_QUEUE47_E, 
    CPSS_PP_RX_BUFFER_QUEUE48_E, CPSS_PP_RX_BUFFER_QUEUE49_E, CPSS_PP_RX_BUFFER_QUEUE50_E, CPSS_PP_RX_BUFFER_QUEUE51_E, 
    CPSS_PP_RX_BUFFER_QUEUE52_E, CPSS_PP_RX_BUFFER_QUEUE53_E, CPSS_PP_RX_BUFFER_QUEUE54_E, CPSS_PP_RX_BUFFER_QUEUE55_E, 
    CPSS_PP_RX_BUFFER_QUEUE56_E, CPSS_PP_RX_BUFFER_QUEUE57_E, CPSS_PP_RX_BUFFER_QUEUE58_E, CPSS_PP_RX_BUFFER_QUEUE59_E, 
    CPSS_PP_RX_BUFFER_QUEUE60_E, CPSS_PP_RX_BUFFER_QUEUE61_E, CPSS_PP_RX_BUFFER_QUEUE62_E, CPSS_PP_RX_BUFFER_QUEUE63_E, 
    CPSS_PP_RX_BUFFER_QUEUE64_E, CPSS_PP_RX_BUFFER_QUEUE65_E, CPSS_PP_RX_BUFFER_QUEUE66_E, CPSS_PP_RX_BUFFER_QUEUE67_E, 
    CPSS_PP_RX_BUFFER_QUEUE68_E, CPSS_PP_RX_BUFFER_QUEUE69_E, CPSS_PP_RX_BUFFER_QUEUE70_E, CPSS_PP_RX_BUFFER_QUEUE71_E, 
    CPSS_PP_RX_BUFFER_QUEUE72_E, CPSS_PP_RX_BUFFER_QUEUE73_E, CPSS_PP_RX_BUFFER_QUEUE74_E, CPSS_PP_RX_BUFFER_QUEUE75_E, 
    CPSS_PP_RX_BUFFER_QUEUE76_E, CPSS_PP_RX_BUFFER_QUEUE77_E, CPSS_PP_RX_BUFFER_QUEUE78_E, CPSS_PP_RX_BUFFER_QUEUE79_E, 
    CPSS_PP_RX_BUFFER_QUEUE80_E, CPSS_PP_RX_BUFFER_QUEUE81_E, CPSS_PP_RX_BUFFER_QUEUE82_E, CPSS_PP_RX_BUFFER_QUEUE83_E, 
    CPSS_PP_RX_BUFFER_QUEUE84_E, CPSS_PP_RX_BUFFER_QUEUE85_E, CPSS_PP_RX_BUFFER_QUEUE86_E, CPSS_PP_RX_BUFFER_QUEUE87_E, 
    CPSS_PP_RX_BUFFER_QUEUE88_E, CPSS_PP_RX_BUFFER_QUEUE89_E, CPSS_PP_RX_BUFFER_QUEUE90_E, CPSS_PP_RX_BUFFER_QUEUE91_E, 
    CPSS_PP_RX_BUFFER_QUEUE92_E, CPSS_PP_RX_BUFFER_QUEUE93_E, CPSS_PP_RX_BUFFER_QUEUE94_E, CPSS_PP_RX_BUFFER_QUEUE95_E, 
    CPSS_PP_RX_BUFFER_QUEUE96_E, CPSS_PP_RX_BUFFER_QUEUE97_E, CPSS_PP_RX_BUFFER_QUEUE98_E, CPSS_PP_RX_BUFFER_QUEUE99_E, 
    CPSS_PP_RX_BUFFER_QUEUE100_E, CPSS_PP_RX_BUFFER_QUEUE101_E, CPSS_PP_RX_BUFFER_QUEUE102_E, CPSS_PP_RX_BUFFER_QUEUE103_E, 
    CPSS_PP_RX_BUFFER_QUEUE104_E, CPSS_PP_RX_BUFFER_QUEUE105_E, CPSS_PP_RX_BUFFER_QUEUE106_E, CPSS_PP_RX_BUFFER_QUEUE107_E, 
    CPSS_PP_RX_BUFFER_QUEUE108_E, CPSS_PP_RX_BUFFER_QUEUE109_E, CPSS_PP_RX_BUFFER_QUEUE110_E, CPSS_PP_RX_BUFFER_QUEUE111_E, 
    CPSS_PP_RX_BUFFER_QUEUE112_E, CPSS_PP_RX_BUFFER_QUEUE113_E, CPSS_PP_RX_BUFFER_QUEUE114_E, CPSS_PP_RX_BUFFER_QUEUE115_E, 
    CPSS_PP_RX_BUFFER_QUEUE116_E, CPSS_PP_RX_BUFFER_QUEUE117_E, CPSS_PP_RX_BUFFER_QUEUE118_E, CPSS_PP_RX_BUFFER_QUEUE119_E, 
    CPSS_PP_RX_BUFFER_QUEUE120_E, CPSS_PP_RX_BUFFER_QUEUE121_E, CPSS_PP_RX_BUFFER_QUEUE122_E, CPSS_PP_RX_BUFFER_QUEUE123_E, 
    CPSS_PP_RX_BUFFER_QUEUE124_E, CPSS_PP_RX_BUFFER_QUEUE125_E, CPSS_PP_RX_BUFFER_QUEUE126_E, CPSS_PP_RX_BUFFER_QUEUE127_E, 
    CPSS_PP_RX_ERR_QUEUE32_E, CPSS_PP_RX_ERR_QUEUE33_E, CPSS_PP_RX_ERR_QUEUE34_E, CPSS_PP_RX_ERR_QUEUE35_E, 
    CPSS_PP_RX_ERR_QUEUE36_E, CPSS_PP_RX_ERR_QUEUE37_E, CPSS_PP_RX_ERR_QUEUE38_E, CPSS_PP_RX_ERR_QUEUE39_E, 
    CPSS_PP_RX_ERR_QUEUE40_E, CPSS_PP_RX_ERR_QUEUE41_E, CPSS_PP_RX_ERR_QUEUE42_E, CPSS_PP_RX_ERR_QUEUE43_E, 
    CPSS_PP_RX_ERR_QUEUE44_E, CPSS_PP_RX_ERR_QUEUE45_E, CPSS_PP_RX_ERR_QUEUE46_E, CPSS_PP_RX_ERR_QUEUE47_E, 
    CPSS_PP_RX_ERR_QUEUE48_E, CPSS_PP_RX_ERR_QUEUE49_E, CPSS_PP_RX_ERR_QUEUE50_E, CPSS_PP_RX_ERR_QUEUE51_E, 
    CPSS_PP_RX_ERR_QUEUE52_E, CPSS_PP_RX_ERR_QUEUE53_E, CPSS_PP_RX_ERR_QUEUE54_E, CPSS_PP_RX_ERR_QUEUE55_E, 
    CPSS_PP_RX_ERR_QUEUE56_E, CPSS_PP_RX_ERR_QUEUE57_E, CPSS_PP_RX_ERR_QUEUE58_E, CPSS_PP_RX_ERR_QUEUE59_E, 
    CPSS_PP_RX_ERR_QUEUE60_E, CPSS_PP_RX_ERR_QUEUE61_E, CPSS_PP_RX_ERR_QUEUE62_E, CPSS_PP_RX_ERR_QUEUE63_E, 
    CPSS_PP_RX_ERR_QUEUE64_E, CPSS_PP_RX_ERR_QUEUE65_E, CPSS_PP_RX_ERR_QUEUE66_E, CPSS_PP_RX_ERR_QUEUE67_E, 
    CPSS_PP_RX_ERR_QUEUE68_E, CPSS_PP_RX_ERR_QUEUE69_E, CPSS_PP_RX_ERR_QUEUE70_E, CPSS_PP_RX_ERR_QUEUE71_E, 
    CPSS_PP_RX_ERR_QUEUE72_E, CPSS_PP_RX_ERR_QUEUE73_E, CPSS_PP_RX_ERR_QUEUE74_E, CPSS_PP_RX_ERR_QUEUE75_E, 
    CPSS_PP_RX_ERR_QUEUE76_E, CPSS_PP_RX_ERR_QUEUE77_E, CPSS_PP_RX_ERR_QUEUE78_E, CPSS_PP_RX_ERR_QUEUE79_E, 
    CPSS_PP_RX_ERR_QUEUE80_E, CPSS_PP_RX_ERR_QUEUE81_E, CPSS_PP_RX_ERR_QUEUE82_E, CPSS_PP_RX_ERR_QUEUE83_E, 
    CPSS_PP_RX_ERR_QUEUE84_E, CPSS_PP_RX_ERR_QUEUE85_E, CPSS_PP_RX_ERR_QUEUE86_E, CPSS_PP_RX_ERR_QUEUE87_E, 
    CPSS_PP_RX_ERR_QUEUE88_E, CPSS_PP_RX_ERR_QUEUE89_E, CPSS_PP_RX_ERR_QUEUE90_E, CPSS_PP_RX_ERR_QUEUE91_E, 
    CPSS_PP_RX_ERR_QUEUE92_E, CPSS_PP_RX_ERR_QUEUE93_E, CPSS_PP_RX_ERR_QUEUE94_E, CPSS_PP_RX_ERR_QUEUE95_E, 
    CPSS_PP_RX_ERR_QUEUE96_E, CPSS_PP_RX_ERR_QUEUE97_E, CPSS_PP_RX_ERR_QUEUE98_E, CPSS_PP_RX_ERR_QUEUE99_E, 
    CPSS_PP_RX_ERR_QUEUE100_E, CPSS_PP_RX_ERR_QUEUE101_E, CPSS_PP_RX_ERR_QUEUE102_E, CPSS_PP_RX_ERR_QUEUE103_E, 
    CPSS_PP_RX_ERR_QUEUE104_E, CPSS_PP_RX_ERR_QUEUE105_E, CPSS_PP_RX_ERR_QUEUE106_E, CPSS_PP_RX_ERR_QUEUE107_E, 
    CPSS_PP_RX_ERR_QUEUE108_E, CPSS_PP_RX_ERR_QUEUE109_E, CPSS_PP_RX_ERR_QUEUE110_E, CPSS_PP_RX_ERR_QUEUE111_E, 
    CPSS_PP_RX_ERR_QUEUE112_E, CPSS_PP_RX_ERR_QUEUE113_E, CPSS_PP_RX_ERR_QUEUE114_E, CPSS_PP_RX_ERR_QUEUE115_E, 
    CPSS_PP_RX_ERR_QUEUE116_E, CPSS_PP_RX_ERR_QUEUE117_E, CPSS_PP_RX_ERR_QUEUE118_E, CPSS_PP_RX_ERR_QUEUE119_E, 
    CPSS_PP_RX_ERR_QUEUE120_E, CPSS_PP_RX_ERR_QUEUE121_E, CPSS_PP_RX_ERR_QUEUE122_E, CPSS_PP_RX_ERR_QUEUE123_E, 
    CPSS_PP_RX_ERR_QUEUE124_E, CPSS_PP_RX_ERR_QUEUE125_E, CPSS_PP_RX_ERR_QUEUE126_E, CPSS_PP_RX_ERR_QUEUE127_E, 
    CPSS_PP_PTP_TAI_INCOMING_TRIGGER_E, CPSS_PP_PTP_TAI_GENERATION_E, CPSS_PP_TQ_PORT_MICRO_BURST_E, 
    CPSS_PP_PORT_PTP_MIB_FRAGMENT_E, CPSS_PP_LMU_LATENCY_EXCEED_THRESHOLD_E, CPSS_PP_TQ_PORT_HR_CROSSED_THRESHOLD_E, 
    CPSS_PP_PCL_ACTION_TRIGGERED_E, CPSS_PP_MACSEC_SA_EXPIRED_E, CPSS_PP_MACSEC_SA_PN_FULL_E, CPSS_PP_MACSEC_STATISTICS_SUMMARY_E, 
    CPSS_PP_MACSEC_TRANSFORM_ENGINE_ERR_E, CPSS_PP_MACSEC_EGRESS_SEQ_NUM_ROLLOVER_E, 
    CPSS_PP_EM_AUTO_LEARN_INDIRECT_ADDRESS_OUT_OF_RANGE_EVENT_E, CPSS_PP_EM_AUTO_LEARN_FLOW_ID_ALLOCATION_FAILED_EVENT_E, 
    CPSS_PP_EM_AUTO_LEARN_FLOW_ID_RANGE_FULL_EVENT_E, CPSS_PP_EM_AUTO_LEARN_FLOW_ID_THRESHOLD_CROSSED_EVENT_E, 
    CPSS_PP_EM_AUTO_LEARN_FLOW_ID_EMPTY_EVENT_E, CPSS_PP_EM_AUTO_LEARN_COLLISION_EVENT_E, 
    CPSS_PP_EM_AUTO_LEARN_ILLEGAL_ADDRESS_ACCESS_EVENT_E, CPSS_PP_EM_AUTO_LEARN_ILLEGAL_TABLE_OVERLAP_EVENT_E, 
    CPSS_PP_EM_AUTO_LEARN_CHANNEL_0_SHM_ANSWER_FIFO_OVERFLOW_EVENT_E, 
    CPSS_PP_EM_AUTO_LEARN_CHANNEL_1_SHM_ANSWER_FIFO_OVERFLOW_EVENT_E, CPSS_PP_PORT_AN_HCD_FOUND_E, CPSS_PP_PORT_LANE_FEC_ERROR_E, 
    CPSS_PP_UNI_EV_DUMMY_MAX_E, CPSS_PP_UNI_EV_MAX_E = 631, CPSS_SRVCPU_IPC_E, CPSS_SRVCPU_PORT_LINK_STATUS_CHANGED_E, 
    CPSS_SRVCPU_PORT_802_3_AP_E, CPSS_SRVCPU_PORT_REMOTE_FAULT_TX_CHANGE_E, CPSS_SRVCPU_PORT_AP_DISABLE_E, CPSS_SRVCPU_RESERVED_5, 
    CPSS_SRVCPU_RESERVED_6, CPSS_SRVCPU_RESERVED_7, CPSS_SRVCPU_RESERVED_8, CPSS_SRVCPU_RESERVED_9, CPSS_SRVCPU_MAX_E = 641, 
    CPSS_XBAR_UNI_EV_MIN_E, CPSS_XBAR_HG_LANE_SYNCH_CHANGE_E = 642, CPSS_XBAR_HG_LANE_COMMA_ALIGN_CHANGE_E, 
    CPSS_XBAR_GPORT_INVALID_TRG_DROP_CNT_INC_E, CPSS_XBAR_GPORT_DIAG_CELL_RX_CNTR_INC_E, CPSS_XBAR_MISC_E, 
    CPSS_XBAR_HG_PING_RECEIVED_E, CPSS_XBAR_HOST_RX_FIFO_PEND_E, CPSS_XBAR_HOST_SEND_CELL_E, CPSS_XBAR_HG_ALIGNMENT_LOCK_CHANGE_E, 
    CPSS_XBAR_HG_PING_E, CPSS_XBAR_SD_INV_ADDR_E, CPSS_XBAR_SXBAR_INV_ADDR_E, CPSS_XBAR_S_INV_ADDR_E, CPSS_XBAR_G_INV_ADDR_E, 
    CPSS_XBAR_MC_INV_ADDR_E, CPSS_XBAR_UNI_EV_DUMMY_MAX_E, CPSS_XBAR_UNI_EV_MAX_E = 656, CPSS_FA_UNI_EV_MIN_E, 
    CPSS_FA_UC_PRIO_BUF_FULL_E = 657, CPSS_FA_MC_PRIO_BUF_FULL_E, CPSS_FA_UC_RX_BUF_FULL_E, CPSS_FA_MC_RX_BUF_FULL_E, 
    CPSS_FA_WD_FPORT_GRP_E, CPSS_FA_MC_WD_EXP_E, CPSS_FA_GLBL_DESC_FULL_E, CPSS_FA_MAC_UPD_THRS_E, CPSS_FA_DROP_DEV_EN_E, 
    CPSS_FA_MISC_I2C_TIMEOUT_E, CPSS_FA_MISC_STATUS_E, CPSS_FA_UNI_EV_DUMMY_MAX_E, CPSS_FA_UNI_EV_MAX_E = 667, 
    CPSS_DRAGONITE_UNI_EV_MIN_E, CPSS_DRAGONITE_PORT_ON_E = 668, CPSS_DRAGONITE_PORT_OFF_E, CPSS_DRAGONITE_DETECT_FAIL_E, 
    CPSS_DRAGONITE_PORT_FAULT_E, CPSS_DRAGONITE_PORT_UDL_E, CPSS_DRAGONITE_PORT_FAULT_ON_STARTUP_E, CPSS_DRAGONITE_PORT_PM_E, 
    CPSS_DRAGONITE_POWER_DENIED_E, CPSS_DRAGONITE_OVER_TEMP_E, CPSS_DRAGONITE_TEMP_ALARM_E, CPSS_DRAGONITE_DEVICE_FAULT_E, 
    CPSS_DRAGONITE_OVER_CONSUM_E, CPSS_DRAGONITE_VMAIN_LOW_AF_E, CPSS_DRAGONITE_VMAIN_LOW_AT_E, CPSS_DRAGONITE_VMAIN_HIGH_E, 
    CPSS_DRAGONITE_READ_EVENT_E, CPSS_DRAGONITE_WRITE_EVENT_E, CPSS_DRAGONITE_ERROR_E, CPSS_DRAGONITE_UNI_EV_DUMMY_MAX_E, 
    CPSS_DRAGONITE_UNI_EV_MAX_E = 685, CPSS_UNI_EV_DUMMY_MAX_E, CPSS_UNI_EVENT_COUNT_E = 686, 
    CPSS_UNI_RSRVD_EVENT_E = 65535} CPSS_UNI_EV_CAUSE_ENT;

File ../cpss/common/h/cpss/generic/events/private/prvCpssGenEvReq.h:
typedef enum {PRV_CPSS_EV_CONVERT_DIRECTION_UNI_EVENT_TO_HW_INTERRUPT_E, PRV_CPSS_EV_CONVERT_DIRECTION_HW_INTERRUPT_TO_UNI_EVENT_E, 
    PRV_CPSS_EV_CONVERT_TYPE_LAST} PRV_CPSS_EV_CONVERT_DIRECTION_ENT;

File ../cpss/common/h/cpss/generic/hwDriver/cpssHwDriverAPI.h:
CPSS_HW_DRIVER_STCT;
typedef enum {CPSS_HW_DRIVER_AS_CNM_E, CPSS_HW_DRIVER_AS_SWITCHING_E = 3, CPSS_HW_DRIVER_AS_MG0_E = 3, CPSS_HW_DRIVER_AS_MG1_E = 5, 
    CPSS_HW_DRIVER_AS_MG2_E, CPSS_HW_DRIVER_AS_MG3_E, CPSS_HW_DRIVER_AS_RESET_AND_INIT_CONTROLLER_E, CPSS_HW_DRIVER_AS_DFX_E = 8, 
    CPSS_HW_DRIVER_AS_DRAGONITE_E = 10, CPSS_HW_DRIVER_AS_DRAM_E = 16, CPSS_HW_DRIVER_AS_PCI_CONFIG_E, 
    CPSS_HW_DRIVER_AS_ATU_E} CPSS_HW_DRIVER_AS_ENT;
typedef void (*)(CPSS_HW_DRIVER_STCT *) CPSS_HW_DRIVER_METHOD_DESTROY;
typedef GT_STATUS (*)(CPSS_HW_DRIVER_STCT *, GT_U32, GT_U32, GT_U32 *, GT_U32) CPSS_HW_DRIVER_METHOD_READ;
typedef GT_STATUS (*)(CPSS_HW_DRIVER_STCT *, GT_U32, GT_U32, GT_U32 *, GT_U32, GT_U32) CPSS_HW_DRIVER_METHOD_WRITE_MASK;
typedef CPSS_HW_DRIVER_STCT CPSS_HW_DRIVER_STC;
struct CPSS_HW_DRIVER_STCT;

File ../cpss/common/h/cpss/generic/log/cpssLog.h:
typedef enum {CPSS_LOG_LIB_APP_DRIVER_CALL_E, CPSS_LOG_LIB_BRIDGE_E, CPSS_LOG_LIB_CNC_E, CPSS_LOG_LIB_CONFIG_E, CPSS_LOG_LIB_COS_E, 
    CPSS_LOG_LIB_HW_INIT_E, CPSS_LOG_LIB_CSCD_E, CPSS_LOG_LIB_CUT_THROUGH_E, CPSS_LOG_LIB_DIAG_E, CPSS_LOG_LIB_FABRIC_E, 
    CPSS_LOG_LIB_IP_E, CPSS_LOG_LIB_IPFIX_E, CPSS_LOG_LIB_IP_LPM_E, CPSS_LOG_LIB_L2_MLL_E, CPSS_LOG_LIB_LOGICAL_TARGET_E, 
    CPSS_LOG_LIB_LPM_E, CPSS_LOG_LIB_MIRROR_E, CPSS_LOG_LIB_MULTI_PORT_GROUP_E, CPSS_LOG_LIB_NETWORK_IF_E, CPSS_LOG_LIB_NST_E, 
    CPSS_LOG_LIB_OAM_E, CPSS_LOG_LIB_PCL_E, CPSS_LOG_LIB_PHY_E, CPSS_LOG_LIB_POLICER_E, CPSS_LOG_LIB_PORT_E, 
    CPSS_LOG_LIB_PROTECTION_E, CPSS_LOG_LIB_PTP_E, CPSS_LOG_LIB_SYSTEM_RECOVERY_E, CPSS_LOG_LIB_TCAM_E, CPSS_LOG_LIB_TM_GLUE_E, 
    CPSS_LOG_LIB_TRUNK_E, CPSS_LOG_LIB_TTI_E, CPSS_LOG_LIB_TUNNEL_E, CPSS_LOG_LIB_VNT_E, CPSS_LOG_LIB_RESOURCE_MANAGER_E, 
    CPSS_LOG_LIB_VERSION_E, CPSS_LOG_LIB_TM_E, CPSS_LOG_LIB_SMI_E, CPSS_LOG_LIB_INIT_E, CPSS_LOG_LIB_DRAGONITE_E, 
    CPSS_LOG_LIB_VIRTUAL_TCAM_E, CPSS_LOG_LIB_INGRESS_E, CPSS_LOG_LIB_EGRESS_E, CPSS_LOG_LIB_LATENCY_MONITORING_E, 
    CPSS_LOG_LIB_TAM_E, CPSS_LOG_LIB_EXACT_MATCH_E, CPSS_LOG_LIB_PHA_E, CPSS_LOG_LIB_PACKET_ANALYZER_E, CPSS_LOG_LIB_FLOW_MANAGER_E, 
    CPSS_LOG_LIB_BRIDGE_FDB_MANAGER_E, CPSS_LOG_LIB_I2C_E, CPSS_LOG_LIB_PPU_E, CPSS_LOG_LIB_EXACT_MATCH_MANAGER_E, 
    CPSS_LOG_LIB_MAC_SEC_E, CPSS_LOG_LIB_PTP_MANAGER_E, CPSS_LOG_LIB_ALL_E} CPSS_LOG_LIB_ENT;
typedef enum {CPSS_LOG_POINTER_FORMAT_SIMPLE_E, CPSS_LOG_POINTER_FORMAT_PREFIX_E} CPSS_LOG_POINTER_FORMAT_ENT;
typedef enum {CPSS_LOG_TYPE_INFO_E, CPSS_LOG_TYPE_ENTRY_LEVEL_FUNCTION_E, CPSS_LOG_TYPE_NON_ENTRY_LEVEL_FUNCTION_E, 
    CPSS_LOG_TYPE_DRIVER_E, CPSS_LOG_TYPE_ERROR_E, CPSS_LOG_TYPE_ALL_E} CPSS_LOG_TYPE_ENT;

File ../cpss/common/h/cpss/generic/version/gtVersion.h:
typedef struct {
    GT_U8 version[30];
} CPSS_VERSION_INFO_STC;
typedef struct {
    GT_U8 version[30];
} GT_VERSION;

File ../cpss/common/h/cpssCommon/cpssBuffManagerPool.h:
typedef void * CPSS_BM_POOL_ID;

File ../cpss/common/h/cpssCommon/private/prvCpssMisc.h:
PRV_CPSS_ENTRY_FORMAT_TABLE_STC;
typedef PRV_CPSS_ENTRY_FORMAT_TABLE_STC PRV_CPSS_ENTRY_FORMAT_TABLE_STC;

File ../cpss/common/h/cpssDriver/pp/prvCpssDrvErrataMng.h:
typedef enum {PRV_CPSS_DRV_ERRATA_PCI_READ_AFTER_WRITE_E, PRV_CPSS_DRV_ERRATA_PCI_SLAVE_UNABLE_TO_ABORT_TRANSACTION_E, 
    PRV_CPSS_DRV_ERRATA_SERDES_INTERNAL_REGS_ACCESS_WA_E, PRV_CPSS_DRV_ERRATA_MAX_NUM_E} PRV_CPSS_DRV_ERRATA_ENT;

File ../cpss/cpssEnabler/mainCmd/h/cmdShell/os/cmdOs.h:
typedef enum {CMD_STARTUP_SHELL_CMDSHELL_E, CMD_STARTUP_SHELL_LUACLI_E} CMD_STARTUP_SHELL_TYPE_ENT;

File ../cpss/cpssEnabler/mainCmd/h/cmdShell/os/cmdStreamImpl.h:
typedef GT_STATUS (*)(IOStreamPTR) eventLoopHandlerPTR;

File ../cpss/cpssEnabler/mainExtDrv/h/gtExtDrv/drivers/gtPciDrv.h:
typedef struct {
    struct {...} regs;
    struct {...} config;
    struct {...} dfx;
    struct {...} sram;
} GT_EXT_DRV_PCI_MAP_STC;

File ../cpss/cpssEnabler/mainOs/h/gtOs/gtOsIntr.h:
typedef enum {INTR_MODE_LOCK, INTR_MODE_UNLOCK} INTERRUPT_MODE;

File ../cpss/cpssEnabler/mainOs/h/gtOs/gtOsSem.h:
typedef unsigned long GT_MUTEX;
typedef unsigned long GT_SEM;

File ../cpss/cpssEnabler/mainOs/h/gtOs/gtOsTask.h:
typedef unsigned int GT_TASK;

File ../cpss/cpssEnabler/mainOs/h/gtStack/gtOsSocket.h:
typedef enum {SOCKET_SHUTDOWN_CLOSE_INPUT, SOCKET_SHUTDOWN_CLOSE_OUTPUT, SOCKET_SHUTDOWN_CLOSE_ALL} SOCKET_SHUTDOWN_OPERATION;

File ../cpss/mainExtUtils/h/extUtils/IOStream/IOStream.h:
typedef struct IOStreamSTC * IOStreamPTR;
struct IOStreamSTC;

File ../cpss/mainExtUtils/h/extUtils/rxEventHandler/rxEventHandler.h:
typedef enum {RX_EV_HANDLER_TYPE_RX_E, RX_EV_HANDLER_TYPE_RX_ERR_E, RX_EV_HANDLER_TYPE_ANY_E} RX_EV_HANDLER_EV_TYPE_ENT;
typedef GT_STATUS (*)(GT_UINTPTR, RX_EV_HANDLER_EV_TYPE_ENT, GT_U8, GT_U8, GT_U32, GT_U8 **, GT_U32 *, 
    void *) RX_EV_PACKET_RECEIVE_CB_FUN;

File ../cpss/mainPpDrv/h/cpss/dxCh/dxChxGen/bridge/cpssDxChBrgE2Phy.h:
typedef struct {
    GT_BOOL tunnelStart;
    GT_U32 tunnelStartPtr;
    CPSS_DXCH_TUNNEL_PASSANGER_TYPE_ENT tsPassengerPacketType;
    GT_U32 arpPtr;
    GT_BOOL modifyMacSa;
    GT_BOOL modifyMacDa;
    GT_BOOL forceArpTsPortDecision;
} CPSS_DXCH_BRG_EGRESS_PORT_INFO_STC;

File ../cpss/mainPpDrv/h/cpss/dxCh/dxChxGen/bridge/cpssDxChBrgEgrFlt.h:
typedef enum {CPSS_DXCH_BRG_EGR_FLT_PORT_LINK_STATUS_FORCE_LINK_UP_E, CPSS_DXCH_BRG_EGR_FLT_PORT_LINK_STATUS_FORCE_LINK_DOWN_E, 
    CPSS_DXCH_BRG_EGR_FLT_PORT_LINK_STATUS_LINK_STATE_BASED_E} CPSS_DXCH_BRG_EGR_FLT_PORT_LINK_STATUS_ENT;
typedef enum {CPSS_DXCH_BRG_EGR_FLT_VLAN_PORT_ACCESS_MODE_256_E, CPSS_DXCH_BRG_EGR_FLT_VLAN_PORT_ACCESS_MODE_512_E, 
    CPSS_DXCH_BRG_EGR_FLT_VLAN_PORT_ACCESS_MODE_1K_E, CPSS_DXCH_BRG_EGR_FLT_VLAN_PORT_ACCESS_MODE_2K_E, 
    CPSS_DXCH_BRG_EGR_FLT_VLAN_PORT_ACCESS_MODE_4K_E, CPSS_DXCH_BRG_EGR_FLT_VLAN_PORT_ACCESS_MODE_8K_E, 
    CPSS_DXCH_BRG_EGR_FLT_VLAN_PORT_ACCESS_MODE_16K_E, 
    CPSS_DXCH_BRG_EGR_FLT_VLAN_PORT_ACCESS_MODE_32K_E} CPSS_DXCH_BRG_EGR_FLT_VLAN_PORT_ACCESS_MODE_ENT;

File ../cpss/mainPpDrv/h/cpss/dxCh/dxChxGen/bridge/cpssDxChBrgFdb.h:
typedef enum {CPSS_DXCH_BRG_FDB_DEL_MODE_DYNAMIC_ONLY_E, CPSS_DXCH_BRG_FDB_DEL_MODE_ALL_E, 
    CPSS_DXCH_BRG_FDB_DEL_MODE_STATIC_ONLY_E} CPSS_DXCH_BRG_FDB_DEL_MODE_ENT;
typedef enum {CPSS_DXCH_BRG_FDB_LOOKUP_KEY_MODE_FID_E, 
    CPSS_DXCH_BRG_FDB_LOOKUP_KEY_MODE_FID_VID1_E} CPSS_DXCH_BRG_FDB_LOOKUP_KEY_MODE_ENT;
typedef enum {CPSS_DXCH_FDB_IPMC_ENTRY_MUXING_MODE_SRC_ID_7_E, CPSS_DXCH_FDB_IPMC_ENTRY_MUXING_MODE_UDB_4_SRC_ID_3_E, 
    CPSS_DXCH_FDB_IPMC_ENTRY_MUXING_MODE_UDB_7_E, 
    CPSS_DXCH_FDB_IPMC_ENTRY_MUXING_MODE__MUST_BE_LAST__E} CPSS_DXCH_FDB_IPMC_ENTRY_MUXING_MODE_ENT;
typedef enum {CPSS_DXCH_FDB_MAC_ENTRY_MUXING_MODE_TAG_1_VID_E, CPSS_DXCH_FDB_MAC_ENTRY_MUXING_MODE_SRC_ID_E, 
    CPSS_DXCH_FDB_MAC_ENTRY_MUXING_MODE_UDB_10_SRC_ID_1_DA_ACCESS_LEVEL_E, 
    CPSS_DXCH_FDB_MAC_ENTRY_MUXING_MODE_UDB_4_AND_4_SRC_ID_3_DA_ACCESS_LEVEL_E, 
    CPSS_DXCH_FDB_MAC_ENTRY_MUXING_MODE__MUST_BE_LAST__E} CPSS_DXCH_FDB_MAC_ENTRY_MUXING_MODE_ENT;

File ../cpss/mainPpDrv/h/cpss/dxCh/dxChxGen/bridge/cpssDxChBrgFdbHash.h:
typedef enum {CPSS_DXCH_BRG_FDB_CRC_HASH_UPPER_BITS_MODE_ALL_ZERO_E, CPSS_DXCH_BRG_FDB_CRC_HASH_UPPER_BITS_MODE_USE_FID_E, 
    CPSS_DXCH_BRG_FDB_CRC_HASH_UPPER_BITS_MODE_USE_MAC_E} CPSS_DXCH_BRG_FDB_CRC_HASH_UPPER_BITS_MODE_ENT;
typedef enum {CPSS_DXCH_BRG_FDB_TBL_SIZE_8K_E, CPSS_DXCH_BRG_FDB_TBL_SIZE_16K_E, CPSS_DXCH_BRG_FDB_TBL_SIZE_32K_E, 
    CPSS_DXCH_BRG_FDB_TBL_SIZE_64K_E, CPSS_DXCH_BRG_FDB_TBL_SIZE_128K_E, 
    CPSS_DXCH_BRG_FDB_TBL_SIZE_256K_E} CPSS_DXCH_BRG_FDB_TBL_SIZE_ENT;

File ../cpss/mainPpDrv/h/cpss/dxCh/dxChxGen/bridge/cpssDxChBrgGen.h:
typedef enum {CPSS_DXCH_ARP_BCAST_CMD_MODE_PORT_E, CPSS_DXCH_ARP_BCAST_CMD_MODE_VLAN_E} CPSS_DXCH_ARP_BCAST_CMD_MODE_ENT;
typedef enum {CPSS_DXCH_BRG_GEN_BYTE_COUNT_MODE_MTU_L3_E, 
    CPSS_DXCH_BRG_GEN_BYTE_COUNT_MODE_MTU_L2_E} CPSS_DXCH_BRG_GEN_BYTE_COUNT_MODE_MTU_ENT;

File ../cpss/mainPpDrv/h/cpss/dxCh/dxChxGen/bridge/cpssDxChBrgStp.h:
typedef enum {CPSS_BRG_STP_E_VLAN_MODE_E, CPSS_BRG_STP_E_PORT_MODE_E} CPSS_BRG_STP_STATE_MODE_ENT;

File ../cpss/mainPpDrv/h/cpss/dxCh/dxChxGen/bridge/cpssDxChBrgVlan.h:
CPSS_DXCH_BRG_VLAN_INFO_STC;
CPSS_DXCH_BRG_VLAN_PORTS_TAG_CMD_STC;
typedef enum {CPSS_DXCH_BRG_IP_CTRL_NONE_E, CPSS_DXCH_BRG_IP_CTRL_IPV4_E, CPSS_DXCH_BRG_IP_CTRL_IPV6_E, 
    CPSS_DXCH_BRG_IP_CTRL_IPV4_IPV6_E} CPSS_DXCH_BRG_IP_CTRL_TYPE_ENT;
typedef enum {CPSS_DXCH_BRG_VLAN_FLOOD_VIDX_MODE_UNREG_MC_E, 
    CPSS_DXCH_BRG_VLAN_FLOOD_VIDX_MODE_ALL_FLOODED_TRAFFIC_E} CPSS_DXCH_BRG_VLAN_FLOOD_VIDX_MODE_ENT;
typedef CPSS_DXCH_BRG_VLAN_INFO_STC CPSS_DXCH_BRG_VLAN_INFO_STC;
typedef enum {CPSS_DXCH_BRG_VLAN_PACKET_UNK_UCAST_E, CPSS_DXCH_BRG_VLAN_PACKET_UNREG_NON_IP_MCAST_E, 
    CPSS_DXCH_BRG_VLAN_PACKET_UNREG_IPV4_MCAST_E, CPSS_DXCH_BRG_VLAN_PACKET_UNREG_IPV6_MCAST_E, 
    CPSS_DXCH_BRG_VLAN_PACKET_UNREG_NON_IPV4_BCAST_E, 
    CPSS_DXCH_BRG_VLAN_PACKET_UNREG_IPV4_BCAST_E} CPSS_DXCH_BRG_VLAN_PACKET_TYPE_ENT;
typedef CPSS_DXCH_BRG_VLAN_PORTS_TAG_CMD_STC CPSS_DXCH_BRG_VLAN_PORTS_TAG_CMD_STC;
typedef enum {CPSS_DXCH_BRG_VLAN_PORT_ISOLATION_DISABLE_CMD_E, CPSS_DXCH_BRG_VLAN_PORT_ISOLATION_L2_CMD_E, 
    CPSS_DXCH_BRG_VLAN_PORT_ISOLATION_L3_CMD_E, 
    CPSS_DXCH_BRG_VLAN_PORT_ISOLATION_L2_L3_CMD_E} CPSS_DXCH_BRG_VLAN_PORT_ISOLATION_CMD_ENT;
typedef enum {CPSS_DXCH_BRG_VLAN_PORT_UNTAGGED_CMD_E, CPSS_DXCH_BRG_VLAN_PORT_TAG0_CMD_E, CPSS_DXCH_BRG_VLAN_PORT_TAG1_CMD_E, 
    CPSS_DXCH_BRG_VLAN_PORT_OUTER_TAG0_INNER_TAG1_CMD_E, CPSS_DXCH_BRG_VLAN_PORT_OUTER_TAG1_INNER_TAG0_CMD_E, 
    CPSS_DXCH_BRG_VLAN_PORT_PUSH_TAG0_CMD_E, CPSS_DXCH_BRG_VLAN_PORT_POP_OUTER_TAG_CMD_E, 
    CPSS_DXCH_BRG_VLAN_PORT_DO_NOT_MODIFY_TAG_CMD_E} CPSS_DXCH_BRG_VLAN_PORT_TAG_CMD_ENT;
typedef enum {CPSS_DXCH_BRG_VLAN_UNREG_IPM_EVIDX_MODE_BOTH_E, CPSS_DXCH_BRG_VLAN_UNREG_IPM_EVIDX_MODE_IPV4_E, 
    CPSS_DXCH_BRG_VLAN_UNREG_IPM_EVIDX_MODE_IPV6_E, 
    CPSS_DXCH_BRG_VLAN_UNREG_IPM_EVIDX_MODE_BOTH_IPV6_INCREMENT_E} CPSS_DXCH_BRG_VLAN_UNREG_IPM_EVIDX_MODE_ENT;

File ../cpss/mainPpDrv/h/cpss/dxCh/dxChxGen/bridge/private/prvCpssDxChBrgFdbHash.h:
PRV_CPSS_DXCH_MAC_HASH_STC;
typedef PRV_CPSS_DXCH_MAC_HASH_STC PRV_CPSS_DXCH_MAC_HASH_STC;

File ../cpss/mainPpDrv/h/cpss/dxCh/dxChxGen/bridgeFdbManager/cpssDxChBrgFdbManagerTypes.h:
CPSS_DXCH_BRG_FDB_MANAGER_AGING_SCAN_PARAMS_STC;
CPSS_DXCH_BRG_FDB_MANAGER_AGING_STC;
CPSS_DXCH_BRG_FDB_MANAGER_CAPACITY_STC;
CPSS_DXCH_BRG_FDB_MANAGER_COUNTERS_STC;
CPSS_DXCH_BRG_FDB_MANAGER_DELETE_SCAN_PARAMS_STC;
CPSS_DXCH_BRG_FDB_MANAGER_DYNAMIC_MAC_UC_LIMIT_STC;
CPSS_DXCH_BRG_FDB_MANAGER_DYNAMIC_MAC_UC_LIMIT_UNT;
CPSS_DXCH_BRG_FDB_MANAGER_ENTRY_ADD_PARAMS_STC;
CPSS_DXCH_BRG_FDB_MANAGER_ENTRY_ATTRIBUTES_STC;
CPSS_DXCH_BRG_FDB_MANAGER_ENTRY_FORMAT_UNT;
CPSS_DXCH_BRG_FDB_MANAGER_ENTRY_INTERFACE_INFO_STC;
CPSS_DXCH_BRG_FDB_MANAGER_ENTRY_INTERFACE_INFO_UNT;
CPSS_DXCH_BRG_FDB_MANAGER_ENTRY_IP_MC_FORMAT_STC;
CPSS_DXCH_BRG_FDB_MANAGER_ENTRY_MAC_ADDR_FORMAT_STC;
CPSS_DXCH_BRG_FDB_MANAGER_ENTRY_STC;
CPSS_DXCH_BRG_FDB_MANAGER_ENTRY_UPDATE_EVENT_INFO_UNT;
CPSS_DXCH_BRG_FDB_MANAGER_ENTRY_UPDATE_EVENT_MOVED_FORMAT_STC;
CPSS_DXCH_BRG_FDB_MANAGER_ENTRY_UPDATE_EVENT_MOVED_REACH_LIMIT_AND_DELETED_FORMAT_STC;
CPSS_DXCH_BRG_FDB_MANAGER_ENTRY_UPDATE_EVENT_NEW_FORMAT_STC;
CPSS_DXCH_BRG_FDB_MANAGER_ENTRY_UPDATE_EVENT_STC;
CPSS_DXCH_BRG_FDB_MANAGER_HW_CAPACITY_STC;
CPSS_DXCH_BRG_FDB_MANAGER_IPV4_UC_ROUTING_INFO_STC;
CPSS_DXCH_BRG_FDB_MANAGER_IPV6_UC_ROUTING_INFO_STC;
CPSS_DXCH_BRG_FDB_MANAGER_LEARNING_SCAN_PARAMS_STC;
CPSS_DXCH_BRG_FDB_MANAGER_LEARNING_STC;
CPSS_DXCH_BRG_FDB_MANAGER_LOOKUP_STC;
CPSS_DXCH_BRG_FDB_MANAGER_UC_ROUTING_TYPE_IPV6_EXT_INFO_STC;
CPSS_DXCH_BRG_FDB_MANAGER_UC_ROUTING_TYPE_NEXT_HOP_INFO_FIELD_POINTER_UNT;
CPSS_DXCH_BRG_FDB_MANAGER_UC_ROUTING_TYPE_NEXT_HOP_INFO_FULL_IN_FDB_STC;
CPSS_DXCH_BRG_FDB_MANAGER_UC_ROUTING_TYPE_NEXT_HOP_INFO_UNT;
typedef CPSS_DXCH_BRG_FDB_MANAGER_AGING_SCAN_PARAMS_STC CPSS_DXCH_BRG_FDB_MANAGER_AGING_SCAN_PARAMS_STC;
typedef CPSS_DXCH_BRG_FDB_MANAGER_AGING_STC CPSS_DXCH_BRG_FDB_MANAGER_AGING_STC;
typedef CPSS_DXCH_BRG_FDB_MANAGER_CAPACITY_STC CPSS_DXCH_BRG_FDB_MANAGER_CAPACITY_STC;
typedef CPSS_DXCH_BRG_FDB_MANAGER_COUNTERS_STC CPSS_DXCH_BRG_FDB_MANAGER_COUNTERS_STC;
typedef enum {CPSS_DXCH_BRG_FDB_MANAGER_CRC_HASH_UPPER_BITS_MODE_ALL_ZERO_E, 
    CPSS_DXCH_BRG_FDB_MANAGER_CRC_HASH_UPPER_BITS_MODE_USE_FID_E, 
    CPSS_DXCH_BRG_FDB_MANAGER_CRC_HASH_UPPER_BITS_MODE_USE_MAC_E} CPSS_DXCH_BRG_FDB_MANAGER_CRC_HASH_UPPER_BITS_MODE_ENT;
typedef enum {CPSS_DXCH_BRG_FDB_MANAGER_DB_CHECKS_GLOBAL_PARAM_HW_INVALID_E, 
    CPSS_DXCH_BRG_FDB_MANAGER_DB_CHECKS_TYPE_COUNTERS_INVALID_E, CPSS_DXCH_BRG_FDB_MANAGER_DB_CHECKS_BANK_COUNTERS_INVALID_E, 
    CPSS_DXCH_BRG_FDB_MANAGER_DB_CHECKS_HW_SW_BANK_COUNTERS_MISMATCH_E, 
    CPSS_DXCH_BRG_FDB_MANAGER_DB_CHECKS_FREE_LIST_1ST_PTR_INVALID_E, 
    CPSS_DXCH_BRG_FDB_MANAGER_DB_CHECKS_FREE_LIST_ENTRIES_NUM_MISMATCH_E, 
    CPSS_DXCH_BRG_FDB_MANAGER_DB_CHECKS_USED_LIST_1ST_PTR_INVALID_E, 
    CPSS_DXCH_BRG_FDB_MANAGER_DB_CHECKS_USED_LIST_LAST_PTR_INVALID_E, 
    CPSS_DXCH_BRG_FDB_MANAGER_DB_CHECKS_USED_LIST_GETNEXT_PTR_INVALID_E, 
    CPSS_DXCH_BRG_FDB_MANAGER_DB_CHECKS_USED_LIST_TRANS_SCAN_PTR_INVALID_E, 
    CPSS_DXCH_BRG_FDB_MANAGER_DB_CHECKS_USED_LIST_DELETE_SCAN_PTR_INVALID_E, 
    CPSS_DXCH_BRG_FDB_MANAGER_DB_CHECKS_USED_LIST_ENTRY_PREV_PTR_INVALID_E, 
    CPSS_DXCH_BRG_FDB_MANAGER_DB_CHECKS_USED_LIST_ENTRIES_NUM_MISMATCH_E, 
    CPSS_DXCH_BRG_FDB_MANAGER_DB_CHECKS_INDEX_POINT_INVALID_ENTRY_E, CPSS_DXCH_BRG_FDB_MANAGER_DB_CHECKS_ENTRY_INDEX_INVALID_E, 
    CPSS_DXCH_BRG_FDB_MANAGER_DB_CHECKS_AGING_BIN_ENTRIES_NUM_MISMATCH_E, 
    CPSS_DXCH_BRG_FDB_MANAGER_DB_CHECKS_AGING_TOTAL_NUM_MISMATCH_E, 
    CPSS_DXCH_BRG_FDB_MANAGER_DB_CHECKS_AGING_ENTRY_BIN_INDEX_INVALID_E, 
    CPSS_DXCH_BRG_FDB_MANAGER_DB_CHECKS_AGING_SCAN_PTR_INVALID_E, 
    CPSS_DXCH_BRG_FDB_MANAGER_DB_CHECKS_AGING_USAGE_MATRIX_L1_INVALID_E, 
    CPSS_DXCH_BRG_FDB_MANAGER_DB_CHECKS_AGING_USAGE_MATRIX_L2_INVALID_E, CPSS_DXCH_BRG_FDB_MANAGER_DB_CHECKS_HW_ENTRY_INVALID_E, 
    CPSS_DXCH_BRG_FDB_MANAGER_DB_CHECKS_HW_FREE_ENTRY_VALID_EXIST_E, CPSS_DXCH_BRG_FDB_MANAGER_DB_CHECKS_HW_FREE_ENTRY_SP_EXIST_E, 
    CPSS_DXCH_BRG_FDB_MANAGER_DB_CHECKS_LEARN_LIMIT_GLOBAL_INVALID_E, CPSS_DXCH_BRG_FDB_MANAGER_DB_CHECKS_LEARN_LIMIT_FID_INVALID_E, 
    CPSS_DXCH_BRG_FDB_MANAGER_DB_CHECKS_LEARN_LIMIT_GLOBAL_EPORT_INVALID_E, 
    CPSS_DXCH_BRG_FDB_MANAGER_DB_CHECKS_LEARN_LIMIT_TRUNK_INVALID_E, CPSS_DXCH_BRG_FDB_MANAGER_DB_CHECKS_LEARN_LIMIT_PORT_INVALID_E, 
    CPSS_DXCH_BRG_FDB_MANAGER_DB_CHECKS_LEARN_LIMIT_SRC_INTERFACES_CURRENT_INVALID_E, 
    CPSS_DXCH_BRG_FDB_MANAGER_DB_CHECKS___LAST___E} CPSS_DXCH_BRG_FDB_MANAGER_DB_CHECKS_RESULT_ENT;
typedef CPSS_DXCH_BRG_FDB_MANAGER_DELETE_SCAN_PARAMS_STC CPSS_DXCH_BRG_FDB_MANAGER_DELETE_SCAN_PARAMS_STC;
typedef CPSS_DXCH_BRG_FDB_MANAGER_DYNAMIC_MAC_UC_LIMIT_STC CPSS_DXCH_BRG_FDB_MANAGER_DYNAMIC_MAC_UC_LIMIT_STC;
typedef enum {CPSS_DXCH_BRG_FDB_MANAGER_DYNAMIC_MAC_UC_LIMIT_TYPE_GLOBAL_E, 
    CPSS_DXCH_BRG_FDB_MANAGER_DYNAMIC_MAC_UC_LIMIT_TYPE_FID_E, CPSS_DXCH_BRG_FDB_MANAGER_DYNAMIC_MAC_UC_LIMIT_TYPE_TRUNK_E, 
    CPSS_DXCH_BRG_FDB_MANAGER_DYNAMIC_MAC_UC_LIMIT_TYPE_GLOBAL_EPORT_E, CPSS_DXCH_BRG_FDB_MANAGER_DYNAMIC_MAC_UC_LIMIT_TYPE_PORT_E, 
    CPSS_DXCH_BRG_FDB_MANAGER_DYNAMIC_MAC_UC_LIMIT_TYPE__LAST__E} CPSS_DXCH_BRG_FDB_MANAGER_DYNAMIC_MAC_UC_LIMIT_TYPE_ENT;
typedef CPSS_DXCH_BRG_FDB_MANAGER_DYNAMIC_MAC_UC_LIMIT_UNT CPSS_DXCH_BRG_FDB_MANAGER_DYNAMIC_MAC_UC_LIMIT_UNT;
typedef CPSS_DXCH_BRG_FDB_MANAGER_ENTRY_ADD_PARAMS_STC CPSS_DXCH_BRG_FDB_MANAGER_ENTRY_ADD_PARAMS_STC;
typedef CPSS_DXCH_BRG_FDB_MANAGER_ENTRY_ATTRIBUTES_STC CPSS_DXCH_BRG_FDB_MANAGER_ENTRY_ATTRIBUTES_STC;
typedef CPSS_DXCH_BRG_FDB_MANAGER_ENTRY_FORMAT_UNT CPSS_DXCH_BRG_FDB_MANAGER_ENTRY_FORMAT_UNT;
typedef CPSS_DXCH_BRG_FDB_MANAGER_ENTRY_INTERFACE_INFO_STC CPSS_DXCH_BRG_FDB_MANAGER_ENTRY_INTERFACE_INFO_STC;
typedef CPSS_DXCH_BRG_FDB_MANAGER_ENTRY_INTERFACE_INFO_UNT CPSS_DXCH_BRG_FDB_MANAGER_ENTRY_INTERFACE_INFO_UNT;
typedef CPSS_DXCH_BRG_FDB_MANAGER_ENTRY_IP_MC_FORMAT_STC CPSS_DXCH_BRG_FDB_MANAGER_ENTRY_IP_MC_FORMAT_STC;
typedef CPSS_DXCH_BRG_FDB_MANAGER_ENTRY_MAC_ADDR_FORMAT_STC CPSS_DXCH_BRG_FDB_MANAGER_ENTRY_MAC_ADDR_FORMAT_STC;
typedef CPSS_DXCH_BRG_FDB_MANAGER_ENTRY_STC CPSS_DXCH_BRG_FDB_MANAGER_ENTRY_STC;
typedef enum {CPSS_DXCH_BRG_FDB_MANAGER_ENTRY_TYPE_MAC_ADDR_E, CPSS_DXCH_BRG_FDB_MANAGER_ENTRY_TYPE_IPV4_MC_E, 
    CPSS_DXCH_BRG_FDB_MANAGER_ENTRY_TYPE_IPV6_MC_E, CPSS_DXCH_BRG_FDB_MANAGER_ENTRY_TYPE_IPV4_UC_E, 
    CPSS_DXCH_BRG_FDB_MANAGER_ENTRY_TYPE_IPV6_UC_E, 
    CPSS_DXCH_BRG_FDB_MANAGER_ENTRY_TYPE__LAST__E} CPSS_DXCH_BRG_FDB_MANAGER_ENTRY_TYPE_ENT;
typedef CPSS_DXCH_BRG_FDB_MANAGER_ENTRY_UPDATE_EVENT_INFO_UNT CPSS_DXCH_BRG_FDB_MANAGER_ENTRY_UPDATE_EVENT_INFO_UNT;
typedef CPSS_DXCH_BRG_FDB_MANAGER_ENTRY_UPDATE_EVENT_MOVED_FORMAT_STC CPSS_DXCH_BRG_FDB_MANAGER_ENTRY_UPDATE_EVENT_MOVED_FORMAT_STC;
typedef CPSS_DXCH_BRG_FDB_MANAGER_ENTRY_UPDATE_EVENT_MOVED_REACH_LIMIT_AND_DELETED_FORMAT_STC CPSS_DXCH_BRG_FDB_MANAGER_ENTRY_UPDATE_EVENT_MOVED_REACH_LIMIT_AND_DELETED_FORMAT_STC;
typedef CPSS_DXCH_BRG_FDB_MANAGER_ENTRY_UPDATE_EVENT_NEW_FORMAT_STC CPSS_DXCH_BRG_FDB_MANAGER_ENTRY_UPDATE_EVENT_NEW_FORMAT_STC;
typedef CPSS_DXCH_BRG_FDB_MANAGER_ENTRY_UPDATE_EVENT_STC CPSS_DXCH_BRG_FDB_MANAGER_ENTRY_UPDATE_EVENT_STC;
typedef enum {CPSS_DXCH_BRG_FDB_MANAGER_ENTRY_UPDATE_EVENT_TYPE_NEW_E, CPSS_DXCH_BRG_FDB_MANAGER_ENTRY_UPDATE_EVENT_TYPE_MOVED_E, 
    CPSS_DXCH_BRG_FDB_MANAGER_ENTRY_UPDATE_EVENT_TYPE_NO_SPACE_E, CPSS_DXCH_BRG_FDB_MANAGER_ENTRY_UPDATE_EVENT_TYPE_AGED_OUT_E, 
    CPSS_DXCH_BRG_FDB_MANAGER_ENTRY_UPDATE_EVENT_TYPE_AGED_DELETED_E, CPSS_DXCH_BRG_FDB_MANAGER_ENTRY_UPDATE_EVENT_TYPE_DELETED_E, 
    CPSS_DXCH_BRG_FDB_MANAGER_ENTRY_UPDATE_EVENT_TYPE_TRANSPLANTED_E, 
    CPSS_DXCH_BRG_FDB_MANAGER_ENTRY_UPDATE_EVENT_TYPE_MOVED_REACH_LIMIT_AND_DELETED_E, 
    CPSS_DXCH_BRG_FDB_MANAGER_ENTRY_UPDATE_EVENT_TYPE_NEW_REACH_LIMIT_E} CPSS_DXCH_BRG_FDB_MANAGER_ENTRY_UPDATE_EVENT_TYPE_ENT;
typedef struct {
    GT_BOOL updateOnlySrcInterface;
} CPSS_DXCH_BRG_FDB_MANAGER_ENTRY_UPDATE_PARAMS_STC;
typedef CPSS_DXCH_BRG_FDB_MANAGER_HW_CAPACITY_STC CPSS_DXCH_BRG_FDB_MANAGER_HW_CAPACITY_STC;
typedef enum {CPSS_DXCH_BRG_FDB_MANAGER_IPMC_ENTRY_MUXING_MODE_SRC_ID_E, 
    CPSS_DXCH_BRG_FDB_MANAGER_IPMC_ENTRY_MUXING_MODE_UDB_4_SRC_ID_3_E, CPSS_DXCH_BRG_FDB_MANAGER_IPMC_ENTRY_MUXING_MODE_UDB_E, 
    CPSS_DXCH_BRG_FDB_MANAGER_IPMC_ENTRY_MUXING_MODE__MUST_BE_LAST__E} CPSS_DXCH_BRG_FDB_MANAGER_IPMC_ENTRY_MUXING_MODE_ENT;
typedef CPSS_DXCH_BRG_FDB_MANAGER_IPV4_UC_ROUTING_INFO_STC CPSS_DXCH_BRG_FDB_MANAGER_IPV4_UC_ROUTING_INFO_STC;
typedef CPSS_DXCH_BRG_FDB_MANAGER_IPV6_UC_ROUTING_INFO_STC CPSS_DXCH_BRG_FDB_MANAGER_IPV6_UC_ROUTING_INFO_STC;
typedef CPSS_DXCH_BRG_FDB_MANAGER_LEARNING_SCAN_PARAMS_STC CPSS_DXCH_BRG_FDB_MANAGER_LEARNING_SCAN_PARAMS_STC;
typedef CPSS_DXCH_BRG_FDB_MANAGER_LEARNING_STC CPSS_DXCH_BRG_FDB_MANAGER_LEARNING_STC;
typedef CPSS_DXCH_BRG_FDB_MANAGER_LOOKUP_STC CPSS_DXCH_BRG_FDB_MANAGER_LOOKUP_STC;
typedef enum {CPSS_DXCH_BRG_FDB_MANAGER_MAC_ENTRY_MUXING_MODE_TAG1_VID_E, CPSS_DXCH_BRG_FDB_MANAGER_MAC_ENTRY_MUXING_MODE_SRC_ID_E, 
    CPSS_DXCH_BRG_FDB_MANAGER_MAC_ENTRY_MUXING_MODE_UDB_10_SRC_ID_1_DA_ACCESS_LEVEL_E, 
    CPSS_DXCH_BRG_FDB_MANAGER_MAC_ENTRY_MUXING_MODE_UDB_8_SRC_ID_3_DA_ACCESS_LEVEL_E, 
    CPSS_DXCH_BRG_FDB_MANAGER_MAC_ENTRY_MUXING_MODE__MUST_BE_LAST__E} CPSS_DXCH_BRG_FDB_MANAGER_MAC_ENTRY_MUXING_MODE_ENT;
typedef enum {CPSS_DXCH_BRG_FDB_MANAGER_MAC_VLAN_LOOKUP_MODE_MAC_ONLY_E, 
    CPSS_DXCH_BRG_FDB_MANAGER_MAC_VLAN_LOOKUP_MODE_MAC_AND_FID_E, 
    CPSS_DXCH_BRG_FDB_MANAGER_MAC_VLAN_LOOKUP_MODE_MAC_AND_FID_AND_VID1_E} CPSS_DXCH_BRG_FDB_MANAGER_MAC_VLAN_LOOKUP_MODE_ENT;
typedef enum {CPSS_DXCH_BRG_FDB_MANAGER_MIRROR_TO_ANALYZER_DISABLED_E, 
    CPSS_DXCH_BRG_FDB_MANAGER_MIRROR_TO_ANALYZER_ON_SA_OR_DA_E} CPSS_DXCH_BRG_FDB_MANAGER_MIRROR_TO_ANALYZER_ENT;
typedef enum {CPSS_DXCH_BRG_FDB_MANAGER_SHADOW_TYPE_SIP6_E, 
    CPSS_DXCH_BRG_FDB_MANAGER_SHADOW_TYPE_SIP4_E} CPSS_DXCH_BRG_FDB_MANAGER_SHADOW_TYPE_ENT;
typedef enum {CPSS_DXCH_BRG_FDB_MANAGER_UC_ROUTING_TYPE_NEXT_HOP_INFO_FULL_IN_FDB_TUNNEL_START_PTR_E, 
    CPSS_DXCH_BRG_FDB_MANAGER_UC_ROUTING_TYPE_NEXT_HOP_INFO_FULL_IN_FDB_NAT_PTR_E, 
    CPSS_DXCH_BRG_FDB_MANAGER_UC_ROUTING_TYPE_NEXT_HOP_INFO_FULL_IN_FDB_ARP_PTR_E, 
    CPSS_DXCH_BRG_FDB_MANAGER_UC_ROUTING_TYPE_NEXT_HOP_POINTER_TO_ROUTER_E, 
    CPSS_DXCH_BRG_FDB_MANAGER_UC_ROUTING_TYPE_ECMP_POINTER_TO_ROUTER_E} CPSS_DXCH_BRG_FDB_MANAGER_UC_ROUTING_TYPE_ENT;
typedef CPSS_DXCH_BRG_FDB_MANAGER_UC_ROUTING_TYPE_IPV6_EXT_INFO_STC CPSS_DXCH_BRG_FDB_MANAGER_UC_ROUTING_TYPE_IPV6_EXT_INFO_STC;
typedef CPSS_DXCH_BRG_FDB_MANAGER_UC_ROUTING_TYPE_NEXT_HOP_INFO_FIELD_POINTER_UNT CPSS_DXCH_BRG_FDB_MANAGER_UC_ROUTING_TYPE_NEXT_HOP_INFO_FIELD_POINTER_UNT;
typedef CPSS_DXCH_BRG_FDB_MANAGER_UC_ROUTING_TYPE_NEXT_HOP_INFO_FULL_IN_FDB_STC CPSS_DXCH_BRG_FDB_MANAGER_UC_ROUTING_TYPE_NEXT_HOP_INFO_FULL_IN_FDB_STC;
typedef CPSS_DXCH_BRG_FDB_MANAGER_UC_ROUTING_TYPE_NEXT_HOP_INFO_UNT CPSS_DXCH_BRG_FDB_MANAGER_UC_ROUTING_TYPE_NEXT_HOP_INFO_UNT;

File ../cpss/mainPpDrv/h/cpss/dxCh/dxChxGen/cnc/cpssDxChCnc.h:
typedef enum {CPSS_DXCH_CNC_BYTE_COUNT_MODE_L2_E, CPSS_DXCH_CNC_BYTE_COUNT_MODE_L3_E} CPSS_DXCH_CNC_BYTE_COUNT_MODE_ENT;
typedef enum {CPSS_DXCH_CNC_CLIENT_L2L3_INGRESS_VLAN_E, CPSS_DXCH_CNC_CLIENT_INGRESS_PCL_LOOKUP_0_E, 
    CPSS_DXCH_CNC_CLIENT_INGRESS_PCL_LOOKUP_0_1_E, CPSS_DXCH_CNC_CLIENT_INGRESS_PCL_LOOKUP_1_E, 
    CPSS_DXCH_CNC_CLIENT_INGRESS_VLAN_PASS_DROP_E, CPSS_DXCH_CNC_CLIENT_EGRESS_VLAN_PASS_DROP_E, 
    CPSS_DXCH_CNC_CLIENT_EGRESS_QUEUE_PASS_DROP_E, CPSS_DXCH_CNC_CLIENT_EGRESS_PCL_E, CPSS_DXCH_CNC_CLIENT_ARP_TABLE_ACCESS_E, 
    CPSS_DXCH_CNC_CLIENT_TUNNEL_START_E, CPSS_DXCH_CNC_CLIENT_TTI_E, CPSS_DXCH_CNC_CLIENT_INGRESS_SRC_EPORT_E, 
    CPSS_DXCH_CNC_CLIENT_EGRESS_TRG_EPORT_E, CPSS_DXCH_CNC_CLIENT_TTI_PARALLEL_0_E, CPSS_DXCH_CNC_CLIENT_TTI_PARALLEL_1_E, 
    CPSS_DXCH_CNC_CLIENT_INGRESS_PCL_LOOKUP_0_PARALLEL_0_E, CPSS_DXCH_CNC_CLIENT_INGRESS_PCL_LOOKUP_0_PARALLEL_1_E, 
    CPSS_DXCH_CNC_CLIENT_INGRESS_PCL_LOOKUP_0_PARALLEL_2_E, CPSS_DXCH_CNC_CLIENT_INGRESS_PCL_LOOKUP_0_PARALLEL_3_E, 
    CPSS_DXCH_CNC_CLIENT_INGRESS_PCL_LOOKUP_1_PARALLEL_0_E, CPSS_DXCH_CNC_CLIENT_INGRESS_PCL_LOOKUP_1_PARALLEL_1_E, 
    CPSS_DXCH_CNC_CLIENT_INGRESS_PCL_LOOKUP_1_PARALLEL_2_E, CPSS_DXCH_CNC_CLIENT_INGRESS_PCL_LOOKUP_1_PARALLEL_3_E, 
    CPSS_DXCH_CNC_CLIENT_INGRESS_PCL_LOOKUP_2_PARALLEL_0_E, CPSS_DXCH_CNC_CLIENT_INGRESS_PCL_LOOKUP_2_PARALLEL_1_E, 
    CPSS_DXCH_CNC_CLIENT_INGRESS_PCL_LOOKUP_2_PARALLEL_2_E, CPSS_DXCH_CNC_CLIENT_INGRESS_PCL_LOOKUP_2_PARALLEL_3_E, 
    CPSS_DXCH_CNC_CLIENT_EGRESS_PCL_PARALLEL_0_E, CPSS_DXCH_CNC_CLIENT_EGRESS_PCL_PARALLEL_1_E, 
    CPSS_DXCH_CNC_CLIENT_EGRESS_PCL_PARALLEL_2_E, CPSS_DXCH_CNC_CLIENT_EGRESS_PCL_PARALLEL_3_E, 
    CPSS_DXCH_CNC_CLIENT_PACKET_TYPE_PASS_DROP_E, CPSS_DXCH_CNC_CLIENT_TM_PASS_DROP_E, CPSS_DXCH_CNC_CLIENT_TTI_PARALLEL_2_E, 
    CPSS_DXCH_CNC_CLIENT_TTI_PARALLEL_3_E, CPSS_DXCH_CNC_CLIENT_EGRESS_VLAN_EGRESS_FILTER_PASS_DROP_E, 
    CPSS_DXCH_CNC_CLIENT_EGRESS_PACKET_TYPE_PASS_DROP_E, CPSS_DXCH_CNC_CLIENT_QUEUE_STAT_E, CPSS_DXCH_CNC_CLIENT_PORT_STAT_E, 
    CPSS_DXCH_CNC_CLIENT_PHA_E, CPSS_DXCH_CNC_CLIENT_LAST_E} CPSS_DXCH_CNC_CLIENT_ENT;
typedef enum {CPSS_DXCH_CNC_COUNTER_FORMAT_MODE_0_E, CPSS_DXCH_CNC_COUNTER_FORMAT_MODE_1_E, CPSS_DXCH_CNC_COUNTER_FORMAT_MODE_2_E, 
    CPSS_DXCH_CNC_COUNTER_FORMAT_MODE_3_E, CPSS_DXCH_CNC_COUNTER_FORMAT_MODE_4_E, 
    CPSS_DXCH_CNC_COUNTER_FORMAT_MODE_5_E} CPSS_DXCH_CNC_COUNTER_FORMAT_ENT;
typedef struct {
    GT_U64 byteCount;
    GT_U64 packetCount;
    GT_U64 maxValue;
} CPSS_DXCH_CNC_COUNTER_STC;
typedef enum {CPSS_DXCH_CNC_COUNTING_ENABLE_UNIT_TTI_E, CPSS_DXCH_CNC_COUNTING_ENABLE_UNIT_PCL_E, 
    CPSS_DXCH_CNC_COUNTING_ENABLE_UNIT_EGRESS_FILTER_PASS_DROP_E, 
    CPSS_DXCH_CNC_COUNTING_ENABLE_UNIT_PHA_E} CPSS_DXCH_CNC_COUNTING_ENABLE_UNIT_ENT;
typedef enum {CPSS_DXCH_CNC_EGRESS_QUEUE_CLIENT_MODE_TAIL_DROP_E, CPSS_DXCH_CNC_EGRESS_QUEUE_CLIENT_MODE_CN_E, 
    CPSS_DXCH_CNC_EGRESS_QUEUE_CLIENT_MODE_TAIL_DROP_REDUCED_E} CPSS_DXCH_CNC_EGRESS_QUEUE_CLIENT_MODE_ENT;
typedef enum {CPSS_DXCH_CNC_VLAN_INDEX_MODE_ORIGINAL_VID_E, CPSS_DXCH_CNC_VLAN_INDEX_MODE_EVID_E, 
    CPSS_DXCH_CNC_VLAN_INDEX_MODE_TAG1_VID_E} CPSS_DXCH_CNC_VLAN_INDEX_MODE_ENT;

File ../cpss/mainPpDrv/h/cpss/dxCh/dxChxGen/config/cpssDxChCfgInit.h:
CPSS_DXCH_CFG_GLOBAL_EPORT_STC;
CPSS_DXCH_CFG_REMOTE_PHY_MAC_INFO_STC;
CPSS_DXCH_CFG_REMOTE_PHY_MAC_PORT_INFO_STC;
typedef struct {
    CPSS_GEN_CFG_DEV_INFO_STC genDevInfo;
} CPSS_DXCH_CFG_DEV_INFO_STC;
typedef enum {CPSS_DXCH_CFG_GLOBAL_EPORT_CONFG_DISABLE_E, CPSS_DXCH_CFG_GLOBAL_EPORT_CONFG_ENABLE_PATTERN_MASK_E, 
    CPSS_DXCH_CFG_GLOBAL_EPORT_CONFG_ENABLE_RANGE_E, CPSS_DXCH_CFG_GLOBAL_EPORT_CONFG_LAST_E} CPSS_DXCH_CFG_GLOBAL_EPORT_CONFG_ENT;
typedef CPSS_DXCH_CFG_GLOBAL_EPORT_STC CPSS_DXCH_CFG_GLOBAL_EPORT_STC;
typedef CPSS_DXCH_CFG_REMOTE_PHY_MAC_INFO_STC CPSS_DXCH_CFG_REMOTE_PHY_MAC_INFO_STC;
typedef CPSS_DXCH_CFG_REMOTE_PHY_MAC_PORT_INFO_STC CPSS_DXCH_CFG_REMOTE_PHY_MAC_PORT_INFO_STC;
typedef enum {CPSS_DXCH_CFG_REMOTE_PHY_MAC_TYPE_88E1690_E, 
    CPSS_DXCH_CFG_REMOTE_PHY_MAC_TYPE__LAST___E} CPSS_DXCH_CFG_REMOTE_PHY_MAC_TYPE_ENT;
typedef enum {CPSS_DXCH_POLICY_BASED_ROUTING_ONLY_E, CPSS_DXCH_TCAM_ROUTER_BASED_E} CPSS_DXCH_CFG_ROUTING_MODE_ENT;
typedef enum {CPSS_DXCH_CFG_SHARED_TABLE_MODE_MAX_L3_MIN_L2_NO_EM_E, CPSS_DXCH_CFG_SHARED_TABLE_MODE_MIN_L3_MAX_L2_NO_EM_E, 
    CPSS_DXCH_CFG_SHARED_TABLE_MODE_MID_L3_MID_L2_MIN_EM_E, CPSS_DXCH_CFG_SHARED_TABLE_MODE_MID_L3_MIN_L2_MAX_EM_E, 
    CPSS_DXCH_CFG_SHARED_TABLE_MODE_MID_LOW_L3_MID_LOW_L2_MAX_EM_E, CPSS_DXCH_CFG_SHARED_TABLE_MODE_MID_L3_MID_L2_NO_EM_E, 
    CPSS_DXCH_CFG_SHARED_TABLE_MODE_MID_LOW_L3_MID_L2_MID_EM_E, 
    CPSS_DXCH_CFG_SHARED_TABLE_MODE_MID_L3_MID_LOW_L2_MID_EM_MAX_ARP_E} CPSS_DXCH_CFG_SHARED_TABLE_MODE_ENT;
typedef enum {CPSS_DXCH_CFG_TABLE_VLAN_E, CPSS_DXCH_CFG_TABLE_FDB_E, CPSS_DXCH_CFG_TABLE_PCL_ACTION_E, 
    CPSS_DXCH_CFG_TABLE_PCL_TCAM_E, CPSS_DXCH_CFG_TABLE_ROUTER_NEXT_HOP_E, CPSS_DXCH_CFG_TABLE_ROUTER_LTT_E, 
    CPSS_DXCH_CFG_TABLE_ROUTER_TCAM_E, CPSS_DXCH_CFG_TABLE_ROUTER_ECMP_QOS_E, CPSS_DXCH_CFG_TABLE_TTI_TCAM_E, 
    CPSS_DXCH_CFG_TABLE_MLL_PAIR_E, CPSS_DXCH_CFG_TABLE_POLICER_METERS_E, CPSS_DXCH_CFG_TABLE_POLICER_BILLING_COUNTERS_E, 
    CPSS_DXCH_CFG_TABLE_VIDX_E, CPSS_DXCH_CFG_TABLE_ARP_E, CPSS_DXCH_CFG_TABLE_TUNNEL_START_E, CPSS_DXCH_CFG_TABLE_STG_E, 
    CPSS_DXCH_CFG_TABLE_QOS_PROFILE_E, CPSS_DXCH_CFG_TABLE_MAC_TO_ME_E, CPSS_DXCH_CFG_TABLE_CNC_E, CPSS_DXCH_CFG_TABLE_CNC_BLOCK_E, 
    CPSS_DXCH_CFG_TABLE_TRUNK_E, CPSS_DXCH_CFG_TABLE_LPM_RAM_E, CPSS_DXCH_CFG_TABLE_ROUTER_ECMP_E, CPSS_DXCH_CFG_TABLE_L2_MLL_LTT_E, 
    CPSS_DXCH_CFG_TABLE_EPORT_E, CPSS_DXCH_CFG_TABLE_DEFAULT_EPORT_E, CPSS_DXCH_CFG_TABLE_PHYSICAL_PORT_E, 
    CPSS_DXCH_CFG_TABLE_EXACT_MATCH_E, CPSS_DXCH_CFG_TABLE_SOURCE_ID_E, CPSS_DXCH_CFG_TABLE_LAST_E} CPSS_DXCH_CFG_TABLES_ENT;
typedef enum {CPSS_DXCH_LPM_RAM_MEM_MODE_FULL_MEM_SIZE_E, CPSS_DXCH_LPM_RAM_MEM_MODE_HALF_MEM_SIZE_E} CPSS_DXCH_LPM_RAM_MEM_MODE_ENT;
typedef struct {
    CPSS_DXCH_CFG_ROUTING_MODE_ENT routingMode;
    GT_U32 maxNumOfPbrEntries;
    CPSS_DXCH_LPM_RAM_MEM_MODE_ENT lpmMemoryMode;
    CPSS_DXCH_CFG_SHARED_TABLE_MODE_ENT sharedTableMode;
} CPSS_DXCH_PP_CONFIG_INIT_STC;

File ../cpss/mainPpDrv/h/cpss/dxCh/dxChxGen/config/private/prvCpssDxChErrataMng.h:
PRV_CPSS_DXCH_BRG_L2_DLB_WA_LTT_USAGE_STC;
PRV_CPSS_DXCH_ERRATA_ADDR_RANGE_STC;
PRV_CPSS_DXCH_ERRATA_STC;
PRV_CPSS_DXCH_ERRATA_UNIT_RANGES_STC;
PRV_CPSS_DXCH_PROFILE_INFO_STC;
typedef PRV_CPSS_DXCH_BRG_L2_DLB_WA_LTT_USAGE_STC PRV_CPSS_DXCH_BRG_L2_DLB_WA_LTT_USAGE_STC;
typedef PRV_CPSS_DXCH_ERRATA_ADDR_RANGE_STC PRV_CPSS_DXCH_ERRATA_ADDR_RANGE_STC;
typedef enum {PRV_CPSS_DXCH_TOKEN_BUCKET_RATE_SHAPING_DISABLE_WA_E, PRV_CPSS_DXCH_FER_FDB_AUQ_LEARNING_AND_SCANING_DEADLOCK_WA_E, 
    PRV_CPSS_DXCH2_RM_BRG_LAYER_4_SANITY_CHECKS_WA_E, PRV_CPSS_DXCH3_VLT_TABLES_WRITE_DIRECT_ACCESS_WA_E, 
    PRV_CPSS_DXCH3_RM_BM_GE_XG_PORT_GROUP_LIMIT_CFG_REG_WA_E, PRV_CPSS_DXCH3_RM_GE_PORTS_MODE1_REG_WA_E, 
    PRV_CPSS_DXCH3_RM_XG_PORTS_MODE_REG_WA_E, PRV_CPSS_DXCH3_RM_LMS0_1_GROUP1_LED_INTERFACE_WA_E, 
    PRV_CPSS_DXCH3_DIRECT_ACCESS_TO_EQ_ADDRESS_SPACE_WA_E, PRV_CPSS_DXCH3_TXQ_PARITY_CALCULATION_E, PRV_CPSS_DXCH3_SDMA_WA_E, 
    PRV_CPSS_DXCH3_CPU_READ_TCAM_ECC_INTERRUPT_WA_E, PRV_CPSS_DXCH3_TXQ_FULL_INTERRUPT_NOT_FUNCTION_WA_E, 
    PRV_CPSS_DXCH3_POLICY_AND_ROUTER_TCAM_TABLES_INDIRECT_READ_WA_E, PRV_CPSS_DXCH_RM_FDB_GLOBAL_CONF_REG_WA_E, 
    PRV_CPSS_DXCH3_LIMITED_NUMBER_OF_POLICY_BASED_ROUTES_WA_E, PRV_CPSS_DXCH3_RM_CPU_ACCESS_TO_FDB_UNDER_TRAFFIC_WA_E, 
    PRV_CPSS_DXCH_XCAT_RM_TOTAL_BUFFER_LIMIT_CONF_IN_TXQ_E, PRV_CPSS_DXCH_XCAT_RM_CNC_ENABLE_COUNTING_E, 
    PRV_CPSS_DXCH_XCAT_RM_TXQ_EXT_CNTR_REG_WA_E, PRV_CPSS_DXCH_XCAT_RM_MIRROR_INTERFACE_PARAMETER_REGISTER_I_WA_E, 
    PRV_CPSS_DXCH_XCAT_RM_POLICY_ENGINE_CONFIGURATION_REGISTER_WA_E, PRV_CPSS_DXCH_XCAT_RM_TXQ_DEQUEUE_SWRR_WEIGHT_REGISTER_3_WA_E, 
    PRV_CPSS_DXCH_XCAT_RM_INGRESS_POLICER_CONTROL0_WA_E, PRV_CPSS_DXCH_XCAT_RM_INGRESS_POLICER_CONTROL1_WA_E, 
    PRV_CPSS_DXCH_XCAT_RM_POLICER_CONTROL2_WA_E, PRV_CPSS_DXCH_XCAT_RM_EGRESS_POLICER_GLOBAL_CONFIGURATION_WA_E, 
    PRV_CPSS_DXCH_XCAT_RM_BCN_CONTROL_WA_E, PRV_CPSS_DXCH_XCAT_RM_PORTS_BCN_AWARENESS_TABLE_WA_E, 
    PRV_CPSS_DXCH_XCAT_RM_TTI_UNIT_GLOBAL_CONFIGURATION_WA_E, PRV_CPSS_DXCH_XCAT_RM_EXTENDED_DSA_BYPASS_BRIDGE_WA_E, 
    PRV_CPSS_DXCH_XCAT_RM_PORT_SERIAL_PARAMETERS_CONFIGURATION_WA_E, PRV_CPSS_DXCH_XCAT_RM_LMS0_LMS1_MISC_CONFIGURATIONS_WA_E, 
    PRV_CPSS_DXCH_XCAT_TX_CPU_CORRUPT_BUFFER_WA_E, PRV_CPSS_DXCH_XCAT_TRUNK_WRONG_SOURCE_PORT_TO_CPU_WA_E, 
    PRV_CPSS_DXCH_XCAT_IEEE_RESERVED_MC_CONFG_REG_READ_WA_E, PRV_CPSS_DXCH_XCAT_RM_TRUNK_WRONG_SOURCE_PORT_TO_CPU_WA_E, 
    PRV_CPSS_DXCH_XCAT_GIGA_PORT_PRBS_PARAM_INIT_WA_E, PRV_CPSS_DXCH_XCAT_RESTRICTED_ADDRESS_FILTERING_WA_E, 
    PRV_CPSS_DXCH_XCAT_RM_HEADER_ALTERATION_GLOBAL_CONFIGURATION_REGISTER_WA_E, PRV_CPSS_DXCH_XCAT_TOD_NANO_SEC_SET_WA_E, 
    PRV_CPSS_DXCH_XCAT_ETH_OVER_IPV4_GRE_WA_E, PRV_CPSS_DXCH_XCAT_PASSENGER_ETH_PACKET_CRC_CANT_BE_RETAINED_WA_E, 
    PRV_CPSS_DXCH_XCAT_RM_MAC_CTRL_REG3_PCS_PREAMBLE_WA_E, PRV_CPSS_DXCH_XCAT_RM_METAL_FIX_SGMII25G_DPCLK_SEL_WA_E, 
    PRV_CPSS_DXCH_XCAT_RM_BCN_CONTROL_CCFC_SRC_PORT_WA_E, PRV_CPSS_DXCH_XCAT_GE_PORT_DISABLE_WA_E, 
    PRV_CPSS_DXCH_XCAT_FC_FORWARD_NOT_FUNCTIONAL_WA_E, PRV_CPSS_DXCH_XCAT_RM_SSMII_PAD_ZNR_ZPR_WA_E, 
    PRV_CPSS_DXCH_XCAT_RM_PASSENGER_TPID_REG_WA_E, PRV_CPSS_DXCH_LION_RM_SDMA_ACTIVATION_WA_E, 
    PRV_CPSS_DXCH_LION_INDIRECT_ACCESS_TO_TCAM_IS_NOT_SUPPORTED_WA_E, PRV_CPSS_DXCH_LION_RM_SYNC_ETHERNET_NONE_SELECT_WA_E, 
    PRV_CPSS_DXCH_LION_RM_TCAM_CONFIG_WA_E, PRV_CPSS_DXCH_LION_TB_NOT_SUPPORTED_WA_E, 
    PRV_CPSS_DXCH_LION_POLICER_COUNTING_MEM_ACCESS_WA_E, PRV_CPSS_DXCH_LION_RM_MULTI_PORT_GROUP_FDB_LIMIT_WA_E, 
    PRV_CPSS_DXCH_LION_RM_ORIG_SRC_PORT_FILTERING_WA_E, PRV_CPSS_DXCH_LION_RM_MULTI_PORT_GROUP_CPU_IN_VIDX_WA_E, 
    PRV_CPSS_DXCH_LION_CN_GLOBAL_REG_WA_E, PRV_CPSS_DXCH_LION_TEMPERATURE_SENSOR_INITIALIZATION_WA_E, 
    PRV_CPSS_DXCH_LION_RM_SD_PLL_REG_WA_E, PRV_CPSS_DXCH_LION_SLOW_RATE_ON_PORT_TB_NOT_SUPPORTED_WA_E, 
    PRV_CPSS_DXCH_LION_RM_UC_STRICT_OVER_MC_WA_E, PRV_CPSS_DXCH_LION_RM_SCHEDULER_DEFICIT_MODE_WA_E, 
    PRV_CPSS_DXCH_LION_RM_TX_MC_IN_CHUNKS_WA_E, PRV_CPSS_DXCH_LION_RM_BUFF_LIMIT_EGRESS_QUEUE_WA_E, 
    PRV_CPSS_DXCH_LION_XLG_WS_SUPPORT_WA_E, PRV_CPSS_DXCH_LION_QCN_FORMAT_COMPLIANT_WA_E, 
    PRV_CPSS_DXCH_LION_INACCURATE_PFC_XOFF_WA_E, PRV_CPSS_DXCH_LION_INCOMPLETE_CPU_MAILBOX_INFO_WA_E, 
    PRV_CPSS_DXCH_LION_WRONG_COUNTING_OF_IP_COUNTERS_PER_PORT_WA_E, PRV_CPSS_DXCH_LION_RM_PFC_DSA_TAG_E, 
    PRV_CPSS_DXCH_XCAT2_RM_POLICER_MEM_CONTROL_WA_E, PRV_CPSS_DXCH_XCAT2_RM_INCORRECT_XG_SHAPER_TOKEN_BUCKET_WA_E, 
    PRV_CPSS_DXCH_XCAT2_RM_BYPASS_PACKET_REFRESH_FDB_AGE_WA_E, PRV_CPSS_DXCH_XCAT2_RM_PIPE_SELECT_WA_E, 
    PRV_CPSS_DXCH_XCAT2_RM_FLEX_LINK_PORTS_RATE_LIMIT_WA_E, PRV_CPSS_DXCH_XCAT2_PTP_UDP_FRAGMENT_WA_E, 
    PRV_CPSS_DXCH_XCAT2_100FX_WA_E, PRV_CPSS_DXCH_LION2_FAST_FAILOVER_WA_E, PRV_CPSS_DXCH_LION2_RM_TTI_DUAL_DEV_ENABLE_WA_E, 
    PRV_CPSS_DXCH_LION2_HGL_MAC_INT_WA_E, PRV_CPSS_DXCH_XCAT2_PTP_FRAGMENT_PACKET_TRAP_WA_E, 
    PRV_CPSS_DXCH_LION_RM_ENABLE_PFC_TRIGGER_WA_E, PRV_CPSS_DXCH_LION2_RM_WRONG_DEFAULT_CPFC_THRESHOLDS_WA_E, 
    PRV_CPSS_DXCH_LION2_RM_WRONG_DEFAULT_PFC_THRESHOLDS_WA_E, PRV_CPSS_DXCH_LION2_RM_LLFC_TRIGGER_GLOBAL_CONFIGURATION_WA_E, 
    PRV_CPSS_DXCH_LION2_RM_ENABLE_PFC_TRIGGER_WA_E, PRV_CPSS_DXCH_LION2_RM_GLOBAL_XOFF_ACTIVATION_ON_PORT_WA_E, 
    PRV_CPSS_DXCH_LION2_LOCAL_SRC_PORT_DEV_MAP_ENABLE_WA_E, PRV_CPSS_DXCH_LION2_SHARE_EN_CHANGE_WA_E, 
    PRV_CPSS_DXCH_LION2_IPM_BRIDGE_COPY_GET_DROPPED_WA_E, PRV_CPSS_DXCH_LION2_MC_BANDWIDTH_RESTRICTION_WA_E, 
    PRV_CPSS_DXCH_LION2_SCHEDULER_PROFILE_UNDER_TRAFFIC_WA_E, PRV_CPSS_DXCH_LION2_DISMATCH_PORTS_LINK_WA_E, 
    PRV_CPSS_DXCH_LION2_GIGE_MAC_LINK_STATUS_WA_E, PRV_CPSS_DXCH_LION2_CUT_THROUGH_SLOW_TO_FAST_WA_E, 
    PRV_CPSS_DXCH_LION2_WRONG_DEFAULT_MLL_DATA_INTEGRITY_PARITY_INTERRUPT_WA_E, 
    PRV_CPSS_DXCH_LION2_WRONG_DEFAULT_BMA_MC_DATA_INTEGRITY_PARITY_INTERRUPT_WA_E, 
    PRV_CPSS_DXCH_LION2_RM_WRONG_GIG_DESC_FIFO_THRESHOLD_WA_E, PRV_CPSS_DXCH_LION2_PORT_MAC_MIB_COUNTERS_CORRUPTION_WA_E, 
    PRV_CPSS_DXCH_BOBCAT2_NON_ORIG_VID_ON_TRAP_TO_CPU_WA_E, PRV_CPSS_DXCH_BOBCAT2_RM_WRONG_TXDMA_FIFO_THRESHOLD_WA_E, 
    PRV_CPSS_DXCH_BOBCAT2_RM_RATE_LIMIT_DEFICIT_COUNT_EN_WA_E, PRV_CPSS_DXCH_BOBCAT2_RM_STRICT_PRIORITY_FOR_UC_PACKETS_WA_E, 
    PRV_CPSS_DXCH_BOBCAT2_RM_TTI_BAD_DEFAULT_VALUE_FIX_WA_E, PRV_CPSS_DXCH_BOBCAT2_RM_GLOBAL_EPORT_RANGE_VALUE_AND_MASK_WA_E, 
    PRV_CPSS_DXCH_BOBCAT2_RM_BRIDGE_COMMANDS_DEFAULTS_WA_E, PRV_CPSS_DXCH_BOBCAT2_RM_CONTROL_FROM_CPU_EGRESS_FILTER_WA_E, 
    PRV_CPSS_DXCH_BOBCAT2_MPLS_TRANSIT_TUNNEL_PARSING_WA_E, PRV_CPSS_DXCH_BOBCAT2_EGRESS_MIB_COUNTERS_NOT_ROC_WA_E, 
    PRV_CPSS_DXCH_BOBCAT2_RM_TXQ_PORT_REQUEST_MASK_WA_E, PRV_CPSS_DXCH_BOBCAT2_NOT_ALLOW_TTI_ACTION_TO_SET_MODIFY_UP_DSCP_WA_E, 
    PRV_CPSS_DXCH_BOBCAT2_ILKN_PACKET_SIZE_LIMITATION_NOT_ENFORCED_WA_E, PRV_CPSS_DXCH_BOBCAT2_ENH_TAILDROP_MODE_WRED_CONFLICT_WA_E, 
    PRV_CPSS_DXCH_BOBCAT2_PFC_NOT_SUPPORTED_PORTS_48_71_WA_E, PRV_CPSS_DXCH_BOBCAT2_FC_802_3X_NOT_SUPPORTED_TM_MAPPED_PORTS_WA_E, 
    PRV_CPSS_DXCH_BOBCAT2_RM_PROT_SWITCH_STAGE_EN_DEFAULT_VALUE_WA_E, 
    PRV_CPSS_DXCH_BOBCAT2_FC_SENT_COUNTERS_PROBLEM_WHEN_FCU_BYPASS_DISABLE_WA_E, 
    PRV_CPSS_DXCH_BOBCAT2_DESCRIPTOR_ECC_PROTECTION_CORRUPTION_WITH_REMOTE_PORTS_WA_E, 
    PRV_CPSS_DXCH_BOBCAT2_FDB_ROUTE_UC_DELETE_BY_MESSAGE_WA_E, PRV_CPSS_DXCH_BOBCAT2_TCAM_WRITE_PARITY_ERROR_WA_E, 
    PRV_CPSS_DXCH_BOBCAT2_EQ_TO_CPU_RATE_LIMIT_WINDOW_RESOLUTION_WA_E, PRV_CPSS_DXCH_BOBCAT2_EPLR_TO_CPU_OAM_WA_E, 
    PRV_CPSS_DXCH_BOBCAT2_RM_WRONG_AVS_INIT_WA_E, PRV_CPSS_DXCH_BOBCAT2_RXDMA_PIP_IPV6_WRONG_TC_BITS_WA_E, 
    PRV_CPSS_DXCH_BOBCAT2_LED_LINK_GIG_INDICATION_WA_E, PRV_CPSS_DXCH_BOBCAT2_GPP_INTERRUPT_WA_E, 
    PRV_CPSS_DXCH_BOBCAT2_SGMII_TO_CPU_NOT_SUPPORTED_WA_E, PRV_CPSS_DXCH_BOBCAT2_RM_WRONG_DEFAULT_DEVICE_CONTROL_14_WA_E, 
    PRV_CPSS_DXCH_BOBCAT2_RM_DFX_REGISTERS_MISSCONFIGURATION_WA_E, PRV_CPSS_DXCH_BOBCAT2_PACKET_GENERATOR_SPECIFIC_PORTS_WA_E, 
    PRV_CPSS_DXCH_BOBCAT2_RM_WRONG_DEFAULT_PORT_MAC_CONTROL_REG4_WA_E, 
    PRV_CPSS_DXCH_BOBCAT2_RM_WRONG_DEFAULT_CNM_HEADER_CONFIGURATION_WA_E, 
    PRV_CPSS_DXCH_BOBCAT2_RM_PTP_UDP_CHECKSUM_TRAILER_BIT_WA_E, 
    PRV_CPSS_DXCH_BOBCAT2_RM_INGRESS_FORWARDING_RESTRICTIONS_DROP_CODE_WA_E, 
    PRV_CPSS_DXCH_BOBCAT2_RM_TRUNK_LTT_ENTRY_WRONG_DEFAULT_VALUES_WA_E, PRV_CPSS_DXCH_BOBCAT2_RM_SHAPER_PARITY_ERROR_INTERRUPT_WA_E, 
    PRV_CPSS_DXCH_BOBCAT2_RM_FDB_SCHEDULER_SWRR_CONTROL_WA_E, PRV_CPSS_DXCH_BOBCAT2_TAI_MINIMAL_TOD_DRIFT_CONSTRAIN_WA_E, 
    PRV_CPSS_DXCH_XCAT3_UC_LOCAL_SWITCH_FILTER_FOR_VIRTUAL_PORTS_WA_E, 
    PRV_CPSS_DXCH_XCAT3_TRUNK_ID_ASSIGN_INSTEAD_OF_VIRTUAL_PORT_WA_E, PRV_CPSS_DXCH_XCAT3_OAM_LB_PORT_NOT_GETTING_HIGHEST_QOS_WA_E, 
    PRV_CPSS_DXCH_XCAT3_GIG_MAC_HALF_DUPLEX_COLLISION_DOMAIN_RM_E, PRV_CPSS_DXCH_XCAT3_XLG_PORT_DROP_EVENT_PROBLEM_RM_E, 
    PRV_CPSS_DXCH_XCAT3_RM_RX_SDMA_WRONG_QUEUE_WA_E, PRV_CPSS_DXCH_MISCONFIG_100BASEX_AN_DISABLE_WA_E, 
    PRV_CPSS_DXCH_CAELUM_EGRESS_MEMORIES_NOT_RESET_WA_E, PRV_CPSS_DXCH_CAELUM_TOD_DECREMENT_OPERATION_E, 
    PRV_CPSS_DXCH_CAELUM_INGRESS_VLAN_RANGE_CONFIG_WA_E, PRV_CPSS_DXCH_CAELUM_RM_PLR_METERING_INACCURACY_IN_START_TRAFFIC_WA_E, 
    PRV_CPSS_DXCH_CAELUM_RM_PLR_UNUSED_IPLR_STAGES_MUST_BE_BYPASSED_WA_E, PRV_CPSS_DXCH_IMPLEMENT_WA_2_5G_SGMII_LINK_UP_E, 
    PRV_CPSS_DXCH_CAELUM_10G_XLG_LINK_UP_E, PRV_CPSS_DXCH_ALDRIN_WRONG_DEFAULT_CLEARED_UC_DIST_WA_E, 
    PRV_CPSS_DXCH_ALDRIN_WRONG_DEFAULT_BM_GLOBAL_GFG_3_WA_E, PRV_CPSS_DXCH_ALDRIN_TCAM_CONTENTS_NOT_INITALIZED_WA_E, 
    PRV_CPSS_DXCH_BOBCAT3_RM_TCAM_SEGMENT_MODE_OBSOLETE_WA_E, PRV_CPSS_DXCH_BOBCAT3_RM_EQ_ARBITERS_WA_E, 
    PRV_CPSS_DXCH_BOBCAT3_RM_PERFORMANCE_DEGRADATION_IN_EGF_QAG_WA_E, PRV_CPSS_DXCH_BOBCAT3_RM_TXQ_IP_BMX_FILL_LEVEL_DEBUG_WA_E, 
    PRV_CPSS_DXCH_BOBCAT3_RM_CUT_THROUGH_NUMBERS_OF_BUFFERS_WA_E, PRV_CPSS_DXCH_BOBCAT3_CG_REGFILE_UNRESET_WA_E, 
    PRV_CPSS_DXCH_BOBCAT3_DESC_SHARED_POOL_TAILDROP_THRESHOLDS_WA_E, PRV_CPSS_DXCH_BOBCAT3_RM_CUT_THROUGH_PACKET_CORRUPTION_WA_E, 
    PRV_CPSS_DXCH_BOBCAT3_RM_ROUTER_FIFOS_THRESHOLD_1_WA_E, PRV_CPSS_DXCH_BOBCAT3_PORT_LED_POSITION_JUST_ON_USED_MAC_WA_E, 
    PRV_CPSS_DXCH_BOBCAT3_LINK_DOWN_100G_PORT_BLOCKS_THE_TRANSMIT_PATH_WA_E, 
    PRV_CPSS_DXCH_BOBCAT3_PLR_INDIRECT_READ_COUNTERS_ON_DISABLED_MODE_WA_E, PRV_CPSS_DXCH_BOBCAT3_RM_TXQ_TX_SHAPER_BASELINE_WA_E, 
    PRV_CPSS_DXCH_BOBCAT3_100G_SYNC_ETHERNET_WA_E, PRV_CPSS_DXCH_BOBCAT2_FORCE_DOWN_LINK_PARTNER_WA_E, 
    PRV_CPSS_DXCH_GIGE_MAC_TX_FIFO_WA_E, PRV_CPSS_DXCH_BOBCAT2_TXQ_TAIL_DROP_TABLES_R_W_PENDS_BUS_WA_E, 
    PRV_CPSS_DXCH_CAELUM_TAI_FREQUENCY_ADJUST_TIME_WINDOW_INIT_VAL_WA_E, PRV_CPSS_DXCH_ALDRIN2_EPCL_TCAM_LOOKUP_LATENCY_WA_E, 
    PRV_CPSS_DXCH_ALDRIN2_BRIDGE_RATE_LIMIT_UC_WA_E, PRV_CPSS_DXCH_BOBCAT2_PBR_PACKETS_TREATED_AS_UNKNOWN_DA_WA_E, 
    PRV_CPSS_DXCH_ALDRIN2_TCAM_ANSWERS_FLOOR_SAMPLES_INIT_VALUE_WA_E, PRV_CPSS_DXCH_ALDRIN2_QUEUE_VALUE_DISABLE_WA_E, 
    PRV_CPSS_DXCH_BOBCAT3_RM_PFC_IND_FIFO_CROSS_MODE_THRESHOLD_WA_E, PRV_CPSS_DXCH_FALCON_L2I_AND_EQ_READ_TABLE_BEFORE_TRAFFIC_WA_E, 
    PRV_CPSS_DXCH_FALCON_WRONG_DEFAULT_CONFIG_FOR_TAI_CTRL_1_E, 
    PRV_CPSS_DXCH_FALCON_SBM_XOR_CLIENTS_READ_WRITE_BEFORE_SW_RESET_WA_E, PRV_CPSS_DXCH_FALCON_TXQ_SKIP_TABLES_BACKUP_WA_E, 
    PRV_CPSS_DXCH_FALCON_WRONG_DEFAULT_CONFIG_SIP_LOOKUP_E, PRV_CPSS_DXCH_FALCON_WRONG_DEFAULT_IPV6_TT_HBH_EXT_EXCEPTION_CMD_E, 
    PRV_CPSS_DXCH_FALCON_WRONG_DEFAULT_IPV6_TT_NON_HBH_EXT_EXCEPTION_CMD_E, PRV_CPSS_DXCH_FALCON_WRONG_DEFAULT_CT_BC_LEN_CHECK_E, 
    PRV_CPSS_DXCH_FALCON_WRONG_DEFAULT_CT_HEADER_INTEGRITY_EXCEPTION_CMD_E, PRV_CPSS_DXCH_FALCON_MRU_PER_DEFAULT_EPORT_WA_E, 
    PRV_CPSS_DXCH_FALCON_MRU_BRIDGE_EVLAN_WA_E, PRV_CPSS_DXCH_XCAT3_TCP_SYN_WITH_DATA_E, PRV_CPSS_DXCH_AC5P_MPLS_CUT_THROW_ENABLE_E, 
    PRV_CPSS_DXCH_BOBCAT2_TCAM_ARRAY_SPEED_MATCH_CFG_INIT_E, 
    PRV_CPSS_DXCH_AC5P_RM_MASTER_TAI_DEFAULT_MANCHESTER_HALF_BIT_SYMBOL_LENGTH_E, 
    PRV_CPSS_DXCH_AC5P_RM_RELOCATE_EQ_DROP_TO_EREP_WA_E, PRV_CPSS_DXCH_FALCON_TAIL_DROP_ON_VIRTUAL_BUFFERS_E, 
    PRV_CPSS_DXCH_BOBCAT2_RM_DEFAULT_DOMAIN_ID_PER_DOMAIN_INDEX_E, PRV_CPSS_DXCH_FALCON_RM_HASH_MODE_WA_E, 
    PRV_CPSS_DXCH_AC5P_TIMESTAMP_TO_THE_FUTURE_WA_E, PRV_CPSS_DXCH_AC5P_TOD_UPDATE_SECONDS_WA_E, 
    PRV_CPSS_DXCH_ERRATA_ALDRIN_SDWRR_WA_E, PRV_CPSS_DXCH_ERRATA_MAX_NUM_E} PRV_CPSS_DXCH_ERRATA_ENT;
typedef PRV_CPSS_DXCH_ERRATA_STC PRV_CPSS_DXCH_ERRATA_STC;
typedef PRV_CPSS_DXCH_ERRATA_UNIT_RANGES_STC PRV_CPSS_DXCH_ERRATA_UNIT_RANGES_STC;
typedef PRV_CPSS_DXCH_PROFILE_INFO_STC PRV_CPSS_DXCH_PROFILE_INFO_STC;

File ../cpss/mainPpDrv/h/cpss/dxCh/dxChxGen/config/private/prvCpssDxChInfo.h:
PRV_CPSS_DXCH_BRIDGE_INFO_STC;
PRV_CPSS_DXCH_CFG_REMOTE_MAC_INFO_STC;
PRV_CPSS_DXCH_DEV_OBJ_STC;
PRV_CPSS_DXCH_DIAG_STC;
PRV_CPSS_DXCH_EXT_MEMORY_STC;
PRV_CPSS_DXCH_FLOW_MANAGER_INFO_STC;
PRV_CPSS_DXCH_GLOBAL_EPORT_CONFG_TYPE_STC;
PRV_CPSS_DXCH_GROUP_RESOURCE_STATUS_STC;
PRV_CPSS_DXCH_HW_TABLES_SHADOW_STC;
PRV_CPSS_DXCH_MACSEC_INFO_STC;
PRV_CPSS_DXCH_PA_CLIENT_BW_LIST_STC;
PRV_CPSS_DXCH_PA_DATA_STC;
PRV_CPSS_DXCH_PA_SINGLE_CLIENT_BW_STC;
PRV_CPSS_DXCH_PHA_INFO_STC;
PRV_CPSS_DXCH_POLICER_INFO_STC;
PRV_CPSS_DXCH_PORT_INFO_STC;
PRV_CPSS_DXCH_PORT_MTI_MAC_INFO_STC;
PRV_CPSS_DXCH_PORT_PA_PORT_DB_STC;
PRV_CPSS_DXCH_PORT_PA_SINGLE_PORT_DB_STC;
PRV_CPSS_DXCH_PORT_REMOTE_PHY_MAC_INFO_STC;
PRV_CPSS_DXCH_PORT_XLG_MIB_SHADOW_STC;
PRV_CPSS_DXCH_PP_CONFIG_STC;
PRV_CPSS_DXCH_PP_PORT_GROUPS_INFO_STC;
PRV_CPSS_DXCH_SPECIAL_TXQ_CLIENT_GROUP_DB_STC;
PRV_CPSS_DXCH_SPECIAL_TXQ_CLIENT_GROUP_ID_PLACE_STC;
PRV_CPSS_DXCH_SPECIAL_TXQ_CLIENT_GROUP_STC;
PRV_CPSS_DXCH_SPECIAL_TXQ_CLIENT_STC;
PRV_CPSS_DXCH_WA_FALCON_PORT_CREATE_STC;
PRV_CPSS_DXCH_WA_FALCON_PORT_DELETE_STC;
PRV_DXCH_PORT_SERDES_POLARITY_CONFIG_STC;
typedef PRV_CPSS_DXCH_BRIDGE_INFO_STC PRV_CPSS_DXCH_BRIDGE_INFO_STC;
typedef PRV_CPSS_DXCH_CFG_REMOTE_MAC_INFO_STC PRV_CPSS_DXCH_CFG_REMOTE_MAC_INFO_STC;
typedef PRV_CPSS_DXCH_DEV_OBJ_STC PRV_CPSS_DXCH_DEV_OBJ_STC;
typedef PRV_CPSS_DXCH_DIAG_STC PRV_CPSS_DXCH_DIAG_STC;
typedef PRV_CPSS_DXCH_EXT_MEMORY_STC PRV_CPSS_DXCH_EXT_MEMORY_STC;
typedef PRV_CPSS_DXCH_FLOW_MANAGER_INFO_STC PRV_CPSS_DXCH_FLOW_MANAGER_INFO_STC;
typedef PRV_CPSS_DXCH_GLOBAL_EPORT_CONFG_TYPE_STC PRV_CPSS_DXCH_GLOBAL_EPORT_CONFG_TYPE_STC;
typedef PRV_CPSS_DXCH_GROUP_RESOURCE_STATUS_STC PRV_CPSS_DXCH_GROUP_RESOURCE_STATUS_STC;
typedef PRV_CPSS_DXCH_HW_TABLES_SHADOW_STC PRV_CPSS_DXCH_HW_TABLES_SHADOW_STC;
typedef PRV_CPSS_DXCH_MACSEC_INFO_STC PRV_CPSS_DXCH_MACSEC_INFO_STC;
typedef enum {PRV_CPSS_DXCH_MULTI_PORT_GROUP_FDB_MODE_NON_MULTI_PORT_GROUP_DEVICE_E, 
    PRV_CPSS_DXCH_MULTI_PORT_GROUP_FDB_MODE_UNIFIED_E, PRV_CPSS_DXCH_MULTI_PORT_GROUP_FDB_MODE_UNIFIED_LINKED_E, 
    PRV_CPSS_DXCH_MULTI_PORT_GROUP_FDB_MODE_LINKED_E} PRV_CPSS_DXCH_MULTI_PORT_GROUP_FDB_MODE_ENT;
typedef PRV_CPSS_DXCH_PA_CLIENT_BW_LIST_STC PRV_CPSS_DXCH_PA_CLIENT_BW_LIST_STC;
typedef PRV_CPSS_DXCH_PA_DATA_STC PRV_CPSS_DXCH_PA_DATA_STC;
typedef PRV_CPSS_DXCH_PA_SINGLE_CLIENT_BW_STC PRV_CPSS_DXCH_PA_SINGLE_CLIENT_BW_STC;
typedef PRV_CPSS_DXCH_PHA_INFO_STC PRV_CPSS_DXCH_PHA_INFO_STC;
typedef PRV_CPSS_DXCH_POLICER_INFO_STC PRV_CPSS_DXCH_POLICER_INFO_STC;
typedef PRV_CPSS_DXCH_PORT_INFO_STC PRV_CPSS_DXCH_PORT_INFO_STC;
typedef PRV_CPSS_DXCH_PORT_MTI_MAC_INFO_STC PRV_CPSS_DXCH_PORT_MTI_MAC_INFO_STC;
typedef enum {PRV_CPSS_DXCH_PORT_MTI_MAC_RX_STATE_AS_TX_STATE_E, PRV_CPSS_DXCH_PORT_MTI_MAC_RX_STATE_FORCE_DISABLED_E, 
    PRV_CPSS_DXCH_PORT_MTI_MAC_RX_STATE_FORCE_ENABLED_E} PRV_CPSS_DXCH_PORT_MTI_MAC_RX_STATE_ENT;
typedef enum {PRV_CPSS_DXCH_PORT_MTI_MAC_TX_STATE_FORCE_DISABLED_E, 
    PRV_CPSS_DXCH_PORT_MTI_MAC_TX_STATE_FORCE_ENABLED_E} PRV_CPSS_DXCH_PORT_MTI_MAC_TX_STATE_ENT;
typedef PRV_CPSS_DXCH_PORT_PA_PORT_DB_STC PRV_CPSS_DXCH_PORT_PA_PORT_DB_STC;
typedef PRV_CPSS_DXCH_PORT_PA_SINGLE_PORT_DB_STC PRV_CPSS_DXCH_PORT_PA_SINGLE_PORT_DB_STC;
typedef PRV_CPSS_DXCH_PORT_REMOTE_PHY_MAC_INFO_STC PRV_CPSS_DXCH_PORT_REMOTE_PHY_MAC_INFO_STC;
typedef PRV_CPSS_DXCH_PORT_XLG_MIB_SHADOW_STC PRV_CPSS_DXCH_PORT_XLG_MIB_SHADOW_STC;
typedef PRV_CPSS_DXCH_PP_CONFIG_STC PRV_CPSS_DXCH_PP_CONFIG_STC;
typedef PRV_CPSS_DXCH_PP_PORT_GROUPS_INFO_STC PRV_CPSS_DXCH_PP_PORT_GROUPS_INFO_STC;
typedef PRV_CPSS_DXCH_SPECIAL_TXQ_CLIENT_GROUP_DB_STC PRV_CPSS_DXCH_SPECIAL_TXQ_CLIENT_GROUP_DB_STC;
typedef PRV_CPSS_DXCH_SPECIAL_TXQ_CLIENT_GROUP_ID_PLACE_STC PRV_CPSS_DXCH_SPECIAL_TXQ_CLIENT_GROUP_ID_PLACE_STC;
typedef PRV_CPSS_DXCH_SPECIAL_TXQ_CLIENT_GROUP_STC PRV_CPSS_DXCH_SPECIAL_TXQ_CLIENT_GROUP_STC;
typedef PRV_CPSS_DXCH_SPECIAL_TXQ_CLIENT_STC PRV_CPSS_DXCH_SPECIAL_TXQ_CLIENT_STC;
typedef enum {PRV_CPSS_DXCH_SPECIAL_TXQ_CLIENT_UNDEFINED_E, PRV_CPSS_DXCH_SPECIAL_TXQ_CLIENT_CCFC_E, 
    PRV_CPSS_DXCH_SPECIAL_TXQ_CLIENT_REMOTE_PORT_E} PRV_CPSS_DXCH_SPECIAL_TXQ_CLIENT_TYPE_ENT;
typedef PRV_CPSS_DXCH_WA_FALCON_PORT_CREATE_STC PRV_CPSS_DXCH_WA_FALCON_PORT_CREATE_STC;
typedef PRV_CPSS_DXCH_WA_FALCON_PORT_DELETE_STC PRV_CPSS_DXCH_WA_FALCON_PORT_DELETE_STC;
typedef PRV_DXCH_PORT_SERDES_POLARITY_CONFIG_STC PRV_DXCH_PORT_SERDES_POLARITY_CONFIG_STC;

File ../cpss/mainPpDrv/h/cpss/dxCh/dxChxGen/config/private/prvCpssDxChInfoEnhanced.h:
FINE_TUNING_STC;
PRV_CPSS_DXCH_PP_CONFIG_FINE_TUNING_STC;
PRV_CPSS_DXCH_PP_HW_INFO_CPU_PORT_INFO_STC;
PRV_CPSS_DXCH_PP_HW_INFO_CPU_PORT_NETIF_INFO_STC;
PRV_CPSS_DXCH_PP_HW_INFO_DATA_PATH_INFO_STC;
PRV_CPSS_DXCH_PP_HW_INFO_STC;
typedef FINE_TUNING_STC FINE_TUNING_STC;
typedef void GT_VOID_UNIT_IDS_STC;
typedef PRV_CPSS_DXCH_PP_CONFIG_FINE_TUNING_STC PRV_CPSS_DXCH_PP_CONFIG_FINE_TUNING_STC;
typedef PRV_CPSS_DXCH_PP_HW_INFO_CPU_PORT_INFO_STC PRV_CPSS_DXCH_PP_HW_INFO_CPU_PORT_INFO_STC;
typedef PRV_CPSS_DXCH_PP_HW_INFO_CPU_PORT_NETIF_INFO_STC PRV_CPSS_DXCH_PP_HW_INFO_CPU_PORT_NETIF_INFO_STC;
typedef PRV_CPSS_DXCH_PP_HW_INFO_DATA_PATH_INFO_STC PRV_CPSS_DXCH_PP_HW_INFO_DATA_PATH_INFO_STC;
typedef PRV_CPSS_DXCH_PP_HW_INFO_STC PRV_CPSS_DXCH_PP_HW_INFO_STC;

File ../cpss/mainPpDrv/h/cpss/dxCh/dxChxGen/config/private/prvCpssDxChModuleConfig.h:
PRV_CPSS_DXCH_MODULE_CONFIG_STC;
typedef PRV_CPSS_DXCH_MODULE_CONFIG_STC PRV_CPSS_DXCH_MODULE_CONFIG_STC;

File ../cpss/mainPpDrv/h/cpss/dxCh/dxChxGen/config/private/prvCpssDxChMultiPortGroupsDebug.h:
PRV_CPSS_DXCH_PP_PORT_GROUPS_DEBUG_INFO_STC;
PRV_CPSS_DXCH_PP_PORT_GROUPS_DEBUG_PORT_GROUP_PORT_INFO_STC;
PRV_CPSS_DXCH_PP_PORT_GROUPS_DEBUG_UPLINK_INFO_STC;
typedef PRV_CPSS_DXCH_PP_PORT_GROUPS_DEBUG_INFO_STC PRV_CPSS_DXCH_PP_PORT_GROUPS_DEBUG_INFO_STC;
typedef PRV_CPSS_DXCH_PP_PORT_GROUPS_DEBUG_PORT_GROUP_PORT_INFO_STC PRV_CPSS_DXCH_PP_PORT_GROUPS_DEBUG_PORT_GROUP_PORT_INFO_STC;
typedef PRV_CPSS_DXCH_PP_PORT_GROUPS_DEBUG_UPLINK_INFO_STC PRV_CPSS_DXCH_PP_PORT_GROUPS_DEBUG_UPLINK_INFO_STC;

File ../cpss/mainPpDrv/h/cpss/dxCh/dxChxGen/config/private/prvCpssDxChRegs.h:
PRV_CPSS_DXCH_PORT_FCA_REGS_ADDR_STC;
PRV_CPSS_DXCH_PORT_MAC_REGS_ADDR_STC;
PRV_CPSS_DXCH_PP_REGS_ADDR_STC;
PRV_CPSS_DXCH_PP_REGS_ADDR_STC::PRV_CPSS_DXCH_MAC_PACKET_GEN_CONFIG_STC;
PRV_CPSS_DXCH_PP_REGS_ADDR_STC::_PLR;
PRV_CPSS_DXCH_PP_REGS_ADDR_STC::_addrSpace;
PRV_CPSS_DXCH_PP_REGS_ADDR_STC::_bcnRegs;
PRV_CPSS_DXCH_PP_REGS_ADDR_STC::_bridge;
PRV_CPSS_DXCH_PP_REGS_ADDR_STC::_bridge::_brgCntrSet;
PRV_CPSS_DXCH_PP_REGS_ADDR_STC::_bridge::_bridgeInternal;
PRV_CPSS_DXCH_PP_REGS_ADDR_STC::_bridge::_fdbInternal;
PRV_CPSS_DXCH_PP_REGS_ADDR_STC::_bridge::_ingressLog;
PRV_CPSS_DXCH_PP_REGS_ADDR_STC::_bridge::_nstRegs;
PRV_CPSS_DXCH_PP_REGS_ADDR_STC::_bridge::_qosProfileRegs;
PRV_CPSS_DXCH_PP_REGS_ADDR_STC::_bridge::_srcIdReg;
PRV_CPSS_DXCH_PP_REGS_ADDR_STC::_bridge::_vlanRegs;
PRV_CPSS_DXCH_PP_REGS_ADDR_STC::_bridge::_vntReg;
PRV_CPSS_DXCH_PP_REGS_ADDR_STC::_bufferMng;
PRV_CPSS_DXCH_PP_REGS_ADDR_STC::_bufferMng::_eqBlkCfgRegs;
PRV_CPSS_DXCH_PP_REGS_ADDR_STC::_bufferMng::_trunkTblCfgRegs;
PRV_CPSS_DXCH_PP_REGS_ADDR_STC::_cncRegs;
PRV_CPSS_DXCH_PP_REGS_ADDR_STC::_cutThroughRegs;
PRV_CPSS_DXCH_PP_REGS_ADDR_STC::_debugBus;
PRV_CPSS_DXCH_PP_REGS_ADDR_STC::_egrTxQConf;
PRV_CPSS_DXCH_PP_REGS_ADDR_STC::_egrTxQConf::_br_802_1_config;
PRV_CPSS_DXCH_PP_REGS_ADDR_STC::_egrTxQConf::_setsConfigRegs;
PRV_CPSS_DXCH_PP_REGS_ADDR_STC::_egrTxQConf::_txQCountSet;
PRV_CPSS_DXCH_PP_REGS_ADDR_STC::_global;
PRV_CPSS_DXCH_PP_REGS_ADDR_STC::_haRegs;
PRV_CPSS_DXCH_PP_REGS_ADDR_STC::_interrupts;
PRV_CPSS_DXCH_PP_REGS_ADDR_STC::_ipMtRegs;
PRV_CPSS_DXCH_PP_REGS_ADDR_STC::_ipRegs;
PRV_CPSS_DXCH_PP_REGS_ADDR_STC::_ipRegs::_ipHitLog;
PRV_CPSS_DXCH_PP_REGS_ADDR_STC::_ipRegs::_ipTccRegs;
PRV_CPSS_DXCH_PP_REGS_ADDR_STC::_ipRegs::_routerTcamTest;
PRV_CPSS_DXCH_PP_REGS_ADDR_STC::_ipv4Regs;
PRV_CPSS_DXCH_PP_REGS_ADDR_STC::_ipv6Regs;
PRV_CPSS_DXCH_PP_REGS_ADDR_STC::_l2Mll;
PRV_CPSS_DXCH_PP_REGS_ADDR_STC::_ledRegs;
PRV_CPSS_DXCH_PP_REGS_ADDR_STC::_macRegs;
PRV_CPSS_DXCH_PP_REGS_ADDR_STC::_miscellaneousRegs;
PRV_CPSS_DXCH_PP_REGS_ADDR_STC::_mppm;
PRV_CPSS_DXCH_PP_REGS_ADDR_STC::_mppm::_ecc;
PRV_CPSS_DXCH_PP_REGS_ADDR_STC::_pcl;
PRV_CPSS_DXCH_PP_REGS_ADDR_STC::_pcl::_macToMe;
PRV_CPSS_DXCH_PP_REGS_ADDR_STC::_pcl::_pclTccRegs;
PRV_CPSS_DXCH_PP_REGS_ADDR_STC::_pcl::_policyTcamTest;
PRV_CPSS_DXCH_PP_REGS_ADDR_STC::_sFlowRegs;
PRV_CPSS_DXCH_PP_REGS_ADDR_STC::_sdmaRegs;
PRV_CPSS_DXCH_PP_REGS_ADDR_STC::_smiRegs;
PRV_CPSS_DXCH_PP_REGS_ADDR_STC::_ttiRegs;
PRV_CPSS_DXCH_PP_REGS_ADDR_STC::_twsiReg;
PRV_CPSS_DXCH_PP_REGS_ADDR_STC::_xlgRegs;
PRV_CPSS_DXCH_PP_REGS_ADDR_STC::_xlgRegs::_pcs40GRegs;
__txPortRegs;
_lpSerdesConfig;
dxch_bufLimitsProfile;
dxch_bufMngPerPort;
dxch_perPortRegs;
struct PRV_CPSS_DXCH_MAC_PACKET_GEN_CONFIG_STC;
typedef PRV_CPSS_DXCH_PORT_FCA_REGS_ADDR_STC PRV_CPSS_DXCH_PORT_FCA_REGS_ADDR_STC;
typedef PRV_CPSS_DXCH_PORT_MAC_REGS_ADDR_STC PRV_CPSS_DXCH_PORT_MAC_REGS_ADDR_STC;
typedef PRV_CPSS_DXCH_PP_REGS_ADDR_STC PRV_CPSS_DXCH_PP_REGS_ADDR_STC;
struct _PLR;
struct __txPortRegs;
struct _addrSpace;
struct _bcnRegs;
struct _br_802_1_config;
struct _brgCntrSet;
struct _bridge;
struct _bridgeInternal;
struct _bufferMng;
struct _cncRegs;
struct _cutThroughRegs;
struct _debugBus;
struct _ecc;
struct _egrTxQConf;
struct _eqBlkCfgRegs;
struct _fdbInternal;
struct _global;
struct _haRegs;
struct _ingressLog;
struct _interrupts;
struct _ipHitLog;
struct _ipMtRegs;
struct _ipRegs;
struct _ipTccRegs;
struct _ipv4Regs;
struct _ipv6Regs;
struct _l2Mll;
struct _ledRegs;
struct _lpSerdesConfig;
struct _macRegs;
struct _macToMe;
struct _miscellaneousRegs;
struct _mppm;
struct _nstRegs;
struct _pcl;
struct _pclTccRegs;
struct _pcs40GRegs;
struct _policyTcamTest;
struct _qosProfileRegs;
struct _routerTcamTest;
struct _sFlowRegs;
struct _sdmaRegs;
struct _setsConfigRegs;
struct _smiRegs;
struct _srcIdReg;
struct _trunkTblCfgRegs;
struct _ttiRegs;
struct _twsiReg;
struct _txQCountSet;
struct _vlanRegs;
struct _vntReg;
struct _xlgRegs;
struct dxch_bufLimitsProfile;
struct dxch_bufMngPerPort;
struct dxch_perPortRegs;
typedef __txPortRegs dxch_txPortRegs;

File ../cpss/mainPpDrv/h/cpss/dxCh/dxChxGen/config/private/prvCpssDxChRegsVer1.h:
ETS_temp_STCT;
LED_ST;
LMS_ST;
PRV_CPSS_DXCH_PP_DP_GLUE_PIZZA_ARBITER_STCT;
PRV_CPSS_DXCH_PP_DP_PIZZA_ARBITER_STCT;
PRV_CPSS_DXCH_PP_DP_TX_PIZZA_ARBITER_STCT;
PRV_CPSS_DXCH_PP_MPPM_PIZZA_ARBITER_STCT;
PRV_CPSS_DXCH_PP_REGS_ADDR_VER1_STC;
PRV_CPSS_DXCH_PP_REGS_ADDR_VER1_STC::PRV_CPSS_DXCH_BMA_STCT;
PRV_CPSS_DXCH_PP_REGS_ADDR_VER1_STC::PRV_CPSS_DXCH_EREP_STCT;
PRV_CPSS_DXCH_PP_REGS_ADDR_VER1_STC::PRV_CPSS_DXCH_MAC_PACKET_GEN_VER1_CONFIG_STC;
PRV_CPSS_DXCH_PP_REGS_ADDR_VER1_STC::PRV_CPSS_DXCH_MPPM_STCT;
PRV_CPSS_DXCH_PP_REGS_ADDR_VER1_STC::PRV_CPSS_DXCH_PRE_Q_STCT;
PRV_CPSS_DXCH_PP_REGS_ADDR_VER1_STC::PRV_CPSS_DXCH_RX_DMA_GLUE_STCT;
PRV_CPSS_DXCH_PP_REGS_ADDR_VER1_STC::PRV_CPSS_DXCH_TX_DMA_GLUE_STCT;
SMI_ST;
struct ETS_temp_STCT;
struct LED_ST;
struct LMS_ST;
struct PRV_CPSS_DXCH_BMA_STCT;
struct PRV_CPSS_DXCH_EREP_STCT;
struct PRV_CPSS_DXCH_MAC_PACKET_GEN_VER1_CONFIG_STC;
struct PRV_CPSS_DXCH_MPPM_STCT;
typedef PRV_CPSS_DXCH_PP_DP_GLUE_PIZZA_ARBITER_STCT PRV_CPSS_DXCH_PP_DP_GLUE_PIZZA_ARBITER_STC;
struct PRV_CPSS_DXCH_PP_DP_GLUE_PIZZA_ARBITER_STCT;
typedef PRV_CPSS_DXCH_PP_DP_PIZZA_ARBITER_STCT PRV_CPSS_DXCH_PP_DP_PIZZA_ARBITER_STC;
struct PRV_CPSS_DXCH_PP_DP_PIZZA_ARBITER_STCT;
typedef PRV_CPSS_DXCH_PP_DP_TX_PIZZA_ARBITER_STCT PRV_CPSS_DXCH_PP_DP_TX_PIZZA_ARBITER_STCT;
typedef PRV_CPSS_DXCH_PP_MPPM_PIZZA_ARBITER_STCT PRV_CPSS_DXCH_PP_MPPM_PIZZA_ARBITER_STC;
struct PRV_CPSS_DXCH_PP_MPPM_PIZZA_ARBITER_STCT;
typedef PRV_CPSS_DXCH_PP_REGS_ADDR_VER1_STC PRV_CPSS_DXCH_PP_REGS_ADDR_VER1_STC;
struct PRV_CPSS_DXCH_PRE_Q_STCT;
struct PRV_CPSS_DXCH_RX_DMA_GLUE_STCT;
struct PRV_CPSS_DXCH_TX_DMA_GLUE_STCT;
struct SMI_ST;

File ../cpss/mainPpDrv/h/cpss/dxCh/dxChxGen/cos/cpssDxChCos.h:
typedef struct {
    CPSS_DP_LEVEL_ENT dropPrecedence;
    GT_U32 userPriority;
    GT_U32 trafficClass;
    GT_U32 dscp;
    GT_U32 exp;
} CPSS_DXCH_COS_PROFILE_STC;

File ../cpss/mainPpDrv/h/cpss/dxCh/dxChxGen/cpssDxChTypes.h:
typedef enum {CPSS_DXCH_PAIR_READ_WRITE_FIRST_ONLY_E, CPSS_DXCH_PAIR_READ_WRITE_SECOND_NEXT_POINTER_ONLY_E, 
    CPSS_DXCH_PAIR_READ_WRITE_WHOLE_E} CPSS_DXCH_PAIR_READ_WRITE_FORM_ENT;
typedef enum {CPSS_DXCH_PORT_PROFILE_NETWORK_E, CPSS_DXCH_PORT_PROFILE_CSCD_E, CPSS_DXCH_PORT_PROFILE_FABRIC_E, 
    CPSS_DXCH_PORT_PROFILE_LOOPBACK_E, CPSS_DXCH_PORT_PROFILE_NETWORK_PREEMPTIVE_E} CPSS_DXCH_PORT_PROFILE_ENT;

File ../cpss/mainPpDrv/h/cpss/dxCh/dxChxGen/cpssHwInit/cpssDxChHwInit.h:
CPSS_DXCH_HW_PP_IMPLEMENT_WA_INIT_FALCON_PORT_DELETE_STC;
typedef struct {
    GT_U32 devType;
    GT_U8 deviceRevision;
    GT_U32 coreClock;
} CPSS_DXCH_HA_2_PHASES_INIT_PHASE1_STC;
typedef struct {
    GT_BOOL maxLengthSrcIdInFdbEn;
    GT_BOOL tag1VidFdbEn;
    CPSS_DXCH_BRG_EGR_FLT_VLAN_PORT_ACCESS_MODE_ENT portVlanfltTabAccessMode;
    GT_U32 portIsolationLookupPortBits;
    GT_U32 portIsolationLookupDeviceBits;
    GT_U32 portIsolationLookupTrunkBits;
    GT_U32 portIsolationLookupTrunkIndexBase;
} CPSS_DXCH_HA_2_PHASES_INIT_PHASE2_STC;
typedef CPSS_DXCH_HW_PP_IMPLEMENT_WA_INIT_FALCON_PORT_DELETE_STC CPSS_DXCH_HW_PP_IMPLEMENT_WA_INIT_FALCON_PORT_DELETE_STC;
typedef enum {CPSS_DXCH_IMPLEMENT_WA_TRUNK_WRONG_SOURCE_PORT_TO_CPU_WA_E, CPSS_DXCH_IMPLEMENT_WA_SDMA_PKTS_FROM_CPU_STACK_E, 
    CPSS_DXCH_IMPLEMENT_WA_FDB_AU_FIFO_E, CPSS_DXCH_IMPLEMENT_WA_FDB_AU_FU_FROM_NON_SOURCE_PORT_GROUP_E, 
    CPSS_DXCH_IMPLEMENT_WA_SDMA_PKTS_FROM_CPU_STACK_PADDING_E, CPSS_DXCH_IMPLEMENT_WA_RESTRICTED_ADDRESS_FILTERING_E, 
    CPSS_DXCH_IMPLEMENT_WA_RGMII_EDGE_ALIGN_MODE_E, CPSS_DXCH_IMPLEMENT_WA_IP_MC_UNDER_STRESS_E, 
    CPSS_DXCH_IMPLEMENT_WA_GE_PORT_UNIDIRECT_E, CPSS_DXCH_IMPLEMENT_WA_2_5G_SGMII_LINK_UP_E, 
    CPSS_DXCH_IMPLEMENT_WA_SGMII_2_5G_UNDER_TRAFFIC_CFG_E, CPSS_DXCH_IMPLEMENT_WA_SGMII_2_5G_UNDER_TRAFFIC_NETWORKP_CFG_E, 
    CPSS_DXCH_IMPLEMENT_WA_SGMII_2_5G_UNDER_TRAFFIC_STACKP_CFG_E, CPSS_DXCH_IMPLEMENT_WA_SERDES_INTERNAL_REG_ACCESS_E, 
    CPSS_DXCH_IMPLEMENT_WA_IPM_BRIDGE_COPY_GET_DROPPED_E, CPSS_DXCH_IMPLEMENT_WA_NO_ALLIGNMENT_LOCK_E, 
    CPSS_DXCH_IMPLEMENT_WA_MC_BANDWIDTH_RESTRICTION_E, CPSS_DXCH_IMPLEMENT_WA_DISMATCH_IF_LINK_E, 
    CPSS_DXCH_IMPLEMENT_WA_CUT_THROUGH_SLOW_TO_FAST_E, CPSS_DXCH_IMPLEMENT_WA_RXAUI_LINK_E, 
    CPSS_DXCH_IMPLEMENT_WA_TRI_SPEED_PORT_AN_FC_E, CPSS_DXCH_IMPLEMENT_WA_BOBCAT2_REV_A0_40G_NOT_THROUGH_TM_IS_PA_30G_E, 
    CPSS_DXCH_IMPLEMENT_WA_WRONG_MIB_COUNTERS_LINK_DOWN_E, CPSS_DXCH_IMPLEMENT_WA_ROUTER_TCAM_RM_E, 
    CPSS_DXCH_IMPLEMENT_WA_BOBCAT2_PTP_TIMESTAMP_E, CPSS_DXCH_IMPLEMENT_WA_100BASEX_AN_DISABLE_E, 
    CPSS_DXCH_IMPLEMENT_WA_XCAT3_XLG_PORT_BUFFER_STUCK_UNIDIRECTIONAL_E, CPSS_DXCH_FALCON_DLB_TS_WRAP_WA_E, 
    CPSS_DXCH_IMPLEMENT_WA_CUT_THROUGH_NON_ETHERNET_WRONG_BYTE_COUNT_E, CPSS_DXCH_IMPLEMENT_WA_LAST_E} CPSS_DXCH_IMPLEMENT_WA_ENT;
typedef struct {
    GT_U8 devNum;
    CPSS_HW_INFO_STC hwInfo[8];
    GT_U32 numOfPortGroups;
    GT_U32 coreClock;
    CPSS_PP_INTERFACE_CHANNEL_ENT mngInterfaceType;
    CPSS_SYS_HA_MODE_ENT ppHAState;
    CPSS_DXCH_PP_SERDES_REF_CLOCK_ENT serdesRefClock;
    GT_BOOL tcamParityCalcEnable;
    GT_U32 isrAddrCompletionRegionsBmp;
    GT_U32 appAddrCompletionRegionsBmp;
    GT_BOOL enableLegacyVplsModeSupport;
    GT_U32 maxNumOfPhyPortsToUse;
    GT_U32 numOfDataIntegrityElements;
    GT_BOOL cutThroughEnable;
    CPSS_DXCH_LOGICAL_TABLES_SHADOW_STC *dataIntegrityShadowPtr;
    CPSS_DXCH_HA_2_PHASES_INIT_PHASE1_STC ha2phaseInitparams;
} CPSS_DXCH_PP_PHASE1_INIT_INFO_STC;
typedef struct {
    GT_U8 newDevNum;
    CPSS_NET_IF_CFG_STC netIfCfg;
    CPSS_AUQ_CFG_STC auqCfg;
    GT_BOOL fuqUseSeparate;
    CPSS_AUQ_CFG_STC fuqCfg;
    GT_BOOL useSecondaryAuq;
    GT_BOOL noTraffic2CPU;
    GT_U32 netifSdmaPortGroupId;
    CPSS_AU_MESSAGE_LENGTH_ENT auMessageLength;
    GT_BOOL useDoubleAuq;
    GT_BOOL useMultiNetIfSdma;
    CPSS_MULTI_NET_IF_CFG_STC multiNetIfCfg;
    CPSS_DXCH_HA_2_PHASES_INIT_PHASE2_STC ha2phaseInitParams;
} CPSS_DXCH_PP_PHASE2_INIT_INFO_STC;
typedef enum {CPSS_DXCH_PP_SERDES_REF_CLOCK_EXTERNAL_25_SINGLE_ENDED_E, CPSS_DXCH_PP_SERDES_REF_CLOCK_EXTERNAL_125_SINGLE_ENDED_E, 
    CPSS_DXCH_PP_SERDES_REF_CLOCK_EXTERNAL_125_DIFF_E, CPSS_DXCH_PP_SERDES_REF_CLOCK_EXTERNAL_156_25_SINGLE_ENDED_E, 
    CPSS_DXCH_PP_SERDES_REF_CLOCK_EXTERNAL_156_25_DIFF_E, 
    CPSS_DXCH_PP_SERDES_REF_CLOCK_INTERNAL_125_E} CPSS_DXCH_PP_SERDES_REF_CLOCK_ENT;

File ../cpss/mainPpDrv/h/cpss/dxCh/dxChxGen/cpssHwInit/cpssDxChHwInitLedCtrl.h:
CPSS_DXCH_LED_PHY_GLOBAL_CONF_STC;
CPSS_DXCH_LED_PHY_PORT_CONF_STC;
typedef CPSS_DXCH_LED_PHY_GLOBAL_CONF_STC CPSS_DXCH_LED_PHY_GLOBAL_CONF_STC;
typedef CPSS_DXCH_LED_PHY_PORT_CONF_STC CPSS_DXCH_LED_PHY_PORT_CONF_STC;
typedef enum {CPSS_DXCH_LED_PHY_LINK_ACT_SPEED = 1, CPSS_DXCH_LED_PHY_LINK_ACT, CPSS_DXCH_LED_PHY_LINK, 
    CPSS_DXCH_LED_PHY_10_LINK_ACT, CPSS_DXCH_LED_PHY_10_LINK, CPSS_DXCH_LED_PHY_100_LINK_ACT, CPSS_DXCH_LED_PHY_100_LINK, 
    CPSS_DXCH_LED_PHY_1000_LINK_ACT, CPSS_DXCH_LED_PHY_1000_LINK, CPSS_DXCH_LED_PHY_10_100_LINK_ACT, CPSS_DXCH_LED_PHY_10_100_LINK, 
    CPSS_DXCH_LED_PHY_10_1000_LINK_ACT, CPSS_DXCH_LED_PHY_10_1000_LINK, CPSS_DXCH_LED_PHY_100_1000_LINK_ACT, 
    CPSS_DXCH_LED_PHY_100_1000_LINK, CPSS_DXCH_LED_PHY_SPECIAL, CPSS_DXCH_LED_PHY_DUPLEX_COL, CPSS_DXCH_LED_PHY_ACTIVITY, 
    CPSS_DXCH_LED_PHY_RESERVED, CPSS_DXCH_LED_PHY_FORCE_BLINK, CPSS_DXCH_LED_PHY_FORCE_OFF, CPSS_DXCH_LED_PHY_FORCE_ON, 
    CPSS_DXCH_LED_PHY_LAST} CPSS_DXCH_LED_PHY_SELECT_ENT;
typedef enum {CPSS_DXCH_LED_PORT_TYPE_TRI_SPEED_E, CPSS_DXCH_LED_PORT_TYPE_XG_E} CPSS_DXCH_LED_PORT_TYPE_ENT;

File ../cpss/mainPpDrv/h/cpss/dxCh/dxChxGen/cpssHwInit/cpssDxChTables.h:
typedef struct {
    CPSS_DXCH_LOGICAL_TABLE_ENT logicalTableName;
    CPSS_DXCH_SHADOW_TYPE_ENT shadowType;
} CPSS_DXCH_LOGICAL_TABLES_SHADOW_STC;
typedef enum {CPSS_DXCH_LOGICAL_TABLE_VLAN_E, CPSS_DXCH_LOGICAL_TABLE_EPORT_E, CPSS_DXCH_LOGICAL_TABLE_PHYSICAL_PORT_E, 
    CPSS_DXCH_LOGICAL_TABLE_PORT_ISOLATION_E, CPSS_DXCH_LOGICAL_TABLE_STG_E, CPSS_DXCH_LOGICAL_TABLE_VLAN_TRANSLATION_E, 
    CPSS_DXCH_LOGICAL_TABLE_VRF_E, CPSS_DXCH_LOGICAL_TABLE_QOS_PROFILE_E, CPSS_DXCH_LOGICAL_TABLE_PROTECTION_LOC_E, 
    CPSS_DXCH_LOGICAL_TABLE_TRUNK_MEMBERS_E, CPSS_DXCH_LOGICAL_TABLE_TM_MAPPING_E, 
    CPSS_DXCH_LOGICAL_TABLE_PFC_MODE_PROFILE_TC_THRESHOLDS_E, CPSS_DXCH_LOGICAL_TABLE_TAIL_DROP_QUEUE_LIMITS_E, 
    CPSS_DXCH_LOGICAL_TABLE_INGRESS_PCL_CONFIG_E, CPSS_DXCH_LOGICAL_TABLE_PCL_UDB_CONFIG_E, 
    CPSS_DXCH_LOGICAL_TABLE_PCL_UDB_SELECT_E, CPSS_DXCH_LOGICAL_TABLE_OAM_E, CPSS_DXCH_LOGICAL_TABLE_OAM_KEEPALIVE_AGING_E, 
    CPSS_DXCH_LOGICAL_TABLE_OAM_EXCEPTION_SUMMARY_E, CPSS_DXCH_LOGICAL_TABLE_OAM_EXCEPTIONS_E, 
    CPSS_DXCH_LOGICAL_TABLE_OAM_OPCODE_PACKET_COMMAND_E, CPSS_DXCH_LOGICAL_TABLE_POLICER_ATTRIBUTES_E, 
    CPSS_DXCH_LOGICAL_TABLE_INGRESS_POLICER_REMARKING_E, CPSS_DXCH_LOGICAL_TABLE_INGRESS_POLICER_0_METERING_E, 
    CPSS_DXCH_LOGICAL_TABLE_INGRESS_POLICER_1_METERING_E, CPSS_DXCH_LOGICAL_TABLE_EGRESS_POLICER_METERING_E, 
    CPSS_DXCH_LOGICAL_TABLE_INGRESS_POLICER_0_COUNTING_E, CPSS_DXCH_LOGICAL_TABLE_INGRESS_POLICER_1_COUNTING_E, 
    CPSS_DXCH_LOGICAL_TABLE_EGRESS_POLICER_COUNTING_E, CPSS_DXCH_LOGICAL_TABLE_INGRESS_POLICER_0_IPFIX_ALERT_WRAPAROUND_E, 
    CPSS_DXCH_LOGICAL_TABLE_INGRESS_POLICER_1_IPFIX_ALERT_WRAPAROUND_E, 
    CPSS_DXCH_LOGICAL_TABLE_EGRESS_POLICER_IPFIX_ALERT_WRAPAROUND_E, CPSS_DXCH_LOGICAL_TABLE_INGRESS_POLICER_0_IPFIX_ALERT_AGING_E, 
    CPSS_DXCH_LOGICAL_TABLE_INGRESS_POLICER_1_IPFIX_ALERT_AGING_E, CPSS_DXCH_LOGICAL_TABLE_EGRESS_POLICER_IPFIX_ALERT_AGING_E, 
    CPSS_DXCH_LOGICAL_TABLE_DEFAULT_EPORT_E, CPSS_DXCH_LOGICAL_TABLE_FDB_E, CPSS_DXCH_LOGICAL_TABLE_IPVX_ROUTER_ACCESS_MATRIX_E, 
    CPSS_DXCH_LOGICAL_TABLE_TM_QUEUE_MAP_CPU_CODE_TO_TC_E, CPSS_DXCH_LOGICAL_TABLE_TM_QUEUE_MAP_TARGET_DEV_TO_INDEX_E, 
    CPSS_DXCH_LOGICAL_TABLE_TM_QUEUE_MAP_POLICING_ENABLE_E, CPSS_DXCH_LOGICAL_TABLE_TM_QUEUE_MAP_QUEUE_ID_SELECTOR_E, 
    CPSS_DXCH_LOGICAL_TABLE_TM_L1_PACKET_LENGTH_OFFSET_E, CPSS_DXCH_LOGICAL_TABLE_TM_DROP_MASKING_E, 
    CPSS_DXCH_LOGICAL_TABLE_TM_DROP_QUEUE_PROFILE_ID_E, CPSS_DXCH_LOGICAL_TABLE_TCAM_E, CPSS_DXCH_LOGICAL_TABLE_TCAM_ACTION_E, 
    CPSS_DXCH_LOGICAL_TABLE_EGRESS_FORWARD_FROM_CPU_TO_LOOPBACK_MAPPER_E, 
    CPSS_DXCH_LOGICAL_TABLE_EGRESS_FAST_STACK_FAILOVER_SECONDARY_TARGET_PORT_E, CPSS_DXCH_LOGICAL_TABLE_EGRESS_DEVICE_MAP_TABLE_E, 
    CPSS_DXCH_LOGICAL_TABLE_TX_PROTECTION_E, CPSS_DXCH_LOGICAL_TABLE_L2_MLL_E, CPSS_DXCH_LOGICAL_TABLE_L2_MLL_LTT_E, 
    CPSS_DXCH_LOGICAL_TABLE_TRUNK_HASH_MASK_CRC_E, CPSS_DXCH_LOGICAL_TABLE_BRIDGE_SOURCE_TRUNK_ATTRIBUTE_E, 
    CPSS_DXCH_LOGICAL_TABLE_TUNNEL_START_CONFIG_E, CPSS_DXCH_LOGICAL_TABLE_ARP_E, CPSS_DXCH_LOGICAL_TABLE_NAT_E, 
    CPSS_DXCH_LOGICAL_TABLE_GENERIC_TUNNEL_START_PROFILE_E, CPSS_DXCH_LOGICAL_TABLE_CN_SAMPLE_INTERVALS_E, 
    CPSS_DXCH_LOGICAL_TABLE_BUFFERS_MANAGER_MULTICAST_COUNTERS_E, CPSS_DXCH_LOGICAL_TABLE_PFC_LLFC_COUNTERS_E, 
    CPSS_DXCH_LOGICAL_TABLE_TAIL_DROP_QUEUES_BUFFERS_COUNTERS_E, 
    CPSS_DXCH_LOGICAL_TABLE_TAIL_DROP_QUEUES_MULTICASTC_BUFFERS_COUNTERS_E, 
    CPSS_DXCH_LOGICAL_TABLE_TXQ_LINK_LIST_QUEUES_DESCRIPTORS_COUNTERS_E, CPSS_DXCH_LOGICAL_TABLE_IP_MLL_E, 
    CPSS_DXCH_LOGICAL_TABLE_IPVX_ROUTER_NEXTHOP_E, CPSS_DXCH_LOGICAL_TABLE_IPVX_ROUTER_NEXTHOP_AGE_BITS_E, 
    CPSS_DXCH_LOGICAL_TABLE_ROUTER_MAC_SA_E, CPSS_DXCH_LOGICAL_TABLE_GLOBAL_MAC_SA_E, 
    CPSS_DXCH_LOGICAL_TABLE_IPVX_ROUTER_QOS_PROFILE_OFFSETS_E, CPSS_DXCH_LOGICAL_TABLE_MAC2ME_E, 
    CPSS_DXCH_LOGICAL_TABLE_TTI_UDB_CONFIG_E, CPSS_DXCH_LOGICAL_TABLE_PTP_DOMAIN_E, 
    CPSS_DXCH_LOGICAL_TABLE_EGRESS_REMARKING_TIMESTAMP_CFG_E, CPSS_DXCH_LOGICAL_TABLE_EGRESS_REMARKING_PTP_LOCAL_ACTION_E, 
    CPSS_DXCH_LOGICAL_TABLE_OAM_LM_OFFSET_E, CPSS_DXCH_LOGICAL_TABLE_EGRESS_POLICER_REMARKING_E, 
    CPSS_DXCH_LOGICAL_TABLE_INGRESS_POLICER_0_HIERARCHICAL_E, CPSS_DXCH_LOGICAL_TABLE_TXQ_DESIGNATED_PORT_E, 
    CPSS_DXCH_LOGICAL_TABLE_EGRESS_TC_DP_MAPPER_E, CPSS_DXCH_LOGICAL_TABLE_MULTICAST_E, 
    CPSS_DXCH_LOGICAL_TABLE_TXQ_SOURCE_ID_MEMBERS_E, CPSS_DXCH_LOGICAL_TABLE_STATISTICAL_RATE_LIMIT_E, 
    CPSS_DXCH_LOGICAL_TABLE_CPU_CODE_E, CPSS_DXCH_LOGICAL_TABLE_TO_CPU_RATE_LIMITER_CONFIG_E, 
    CPSS_DXCH_LOGICAL_TABLE_EGRESS_E_VLAN_MAPPER_E, CPSS_DXCH_LOGICAL_TABLE_LPM_MEM_E, CPSS_DXCH_LOGICAL_TABLE_ECMP_E, 
    CPSS_DXCH_LOGICAL_TABLE_TTI_QOS_MAP_DSCP_TO_QOS_PROFILE_E, CPSS_DXCH_LOGICAL_TABLE_TTI_QOS_MAP_UP_CFI_TO_QOS_PROFILE_E, 
    CPSS_DXCH_LOGICAL_TABLE_TTI_QOS_MAP_EXP_TO_QOS_PROFILE_E, CPSS_DXCH_LOGICAL_TABLE_TTI_QOS_MAP_DSCP_TO_DSCP_E, 
    CPSS_DXCH_LOGICAL_TABLE_EGRESS_REMARKING_QOS_DSCP_MAP_E, CPSS_DXCH_LOGICAL_TABLE_EGRESS_REMARKING_QOS_TC_DP_MAP_E, 
    CPSS_DXCH_LOGICAL_TABLE_TM_FCU_PORT_INGRESS_TIMERS_CONFIG_E, CPSS_DXCH_LOGICAL_TABLE_TM_AGING_QUEUE_PROFILE_E, 
    CPSS_DXCH_LOGICAL_TABLE_TM_AGING_PROFILE_THESHOLDS_E, CPSS_DXCH_LOGICAL_TABLE_L2_ECMP_E, 
    CPSS_DXCH_LOGICAL_TABLE_VLAN_PORT_PROTOCOL_E, CPSS_DXCH_LOGICAL_TABLE_L2_ECMP_LTT_E, 
    CPSS_DXCH_LOGICAL_TABLE_TXQ_SHAPER_PER_PORT_PER_PRIO_TOKEN_BUCKET_CONFIG_E, 
    CPSS_DXCH_LOGICAL_TABLE_TXQ_SHAPER_PER_PORT_TOKEN_BUCKET_CONFIG_E, CPSS_DXCH_LOGICAL_TABLE_EGRESS_PCL_CONFIG_E, 
    CPSS_DXCH_LOGICAL_TABLE_CNC_BLOCK_0_E, CPSS_DXCH_LOGICAL_TABLE_CNC_BLOCK_31_E = 135, 
    CPSS_DXCH_LOGICAL_TABLE_IPVX_ROUTER_ECMP_INDIRECT_NEXT_HOP_E, CPSS_DXCH_LOGICAL_TABLE_TAIL_DROP_PORT_MAX_BUFFER_FILL_LEVEL_E, 
    CPSS_DXCH_LOGICAL_TABLE_TAIL_DROP_QUEUE_MAX_BUFFER_FILL_LEVEL_E, CPSS_DXCH_LOGICAL_TABLE_LATENCY_MONITORING_E, 
    CPSS_DXCH_LOGICAL_TABLE_LATENCY_MONITORING_PORT_CONFIG_E, CPSS_DXCH_LOGICAL_TABLE_LATENCY_MONITORING_CONFIG_E, 
    CPSS_DXCH_LOGICAL_TABLE_LATENCY_MONITORING_STATISTICS_E, CPSS_DXCH_LOGICAL_TABLE_EGRESS_PROFILE_CONFIG_E, 
    CPSS_DXCH_LOGICAL_TABLE_BRIDGE_L2_DLB_PATH_UTILIZATION_TABLE_E, CPSS_DXCH_LOGICAL_TABLE_POLICER_PORT_CONFIG_E, 
    CPSS_DXCH_LOGICAL_TABLE_PHA_FW_IMAGE_E, CPSS_DXCH_LOGICAL_TABLE_PHA_SHARED_DMEM_E, CPSS_DXCH_LOGICAL_TABLE_PHA_THREAD_ID_E, 
    CPSS_DXCH_LOGICAL_TABLE_PHA_SOURCE_PORT_E, CPSS_DXCH_LOGICAL_TABLE_PHA_TARGET_PORT_E, CPSS_DXCH_LOGICAL_TABLE_LPM_AGING_E, 
    CPSS_DXCH_LOGICAL_TABLE_EXACT_MATCH_E, CPSS_DXCH_LOGICAL_TABLE_PORT_MAC_COUNTERS_E, 
    CPSS_DXCH_LOGICAL_INTERNAL_TABLE_PACKET_DATA_ECC_E, CPSS_DXCH_LOGICAL_INTERNAL_TABLE_PACKET_DATA_PARITY_E, 
    CPSS_DXCH_LOGICAL_INTERNAL_TABLE_DESCRIPTORS_CONTROL_ECC_E, CPSS_DXCH_LOGICAL_INTERNAL_TABLE_DESCRIPTORS_CONTROL_PARITY_E, 
    CPSS_DXCH_LOGICAL_INTERNAL_TABLE_PACKET_DATA_CONTROL_ECC_E, CPSS_DXCH_LOGICAL_INTERNAL_TABLE_PACKET_DATA_CONTROL_PARITY_E, 
    CPSS_DXCH_LOGICAL_INTERNAL_TABLE_PHA_RAM_E, CPSS_DXCH_LOGICAL_INTERNAL_TABLE_CM3_RAM_E, 
    CPSS_DXCH_LOGICAL_INTERNAL_TABLE_MANAGEMENT_E, CPSS_DXCH_LOGICAL_TABLE_LAST_E} CPSS_DXCH_LOGICAL_TABLE_ENT;
typedef enum {CPSS_DXCH_SHADOW_TYPE_NONE_E, CPSS_DXCH_SHADOW_TYPE_CPSS_E, CPSS_DXCH_SHADOW_TYPE_HW_E} CPSS_DXCH_SHADOW_TYPE_ENT;
typedef enum {CPSS_DXCH_TABLE_VLAN_PORT_PROTOCOL_E, CPSS_DXCH_TABLE_PORT_VLAN_QOS_E, CPSS_DXCH_TABLE_TRUNK_MEMBERS_E, 
    CPSS_DXCH_TABLE_STATISTICAL_RATE_LIMIT_E, CPSS_DXCH_TABLE_CPU_CODE_E, CPSS_DXCH_TABLE_PCL_CONFIG_E, 
    CPSS_DXCH_TABLE_QOS_PROFILE_E, CPSS_DXCH_TABLE_REMARKING_E, CPSS_DXCH_TABLE_STG_E, CPSS_DXCH_TABLE_VLAN_E, 
    CPSS_DXCH_TABLE_MULTICAST_E, CPSS_DXCH_TABLE_ROUTE_HA_MAC_SA_E, CPSS_DXCH_TABLE_ROUTE_HA_ARP_DA_E, CPSS_DXCH_TABLE_FDB_E, 
    CPSS_DXCH_TABLE_POLICER_E, CPSS_DXCH_TABLE_POLICER_COUNTERS_E, CPSS_DXCH2_TABLE_EGRESS_PCL_CONFIG_E, 
    CPSS_DXCH2_TABLE_TUNNEL_START_CONFIG_E, CPSS_DXCH2_TABLE_QOS_PROFILE_TO_ROUTE_BLOCK_E, CPSS_DXCH2_TABLE_ROUTE_ACCESS_MATRIX_E, 
    CPSS_DXCH2_LTT_TT_ACTION_E, CPSS_DXCH2_UC_MC_ROUTE_NEXT_HOP_E, CPSS_DXCH2_ROUTE_NEXT_HOP_AGE_E, CPSS_DXCH3_TABLE_MAC2ME_E, 
    CPSS_DXCH3_TABLE_INGRESS_VLAN_TRANSLATION_E, CPSS_DXCH3_TABLE_EGRESS_VLAN_TRANSLATION_E, CPSS_DXCH3_TABLE_VRF_ID_E, 
    CPSS_DXCH3_LTT_TT_ACTION_E, CPSS_DXCH_XCAT_TABLE_INGRESS_PCL_LOOKUP1_CONFIG_E, CPSS_DXCH_XCAT_TABLE_INGRESS_PCL_UDB_CONFIG_E, 
    CPSS_DXCH_XCAT_TABLE_LOGICAL_TARGET_MAPPING_E, CPSS_DXCH_XCAT_TABLE_BCN_PROFILES_E, 
    CPSS_DXCH_XCAT_TABLE_EGRESS_POLICER_REMARKING_E, CPSS_DXCH_XCAT_TABLE_EQ_VLAN_MAPPING_E, 
    CPSS_DXCH_XCAT_TABLE_EQ_LP_EGRESS_VLAN_MEMBER_E, CPSS_DXCH_XCAT_TABLE_MLL_L2MLL_VIDX_ENABLE_E, 
    CPSS_DXCH_XCAT_TABLE_MLL_L2MLL_POINTER_MAPPING_E, CPSS_DXCH_XCAT_TABLE_INGRESS_ECID_E, CPSS_DXCH_XCAT_TABLE_LAST_E, 
    CPSS_DXCH_XCAT3_TABLE_LAST_E = 38, CPSS_DXCH_XCAT2_TABLE_INGRESS_PCL_LOOKUP01_CONFIG_E = 38, 
    CPSS_DXCH_LION_TABLE_TRUNK_HASH_MASK_CRC_E, CPSS_DXCH_XCAT2_TABLE_LAST_E, CPSS_DXCH_LION_TABLE_VLAN_INGRESS_E = 40, 
    CPSS_DXCH_LION_TABLE_VLAN_EGRESS_E, CPSS_DXCH_LION_TABLE_STG_INGRESS_E, CPSS_DXCH_LION_TABLE_STG_EGRESS_E, 
    CPSS_DXCH_LION_TABLE_PORT_ISOLATION_L2_E, CPSS_DXCH_LION_TABLE_PORT_ISOLATION_L3_E, 
    CPSS_DXCH_LION_TABLE_TXQ_SHAPER_PER_PORT_PER_PRIO_TOKEN_BUCKET_CONFIG_E, 
    CPSS_DXCH_LION_TABLE_TXQ_SHAPER_PER_PORT_TOKEN_BUCKET_CONFIG_E, CPSS_DXCH_LION_TABLE_TXQ_SOURCE_ID_MEMBERS_E, 
    CPSS_DXCH_LION_TABLE_TXQ_NON_TRUNK_MEMBERS_E, CPSS_DXCH_LION_TABLE_TXQ_DESIGNATED_PORT_E, CPSS_DXCH_LION_TABLE_TXQ_EGRESS_STC_E, 
    CPSS_DXCH_LION_TABLE_ROUTER_VLAN_URPF_STC_E, CPSS_DXCH_LION_TABLE_LAST_E, CPSS_DXCH_LION2_TABLE_LAST_E, 
    CPSS_DXCH_SIP5_TABLE_TTI_PHYSICAL_PORT_ATTRIBUTE_E = 54, CPSS_DXCH_SIP5_TABLE_PRE_TTI_LOOKUP_INGRESS_EPORT_E, 
    CPSS_DXCH_SIP5_TABLE_POST_TTI_LOOKUP_INGRESS_EPORT_E, CPSS_DXCH_SIP5_TABLE_BRIDGE_INGRESS_EPORT_E, 
    CPSS_DXCH_SIP5_TABLE_BRIDGE_INGRESS_EPORT_LEARN_PRIO_E, CPSS_DXCH_SIP5_TABLE_BRIDGE_SOURCE_TRUNK_ATTRIBUTE_E, 
    CPSS_DXCH_SIP5_TABLE_BRIDGE_PHYSICAL_PORT_E, CPSS_DXCH_SIP5_TABLE_BRIDGE_PHYSICAL_PORT_RATE_LIMIT_COUNTERS_E, 
    CPSS_DXCH_SIP5_TABLE_EQ_INGRESS_EPORT_E, CPSS_DXCH_SIP5_TABLE_EQ_INGRESS_STC_PHYSICAL_PORT_E, 
    CPSS_DXCH_SIP5_TABLE_EQ_INGRESS_MIRROR_PHYSICAL_PORT_E, CPSS_DXCH_SIP5_TABLE_EQ_TRUNK_LTT_E, 
    CPSS_DXCH_SIP5_TABLE_EQ_L2_ECMP_LTT_E, CPSS_DXCH_SIP5_TABLE_EQ_L2_ECMP_E, 
    CPSS_DXCH_SIP5_TABLE_EQ_EPORT_TO_PHYSICAL_PORT_TARGET_MAPPING_E, CPSS_DXCH_SIP5_TABLE_EQ_TO_CPU_RATE_LIMITER_CONFIG_E, 
    CPSS_DXCH_SIP5_TABLE_EQ_TX_PROTECTION_E, CPSS_DXCH_SIP5_TABLE_EQ_EPORT_TO_LOC_MAPPING_E, 
    CPSS_DXCH_SIP5_TABLE_EQ_PROTECTION_LOC_E, CPSS_DXCH_SIP5_TABLE_LPM_MEM_E, CPSS_DXCH_SIP5_TABLE_IPV4_VRF_E, 
    CPSS_DXCH_SIP5_TABLE_IPV6_VRF_E, CPSS_DXCH_SIP5_TABLE_FCOE_VRF_E, CPSS_DXCH_SIP5_TABLE_ECMP_E, 
    CPSS_DXCH_SIP5_TABLE_EGRESS_EGF_EFT_FAST_STACK_FAILOVER_SECONDARY_TARGET_PORT_E, 
    CPSS_DXCH_SIP5_TABLE_EGRESS_EGF_QAG_EGRESS_EPORT_E, CPSS_DXCH_SIP5_TABLE_EGRESS_EGF_QAG_EGRESS_VLAN_E, 
    CPSS_DXCH_SIP5_TABLE_EGRESS_EGF_QAG_TARGET_PORT_MAPPER_E, CPSS_DXCH_SIP5_TABLE_EGRESS_EGF_QAG_CPU_CODE_TO_LOOPBACK_MAPPER_E, 
    CPSS_DXCH_SIP5_TABLE_EGRESS_EGF_QAG_FWD_FROM_CPU_TO_LOOPBACK_MAPPER_E, CPSS_DXCH_SIP5_TABLE_EGRESS_EGF_SHT_EGRESS_EPORT_E, 
    CPSS_DXCH_SIP5_TABLE_EGRESS_EGF_SHT_DEVICE_MAP_TABLE_E, CPSS_DXCH_SIP5_TABLE_HA_EGRESS_EPORT_1_E, 
    CPSS_DXCH_SIP5_TABLE_HA_EGRESS_EPORT_2_E, CPSS_DXCH_SIP5_TABLE_HA_PHYSICAL_PORT_1_E, CPSS_DXCH_SIP5_TABLE_HA_PHYSICAL_PORT_2_E, 
    CPSS_DXCH_SIP5_TABLE_HA_QOS_PROFILE_TO_EXP_E, CPSS_DXCH_SIP5_TABLE_HA_EPCL_UDB_CONFIG_E, CPSS_DXCH_SIP5_TABLE_HA_PTP_DOMAIN_E, 
    CPSS_DXCH_SIP5_TABLE_HA_GENERIC_TS_PROFILE_E, CPSS_DXCH_SIP5_TABLE_HA_GLOBAL_MAC_SA_E, CPSS_DXCH_SIP5_TABLE_IP_MLL_E, 
    CPSS_DXCH_SIP5_TABLE_L2_MLL_E, CPSS_DXCH_SIP5_TABLE_L2_MLL_LTT_E, CPSS_DXCH_SIP5_TABLE_ADJACENCY_E, 
    CPSS_DXCH_SIP5_TABLE_INGRESS_POLICER_0_E_ATTRIBUTES_E, CPSS_DXCH_SIP5_TABLE_INGRESS_POLICER_0_REMARKING_E, 
    CPSS_DXCH_SIP5_TABLE_INGRESS_POLICER_0_HIERARCHICAL_E, CPSS_DXCH_SIP5_TABLE_INGRESS_POLICER_0_METERING_E, 
    CPSS_DXCH_SIP5_TABLE_INGRESS_POLICER_1_E_ATTRIBUTES_E, CPSS_DXCH_SIP5_TABLE_INGRESS_POLICER_1_REMARKING_E, 
    CPSS_DXCH_SIP5_TABLE_INGRESS_POLICER_1_METERING_E, CPSS_DXCH_SIP5_TABLE_EGRESS_POLICER_E_ATTRIBUTES_E, 
    CPSS_DXCH_SIP5_TABLE_EGRESS_POLICER_METERING_E, CPSS_DXCH_SIP5_TABLE_IPVX_INGRESS_EPORT_E, CPSS_DXCH_SIP5_TABLE_IPVX_EVLAN_E, 
    CPSS_DXCH_SIP5_TABLE_IPVX_ROUTER_NEXTHOP_E, CPSS_DXCH_SIP5_TABLE_IPVX_ROUTER_NEXTHOP_AGE_BITS_E, 
    CPSS_DXCH_SIP5_TABLE_IPVX_ROUTER_ACCESS_MATRIX_E, CPSS_DXCH_SIP5_TABLE_IPVX_ROUTER_QOS_PROFILE_OFFSETS_E, 
    CPSS_DXCH_SIP5_TABLE_INGRESS_OAM_E, CPSS_DXCH_SIP5_TABLE_INGRESS_OAM_KEEPALIVE_AGING_E, 
    CPSS_DXCH_SIP5_TABLE_INGRESS_OAM_MEG_EXCEPTION_E, CPSS_DXCH_SIP5_TABLE_INGRESS_OAM_SOURCE_INTERFACE_EXCEPTION_E, 
    CPSS_DXCH_SIP5_TABLE_INGRESS_OAM_INVALID_KEEPALIVE_HASH_E, CPSS_DXCH_SIP5_TABLE_INGRESS_OAM_KEEPALIVE_EXCESS_E, 
    CPSS_DXCH_SIP5_TABLE_INGRESS_OAM_EXCEPTION_SUMMARY_E, CPSS_DXCH_SIP5_TABLE_INGRESS_OAM_RDI_STATUS_CHANGE_EXCEPTION_E, 
    CPSS_DXCH_SIP5_TABLE_INGRESS_OAM_TX_PERIOD_EXCEPTION_E, CPSS_DXCH_SIP5_TABLE_INGRESS_OAM_OPCODE_PACKET_COMMAND_E, 
    CPSS_DXCH_SIP5_TABLE_EGRESS_OAM_E, CPSS_DXCH_SIP5_TABLE_EGRESS_OAM_KEEPALIVE_AGING_E, 
    CPSS_DXCH_SIP5_TABLE_EGRESS_OAM_MEG_EXCEPTION_E, CPSS_DXCH_SIP5_TABLE_EGRESS_OAM_SOURCE_INTERFACE_EXCEPTION_E, 
    CPSS_DXCH_SIP5_TABLE_EGRESS_OAM_INVALID_KEEPALIVE_HASH_E, CPSS_DXCH_SIP5_TABLE_EGRESS_OAM_KEEPALIVE_EXCESS_E, 
    CPSS_DXCH_SIP5_TABLE_EGRESS_OAM_EXCEPTION_SUMMARY_E, CPSS_DXCH_SIP5_TABLE_EGRESS_OAM_RDI_STATUS_CHANGE_EXCEPTION_E, 
    CPSS_DXCH_SIP5_TABLE_EGRESS_OAM_TX_PERIOD_EXCEPTION_E, CPSS_DXCH_SIP5_TABLE_EGRESS_OAM_OPCODE_PACKET_COMMAND_E, 
    CPSS_DXCH_SIP5_TABLE_OAM_LM_OFFSET_E, CPSS_DXCH_SIP5_TABLE_TTI_QOS_MAP_DSCP_TO_QOS_PROFILE_E, 
    CPSS_DXCH_SIP5_TABLE_TTI_QOS_MAP_UP_CFI_TO_QOS_PROFILE_E, CPSS_DXCH_SIP5_TABLE_TTI_QOS_MAP_EXP_TO_QOS_PROFILE_E, 
    CPSS_DXCH_SIP5_TABLE_TTI_QOS_MAP_DSCP_TO_DSCP_E, CPSS_DXCH_SIP5_TABLE_TTI_UDB_CONFIG_E, CPSS_DXCH_SIP5_TABLE_TTI_PTP_COMMAND_E, 
    CPSS_DXCH_SIP5_TABLE_IPCL0_UDB_SELECT_E, CPSS_DXCH_SIP5_TABLE_IPCL1_UDB_SELECT_E, CPSS_DXCH_SIP5_TABLE_IPCL2_UDB_SELECT_E, 
    CPSS_DXCH_SIP5_TABLE_TCAM_PCL_TTI_ACTION_E, CPSS_DXCH_SIP5_TABLE_ERMRK_TIMESTAMP_CFG_E, 
    CPSS_DXCH_SIP5_TABLE_ERMRK_PTP_LOCAL_ACTION_E, CPSS_DXCH_SIP5_TABLE_ERMRK_PTP_TARGET_PORT_E, 
    CPSS_DXCH_SIP5_TABLE_ERMRK_PTP_SOURCE_PORT_E, CPSS_DXCH_SIP5_TABLE_ERMRK_QOS_DSCP_MAP_E, 
    CPSS_DXCH_SIP5_TABLE_ERMRK_QOS_TC_DP_MAP_E, CPSS_DXCH_SIP5_TABLE_TCAM_E, CPSS_DXCH_SIP5_TABLE_INGRESS_BRIDGE_PORT_MEMBERS_E, 
    CPSS_DXCH_SIP5_TABLE_INGRESS_SPAN_STATE_GROUP_INDEX_E, CPSS_DXCH_SIP5_TABLE_EGRESS_EGF_SHT_VLAN_ATTRIBUTES_E, 
    CPSS_DXCH_SIP5_TABLE_EGRESS_EGF_SHT_VLAN_SPANNING_E, CPSS_DXCH_SIP5_TABLE_EGRESS_EGF_SHT_VLAN_MAPPER_E, 
    CPSS_DXCH_SIP5_TABLE_EGRESS_EGF_SHT_NON_TRUNK_MEMBERS2_E, CPSS_DXCH_SIP5_TABLE_EGRESS_EGF_SHT_EPORT_FILTER_E, 
    CPSS_DXCH_SIP5_TABLE_EPCL_UDB_SELECT_E, CPSS_DXCH_SIP5_TABLE_BMA_PORT_MAPPING_E, CPSS_DXCH_SIP5_TABLE_BMA_MULTICAST_COUNTERS_E, 
    CPSS_DXCH_SIP5_TABLE_TAIL_DROP_MAX_QUEUE_LIMITS_E, CPSS_DXCH_SIP5_TABLE_TAIL_DROP_EQ_QUEUE_LIMITS_DP0_E, 
    CPSS_DXCH_SIP5_TABLE_TAIL_DROP_DQ_QUEUE_BUF_LIMITS_E, CPSS_DXCH_SIP5_TABLE_TAIL_DROP_DQ_QUEUE_DESC_LIMITS_E, 
    CPSS_DXCH_SIP5_TABLE_TAIL_DROP_EQ_QUEUE_LIMITS_DP1_E, CPSS_DXCH_SIP5_TABLE_TAIL_DROP_EQ_QUEUE_LIMITS_DP2_E, 
    CPSS_DXCH_SIP5_TABLE_TAIL_DROP_COUNTERS_Q_MAIN_BUFF_E, CPSS_DXCH_SIP5_TABLE_TAIL_DROP_COUNTERS_Q_MAIN_MC_BUFF_E, 
    CPSS_DXCH_SIP5_TABLE_TXQ_LINK_LIST_COUNTERS_Q_MAIN_DESC_E, CPSS_DXCH_SIP5_TABLE_PFC_MODE_PROFILE_TC_XOFF_THRESHOLDS_E, 
    CPSS_DXCH_SIP5_TABLE_PFC_MODE_PROFILE_TC_XON_THRESHOLDS_E, CPSS_DXCH_SIP5_TABLE_PFC_LLFC_COUNTERS_E, 
    CPSS_DXCH_SIP5_TABLE_TM_DROP_DROP_MASKING_E, CPSS_DXCH_SIP5_TABLE_TM_DROP_QUEUE_PROFILE_ID_E, 
    CPSS_DXCH_SIP5_TABLE_TM_QMAP_CPU_CODE_TO_TC_E, CPSS_DXCH_SIP5_TABLE_TM_QMAP_TARGET_DEV_TO_INDEX_E, 
    CPSS_DXCH_SIP5_TABLE_TM_QMAP_POLICING_ENABLE_E, CPSS_DXCH_SIP5_TABLE_TM_QMAP_QUEUE_ID_SELECTOR_E, 
    CPSS_DXCH_SIP5_TABLE_TM_INGR_GLUE_L1_PKT_LEN_OFFSET_E, CPSS_DXCH_SIP5_TABLE_TM_EGR_GLUE_AGING_QUEUE_PROFILE_E, 
    CPSS_DXCH_SIP5_TABLE_TM_EGR_GLUE_AGING_PROFILE_THESHOLDS_E, CPSS_DXCH_SIP5_TABLE_TM_EGR_GLUE_TARGET_INTERFACE_E, 
    CPSS_DXCH_SIP5_TABLE_TM_FCU_ETH_DMA_TO_TM_PORT_MAPPING_E, CPSS_DXCH_SIP5_TABLE_TM_FCU_ILK_DMA_TO_TM_PORT_MAPPING_E, 
    CPSS_DXCH_SIP5_TABLE_TM_FCU_TC_PORT_TO_CNODE_PORT_MAPPING_E, CPSS_DXCH_SIP5_TABLE_TM_FCU_PORT_INGRESS_TIMERS_CONFIG_E, 
    CPSS_DXCH_SIP5_TABLE_TM_FCU_INGRESS_TIMERS_E, CPSS_DXCH_SIP5_TABLE_TM_FCU_PORT_TO_PHYSICAL_PORT_MAPPING_E, 
    CPSS_DXCH_SIP5_TABLE_CN_SAMPLE_INTERVALS_E, CPSS_DXCH_SIP5_TABLE_INGRESS_POLICER_0_COUNTING_E, 
    CPSS_DXCH_SIP5_TABLE_INGRESS_POLICER_1_COUNTING_E, CPSS_DXCH_SIP5_TABLE_EGRESS_POLICER_COUNTING_E, 
    CPSS_DXCH_SIP5_TABLE_INGRESS_POLICER_0_IPFIX_ALERT_WRAPAROUND_E, 
    CPSS_DXCH_SIP5_TABLE_INGRESS_POLICER_1_IPFIX_ALERT_WRAPAROUND_E, CPSS_DXCH_SIP5_TABLE_EGRESS_POLICER_IPFIX_ALERT_WRAPAROUND_E, 
    CPSS_DXCH_SIP5_TABLE_INGRESS_POLICER_0_IPFIX_ALERT_AGING_E, CPSS_DXCH_SIP5_TABLE_INGRESS_POLICER_1_IPFIX_ALERT_AGING_E, 
    CPSS_DXCH_SIP5_TABLE_EGRESS_POLICER_IPFIX_ALERT_AGING_E, CPSS_DXCH_SIP5_TABLE_CNC_0_COUNTERS_E, 
    CPSS_DXCH_SIP5_TABLE_CNC_31_COUNTERS_E = 231, CPSS_DXCH_BOBCAT2_TABLE_LAST_E, 
    CPSS_DXCH_SIP5_15_TABLE_INGRESS_POLICER_0_METERING_CONFIG_E, CPSS_DXCH_SIP5_15_TABLE_INGRESS_POLICER_1_METERING_CONFIG_E, 
    CPSS_DXCH_SIP5_15_TABLE_EGRESS_POLICER_METERING_CONFIG_E, CPSS_DXCH_SIP5_15_TABLE_INGRESS_POLICER_0_METERING_CONFORM_SIGN_E, 
    CPSS_DXCH_SIP5_15_TABLE_INGRESS_POLICER_1_METERING_CONFORM_SIGN_E, 
    CPSS_DXCH_SIP5_15_TABLE_EGRESS_POLICER_METERING_CONFORM_SIGN_E, CPSS_DXCH_SIP5_15_TABLE_LAST_E, 
    CPSS_DXCH_SIP5_20_TABLE_EGF_QAG_PORT_SOURCE_ATTRIBUTES_E, CPSS_DXCH_SIP5_20_TABLE_EGF_QAG_PORT_TARGET_ATTRIBUTES_E, 
    CPSS_DXCH_SIP5_20_TABLE_TTI_PHYSICAL_PORT_ATTRIBUTE_2_E, CPSS_DXCH_SIP5_20_TABLE_TTI_QCN_TO_TIMER_PAUSE_MAP_E, 
    CPSS_DXCH_SIP5_20_TABLE_EQ_TX_PROTECTION_LOC_E, CPSS_DXCH_SIP5_20_TABLE_EGF_QAG_TC_DP_MAPPER_E, 
    CPSS_DXCH_SIP5_20_MULTI_INSTANCE_TABLE_TXQ_EGRESS_STC__DQ_1_E, CPSS_DXCH_SIP5_20_MULTI_INSTANCE_TABLE_TXQ_EGRESS_STC__DQ_2_E, 
    CPSS_DXCH_SIP5_20_MULTI_INSTANCE_TABLE_TXQ_EGRESS_STC__DQ_3_E, CPSS_DXCH_SIP5_20_MULTI_INSTANCE_TABLE_TXQ_EGRESS_STC__DQ_4_E, 
    CPSS_DXCH_SIP5_20_MULTI_INSTANCE_TABLE_TXQ_EGRESS_STC__DQ_5_E, 
    CPSS_DXCH_SIP5_20_MULTI_INSTANCE_TABLE_TXQ_EGRESS_STC__DQ_LAST_E = 250, 
    CPSS_DXCH_SIP5_20_MULTI_INSTANCE_TABLE_SHAPER_PER_PORT_TOKEN_BUCKET_CONFIG__DQ_1_E, 
    CPSS_DXCH_SIP5_20_MULTI_INSTANCE_TABLE_SHAPER_PER_PORT_TOKEN_BUCKET_CONFIG__DQ_2_E, 
    CPSS_DXCH_SIP5_20_MULTI_INSTANCE_TABLE_SHAPER_PER_PORT_TOKEN_BUCKET_CONFIG__DQ_3_E, 
    CPSS_DXCH_SIP5_20_MULTI_INSTANCE_TABLE_SHAPER_PER_PORT_TOKEN_BUCKET_CONFIG__DQ_4_E, 
    CPSS_DXCH_SIP5_20_MULTI_INSTANCE_TABLE_SHAPER_PER_PORT_TOKEN_BUCKET_CONFIG__DQ_5_E, 
    CPSS_DXCH_SIP5_20_MULTI_INSTANCE_TABLE_SHAPER_PER_PORT_TOKEN_BUCKET_CONFIG__DQ_LAST_E = 255, 
    CPSS_DXCH_SIP5_20_MULTI_INSTANCE_TABLE_SHAPER_PER_PORT_PER_PRIO_TOKEN_BUCKET_CONFIG__DQ_1_E, 
    CPSS_DXCH_SIP5_20_MULTI_INSTANCE_TABLE_SHAPER_PER_PORT_PER_PRIO_TOKEN_BUCKET_CONFIG__DQ_2_E, 
    CPSS_DXCH_SIP5_20_MULTI_INSTANCE_TABLE_SHAPER_PER_PORT_PER_PRIO_TOKEN_BUCKET_CONFIG__DQ_3_E, 
    CPSS_DXCH_SIP5_20_MULTI_INSTANCE_TABLE_SHAPER_PER_PORT_PER_PRIO_TOKEN_BUCKET_CONFIG__DQ_4_E, 
    CPSS_DXCH_SIP5_20_MULTI_INSTANCE_TABLE_SHAPER_PER_PORT_PER_PRIO_TOKEN_BUCKET_CONFIG__DQ_5_E, 
    CPSS_DXCH_SIP5_20_MULTI_INSTANCE_TABLE_SHAPER_PER_PORT_PER_PRIO_TOKEN_BUCKET_CONFIG__DQ_LAST_E = 260, 
    CPSS_DXCH_SIP5_20_MULTI_INSTANCE_TABLE_EQ_INGRESS_STC_PHYSICAL_PORT_PIPE_1_E, CPSS_DXCH_SIP5_20_TABLE_LPM_MEM_PIPE_1_E, 
    CPSS_DXCH_SIP5_20_MULTI_INSTANCE_TABLE_TTI_PORT_MAPPING__DQ_0_E, 
    CPSS_DXCH_SIP5_20_MULTI_INSTANCE_TABLE_TTI_PORT_MAPPING__DQ_1_E, 
    CPSS_DXCH_SIP5_20_MULTI_INSTANCE_TABLE_TTI_PORT_MAPPING__DQ_2_E, 
    CPSS_DXCH_SIP5_20_MULTI_INSTANCE_TABLE_TTI_PORT_MAPPING__DQ_3_E, 
    CPSS_DXCH_SIP5_20_MULTI_INSTANCE_TABLE_TTI_PORT_MAPPING__DQ_4_E, 
    CPSS_DXCH_SIP5_20_MULTI_INSTANCE_TABLE_TTI_PORT_MAPPING__DQ_5_E, CPSS_DXCH_SIP5_20_TABLE_LAST_E, 
    CPSS_DXCH_SIP5_25_TABLE_IPVX_ROUTER_ECMP_POINTER_E, CPSS_DXCH_SIP5_25_TABLE_TAIL_DROP_PORT_MAX_BUFFER_FILL_LEVEL_E, 
    CPSS_DXCH_SIP5_25_TABLE_TAIL_DROP_QUEUE_MAX_BUFFER_FILL_LEVEL_E, CPSS_DXCH_SIP5_25_TABLE_LAST_E, 
    CPSS_DXCH_SIP6_TABLE_INGRESS_POLICER_0_QOS_ATTRIBUTE_TABLE_E, CPSS_DXCH_SIP6_TABLE_INGRESS_POLICER_1_QOS_ATTRIBUTE_TABLE_E, 
    CPSS_DXCH_SIP6_TABLE_EGRESS_POLICER_QOS_ATTRIBUTE_TABLE_E, CPSS_DXCH_SIP6_TABLE_INGRESS_POLICER_0_PORT_ATTRIBUTE_TABLE_E, 
    CPSS_DXCH_SIP6_TABLE_INGRESS_POLICER_1_PORT_ATTRIBUTE_TABLE_E, CPSS_DXCH_SIP6_TABLE_EGRESS_POLICER_PORT_ATTRIBUTE_TABLE_E, 
    CPSS_DXCH_SIP6_TABLE_INGRESS_PCL_HASH_MODE_CRC_E, CPSS_DXCH_SIP6_TABLE_EGRESS_PCL_EXACT_MATCH_PROFILE_ID_MAPPING_E, 
    CPSS_DXCH_SIP6_TABLE_EGRESS_PCL_LATENCY_MONITORING_PROFILE_TO_SAMPLING_PROFILE_E, 
    CPSS_DXCH_SIP6_TABLE_EGRESS_PCL_PORT_LATENCY_MONITORING_E, CPSS_DXCH_SIP6_TABLE_EGRESS_PCL_SOURCE_PHYSICAL_PORT_MAPPING_E, 
    CPSS_DXCH_SIP6_TABLE_EGRESS_PCL_TARGET_PHYSICAL_PORT_MAPPING_E, CPSS_DXCH_SIP6_TXQ_PDX_DX_QGRPMAP_E, 
    CPSS_DXCH_SIP6_TXQ_PDS_PER_QUEUE_COUNTERS_E, CPSS_DXCH_SIP6_TXQ_PDS_PER_QUEUE_COUNTERS_LAST_E = 318, 
    CPSS_DXCH_SIP6_TXQ_PDS_DATA_STORAGE_E, CPSS_DXCH_SIP6_TXQ_PDS_DATA_STORAGE_LAST_E = 350, CPSS_DXCH_SIP6_TXQ_PDS_NXT_TABLE_E, 
    CPSS_DXCH_SIP6_TXQ_PDS_NXT_TABLE_LAST_E = 382, CPSS_DXCH_SIP6_TXQ_PDS_PID_TABLE_E, 
    CPSS_DXCH_SIP6_TXQ_PDS_PID_TABLE_LAST_E = 414, CPSS_DXCH_SIP6_TXQ_PDS_HEAD_HEAD_E, 
    CPSS_DXCH_SIP6_TXQ_PDS_HEAD_HEAD_LAST_E = 446, CPSS_DXCH_SIP6_TXQ_PDS_HEAD_TAIL_E, 
    CPSS_DXCH_SIP6_TXQ_PDS_HEAD_TAIL_LAST_E = 478, CPSS_DXCH_SIP6_TXQ_PDS_TAIL_TAIL_E, 
    CPSS_DXCH_SIP6_TXQ_PDS_TAIL_TAIL_LAST_E = 510, CPSS_DXCH_SIP6_TXQ_PDS_TAIL_HEAD_E, 
    CPSS_DXCH_SIP6_TXQ_PDS_TAIL_HEAD_LAST_E = 542, CPSS_DXCH_SIP6_TXQ_PDS_FRAG_HEAD_E, 
    CPSS_DXCH_SIP6_TXQ_PDS_FRAG_HEAD_LAST_E = 574, CPSS_DXCH_SIP6_TXQ_PDS_FRAG_TAIL_E, 
    CPSS_DXCH_SIP6_TXQ_PDS_FRAG_TAIL_LAST_E = 606, CPSS_DXCH_SIP6_TXQ_SDQ_QUEUE_CFG_E, 
    CPSS_DXCH_SIP6_TXQ_SDQ_QUEUE_CFG_LAST_E = 638, CPSS_DXCH_SIP6_TXQ_SDQ_QUEUE_CRDT_BLNC_E, 
    CPSS_DXCH_SIP6_TXQ_SDQ_QUEUE_CRDT_BLNC_LAST_E = 670, CPSS_DXCH_SIP6_TXQ_SDQ_QUEUE_ELIG_STATE_E, 
    CPSS_DXCH_SIP6_TXQ_SDQ_QUEUE_ELIG_STATE_LAST_E = 702, CPSS_DXCH_SIP6_TXQ_SDQ_PORT_CRDT_BLNC_E, 
    CPSS_DXCH_SIP6_TXQ_SDQ_PORT_CRDT_BLNC_LAST_E = 734, CPSS_DXCH_SIP6_TXQ_SDQ_SEL_LIST_PTRS_E, 
    CPSS_DXCH_SIP6_TXQ_SDQ_SEL_LIST_PTRS_LAST_E = 766, CPSS_DXCH_SIP6_TXQ_PFCC_PFCC_CFG_E, 
    CPSS_DXCH_SIP6_TXQ_PFCC_PFCC_CFG_LAST_E = 770, CPSS_DXCH_SIP6_TABLE_TTI_PORT_TO_QUEUE_TRANSLATION_TABLE_E, 
    CPSS_DXCH_SIP6_TABLE_TTI_VLAN_TO_VRF_ID_TABLE_E, CPSS_DXCH_SIP6_TABLE_PREQ_CNC_PORT_MAPPING_E, 
    CPSS_DXCH_SIP6_TABLE_PREQ_QUEUE_DP_CONFIGURATIONS_E, CPSS_DXCH_SIP6_TABLE_PREQ_QUEUE_CONFIGURATIONS_E, 
    CPSS_DXCH_SIP6_TABLE_PREQ_PORT_PROFILE_E, CPSS_DXCH_SIP6_TABLE_PREQ_TARGET_PHYSICAL_PORT_E, 
    CPSS_DXCH_SIP6_TABLE_EQ_L2ECMP_PATH_UTILIZATION_TABLE0_E, CPSS_DXCH_SIP6_TABLE_EQ_L2ECMP_PATH_UTILIZATION_TABLE1_E, 
    CPSS_DXCH_SIP6_TABLE_EQ_L2ECMP_PATH_UTILIZATION_TABLE2_E, CPSS_DXCH_SIP6_TABLE_EQ_L2ECMP_PATH_UTILIZATION_TABLE3_E, 
    CPSS_DXCH_SIP6_TABLE_IPVX_ECMP_E, CPSS_DXCH_SIP6_TABLE_PBR_E, CPSS_DXCH_SIP6_TABLE_LPM_AGING_E, 
    CPSS_DXCH_SIP6_TABLE_LMU_STATISTICS_E, CPSS_DXCH_SIP6_TABLE_LMU_STATISTICS_LAST_E = 816, 
    CPSS_DXCH_SIP6_TABLE_LMU_CONFIGURATION_E, CPSS_DXCH_SIP6_TABLE_LMU_CONFIGURATION_LAST_E = 848, 
    CPSS_DXCH_SIP6_TABLE_PHA_PPA_THREADS_CONF_1_E, CPSS_DXCH_SIP6_TABLE_PHA_PPA_THREADS_CONF_2_E, 
    CPSS_DXCH_SIP6_TABLE_PHA_SOURCE_PHYSICAL_PORT_E, CPSS_DXCH_SIP6_TABLE_PHA_TARGET_PHYSICAL_PORT_E, 
    CPSS_DXCH_SIP6_TABLE_PHA_FW_IMAGE_E, CPSS_DXCH_SIP6_TABLE_PHA_SHARED_DMEM_E, CPSS_DXCH_SIP6_TABLE_EXACT_MATCH_E, 
    CPSS_DXCH_SIP6_TABLE_MTIP_MAC_STAT_E, CPSS_DXCH_SIP6_TABLE_LAST_E, CPSS_DXCH_SIP6_10_TABLE_PPU_ACTION_TABLE_0_E, 
    CPSS_DXCH_SIP6_10_TABLE_PPU_ACTION_TABLE_1_E, CPSS_DXCH_SIP6_10_TABLE_PPU_ACTION_TABLE_2_E, 
    CPSS_DXCH_SIP6_10_TABLE_PPU_DAU_PROFILE_TABLE_E, CPSS_DXCH_SIP6_10_TABLE_EXACT_MATCH_AUTO_LEARNED_ENTRY_INDEX_E, 
    CPSS_DXCH_SIP6_10_TABLE_EGRESS_PCL_QUEUE_GROUP_LATENCY_PROFILE_CONFIG_E, 
    CPSS_DXCH_SIP6_10_TABLE_INGRESS_POLICER_0_IPFIX_FIRST_N_PACKETS_E, 
    CPSS_DXCH_SIP6_10_TABLE_INGRESS_POLICER_1_IPFIX_FIRST_N_PACKETS_E, 
    CPSS_DXCH_SIP6_10_TABLE_EGRESS_POLICER_IPFIX_FIRST_N_PACKETS_E, CPSS_DXCH_SIP6_10_TABLE_SOURCE_PORT_HASH_ENTRY_E, 
    CPSS_DXCH_SIP6_10_TABLE_IPCL0_SOURCE_PORT_CONFIG_E, CPSS_DXCH_SIP6_10_TABLE_IPCL1_SOURCE_PORT_CONFIG_E, 
    CPSS_DXCH_SIP6_10_TABLE_IPCL2_SOURCE_PORT_CONFIG_E, CPSS_DXCH_SIP6_10_TABLE_LAST_E, CPSS_DXCH_SIP6_15_TXQ_SDQ_PORT_PFC_STATE_E, 
    CPSS_DXCH_SIP6_15_TABLE_LAST_E, CPSS_DXCH_SIP6_20_EGF_QAG_PORT_VLAN_Q_OFFSET_E, CPSS_DXCH_SIP6_20_TABLE_LAST_E, 
    CPSS_DXCH_SIP6_30_TABLE_IPCL0_UDB_REPLACEMENT_E, CPSS_DXCH_SIP6_30_TABLE_IPCL1_UDB_REPLACEMENT_E, 
    CPSS_DXCH_SIP6_30_TABLE_IPCL2_UDB_REPLACEMENT_E, CPSS_DXCH_SIP6_30_TABLE_LAST_E, CPSS_DXCH_INTERNAL_TABLE_PACKET_DATA_PARITY_E, 
    CPSS_DXCH_INTERNAL_TABLE_PACKET_DATA_ECC_E, CPSS_DXCH_INTERNAL_TABLE_DESCRIPTORS_CONTROL_PARITY_E, 
    CPSS_DXCH_INTERNAL_TABLE_DESCRIPTORS_CONTROL_ECC_E, CPSS_DXCH_INTERNAL_TABLE_PACKET_DATA_CONTROL_PARITY_E, 
    CPSS_DXCH_INTERNAL_TABLE_PACKET_DATA_CONTROL_ECC_E, CPSS_DXCH_INTERNAL_TABLE_PHA_RAM_E, CPSS_DXCH_INTERNAL_TABLE_CM3_RAM_E, 
    CPSS_DXCH_INTERNAL_TABLE_MANAGEMENT_E, CPSS_DXCH_TABLE_LAST_E} CPSS_DXCH_TABLE_ENT;

File ../cpss/mainPpDrv/h/cpss/dxCh/dxChxGen/cpssHwInit/private/prvCpssDxChHwRegAddrVer1_ppDb.h:
PRV_CPSS_REG_DB_INFO_STC;
typedef PRV_CPSS_REG_DB_INFO_STC PRV_CPSS_REG_DB_INFO_STC;
typedef enum {PRV_CPSS_REG_DB_TYPE_MTI_MIB_COUNTER_SHARED_E, PRV_CPSS_REG_DB_TYPE_MTI_MAC_EXT_E, PRV_CPSS_REG_DB_TYPE_MTI_LMU_E, 
    PRV_CPSS_REG_DB_TYPE_MTI_MPFS_E, PRV_CPSS_REG_DB_TYPE_MAC_ECLIPSED_BY_SERDES_BEHIND_E, 
    PRV_CPSS_REG_DB_TYPE_MAC_ECLIPSE_SERDES_AHEAD_E, PRV_CPSS_REG_DB_TYPE_PB_CHANNEL_ID_E, PRV_CPSS_REG_DB_TYPE_FIRST_SERDES_E, 
    PRV_CPSS_REG_DB_TYPE_USX_MTI_MIB_COUNTER_SHARED_E, PRV_CPSS_REG_DB_TYPE_MTI_USX_EXT_E, PRV_CPSS_REG_DB_TYPE_MTI_CPU_EXT_E, 
    PRV_CPSS_REG_DB_TYPE____LAST____E} PRV_CPSS_REG_DB_TYPE_ENT;
typedef GT_STATUS (*)(GT_U8, GT_U32, GT_U32 *, GT_U32 *) PRV_CPSS_SIP6_DMA_GLOBAL_NUM_TO_LOCAL_NUM_IN_DP_CONVERT_FUNC;
typedef GT_STATUS (*)(GT_U8, GT_U32, GT_U32, GT_U32 *) PRV_CPSS_SIP6_DMA_LOCAL_NUM_IN_DP_TO_GLOBAL_NUM_CONVERT_FUNC;
typedef GT_STATUS (*)(GT_U8, GT_U32, GT_U32, GT_U32 *) PRV_CPSS_SIP6_DMA_LOCAL_NUM_IN_DP_TO_GLOBAL_NUM_CONVERT_GET_NEXT_FUNC;
typedef GT_U32 (*)(GT_U8, GT_U32, GT_U32) PRV_CPSS_SIP6_HWS_UNIT_BASE_ADDR_CALC_FUNC;
typedef PRV_CPSS_DXCH_UNIT_ENT (*)(GT_U32, GT_U32) PRV_CPSS_SIP6_HW_REG_ADDR_TO_UNIT_ID_CONRVERT_FUNC;
typedef GT_U32 (*)(GT_SW_DEV_NUM, GT_U32, PRV_CPSS_DXCH_UNIT_ENT) PRV_CPSS_SIP6_OFFSET_FROM_FIRST_INSTANCE_GET_FUNC;
typedef GT_STATUS (*)(GT_U8, GT_U32, PRV_CPSS_REG_DB_TYPE_ENT, PRV_CPSS_REG_DB_INFO_STC *) PRV_CPSS_SIP6_REG_DB_INFO_GET_FUNC;
typedef GT_STATUS (*)(GT_U8, PRV_CPSS_DXCH_UNIT_ENT, GT_U32 *) PRV_CPSS_SIP6_UNIT_ID_SIZE_IN_BYTE_GET_FUNC;

File ../cpss/mainPpDrv/h/cpss/dxCh/dxChxGen/cpssHwInit/private/prvCpssDxChHwTables.h:
PRV_CPSS_DXCH_PP_TABLE_FORMAT_INFO_STC;
PRV_CPSS_DXCH_TABLES_INFO_STC;
typedef PRV_CPSS_DXCH_PP_TABLE_FORMAT_INFO_STC PRV_CPSS_DXCH_PP_TABLE_FORMAT_INFO_STC;
typedef PRV_CPSS_DXCH_TABLES_INFO_STC PRV_CPSS_DXCH_TABLES_INFO_STC;
typedef enum {PRV_CPSS_DXCH_DIRECT_ACCESS_E, PRV_CPSS_DXCH_INDIRECT_ACCESS_E, 
    PRV_CPSS_DXCH_MGCAM_ACCESS_E} PRV_CPSS_DXCH_TABLE_ACCESS_TYPE_ENT;
typedef enum {PRV_CPSS_DXCH_TABLE_FORMAT_TTI_DEFAULT_EPORT_E, PRV_CPSS_DXCH_TABLE_FORMAT_TTI_PHYSICAL_PORT_ATTRIBUTE_E, 
    PRV_CPSS_DXCH_TABLE_FORMAT_TTI_EPORT_ATTRIBUTES_E, PRV_CPSS_DXCH_TABLE_FORMAT_VLAN_PORT_PROTOCOL_E, 
    PRV_CPSS_DXCH_TABLE_FORMAT_BRIDGE_INGRESS_EVLAN_E, PRV_CPSS_DXCH_TABLE_FORMAT_BRIDGE_INGRESS_EPORT_E, 
    PRV_CPSS_DXCH_TABLE_FORMAT_FDB_E, PRV_CPSS_DXCH_TABLE_FORMAT_IP_MLL_E, PRV_CPSS_DXCH_TABLE_FORMAT_L2_MLL_E, 
    PRV_CPSS_DXCH_TABLE_FORMAT_EGF_QAG_EGRESS_EPORT_E, PRV_CPSS_DXCH_TABLE_FORMAT_EGF_QAG_TARGET_PORT_MAPPER_E, 
    PRV_CPSS_DXCH_TABLE_FORMAT_EGF_SHT_EGRESS_EVLAN_E, PRV_CPSS_DXCH_TABLE_FORMAT_EGF_SHT_VLAN_ATTRIBUTES_E, 
    PRV_CPSS_DXCH_TABLE_FORMAT_EGF_SHT_EGRESS_EPORT_E, PRV_CPSS_DXCH_TABLE_FORMAT_HA_EGRESS_EPORT_1_E, 
    PRV_CPSS_DXCH_TABLE_FORMAT_HA_EGRESS_EPORT_2_E, PRV_CPSS_DXCH_TABLE_FORMAT_HA_PHYSICAL_PORT_1_E, 
    PRV_CPSS_DXCH_TABLE_FORMAT_HA_PHYSICAL_PORT_2_E, PRV_CPSS_DXCH_TABLE_FORMAT_TUNNEL_START_E, 
    PRV_CPSS_DXCH_TABLE_FORMAT_GENERIC_TUNNEL_START_E, PRV_CPSS_DXCH_TABLE_FORMAT_HA_GENERIC_TS_PROFILE_E, 
    PRV_CPSS_DXCH_TABLE_FORMAT_IPCL_ACTION_E, PRV_CPSS_DXCH_TABLE_FORMAT_EPCL_ACTION_E, PRV_CPSS_DXCH_TABLE_FORMAT_FDB_AU_MSG_E, 
    PRV_CPSS_DXCH_TABLE_FORMAT_IPVX_ROUTER_NEXT_HOP_E, PRV_CPSS_DXCH_TABLE_FORMAT_NAT44_E, PRV_CPSS_DXCH_TABLE_FORMAT_NAT66_E, 
    PRV_CPSS_DXCH_TABLE_FORMAT_ROUTER_EPORT_E, PRV_CPSS_DXCH_TABLE_FORMAT_PLR_METER_E, 
    PRV_CPSS_DXCH_TABLE_FORMAT_PLR_METER_CONFIG_E, PRV_CPSS_DXCH_TABLE_FORMAT_PLR_METER_CONFORM_SIGN_E, 
    PRV_CPSS_DXCH_TABLE_FORMAT_EGF_QAG_PORT_TARGET_ATTRIBUTES_E, PRV_CPSS_DXCH_TABLE_FORMAT_EGF_QAG_PORT_SOURCE_ATTRIBUTES_E, 
    PRV_CPSS_DXCH_TABLE_FORMAT_TTI_ACTION_E, PRV_CPSS_DXCH_TABLE_FORMAT_FDB_AU_MSG_SIP6_DIFF_E, 
    PRV_CPSS_DXCH_TABLE_FORMAT_PREQ_PORT_PROFILE_E, PRV_CPSS_DXCH_TABLE_FORMAT_PREQ_PROFILES_E, 
    PRV_CPSS_DXCH_TABLE_FORMAT_PREQ_QUEUE_CONFIGURATIONS_E, PRV_CPSS_DXCH_TABLE_FORMAT_PREQ_QUEUE_PORT_MAPPING_E, 
    PRV_CPSS_DXCH_TABLE_FORMAT_PREQ_QUEUE_PRIO_MAPPING_E, PRV_CPSS_DXCH_TABLE_FORMAT_PREQ_TARGET_PHYSICAL_PORT_E, 
    PRV_CPSS_DXCH_TABLE_FORMAT_EXACT_MATCH_E, PRV_CPSS_DXCH_TABLE_FORMAT_EXACT_MATCH_AUTO_LEARNED_ENTRY_INDEX_E, 
    PRV_CPSS_DXCH_TABLE_FORMAT_PPU_ACTION_E, PRV_CPSS_DXCH_TABLE_FORMAT_PPU_DAU_PROFILE_E, 
    PRV_CPSS_DXCH_TABLE_LAST_FORMAT_E} PRV_CPSS_DXCH_TABLE_FORMAT_ENT;
typedef enum {SIP5_FDB_AU_MSG_TABLE_FIELDS_MESSAGE_ID_E, SIP5_FDB_AU_MSG_TABLE_FIELDS_MSG_TYPE_E, 
    SIP5_FDB_AU_MSG_TABLE_FIELDS_FDB_ENTRY_TYPE_E, SIP5_FDB_AU_MSG_TABLE_FIELDS_VALID_E, SIP5_FDB_AU_MSG_TABLE_FIELDS_SKIP_E, 
    SIP5_FDB_AU_MSG_TABLE_FIELDS_AGE_E, SIP5_FDB_AU_MSG_TABLE_FIELDS_MAC_ADDR_INDEX_8_0_E, 
    SIP5_FDB_AU_MSG_TABLE_FIELDS_CHAIN_TOO_LONG_E, SIP5_FDB_AU_MSG_TABLE_FIELDS_MAC_ADDR_OFFSET_E, 
    SIP5_FDB_AU_MSG_TABLE_FIELDS_ENTRY_FOUND_E, SIP5_FDB_AU_MSG_TABLE_FIELDS_MAC_ADDR_E, SIP5_FDB_AU_MSG_TABLE_FIELDS_DEV_ID_E, 
    SIP5_FDB_AU_MSG_TABLE_FIELDS_SOURCE_ID_5_0_E, SIP5_FDB_AU_MSG_TABLE_FIELDS_DIP_E, SIP5_FDB_AU_MSG_TABLE_FIELDS_SIP_E, 
    SIP5_FDB_AU_MSG_TABLE_FIELDS_FID_E, SIP5_FDB_AU_MSG_TABLE_FIELDS_VIDX_E, SIP5_FDB_AU_MSG_TABLE_FIELDS_IS_TRUNK_E, 
    SIP5_FDB_AU_MSG_TABLE_FIELDS_EPORT_NUM_E, SIP5_FDB_AU_MSG_TABLE_FIELDS_TRUNK_NUM_E, SIP5_FDB_AU_MSG_TABLE_FIELDS_USER_DEFINED_E, 
    SIP5_FDB_AU_MSG_TABLE_FIELDS_RESERVED_109_113_E, SIP5_FDB_AU_MSG_TABLE_FIELDS_SOURCE_ID_11_9_E, 
    SIP5_FDB_AU_MSG_TABLE_FIELDS_ORIG_VID1_E, SIP5_FDB_AU_MSG_TABLE_FIELDS_DA_ACCESS_LEVEL_E, 
    SIP5_FDB_AU_MSG_TABLE_FIELDS_SA_ACCESS_LEVEL_E, SIP5_FDB_AU_MSG_TABLE_FIELDS_SOURCE_ID_8_6_E, 
    SIP5_FDB_AU_MSG_TABLE_FIELDS_APP_SPECIFIC_CPU_CODE_E, SIP5_FDB_AU_MSG_TABLE_FIELDS_SP_UNKNOWN_E, 
    SIP5_FDB_AU_MSG_TABLE_FIELDS_SEARCH_TYPE_E, SIP5_FDB_AU_MSG_TABLE_FIELDS_MAC_ADDR_INDEX_20_9_E, 
    SIP5_FDB_AU_MSG_TABLE_FIELDS_MULTIPLE_E, SIP5_FDB_AU_MSG_TABLE_FIELDS_DA_ROUTE_E, 
    SIP5_FDB_AU_MSG_TABLE_FIELDS_SA_QOS_PARAM_SET_IDX_E, SIP5_FDB_AU_MSG_TABLE_FIELDS_DA_QOS_PARAM_SET_IDX_E, 
    SIP5_FDB_AU_MSG_TABLE_FIELDS_IS_STATIC_E, SIP5_FDB_AU_MSG_TABLE_FIELDS_DA_CMD_E, SIP5_FDB_AU_MSG_TABLE_FIELDS_SA_CMD_E, 
    SIP5_FDB_AU_MSG_TABLE_FIELDS_SA_LOOKUP_INGRESS_MIRROR_TO_ANALYZER_E, 
    SIP5_FDB_AU_MSG_TABLE_FIELDS_DA_LOOKUP_INGRESS_MIRROR_TO_ANALYZER_E, SIP5_FDB_AU_MSG_TABLE_FIELDS_FDB_LOOKUP_KEY_MODE_E, 
    SIP5_FDB_AU_MSG_TABLE_FIELDS_NA_MOVED_UP0_E, SIP5_FDB_AU_MSG_TABLE_FIELDS_NA_MOVED_IS_MOVED_E, 
    SIP5_FDB_AU_MSG_TABLE_FIELDS_NA_MOVED_OLD_IS_TRUNK_E, SIP5_FDB_AU_MSG_TABLE_FIELDS_NA_MOVED_OLD_EPORT_E, 
    SIP5_FDB_AU_MSG_TABLE_FIELDS_NA_MOVED_OLD_TRUNK_NUM_E, SIP5_FDB_AU_MSG_TABLE_FIELDS_NA_MOVED_OLD_DEVICE_E, 
    SIP5_FDB_AU_MSG_TABLE_FIELDS_NA_MOVED_OLD_SRC_ID_E, SIP5_FDB_AU_MSG_TABLE_FIELDS_UC_ROUTE_MAC_ADDR_INDEX_E, 
    SIP5_FDB_AU_MSG_TABLE_FIELDS_UC_ROUTE_VRF_ID_E, SIP5_FDB_AU_MSG_TABLE_FIELDS_UC_ROUTE_IPV6_SCOPE_CHECK_E, 
    SIP5_FDB_AU_MSG_TABLE_FIELDS_UC_ROUTE_FCOE_D_ID_E, SIP5_FDB_AU_MSG_TABLE_FIELDS_UC_ROUTE_IPV4_DIP_E, 
    SIP5_FDB_AU_MSG_TABLE_FIELDS_UC_ROUTE_IPV6_DST_SITE_ID_E, SIP5_FDB_AU_MSG_TABLE_FIELDS_UC_ROUTE_DEC_TTL_OR_HOP_COUNT_E, 
    SIP5_FDB_AU_MSG_TABLE_FIELDS_UC_ROUTE_BYPASS_TTL_OPTIONS_OR_HOP_EXTENSION_E, 
    SIP5_FDB_AU_MSG_TABLE_FIELDS_UC_ROUTE_INGRESS_MIRROR_TO_ANALYZER_INDEX_E, 
    SIP5_FDB_AU_MSG_TABLE_FIELDS_UC_ROUTE_QOS_PROFILE_MARKING_EN_E, SIP5_FDB_AU_MSG_TABLE_FIELDS_UC_ROUTE_QOS_PROFILE_INDEX_E, 
    SIP5_FDB_AU_MSG_TABLE_FIELDS_UC_ROUTE_QOS_PROFILE_PRECEDENCE_E, SIP5_FDB_AU_MSG_TABLE_FIELDS_UC_ROUTE_MODIFY_UP_E, 
    SIP5_FDB_AU_MSG_TABLE_FIELDS_UC_ROUTE_MODIFY_DSCP_E, SIP5_FDB_AU_MSG_TABLE_FIELDS_UC_ROUTE_COUNTER_SET_INDEX_E, 
    SIP5_FDB_AU_MSG_TABLE_FIELDS_UC_ROUTE_ARP_BC_TRAP_MIRROR_EN_E, SIP5_FDB_AU_MSG_TABLE_FIELDS_UC_ROUTE_DIP_ACCESS_LEVEL_E, 
    SIP5_FDB_AU_MSG_TABLE_FIELDS_UC_ROUTE_ICMP_REDIRECT_EXCEP_MIRROR_EN_E, SIP5_FDB_AU_MSG_TABLE_FIELDS_UC_ROUTE_MTU_INDEX_E, 
    SIP5_FDB_AU_MSG_TABLE_FIELDS_UC_ROUTE_USE_VIDX_E, SIP5_FDB_AU_MSG_TABLE_FIELDS_UC_ROUTE_IS_TRUNK_E, 
    SIP5_FDB_AU_MSG_TABLE_FIELDS_UC_ROUTE_EVIDX_E, SIP5_FDB_AU_MSG_TABLE_FIELDS_UC_ROUTE_TARGET_DEVICE_E, 
    SIP5_FDB_AU_MSG_TABLE_FIELDS_UC_ROUTE_TRUNK_NUM_E, SIP5_FDB_AU_MSG_TABLE_FIELDS_UC_ROUTE_EPORT_NUM_E, 
    SIP5_FDB_AU_MSG_TABLE_FIELDS_UC_ROUTE_NEXT_HOP_EVLAN_E, SIP5_FDB_AU_MSG_TABLE_FIELDS_UC_ROUTE_TUNNEL_START_E, 
    SIP5_FDB_AU_MSG_TABLE_FIELDS_UC_ROUTE_TUNNEL_TYPE_E, SIP5_FDB_AU_MSG_TABLE_FIELDS_UC_ROUTE_ARP_PTR_E, 
    SIP5_FDB_AU_MSG_TABLE_FIELDS_UC_ROUTE_TUNNEL_PTR_E, SIP5_FDB_AU_MSG_TABLE_FIELDS_UC_ROUTE_IPV6_DIP_0_E, 
    SIP5_FDB_AU_MSG_TABLE_FIELDS_UC_ROUTE_IPV6_DIP_1_E, SIP5_FDB_AU_MSG_TABLE_FIELDS_UC_ROUTE_IPV6_DIP_2_E, 
    SIP5_FDB_AU_MSG_TABLE_FIELDS_UC_ROUTE_IPV6_DIP_3_E, SIP5_FDB_AU_MSG_TABLE_FIELDS_UC_ROUTE_NH_DATA_BANK_NUM_E, 
    SIP5_FDB_AU_MSG_TABLE_FIELDS___LAST_VALUE___E, SIP5_10_FDB_AU_MSG_TABLE_FIELDS_UC_ROUTE_TS_IS_NAT_E = 83, 
    SIP5_10_FDB_AU_MSG_TABLE_FIELDS___LAST_VALUE___E} SIP5_FDB_AU_MSG_TABLE_FIELDS_ENT;
typedef enum {SIP5_FDB_FDB_TABLE_FIELDS_VALID_E, SIP5_FDB_FDB_TABLE_FIELDS_SKIP_E, SIP5_FDB_FDB_TABLE_FIELDS_AGE_E, 
    SIP5_FDB_FDB_TABLE_FIELDS_FDB_ENTRY_TYPE_E, SIP5_FDB_FDB_TABLE_FIELDS_FID_E, SIP5_FDB_FDB_TABLE_FIELDS_MAC_ADDR_E, 
    SIP5_FDB_FDB_TABLE_FIELDS_DEV_ID_E, SIP5_FDB_FDB_TABLE_FIELDS_SOURCE_ID_5_0_E, SIP5_FDB_FDB_TABLE_FIELDS_IS_TRUNK_E, 
    SIP5_FDB_FDB_TABLE_FIELDS_DIP_E, SIP5_FDB_FDB_TABLE_FIELDS_SIP_E, SIP5_FDB_FDB_TABLE_FIELDS_VIDX_E, 
    SIP5_FDB_FDB_TABLE_FIELDS_TRUNK_NUM_E, SIP5_FDB_FDB_TABLE_FIELDS_EPORT_NUM_E, SIP5_FDB_FDB_TABLE_FIELDS_USER_DEFINED_E, 
    SIP5_FDB_FDB_TABLE_FIELDS_RESERVED_99_103_E, SIP5_FDB_FDB_TABLE_FIELDS_SOURCE_ID_11_9_E, 
    SIP5_FDB_FDB_TABLE_FIELDS_DA_ACCESS_LEVEL_E, SIP5_FDB_FDB_TABLE_FIELDS_SA_ACCESS_LEVEL_E, 
    SIP5_FDB_FDB_TABLE_FIELDS_SOURCE_ID_8_6_E, SIP5_FDB_FDB_TABLE_FIELDS_RESERVED_116_118_E, SIP5_FDB_FDB_TABLE_FIELDS_ORIG_VID1_E, 
    SIP5_FDB_FDB_TABLE_FIELDS_IS_STATIC_E, SIP5_FDB_FDB_TABLE_FIELDS_MULTIPLE_E, SIP5_FDB_FDB_TABLE_FIELDS_DA_CMD_E, 
    SIP5_FDB_FDB_TABLE_FIELDS_SA_CMD_E, SIP5_FDB_FDB_TABLE_FIELDS_DA_ROUTE_E, SIP5_FDB_FDB_TABLE_FIELDS_SP_UNKNOWN_E, 
    SIP5_FDB_FDB_TABLE_FIELDS_SA_QOS_PARAM_SET_IDX_E, SIP5_FDB_FDB_TABLE_FIELDS_DA_QOS_PARAM_SET_IDX_E, 
    SIP5_FDB_FDB_TABLE_FIELDS_APP_SPECIFIC_CPU_CODE_E, SIP5_FDB_FDB_TABLE_FIELDS_SA_LOOKUP_INGRESS_MIRROR_TO_ANALYZER_E, 
    SIP5_FDB_FDB_TABLE_FIELDS_DA_LOOKUP_INGRESS_MIRROR_TO_ANALYZER_E, SIP5_FDB_FDB_TABLE_FIELDS_VRF_ID_E, 
    SIP5_FDB_FDB_TABLE_FIELDS_IPV6_SCOPE_CHECK_E, SIP5_FDB_FDB_TABLE_FIELDS_FCOE_D_ID_E, SIP5_FDB_FDB_TABLE_FIELDS_IPV4_DIP_E, 
    SIP5_FDB_FDB_TABLE_FIELDS_IPV6_DST_SITE_ID_E, SIP5_FDB_FDB_TABLE_FIELDS_DEC_TTL_OR_HOP_COUNT_E, 
    SIP5_FDB_FDB_TABLE_FIELDS_BYPASS_TTL_OPTIONS_OR_HOP_EXTENSION_E, SIP5_FDB_FDB_TABLE_FIELDS_INGRESS_MIRROR_TO_ANALYZER_INDEX_E, 
    SIP5_FDB_FDB_TABLE_FIELDS_QOS_PROFILE_MARKING_EN_E, SIP5_FDB_FDB_TABLE_FIELDS_QOS_PROFILE_INDEX_E, 
    SIP5_FDB_FDB_TABLE_FIELDS_QOS_PROFILE_PRECEDENCE_E, SIP5_FDB_FDB_TABLE_FIELDS_MODIFY_UP_E, 
    SIP5_FDB_FDB_TABLE_FIELDS_MODIFY_DSCP_E, SIP5_FDB_FDB_TABLE_FIELDS_COUNTER_SET_INDEX_E, 
    SIP5_FDB_FDB_TABLE_FIELDS_ARP_BC_TRAP_MIRROR_EN_E, SIP5_FDB_FDB_TABLE_FIELDS_DIP_ACCESS_LEVEL_E, 
    SIP5_FDB_FDB_TABLE_FIELDS_ICMP_REDIRECT_EXCEP_MIRROR_EN_E, SIP5_FDB_FDB_TABLE_FIELDS_MTU_INDEX_E, 
    SIP5_FDB_FDB_TABLE_FIELDS_USE_VIDX_E, SIP5_FDB_FDB_TABLE_FIELDS_TARGET_DEVICE_E, SIP5_FDB_FDB_TABLE_FIELDS_NEXT_HOP_EVLAN_E, 
    SIP5_FDB_FDB_TABLE_FIELDS_TUNNEL_START_E, SIP5_FDB_FDB_TABLE_FIELDS_TUNNEL_TYPE_E, SIP5_FDB_FDB_TABLE_FIELDS_ARP_PTR_E, 
    SIP5_FDB_FDB_TABLE_FIELDS_TUNNEL_PTR_E, SIP5_FDB_FDB_TABLE_FIELDS_IPV6_DIP_0_E, SIP5_FDB_FDB_TABLE_FIELDS_IPV6_DIP_1_E, 
    SIP5_FDB_FDB_TABLE_FIELDS_IPV6_DIP_2_E, SIP5_FDB_FDB_TABLE_FIELDS_IPV6_DIP_3_E, SIP5_FDB_FDB_TABLE_FIELDS_NH_DATA_BANK_NUM_E, 
    SIP5_FDB_FDB_TABLE_FIELDS___LAST_VALUE___E, SIP5_10_FDB_FDB_TABLE_FIELDS_UC_ROUTE_TS_IS_NAT_E = 63, 
    SIP5_10_FDB_FDB_TABLE_FIELDS___LAST_VALUE___E} SIP5_FDB_FDB_TABLE_FIELDS_ENT;
typedef enum {SIP5_TTI_PHYSICAL_PORT_TABLE_FIELDS_PORT_DEFAULT_SOURCE_EPORT_NUMBER_E, 
    SIP5_TTI_PHYSICAL_PORT_TABLE_FIELDS_PORT_IS_RING_CORE_PORT_E, SIP5_TTI_PHYSICAL_PORT_TABLE_FIELDS_PORT_IS_LOOPED_E, 
    SIP5_TTI_PHYSICAL_PORT_TABLE_FIELDS_ENABLE_MRU_CHECK_ON_CASCADE_PORT_E, 
    SIP5_TTI_PHYSICAL_PORT_TABLE_FIELDS_CC_LINE_CARD_PORTS_DEFAULT_EPORT_BASE_E, 
    SIP5_TTI_PHYSICAL_PORT_TABLE_FIELDS_CC_LINE_CARD_TRUNK_DEFAULT_EPORT_BASE_E, 
    SIP5_TTI_PHYSICAL_PORT_TABLE_FIELDS_CENTRALIZED_CHASSIS_PORT_ENABLE_E, SIP5_TTI_PHYSICAL_PORT_TABLE_FIELDS_TRUNK_ID_E, 
    SIP5_TTI_PHYSICAL_PORT_TABLE_FIELDS_PORT_QOS_MODE_E, SIP5_TTI_PHYSICAL_PORT_TABLE_FIELDS___LAST_VALUE___E, 
    SIP6_TTI_PHYSICAL_PORT_TABLE_FIELDS_FLOW_TRACK_ENABLE_E = 9, 
    SIP6_TTI_PHYSICAL_PORT_TABLE_FIELDS_ACCEPT_EDSA_SKIP_FDB_SA_LOOKUP_FIELD_E, 
    SIP6_TTI_PHYSICAL_PORT_TABLE_FIELDS___LAST_VALUE___E, SIP6_10_TTI_PHYSICAL_PORT_TABLE_FIELDS_PCL_ID_MODE_E = 11, 
    SIP6_10_TTI_PHYSICAL_PORT_TABLE_FIELDS_EM_PROFILE_ID_MODE_E, SIP6_10_TTI_PHYSICAL_PORT_TABLE_FIELDS_PCL_ID_E, 
    SIP6_10_TTI_PHYSICAL_PORT_TABLE_FIELDS_EM_LOOKUP_PROFILE_ID1_E, SIP6_10_TTI_PHYSICAL_PORT_TABLE_FIELDS_EM_LOOKUP_PROFILE_ID2_E, 
    SIP6_10_TTI_PHYSICAL_PORT_TABLE_FIELDS_TCAM_PROFILE_ID_MODE_E, SIP6_10_TTI_PHYSICAL_PORT_TABLE_FIELDS_TCAM_PROFILE_ID_E, 
    SIP6_10_TTI_PHYSICAL_PORT_TABLE_FIELDS_PPU_PROFILE_E, 
    SIP6_10_TTI_PHYSICAL_PORT_TABLE_FIELDS___LAST_VALUE___E} SIP5_TTI_PHYSICAL_PORT_TABLE_FIELDS_ENT;

File ../cpss/mainPpDrv/h/cpss/dxCh/dxChxGen/cpssHwInit/private/prvCpssDxChHwTablesSip6.h:
typedef enum {SIP6_IPCL_ACTION_TABLE_FIELDS_CPU_CODE_E, SIP6_IPCL_ACTION_TABLE_FIELDS_COMMAND_E, 
    SIP6_IPCL_ACTION_TABLE_FIELDS_REDIRECT_COMMAND_E, SIP6_IPCL_ACTION_TABLE_FIELDS_ACTION_STOP_E, 
    SIP6_IPCL_ACTION_TABLE_FIELDS_SET_MAC2ME_E, SIP6_IPCL_ACTION_TABLE_FIELDS_POLICY1_LOOKUP_MODE_E, 
    SIP6_IPCL_ACTION_TABLE_FIELDS_POLICY2_LOOKUP_MODE_E, SIP6_IPCL_ACTION_TABLE_FIELDS_IPCL_PROFILE_INDEX_E, 
    SIP6_IPCL_ACTION_TABLE_FIELDS_USE_VIDX_E, SIP6_IPCL_ACTION_TABLE_FIELDS_VIDX_E, SIP6_IPCL_ACTION_TABLE_FIELDS_IS_TRUNK_E, 
    SIP6_IPCL_ACTION_TABLE_FIELDS_TRG_PORT_E, SIP6_IPCL_ACTION_TABLE_FIELDS_TARGET_DEVICE_E, 
    SIP6_IPCL_ACTION_TABLE_FIELDS_TRUNK_ID_E, SIP6_IPCL_ACTION_TABLE_FIELDS_VNT_L2_ECHO_E, 
    SIP6_IPCL_ACTION_TABLE_FIELDS_TUNNEL_START_E, SIP6_IPCL_ACTION_TABLE_FIELDS_ARP_POINTER_E, 
    SIP6_IPCL_ACTION_TABLE_FIELDS_TUNNEL_POINTER_E, SIP6_IPCL_ACTION_TABLE_FIELDS_TUNNEL_START_PASSENGER_TYPE_E, 
    SIP6_IPCL_ACTION_TABLE_FIELDS_PBR_MODE_E, SIP6_IPCL_ACTION_TABLE_FIELDS_IP_NEXT_HOP_ENTRY_INDEX_E, 
    SIP6_IPCL_ACTION_TABLE_FIELDS_VRF_ID_E, SIP6_IPCL_ACTION_TABLE_FIELDS_MAC_SA_27_0_E, 
    SIP6_IPCL_ACTION_TABLE_FIELDS_MAC_SA_47_28_E, SIP6_IPCL_ACTION_TABLE_FIELDS_ACTIVATE_METER_E, 
    SIP6_IPCL_ACTION_TABLE_FIELDS_BIND_TO_POLICER_COUNTER_E, SIP6_IPCL_ACTION_TABLE_FIELDS_POLICER_PTR_E, 
    SIP6_IPCL_ACTION_TABLE_FIELDS_RESERVED_E, SIP6_IPCL_ACTION_TABLE_FIELDS_ENABLE_MIRROR_TCP_RST_OR_FIN_E, 
    SIP6_IPCL_ACTION_TABLE_FIELDS_MIRROR_TO_ANALYZER_PORT_E, SIP6_IPCL_ACTION_TABLE_FIELDS_MODIFY_MAC_DA_E, 
    SIP6_IPCL_ACTION_TABLE_FIELDS_MODIFY_MAC_SA_E, SIP6_IPCL_ACTION_TABLE_FIELDS_SET_EGRESS_FILTER_REGISTERED_E, 
    SIP6_IPCL_ACTION_TABLE_FIELDS_BRIDGE_BYPASS_E, SIP6_IPCL_ACTION_TABLE_FIELDS_BYPASS_INGRESS_PIPE_E, 
    SIP6_IPCL_ACTION_TABLE_FIELDS_EN_NESTED_VLAN_E, SIP6_IPCL_ACTION_TABLE_FIELDS_SET_SST_ID_E, 
    SIP6_IPCL_ACTION_TABLE_FIELDS_SST_ID_E, SIP6_IPCL_ACTION_TABLE_FIELDS_USER_AC_ENABLE_E, 
    SIP6_IPCL_ACTION_TABLE_FIELDS_ACTIVATE_COUNTER_E, SIP6_IPCL_ACTION_TABLE_FIELDS_COUNTER_INDEX_E, 
    SIP6_IPCL_ACTION_TABLE_FIELDS_VLAN_PRECEDENCE_E, SIP6_IPCL_ACTION_TABLE_FIELDS_VLAN_COMMAND_E, 
    SIP6_IPCL_ACTION_TABLE_FIELDS_VID0_E, SIP6_IPCL_ACTION_TABLE_FIELDS_QOS_PROFILE_MARKING_ENABLE_E, 
    SIP6_IPCL_ACTION_TABLE_FIELDS_QOS_PRECEDENCE_E, SIP6_IPCL_ACTION_TABLE_FIELDS_QOS_PROFILE_E, 
    SIP6_IPCL_ACTION_TABLE_FIELDS_MODIFY_DSCP_E, SIP6_IPCL_ACTION_TABLE_FIELDS_MODIFY_UP_E, 
    SIP6_IPCL_ACTION_TABLE_FIELDS_VLAN1_CMD_E, SIP6_IPCL_ACTION_TABLE_FIELDS_UP1_CMD_E, SIP6_IPCL_ACTION_TABLE_FIELDS_VID1_E, 
    SIP6_IPCL_ACTION_TABLE_FIELDS_UP1_E, SIP6_IPCL_ACTION_TABLE_FIELDS_IPCL_RESERVED_EN_E, 
    SIP6_IPCL_ACTION_TABLE_FIELDS_IPCL_TO_TXQ_RESERVED_E, SIP6_IPCL_ACTION_TABLE_FIELDS_TIMESTAMP_EN_E, 
    SIP6_IPCL_ACTION_TABLE_FIELDS_OFFSET_INDEX_E, SIP6_IPCL_ACTION_TABLE_FIELDS_OAM_PROCESSING_EN_E, 
    SIP6_IPCL_ACTION_TABLE_FIELDS_OAM_PROFILE_E, SIP6_IPCL_ACTION_TABLE_FIELDS_FLOW_ID_E, 
    SIP6_IPCL_ACTION_TABLE_FIELDS_RESERVED_1_E, SIP6_IPCL_ACTION_TABLE_FIELDS_ASSIGN_SRC_EPORT_EN_E, 
    SIP6_IPCL_ACTION_TABLE_FIELDS_SRC_EPORT_E, SIP6_IPCL_ACTION_TABLE_FIELDS_LATENCY_PROFILE_E, 
    SIP6_IPCL_ACTION_TABLE_FIELDS_LATENCY_MONITORING_ENABLE_E, SIP6_IPCL_ACTION_TABLE_FIELDS_SKIP_FDB_SA_LOOKUP_EN_E, 
    SIP6_IPCL_ACTION_TABLE_FIELDS_TRIGGER_INTERRUPT_EN_E, SIP6_IPCL_ACTION_TABLE_FIELDS_RESERVED_3_BITS_E, 
    SIP6_IPCL_ACTION_TABLE_FIELDS_PCL_OVER_EXACT_MATCH_ENABLE_E, SIP6_IPCL_ACTION_TABLE_FIELDS___LAST_VALUE___E, 
    SIP6_10_IPCL_ACTION_TABLE_FIELDS_TAG0_DEI_CFI_VALUE_E = 69, SIP6_10_IPCL_ACTION_TABLE_FIELDS_TAG1_DEI_CFI_VALUE_E, 
    SIP6_10_IPCL_ACTION_TABLE_FIELDS_ASSIGN_TAG1_FROM_UDBS_E, SIP6_10_IPCL_ACTION_TABLE_FIELDS_IPFIX_ENABLE_E, 
    SIP6_10_IPCL_ACTION_TABLE_FIELDS_FLOW_TRACK_ENABLE_E, SIP6_10_IPCL_ACTION_TABLE_FIELDS_BYPASS_INGRESS_AND_EGRESS_FILTERING_E, 
    SIP6_10_IPCL_ACTION_TABLE_FIELDS___LAST_VALUE___E} SIP6_IPCL_ACTION_TABLE_FIELDS_ENT;

File ../cpss/mainPpDrv/h/cpss/dxCh/dxChxGen/cscd/cpssDxChCscd.h:
typedef struct {
    GT_U32 tc;
    CPSS_DP_LEVEL_ENT dp;
    CPSS_DXCH_PORT_PROFILE_ENT isStack;
    CPSS_DXCH_NET_DSA_CMD_ENT dsaTagCmd;
    CPSS_DXCH_PORT_PROFILE_ENT targetPortTcProfile;
    GT_BOOL packetIsMultiDestination;
} CPSS_DXCH_CSCD_QOS_TC_DP_REMAP_INDEX_STC;
typedef enum {CPSS_DXCH_CSCD_TRUNK_LINK_HASH_IS_INGR_PIPE_HASH_E, CPSS_DXCH_CSCD_TRUNK_LINK_HASH_IS_SRC_PORT_E, 
    CPSS_DXCH_CSCD_TRUNK_LINK_HASH_IS_DST_PORT_E} CPSS_DXCH_CSCD_TRUNK_LINK_HASH_ENT;

File ../cpss/mainPpDrv/h/cpss/dxCh/dxChxGen/diag/cpssDxChDiag.h:
typedef enum {CPSS_DXCH_DIAG_TEMPERATURE_SENSOR_0_E, CPSS_DXCH_DIAG_TEMPERATURE_SENSOR_1_E, CPSS_DXCH_DIAG_TEMPERATURE_SENSOR_2_E, 
    CPSS_DXCH_DIAG_TEMPERATURE_SENSOR_3_E, CPSS_DXCH_DIAG_TEMPERATURE_SENSOR_4_E, CPSS_DXCH_DIAG_TEMPERATURE_SENSOR_AVERAGE_E, 
    CPSS_DXCH_DIAG_TEMPERATURE_SENSOR_MAX_E} CPSS_DXCH_DIAG_TEMPERATURE_SENSOR_ENT;
typedef enum {CPSS_DXCH_DIAG_TRANSMIT_MODE_REGULAR_E, CPSS_DXCH_DIAG_TRANSMIT_MODE_PRBS_E, CPSS_DXCH_DIAG_TRANSMIT_MODE_ZEROS_E, 
    CPSS_DXCH_DIAG_TRANSMIT_MODE_ONES_E, CPSS_DXCH_DIAG_TRANSMIT_MODE_CYCLIC_E, CPSS_DXCH_DIAG_TRANSMIT_MODE_PRBS7_E, 
    CPSS_DXCH_DIAG_TRANSMIT_MODE_PRBS9_E, CPSS_DXCH_DIAG_TRANSMIT_MODE_PRBS15_E, CPSS_DXCH_DIAG_TRANSMIT_MODE_PRBS23_E, 
    CPSS_DXCH_DIAG_TRANSMIT_MODE_PRBS31_E, CPSS_DXCH_DIAG_TRANSMIT_MODE_1T_E, CPSS_DXCH_DIAG_TRANSMIT_MODE_2T_E, 
    CPSS_DXCH_DIAG_TRANSMIT_MODE_5T_E, CPSS_DXCH_DIAG_TRANSMIT_MODE_10T_E, CPSS_DXCH_DIAG_TRANSMIT_MODE_DFETraining, 
    CPSS_DXCH_DIAG_TRANSMIT_MODE_PRBS13_E, CPSS_DXCH_DIAG_TRANSMIT_MODE_MAX_E} CPSS_DXCH_DIAG_TRANSMIT_MODE_ENT;

File ../cpss/mainPpDrv/h/cpss/dxCh/dxChxGen/diag/cpssDxChDiagDataIntegrity.h:
typedef enum {CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_BM_CONTROL_ACCESS_TABLE_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_BM_LINKED_LIST_BUFFERS_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_BMA_FINAL_UDB_CLEAR_FIFO_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_BMA_MC_CLEAR_SHIFTER_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_BMA_MC_DIST_FIFO_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_BMA_MULTICAST_COUNTERS_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_BMA_UC_DIST_FIFO_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_CNC_COUNTERS_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_CPFC_PFC_IND_FIFO_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_CTU_DBM_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_CTU_DESC_UNUSED_FIFO_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_EPCL_CONF_TABLE_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_EPCL_DATA_FIFO_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_EPCL_EPLR_DESC_FIFO_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_EPCL_TCAM_DESC_FIFO_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_EPLR_BILLING_EGRESS_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_EPLR_IPFIX_AGING_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_EPLR_IPFIX_WRAPAROUND_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_EPLR_METERING_EGRESS_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_EPLR_POLICER_COUNTERS_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_EPLR_QOS_REMARKING_TABLE_EGRESS_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_EQ_CONF_LIMIT_TABLE_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_EQ_CPU_CODE_TABLE_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_EQ_QOS_TABLE_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_EQ_RATE_LIMIT_TABLE_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_EQ_STC_TABLE_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_EQ_TRUNK_TABLE_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_EQ_VPM_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_HA_MAC_SA_TABLE_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_HA_TSARP_TUNNEL_TABLE_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_HA_VLAN_TRANSLATION_TABLE_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_IP_NHE_TABLE_AGING_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_IP_NHE_TABLE_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_IP_STG2_DESC_RETURN_TWO_FIFO_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_IP_STG4_DESC_RETURN_TWO_FIFO_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_IP_UNUSED_DATA_FIFO_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_IP_VLAN_URPF_TABLE_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_L2I_PCR_REGISTERS_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_L2I_UNUSED_DATA_FIFO_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_L2I_UPDATE_FIFO_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_MG_CONFI_PROCESSOR_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_MG_GRD_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_MG_SDMA_DESCRIPTOR_FILE_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_MG_SDMA_REG_FILE_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_MG_SDMA_RX_FIFO_2_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_MG_SDMA_TX_FIFO_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_MG_SDMA_WRR_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_MLL_CONF_TABLE_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_MLL_PCL2MLL_UNUSED_FIFO_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_MLL_REPLICATIONS_IN_USE_FIFO_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_MLL_TABLE_FIFO_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_MPPM_DATA_BUFFER_MEMORY_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_MPPM_DATA_BUFFER_MEMORY_ECC_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_MT_MAC_TABLE_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_MT_RF_TOP_MAC_UPD_OUT_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_PCL_CONFIG_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_PCL_CRC_HASH_MASK_TABLE_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_PCL_LOOKUP_FIFO_0_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_PCL_LOOKUP_FIFO_1_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_PCL_LOOKUP_FIFO_2_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_PCL_UNUSED_DATA_FIFO_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_PLR_BILLING_INGRESS_PLR0_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_PLR_BILLING_INGRESS_PLR1_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_PLR_DESCRIPTOR_FIFO_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_PLR_IPFIX_AGING_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_PLR_IPFIX_WRAPAROUND_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_PLR_METERING_INGRESS_PLR0_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_PLR_METERING_INGRESS_PLR1_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_PLR_POLICER_COUNTERS_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_PLR_QOS_REMARKING_TABLE_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TCC_LOWER_ACTION_TABLE_LOWER_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TCC_LOWER_ECC_TABLE_DATA_LOWER_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TCC_LOWER_ECC_TABLE_MASK_LOWER_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TCC_LOWER_LOWER_ANSWER_FIFO_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TCC_UPPER_ACTION_TABLE_UPPER_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TCC_UPPER_ECC_TABLE_DATA_UPPER_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TCC_UPPER_UPPER_ANSWER_FIFO_CL0_1_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TCC_UPPER_UPPER_ANSWER_FIFO_CL2_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TTI_LOOKUP_FIFO_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TTI_PORT_PROTOCOL_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TTI_PORT_VLAN_QOS_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TTI_TXQ_E2E_FC_FIFO_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TTI_UDB_CFG_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TTI_UDB_PROFILE_ID_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TTI_UNUSED_DATA_FIFO_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TTI_VLAN_TRANSLATION_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXDMA_CPU_TX_FIFO_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXDMA_DATA_FROM_MPPM_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXDMA_HA_INFO_DESC_PREFETCH_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXDMA_MEM_CLEAR_FIFO_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXDMA_NEXT_LIST_BUFFERS_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXDMA_READ_BURST_STATE_FIFO_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXDMA_TX_FIFO_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXQ_DIST_BURST_FIFO_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXQ_DQ_STC_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXQ_DQ_TB_GIGA_PORT_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXQ_DQ_TB_GIGA_PRIO_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXQ_DQ_WRR_STATE_VARIABLES_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXQ_EGR_DESIGNATED_TBL_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXQ_EGR_MC_FIFO_0_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXQ_EGR_MC_FIFO_1_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXQ_EGR_MC_FIFO_3_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXQ_EGR_NON_TRUNK_MEMBER_TBL2_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXQ_EGR_NON_TRUNK_MEMBER_TBL_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXQ_EGR_SEC_TRG_TBL_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXQ_EGR_SST_TBL_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXQ_LL_FREE_BUFS_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXQ_LL_LINK_LIST_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXQ_LL_QHEAD_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXQ_LL_QTAIL_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXQ_Q_BUFFER_FIFO_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXQ_Q_DQ_Q_BUF_LIMIT_DP0_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXQ_Q_DQ_Q_DESC_LIMIT_DP0_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXQ_Q_EQ_Q_LIMIT_DP0_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXQ_Q_EQ_Q_LIMIT_DP12_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXQ_Q_PFC_IND_FIFO_PIPE_0_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXQ_Q_PFC_IND_FIFO_PIPE_1_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXQ_Q_PFC_IND_FIFO_PIPE_2_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXQ_Q_PFC_IND_FIFO_PIPE_3_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXQ_Q_PFC_IND_FIFO_PIPE_4_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXQ_Q_PFC_IND_FIFO_PIPE_5_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXQ_Q_PFC_IND_FIFO_PIPE_6_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXQ_Q_PFC_IND_FIFO_PIPE_7_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXQ_Q_PFC_SRC_PIPE_0_COUNTERS_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXQ_Q_PFC_SRC_PIPE_1_COUNTERS_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXQ_Q_PFC_SRC_PIPE_2_COUNTERS_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXQ_Q_PFC_SRC_PIPE_3_COUNTERS_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXQ_Q_PFC_SRC_PIPE_4_COUNTERS_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXQ_Q_PFC_SRC_PIPE_5_COUNTERS_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXQ_Q_PFC_SRC_PIPE_6_COUNTERS_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXQ_Q_PFC_SRC_PIPE_7_COUNTERS_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXQ_Q_PFC_XOFF_THRES_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXQ_Q_PFC_XON_THRES_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXQ_Q_SAMPLE_INTERVALS_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXQ_Q_SHARED_Q_LIMIT_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXQ_SHT_EGR_SPT_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXQ_SHT_EGR_VLAN_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXQ_SHT_ING_SPT_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXQ_SHT_ING_VLAN_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXQ_SHT_MAP_DEV_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXQ_SHT_PORT_ISO_L2_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXQ_SHT_PORT_ISO_L3_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXQ_SHT_VIDX_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_WRDMA_IBUF_BANK_RAM_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_ROUTER_TCAM_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_POLICY_TCAM_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_LION2_LAST_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_EQ_TRUNK_LTT_TABLE_E = 146, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_EQ_INGRESS_EPORT_TABLE_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_EQ_EPORT_LTT_TABLE_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_EQ_L2ECMP_TABLE_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_EQ_TX_PROTECTION_SWITCHING_TABLE_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_EQ_OAM_INDEX_TABLE_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_EQ_OAM_PROTECTION_LOC_TABLE_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_EQ_E2PHY_TABLE_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_MG_MT_MSG_FIFO_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_MG_MT_CNC_FIFO_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_MG_CONFI_PROC_GP_SRAM_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_MLL_LTT_CONF_TABLE_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_OAM_OAM_TABLE_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_OAM_RAM_SOURCE_INTERFACE_EXCEPTION_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_OAM_RAM_EXCESS_KEEPALIVE_EXCEPTION_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_OAM_RAM_SUMMARY_EXCEPTION_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_OAM_RAM_RDI_STATUS_CHANGE_EXCEPTION_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_OAM_RAM_TX_PERIOD_EXCEPTION_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_OAM_RAM_INVALID_KEEPALIVE_HASH_EXCEPTION_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_OAM_RAM_MEL_EXCEPTION_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_OAM_OPCODE_PROFILE_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_OAM_INTERRUPT_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_PLR_METERING_INGRESS_PLR2_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_PLR_BILLING_INGRESS_PLR2_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_SIP_PLR_HIER_TBL_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_SIP_PLR_E_ATTR_TBL_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXQ_DQ_TB_BC_UPD_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXQ_LL_LINK_LIST_PTR_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_BM_FREE_BUFFERS_FIFO_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_BM_IN_PROG_CT_CLEAR_FIFO_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_BM_NUMBER_OF_BUFFERS_TABLE_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_BM_VALID_TABLE_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_BM_RXDMA_NEXT_UPDATES_FIFO_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_BM_NEXT_TABLE_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_BMA_PORT_MAPPING_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXQ_PFC_IND_FIFO_PIPE_X_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXQ_QCN_BUFFER_FIFO_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXQ_QCN_SAMPLE_INTERVALS_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_EGF_EFT_SEC_TRG_TBL_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_EGF_EFT_LOCAL_MC_FIFO_0_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_EGF_EFT_LOCAL_MC_FIFO_1_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_EGF_EFT_LOCAL_MC_FIFO_2_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_EGF_EFT_LOCAL_MC_FIFO_3_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_EGF_EFT_LOCAL_UC_FIFO_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_EGF_QAG_CPU_CODE_MAPPER_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_EGF_QAG_TRG_PORT_MAPPER_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_EGF_QAG_EVLAN_DESC_ATTR_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_EGF_QAG_EPORT_DESC_ATTR_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_EGF_QAG_FWD_FROM_CPU_LB_MAPPER_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_EGF_SHT_DESIGNATED_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_EGF_SHT_MAP_DEV_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_EGF_SHT_EPORT_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_EGF_SHT_EGR_VLAN_MEMBERS_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_EGF_SHT_EGR_VLAN_ATTRIBUTE_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_EGF_SHT_EGR_VLAN_SPANNING_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_EGF_SHT_VIDX_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_EGF_SHT_NON_TRUNK_MEM_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_EGF_SHT_NON_TRUNK_MEM2_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_EGF_SHT_PORT_ISO_L2_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_EGF_SHT_PORT_ISO_L3_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_EGF_SHT_SST_TBL_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_EGF_SHT_EPORT_VLAN_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_EGF_SHT_EGR_SPT_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_EGF_SHT_VID_MAPPER_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TM_ETH_TXFIFO_HEADER_LL_FREE_BUFS_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TM_ETH_TXFIFO_HEADER_LL_LINK_LIST_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TM_ETH_TXFIFO_PAYLOAD_LL_FREE_BUFS_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TM_ETH_TXFIFO_PAYLOAD_LL_LINK_LIST_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TM_ETH_TXFIFO_IDDB_MEM_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TM_ETH_TXFIFO_IDDB_FREE_ID_FIFO_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TM_ETH_TXFIFO_DESCRIPTOR_MEM_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_ILKN_TXFIFO_DATA_MEM_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_ILKN_TXFIFO_DESCRIPTOR_MEM_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_ILKN_TXFIFO_ALIGNER_ANS_FIFO_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_MA_ALIGNED_DATA_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_MA_ALIGNED_CTRL_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TMSCHALVL_PERCONFMEM_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TMSCHALVL_TBMEM_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TMSCHALVL_TBNEGMEM_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TMSCHALVL_TBNEG2MEM_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TMSCHALVL_WFSMEM_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TMSCHALVL_NODEDWRR_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TMSCHALVL_NODESTATE_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TMSCHALVL_CLS0_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TMSCHALVL_CLS1_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TMSCHALVL_PRNTMAP_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TMSCHALVL_GRNDPRNT_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TMSCHALVL_LAST_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TMSCHALVL_FUNC_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TMSCHALVL_MYQ_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TMSCHBLVL_PERCONFMEM_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TMSCHBLVL_TBMEM_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TMSCHBLVL_TBNEGMEM_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TMSCHBLVL_TBNEG2MEM_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TMSCHBLVL_WFSMEM_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TMSCHBLVL_NODEDWRR_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TMSCHBLVL_NODESTATE_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TMSCHBLVL_CLS0_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TMSCHBLVL_PRNTMAP_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TMSCHBLVL_GRNDPRNT_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TMSCHBLVL_LAST_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TMSCHBLVL_FUNC_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TMSCHBLVL_MYQ_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TMSCHCMDPIPE_NODEDWRR_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TMSCHCMDPIPE_NODESTATE_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TMSCHCMDPIPE_CLS0_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TMSCHCMDPIPE_CLS1_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TMSCHCMDPIPE_PRNTMAP_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TMSCHCMDPIPE_GRNDPRNT_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TMSCHCMDPIPE_LAST_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TMSCHCMDPIPE_FUNC_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TMSCHPCCTRL_CPERCONFMEM_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TMSCHPCCTRL_CTBMEM_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TMSCHPCCTRL_CNODEDWRR_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TMSCHPCCTRL_CNODESTATE_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TMSCHPCCTRL_CPRNTMAP_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TMSCHPCCTRL_CLAST_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TMSCHPCCTRL_CFUNC_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TMSCHPCCTRL_CMYQ_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TMSCHPCCTRL_PPERCONFMEM_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TMSCHPCCTRL_PTBMEM_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TMSCHPCCTRL_PNODEDWRR_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TMSCHPCCTRL_PFUNC_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TMSCHPCCTRL_CTRLQ2AMAP_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TMSCHPCCTRL_CTRLGRNDPRNT_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TMSCHBNK_PERCONFMEM_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TMSCHBNK_TBMEM_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TMSCHBNK_TBNEGMEM_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TMSCHBNK_TBNEG2MEM_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TMSCHBNK_WFSMEM_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TM_BAP_CHR_WR_DATA_BURST_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TM_BAP_CHR_WR_CTRL_DATA_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TM_BAP_CHR_WR_CTRL_ADDR_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TM_BAP_CHR_RD_CTRL_ADDR_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TM_BAP_CHR_RD_DATA_PARAM_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TM_BAP_CHR_LL_PTR_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TM_BAP_CHR_LL_BAP_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TM_BAP_CHR_LL_ATTR_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TM_BAP_CHR_LL_BVAL_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TM_BAP_CHR_SERIAL_FIFO_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TMIG_L1_OVERHEAD_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TM_QMR_PAGE_PAGE_ENQ_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TM_QMR_PAGE_PAGE_DEQ_CACHE_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TM_QMR_PAGE_PAGE_DEQ_CURR_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TM_QMR_PAGE_PAGE_DEQ_NEXT_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TM_QMR_PAGE_FREE_RD_HEAD_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TM_QMR_PAGE_FREE_WR_TAIL_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TM_QMR_PAGE_FREE_WR_FIFO_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TM_QMR_PAGE_PKG_FREE_WR_TAIL_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TM_QMR_PAGE_PKG_FREE_WR_FIFO_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TM_QMR_PKTPKG_PKG_BOTH_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TM_QMR_PKTPKG_PKG_TAIL_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TM_QMR_PKTPKG_PKG_HEAD_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TM_QMR_PKTPKG_PAYLOAD_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TM_QMR_PKTPKG_PKT_ENQ_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TM_QMR_PKTPKG_PKT_ENQ_FIFO_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TM_QMR_PKTPKG_PKT_ENQ_MSG_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TM_QMR_PKTPKG_FREE_RD_HEAD_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TM_QMR_PKTPKG_SYNC_DATA_FIFO_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TMDRP_QCOS_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TMDRP_QPROFPNTR_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TMDRP_QAQL_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TMDRP_QDP_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TMDRP_QPROF_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TMDRP_QCURVE_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TMDRP_APROFPNTR_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TMDRP_AAQL_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TMDRP_ADP_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TMDRP_APROF_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TMDRP_ACURVE_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TMDRP_BPROFPNTR_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TMDRP_BAQL_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TMDRP_BDP_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TMDRP_BPROF_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TMDRP_CPROFPNTR_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TMDRP_CAQL_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TMDRP_CDP_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TMDRP_CPROF_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TMDRP_PAQL_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TMDRP_PAQLCOS_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TMDRP_PDP_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TMDRP_PGDP_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TMDRP_PPROF_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TMMSG_QNODE_DP_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TMMSG_QNODE_STATE_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TMMSG_QCLS_0_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TMMSG_QCLS_1_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TMMSG_PNODE_DP_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TMRCB_PORT_MEM_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TMRCB_FIFO_MEM_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TMRCB_CACHE_MEM_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TMEG_AGING_PROFILES_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TMEG_TMPORT2DMA_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TMRCB_TX_SYNC_MEM_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TMFCU_ETH_DMA_2TM_PORT_MAPPING_TABLE_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TMFCU_ILK_DMA_2TM_PORT_MAPPING_TABLE_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TMFCU_TCPORT2CNODE_MAPPING_TABLE_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TMFCU_INGRESS_TIMERS_TABLE_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TMFCU_PORT_TIMERS_CONF_TABLE_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXFIFO_HEADER_LL_FREE_BUFS_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXFIFO_HEADER_LL_LINK_LIST_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXFIFO_PAYLOAD_LL_FREE_BUFS_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXFIFO_PAYLOAD_LL_LINK_LIST_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXFIFO_PAYLOAD_IDDB_MEM_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXFIFO_PAYLOAD_IDDB_FREE_ID_FIFO_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXFIFO_HEADER_IDDB_MEM_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXFIFO_HEADER_IDDB_FREE_ID_FIFO_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXFIFO_CT_BC_IDDB_MEM_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXFIFO_CT_BC_IDDB_FREE_ID_FIFO_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXFIFO_DESCRIPTOR_MEM_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXDMA_CLEAR_FIFO_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXDMA_DESC_ID_FIFO_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXDMA_HA_DESC_IDDB_FREE_ID_FIFO_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXDMA_HA_DESC_IDDB_MEM_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXDMA_HEADER_REORDER_FIFO_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXDMA_PAYLOAD_REORDER_FIFO_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXDMA_INTERNAL_DESC_IDDB_FREE_ID_FIFO_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXDMA_INTERNAL_DESC_IDDB_MEM_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXDMA_NEXT_BC_FIFO_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXDMA_CT_START_FIFO_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXDMA_PREF_MEM_ID_FIFO_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXDMA_NEXT_CT_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXDMA_PAYLOAD_REORDER_MEM_IDDB_MEM_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXDMA_HEADER_REORDER_MEM_IDDB_MEM_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_MPPM_BANK_RAM_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_MPPM_RX_IDDB_MEM_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_MPPM_TXDMA_RD_BURST_FIFO_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_PEX2_RXDATA_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_PEX2_RXHDR_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_XOR_XE_RAM128X72BE8_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_RUNIT_NAND_RAM16X74_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_RUNIT_NAND_RAM16X66_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_NF_NFU_RAM272X65_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_G_RAM16X65_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_G_RAM136X24BE5_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_G_RAM768X68BE16_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_G_RAM64X36BE8_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_G_RAM64X73_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_G_RAM80X65_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_G_SRAM2P1280X70_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_ILKN_RX_SYNC_FIFO_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_PR_EOP_FIFO_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_PR_DATA_MEMORY_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_RXDMA_IBUF_BANK_RAM_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_RXDMA_IBUF_DESC_FIFO_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_RXDMA_IBUF_HDR_FIFO_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_EPCL_CFG_TABLE_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_EPCL_UDB_SELECT_TABLE_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_EPCL_LOOKUP_LAT_FIFO_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_ERMRK_PTP_TIME_STAMP_TABLE_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_ERMRK_PTP_LOCAL_ACTION_TABLE_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_ERMRK_PTP_TARGET_PORT_TABLE_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_ERMRK_PTP_SOURCE_PORT_TABLE_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_ERMRK_QOS_MAP_TABLE_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_ERMRK_MODIFY_LAT_FIFO_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_ERMRK_PTP_INGRESS_TIMESTAMP_QUEUE_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_ERMRK_PTP_EGRESS_TIMESTAMP_QUEUE_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_HA_VLAN_MAC_SA_TABLE_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_HA_EVLAN_TABLE_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_HA_EPORT1_TABLE_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_HA_EPORT2_TABLE_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_HA_PHY1_PORT_TABLE_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_HA_PHY2_PORT_TABLE_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_HA_PTP_DOMAIN_TABLE_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_HA_GLOBAL_MAC_SA_TABLE_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_HA_GENERIC_TS_PROFILE_TABLE_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_HA_EPCL_UDB_CFG_TABLE_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_HA_QOS_TO_EXP_TABLE_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TMDROP_QUE_PROFILE_ID_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TMDROP_DESC_FIFO_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TMDROP_DROP_MASK_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TMQMAP_QUEUE_SELECTOR_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TMQMAP_TRG_DEV2INDEX_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TMQMAP_ENABLE_POLICY_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TCAM_PARITY_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TCAM_ACTION_1P_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TTI_PHY_PORT_ATTRIBUTES_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TTI_DEFAULT_EPORT_ATTRIBUTES_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TTI_EPORT_ATTRIBUTES_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TTI_PCL_UDB_CFG_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TTI_TTI_UDB_CFG_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TTI_DSCP2DSCP_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TTI_DSCP2QOS_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TTI_UP_CFI2QOS_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TTI_PTP_PKT_CMD_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_MT_IN_NA_FIFO_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_MT_OUT_UPDATE_FIFO_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_SMT_MAC_TABLE_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_L2I_PORT_CONFIG_REG_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_L2I_EPORT_TABLE_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_L2I_EPORT_LEARN_PRIO_TABLE_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_L2I_VLAN_TABLE_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_L2I_PORT_MEMBER_TABLE_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_L2I_SSG_IDX_TABLE_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_L2I_SPAN_STATE_TABLE_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_L2I_TRUNK_TABLE_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_L2I_RATE_LIMIT_TABLE_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_L2I_STAGE2_LATENCY_FIFO_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_L2I_STAGE2_REC_ANS_FIFO_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_PCL_LOOKUP_FIFO_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_PCL_UDB_SELECTION_TABLE_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_IPVX_EPORT_TABLE_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_IPVX_ACCESS_MATRIX_TABLE_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_IPVX_EVLAN_TABLE_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_IPVX_NHE_AGING_TABLE_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_IPVX_NHE_TABLE_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_IPVX_QOS_PROFILE_OFFESTS_TABLE_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_IPVX_STG5_DESC_FIFO_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_IPVX_STG5_FDB_RETURN_FIFO_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_IPVX_STG7_DESC_FIFO_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_LPM_ECMP_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_LPM_FCOE_VRF_ID_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_LPM_IPV4_VRF_ID_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_LPM_IPV6_VRF_ID_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_LPM_MEM_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_DCACHE_L0_DPARITY_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_DCACHE_L0_DATA_BANK_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_DCACHE_L0_TAG_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_DCACHE_L1_STATE_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_DCACHE_L1_DATA_BANK_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_DCACHE_L1_DPARITY_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_DCACHE_L1_TAG_WAY_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_DCACHE_L1_ATTR_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_ICACHE_L1_DATA_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_ICACHE_L0_DATA_BANK_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_ICACHE_L0_TAG_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_ICACHE_L1_TAG_WAY_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_IF_ID_IS_BPM_BANK_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_MMU_TLB_DATA_WAY_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_MMU_TLB_TAG_WAY_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_CORESIGHT_CS_RAM_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_CFU_SF_RAM_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_CIB_WR_RAM_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_L2_DATA_RAM_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_L2_ECC_RAM_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_L2_PLRU_RAM_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_L2_TDV_RAM_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_D_RAM256X96BE11_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_D_RAM32X74_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_D_RAM32X82_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_MG_MGCAM_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_CPFC_IND_FIFO_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_RXDMA_COMMON_BUFFERS_FIFO_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_BOBCAT2_LAST_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_EPLR_METERING_CONF_EGRESS_E = 489, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_EPLR_METERING_SIGN_TBL_EGRESS_EVEN_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_EPLR_METERING_SIGN_TBL_EGRESS_ODD_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_DUAL_TXDMA_ARB_HDR_OUT_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_PLR_METERING_CONF_INGRESS_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_PLR_METERING_SIGN_TBL_INGRESS_EVEN_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_PLR_METERING_SIGN_TBL_INGRESS_ODD_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_D_RAM512X96BE11_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_D_RAM64X74_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_D_RAM64X68BE33_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_D_RAM32X68BE16_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_POE_ITCM_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_POE_DTCM_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_USB_TX_RAM_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_USB_RX_RAM_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_IHB_TX_MEM_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_IHB_RX_MEM_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_CIP_AMB_RAM128X74_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_CIP_AMB_RAM32X69_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_CIP_AMB_RAM32X73_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_DDU_FIFO_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_RXDMA_IBUF_HDR_IDDB_MEM_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_RXDMA_IBUF_DESC_RAM_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_RXDMA_IBUF_HDR_IDDB_FREE_ID_FIFO_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_CIP_AMB_RAM_WR_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_CG_CG_RX_FIFO_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_CG_CG_TX_FIFO_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_CG_DESKEW_MEM_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_CG_DP_DELAY_MEM_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_CG_RS_FEC_MEM_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_CG_RX_PREAMBLE_MEM_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_CG_RX_SYNC_FIFO_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_CG_TX_PREAMBLE_MEM_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_CG_TX_SYNC_FIFO_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_DIP_DP_IA_OS_BURST_FIFO_RAM_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_EGF_QAG_EVIDX_ACTIVITY_STATUS_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_EGF_QAG_PORT_ENQ_ATTRIBUTES_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_EGF_QAG_PORT_SOURCE_ATTRIBUTES_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_EGF_QAG_PORT_TARGET_ATTRIBUTES_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_EGF_QAG_TC_DP_MAPPER_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_EGF_QAG_VOQ_MAPPER_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_HA_HEADER_LAT_FIFO_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_IPLR_QOS_REMARKING_TABLE_INGRESS_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_IPVX_STG13_DESC_FIFO_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_LPM_MEM_BASIC_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_PEX2_TXDATA_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_PLR_COUNTING_ENGINE_LATENCY_FIFO_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_PLR_COUNTING_TBL_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_PLR_METERING_CONF_TBL_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_PLR_METERING_SIGN_TBL_EVEN_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_PLR_METERING_SIGN_TBL_ODD_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_PLR_METERING_TB_TBL_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TCAM_ACTION_2P_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TTI_PHY_PORT_ATTRIBUTES_2_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXDMA_BC_CT_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXDMA_BC_FIFO_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXDMA_INPROG_BC_FIFO_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXDMA_INPROG_CT_START_FIFO_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXDMA_INPROG_NEXT_BC_FIFO_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXDMA_INPROG_VALID_BC_FIFO_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXDMA_VALID_BC_CT_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXDMA_VALID_BC_FIFO_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXQ_BMX_DATA_BASE_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXQ_BMX_FREE_ENTRY_FIFO_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXQ_DQ_TTI_PORT_MAP_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXQ_LL_QHEAD0_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXQ_LL_QHEAD1_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXQ_LL_QHEAD2_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXQ_LL_QHEAD3_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXQ_LL_QLAST0_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXQ_LL_QLAST1_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXQ_LL_QLAST2_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXQ_LL_QLAST3_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXQ_Q_HIGH_THRESHOLD_CROSS_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXQ_Q_LOW_THRESHOLD_CROSS_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_BMA_MC_COUNTERS_FLOOR_BANK_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_BOBCAT3_LAST_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_IPVX_ECMP_QOS_INDIRECT_TABLE_E = 565, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXDMA_PAYLOAD_REORDER_MEM_IDDB_FREE_ID_FIFO_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXDMA_HEADER_REORDER_MEM_IDDB_FREE_ID_FIFO_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXQ_LL_QHEAD4_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXQ_LL_QHEAD5_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXQ_LL_QHEAD6_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXQ_LL_QLAST4_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXQ_LL_QLAST5_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXQ_LL_QLAST6_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_MUNIT_MUNIT_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXQ_Q_QUEUE_TXQ_BS_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXQ_Q_PORT_TXQ_BS_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TTI_PORT2QUEUE_TRANSLATION_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TTI_VRF_ID_EVLAN_MAPPING_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_EPCL_LAT_MON_EN_TABLE_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_EPCL_TRG_PHY_PORT_MAPPING_TABLE_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_EPCL_SRC_PHY_PORT_MAPPING_TABLE_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_PLR_QOS_ATTRIBUTES_TBL_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_PREQ_PROFILES_TABLE_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_PREQ_QUEUE_CONFIGURATIONS_TABLE_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_PREQ_QUEUE_PORT_MAPPING_TABLE_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_PREQ_QUERY_FIFO_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_EQ_PORT_MIRROR_INDEX_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_EQ_PATH_UTILIZATION_TABLE_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_PLR_PORT_ATTRIBUTES_TBL_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_DP_RX_PB_TAIL_ID_MEM_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_DP_RX_FINAL_TAIL_BC_MEM_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_DP_RX_REPLY_TAIL_BC_MEM_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_DP_RX_REPLY_TAIL_PB_ID_MEM_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_DP_RX_PCM_MEM_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_DP_RX_PACM_MEM_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_DP_RX_PACKET_HEAD_FIFO_MEM_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_DP_RX_ENQUE_REQUESTS_DESCRIPTOR_FIFO_MEM_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_DP_RX_HEAD_PACKET_COUNT_DATA_FIFO_MEM_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_DP_RX_RX_LOCAL_IDS_FIFO_MEM_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_IA_OS_MEM_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_IA_LS_MEM_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_HBU_HEADER_BUFFER_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_HBU_FHF_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_HBU_CMT_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_SIP_PPA_PPN_SCRATCHPAD_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_SIP_PPA_IMEM_BANK_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_SIP_PPA_SHARED_DMEM_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_SIP_PHA_PPA_THREADS_CONF1_TABLE_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_SIP_PHA_PPA_THREADS_CONF2_TABLE_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_SIP_PHA_SOURCE_PORT_METADATA_TABLE_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_SIP_PHA_BYPASS_BUFFER_HEADER_BANK_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_SIP_PHA_BYPASS_BUFFER_DESC_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_SIP_PHA_TARGET_PORT_METADATA_TABLE_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_IPVX_ECMP_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_EM_IN_NA_FIFO_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_EM_OUT_UPDATE_FIFO_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_SHM_TYPE2_SBM_DATA_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_SHM_TYPE2_SBM_XOR_DATA_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXD_EMPTY_TAGS_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXF_WORD_BUFFER_MEM_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_QNM_PB_NPM_MC_REFS_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_QNM_PB_NPM_MC_LIST_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_QNM_PB_NPM_MC_UNIT_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_QNM_PB_SMB_MC_PM_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_QNM_PB_SMB_MC_REFCNT_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_QNM_PB_SMB_MC_LIST_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_PDX_QGRPMAP_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_PDX_BF_DESC_BANK_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_PFCC_PFC_CONF_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_SHM_TYPE1_SBM_DATA_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_SHM_LPM_AGING_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_PDS_DATA_STORAGE_0_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_PDS_DATA_STORAGE_1_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_PDS_FREE_NEXT_FIFO_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_PDS_FRAG_TAIL_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_PDS_FRAG_HEAD_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_PDS_FREE_PID_FIFO_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_PDS_CNTRS_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_PDS_NEXT_TBL_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_PDS_PID_TBL_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_PDS_HEAD_HEAD_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_PDS_HEAD_TAIL_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_PDS_TAIL_TAIL_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_PDS_TAIL_HEAD_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_SDQ_SEL_LIST_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_SDQ_QTABLE_CFG_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_SDQ_CREDIT_BALANCE_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_CNM_SRAM_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_AAC_TABLE_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_PCIE4_EP_X2_U_RAM_1P_RBUF_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_MTIP_PCS_CD_MFD_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_PCIE4_EP_X2_U0_RAM_RADM_QBUFFER_HDR_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_PCIE4_EP_X2_U_IB_MCPL_SB_RAM_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_PCIE4_EP_X2_U3_RAM_RADM_QBUFFER_DATA_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_PCIE4_EP_X2_U_OB_CCMP_DATA_RAM_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_QFC_QL_CNTRS_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_QFC_PFC_CNTRS_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_QFC_PFC_MIRR_CNTRS_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_MTIP_MAC_STAT_TX_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_MTIP_MAC_STAT_RX_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_MTIP_MAC_STAT_CAPTURE_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_LMU_LMUCFG_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_LMU_LMUSTAT_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_FALCON_LAST_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_VLT_INGRESS_ECID_TABLE_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_TXQ_TXQ_COUNTERS_LIMIT_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_EQ_VLAN_MEMBER_TABLE_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_EQ_VLAN_EGRESS_MAP_TABLE_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_MLL_STG0_TABLE_PTR_MAP_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_BM_MDB_CLEAR_INC_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_LMS_COUNTERS_RFT_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_POLICY_TCAM_1_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_EPI_USX_MAC_U_TSTM_E = 664, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_EPI_USX_MAC_U_RSTM_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_EPI_USX_PCS_U_F91M_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_EPI_100_MAC_U_TSTM_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_EPI_100_MAC_U_RSTM_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_EPI_100_PCS_U_RSFEC_FRM_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_MTIP_CPU_PCS_F91M_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_SDW_PRAM16K_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_DDM_EM_DATA_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_EM_AL_EM_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_DDM_LPM_LAST_DATA_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_PPU_ACTION_TABLE_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_PREQ_TARGET_PHYSICAL_PORT_TABLE_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_IP164_ING_IBUF_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_IP164_ING_GEN_HKEY_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_IP164_ING_GHASH_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_IP164_ING_STAT_SA_RAM0_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_IP164_ING_STAT_SA_RAM1_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_IP164_ING_STAT_SECY_RAM0_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_IP164_ING_STAT_SECY_RAM1_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_IP164_ING_STAT_IFC0_RAM1_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_IP164_ING_STAT_IFC1_RAM1_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_IP164_ING_SA_REC_RAM_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_IP164_EGR_IBUF_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_IP164_EGR_GEN_HKEY_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_IP164_EGR_GHASH_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_IP164_EGR_STAT_SA_RAM0_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_IP164_EGR_STAT_SA_RAM1_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_IP164_EGR_STAT_SECY_RAM0_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_IP164_EGR_STAT_IFC0_RAM0_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_IP164_EGR_STAT_IFC0_RAM1_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_IP164_EGR_STAT_IFC1_RAM1_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_IP164_EGR_SA_REC_RAM_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_IP163_EGR_STAT_TCAM_RAM_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_IP163_ING_STAT_TCAM_RAM_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_PCA_SFF_RAM_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_PLR_IPFIX_1ST_N_PACKETS_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_G_RAM_RX_FIFO_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_G_RAM_TX_FIFO_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_SDHC31_DP512X64_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_XOR_DP64X128_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_XOR_DP40X128_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_CCI_SNOOP_FILTER_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_CPE_DATA_WRITE_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_GIC_GICD_LPI_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_GIC_ITS_V_CACHE_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_DDRPHY_DCCM_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_DDRPHY_ICCM_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_CORE_CLUSTER_ANANKE_BTAC_STAGE_0_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_CORE_CLUSTER_ANANKE_BTAC_STAGE_1_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_CORE_CLUSTER_ANANKE_L1D_DATA_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_CORE_CLUSTER_ANANKE_L1I_DATA_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_CORE_CLUSTER_ANANKE_TLB_DATA_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_CORE_CLUSTER_ANANKE_TLB_TAG_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_DSU_CORINTH_SCU_SF_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_DSU_CORINTH_L3_DATA_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_DSU_CORINTH_L3D_TAG_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_DSU_CORINTH_L3_VICTIM_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_CORESIGHT_CSTB_E, CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_PCIE_GEN3_EP_X1_U_RAM_1P_RBUF_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_PCIE_GEN3_EP_X1_U0_RAM_RADM_QBUFFER_HDR_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_PCIE_GEN3_EP_X1_U3_RAM_RADM_QBUFFER_DATA_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_PCIE_GEN3_EP_X1_U_IB_MCPL_SB_RAM_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_PCIE_GEN3_EP_X1_U_OB_CCMP_DATA_RAM_E, 
    CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_LAST_E} CPSS_DXCH_DIAG_DATA_INTEGRITY_MEM_TYPE_ENT;

File ../cpss/mainPpDrv/h/cpss/dxCh/dxChxGen/exactMatch/cpssDxChExactMatch.h:
CPSS_DXCH_EXACT_MATCH_ACTION_UNT;
CPSS_DXCH_EXACT_MATCH_EXPANDED_ACTION_ORIGIN_UNT;
CPSS_DXCH_EXACT_MATCH_EXPANDED_PCL_ACTION_ORIGIN_STC;
CPSS_DXCH_EXACT_MATCH_EXPANDED_TTI_ACTION_ORIGIN_STC;
typedef enum {CPSS_DXCH_EXACT_MATCH_ACTION_TTI_E, CPSS_DXCH_EXACT_MATCH_ACTION_PCL_E, CPSS_DXCH_EXACT_MATCH_ACTION_EPCL_E, 
    CPSS_DXCH_EXACT_MATCH_ACTION_LAST_E} CPSS_DXCH_EXACT_MATCH_ACTION_TYPE_ENT;
typedef CPSS_DXCH_EXACT_MATCH_ACTION_UNT CPSS_DXCH_EXACT_MATCH_ACTION_UNT;
typedef CPSS_DXCH_EXACT_MATCH_EXPANDED_ACTION_ORIGIN_UNT CPSS_DXCH_EXACT_MATCH_EXPANDED_ACTION_ORIGIN_UNT;
typedef CPSS_DXCH_EXACT_MATCH_EXPANDED_PCL_ACTION_ORIGIN_STC CPSS_DXCH_EXACT_MATCH_EXPANDED_PCL_ACTION_ORIGIN_STC;
typedef CPSS_DXCH_EXACT_MATCH_EXPANDED_TTI_ACTION_ORIGIN_STC CPSS_DXCH_EXACT_MATCH_EXPANDED_TTI_ACTION_ORIGIN_STC;

File ../cpss/mainPpDrv/h/cpss/dxCh/dxChxGen/exactMatch/private/prvCpssDxChExactMatch.h:
PRV_CPSS_DXCH_EXACT_MATCH_DB_INFO_PER_PORT_GROUP_STC;
PRV_CPSS_DXCH_EXACT_MATCH_DB_INFO_STC;
PRV_CPSS_DXCH_EXACT_MATCH_EXPANDER_INFO_STC;
typedef PRV_CPSS_DXCH_EXACT_MATCH_DB_INFO_PER_PORT_GROUP_STC PRV_CPSS_DXCH_EXACT_MATCH_DB_INFO_PER_PORT_GROUP_STC;
typedef PRV_CPSS_DXCH_EXACT_MATCH_DB_INFO_STC PRV_CPSS_DXCH_EXACT_MATCH_DB_INFO_STC;
typedef PRV_CPSS_DXCH_EXACT_MATCH_EXPANDER_INFO_STC PRV_CPSS_DXCH_EXACT_MATCH_EXPANDER_INFO_STC;

File ../cpss/mainPpDrv/h/cpss/dxCh/dxChxGen/ip/cpssDxChIpTypes.h:
CPSS_DXCH_IP_COUNTER_SET_INTERFACE_CFG_STCT;
CPSS_DXCH_IP_COUNTER_SET_STCT;
CPSS_DXCH_IP_ECMP_ENTRY_STCT;
CPSS_DXCH_IP_LTT_ENTRY_STCT;
CPSS_DXCH_IP_MC_ROUTE_ENTRY_STCT;
CPSS_DXCH_IP_MLL_PAIR_STCT;
CPSS_DXCH_IP_MLL_STCT;
CPSS_DXCH_IP_PORT_TRUNK_STC;
CPSS_DXCH_IP_UC_ECMP_RPF_FORMAT_STCT;
CPSS_DXCH_IP_UC_ROUTE_ENTRY_FORMAT_STCT;
CPSS_DXCH_IP_UC_ROUTE_ENTRY_STCT;
CPSS_DXCH_IP_UC_ROUTE_ENTRY_UNT;
typedef enum {CPSS_DXCH_IP_CNT_SET_INTERFACE_MODE_E, CPSS_DXCH_IP_CNT_SET_ROUTE_ENTRY_MODE_E} CPSS_DXCH_IP_CNT_SET_MODE_ENT;
typedef CPSS_DXCH_IP_COUNTER_SET_INTERFACE_CFG_STCT CPSS_DXCH_IP_COUNTER_SET_INTERFACE_CFG_STC;
typedef CPSS_DXCH_IP_COUNTER_SET_STCT CPSS_DXCH_IP_COUNTER_SET_STC;
typedef enum {CPSS_DXCH_IP_CPU_CODE_IDX_0_E, CPSS_DXCH_IP_CPU_CODE_IDX_1_E, CPSS_DXCH_IP_CPU_CODE_IDX_2_E, 
    CPSS_DXCH_IP_CPU_CODE_IDX_3_E} CPSS_DXCH_IP_CPU_CODE_INDEX_ENT;
typedef CPSS_DXCH_IP_ECMP_ENTRY_STCT CPSS_DXCH_IP_ECMP_ENTRY_STC;
struct CPSS_DXCH_IP_ECMP_ENTRY_STCT;
typedef enum {CPSS_DXCH_IP_EXCP_UC_HDR_ERROR_E, CPSS_DXCH_IP_EXCP_MC_HDR_ERROR_E, CPSS_DXCH_IP_EXCP_UC_ILLEGAL_ADDRESS_E, 
    CPSS_DXCH_IP_EXCP_MC_ILLEGAL_ADDRESS_E, CPSS_DXCH_IP_EXCP_UC_DIP_DA_MISMATCH_E, CPSS_DXCH_IP_EXCP_MC_DIP_DA_MISMATCH_E, 
    CPSS_DXCH_IP_EXCP_UC_MTU_EXCEEDED_E, CPSS_DXCH_IP_EXCP_MC_MTU_EXCEEDED_E, CPSS_DXCH_IP_EXCP_UC_ALL_ZERO_SIP_E, 
    CPSS_DXCH_IP_EXCP_MC_ALL_ZERO_SIP_E, CPSS_DXCH_IP_EXCP_UC_OPTION_HOP_BY_HOP_E, CPSS_DXCH_IP_EXCP_MC_OPTION_HOP_BY_HOP_E, 
    CPSS_DXCH_IP_EXCP_UC_NON_HOP_BY_HOP_EXT_E, CPSS_DXCH_IP_EXCP_MC_NON_HOP_BY_HOP_EXT_E, CPSS_DXCH_IP_EXCP_UC_TTL_EXCEED_E, 
    CPSS_DXCH_IP_EXCP_UC_RPF_FAIL_E, CPSS_DXCH_IP_EXCP_UC_SIP_SA_FAIL_E, CPSS_DXCH_IP_EXCP_UC_MTU_EXCEEDED_FOR_NON_DF_E, 
    CPSS_DXCH_IP_EXCP_MC_MTU_EXCEEDED_FOR_NON_DF_E, CPSS_DXCH_IP_EXCP_UC_MTU_EXCEEDED_FOR_DF_E, 
    CPSS_DXCH_IP_EXCP_MC_MTU_EXCEEDED_FOR_DF_E, CPSS_DXCH_IP_EXCEPTION_TYPE_LAST_E} CPSS_DXCH_IP_EXCEPTION_TYPE_ENT;
typedef enum {CPSS_DXCH_IP_HEADER_ERROR_CHECKSUM_ENT, CPSS_DXCH_IP_HEADER_ERROR_VERSION_ENT, CPSS_DXCH_IP_HEADER_ERROR_LENGTH_ENT, 
    CPSS_DXCH_IP_HEADER_ERROR_SIP_DIP_ENT} CPSS_DXCH_IP_HEADER_ERROR_ENT;
typedef CPSS_DXCH_IP_LTT_ENTRY_STCT CPSS_DXCH_IP_LTT_ENTRY_STC;
struct CPSS_DXCH_IP_LTT_ENTRY_STCT;
typedef CPSS_DXCH_IP_MC_ROUTE_ENTRY_STCT CPSS_DXCH_IP_MC_ROUTE_ENTRY_STC;
struct CPSS_DXCH_IP_MC_ROUTE_ENTRY_STCT;
typedef CPSS_DXCH_IP_MLL_PAIR_STCT CPSS_DXCH_IP_MLL_PAIR_STC;
struct CPSS_DXCH_IP_MLL_PAIR_STCT;
typedef CPSS_DXCH_IP_MLL_STCT CPSS_DXCH_IP_MLL_STC;
struct CPSS_DXCH_IP_MLL_STCT;
typedef enum {CPSS_DXCH_IP_MULTICAST_INGRESS_VLAN_CHECK_RPF_CHECK_E, 
    CPSS_DXCH_IP_MULTICAST_INGRESS_VLAN_CHECK_BIDIRECTIONAL_TREE_CHECK_E} CPSS_DXCH_IP_MULTICAST_INGRESS_VLAN_CHECK_ENT;
typedef enum {CPSS_DXCH_IP_MULTICAST_ROUTE_ENTRY_RPF_FAIL_COMMAND_MODE_E, 
    CPSS_DXCH_IP_MULTICAST_MLL_RPF_FAIL_COMMAND_MODE_E} CPSS_DXCH_IP_MULTICAST_RPF_FAIL_COMMAND_MODE_ENT;
typedef enum {CPSS_DXCH_IP_DISREGARD_PORT_TRUNK_CNT_MODE_E, CPSS_DXCH_IP_PORT_CNT_MODE_E, 
    CPSS_DXCH_IP_TRUNK_CNT_MODE_E} CPSS_DXCH_IP_PORT_TRUNK_CNT_MODE_ENT;
typedef CPSS_DXCH_IP_PORT_TRUNK_STC CPSS_DXCH_IP_PORT_TRUNK_STC;
typedef enum {CPSS_DXCH_IP_ROUTE_ENTRY_METHOD_ECMP_E, CPSS_DXCH_IP_ROUTE_ENTRY_METHOD_QOS_E, 
    CPSS_DXCH_IP_ROUTE_ENTRY_METHOD_REGULAR_E, CPSS_DXCH_IP_ROUTE_ENTRY_METHOD_MULTIPATH_E} CPSS_DXCH_IP_ROUTE_ENTRY_METHOD_ENT;
typedef CPSS_DXCH_IP_UC_ECMP_RPF_FORMAT_STCT CPSS_DXCH_IP_UC_ECMP_RPF_FORMAT_STC;
struct CPSS_DXCH_IP_UC_ECMP_RPF_FORMAT_STCT;
typedef CPSS_DXCH_IP_UC_ROUTE_ENTRY_FORMAT_STCT CPSS_DXCH_IP_UC_ROUTE_ENTRY_FORMAT_STC;
struct CPSS_DXCH_IP_UC_ROUTE_ENTRY_FORMAT_STCT;
typedef CPSS_DXCH_IP_UC_ROUTE_ENTRY_STCT CPSS_DXCH_IP_UC_ROUTE_ENTRY_STC;
struct CPSS_DXCH_IP_UC_ROUTE_ENTRY_STCT;
typedef enum {CPSS_DXCH_IP_UC_ROUTE_ENTRY_E, CPSS_DXCH_IP_UC_ECMP_RPF_E} CPSS_DXCH_IP_UC_ROUTE_ENTRY_TYPE_ENT;
typedef CPSS_DXCH_IP_UC_ROUTE_ENTRY_UNT CPSS_DXCH_IP_UC_ROUTE_ENTRY_UNT;
typedef enum {CPSS_DXCH_IP_DISREGARD_VLAN_CNT_MODE_E, CPSS_DXCH_IP_USE_VLAN_CNT_MODE_E} CPSS_DXCH_IP_VLAN_CNT_MODE_ENT;

File ../cpss/mainPpDrv/h/cpss/dxCh/dxChxGen/ipLpmEngine/cpssDxChIpLpmTypes.h:
CPSS_DXCH_IP_LPM_MEMORY_CONFIG_UNT;
CPSS_DXCH_IP_LPM_TCAM_CONFIG_STCT;
CPSS_DXCH_IP_LPM_VR_CONFIG_STCT;
CPSS_DXCH_IP_TCAM_LPM_MANGER_CAPCITY_CFG_STCT;
CPSS_DXCH_IP_TCAM_LPM_MANGER_INDEX_RANGE_STCT;
CPSS_DXCH_IP_TCAM_ROUTE_ENTRY_INFO_UNT;
typedef CPSS_DXCH_IP_LPM_MEMORY_CONFIG_UNT CPSS_DXCH_IP_LPM_MEMORY_CONFIG_UNT;
typedef enum {CPSS_DXCH_IP_LPM_TCAM_XCAT_SHADOW_E = 3, CPSS_DXCH_IP_LPM_TCAM_XCAT_POLICY_BASED_ROUTING_SHADOW_E, 
    CPSS_DXCH_IP_LPM_RAM_SIP5_SHADOW_E, CPSS_DXCH_IP_LPM_RAM_SIP6_SHADOW_E, 
    CPSS_DXCH_IP_LPM_SHADOW_TYPE_LAST_E} CPSS_DXCH_IP_LPM_SHADOW_TYPE_ENT;
typedef CPSS_DXCH_IP_LPM_TCAM_CONFIG_STCT CPSS_DXCH_IP_LPM_TCAM_CONFIG_STC;
typedef CPSS_DXCH_IP_LPM_VR_CONFIG_STCT CPSS_DXCH_IP_LPM_VR_CONFIG_STC;
typedef CPSS_DXCH_IP_TCAM_LPM_MANGER_CAPCITY_CFG_STCT CPSS_DXCH_IP_TCAM_LPM_MANGER_CAPCITY_CFG_STC;
typedef CPSS_DXCH_IP_TCAM_LPM_MANGER_INDEX_RANGE_STCT CPSS_DXCH_IP_TCAM_LPM_MANGER_INDEX_RANGE_STC;
typedef CPSS_DXCH_IP_TCAM_ROUTE_ENTRY_INFO_UNT CPSS_DXCH_IP_TCAM_ROUTE_ENTRY_INFO_UNT;

File ../cpss/mainPpDrv/h/cpss/dxCh/dxChxGen/lpm/cpssDxChLpmTypes.h:
CPSS_DXCH_LPM_RAM_CONFIG_STCT;
typedef enum {CPSS_DXCH_LPM_LEAF_ENTRY_PRIORITY_FDB_E, 
    CPSS_DXCH_LPM_LEAF_ENTRY_PRIORITY_LPM_E} CPSS_DXCH_LPM_LEAF_ENTRY_PRIORITY_TYPE_ENT;
typedef enum {CPSS_DXCH_LPM_RAM_BLOCKS_ALLOCATION_METHOD_DYNAMIC_WITHOUT_BLOCK_SHARING_E, 
    CPSS_DXCH_LPM_RAM_BLOCKS_ALLOCATION_METHOD_DYNAMIC_WITH_BLOCK_SHARING_E} CPSS_DXCH_LPM_RAM_BLOCKS_ALLOCATION_METHOD_ENT;
typedef CPSS_DXCH_LPM_RAM_CONFIG_STCT CPSS_DXCH_LPM_RAM_CONFIG_STC;

File ../cpss/mainPpDrv/h/cpss/dxCh/dxChxGen/mirror/cpssDxChMirror.h:
typedef struct {
    CPSS_INTERFACE_INFO_STC interface;
} CPSS_DXCH_MIRROR_ANALYZER_INTERFACE_STC;
typedef enum {CPSS_DXCH_MIRROR_EGRESS_NOT_DROPPED_E, CPSS_DXCH_MIRROR_EGRESS_TAIL_DROP_E, CPSS_DXCH_MIRROR_EGRESS_CONGESTION_E, 
    CPSS_DXCH_MIRROR_EGRESS_CONGESTION_OR_TAIL_DROP_E} CPSS_DXCH_MIRROR_EGRESS_MODE_ENT;
typedef enum {CPSS_DXCH_MIRROR_TO_ANALYZER_FORWARDING_HOP_BY_HOP_E, CPSS_DXCH_MIRROR_TO_ANALYZER_FORWARDING_SOURCE_BASED_OVERRIDE_E, 
    CPSS_DXCH_MIRROR_TO_ANALYZER_FORWARDING_END_TO_END_E} CPSS_DXCH_MIRROR_TO_ANALYZER_FORWARDING_MODE_ENT;

File ../cpss/mainPpDrv/h/cpss/dxCh/dxChxGen/networkIf/cpssDxChNetIf.h:
typedef struct {
    GT_U16 minL4Port;
    GT_U16 maxL4Port;
    CPSS_NET_TCP_UDP_PACKET_TYPE_ENT packetType;
    CPSS_NET_PROT_ENT protocol;
    CPSS_NET_RX_CPU_CODE_ENT cpuCode;
    CPSS_NET_CPU_CODE_L4_PORT_MODE_ENT l4PortMode;
} CPSS_DXCH_NETIF_APP_SPECIFIC_CPUCODE_TCP_UDP_PORT_RANGE_STC;

File ../cpss/mainPpDrv/h/cpss/dxCh/dxChxGen/networkIf/cpssDxChNetIfTypes.h:
CPSS_DXCH_NET_CPU_CODE_TABLE_ENTRY_STC;
CPSS_DXCH_NET_DSA_COMMON_STC;
CPSS_DXCH_NET_DSA_FORWARD_STC;
CPSS_DXCH_NET_DSA_FROM_CPU_STC;
CPSS_DXCH_NET_DSA_PARAMS_STC;
CPSS_DXCH_NET_DSA_TO_ANALYZER_STC;
CPSS_DXCH_NET_DSA_TO_CPU_STC;
CPSS_DXCH_NET_RX_PARAMS_STC;
CPSS_DXCH_NET_SDMA_TX_PARAMS_STC;
CPSS_DXCH_NET_TX_PARAMS_STC;
typedef CPSS_DXCH_NET_CPU_CODE_TABLE_ENTRY_STC CPSS_DXCH_NET_CPU_CODE_TABLE_ENTRY_STC;
typedef enum {CPSS_DXCH_NET_DSA_CMD_TO_CPU_E, CPSS_DXCH_NET_DSA_CMD_FROM_CPU_E, CPSS_DXCH_NET_DSA_CMD_TO_ANALYZER_E, 
    CPSS_DXCH_NET_DSA_CMD_FORWARD_E} CPSS_DXCH_NET_DSA_CMD_ENT;
typedef CPSS_DXCH_NET_DSA_COMMON_STC CPSS_DXCH_NET_DSA_COMMON_STC;
typedef CPSS_DXCH_NET_DSA_FORWARD_STC CPSS_DXCH_NET_DSA_FORWARD_STC;
typedef CPSS_DXCH_NET_DSA_FROM_CPU_STC CPSS_DXCH_NET_DSA_FROM_CPU_STC;
typedef CPSS_DXCH_NET_DSA_PARAMS_STC CPSS_DXCH_NET_DSA_PARAMS_STC;
typedef CPSS_DXCH_NET_DSA_TO_ANALYZER_STC CPSS_DXCH_NET_DSA_TO_ANALYZER_STC;
typedef CPSS_DXCH_NET_DSA_TO_CPU_STC CPSS_DXCH_NET_DSA_TO_CPU_STC;
typedef enum {CPSS_DXCH_NET_DSA_1_WORD_TYPE_ENT, CPSS_DXCH_NET_DSA_2_WORD_TYPE_ENT, CPSS_DXCH_NET_DSA_3_WORD_TYPE_ENT, 
    CPSS_DXCH_NET_DSA_4_WORD_TYPE_ENT} CPSS_DXCH_NET_DSA_TYPE_ENT;
typedef CPSS_DXCH_NET_RX_PARAMS_STC CPSS_DXCH_NET_RX_PARAMS_STC;
typedef struct {
    GT_U32 rxInPkts;
    GT_U32 rxInOctets;
} CPSS_DXCH_NET_SDMA_RX_COUNTERS_STC;
typedef CPSS_DXCH_NET_SDMA_TX_PARAMS_STC CPSS_DXCH_NET_SDMA_TX_PARAMS_STC;
typedef enum {CPSS_DXCH_NET_TX_GENERATOR_RATE_MODE_GLOBAL_THROUGHPUT_E, CPSS_DXCH_NET_TX_GENERATOR_RATE_MODE_PER_FLOW_INTERVAL_E, 
    CPSS_DXCH_NET_TX_GENERATOR_RATE_MODE_NO_GAP_E} CPSS_DXCH_NET_TX_GENERATOR_RATE_MODE_ENT;
typedef CPSS_DXCH_NET_TX_PARAMS_STC CPSS_DXCH_NET_TX_PARAMS_STC;

File ../cpss/mainPpDrv/h/cpss/dxCh/dxChxGen/networkIf/private/prvCpssDxChNetIf.h:
PRV_CPSS_DXCH_NET_INFO_STC;
typedef enum {PRV_CPSS_DXCH_NET_DSA_TAG_RESERVED_0_E, PRV_CPSS_DXCH_NET_DSA_TAG_RESERVED_1_E, PRV_CPSS_DXCH_NET_DSA_TAG_BPDU_E, 
    PRV_CPSS_DXCH_NET_DSA_TAG_MAC_ADDR_TRAP_E, PRV_CPSS_DXCH_NET_DSA_TAG_MAC_RANGE_TRAP_E, 
    PRV_CPSS_DXCH_NET_DSA_TAG_ARP_BROADCAST_E, PRV_CPSS_DXCH_NET_DSA_TAG_IGMP_PACKET_E, 
    PRV_CPSS_DXCH_NET_DSA_TAG_INTERVENTION_MAC_ADDR_E, PRV_CPSS_DXCH_NET_DSA_TAG_UNK_SRC_MAC_ADDR_E, 
    PRV_CPSS_DXCH_NET_DSA_TAG_MIRROR_MAC_RANGE_TO_CPU_E, PRV_CPSS_DXCH_NET_DSA_TAG_MIRROR_LOCK_TO_CPU_E, 
    PRV_CPSS_DXCH_NET_DSA_TAG_UNKNOWN_UNICAST_E, PRV_CPSS_DXCH_NET_DSA_TAG_UNREGISTERED_MULTICAST_E, 
    PRV_CPSS_DXCH_NET_DSA_TAG_IEEE_RSRVD_MULTICAST_ADDR_E, PRV_CPSS_DXCH_NET_DSA_TAG_IPV6_ICMP_PACKET_E, 
    PRV_CPSS_DXCH_NET_DSA_TAG_DSA_EXTENDED_TAG_TO_CPU_E, PRV_CPSS_DXCH_NET_DSA_TAG_IPV4_IPV6_LINK_LOCAL_MC_DIP_TRP_MRR_E, 
    PRV_CPSS_DXCH_NET_DSA_TAG_MIRROR_IPV4_RIPV1_TO_CPU_E, PRV_CPSS_DXCH_NET_DSA_TAG_IPV6_NEIGHBOR_SOLICITATION_E, 
    PRV_CPSS_DXCH_NET_DSA_TAG_IPV4_BROADCAST_PACKET_E, PRV_CPSS_DXCH_NET_DSA_TAG_NON_IPV4_BROADCAST_PACKET_E, 
    PRV_CPSS_DXCH_NET_DSA_TAG_CISCO_MCAST_MAC_RANGE_E, PRV_CPSS_DXCH_NET_DSA_TAG_BRG_UNREGD_MCAST_E, 
    PRV_CPSS_DXCH_NET_DSA_TAG_BRG_IPV4_UNREG_MCAST_E, PRV_CPSS_DXCH_NET_DSA_TAG_BRG_IPV6_UNREG_MCAST_E, 
    PRV_CPSS_DXCH_NET_DSA_TAG_UNKNOWN_UNICAST_EXT_E, PRV_CPSS_DXCH_NET_DSA_TAG_IEEE_RSRVD_MULTICAST_ADDR_1_E, 
    PRV_CPSS_DXCH_NET_DSA_TAG_IEEE_RSRVD_MULTICAST_ADDR_2_E, PRV_CPSS_DXCH_NET_DSA_TAG_IEEE_RSRVD_MULTICAST_ADDR_3_E, 
    PRV_CPSS_DXCH_NET_DSA_TAG_IPV4_IPV6_LINK_LOCAL_MC_DIP_TRP_MRR_1_E, 
    PRV_CPSS_DXCH_NET_DSA_TAG_IPV4_IPV6_LINK_LOCAL_MC_DIP_TRP_MRR_2_E, 
    PRV_CPSS_DXCH_NET_DSA_TAG_IPV4_IPV6_LINK_LOCAL_MC_DIP_TRP_MRR_3_E, PRV_CPSS_DXCH_NET_DSA_TAG_UDP_BC_MIRROR_TRAP0_E, 
    PRV_CPSS_DXCH_NET_DSA_TAG_UDP_BC_MIRROR_TRAP1_E, PRV_CPSS_DXCH_NET_DSA_TAG_UDP_BC_MIRROR_TRAP2_E, 
    PRV_CPSS_DXCH_NET_DSA_TAG_UDP_BC_MIRROR_TRAP3_E, PRV_CPSS_DXCH_NET_DSA_TAG_SEC_AUTO_LEARN_UNK_SRC_TRAP_E, 
    PRV_CPSS_DXCH_NET_DSA_TAG_RXDMA_DROP_E, PRV_CPSS_DXCH_NET_DSA_TAG_VLAN_NOT_VALID_E, 
    PRV_CPSS_DXCH_NET_DSA_TAG_PORT_NOT_VLAN_MEM_E, PRV_CPSS_DXCH_NET_DSA_TAG_VLAN_RANGE_E, 
    PRV_CPSS_DXCH_NET_DSA_TAG_STATIC_ADDR_MOVED_E, PRV_CPSS_DXCH_NET_DSA_TAG_MAC_SPOOF_E, 
    PRV_CPSS_DXCH_NET_DSA_TAG_ARP_SA_MISMATCH_E, PRV_CPSS_DXCH_NET_DSA_TAG_SYN_WITH_DATA_E, 
    PRV_CPSS_DXCH_NET_DSA_TAG_TCP_OVER_MC_BC_E, PRV_CPSS_DXCH_NET_DSA_TAG_FRAGMENT_ICMP_E, 
    PRV_CPSS_DXCH_NET_DSA_TAG_TCP_FLAGS_ZERO_E, PRV_CPSS_DXCH_NET_DSA_TAG_TCP_FLAGS_FIN_URG_PSH_E, 
    PRV_CPSS_DXCH_NET_DSA_TAG_TCP_FLAGS_SYN_FIN_E, PRV_CPSS_DXCH_NET_DSA_TAG_TCP_FLAGS_SYN_RST_E, 
    PRV_CPSS_DXCH_NET_DSA_TAG_TCP_UDP_SRC_DEST_ZERO_E, PRV_CPSS_DXCH_NET_DSA_TAG_BRIDGE_ACCESS_MATRIX_E, 
    PRV_CPSS_DXCH_NET_DSA_TAG_ACCEPT_FRAME_TYPE_E, PRV_CPSS_DXCH_NET_DSA_TAG_VLAN_MRU_E, PRV_CPSS_DXCH_NET_DSA_TAG_RATE_LIMITING_E, 
    PRV_CPSS_DXCH_NET_DSA_TAG_LOCAL_PORT_E, PRV_CPSS_DXCH_NET_DSA_TAG_IP_MC_E, PRV_CPSS_DXCH_NET_DSA_TAG_NON_IP_MC_E, 
    PRV_CPSS_DXCH_NET_DSA_TAG_DSA_TAG_LOCAL_DEV_E, PRV_CPSS_DXCH_NET_DSA_TAG_INVALID_SA_E, 
    PRV_CPSS_DXCH_NET_DSA_TAG_TARGET_NULL_PORT_E = 62, 
    PRV_CPSS_DXCH_NET_DSA_TAG_TARGET_EPORT_MTU_EXCEEDED_OR_RX_PROTECTION_SWITCHING_OR_INGRESS_FORWARDING_RESTRICTIONS_E, 
    PRV_CPSS_DXCH_NET_DSA_TAG_ROUTED_PACKET_FORWARD_E, PRV_CPSS_DXCH_NET_DSA_TAG_BRIDGED_PACKET_FRW_E, 
    PRV_CPSS_DXCH_NET_DSA_TAG_INGRESS_MIRRORED_TO_ANALYZER_E, PRV_CPSS_DXCH_NET_DSA_TAG_EGRESS_MIRRORED_TO_ANALYZER_E, 
    PRV_CPSS_DXCH_NET_DSA_TAG_MAIL_FROM_NEIGHBOR_CPU_E, PRV_CPSS_DXCH_NET_DSA_TAG_CPU_TO_CPU_E, 
    PRV_CPSS_DXCH_NET_DSA_TAG_EGRESS_SAMPLED_E, PRV_CPSS_DXCH_NET_DSA_TAG_INGRESS_SAMPLED_E, 
    PRV_CPSS_DXCH_NET_DSA_TAG_INVALID_PCL_KEY_TRAP_E = 74, PRV_CPSS_DXCH_NET_DSA_TAG_IPV4_TT_HEADER_ERROR_E, 
    PRV_CPSS_DXCH_NET_DSA_TAG_IPV4_TT_OPTION_FRAG_ERROR_E, PRV_CPSS_DXCH_NET_DSA_TAG_IPV4_TT_UNSUP_GRE_ERROR_E, 
    PRV_CPSS_DXCH_NET_DSA_TAG_BAD_ANALYZER_INDEX_DROP_ERROR_E, PRV_CPSS_DXCH_NET_DSA_TAG_TT_MPLS_HEADER_CHECK_E, 
    PRV_CPSS_DXCH_NET_DSA_TAG_TT_MPLS_TTL_EXCEED_E, PRV_CPSS_DXCH_NET_DSA_TAG_UNTAGGED_OVERSIZE_DROP_CODE_E, 
    PRV_CPSS_DXCH_NET_DSA_TAG_IPV6_TT_UNSUP_GRE_ERROR_E, PRV_CPSS_DXCH_NET_DSA_TAG_OAM_PDU_TRAP_E, 
    PRV_CPSS_DXCH_NET_DSA_TAG_CCFC_PKT_DROP_E = 86, PRV_CPSS_DXCH_NET_DSA_TAG_PTP_HEADER_ERROR_E, 
    PRV_CPSS_DXCH_NET_DSA_TAG_BAD_FC_PKT_DROP_E, PRV_CPSS_DXCH_NET_DSA_TAG_IPV4_UC_TTL_EXCEEDED_E = 133, 
    PRV_CPSS_DXCH_NET_DSA_TAG_IPV4_6_MTU_EXCEEDED_E, PRV_CPSS_DXCH_NET_DSA_TAG_IPV6_UC_HOP_LIMIT_EXCEEDED_E, 
    PRV_CPSS_DXCH_NET_DSA_TAG_IPV4_6_ILLEGAL_ADDR_ERROR_E, PRV_CPSS_DXCH_NET_DSA_TAG_IPV4_UC_HEADER_ERROR_E, 
    PRV_CPSS_DXCH_NET_DSA_TAG_IPV4_6_DIP_DA_MISMATCH_E, PRV_CPSS_DXCH_NET_DSA_TAG_IPV6_UC_HEADER_ERROR_E, 
    PRV_CPSS_DXCH_NET_DSA_TAG_IPV4_6_UC_SIP_SA_MISMATCH_E, PRV_CPSS_DXCH_NET_DSA_TAG_IPV4_UC_OPTIONS_E, 
    PRV_CPSS_DXCH_NET_DSA_TAG_IPV6_NON_HBH_OPTION_E, PRV_CPSS_DXCH_NET_DSA_TAG_IPV6_UC_OPTIONS_E, 
    PRV_CPSS_DXCH_NET_DSA_TAG_IPV4_6_SIP_FILTERING_E, PRV_CPSS_DXCH_NET_DSA_TAG_IPV4_6_SIP_IS_ZERO_E, 
    PRV_CPSS_DXCH_NET_DSA_TAG_ACCESS_MATRIX_E, PRV_CPSS_DXCH_NET_DSA_TAG_FCOE_DIP_LOOKUP_NOT_FOUND_OR_FCOE_EXCEPTION_E, 
    PRV_CPSS_DXCH_NET_DSA_TAG_FCOE_SIP_NOT_FOUND_E, PRV_CPSS_DXCH_NET_DSA_TAG_IPV6_SCOPE_E = 159, 
    PRV_CPSS_DXCH_NET_DSA_TAG_IPV4_UC_ROUTE0_E, PRV_CPSS_DXCH_NET_DSA_TAG_IPV4_UC_ROUTE1_E, 
    PRV_CPSS_DXCH_NET_DSA_TAG_IPV4_UC_ROUTE2_E, PRV_CPSS_DXCH_NET_DSA_TAG_IPV4_UC_ROUTE3_E, 
    PRV_CPSS_DXCH_NET_DSA_TAG_IPV4_MC_ROUTE0_E, PRV_CPSS_DXCH_NET_DSA_TAG_IPV4_MC_ROUTE1_E, 
    PRV_CPSS_DXCH_NET_DSA_TAG_IPV4_MC_ROUTE2_E, PRV_CPSS_DXCH_NET_DSA_TAG_IPV4_MC_ROUTE3_E, 
    PRV_CPSS_DXCH_NET_DSA_TAG_IPV6_UC_ROUTE0_E, PRV_CPSS_DXCH_NET_DSA_TAG_IPV6_UC_ROUTE1_E, 
    PRV_CPSS_DXCH_NET_DSA_TAG_IPV6_UC_ROUTE2_E, PRV_CPSS_DXCH_NET_DSA_TAG_IPV6_UC_ROUTE3_E, 
    PRV_CPSS_DXCH_NET_DSA_TAG_IPV6_MC_ROUTE0_E, PRV_CPSS_DXCH_NET_DSA_TAG_IPV6_MC_ROUTE1_E, 
    PRV_CPSS_DXCH_NET_DSA_TAG_IPV6_MC_ROUTE2_E, PRV_CPSS_DXCH_NET_DSA_TAG_IPV6_MC_ROUTE3_E, 
    PRV_CPSS_DXCH_NET_DSA_TAG_IPV4_6_UC_RPF_FAIL_E, PRV_CPSS_DXCH_NET_DSA_TAG_IPV4_6_MC_ROUTE_RPF_FAIL_E, 
    PRV_CPSS_DXCH_NET_DSA_TAG_IPV4_6_MC_MLL_RPF_FAIL_E, PRV_CPSS_DXCH_NET_DSA_TAG_ARP_BC_TO_ME_E, 
    PRV_CPSS_DXCH_NET_DSA_TAG_IPV4_UC_ICMP_REDIRECT_E, PRV_CPSS_DXCH_NET_DSA_TAG_IPV6_UC_ICMP_REDIRECT_E, 
    PRV_CPSS_DXCH_NET_DSA_TAG_IP_MC_ROUTE_BIDIR_RPF_FAIL_E, PRV_CPSS_DXCH_NET_DSA_TAG_MET_RED_DROP_CODE_E = 185, 
    PRV_CPSS_DXCH_NET_DSA_TAG_ECC_DROP_CODE_E, PRV_CPSS_DXCH_NET_DSA_TAG_ARP_REPLY_TO_ME_E = 188, 
    PRV_CPSS_DXCH_NET_DSA_TAG_CPU_TO_ALL_CPUS_E, PRV_CPSS_DXCH_NET_DSA_TAG_TCP_SYN_TO_CPU_E, 
    PRV_CPSS_DXCH_NET_DSA_TAG_PACKET_TO_VIRTUAL_ROUTER_PORT_E, PRV_CPSS_DXCH_NET_DSA_TAG_FIRST_USER_DEFINED_E, 
    PRV_CPSS_DXCH_NET_DSA_TAG_LAST_USER_DEFINED_E = 255, PRV_CPSS_DXCH_NET_DSA_TAG_MAX_E} PRV_CPSS_DXCH_NET_DSA_TAG_CPU_CODE_ENT;
typedef PRV_CPSS_DXCH_NET_INFO_STC PRV_CPSS_DXCH_NET_INFO_STC;

File ../cpss/mainPpDrv/h/cpss/dxCh/dxChxGen/pcl/cpssDxChPcl.h:
CPSS_DXCH_PCL_ACTION_COPY_RESERVED_STC;
CPSS_DXCH_PCL_ACTION_EGRESS_PHA_THREAD_CLASSIFIER_NSH_OVER_VXLAN_GPE_STC;
CPSS_DXCH_PCL_ACTION_EGRESS_PHA_THREAD_ERSPAN_TYPE_II_MIRROR_STC;
CPSS_DXCH_PCL_ACTION_EGRESS_PHA_THREAD_INFO_STC;
CPSS_DXCH_PCL_ACTION_EGRESS_PHA_THREAD_INFO_UNT;
CPSS_DXCH_PCL_ACTION_EGRESS_PHA_THREAD_INT_IOAM_MIRROR_STC;
CPSS_DXCH_PCL_ACTION_EGRESS_PHA_THREAD_IOAM_INGRESS_SWITCH_STC;
CPSS_DXCH_PCL_ACTION_IP_UC_ROUTE_STC;
CPSS_DXCH_PCL_ACTION_LATENCY_MONITORING_STC;
CPSS_DXCH_PCL_ACTION_LOOKUP_CONFIG_STC;
CPSS_DXCH_PCL_ACTION_MATCH_COUNTER_STC;
CPSS_DXCH_PCL_ACTION_MIRROR_STC;
CPSS_DXCH_PCL_ACTION_OAM_STC;
CPSS_DXCH_PCL_ACTION_POLICER_STC;
CPSS_DXCH_PCL_ACTION_QOS_EGRESS_STC;
CPSS_DXCH_PCL_ACTION_QOS_INGRESS_STC;
CPSS_DXCH_PCL_ACTION_QOS_UNT;
CPSS_DXCH_PCL_ACTION_REDIRECT_DATA_LOGICAL_SRC_IF_STC;
CPSS_DXCH_PCL_ACTION_REDIRECT_DATA_MODIFY_MAC_SA_STC;
CPSS_DXCH_PCL_ACTION_REDIRECT_DATA_OUT_IF_STC;
CPSS_DXCH_PCL_ACTION_REDIRECT_DATA_ROUTE_AND_VRF_ID_STC;
CPSS_DXCH_PCL_ACTION_REDIRECT_DATA_UNT;
CPSS_DXCH_PCL_ACTION_REDIRECT_STC;
CPSS_DXCH_PCL_ACTION_SOURCE_ID_STC;
CPSS_DXCH_PCL_ACTION_SOURCE_PORT_STC;
CPSS_DXCH_PCL_ACTION_STC;
CPSS_DXCH_PCL_ACTION_VLAN_EGRESS_STC;
CPSS_DXCH_PCL_ACTION_VLAN_INGRESS_STC;
CPSS_DXCH_PCL_ACTION_VLAN_UNT;
CPSS_DXCH_PCL_LOOKUP_CFG_STC;
CPSS_DXCH_PCL_RULE_FORMAT_COMMON_EXT_STC;
CPSS_DXCH_PCL_RULE_FORMAT_COMMON_STC;
CPSS_DXCH_PCL_RULE_FORMAT_COMMON_STD_IP_STC;
CPSS_DXCH_PCL_RULE_FORMAT_EGRESS_COMMON_EXT_STC;
CPSS_DXCH_PCL_RULE_FORMAT_EGRESS_COMMON_FORWARD_DATA_STC;
CPSS_DXCH_PCL_RULE_FORMAT_EGRESS_COMMON_FROM_CPU_STC;
CPSS_DXCH_PCL_RULE_FORMAT_EGRESS_COMMON_STC;
CPSS_DXCH_PCL_RULE_FORMAT_EGRESS_COMMON_STD_IP_STC;
CPSS_DXCH_PCL_RULE_FORMAT_EGRESS_COMMON_TO_ANALYZER_STC;
CPSS_DXCH_PCL_RULE_FORMAT_EGRESS_COMMON_TO_CPU_STC;
CPSS_DXCH_PCL_RULE_FORMAT_EGRESS_EXT_IPV4_RACL_VACL_STC;
CPSS_DXCH_PCL_RULE_FORMAT_EGRESS_EXT_IPV6_L2_STC;
CPSS_DXCH_PCL_RULE_FORMAT_EGRESS_EXT_IPV6_L4_STC;
CPSS_DXCH_PCL_RULE_FORMAT_EGRESS_EXT_NOT_IPV6_STC;
CPSS_DXCH_PCL_RULE_FORMAT_EGRESS_IP_COMMON_STC;
CPSS_DXCH_PCL_RULE_FORMAT_EGRESS_STD_IPV4_L4_STC;
CPSS_DXCH_PCL_RULE_FORMAT_EGRESS_STD_IP_L2_QOS_STC;
CPSS_DXCH_PCL_RULE_FORMAT_EGRESS_STD_NOT_IP_STC;
CPSS_DXCH_PCL_RULE_FORMAT_EGRESS_UDB60_FIXED_STC;
CPSS_DXCH_PCL_RULE_FORMAT_EGRESS_UDB_ONLY_STC;
CPSS_DXCH_PCL_RULE_FORMAT_EGRESS_UDB_REPLACED_STC;
CPSS_DXCH_PCL_RULE_FORMAT_EGRESS_ULTRA_IPV6_RACL_VACL_STC;
CPSS_DXCH_PCL_RULE_FORMAT_EXT_IPV4_PORT_VLAN_QOS_STC;
CPSS_DXCH_PCL_RULE_FORMAT_EXT_IPV6_L2_STC;
CPSS_DXCH_PCL_RULE_FORMAT_EXT_IPV6_L4_STC;
CPSS_DXCH_PCL_RULE_FORMAT_EXT_NOT_IPV6_STC;
CPSS_DXCH_PCL_RULE_FORMAT_INGRESS_EXTENDED_UDB_STC;
CPSS_DXCH_PCL_RULE_FORMAT_INGRESS_STANDARD_UDB_STC;
CPSS_DXCH_PCL_RULE_FORMAT_INGRESS_UDB60_FIXED_STC;
CPSS_DXCH_PCL_RULE_FORMAT_INGRESS_UDB80_FIXED_STC;
CPSS_DXCH_PCL_RULE_FORMAT_INGRESS_UDB_COMMON_STC;
CPSS_DXCH_PCL_RULE_FORMAT_INGRESS_UDB_ONLY_STC;
CPSS_DXCH_PCL_RULE_FORMAT_INGRESS_UDB_REPLACED_STC;
CPSS_DXCH_PCL_RULE_FORMAT_IP_COMMON_STC;
CPSS_DXCH_PCL_RULE_FORMAT_STD_IPV4_L4_STC;
CPSS_DXCH_PCL_RULE_FORMAT_STD_IPV4_ROUTED_ACL_QOS_STC;
CPSS_DXCH_PCL_RULE_FORMAT_STD_IPV6_DIP_STC;
CPSS_DXCH_PCL_RULE_FORMAT_STD_IP_L2_QOS_STC;
CPSS_DXCH_PCL_RULE_FORMAT_STD_NOT_IP_STC;
CPSS_DXCH_PCL_RULE_FORMAT_ULTRA_IPV6_PORT_VLAN_QOS_STC;
CPSS_DXCH_PCL_RULE_FORMAT_ULTRA_IPV6_ROUTED_ACL_QOS_STC;
CPSS_DXCH_PCL_RULE_FORMAT_UNT;
CPSS_DXCH_PCL_UDB_SELECT_STC;
typedef enum {CPSS_DXCH_PCL_ACTION_VLAN_INGRESS_CFI_DO_NOT_MODIFY_E, CPSS_DXCH_PCL_ACTION_VLAN_INGRESS_CFI_SET_1_E, 
    CPSS_DXCH_PCL_ACTION_VLAN_INGRESS_CFI_SET_0_E} CPSS_DXCH_PCL_ACTION_CFI_UPDATE_ENT;
typedef CPSS_DXCH_PCL_ACTION_COPY_RESERVED_STC CPSS_DXCH_PCL_ACTION_COPY_RESERVED_STC;
typedef enum {CPSS_DXCH_PCL_ACTION_EGRESS_DSCP_EXP_CMD_KEEP_E, CPSS_DXCH_PCL_ACTION_EGRESS_DSCP_EXP_CMD_MODIFY_OUTER_E, 
    CPSS_DXCH_PCL_ACTION_EGRESS_DSCP_EXP_CMD_MODIFY_INNER_E} CPSS_DXCH_PCL_ACTION_EGRESS_DSCP_EXP_CMD_ENT;
typedef CPSS_DXCH_PCL_ACTION_EGRESS_PHA_THREAD_CLASSIFIER_NSH_OVER_VXLAN_GPE_STC CPSS_DXCH_PCL_ACTION_EGRESS_PHA_THREAD_CLASSIFIER_NSH_OVER_VXLAN_GPE_STC;
typedef CPSS_DXCH_PCL_ACTION_EGRESS_PHA_THREAD_ERSPAN_TYPE_II_MIRROR_STC CPSS_DXCH_PCL_ACTION_EGRESS_PHA_THREAD_ERSPAN_TYPE_II_MIRROR_STC;
typedef enum {CPSS_DXCH_PCL_ACTION_EGRESS_PHA_THREAD_ID_ASSIGNMENT_MODE_DISABLED_E, 
    CPSS_DXCH_PCL_ACTION_EGRESS_PHA_THREAD_ID_ASSIGNMENT_MODE_ENABLED_E, 
    CPSS_DXCH_PCL_ACTION_EGRESS_PHA_THREAD_ID_ASSIGNMENT_MODE_BYPASS_PHA_E} CPSS_DXCH_PCL_ACTION_EGRESS_PHA_THREAD_ID_ASSIGNMENT_MODE_ENT;
typedef CPSS_DXCH_PCL_ACTION_EGRESS_PHA_THREAD_INFO_STC CPSS_DXCH_PCL_ACTION_EGRESS_PHA_THREAD_INFO_STC;
typedef CPSS_DXCH_PCL_ACTION_EGRESS_PHA_THREAD_INFO_UNT CPSS_DXCH_PCL_ACTION_EGRESS_PHA_THREAD_INFO_UNT;
typedef CPSS_DXCH_PCL_ACTION_EGRESS_PHA_THREAD_INT_IOAM_MIRROR_STC CPSS_DXCH_PCL_ACTION_EGRESS_PHA_THREAD_INT_IOAM_MIRROR_STC;
typedef CPSS_DXCH_PCL_ACTION_EGRESS_PHA_THREAD_IOAM_INGRESS_SWITCH_STC CPSS_DXCH_PCL_ACTION_EGRESS_PHA_THREAD_IOAM_INGRESS_SWITCH_STC;
typedef enum {CPSS_DXCH_PCL_ACTION_EGRESS_PHA_THREAD_TYPE_NOT_USED_E, CPSS_DXCH_PCL_ACTION_EGRESS_PHA_THREAD_IOAM_INGRESS_SWITCH_E, 
    CPSS_DXCH_PCL_ACTION_EGRESS_PHA_THREAD_INT_IOAM_MIRROR_E, 
    CPSS_DXCH_PCL_ACTION_EGRESS_PHA_THREAD_CLASSIFIER_NSH_OVER_VXLAN_GPE_E, 
    CPSS_DXCH_PCL_ACTION_EGRESS_PHA_THREAD_ERSPAN_TYPE_II_MIRROR_E, 
    CPSS_DXCH_PCL_ACTION_EGRESS_PHA_THREAD___LAST___E} CPSS_DXCH_PCL_ACTION_EGRESS_PHA_THREAD_TYPE_ENT;
typedef enum {CPSS_DXCH_PCL_ACTION_EGRESS_TAG0_CMD_DO_NOT_MODIFY_E, CPSS_DXCH_PCL_ACTION_EGRESS_TAG0_CMD_MODIFY_OUTER_TAG_E, 
    CPSS_DXCH_PCL_ACTION_EGRESS_TAG0_CMD_MODIFY_TAG0_E} CPSS_DXCH_PCL_ACTION_EGRESS_TAG0_CMD_ENT;
typedef enum {CPSS_DXCH_PCL_ACTION_INGRESS_UP1_CMD_DO_NOT_MODIFY_E, CPSS_DXCH_PCL_ACTION_INGRESS_UP1_CMD_TAG1_UNTAGGED_E, 
    CPSS_DXCH_PCL_ACTION_INGRESS_UP1_CMD_TAG0_UNTAGGED_E, 
    CPSS_DXCH_PCL_ACTION_INGRESS_UP1_CMD_ALL_E} CPSS_DXCH_PCL_ACTION_INGRESS_UP1_CMD_ENT;
typedef enum {CPSS_DXCH_PCL_ACTION_INGRESS_VLAN_ID1_CMD_DO_NOT_MODIFY_E, CPSS_DXCH_PCL_ACTION_INGRESS_VLAN_ID1_CMD_UNTAGGED_E, 
    CPSS_DXCH_PCL_ACTION_INGRESS_VLAN_ID1_CMD_ALL_E} CPSS_DXCH_PCL_ACTION_INGRESS_VLAN_ID1_CMD_ENT;
typedef CPSS_DXCH_PCL_ACTION_IP_UC_ROUTE_STC CPSS_DXCH_PCL_ACTION_IP_UC_ROUTE_STC;
typedef CPSS_DXCH_PCL_ACTION_LATENCY_MONITORING_STC CPSS_DXCH_PCL_ACTION_LATENCY_MONITORING_STC;
typedef CPSS_DXCH_PCL_ACTION_LOOKUP_CONFIG_STC CPSS_DXCH_PCL_ACTION_LOOKUP_CONFIG_STC;
typedef CPSS_DXCH_PCL_ACTION_MATCH_COUNTER_STC CPSS_DXCH_PCL_ACTION_MATCH_COUNTER_STC;
typedef CPSS_DXCH_PCL_ACTION_MIRROR_STC CPSS_DXCH_PCL_ACTION_MIRROR_STC;
typedef CPSS_DXCH_PCL_ACTION_OAM_STC CPSS_DXCH_PCL_ACTION_OAM_STC;
typedef CPSS_DXCH_PCL_ACTION_POLICER_STC CPSS_DXCH_PCL_ACTION_POLICER_STC;
typedef CPSS_DXCH_PCL_ACTION_QOS_EGRESS_STC CPSS_DXCH_PCL_ACTION_QOS_EGRESS_STC;
typedef CPSS_DXCH_PCL_ACTION_QOS_INGRESS_STC CPSS_DXCH_PCL_ACTION_QOS_INGRESS_STC;
typedef CPSS_DXCH_PCL_ACTION_QOS_UNT CPSS_DXCH_PCL_ACTION_QOS_UNT;
typedef enum {CPSS_DXCH_PCL_ACTION_REDIRECT_CMD_NONE_E, CPSS_DXCH_PCL_ACTION_REDIRECT_CMD_OUT_IF_E, 
    CPSS_DXCH_PCL_ACTION_REDIRECT_CMD_ROUTER_E, CPSS_DXCH_PCL_ACTION_REDIRECT_CMD_VIRT_ROUTER_E, 
    CPSS_DXCH_PCL_ACTION_REDIRECT_CMD_REPLACE_MAC_SA_E, CPSS_DXCH_PCL_ACTION_REDIRECT_CMD_LOGICAL_PORT_ASSIGN_E, 
    CPSS_DXCH_PCL_ACTION_REDIRECT_CMD_ROUTER_AND_ASSIGN_VRF_ID_E, CPSS_DXCH_PCL_ACTION_REDIRECT_CMD_ECMP_E, 
    CPSS_DXCH_PCL_ACTION_REDIRECT_CMD_ECMP_AND_ASSIGN_VRF_ID_E} CPSS_DXCH_PCL_ACTION_REDIRECT_CMD_ENT;
typedef CPSS_DXCH_PCL_ACTION_REDIRECT_DATA_LOGICAL_SRC_IF_STC CPSS_DXCH_PCL_ACTION_REDIRECT_DATA_LOGICAL_SRC_IF_STC;
typedef CPSS_DXCH_PCL_ACTION_REDIRECT_DATA_MODIFY_MAC_SA_STC CPSS_DXCH_PCL_ACTION_REDIRECT_DATA_MODIFY_MAC_SA_STC;
typedef CPSS_DXCH_PCL_ACTION_REDIRECT_DATA_OUT_IF_STC CPSS_DXCH_PCL_ACTION_REDIRECT_DATA_OUT_IF_STC;
typedef CPSS_DXCH_PCL_ACTION_REDIRECT_DATA_ROUTE_AND_VRF_ID_STC CPSS_DXCH_PCL_ACTION_REDIRECT_DATA_ROUTE_AND_VRF_ID_STC;
typedef CPSS_DXCH_PCL_ACTION_REDIRECT_DATA_UNT CPSS_DXCH_PCL_ACTION_REDIRECT_DATA_UNT;
typedef CPSS_DXCH_PCL_ACTION_REDIRECT_STC CPSS_DXCH_PCL_ACTION_REDIRECT_STC;
typedef enum {CPSS_DXCH_PCL_ACTION_REDIRECT_TUNNEL_TYPE_ETHERNET_E, 
    CPSS_DXCH_PCL_ACTION_REDIRECT_TUNNEL_TYPE_IP_E} CPSS_DXCH_PCL_ACTION_REDIRECT_TUNNEL_TYPE_ENT;
typedef CPSS_DXCH_PCL_ACTION_SOURCE_ID_STC CPSS_DXCH_PCL_ACTION_SOURCE_ID_STC;
typedef CPSS_DXCH_PCL_ACTION_SOURCE_PORT_STC CPSS_DXCH_PCL_ACTION_SOURCE_PORT_STC;
typedef CPSS_DXCH_PCL_ACTION_STC CPSS_DXCH_PCL_ACTION_STC;
typedef CPSS_DXCH_PCL_ACTION_VLAN_EGRESS_STC CPSS_DXCH_PCL_ACTION_VLAN_EGRESS_STC;
typedef CPSS_DXCH_PCL_ACTION_VLAN_INGRESS_STC CPSS_DXCH_PCL_ACTION_VLAN_INGRESS_STC;
typedef CPSS_DXCH_PCL_ACTION_VLAN_UNT CPSS_DXCH_PCL_ACTION_VLAN_UNT;
typedef enum {CPSS_DXCH_PCL_EGRESS_PKT_FROM_CPU_CONTROL_E, CPSS_DXCH_PCL_EGRESS_PKT_FROM_CPU_DATA_E, 
    CPSS_DXCH_PCL_EGRESS_PKT_TO_CPU_E, CPSS_DXCH_PCL_EGRESS_PKT_TO_ANALYZER_E, CPSS_DXCH_PCL_EGRESS_PKT_TS_E, 
    CPSS_DXCH_PCL_EGRESS_PKT_NON_TS_E, CPSS_DXCH_PCL_EGRESS_PKT_DROP_E} CPSS_DXCH_PCL_EGRESS_PKT_TYPE_ENT;
typedef CPSS_DXCH_PCL_LOOKUP_CFG_STC CPSS_DXCH_PCL_LOOKUP_CFG_STC;
typedef enum {CPSS_DXCH_PCL_LOOKUP_CONFIG_INDEX_RETAIN_E, 
    CPSS_DXCH_PCL_LOOKUP_CONFIG_INDEX_OVERRIDE_E} CPSS_DXCH_PCL_LOOKUP_CONFIG_INDEX_ENT;
typedef enum {CPSS_DXCH_PCL_OFFSET_L2_E, CPSS_DXCH_PCL_OFFSET_L3_E, CPSS_DXCH_PCL_OFFSET_L4_E, CPSS_DXCH_PCL_OFFSET_IPV6_EXT_HDR_E, 
    CPSS_DXCH_PCL_OFFSET_TCP_UDP_COMPARATOR_E, CPSS_DXCH_PCL_OFFSET_L3_MINUS_2_E, CPSS_DXCH_PCL_OFFSET_MPLS_MINUS_2_E, 
    CPSS_DXCH_PCL_OFFSET_TUNNEL_L2_E, CPSS_DXCH_PCL_OFFSET_TUNNEL_L3_MINUS_2_E, CPSS_DXCH_PCL_OFFSET_METADATA_E, 
    CPSS_DXCH_PCL_OFFSET_TUNNEL_L4_E, CPSS_DXCH_PCL_OFFSET_INVALID_E} CPSS_DXCH_PCL_OFFSET_TYPE_ENT;
typedef enum {CPSS_DXCH_PCL_PACKET_TYPE_IPV4_TCP_E, CPSS_DXCH_PCL_PACKET_TYPE_IPV4_UDP_E, CPSS_DXCH_PCL_PACKET_TYPE_MPLS_E, 
    CPSS_DXCH_PCL_PACKET_TYPE_IPV4_FRAGMENT_E, CPSS_DXCH_PCL_PACKET_TYPE_IPV4_OTHER_E, CPSS_DXCH_PCL_PACKET_TYPE_ETHERNET_OTHER_E, 
    CPSS_DXCH_PCL_PACKET_TYPE_UDE_E, CPSS_DXCH_PCL_PACKET_TYPE_IPV6_E, CPSS_DXCH_PCL_PACKET_TYPE_UDE1_E, 
    CPSS_DXCH_PCL_PACKET_TYPE_UDE2_E, CPSS_DXCH_PCL_PACKET_TYPE_UDE3_E, CPSS_DXCH_PCL_PACKET_TYPE_UDE4_E, 
    CPSS_DXCH_PCL_PACKET_TYPE_IPV6_TCP_E, CPSS_DXCH_PCL_PACKET_TYPE_IPV6_UDP_E, CPSS_DXCH_PCL_PACKET_TYPE_IPV6_OTHER_E, 
    CPSS_DXCH_PCL_PACKET_TYPE_UDE5_E, CPSS_DXCH_PCL_PACKET_TYPE_UDE6_E, 
    CPSS_DXCH_PCL_PACKET_TYPE_LAST_E} CPSS_DXCH_PCL_PACKET_TYPE_ENT;
typedef enum {CPSS_DXCH_PCL_POLICER_DISABLE_ALL_E, CPSS_DXCH_PCL_POLICER_ENABLE_METER_AND_COUNTER_E, 
    CPSS_DXCH_PCL_POLICER_ENABLE_METER_ONLY_E, CPSS_DXCH_PCL_POLICER_ENABLE_COUNTER_ONLY_E} CPSS_DXCH_PCL_POLICER_ENABLE_ENT;
typedef enum {CPSS_DXCH_PCL_PORT_LOOKUP_CFG_TAB_ACC_MODE_BY_PORT_E, CPSS_DXCH_PCL_PORT_LOOKUP_CFG_TAB_ACC_MODE_BY_VLAN_E, 
    CPSS_DXCH_PCL_PORT_LOOKUP_CFG_TAB_ACC_MODE_BY_EPORT_E, 
    CPSS_DXCH_PCL_PORT_LOOKUP_CFG_TAB_ACC_MODE_BY_SRC_TRG_E} CPSS_DXCH_PCL_PORT_LOOKUP_CFG_TAB_ACC_MODE_ENT;
typedef CPSS_DXCH_PCL_RULE_FORMAT_COMMON_EXT_STC CPSS_DXCH_PCL_RULE_FORMAT_COMMON_EXT_STC;
typedef CPSS_DXCH_PCL_RULE_FORMAT_COMMON_STC CPSS_DXCH_PCL_RULE_FORMAT_COMMON_STC;
typedef CPSS_DXCH_PCL_RULE_FORMAT_COMMON_STD_IP_STC CPSS_DXCH_PCL_RULE_FORMAT_COMMON_STD_IP_STC;
typedef CPSS_DXCH_PCL_RULE_FORMAT_EGRESS_COMMON_EXT_STC CPSS_DXCH_PCL_RULE_FORMAT_EGRESS_COMMON_EXT_STC;
typedef CPSS_DXCH_PCL_RULE_FORMAT_EGRESS_COMMON_FORWARD_DATA_STC CPSS_DXCH_PCL_RULE_FORMAT_EGRESS_COMMON_FORWARD_DATA_STC;
typedef CPSS_DXCH_PCL_RULE_FORMAT_EGRESS_COMMON_FROM_CPU_STC CPSS_DXCH_PCL_RULE_FORMAT_EGRESS_COMMON_FROM_CPU_STC;
typedef CPSS_DXCH_PCL_RULE_FORMAT_EGRESS_COMMON_STC CPSS_DXCH_PCL_RULE_FORMAT_EGRESS_COMMON_STC;
typedef CPSS_DXCH_PCL_RULE_FORMAT_EGRESS_COMMON_STD_IP_STC CPSS_DXCH_PCL_RULE_FORMAT_EGRESS_COMMON_STD_IP_STC;
typedef CPSS_DXCH_PCL_RULE_FORMAT_EGRESS_COMMON_TO_ANALYZER_STC CPSS_DXCH_PCL_RULE_FORMAT_EGRESS_COMMON_TO_ANALYZER_STC;
typedef CPSS_DXCH_PCL_RULE_FORMAT_EGRESS_COMMON_TO_CPU_STC CPSS_DXCH_PCL_RULE_FORMAT_EGRESS_COMMON_TO_CPU_STC;
typedef CPSS_DXCH_PCL_RULE_FORMAT_EGRESS_EXT_IPV4_RACL_VACL_STC CPSS_DXCH_PCL_RULE_FORMAT_EGRESS_EXT_IPV4_RACL_VACL_STC;
typedef CPSS_DXCH_PCL_RULE_FORMAT_EGRESS_EXT_IPV6_L2_STC CPSS_DXCH_PCL_RULE_FORMAT_EGRESS_EXT_IPV6_L2_STC;
typedef CPSS_DXCH_PCL_RULE_FORMAT_EGRESS_EXT_IPV6_L4_STC CPSS_DXCH_PCL_RULE_FORMAT_EGRESS_EXT_IPV6_L4_STC;
typedef CPSS_DXCH_PCL_RULE_FORMAT_EGRESS_EXT_NOT_IPV6_STC CPSS_DXCH_PCL_RULE_FORMAT_EGRESS_EXT_NOT_IPV6_STC;
typedef CPSS_DXCH_PCL_RULE_FORMAT_EGRESS_IP_COMMON_STC CPSS_DXCH_PCL_RULE_FORMAT_EGRESS_IP_COMMON_STC;
typedef CPSS_DXCH_PCL_RULE_FORMAT_EGRESS_STD_IPV4_L4_STC CPSS_DXCH_PCL_RULE_FORMAT_EGRESS_STD_IPV4_L4_STC;
typedef CPSS_DXCH_PCL_RULE_FORMAT_EGRESS_STD_IP_L2_QOS_STC CPSS_DXCH_PCL_RULE_FORMAT_EGRESS_STD_IP_L2_QOS_STC;
typedef CPSS_DXCH_PCL_RULE_FORMAT_EGRESS_STD_NOT_IP_STC CPSS_DXCH_PCL_RULE_FORMAT_EGRESS_STD_NOT_IP_STC;
typedef CPSS_DXCH_PCL_RULE_FORMAT_EGRESS_UDB60_FIXED_STC CPSS_DXCH_PCL_RULE_FORMAT_EGRESS_UDB60_FIXED_STC;
typedef CPSS_DXCH_PCL_RULE_FORMAT_EGRESS_UDB_ONLY_STC CPSS_DXCH_PCL_RULE_FORMAT_EGRESS_UDB_ONLY_STC;
typedef CPSS_DXCH_PCL_RULE_FORMAT_EGRESS_UDB_REPLACED_STC CPSS_DXCH_PCL_RULE_FORMAT_EGRESS_UDB_REPLACED_STC;
typedef CPSS_DXCH_PCL_RULE_FORMAT_EGRESS_ULTRA_IPV6_RACL_VACL_STC CPSS_DXCH_PCL_RULE_FORMAT_EGRESS_ULTRA_IPV6_RACL_VACL_STC;
typedef CPSS_DXCH_PCL_RULE_FORMAT_EXT_IPV4_PORT_VLAN_QOS_STC CPSS_DXCH_PCL_RULE_FORMAT_EXT_IPV4_PORT_VLAN_QOS_STC;
typedef CPSS_DXCH_PCL_RULE_FORMAT_EXT_IPV6_L2_STC CPSS_DXCH_PCL_RULE_FORMAT_EXT_IPV6_L2_STC;
typedef CPSS_DXCH_PCL_RULE_FORMAT_EXT_IPV6_L4_STC CPSS_DXCH_PCL_RULE_FORMAT_EXT_IPV6_L4_STC;
typedef CPSS_DXCH_PCL_RULE_FORMAT_EXT_NOT_IPV6_STC CPSS_DXCH_PCL_RULE_FORMAT_EXT_NOT_IPV6_STC;
typedef CPSS_DXCH_PCL_RULE_FORMAT_INGRESS_EXTENDED_UDB_STC CPSS_DXCH_PCL_RULE_FORMAT_INGRESS_EXTENDED_UDB_STC;
typedef CPSS_DXCH_PCL_RULE_FORMAT_INGRESS_STANDARD_UDB_STC CPSS_DXCH_PCL_RULE_FORMAT_INGRESS_STANDARD_UDB_STC;
typedef CPSS_DXCH_PCL_RULE_FORMAT_INGRESS_UDB60_FIXED_STC CPSS_DXCH_PCL_RULE_FORMAT_INGRESS_UDB60_FIXED_STC;
typedef CPSS_DXCH_PCL_RULE_FORMAT_INGRESS_UDB80_FIXED_STC CPSS_DXCH_PCL_RULE_FORMAT_INGRESS_UDB80_FIXED_STC;
typedef CPSS_DXCH_PCL_RULE_FORMAT_INGRESS_UDB_COMMON_STC CPSS_DXCH_PCL_RULE_FORMAT_INGRESS_UDB_COMMON_STC;
typedef CPSS_DXCH_PCL_RULE_FORMAT_INGRESS_UDB_ONLY_STC CPSS_DXCH_PCL_RULE_FORMAT_INGRESS_UDB_ONLY_STC;
typedef CPSS_DXCH_PCL_RULE_FORMAT_INGRESS_UDB_REPLACED_STC CPSS_DXCH_PCL_RULE_FORMAT_INGRESS_UDB_REPLACED_STC;
typedef CPSS_DXCH_PCL_RULE_FORMAT_IP_COMMON_STC CPSS_DXCH_PCL_RULE_FORMAT_IP_COMMON_STC;
typedef CPSS_DXCH_PCL_RULE_FORMAT_STD_IPV4_L4_STC CPSS_DXCH_PCL_RULE_FORMAT_STD_IPV4_L4_STC;
typedef CPSS_DXCH_PCL_RULE_FORMAT_STD_IPV4_ROUTED_ACL_QOS_STC CPSS_DXCH_PCL_RULE_FORMAT_STD_IPV4_ROUTED_ACL_QOS_STC;
typedef CPSS_DXCH_PCL_RULE_FORMAT_STD_IPV6_DIP_STC CPSS_DXCH_PCL_RULE_FORMAT_STD_IPV6_DIP_STC;
typedef CPSS_DXCH_PCL_RULE_FORMAT_STD_IP_L2_QOS_STC CPSS_DXCH_PCL_RULE_FORMAT_STD_IP_L2_QOS_STC;
typedef CPSS_DXCH_PCL_RULE_FORMAT_STD_NOT_IP_STC CPSS_DXCH_PCL_RULE_FORMAT_STD_NOT_IP_STC;
typedef enum {CPSS_DXCH_PCL_RULE_FORMAT_INGRESS_STD_NOT_IP_E, CPSS_DXCH_PCL_RULE_FORMAT_INGRESS_STD_IP_L2_QOS_E, 
    CPSS_DXCH_PCL_RULE_FORMAT_INGRESS_STD_IPV4_L4_E, CPSS_DXCH_PCL_RULE_FORMAT_INGRESS_STD_IPV6_DIP_E, 
    CPSS_DXCH_PCL_RULE_FORMAT_INGRESS_EXT_NOT_IPV6_E, CPSS_DXCH_PCL_RULE_FORMAT_INGRESS_EXT_IPV6_L2_E, 
    CPSS_DXCH_PCL_RULE_FORMAT_INGRESS_EXT_IPV6_L4_E, CPSS_DXCH_PCL_RULE_FORMAT_EGRESS_STD_NOT_IP_E, 
    CPSS_DXCH_PCL_RULE_FORMAT_EGRESS_STD_IP_L2_QOS_E, CPSS_DXCH_PCL_RULE_FORMAT_EGRESS_STD_IPV4_L4_E, 
    CPSS_DXCH_PCL_RULE_FORMAT_EGRESS_EXT_NOT_IPV6_E, CPSS_DXCH_PCL_RULE_FORMAT_EGRESS_EXT_IPV6_L2_E, 
    CPSS_DXCH_PCL_RULE_FORMAT_EGRESS_EXT_IPV6_L4_E, CPSS_DXCH_PCL_RULE_FORMAT_INGRESS_STD_UDB_E, 
    CPSS_DXCH_PCL_RULE_FORMAT_INGRESS_EXT_UDB_E, CPSS_DXCH_PCL_RULE_FORMAT_INGRESS_STD_IPV4_ROUTED_ACL_QOS_E, 
    CPSS_DXCH_PCL_RULE_FORMAT_INGRESS_EXT_IPV4_PORT_VLAN_QOS_E, CPSS_DXCH_PCL_RULE_FORMAT_INGRESS_ULTRA_IPV6_PORT_VLAN_QOS_E, 
    CPSS_DXCH_PCL_RULE_FORMAT_INGRESS_ULTRA_IPV6_ROUTED_ACL_QOS_E, CPSS_DXCH_PCL_RULE_FORMAT_EGRESS_EXT_IPV4_RACL_VACL_E, 
    CPSS_DXCH_PCL_RULE_FORMAT_EGRESS_ULTRA_IPV6_RACL_VACL_E, CPSS_DXCH_PCL_RULE_FORMAT_INGRESS_UDB_10_E, 
    CPSS_DXCH_PCL_RULE_FORMAT_INGRESS_UDB_20_E, CPSS_DXCH_PCL_RULE_FORMAT_INGRESS_UDB_30_E, 
    CPSS_DXCH_PCL_RULE_FORMAT_INGRESS_UDB_40_E, CPSS_DXCH_PCL_RULE_FORMAT_INGRESS_UDB_50_E, 
    CPSS_DXCH_PCL_RULE_FORMAT_INGRESS_UDB_60_E, CPSS_DXCH_PCL_RULE_FORMAT_EGRESS_UDB_10_E, 
    CPSS_DXCH_PCL_RULE_FORMAT_EGRESS_UDB_20_E, CPSS_DXCH_PCL_RULE_FORMAT_EGRESS_UDB_30_E, CPSS_DXCH_PCL_RULE_FORMAT_EGRESS_UDB_40_E, 
    CPSS_DXCH_PCL_RULE_FORMAT_EGRESS_UDB_50_E, CPSS_DXCH_PCL_RULE_FORMAT_EGRESS_UDB_60_E, 
    CPSS_DXCH_PCL_RULE_FORMAT_INGRESS_UDB_60_NO_FIXED_FIELDS_E, CPSS_DXCH_PCL_RULE_FORMAT_INGRESS_UDB_80_E, 
    CPSS_DXCH_PCL_RULE_FORMAT_EGRESS_UDB_60_NO_FIXED_FIELDS_E, CPSS_DXCH_PCL_RULE_FORMAT_LAST_E} CPSS_DXCH_PCL_RULE_FORMAT_TYPE_ENT;
typedef CPSS_DXCH_PCL_RULE_FORMAT_ULTRA_IPV6_PORT_VLAN_QOS_STC CPSS_DXCH_PCL_RULE_FORMAT_ULTRA_IPV6_PORT_VLAN_QOS_STC;
typedef CPSS_DXCH_PCL_RULE_FORMAT_ULTRA_IPV6_ROUTED_ACL_QOS_STC CPSS_DXCH_PCL_RULE_FORMAT_ULTRA_IPV6_ROUTED_ACL_QOS_STC;
typedef CPSS_DXCH_PCL_RULE_FORMAT_UNT CPSS_DXCH_PCL_RULE_FORMAT_UNT;
typedef enum {CPSS_DXCH_PCL_TCAM_SEGMENT_MODE_1_TCAM_E, CPSS_DXCH_PCL_TCAM_SEGMENT_MODE_2_TCAMS_2_AND_2_E, 
    CPSS_DXCH_PCL_TCAM_SEGMENT_MODE_2_TCAMS_1_AND_3_E, CPSS_DXCH_PCL_TCAM_SEGMENT_MODE_2_TCAMS_3_AND_1_E, 
    CPSS_DXCH_PCL_TCAM_SEGMENT_MODE_4_TCAMS_E} CPSS_DXCH_PCL_TCAM_SEGMENT_MODE_ENT;
typedef CPSS_DXCH_PCL_UDB_SELECT_STC CPSS_DXCH_PCL_UDB_SELECT_STC;

File ../cpss/mainPpDrv/h/cpss/dxCh/dxChxGen/pha/cpssDxChPha.h:
typedef enum {CPSS_DXCH_PHA_FW_IMAGE_ID_DEFAULT_E, CPSS_DXCH_PHA_FW_IMAGE_ID_01_E} CPSS_DXCH_PHA_FW_IMAGE_ID_ENT;

File ../cpss/mainPpDrv/h/cpss/dxCh/dxChxGen/pha/private/prvCpssDxChPha.h:
PRV_CPSS_DXCH_PHA_FW_IMAGE_VERSION_INFO_STC;
PRV_CPSS_DXCH_PHA_FW_THREAD_INFO_STC;
typedef enum {Outer_L2_Start, Outer_L3_Start, Inner_L2_Start, Inner_L3_Start} HEADER_WINDOW_ANCHOR;
typedef enum {EXPAND_32B, EXPAND_48B, EXPAND_64B} HEADER_WINDOW_SIZE;
typedef enum {THR_ID_0, THR_ID_1, THR_ID_2, THR_ID_3, THR_ID_4, THR_ID_5, THR_ID_6, THR_ID_7, THR_ID_8, THR_ID_9, THR_ID_10, 
    THR_ID_11, THR_ID_12, THR_ID_13, THR_ID_14, THR_ID_15, THR_ID_16, THR_ID_17, THR_ID_18, THR_ID_19, THR_ID_20, THR_ID_21, 
    THR_ID_22, THR_ID_23, THR_ID_24, THR_ID_25, THR_ID_26, THR_ID_27, THR_ID_28, THR_ID_29, THR_ID_30, THR_ID_31, THR_ID_32, 
    THR_ID_33, THR_ID_34, THR_ID_35, THR_ID_36, THR_ID_37, THR_ID_38, THR_ID_39, THR_ID_40, THR_ID_41, THR_ID_42, THR_ID_43, 
    THR_ID_44, THR_ID_45, THR_ID_46, THR_ID_47, THR_ID_48, THR_ID_49, THR_ID_50, THR_ID_51, THR_ID_52, THR_ID_53, THR_ID_54, 
    THR_ID_55, THR_ID_56, THR_ID_57, THR_ID_58, THR_ID_59, THR_ID_60, THR_ID_61, THR_ID_62, THR_ID_63, 
    TOTAL_THREADS_NUMBER} PHA_FW_THREADS_ID_ENT;
typedef PRV_CPSS_DXCH_PHA_FW_IMAGE_VERSION_INFO_STC PRV_CPSS_DXCH_PHA_FW_IMAGE_VERSION_INFO_STC;
typedef PRV_CPSS_DXCH_PHA_FW_THREAD_INFO_STC PRV_CPSS_DXCH_PHA_FW_THREAD_INFO_STC;

File ../cpss/mainPpDrv/h/cpss/dxCh/dxChxGen/policer/cpssDxChPolicer.h:
CPSS_DXCH3_POLICER_METERING_ENTRY_STC;
CPSS_DXCH3_POLICER_METER_TB_ENVELOPE_PARAMS_STC;
CPSS_DXCH3_POLICER_METER_TB_PARAMS_UNT;
CPSS_DXCH3_POLICER_METER_TB_SR_TCM_PARAMS_STC;
CPSS_DXCH3_POLICER_METER_TB_TR_TCM_PARAMS_STC;
typedef enum {CPSS_DXCH3_POLICER_BILLING_CNTR_1_BYTE_E, CPSS_DXCH3_POLICER_BILLING_CNTR_16_BYTES_E, 
    CPSS_DXCH3_POLICER_BILLING_CNTR_PACKET_E} CPSS_DXCH3_POLICER_BILLING_CNTR_MODE_ENT;
typedef struct {
    GT_U64 greenCntr;
    GT_U64 yellowCntr;
    GT_U64 redCntr;
    CPSS_DXCH3_POLICER_BILLING_CNTR_MODE_ENT billingCntrMode;
    GT_BOOL billingCntrAllEnable;
    CPSS_DXCH3_POLICER_LM_CNTR_CAPTURE_MODE_ENT lmCntrCaptureMode;
    GT_U64 greenCntrSnapshot;
    GT_BOOL greenCntrSnapshotValid;
    CPSS_POLICER_PACKET_SIZE_MODE_ENT packetSizeMode;
    CPSS_DXCH3_POLICER_TT_PACKET_SIZE_MODE_ENT tunnelTerminationPacketSizeMode;
    CPSS_DXCH3_POLICER_DSA_TAG_COUNTING_MODE_ENT dsaTagCountingMode;
    CPSS_DXCH3_POLICER_TS_TAG_COUNTING_MODE_ENT timeStampCountingMode;
} CPSS_DXCH3_POLICER_BILLING_ENTRY_STC;
typedef enum {CPSS_DXCH3_POLICER_DSA_TAG_COUNTING_MODE_INCLUDED_E, 
    CPSS_DXCH3_POLICER_DSA_TAG_COUNTING_MODE_COMPENSATED_E} CPSS_DXCH3_POLICER_DSA_TAG_COUNTING_MODE_ENT;
typedef enum {CPSS_DXCH3_POLICER_LM_CNTR_CAPTURE_MODE_COPY_E, 
    CPSS_DXCH3_POLICER_LM_CNTR_CAPTURE_MODE_INSERT_E} CPSS_DXCH3_POLICER_LM_CNTR_CAPTURE_MODE_ENT;
typedef CPSS_DXCH3_POLICER_METERING_ENTRY_STC CPSS_DXCH3_POLICER_METERING_ENTRY_STC;
typedef enum {CPSS_DXCH3_POLICER_METER_MODE_SR_TCM_E, CPSS_DXCH3_POLICER_METER_MODE_TR_TCM_E, CPSS_DXCH3_POLICER_METER_MODE_MEF0_E, 
    CPSS_DXCH3_POLICER_METER_MODE_MEF1_E, CPSS_DXCH3_POLICER_METER_MODE_START_OF_ENVELOPE_E, 
    CPSS_DXCH3_POLICER_METER_MODE_NOT_START_OF_ENVELOPE_E} CPSS_DXCH3_POLICER_METER_MODE_ENT;
typedef enum {CPSS_DXCH3_POLICER_METER_RESOLUTION_BYTES_E, 
    CPSS_DXCH3_POLICER_METER_RESOLUTION_PACKETS_E} CPSS_DXCH3_POLICER_METER_RESOLUTION_ENT;
typedef CPSS_DXCH3_POLICER_METER_TB_ENVELOPE_PARAMS_STC CPSS_DXCH3_POLICER_METER_TB_ENVELOPE_PARAMS_STC;
typedef CPSS_DXCH3_POLICER_METER_TB_PARAMS_UNT CPSS_DXCH3_POLICER_METER_TB_PARAMS_UNT;
typedef CPSS_DXCH3_POLICER_METER_TB_SR_TCM_PARAMS_STC CPSS_DXCH3_POLICER_METER_TB_SR_TCM_PARAMS_STC;
typedef CPSS_DXCH3_POLICER_METER_TB_TR_TCM_PARAMS_STC CPSS_DXCH3_POLICER_METER_TB_TR_TCM_PARAMS_STC;
typedef enum {CPSS_DXCH3_POLICER_MNG_CNTR_SET0_E, CPSS_DXCH3_POLICER_MNG_CNTR_SET1_E, CPSS_DXCH3_POLICER_MNG_CNTR_SET2_E, 
    CPSS_DXCH3_POLICER_MNG_CNTR_DISABLED_E} CPSS_DXCH3_POLICER_MNG_CNTR_SET_ENT;
typedef enum {CPSS_DXCH3_POLICER_NON_CONFORM_CMD_NO_CHANGE_E, CPSS_DXCH3_POLICER_NON_CONFORM_CMD_DROP_E, 
    CPSS_DXCH3_POLICER_NON_CONFORM_CMD_REMARK_E, 
    CPSS_DXCH3_POLICER_NON_CONFORM_CMD_REMARK_BY_ENTRY_E} CPSS_DXCH3_POLICER_NON_CONFORM_CMD_ENT;
typedef enum {CPSS_DXCH3_POLICER_TS_TAG_COUNTING_MODE_INCLUDE_E, 
    CPSS_DXCH3_POLICER_TS_TAG_COUNTING_MODE_EXCLUDE_E} CPSS_DXCH3_POLICER_TS_TAG_COUNTING_MODE_ENT;
typedef enum {CPSS_DXCH3_POLICER_TT_PACKET_SIZE_REGULAR_E, 
    CPSS_DXCH3_POLICER_TT_PACKET_SIZE_PASSENGER_E} CPSS_DXCH3_POLICER_TT_PACKET_SIZE_MODE_ENT;
typedef enum {CPSS_DXCH_POLICER_COUNTING_DISABLE_E, CPSS_DXCH_POLICER_COUNTING_BILLING_IPFIX_E, CPSS_DXCH_POLICER_COUNTING_POLICY_E, 
    CPSS_DXCH_POLICER_COUNTING_VLAN_E} CPSS_DXCH_POLICER_COUNTING_MODE_ENT;
typedef enum {CPSS_DXCH_POLICER_E_ATTR_METER_MODE_DISABLED_E, CPSS_DXCH_POLICER_E_ATTR_METER_MODE_EPORT_ENABLED_E, 
    CPSS_DXCH_POLICER_E_ATTR_METER_MODE_EVLAN_ENABLED_E} CPSS_DXCH_POLICER_E_ATTR_METER_MODE_ENT;
typedef enum {CPSS_DXCH_POLICER_MEMORY_CTRL_MODE_0_E, CPSS_DXCH_POLICER_MEMORY_CTRL_MODE_1_E, 
    CPSS_DXCH_POLICER_MEMORY_CTRL_MODE_2_E, CPSS_DXCH_POLICER_MEMORY_CTRL_MODE_3_E, CPSS_DXCH_POLICER_MEMORY_CTRL_MODE_4_E, 
    CPSS_DXCH_POLICER_MEMORY_CTRL_MODE_5_E, CPSS_DXCH_POLICER_MEMORY_FLEX_MODE_E} CPSS_DXCH_POLICER_MEMORY_CTRL_MODE_ENT;
typedef enum {CPSS_DXCH_POLICER_METERING_CALC_METHOD_CIR_ONLY_E, 
    CPSS_DXCH_POLICER_METERING_CALC_METHOD_CIR_AND_CBS_E} CPSS_DXCH_POLICER_METERING_CALC_METHOD_ENT;
typedef enum {CPSS_DXCH_POLICER_MODIFY_DSCP_KEEP_PREVIOUS_E, CPSS_DXCH_POLICER_MODIFY_DSCP_DISABLE_E, 
    CPSS_DXCH_POLICER_MODIFY_DSCP_ENABLE_E, CPSS_DXCH_POLICER_MODIFY_DSCP_ENABLE_INNER_E} CPSS_DXCH_POLICER_MODIFY_DSCP_ENT;
typedef enum {CPSS_DXCH_POLICER_MODIFY_UP_KEEP_PREVIOUS_E, CPSS_DXCH_POLICER_MODIFY_UP_DISABLE_E, 
    CPSS_DXCH_POLICER_MODIFY_UP_ENABLE_E, CPSS_DXCH_POLICER_MODIFY_UP_ENABLE_TAG0_E} CPSS_DXCH_POLICER_MODIFY_UP_ENT;
typedef enum {CPSS_DXCH_POLICER_PORT_MODE_ADDR_SELECT_TYPE_FULL_E, 
    CPSS_DXCH_POLICER_PORT_MODE_ADDR_SELECT_TYPE_COMPRESSED_E} CPSS_DXCH_POLICER_PORT_MODE_ADDR_SELECT_TYPE_ENT;
typedef enum {CPSS_DXCH_POLICER_REMARK_MODE_L2_E, CPSS_DXCH_POLICER_REMARK_MODE_L3_E} CPSS_DXCH_POLICER_REMARK_MODE_ENT;
typedef enum {CPSS_DXCH_POLICER_STAGE_METER_MODE_PORT_E, 
    CPSS_DXCH_POLICER_STAGE_METER_MODE_FLOW_E} CPSS_DXCH_POLICER_STAGE_METER_MODE_ENT;
typedef enum {CPSS_DXCH_POLICER_STAGE_INGRESS_0_E, CPSS_DXCH_POLICER_STAGE_INGRESS_1_E, 
    CPSS_DXCH_POLICER_STAGE_EGRESS_E} CPSS_DXCH_POLICER_STAGE_TYPE_ENT;
typedef enum {CPSS_DXCH_POLICER_STORM_TYPE_UC_KNOWN_E, CPSS_DXCH_POLICER_STORM_TYPE_UC_UNKNOWN_E, 
    CPSS_DXCH_POLICER_STORM_TYPE_MC_UNREGISTERED_E, CPSS_DXCH_POLICER_STORM_TYPE_MC_REGISTERED_E, CPSS_DXCH_POLICER_STORM_TYPE_BC_E, 
    CPSS_DXCH_POLICER_STORM_TYPE_TCP_SYN_E} CPSS_DXCH_POLICER_STORM_TYPE_ENT;
typedef struct {
    GT_BOOL meteringEnable;
    GT_BOOL countingEnable;
    GT_U32 policerIndex;
    GT_BOOL ucKnownEnable;
    GT_U32 ucKnownOffset;
    GT_BOOL ucUnknownEnable;
    GT_U32 ucUnknownOffset;
    GT_BOOL mcRegisteredEnable;
    GT_U32 mcRegisteredOffset;
    GT_BOOL mcUnregisteredEnable;
    GT_U32 mcUnregisteredOffset;
    GT_BOOL bcEnable;
    GT_U32 bcOffset;
    GT_BOOL tcpSynEnable;
    GT_U32 tcpSynOffset;
} CPSS_DXCH_POLICER_TRIGGER_ENTRY_STC;

File ../cpss/mainPpDrv/h/cpss/dxCh/dxChxGen/port/cpssDxChPortAp.h:
typedef struct {
    GT_U32 postApPortNum;
    CPSS_PORT_MODE_SPEED_STC portMode;
    GT_BOOL hcdFound;
    GT_BOOL fecEnabled;
    GT_BOOL fcRxPauseEn;
    GT_BOOL fcTxPauseEn;
    CPSS_DXCH_PORT_FEC_MODE_ENT fecType;
} CPSS_DXCH_PORT_AP_STATUS_STC;

File ../cpss/mainPpDrv/h/cpss/dxCh/dxChxGen/port/cpssDxChPortCombo.h:
CPSS_DXCH_PORT_COMBO_PARAMS_STC;
CPSS_DXCH_PORT_MAC_PARAMS_STC;
typedef CPSS_DXCH_PORT_COMBO_PARAMS_STC CPSS_DXCH_PORT_COMBO_PARAMS_STC;
typedef CPSS_DXCH_PORT_MAC_PARAMS_STC CPSS_DXCH_PORT_MAC_PARAMS_STC;

File ../cpss/mainPpDrv/h/cpss/dxCh/dxChxGen/port/cpssDxChPortCtrl.h:
typedef enum {CPSS_DXCH_PA_UNIT_UNDEFINED_E = -1, CPSS_DXCH_PA_UNIT_RXDMA_0_E, CPSS_DXCH_PA_UNIT_RXDMA_1_E, 
    CPSS_DXCH_PA_UNIT_RXDMA_2_E, CPSS_DXCH_PA_UNIT_RXDMA_3_E, CPSS_DXCH_PA_UNIT_RXDMA_4_E, CPSS_DXCH_PA_UNIT_RXDMA_5_E, 
    CPSS_DXCH_PA_UNIT_TXQ_0_E, CPSS_DXCH_PA_UNIT_TXQ_1_E, CPSS_DXCH_PA_UNIT_TXQ_2_E, CPSS_DXCH_PA_UNIT_TXQ_3_E, 
    CPSS_DXCH_PA_UNIT_TXQ_4_E, CPSS_DXCH_PA_UNIT_TXQ_5_E, CPSS_DXCH_PA_UNIT_TXDMA_0_E, CPSS_DXCH_PA_UNIT_TXDMA_1_E, 
    CPSS_DXCH_PA_UNIT_TXDMA_2_E, CPSS_DXCH_PA_UNIT_TXDMA_3_E, CPSS_DXCH_PA_UNIT_TXDMA_4_E, CPSS_DXCH_PA_UNIT_TXDMA_5_E, 
    CPSS_DXCH_PA_UNIT_TX_FIFO_0_E, CPSS_DXCH_PA_UNIT_TX_FIFO_1_E, CPSS_DXCH_PA_UNIT_TX_FIFO_2_E, CPSS_DXCH_PA_UNIT_TX_FIFO_3_E, 
    CPSS_DXCH_PA_UNIT_TX_FIFO_4_E, CPSS_DXCH_PA_UNIT_TX_FIFO_5_E, CPSS_DXCH_PA_UNIT_ETH_TX_FIFO_0_E, 
    CPSS_DXCH_PA_UNIT_ETH_TX_FIFO_1_E, CPSS_DXCH_PA_UNIT_ILKN_TX_FIFO_E, CPSS_DXCH_PA_UNIT_RXDMA_GLUE_E, 
    CPSS_DXCH_PA_UNIT_TXDMA_GLUE_E, CPSS_DXCH_PA_UNIT_MPPM_E, CPSS_DXCH_PA_UNIT_MAX_E} CPSS_DXCH_PA_UNIT_ENT;
typedef enum {CPSS_DXCH_PORT_FC_MODE_802_3X_E, CPSS_DXCH_PORT_FC_MODE_PFC_E, CPSS_DXCH_PORT_FC_MODE_LL_FC_E, 
    CPSS_DXCH_PORT_FC_MODE_DISABLE_E} CPSS_DXCH_PORT_FC_MODE_ENT;
typedef enum {CPSS_DXCH_PORT_FEC_MODE_ENABLED_E, CPSS_DXCH_PORT_FEC_MODE_DISABLED_E, CPSS_DXCH_PORT_RS_FEC_MODE_ENABLED_E, 
    CPSS_DXCH_PORT_BOTH_FEC_MODE_ENABLED_E, CPSS_DXCH_PORT_RS_FEC_544_514_MODE_ENABLED_E, 
    CPSS_DXCH_PORT_FEC_MODE_LAST_E} CPSS_DXCH_PORT_FEC_MODE_ENT;
typedef enum {CPSS_DXCH_PORT_PCS_LOOPBACK_DISABLE_E, CPSS_DXCH_PORT_PCS_LOOPBACK_TX2RX_E, 
    CPSS_DXCH_PORT_PCS_LOOPBACK_RX2TX_E} CPSS_DXCH_PORT_PCS_LOOPBACK_MODE_ENT;
typedef enum {CPSS_DXCH_PORT_SERDES_AUTO_TUNE_MODE_TX_TRAINING_CFG_E, CPSS_DXCH_PORT_SERDES_AUTO_TUNE_MODE_TX_TRAINING_START_E, 
    CPSS_DXCH_PORT_SERDES_AUTO_TUNE_MODE_TX_TRAINING_STATUS_E, CPSS_DXCH_PORT_SERDES_AUTO_TUNE_MODE_RX_TRAINING_E, 
    CPSS_DXCH_PORT_SERDES_AUTO_TUNE_MODE_TRAINING_STOP_E, CPSS_DXCH_PORT_SERDES_AUTO_TUNE_MODE_ADAPTIVE_RX_TRAINING_START_E, 
    CPSS_DXCH_PORT_SERDES_AUTO_TUNE_MODE_ADAPTIVE_RX_TRAINING_STOP_E, CPSS_DXCH_PORT_SERDES_AUTO_TUNE_MODE_ENHANCE_E, 
    CPSS_DXCH_PORT_SERDES_AUTO_TUNE_MODE_RX_TRAINING_WAIT_FOR_FINISH_E = 9, CPSS_DXCH_PORT_SERDES_AUTO_TUNE_MODE_RX_TRAINING_VSR_E, 
    CPSS_DXCH_PORT_SERDES_AUTO_TUNE_MODE_FIXED_CTLE_E, 
    CPSS_DXCH_PORT_SERDES_AUTO_TUNE_MODE_LAST_E} CPSS_DXCH_PORT_SERDES_AUTO_TUNE_MODE_ENT;
typedef enum {CPSS_DXCH_PORT_SERDES_AUTO_TUNE_PASS_E, CPSS_DXCH_PORT_SERDES_AUTO_TUNE_FAIL_E, 
    CPSS_DXCH_PORT_SERDES_AUTO_TUNE_NOT_COMPLITED_E} CPSS_DXCH_PORT_SERDES_AUTO_TUNE_STATUS_ENT;
typedef enum {CPSS_DXCH_PORT_SERDES_LOOPBACK_DISABLE_E, CPSS_DXCH_PORT_SERDES_LOOPBACK_ANALOG_TX2RX_E, 
    CPSS_DXCH_PORT_SERDES_LOOPBACK_DIGITAL_TX2RX_E, CPSS_DXCH_PORT_SERDES_LOOPBACK_DIGITAL_RX2TX_E, 
    CPSS_DXCH_PORT_SERDES_LOOPBACK_MAX_E} CPSS_DXCH_PORT_SERDES_LOOPBACK_MODE_ENT;
typedef enum {CPSS_DXCH_PORT_SERDES_SPEED_1_25_E, CPSS_DXCH_PORT_SERDES_SPEED_3_125_E, CPSS_DXCH_PORT_SERDES_SPEED_3_75_E, 
    CPSS_DXCH_PORT_SERDES_SPEED_6_25_E, CPSS_DXCH_PORT_SERDES_SPEED_5_E, CPSS_DXCH_PORT_SERDES_SPEED_4_25_E, 
    CPSS_DXCH_PORT_SERDES_SPEED_2_5_E, CPSS_DXCH_PORT_SERDES_SPEED_5_156_E, CPSS_DXCH_PORT_SERDES_SPEED_10_3125_E, 
    CPSS_DXCH_PORT_SERDES_SPEED_3_333_E, CPSS_DXCH_PORT_SERDES_SPEED_12_5_E, CPSS_DXCH_PORT_SERDES_SPEED_7_5_E, 
    CPSS_DXCH_PORT_SERDES_SPEED_11_25_E, CPSS_DXCH_PORT_SERDES_SPEED_11_5625_E, CPSS_DXCH_PORT_SERDES_SPEED_10_9375_E, 
    CPSS_DXCH_PORT_SERDES_SPEED_12_1875_E, CPSS_DXCH_PORT_SERDES_SPEED_5_625_E, CPSS_DXCH_PORT_SERDES_SPEED_12_8906_E, 
    CPSS_DXCH_PORT_SERDES_SPEED_20_625_E, CPSS_DXCH_PORT_SERDES_SPEED_25_78125_E, CPSS_DXCH_PORT_SERDES_SPEED_27_5_E, 
    CPSS_DXCH_PORT_SERDES_SPEED_28_05_E, CPSS_DXCH_PORT_SERDES_SPEED_26_25_E, 
    CPSS_DXCH_PORT_SERDES_SPEED_NA_E} CPSS_DXCH_PORT_SERDES_SPEED_ENT;

File ../cpss/mainPpDrv/h/cpss/dxCh/dxChxGen/port/cpssDxChPortEcn.h:
CPSS_PORT_QUEUE_DP_ECN_PARAMS_STC;
CPSS_PORT_QUEUE_ECN_PARAMS_STC;
typedef struct {
    GT_BOOL ecnEnable;
    GT_U32 ecnOffset;
} CPSS_PORT_QUEUE_DP_ECN_PARAMS_STC;
typedef struct {
    CPSS_PORT_QUEUE_DP_ECN_PARAMS_STC dp0EcnAttributes;
    CPSS_PORT_QUEUE_DP_ECN_PARAMS_STC dp1EcnAttributes;
    CPSS_PORT_QUEUE_DP_ECN_PARAMS_STC dp2EcnAttributes;
} CPSS_PORT_QUEUE_ECN_PARAMS_STC;

File ../cpss/mainPpDrv/h/cpss/dxCh/dxChxGen/port/cpssDxChPortEee.h:
typedef enum {CPSS_DXCH_PORT_EEE_LPI_MANUAL_MODE_DISABLED_E, CPSS_DXCH_PORT_EEE_LPI_MANUAL_MODE_ENABLED_E, 
    CPSS_DXCH_PORT_EEE_LPI_MANUAL_MODE_FORCED_E} CPSS_DXCH_PORT_EEE_LPI_MANUAL_MODE_ENT;

File ../cpss/mainPpDrv/h/cpss/dxCh/dxChxGen/port/cpssDxChPortMapping.h:
CPSS_DXCH_DETAILED_PORT_MAP_STC;
CPSS_DXCH_EXT_SHADOW_PORT_MAP_STC;
CPSS_DXCH_SHADOW_PORT_MAP_STC;
CPSS_DXCH_TXQ_INFO_STC;
typedef CPSS_DXCH_DETAILED_PORT_MAP_STC CPSS_DXCH_DETAILED_PORT_MAP_STC;
typedef CPSS_DXCH_EXT_SHADOW_PORT_MAP_STC CPSS_DXCH_EXT_SHADOW_PORT_MAP_STC;
typedef enum {CPSS_DXCH_PORT_MAPPING_TYPE_ETHERNET_MAC_E, CPSS_DXCH_PORT_MAPPING_TYPE_CPU_SDMA_E, 
    CPSS_DXCH_PORT_MAPPING_TYPE_ILKN_CHANNEL_E, CPSS_DXCH_PORT_MAPPING_TYPE_REMOTE_PHYSICAL_PORT_E, 
    CPSS_DXCH_PORT_MAPPING_TYPE_MAX_E, CPSS_DXCH_PORT_MAPPING_TYPE_INVALID_E = -1} CPSS_DXCH_PORT_MAPPING_TYPE_ENT;
typedef struct {
    GT_PHYSICAL_PORT_NUM physicalPortNumber;
    CPSS_DXCH_PORT_MAPPING_TYPE_ENT mappingType;
    GT_U32 portGroup;
    GT_U32 interfaceNum;
    GT_U32 txqPortNumber;
    GT_BOOL tmEnable;
    GT_U32 tmPortInd;
    GT_BOOL reservePreemptiveChannel;
} CPSS_DXCH_PORT_MAP_STC;
typedef CPSS_DXCH_SHADOW_PORT_MAP_STC CPSS_DXCH_SHADOW_PORT_MAP_STC;
typedef CPSS_DXCH_TXQ_INFO_STC CPSS_DXCH_TXQ_INFO_STC;

File ../cpss/mainPpDrv/h/cpss/dxCh/dxChxGen/port/cpssDxChPortPfc.h:
CPSS_DXCH_PFC_THRESHOLD_STC;
typedef struct {
    CPSS_DXCH_PORT_PFC_XON_MODE_ENT xonMode;
    GT_U32 xonOffsetValue;
} CPSS_DXCH_PFC_HYSTERESIS_CONF_STC;
typedef struct {
    GT_U32 alfa;
    GT_U32 guaranteedThreshold;
} CPSS_DXCH_PFC_THRESHOLD_STC;
typedef enum {CPSS_DXCH_PORT_PFC_XON_MODE_OFFSET_E, CPSS_DXCH_PORT_PFC_XON_MODE_FIXED_E} CPSS_DXCH_PORT_PFC_XON_MODE_ENT;
typedef enum {CPSS_PORT_TX_PFC_AVAILABLE_BUFF_CONF_MODE_GLOBAL_TC_E, CPSS_PORT_TX_PFC_AVAILABLE_BUFF_CONF_MODE_PORT_TC_E, 
    CPSS_PORT_TX_PFC_AVAILABLE_BUFF_CONF_MODE_GLOBAL_AND_PORT_TC_E} CPSS_PORT_TX_PFC_AVAILABLE_BUFF_CONF_MODE_ENT;
typedef enum {CPSS_PORT_TX_PFC_RESOURCE_MODE_GLOBAL_E, CPSS_PORT_TX_PFC_RESOURCE_MODE_POOL_E, 
    CPSS_PORT_TX_PFC_RESOURCE_MODE_POOL_WITH_HEADROOM_SUBTRACTION_E} CPSS_PORT_TX_PFC_RESOURCE_MODE_ENT;

File ../cpss/mainPpDrv/h/cpss/dxCh/dxChxGen/port/cpssDxChPortPip.h:
CPSS_DXCH_PORT_RXDMA_DROP_COUNTER_MODE_INFO_STC;
typedef CPSS_DXCH_PORT_RXDMA_DROP_COUNTER_MODE_INFO_STC CPSS_DXCH_PORT_RXDMA_DROP_COUNTER_MODE_INFO_STC;

File ../cpss/mainPpDrv/h/cpss/dxCh/dxChxGen/port/cpssDxChPortStat.h:
typedef enum {CPSS_DXCH_PORT_MAC_OVERSIZED_PACKETS_COUNTER_MODE_NORMAL_E, 
    CPSS_DXCH_PORT_MAC_OVERSIZED_PACKETS_COUNTER_MODE_HISTOGRAM_1518_E, 
    CPSS_DXCH_PORT_MAC_OVERSIZED_PACKETS_COUNTER_MODE_HISTOGRAM_1522_E} CPSS_DXCH_PORT_MAC_OVERSIZED_PACKETS_COUNTER_MODE_ENT;

File ../cpss/mainPpDrv/h/cpss/dxCh/dxChxGen/port/private/prvCpssDxChPort.h:
PRV_CPSS_DXCH_PORT_OBJ_STC;
typedef GT_STATUS (*)(GT_U8, GT_PHYSICAL_PORT_NUM, CPSS_PORT_INTERFACE_MODE_ENT *) PRV_CPSS_DXCH_PORT_INTERFACE_MODE_GET_FUN;
typedef GT_STATUS (*)(GT_U8, GT_PHYSICAL_PORT_NUM, CPSS_PORT_INTERFACE_MODE_ENT) PRV_CPSS_DXCH_PORT_INTERFACE_MODE_SET_FUN;
typedef PRV_CPSS_DXCH_PORT_OBJ_STC * PRV_CPSS_DXCH_PORT_OBJ_PTR;
typedef PRV_CPSS_DXCH_PORT_OBJ_STC PRV_CPSS_DXCH_PORT_OBJ_STC;
typedef enum {PRV_CPSS_DXCH_PORT_SERDES_EXT_CFG_REG2_0_E, PRV_CPSS_DXCH_PORT_SERDES_EXT_CFG_REG1_E, 
    PRV_CPSS_DXCH_PORT_SERDES_EXT_CFG_REG2_1_E, PRV_CPSS_DXCH_PORT_SERDES_EXT_CFG_REG2_2_E, 
    PRV_CPSS_DXCH_PORT_SERDES_EXT_CFG_REG2_3_E, PRV_CPSS_DXCH_PORT_SERDES_EXT_CFG_REG2_4_E, 
    PRV_CPSS_DXCH_PORT_SERDES_EXT_REG_NUM_E} PRV_CPSS_DXCH_PORT_SERDES_EXT_REG_ENT;
typedef GT_STATUS (*)(GT_U8, GT_PHYSICAL_PORT_NUM, CPSS_PORT_DIRECTION_ENT, GT_U32, 
    GT_BOOL) PRV_CPSS_DXCH_PORT_SERDES_POWER_STATUS_SET_FUN;
typedef GT_STATUS (*)(GT_U8, GT_PHYSICAL_PORT_NUM, CPSS_PORT_SPEED_ENT *) PRV_CPSS_DXCH_PORT_SPEED_GET_FUN;
typedef GT_STATUS (*)(GT_U8, GT_PHYSICAL_PORT_NUM, CPSS_PORT_SPEED_ENT) PRV_CPSS_DXCH_PORT_SPEED_SET_FUN;

File ../cpss/mainPpDrv/h/cpss/dxCh/dxChxGen/private/lpm/prvCpssDxChLpmTypes.h:
typedef enum {PRV_CPSS_DXCH_LPM_PROTOCOL_IPV4_E, PRV_CPSS_DXCH_LPM_PROTOCOL_IPV6_E, PRV_CPSS_DXCH_LPM_PROTOCOL_FCOE_E, 
    PRV_CPSS_DXCH_LPM_PROTOCOL_LAST_E} PRV_CPSS_DXCH_LPM_PROTOCOL_STACK_ENT;

File ../cpss/mainPpDrv/h/cpss/dxCh/dxChxGen/private/lpm/ram/prvCpssDxChLpmRamTypes.h:
typedef enum {PRV_CPSS_DXCH_LPM_RAM_MEM_MODE_FULL_MEM_SIZE_E, 
    PRV_CPSS_DXCH_LPM_RAM_MEM_MODE_HALF_MEM_SIZE_E} PRV_CPSS_DXCH_LPM_RAM_MEM_MODE_ENT;

File ../cpss/mainPpDrv/h/cpss/dxCh/dxChxGen/ptpManager/cpssDxChPtpManagerCommonTypes.h:
CPSS_DXCH_PTP_MANAGER_DB_INFO_STC;
CPSS_DXCH_PTP_MANAGER_PTP_DELAY_VALUES_STC;
typedef CPSS_DXCH_PTP_MANAGER_DB_INFO_STC CPSS_DXCH_PTP_MANAGER_DB_INFO_STC;
typedef CPSS_DXCH_PTP_MANAGER_PTP_DELAY_VALUES_STC CPSS_DXCH_PTP_MANAGER_PTP_DELAY_VALUES_STC;

File ../cpss/mainPpDrv/h/cpss/dxCh/dxChxGen/tcam/cpssDxChTcam.h:
typedef enum {CPSS_DXCH_TCAM_IPCL_0_E, CPSS_DXCH_TCAM_IPCL_1_E, CPSS_DXCH_TCAM_IPCL_2_E, CPSS_DXCH_TCAM_EPCL_E, 
    CPSS_DXCH_TCAM_TTI_E} CPSS_DXCH_TCAM_CLIENT_ENT;

File ../cpss/mainPpDrv/h/cpss/dxCh/dxChxGen/trunk/cpssDxChTrunk.h:
CPSS_DXCH_TRUNK_LBH_CRC_MASK_ENTRY_STC;
typedef enum {CPSS_DXCH_TRUNK_IPV6_HASH_LSB_SIP_DIP_FLOW_E, CPSS_DXCH_TRUNK_IPV6_HASH_MSB_SIP_DIP_FLOW_E, 
    CPSS_DXCH_TRUNK_IPV6_HASH_MSB_LSB_SIP_DIP_FLOW_E, CPSS_DXCH_TRUNK_IPV6_HASH_LSB_SIP_DIP_E} CPSS_DXCH_TRUNK_IPV6_HASH_MODE_ENT;
typedef enum {CPSS_DXCH_TRUNK_L4_LBH_DISABLED_E, CPSS_DXCH_TRUNK_L4_LBH_LONG_E, 
    CPSS_DXCH_TRUNK_L4_LBH_SHORT_E} CPSS_DXCH_TRUNK_L4_LBH_MODE_ENT;
typedef CPSS_DXCH_TRUNK_LBH_CRC_MASK_ENTRY_STC CPSS_DXCH_TRUNK_LBH_CRC_MASK_ENTRY_STC;
typedef enum {CPSS_DXCH_TRUNK_LBH_CRC_6_MODE_E, CPSS_DXCH_TRUNK_LBH_CRC_16_AND_PEARSON_MODE_E, CPSS_DXCH_TRUNK_LBH_CRC_32_MODE_E, 
    CPSS_DXCH_TRUNK_LBH_CRC_32_FROM_HASH0_HASH1_MODE_E} CPSS_DXCH_TRUNK_LBH_CRC_MODE_ENT;
typedef enum {CPSS_DXCH_TRUNK_LBH_PACKETS_INFO_E, CPSS_DXCH_TRUNK_LBH_INGRESS_PORT_E, 
    CPSS_DXCH_TRUNK_LBH_PACKETS_INFO_CRC_E} CPSS_DXCH_TRUNK_LBH_GLOBAL_MODE_ENT;
typedef enum {CPSS_DXCH_TRUNK_MEMBERS_MODE_NATIVE_E, CPSS_DXCH_TRUNK_MEMBERS_MODE_SOHO_EMULATION_E, 
    CPSS_DXCH_TRUNK_MEMBERS_MODE_FLEX_E} CPSS_DXCH_TRUNK_MEMBERS_MODE_ENT;

File ../cpss/mainPpDrv/h/cpss/dxCh/dxChxGen/tti/cpssDxChTtiTypes.h:
CPSS_DXCH_TTI_ACTION_STC;
CPSS_DXCH_TTI_ETH_RULE_STC;
CPSS_DXCH_TTI_IPV4_RULE_STC;
CPSS_DXCH_TTI_MAC_TO_ME_SRC_INTERFACE_INFO_STC;
CPSS_DXCH_TTI_MAC_VLAN_STC;
CPSS_DXCH_TTI_MIM_RULE_STC;
CPSS_DXCH_TTI_MPLS_RULE_STC;
CPSS_DXCH_TTI_RULE_COMMON_STC;
CPSS_DXCH_TTI_RULE_UNT;
CPSS_DXCH_TTI_UDB_ARR_STC;
typedef CPSS_DXCH_TTI_ACTION_STC CPSS_DXCH_TTI_ACTION_STC;
typedef CPSS_DXCH_TTI_ETH_RULE_STC CPSS_DXCH_TTI_ETH_RULE_STC;
typedef CPSS_DXCH_TTI_IPV4_RULE_STC CPSS_DXCH_TTI_IPV4_RULE_STC;
typedef enum {CPSS_DXCH_TTI_KEY_SIZE_10_B_E, CPSS_DXCH_TTI_KEY_SIZE_20_B_E, 
    CPSS_DXCH_TTI_KEY_SIZE_30_B_E} CPSS_DXCH_TTI_KEY_SIZE_ENT;
typedef enum {CPSS_DXCH_TTI_KEY_IPV4_E, CPSS_DXCH_TTI_KEY_MPLS_E, CPSS_DXCH_TTI_KEY_ETH_E, CPSS_DXCH_TTI_KEY_MIM_E, 
    CPSS_DXCH_TTI_KEY_UDB_IPV4_TCP_E, CPSS_DXCH_TTI_KEY_UDB_IPV4_UDP_E, CPSS_DXCH_TTI_KEY_UDB_MPLS_E, 
    CPSS_DXCH_TTI_KEY_UDB_IPV4_FRAGMENT_E, CPSS_DXCH_TTI_KEY_UDB_IPV4_OTHER_E, CPSS_DXCH_TTI_KEY_UDB_ETHERNET_OTHER_E, 
    CPSS_DXCH_TTI_KEY_UDB_IPV6_E, CPSS_DXCH_TTI_KEY_UDB_IPV6_TCP_E, CPSS_DXCH_TTI_KEY_UDB_IPV6_UDP_E, CPSS_DXCH_TTI_KEY_UDB_UDE_E, 
    CPSS_DXCH_TTI_KEY_UDB_UDE1_E, CPSS_DXCH_TTI_KEY_UDB_UDE2_E, CPSS_DXCH_TTI_KEY_UDB_UDE3_E, CPSS_DXCH_TTI_KEY_UDB_UDE4_E, 
    CPSS_DXCH_TTI_KEY_UDB_UDE5_E, CPSS_DXCH_TTI_KEY_UDB_UDE6_E} CPSS_DXCH_TTI_KEY_TYPE_ENT;
typedef enum {CPSS_DXCH_TTI_MAC_MODE_DA_E, CPSS_DXCH_TTI_MAC_MODE_SA_E} CPSS_DXCH_TTI_MAC_MODE_ENT;
typedef enum {CPSS_DXCH_TTI_DONT_USE_SRC_INTERFACE_FIELDS_E, CPSS_DXCH_TTI_USE_SRC_INTERFACE_FIELDS_E, 
    CPSS_DXCH_TTI_USE_SRC_INTERFACE_FIELDS_EXCLUDE_SRC_DEVICE_E} CPSS_DXCH_TTI_MAC_TO_ME_INCLUDE_SRC_INTERFACE_TYPE_ENT;
typedef CPSS_DXCH_TTI_MAC_TO_ME_SRC_INTERFACE_INFO_STC CPSS_DXCH_TTI_MAC_TO_ME_SRC_INTERFACE_INFO_STC;
typedef CPSS_DXCH_TTI_MAC_VLAN_STC CPSS_DXCH_TTI_MAC_VLAN_STC;
typedef CPSS_DXCH_TTI_MIM_RULE_STC CPSS_DXCH_TTI_MIM_RULE_STC;
typedef enum {CPSS_DXCH_TTI_DO_NOT_MODIFY_PREV_DSCP_E, CPSS_DXCH_TTI_MODIFY_DSCP_ENABLE_E, CPSS_DXCH_TTI_MODIFY_DSCP_DISABLE_E, 
    CPSS_DXCH_TTI_MODIFY_DSCP_RESERVED_E} CPSS_DXCH_TTI_MODIFY_DSCP_ENT;
typedef enum {CPSS_DXCH_TTI_DO_NOT_MODIFY_PREV_UP_E, CPSS_DXCH_TTI_MODIFY_UP_ENABLE_E, CPSS_DXCH_TTI_MODIFY_UP_DISABLE_E, 
    CPSS_DXCH_TTI_MODIFY_UP_RESERVED_E} CPSS_DXCH_TTI_MODIFY_UP_ENT;
typedef enum {CPSS_DXCH_TTI_MPLS_NOP_CMD_E, CPSS_DXCH_TTI_MPLS_SWAP_CMD_E, CPSS_DXCH_TTI_MPLS_PUSH1_CMD_E, 
    CPSS_DXCH_TTI_MPLS_POP1_CMD_E, CPSS_DXCH_TTI_MPLS_POP2_CMD_E, CPSS_DXCH_TTI_MPLS_POP_AND_SWAP_CMD_E, 
    CPSS_DXCH_TTI_MPLS_POP3_CMD_E} CPSS_DXCH_TTI_MPLS_CMD_ENT;
typedef CPSS_DXCH_TTI_MPLS_RULE_STC CPSS_DXCH_TTI_MPLS_RULE_STC;
typedef enum {CPSS_DXCH_TTI_OFFSET_L2_E, CPSS_DXCH_TTI_OFFSET_L3_MINUS_2_E, CPSS_DXCH_TTI_OFFSET_L4_E, 
    CPSS_DXCH_TTI_OFFSET_MPLS_MINUS_2_E, CPSS_DXCH_TTI_OFFSET_METADATA_E, 
    CPSS_DXCH_TTI_OFFSET_INVALID_E} CPSS_DXCH_TTI_OFFSET_TYPE_ENT;
typedef enum {CPSS_DXCH_TTI_PASSENGER_PARSING_OF_TRANSIT_MPLS_TUNNEL_MODE_DISABLE_E, 
    CPSS_DXCH_TTI_PASSENGER_PARSING_OF_TRANSIT_MPLS_TUNNEL_MODE_AS_IP_E, 
    CPSS_DXCH_TTI_PASSENGER_PARSING_OF_TRANSIT_MPLS_TUNNEL_MODE_AS_ETH_E, 
    CPSS_DXCH_TTI_PASSENGER_PARSING_OF_TRANSIT_MPLS_TUNNEL_MODE_AS_CW_ETH_E} CPSS_DXCH_TTI_PASSENGER_PARSING_OF_TRANSIT_MPLS_TUNNEL_MODE_TYPE_ENT;
typedef enum {CPSS_DXCH_TTI_PASSENGER_IPV4_E, CPSS_DXCH_TTI_PASSENGER_IPV6_E, CPSS_DXCH_TTI_PASSENGER_ETHERNET_CRC_E, 
    CPSS_DXCH_TTI_PASSENGER_ETHERNET_NO_CRC_E, CPSS_DXCH_TTI_PASSENGER_IPV4V6_E, 
    CPSS_DXCH_TTI_PASSENGER_MPLS_E} CPSS_DXCH_TTI_PASSENGER_TYPE_ENT;
typedef enum {CPSS_DXCH_TTI_PTP_TRIGGER_TYPE_PTP_OVER_L2_E, CPSS_DXCH_TTI_PTP_TRIGGER_TYPE_PTP_OVER_IPV4_UDP_E, 
    CPSS_DXCH_TTI_PTP_TRIGGER_TYPE_PTP_OVER_IPV6_UDP_E, 
    CPSS_DXCH_TTI_PTP_TRIGGER_TYPE_RESERVED_E} CPSS_DXCH_TTI_PTP_TRIGGER_TYPE_ENT;
typedef enum {CPSS_DXCH_TTI_PW_TAG_DISABLED_MODE_E, CPSS_DXCH_TTI_PW_TAG_RAW_PW_MODE_E, 
    CPSS_DXCH_TTI_PW_TAG_TAGGED_PW_MODE_E} CPSS_DXCH_TTI_PW_TAG_MODE_ENT;
typedef enum {CPSS_DXCH_TTI_NO_REDIRECT_E, CPSS_DXCH_TTI_REDIRECT_TO_EGRESS_E, CPSS_DXCH_TTI_REDIRECT_TO_ROUTER_LOOKUP_E, 
    CPSS_DXCH_TTI_VRF_ID_ASSIGN_E = 4, CPSS_DXCH_TTI_LOGICAL_PORT_ASSIGN_E} CPSS_DXCH_TTI_REDIRECT_COMMAND_ENT;
typedef CPSS_DXCH_TTI_RULE_COMMON_STC CPSS_DXCH_TTI_RULE_COMMON_STC;
typedef enum {CPSS_DXCH_TTI_RULE_IPV4_E, CPSS_DXCH_TTI_RULE_MPLS_E, CPSS_DXCH_TTI_RULE_ETH_E, CPSS_DXCH_TTI_RULE_MIM_E, 
    CPSS_DXCH_TTI_RULE_UDB_10_E, CPSS_DXCH_TTI_RULE_UDB_20_E, CPSS_DXCH_TTI_RULE_UDB_30_E} CPSS_DXCH_TTI_RULE_TYPE_ENT;
typedef CPSS_DXCH_TTI_RULE_UNT CPSS_DXCH_TTI_RULE_UNT;
typedef enum {CPSS_DXCH_TTI_TAG1_UP_ASSIGN_VLAN1_UNTAGGED_E, CPSS_DXCH_TTI_TAG1_UP_ASSIGN_VLAN0_UNTAGGED_E, 
    CPSS_DXCH_TTI_TAG1_UP_ASSIGN_ALL_E, CPSS_DXCH_TTI_TAG1_UP_ASSIGN_NONE_E} CPSS_DXCH_TTI_TAG1_UP_COMMAND_ENT;
typedef CPSS_DXCH_TTI_UDB_ARR_STC CPSS_DXCH_TTI_UDB_ARR_STC;
typedef enum {CPSS_DXCH_TTI_VLAN_DO_NOT_MODIFY_E, CPSS_DXCH_TTI_VLAN_MODIFY_UNTAGGED_E, CPSS_DXCH_TTI_VLAN_MODIFY_TAGGED_E, 
    CPSS_DXCH_TTI_VLAN_MODIFY_ALL_E} CPSS_DXCH_TTI_VLAN_COMMAND_ENT;

File ../cpss/mainPpDrv/h/cpss/dxCh/dxChxGen/tunnel/cpssDxChTunnelTypes.h:
CPSS_DXCH_TUNNEL_START_CONFIG_UNT;
CPSS_DXCH_TUNNEL_START_GENERIC_CONFIG_STC;
CPSS_DXCH_TUNNEL_START_IPV4_CONFIG_STC;
CPSS_DXCH_TUNNEL_START_IPV6_CONFIG_STC;
CPSS_DXCH_TUNNEL_START_MIM_CONFIG_STC;
CPSS_DXCH_TUNNEL_START_MPLS_CONFIG_STC;
typedef enum {CPSS_DXCH_TUNNEL_HEADER_LENGTH_L3_ANCHOR_TYPE_E, CPSS_DXCH_TUNNEL_HEADER_LENGTH_L4_ANCHOR_TYPE_E, 
    CPSS_DXCH_TUNNEL_HEADER_LENGTH_PROFILE_BASED_ANCHOR_TYPE_E} CPSS_DXCH_TUNNEL_HEADER_LENGTH_ANCHOR_TYPE_ENT;
typedef enum {CPSS_DXCH_TUNNEL_PASSENGER_ETHERNET_E, CPSS_DXCH_TUNNEL_PASSENGER_OTHER_E} CPSS_DXCH_TUNNEL_PASSANGER_TYPE_ENT;
typedef CPSS_DXCH_TUNNEL_START_CONFIG_UNT CPSS_DXCH_TUNNEL_START_CONFIG_UNT;
typedef enum {CPSS_DXCH_TUNNEL_START_ECN_COMPATIBILITY_MODE_E, 
    CPSS_DXCH_TUNNEL_START_ECN_NORMAL_MODE_E} CPSS_DXCH_TUNNEL_START_ECN_MODE_ENT;
typedef enum {CPSS_DXCH_TUNNEL_START_FLOW_LABEL_ASSIGN_TO_ZERO_E, 
    CPSS_DXCH_TUNNEL_START_FLOW_LABEL_ASSIGN_TO_PACKET_HASH_VALUE_E} CPSS_DXCH_TUNNEL_START_FLOW_LABEL_ASSIGN_MODE_ENT;
typedef CPSS_DXCH_TUNNEL_START_GENERIC_CONFIG_STC CPSS_DXCH_TUNNEL_START_GENERIC_CONFIG_STC;
typedef enum {CPSS_DXCH_TUNNEL_START_GENERIC_SHORT_TYPE_E, CPSS_DXCH_TUNNEL_START_GENERIC_MEDIUM_TYPE_E, 
    CPSS_DXCH_TUNNEL_START_GENERIC_LONG_TYPE_E} CPSS_DXCH_TUNNEL_START_GENERIC_TYPE_ENT;
typedef CPSS_DXCH_TUNNEL_START_IPV4_CONFIG_STC CPSS_DXCH_TUNNEL_START_IPV4_CONFIG_STC;
typedef CPSS_DXCH_TUNNEL_START_IPV6_CONFIG_STC CPSS_DXCH_TUNNEL_START_IPV6_CONFIG_STC;
typedef enum {CPSS_DXCH_TUNNEL_START_IP_HEADER_PROTOCOL_IP_E, CPSS_DXCH_TUNNEL_START_IP_HEADER_PROTOCOL_GRE_E, 
    CPSS_DXCH_TUNNEL_START_IP_HEADER_PROTOCOL_UDP_E, 
    CPSS_DXCH_TUNNEL_START_IP_HEADER_PROTOCOL_GENERIC_E} CPSS_DXCH_TUNNEL_START_IP_HEADER_PROTOCOL_ENT;
typedef enum {CPSS_DXCH_TUNNEL_START_MIM_B_DA_ASSIGN_FROM_TS_ENTRY_E, 
    CPSS_DXCH_TUNNEL_START_MIM_B_DA_ASSIGN_FROM_TS_ENTRY_AND_VLAN_ENTRY_E} CPSS_DXCH_TUNNEL_START_MIM_B_DA_ASSIGN_MODE_ENT;
typedef enum {CPSS_DXCH_TUNNEL_START_MIM_B_SA_ASSIGN_FROM_TARGET_EPORT_E, 
    CPSS_DXCH_TUNNEL_START_MIM_B_SA_ASSIGN_FROM_SOURCE_EPORT_E} CPSS_DXCH_TUNNEL_START_MIM_B_SA_ASSIGN_MODE_ENT;
typedef CPSS_DXCH_TUNNEL_START_MIM_CONFIG_STC CPSS_DXCH_TUNNEL_START_MIM_CONFIG_STC;
typedef enum {CPSS_DXCH_TUNNEL_START_MIM_I_SID_ASSIGN_FROM_TS_ENTRY_E, 
    CPSS_DXCH_TUNNEL_START_MIM_I_SID_ASSIGN_FROM_VLAN_ENTRY_E} CPSS_DXCH_TUNNEL_START_MIM_I_SID_ASSIGN_MODE_ENT;
typedef CPSS_DXCH_TUNNEL_START_MPLS_CONFIG_STC CPSS_DXCH_TUNNEL_START_MPLS_CONFIG_STC;
typedef enum {CPSS_DXCH_TUNNEL_START_MPLS_ETHER_TYPE_UC_E, 
    CPSS_DXCH_TUNNEL_START_MPLS_ETHER_TYPE_MC_E} CPSS_DXCH_TUNNEL_START_MPLS_ETHER_TYPE_ENT;
typedef enum {CPSS_DXCH_TUNNEL_START_MPLS_PW_EXP_MARK_FROM_EPORT_E, 
    CPSS_DXCH_TUNNEL_START_MPLS_PW_EXP_MARK_FROM_PACKET_QOS_PROFILE_E} CPSS_DXCH_TUNNEL_START_MPLS_PW_EXP_MARK_MODE_ENT;
typedef enum {CPSS_DXCH_TUNNEL_START_QOS_MARK_FROM_ENTRY_E, 
    CPSS_DXCH_TUNNEL_START_QOS_MARK_FROM_PACKET_QOS_PROFILE_E} CPSS_DXCH_TUNNEL_START_QOS_MARK_MODE_ENT;
typedef enum {CPSS_DXCH_TUNNEL_START_TTL_TO_INCOMING_TTL_E, CPSS_DXCH_TUNNEL_START_TTL_TO_SWAP_LABEL_E, 
    CPSS_DXCH_TUNNEL_START_TTL_TO_SWAP_LABEL_MINUS_ONE_E, 
    CPSS_DXCH_TUNNEL_START_TTL_TO_POP_OUTER_E} CPSS_DXCH_TUNNEL_START_TTL_MODE_ENT;

File ../cpss/mainPpDrv/h/cpss/dxCh/dxChxGen/txq/private/prvCpssDxChTxqMain.h:
PRV_CPSS_DXCH_HR_DB_INFO_STC;
PRV_CPSS_DXCH_SIP6_TXQ_QUEUE_PROFILE_LENGTH_ADJUST_STC;
PRV_CPSS_DXCH_SIP6_TXQ_QUEUE_PROFILE_LONG_Q_STC;
PRV_CPSS_DXCH_SIP6_TXQ_QUEUE_PROFILE_STC;
PRV_CPSS_DXCH_TXQ_SIP6_SEARCH_STC;
PRV_CPSS_DXCH_TXQ_SIP_6_CONFIGURATION;
PRV_CPSS_DXCH_TXQ_SIP_6_DMA_TO_PNODE_MAP_STC;
PRV_CPSS_DXCH_TXQ_SIP_6_GENERAL_CONFIGURATION;
PRV_CPSS_DXCH_TXQ_SIP_6_MAPPING_CONFIGURATION;
PRV_CPSS_DXCH_TXQ_SIP_6_PDX_PIZZA_CONFIG_STC;
PRV_CPSS_DXCH_TXQ_SIP_6_PHYSICAL_PORT_TO_ANODE_MAP_STC;
PRV_CPSS_DXCH_TXQ_SIP_6_P_NODE;
PRV_CPSS_DXCH_TXQ_SIP_6_SCHED_DBG_STC;
typedef PRV_CPSS_DXCH_HR_DB_INFO_STC PRV_CPSS_DXCH_HR_DB_INFO_STC;
typedef PRV_CPSS_DXCH_SIP6_TXQ_QUEUE_PROFILE_LENGTH_ADJUST_STC PRV_CPSS_DXCH_SIP6_TXQ_QUEUE_PROFILE_LENGTH_ADJUST_STC;
typedef PRV_CPSS_DXCH_SIP6_TXQ_QUEUE_PROFILE_LONG_Q_STC PRV_CPSS_DXCH_SIP6_TXQ_QUEUE_PROFILE_LONG_Q_STC;
typedef PRV_CPSS_DXCH_SIP6_TXQ_QUEUE_PROFILE_STC PRV_CPSS_DXCH_SIP6_TXQ_QUEUE_PROFILE_STC;
typedef PRV_CPSS_DXCH_TXQ_SIP6_SEARCH_STC PRV_CPSS_DXCH_TXQ_SIP6_SEARCH_STC;
typedef PRV_CPSS_DXCH_TXQ_SIP_6_CONFIGURATION PRV_CPSS_DXCH_TXQ_SIP_6_CONFIGURATION;
typedef PRV_CPSS_DXCH_TXQ_SIP_6_DMA_TO_PNODE_MAP_STC PRV_CPSS_DXCH_TXQ_SIP_6_DMA_TO_PNODE_MAP_STC;
typedef PRV_CPSS_DXCH_TXQ_SIP_6_GENERAL_CONFIGURATION PRV_CPSS_DXCH_TXQ_SIP_6_GENERAL_CONFIGURATION;
typedef PRV_CPSS_DXCH_TXQ_SIP_6_MAPPING_CONFIGURATION PRV_CPSS_DXCH_TXQ_SIP_6_MAPPING_CONFIGURATION;
typedef PRV_CPSS_DXCH_TXQ_SIP_6_PDX_PIZZA_CONFIG_STC PRV_CPSS_DXCH_TXQ_SIP_6_PDX_PIZZA_CONFIG_STC;
typedef enum {PRV_CPSS_DXCH_TXQ_SIP_6_PFCC_HEADROOM_TYPE_GLOBAL_TC, 
    PRV_CPSS_DXCH_TXQ_SIP_6_PFCC_HEADROOM_TYPE_POOL} PRV_CPSS_DXCH_TXQ_SIP_6_PFCC_HEADROOM_TYPE_ENT;
typedef PRV_CPSS_DXCH_TXQ_SIP_6_PHYSICAL_PORT_TO_ANODE_MAP_STC PRV_CPSS_DXCH_TXQ_SIP_6_PHYSICAL_PORT_TO_ANODE_MAP_STC;
typedef PRV_CPSS_DXCH_TXQ_SIP_6_P_NODE PRV_CPSS_DXCH_TXQ_SIP_6_P_NODE;
typedef PRV_CPSS_DXCH_TXQ_SIP_6_SCHED_DBG_STC PRV_CPSS_DXCH_TXQ_SIP_6_SCHED_DBG_STC;

File ../cpss/mainPpDrv/h/cpss/dxCh/dxChxGen/txq/private/units/prvCpssDxChTxqPdq.h:
PRV_CPSS_DXCH_TXQ_SIP_6_A_NODE;
PRV_CPSS_DXCH_TXQ_SIP_6_A_NODE_CONNECTED_QUEUES;
PRV_CPSS_DXCH_TXQ_SIP_6_Q_NODE;
PRV_CPSS_DXCH_TXQ_SIP_6_SCHED_PROFILE;
typedef PRV_CPSS_DXCH_TXQ_SIP_6_A_NODE PRV_CPSS_DXCH_TXQ_SIP_6_A_NODE;
typedef PRV_CPSS_DXCH_TXQ_SIP_6_A_NODE_CONNECTED_QUEUES PRV_CPSS_DXCH_TXQ_SIP_6_A_NODE_CONNECTED_QUEUES;
typedef PRV_CPSS_DXCH_TXQ_SIP_6_Q_NODE PRV_CPSS_DXCH_TXQ_SIP_6_Q_NODE;
typedef PRV_CPSS_DXCH_TXQ_SIP_6_SCHED_PROFILE PRV_CPSS_DXCH_TXQ_SIP_6_SCHED_PROFILE;
typedef enum {PRV_CPSS_PDQ_A_NODE_DATA_PATH_STATE_INITIAL_ENT, PRV_CPSS_PDQ_A_NODE_DATA_PATH_STATE_TXQ_PORT_ENABLED_ENT, 
    PRV_CPSS_PDQ_A_NODE_DATA_PATH_STATE_TXD_RESOURCE_CONFIGURED_ENT, 
    PRV_CPSS_PDQ_A_NODE_DATA_PATH_STATE_FULLY_CONFIGURED_ENT} PRV_CPSS_PDQ_A_NODE_DATA_PATH_STATE_ENT;
typedef enum {PRV_DXCH_TXQ_SIP6_PREEMTION_A_NODE_TYPE_EXP_E, PRV_DXCH_TXQ_SIP6_PREEMTION_A_NODE_TYPE_PRE_E, 
    PRV_DXCH_TXQ_SIP6_PREEMTION_A_NODE_TYPE_NONE_E} PRV_DXCH_TXQ_SIP6_PREEMTION_A_NODE_TYPE_ENT;

File ../cpss/mainPpDrv/h/cpss/dxCh/dxChxGen/txq/private/utils/prvCpssDxChTxqDebugUtils.h:
PRV_CPSS_DXCH_TXQ_SIP_6_ALERT_COUNTERS;
typedef PRV_CPSS_DXCH_TXQ_SIP_6_ALERT_COUNTERS PRV_CPSS_DXCH_TXQ_SIP_6_ALERT_COUNTERS;

File ../cpss/mainPpDrv/h/cpss/dxCh/dxChxGen/virtualTcam/cpssDxChVirtualTcam.h:
CPSS_DXCH_VIRTUAL_TCAM_INFO_STC;
CPSS_DXCH_VIRTUAL_TCAM_PCL_RULE_DATA_STC;
CPSS_DXCH_VIRTUAL_TCAM_PCL_RULE_TYPE_STC;
CPSS_DXCH_VIRTUAL_TCAM_RULE_ACTION_DATA_PCL_STC;
CPSS_DXCH_VIRTUAL_TCAM_RULE_ACTION_DATA_STC;
CPSS_DXCH_VIRTUAL_TCAM_RULE_ACTION_DATA_TTI_STC;
CPSS_DXCH_VIRTUAL_TCAM_RULE_ACTION_DATA_UNT;
CPSS_DXCH_VIRTUAL_TCAM_RULE_ACTION_TYPE_PCL_STC;
CPSS_DXCH_VIRTUAL_TCAM_RULE_ACTION_TYPE_STC;
CPSS_DXCH_VIRTUAL_TCAM_RULE_ACTION_TYPE_UNT;
CPSS_DXCH_VIRTUAL_TCAM_RULE_ATTRIBUTES_STC;
CPSS_DXCH_VIRTUAL_TCAM_RULE_DATA_STC;
CPSS_DXCH_VIRTUAL_TCAM_RULE_DATA_UNT;
CPSS_DXCH_VIRTUAL_TCAM_RULE_TYPE_STC;
CPSS_DXCH_VIRTUAL_TCAM_RULE_TYPE_UNT;
CPSS_DXCH_VIRTUAL_TCAM_TTI_RULE_DATA_STC;
CPSS_DXCH_VIRTUAL_TCAM_TTI_RULE_TYPE_STC;
CPSS_DXCH_VIRTUAL_TCAM_USAGE_STC;
typedef enum {CPSS_DXCH_VIRTUAL_TCAM_EQUAL_PRIORITY_RULE_POSITION_FIRST_E, 
    CPSS_DXCH_VIRTUAL_TCAM_EQUAL_PRIORITY_RULE_POSITION_LAST_E} CPSS_DXCH_VIRTUAL_TCAM_EQUAL_PRIORITY_RULE_POSITION_ENT;
typedef CPSS_DXCH_VIRTUAL_TCAM_INFO_STC CPSS_DXCH_VIRTUAL_TCAM_INFO_STC;
typedef struct {
    GT_BOOL haSupportEnabled;
    GT_U32 haFeaturesEnabledBmp;
} CPSS_DXCH_VIRTUAL_TCAM_MNG_CONFIG_PARAM_STC;
typedef CPSS_DXCH_VIRTUAL_TCAM_PCL_RULE_DATA_STC CPSS_DXCH_VIRTUAL_TCAM_PCL_RULE_DATA_STC;
typedef CPSS_DXCH_VIRTUAL_TCAM_PCL_RULE_TYPE_STC CPSS_DXCH_VIRTUAL_TCAM_PCL_RULE_TYPE_STC;
typedef CPSS_DXCH_VIRTUAL_TCAM_RULE_ACTION_DATA_PCL_STC CPSS_DXCH_VIRTUAL_TCAM_RULE_ACTION_DATA_PCL_STC;
typedef CPSS_DXCH_VIRTUAL_TCAM_RULE_ACTION_DATA_STC CPSS_DXCH_VIRTUAL_TCAM_RULE_ACTION_DATA_STC;
typedef CPSS_DXCH_VIRTUAL_TCAM_RULE_ACTION_DATA_TTI_STC CPSS_DXCH_VIRTUAL_TCAM_RULE_ACTION_DATA_TTI_STC;
typedef CPSS_DXCH_VIRTUAL_TCAM_RULE_ACTION_DATA_UNT CPSS_DXCH_VIRTUAL_TCAM_RULE_ACTION_DATA_UNT;
typedef CPSS_DXCH_VIRTUAL_TCAM_RULE_ACTION_TYPE_PCL_STC CPSS_DXCH_VIRTUAL_TCAM_RULE_ACTION_TYPE_PCL_STC;
typedef CPSS_DXCH_VIRTUAL_TCAM_RULE_ACTION_TYPE_STC CPSS_DXCH_VIRTUAL_TCAM_RULE_ACTION_TYPE_STC;
typedef CPSS_DXCH_VIRTUAL_TCAM_RULE_ACTION_TYPE_UNT CPSS_DXCH_VIRTUAL_TCAM_RULE_ACTION_TYPE_UNT;
typedef enum {CPSS_DXCH_VIRTUAL_TCAM_RULE_ADDITION_METHOD_LOGICAL_INDEX_E, 
    CPSS_DXCH_VIRTUAL_TCAM_RULE_ADDITION_METHOD_PRIORITY_E} CPSS_DXCH_VIRTUAL_TCAM_RULE_ADDITION_METHOD_ENT;
typedef CPSS_DXCH_VIRTUAL_TCAM_RULE_ATTRIBUTES_STC CPSS_DXCH_VIRTUAL_TCAM_RULE_ATTRIBUTES_STC;
typedef CPSS_DXCH_VIRTUAL_TCAM_RULE_DATA_STC CPSS_DXCH_VIRTUAL_TCAM_RULE_DATA_STC;
typedef CPSS_DXCH_VIRTUAL_TCAM_RULE_DATA_UNT CPSS_DXCH_VIRTUAL_TCAM_RULE_DATA_UNT;
typedef unsigned int CPSS_DXCH_VIRTUAL_TCAM_RULE_ID;
typedef enum {CPSS_DXCH_VIRTUAL_TCAM_RULE_SIZE_10_B_E, CPSS_DXCH_VIRTUAL_TCAM_RULE_SIZE_20_B_E, 
    CPSS_DXCH_VIRTUAL_TCAM_RULE_SIZE_30_B_E, CPSS_DXCH_VIRTUAL_TCAM_RULE_SIZE_40_B_E, CPSS_DXCH_VIRTUAL_TCAM_RULE_SIZE_50_B_E, 
    CPSS_DXCH_VIRTUAL_TCAM_RULE_SIZE_60_B_E, CPSS_DXCH_VIRTUAL_TCAM_RULE_SIZE_80_B_E = 7, 
    CPSS_DXCH_VIRTUAL_TCAM_RULE_SIZE_STD_E = 2, CPSS_DXCH_VIRTUAL_TCAM_RULE_SIZE_EXT_E = 5, 
    CPSS_DXCH_VIRTUAL_TCAM_RULE_SIZE_ULTRA_E = 7} CPSS_DXCH_VIRTUAL_TCAM_RULE_SIZE_ENT;
typedef enum {CPSS_DXCH_VIRTUAL_TCAM_RULE_TYPE_PCL_E, CPSS_DXCH_VIRTUAL_TCAM_RULE_TYPE_TTI_E} CPSS_DXCH_VIRTUAL_TCAM_RULE_TYPE_ENT;
typedef CPSS_DXCH_VIRTUAL_TCAM_RULE_TYPE_STC CPSS_DXCH_VIRTUAL_TCAM_RULE_TYPE_STC;
typedef CPSS_DXCH_VIRTUAL_TCAM_RULE_TYPE_UNT CPSS_DXCH_VIRTUAL_TCAM_RULE_TYPE_UNT;
typedef CPSS_DXCH_VIRTUAL_TCAM_TTI_RULE_DATA_STC CPSS_DXCH_VIRTUAL_TCAM_TTI_RULE_DATA_STC;
typedef CPSS_DXCH_VIRTUAL_TCAM_TTI_RULE_TYPE_STC CPSS_DXCH_VIRTUAL_TCAM_TTI_RULE_TYPE_STC;
typedef CPSS_DXCH_VIRTUAL_TCAM_USAGE_STC CPSS_DXCH_VIRTUAL_TCAM_USAGE_STC;

File ../cpss/mainPpDrv/h/cpss/generic/bridge/cpssGenBrgFdb.h:
CPSS_FDB_UC_ROUTING_INFO_STC;
CPSS_MAC_ENTRY_EXT_KEY_IPV4_UNICAST_STC;
CPSS_MAC_ENTRY_EXT_KEY_IPV6_UNICAST_STC;
CPSS_MAC_ENTRY_EXT_KEY_IP_MCAST_STC;
CPSS_MAC_ENTRY_EXT_KEY_MAC_VLAN_STC;
CPSS_MAC_ENTRY_EXT_KEY_STC;
CPSS_MAC_ENTRY_EXT_KEY_UNT;
CPSS_MAC_ENTRY_EXT_STC;
CPSS_MAC_UPDATE_MSG_EXT_STC;
typedef enum {CPSS_BRG_IPM_SGV_E, CPSS_BRG_IPM_GV_E} CPSS_BRG_IPM_MODE_ENT;
typedef enum {CPSS_FDB_ACTION_AGE_WITH_REMOVAL_E, CPSS_FDB_ACTION_AGE_WITHOUT_REMOVAL_E, CPSS_FDB_ACTION_DELETING_E, 
    CPSS_FDB_ACTION_TRANSPLANTING_E} CPSS_FDB_ACTION_MODE_ENT;
typedef CPSS_FDB_UC_ROUTING_INFO_STC CPSS_FDB_UC_ROUTING_INFO_STC;
typedef enum {CPSS_FDB_UC_ROUTING_TYPE_NH_FDB_E, CPSS_FDB_UC_ROUTING_TYPE_MULTIPATH_ROUTER_E, 
    CPSS_FDB_UC_ROUTING_TYPE_MULTICAST_NH_ENTRY_E} CPSS_FDB_UC_ROUTING_TYPE_ENT;
typedef enum {CPSS_ACT_AUTO_E, CPSS_ACT_TRIG_E} CPSS_MAC_ACTION_MODE_ENT;
typedef CPSS_MAC_ENTRY_EXT_KEY_IPV4_UNICAST_STC CPSS_MAC_ENTRY_EXT_KEY_IPV4_UNICAST_STC;
typedef CPSS_MAC_ENTRY_EXT_KEY_IPV6_UNICAST_STC CPSS_MAC_ENTRY_EXT_KEY_IPV6_UNICAST_STC;
typedef CPSS_MAC_ENTRY_EXT_KEY_IP_MCAST_STC CPSS_MAC_ENTRY_EXT_KEY_IP_MCAST_STC;
typedef CPSS_MAC_ENTRY_EXT_KEY_MAC_VLAN_STC CPSS_MAC_ENTRY_EXT_KEY_MAC_VLAN_STC;
typedef CPSS_MAC_ENTRY_EXT_KEY_STC CPSS_MAC_ENTRY_EXT_KEY_STC;
typedef CPSS_MAC_ENTRY_EXT_KEY_UNT CPSS_MAC_ENTRY_EXT_KEY_UNT;
typedef CPSS_MAC_ENTRY_EXT_STC CPSS_MAC_ENTRY_EXT_STC;
typedef enum {CPSS_MAC_ENTRY_EXT_TYPE_MAC_ADDR_E, CPSS_MAC_ENTRY_EXT_TYPE_IPV4_MCAST_E, CPSS_MAC_ENTRY_EXT_TYPE_IPV6_MCAST_E, 
    CPSS_MAC_ENTRY_EXT_TYPE_IPV4_UC_E, CPSS_MAC_ENTRY_EXT_TYPE_IPV6_UC_ADDR_ENTRY_E, CPSS_MAC_ENTRY_EXT_TYPE_IPV6_UC_DATA_ENTRY_E, 
    CPSS_MAC_ENTRY_EXT_TYPE_MAC_ADDR_FID_VID1_E, CPSS_MAC_ENTRY_EXT_TYPE_IPV4_MCAST_FID_VID1_E, 
    CPSS_MAC_ENTRY_EXT_TYPE_IPV6_MCAST_FID_VID1_E} CPSS_MAC_ENTRY_EXT_TYPE_ENT;
typedef enum {CPSS_MAC_HASH_FUNC_XOR_E, CPSS_MAC_HASH_FUNC_CRC_E, CPSS_MAC_HASH_FUNC_CRC_MULTI_HASH_E} CPSS_MAC_HASH_FUNC_MODE_ENT;
typedef enum {CPSS_MAC_TABLE_FRWRD_E, CPSS_MAC_TABLE_DROP_E, CPSS_MAC_TABLE_INTERV_E, CPSS_MAC_TABLE_CNTL_E, 
    CPSS_MAC_TABLE_MIRROR_TO_CPU_E, CPSS_MAC_TABLE_SOFT_DROP_E} CPSS_MAC_TABLE_CMD_ENT;
typedef CPSS_MAC_UPDATE_MSG_EXT_STC CPSS_MAC_UPDATE_MSG_EXT_STC;
typedef enum {CPSS_IVL_E = 1, CPSS_SVL_E} CPSS_MAC_VL_ENT;
typedef enum {CPSS_LOCK_FRWRD_E = 1, CPSS_LOCK_DROP_E, CPSS_LOCK_TRAP_E, CPSS_LOCK_MIRROR_E, 
    CPSS_LOCK_SOFT_DROP_E} CPSS_PORT_LOCK_CMD_ENT;
typedef enum {CPSS_NA_E, CPSS_QA_E, CPSS_QR_E, CPSS_AA_E, CPSS_TA_E, CPSS_SA_E, CPSS_QI_E, CPSS_FU_E, 
    CPSS_HR_E} CPSS_UPD_MSG_TYPE_ENT;

File ../cpss/mainPpDrv/h/cpss/generic/bridge/cpssGenBrgGen.h:
typedef enum {CPSS_IGMP_ALL_TRAP_MODE_E, CPSS_IGMP_SNOOP_TRAP_MODE_E, CPSS_IGMP_ROUTER_MIRROR_MODE_E} CPSS_IGMP_SNOOP_MODE_ENT;

File ../cpss/mainPpDrv/h/cpss/generic/bridge/cpssGenBrgSecurityBreachTypes.h:
typedef enum {CPSS_BRG_SECUR_BREACH_DROP_COUNT_PORT_E, 
    CPSS_BRG_SECUR_BREACH_DROP_COUNT_VLAN_E} CPSS_BRG_SECUR_BREACH_DROP_COUNT_MODE_ENT;
typedef enum {CPSS_BRG_SECUR_BREACH_EVENTS_FDB_ENTRY_E = 1, CPSS_BRG_SECUR_BREACH_EVENTS_PORT_NA_E, 
    CPSS_BRG_SECUR_BREACH_EVENTS_INVALID_MAC_SA_E, CPSS_BRG_SECUR_BREACH_EVENTS_INVALID_VLAN_E, 
    CPSS_BRG_SECUR_BREACH_EVENTS_PORT_NOT_IN_VLAN_E, CPSS_BRG_SECUR_BREACH_EVENTS_VLAN_RANGE_DROP_E, 
    CPSS_BRG_SECUR_BREACH_EVENTS_MOVED_STATIC_E, CPSS_BRG_SECUR_BREACH_EVENTS_ARP_SA_MISMATCH_E, 
    CPSS_BRG_SECUR_BREACH_EVENTS_TCP_SYN_E, CPSS_BRG_SECUR_BREACH_EVENTS_TCP_OVER_MC_E, 
    CPSS_BRG_SECUR_BREACH_EVENTS_BRIDGE_ACCESS_MATRIX_E, CPSS_BRG_SECUR_BREACH_EVENTS_SECURE_AUTO_LEARN_E, 
    CPSS_BRG_SECUR_BREACH_EVENTS_FRAME_TYPE, CPSS_BRG_SECUR_BREACH_EVENTS_FRAGMENT_ICMP_TYPE_E, 
    CPSS_BRG_SECUR_BREACH_EVENTS_TCP_FLAG_ZERO_E, CPSS_BRG_SECUR_BREACH_EVENTS_TCP_FIN_URG_PSH_E, 
    CPSS_BRG_SECUR_BREACH_EVENTS_TCP_SYN_FIN_E, CPSS_BRG_SECUR_BREACH_EVENTS_TCP_SYN_RST_E, 
    CPSS_BRG_SECUR_BREACH_EVENTS_TCP_UDP_SRC_DST_PORT_ZERO, CPSS_BRG_SECUR_BREACH_EVENTS_VLAN_NA_E, 
    CPSS_BRG_SECUR_BREACH_EVENTS_AUTO_LEARN_NO_RELEARN_E, CPSS_BRG_SECUR_BREACH_EVENTS_MAC_SPOOF_PROTECTION_E, 
    CPSS_BRG_SECUR_BREACH_EVENTS_MAC_SA_MOVED_E, CPSS_BRG_SECUR_BREACH_EVENTS_MAC_SA_IS_DA_E, 
    CPSS_BRG_SECUR_BREACH_EVENTS_SIP_IS_DIP_E, CPSS_BRG_SECUR_BREACH_EVENTS_TCP_UDP_SPORT_IS_DPORT_E, 
    CPSS_BRG_SECUR_BREACH_EVENTS_TCP_FIN_WITHOUT_ACK_E, CPSS_BRG_SECUR_BREACH_EVENTS_TCP_WITHOUT_FULL_HEADER_E, 
    CPSS_BRG_SECUR_BREACH_EVENTS_MAC_SA_IS_ZERO_E} CPSS_BRG_SECUR_BREACH_EVENTS_ENT;

File ../cpss/mainPpDrv/h/cpss/generic/bridge/cpssGenBrgVlanTypes.h:
typedef enum {CPSS_BRG_MODE_802_1Q_E, CPSS_BRG_MODE_802_1D_E} CPSS_BRG_MODE_ENT;
typedef enum {CPSS_VLAN_ETHERTYPE0_E = 1, CPSS_VLAN_ETHERTYPE1_E} CPSS_ETHER_MODE_ENT;
typedef enum {CPSS_PORT_ACCEPT_FRAME_TAGGED_E, CPSS_PORT_ACCEPT_FRAME_ALL_E, CPSS_PORT_ACCEPT_FRAME_UNTAGGED_E, 
    CPSS_PORT_ACCEPT_FRAME_NONE_E} CPSS_PORT_ACCEPT_FRAME_TYPE_ENT;
typedef enum {CPSS_STP_DISABLED_E, CPSS_STP_BLCK_LSTN_E, CPSS_STP_LRN_E, CPSS_STP_FRWRD_E} CPSS_STP_STATE_ENT;

File ../cpss/mainPpDrv/h/cpss/generic/cos/cpssCosTypes.h:
typedef struct {
    GT_U32 qosProfileId;
    CPSS_PACKET_ATTRIBUTE_ASSIGN_PRECEDENCE_ENT assignPrecedence;
    CPSS_PACKET_ATTRIBUTE_MODIFY_TYPE_ENT enableModifyUp;
    CPSS_PACKET_ATTRIBUTE_MODIFY_TYPE_ENT enableModifyDscp;
} CPSS_QOS_ENTRY_STC;
typedef enum {CPSS_QOS_PORT_NO_TRUST_E, CPSS_QOS_PORT_TRUST_L2_E, CPSS_QOS_PORT_TRUST_L3_E, 
    CPSS_QOS_PORT_TRUST_L2_L3_E} CPSS_QOS_PORT_TRUST_MODE_ENT;

File ../cpss/mainPpDrv/h/cpss/generic/cpssCommonDefs.h:
typedef enum {CPSS_DROP_MODE_SOFT_E, CPSS_DROP_MODE_HARD_E} CPSS_DROP_MODE_TYPE_ENT;
typedef enum {CPSS_PACKET_ATTRIBUTE_ASSIGN_DISABLED_E, CPSS_PACKET_ATTRIBUTE_ASSIGN_FOR_TAGGED_E, 
    CPSS_PACKET_ATTRIBUTE_ASSIGN_FOR_UNTAGGED_E, CPSS_PACKET_ATTRIBUTE_ASSIGN_FOR_ALL_E} CPSS_PACKET_ATTRIBUTE_ASSIGN_CMD_ENT;
typedef enum {CPSS_PACKET_ATTRIBUTE_ASSIGN_PRECEDENCE_SOFT_E, 
    CPSS_PACKET_ATTRIBUTE_ASSIGN_PRECEDENCE_HARD_E} CPSS_PACKET_ATTRIBUTE_ASSIGN_PRECEDENCE_ENT;
typedef enum {CPSS_PACKET_ATTRIBUTE_MODIFY_KEEP_PREVIOUS_E, CPSS_PACKET_ATTRIBUTE_MODIFY_DISABLE_E, 
    CPSS_PACKET_ATTRIBUTE_MODIFY_ENABLE_E} CPSS_PACKET_ATTRIBUTE_MODIFY_TYPE_ENT;
typedef enum {CPSS_PACKET_CMD_FORWARD_E, CPSS_PACKET_CMD_MIRROR_TO_CPU_E, CPSS_PACKET_CMD_TRAP_TO_CPU_E, 
    CPSS_PACKET_CMD_DROP_HARD_E, CPSS_PACKET_CMD_DROP_SOFT_E, CPSS_PACKET_CMD_ROUTE_E, CPSS_PACKET_CMD_ROUTE_AND_MIRROR_E, 
    CPSS_PACKET_CMD_BRIDGE_AND_MIRROR_E, CPSS_PACKET_CMD_BRIDGE_E, CPSS_PACKET_CMD_NONE_E, CPSS_PACKET_CMD_LOOPBACK_E, 
    CPSS_PACKET_CMD_DEFAULT_ROUTE_ENTRY_E} CPSS_PACKET_CMD_ENT;

File ../cpss/mainPpDrv/h/cpss/generic/cpssHwInit/cpssHwInit.h:
typedef enum {CPSS_AU_MESSAGE_LENGTH_4_WORDS_E, CPSS_AU_MESSAGE_LENGTH_8_WORDS_E} CPSS_AU_MESSAGE_LENGTH_ENT;
typedef enum {CPSS_SA_LSB_PER_PORT_E, CPSS_SA_LSB_PER_PKT_VID_E, CPSS_SA_LSB_PER_VLAN_E, 
    CPSS_SA_LSB_FULL_48_BIT_GLOBAL} CPSS_MAC_SA_LSB_MODE_ENT;

File ../cpss/mainPpDrv/h/cpss/generic/cpssHwInit/cpssLedCtrl.h:
typedef enum {CPSS_LED_CLASS_13_SELECT_LINK_DOWN_E, CPSS_LED_CLASS_13_SELECT_COPPER_LINK_UP_E} CPSS_LED_CLASS_13_SELECT_ENT;
typedef enum {CPSS_LED_CLASS_5_SELECT_HALF_DUPLEX_E, CPSS_LED_CLASS_5_SELECT_FIBER_LINK_UP_E} CPSS_LED_CLASS_5_SELECT_ENT;
typedef struct CPSS_LED_CLASS_MANIPULATION_STCT CPSS_LED_CLASS_MANIPULATION_STC;
struct CPSS_LED_CLASS_MANIPULATION_STCT;
typedef struct CPSS_LED_CONF_STCT CPSS_LED_CONF_STC;
struct CPSS_LED_CONF_STCT;
typedef struct {
    GT_U32 ledClockFrequency;
    GT_U32 ledStart[16];
    GT_U32 ledEnd[16];
    GT_BOOL ledChainBypass[16];
} CPSS_LED_SIP6_CONF_STC;

File ../cpss/mainPpDrv/h/cpss/generic/cscd/cpssGenCscd.h:
typedef enum {CPSS_CSCD_LINK_TYPE_TRUNK_E, CPSS_CSCD_LINK_TYPE_PORT_E} CPSS_CSCD_LINK_TYPE_ENT;
typedef struct {
    GT_U32 linkNum;
    CPSS_CSCD_LINK_TYPE_ENT linkType;
} CPSS_CSCD_LINK_TYPE_STC;
typedef enum {CPSS_CSCD_PORT_DSA_MODE_1_WORD_E, CPSS_CSCD_PORT_DSA_MODE_2_WORDS_E, CPSS_CSCD_PORT_NETWORK_E, 
    CPSS_CSCD_PORT_DSA_MODE_3_WORDS_E, CPSS_CSCD_PORT_DSA_MODE_4_WORDS_E} CPSS_CSCD_PORT_TYPE_ENT;

File ../cpss/mainPpDrv/h/cpss/generic/extMac/cpssExtMacDrv.h:
CPSS_MACDRV_COUNTERS_OBJ_STC;
CPSS_MACDRV_EEE_CONFIG_STC;
CPSS_MACDRV_OBJ_STC;
typedef GT_STATUS (*)(GT_U8, GT_PHYSICAL_PORT_NUM, GT_BOOL *, CPSS_MACDRV_STAGE_ENT, GT_BOOL *, 
    GT_BOOL *) CPSS_MACDRV_BP_ENABLE_GET_FUNC;
typedef GT_STATUS (*)(GT_U8, GT_PHYSICAL_PORT_NUM, GT_BOOL, CPSS_MACDRV_STAGE_ENT, GT_BOOL *, 
    GT_BOOL *) CPSS_MACDRV_BP_ENABLE_SET_FUNC;
typedef GT_STATUS (*)(GT_U8, GT_PHYSICAL_PORT_NUM, GT_U32, GT_U32 *, CPSS_MACDRV_STAGE_ENT, 
    GT_BOOL *) CPSS_MACDRV_CN_FC_TIMER_GET_FUNC;
typedef GT_STATUS (*)(GT_U8, GT_PHYSICAL_PORT_NUM, GT_U32, GT_U32, CPSS_MACDRV_STAGE_ENT, 
    GT_BOOL *) CPSS_MACDRV_CN_FC_TIMER_SET_FUNC;
typedef CPSS_MACDRV_COUNTERS_OBJ_STC CPSS_MACDRV_COUNTERS_OBJ_STC;
typedef GT_STATUS (*)(GT_U8, GT_PHYSICAL_PORT_NUM, GT_BOOL *, CPSS_MACDRV_STAGE_ENT, GT_BOOL *, 
    GT_BOOL *) CPSS_MACDRV_CRC_CHECK_ENABLE_GET_FUNC;
typedef GT_STATUS (*)(GT_U8, GT_PHYSICAL_PORT_NUM, GT_BOOL, CPSS_MACDRV_STAGE_ENT, GT_BOOL *, 
    GT_BOOL *) CPSS_MACDRV_CRC_CHECK_ENABLE_SET_FUNC;
typedef GT_STATUS (*)(GT_U8, GT_PHYSICAL_PORT_NUM, CPSS_MACDRV_STAGE_ENT, GT_BOOL *, CPSS_PORT_DIRECTION_ENT, 
    CPSS_CSCD_PORT_TYPE_ENT *) CPSS_MACDRV_CSCD_PORT_TYPE_GET_FUNC;
typedef GT_STATUS (*)(GT_U8, GT_PHYSICAL_PORT_NUM, CPSS_MACDRV_STAGE_ENT, GT_BOOL *, CPSS_PORT_DIRECTION_ENT, 
    CPSS_CSCD_PORT_TYPE_ENT) CPSS_MACDRV_CSCD_PORT_TYPE_SET_FUNC;
typedef GT_STATUS (*)(GT_U8, GT_PHYSICAL_PORT_NUM, GT_BOOL *, CPSS_MACDRV_STAGE_ENT, GT_BOOL *, 
    GT_BOOL *) CPSS_MACDRV_DUPLEX_AN_GET_FUNC;
typedef GT_STATUS (*)(GT_U8, GT_PHYSICAL_PORT_NUM, GT_BOOL, CPSS_MACDRV_STAGE_ENT, GT_BOOL *, 
    GT_BOOL *) CPSS_MACDRV_DUPLEX_AN_SET_FUNC;
typedef GT_STATUS (*)(GT_U8, GT_PHYSICAL_PORT_NUM, CPSS_MACDRV_EEE_CONFIG_STC *, CPSS_MACDRV_STAGE_ENT, 
    GT_BOOL *) CPSS_MACDRV_EEE_CONFIG_GET_FUNC;
typedef GT_STATUS (*)(GT_U8, GT_PHYSICAL_PORT_NUM, CPSS_MACDRV_EEE_CONFIG_STC *, CPSS_MACDRV_STAGE_ENT, 
    GT_BOOL *) CPSS_MACDRV_EEE_CONFIG_SET_FUNC;
typedef CPSS_MACDRV_EEE_CONFIG_STC CPSS_MACDRV_EEE_CONFIG_STC;
typedef GT_STATUS (*)(GT_U8, GT_PHYSICAL_PORT_NUM, GT_BOOL *, GT_BOOL *, CPSS_MACDRV_STAGE_ENT, 
    GT_BOOL *) CPSS_MACDRV_EEE_STATUS_GET_FUNC;
typedef GT_STATUS (*)(GT_U8, GT_PHYSICAL_PORT_NUM, GT_BOOL *, CPSS_MACDRV_STAGE_ENT, GT_BOOL *, 
    GT_BOOL *) CPSS_MACDRV_EXCL_COL_DROP_ENABLE_GET_FUNC;
typedef GT_STATUS (*)(GT_U8, GT_PHYSICAL_PORT_NUM, GT_BOOL, CPSS_MACDRV_STAGE_ENT, GT_BOOL *, 
    GT_BOOL *) CPSS_MACDRV_EXCL_COL_DROP_ENABLE_SET_FUNC;
typedef GT_STATUS (*)(GT_U8, GT_PHYSICAL_PORT_NUM, CPSS_PORT_FLOW_CONTROL_ENT *, CPSS_MACDRV_STAGE_ENT, GT_BOOL *, 
    CPSS_PORT_FLOW_CONTROL_ENT *) CPSS_MACDRV_FC_ENABLE_GET_FUNC;
typedef GT_STATUS (*)(GT_U8, GT_PHYSICAL_PORT_NUM, CPSS_PORT_FLOW_CONTROL_ENT, CPSS_MACDRV_STAGE_ENT, GT_BOOL *, 
    CPSS_PORT_FLOW_CONTROL_ENT *) CPSS_MACDRV_FC_ENABLE_SET_FUNC;
typedef GT_STATUS (*)(GT_U8, GT_PHYSICAL_PORT_NUM, CPSS_DXCH_PORT_FC_MODE_ENT *, CPSS_MACDRV_STAGE_ENT, 
    GT_BOOL *) CPSS_MACDRV_FC_MODE_GET_FUNC;
typedef GT_STATUS (*)(GT_U8, GT_PHYSICAL_PORT_NUM, CPSS_DXCH_PORT_FC_MODE_ENT, CPSS_MACDRV_STAGE_ENT, 
    GT_BOOL *) CPSS_MACDRV_FC_MODE_SET_FUNC;
typedef GT_STATUS (*)(GT_U8, GT_PHYSICAL_PORT_NUM, GT_U32 *, GT_U32 *, CPSS_MACDRV_STAGE_ENT, 
    GT_BOOL *) CPSS_MACDRV_FC_PARAMS_GET_FUNC;
typedef GT_STATUS (*)(GT_U8, GT_PHYSICAL_PORT_NUM, GT_U32, GT_U32, CPSS_MACDRV_STAGE_ENT, GT_BOOL *) CPSS_MACDRV_FC_PARAMS_SET_FUNC;
typedef GT_STATUS (*)(GT_U8, GT_PHYSICAL_PORT_NUM, GT_BOOL *, GT_BOOL *, CPSS_MACDRV_STAGE_ENT, GT_BOOL *, GT_BOOL *, 
    GT_BOOL *) CPSS_MACDRV_FLOW_CNTL_AN_GET_FUNC;
typedef GT_STATUS (*)(GT_U8, GT_PHYSICAL_PORT_NUM, GT_BOOL, GT_BOOL, CPSS_MACDRV_STAGE_ENT, GT_BOOL *, GT_BOOL *, 
    GT_BOOL *) CPSS_MACDRV_FLOW_CNTL_AN_SET_FUNC;
typedef GT_STATUS (*)(GT_U8, GT_PHYSICAL_PORT_NUM, GT_U32 *, GT_U32 *, CPSS_MACDRV_STAGE_ENT, 
    GT_BOOL *) CPSS_MACDRV_GPIO_CONFIG_GET_FUNC;
typedef GT_STATUS (*)(GT_U8, GT_PHYSICAL_PORT_NUM, GT_U32, CPSS_MACDRV_STAGE_ENT, GT_BOOL *) CPSS_MACDRV_GPIO_CONFIG_SET_FUNC;
typedef GT_STATUS (*)(GT_U8, GT_PHYSICAL_PORT_NUM, GT_U32 *, CPSS_MACDRV_STAGE_ENT, GT_BOOL *) CPSS_MACDRV_GPIO_DATA_READ_FUNC;
typedef GT_STATUS (*)(GT_U8, GT_PHYSICAL_PORT_NUM, GT_U32, GT_U32, CPSS_MACDRV_STAGE_ENT, 
    GT_BOOL *) CPSS_MACDRV_GPIO_DATA_WRITE_FUNC;
typedef GT_STATUS (*)(GT_U8, GT_PHYSICAL_PORT_NUM, GT_U8, GT_U16, GT_U8, GT_U16 *, CPSS_MACDRV_STAGE_ENT, 
    GT_BOOL *) CPSS_MACDRV_HW_10G_SMI_REGISTER_GET_FUNC;
typedef GT_STATUS (*)(GT_U8, GT_PHYSICAL_PORT_NUM, GT_U8, GT_U16, GT_U8, GT_U16, CPSS_MACDRV_STAGE_ENT, 
    GT_BOOL *) CPSS_MACDRV_HW_10G_SMI_REGISTER_SET_FUNC;
typedef GT_STATUS (*)(GT_U8, GT_PHYSICAL_PORT_NUM, GT_U8, GT_U16 *, CPSS_MACDRV_STAGE_ENT, 
    GT_BOOL *) CPSS_MACDRV_HW_SMI_REGISTER_GET_FUNC;
typedef GT_STATUS (*)(GT_U8, GT_PHYSICAL_PORT_NUM, GT_U8, GT_U16, CPSS_MACDRV_STAGE_ENT, 
    GT_BOOL *) CPSS_MACDRV_HW_SMI_REGISTER_SET_FUNC;
typedef GT_STATUS (*)(GT_U8, GT_PHYSICAL_PORT_NUM, CPSS_DXCH_LED_PHY_GLOBAL_CONF_STC *, CPSS_MACDRV_STAGE_ENT, 
    GT_BOOL *) CPSS_MACDRV_LED_GLOBAL_CONFIG_GET_FUNC;
typedef GT_STATUS (*)(GT_U8, GT_PHYSICAL_PORT_NUM, CPSS_DXCH_LED_PHY_GLOBAL_CONF_STC *, CPSS_MACDRV_STAGE_ENT, 
    GT_BOOL *) CPSS_MACDRV_LED_GLOBAL_CONFIG_SET_FUNC;
typedef GT_STATUS (*)(GT_U8, GT_PHYSICAL_PORT_NUM, CPSS_DXCH_LED_PHY_PORT_CONF_STC *, CPSS_MACDRV_STAGE_ENT, 
    GT_BOOL *) CPSS_MACDRV_LED_PER_PORT_CONFIG_GET_FUNC;
typedef GT_STATUS (*)(GT_U8, GT_PHYSICAL_PORT_NUM, CPSS_DXCH_LED_PHY_PORT_CONF_STC *, CPSS_MACDRV_STAGE_ENT, 
    GT_BOOL *) CPSS_MACDRV_LED_PER_PORT_CONFIG_SET_FUNC;
typedef GT_STATUS (*)(GT_U8, GT_U32, CPSS_MACDRV_STAGE_ENT, GT_BOOL *, GT_ETHERADDR *) CPSS_MACDRV_MAC_SA_BASE_SET_FUNC;
typedef GT_STATUS (*)(GT_U8, GT_PHYSICAL_PORT_NUM, CPSS_MACDRV_STAGE_ENT, GT_BOOL *, GT_U8 *) CPSS_MACDRV_MAC_SA_LSB_GET_FUNC;
typedef GT_STATUS (*)(GT_U8, GT_PHYSICAL_PORT_NUM, CPSS_MACDRV_STAGE_ENT, GT_BOOL *, GT_U8) CPSS_MACDRV_MAC_SA_LSB_SET_FUNC;
typedef GT_STATUS (*)(GT_U8, GT_PHYSICAL_PORT_NUM, CPSS_PORT_SPEED_ENT *, CPSS_MACDRV_STAGE_ENT, GT_BOOL *, 
    CPSS_PORT_SPEED_ENT *) CPSS_MACDRV_MAC_SPEED_GET_FUNC;
typedef GT_STATUS (*)(GT_U8, GT_PHYSICAL_PORT_NUM, CPSS_PORT_SPEED_ENT, CPSS_MACDRV_STAGE_ENT, GT_BOOL *, 
    CPSS_PORT_SPEED_ENT *) CPSS_MACDRV_MAC_SPEED_SET_FUNC;
typedef GT_STATUS (*)(GT_U8, GT_PHYSICAL_PORT_NUM, GT_U32 *, CPSS_MACDRV_STAGE_ENT, GT_BOOL *, GT_U32 *) CPSS_MACDRV_MRU_GET_FUNC;
typedef GT_STATUS (*)(GT_U8, GT_PHYSICAL_PORT_NUM, GT_U32, CPSS_MACDRV_STAGE_ENT, GT_BOOL *, GT_U32 *) CPSS_MACDRV_MRU_SET_FUNC;
typedef CPSS_MACDRV_OBJ_STC CPSS_MACDRV_OBJ_STC;
typedef GT_STATUS (*)(GT_U8, GT_PHYSICAL_PORT_NUM, GT_BOOL *, CPSS_MACDRV_STAGE_ENT, GT_BOOL *, 
    GT_BOOL *) CPSS_MACDRV_PADDING_ENABLE_GET_FUNC;
typedef GT_STATUS (*)(GT_U8, GT_PHYSICAL_PORT_NUM, GT_BOOL, CPSS_MACDRV_STAGE_ENT, GT_BOOL *, 
    GT_BOOL *) CPSS_MACDRV_PADDING_ENABLE_SET_FUNC;
typedef GT_STATUS (*)(GT_U8, GT_PHYSICAL_PORT_NUM, GT_BOOL *, CPSS_MACDRV_STAGE_ENT, GT_BOOL *, 
    GT_BOOL *) CPSS_MACDRV_PERIODIC_FC_ENABLE_GET_FUNC;
typedef GT_STATUS (*)(GT_U8, GT_PHYSICAL_PORT_NUM, CPSS_PORT_PERIODIC_FLOW_CONTROL_TYPE_ENT, CPSS_MACDRV_STAGE_ENT, GT_BOOL *, 
    GT_BOOL *) CPSS_MACDRV_PERIODIC_FC_ENABLE_SET_FUNC;
typedef GT_STATUS (*)(GT_U8, GT_PHYSICAL_PORT_NUM, CPSS_MACDRV_STAGE_ENT, GT_BOOL *, 
    CPSS_PORT_ATTRIBUTES_STC *) CPSS_MACDRV_PORT_ATTRIBUTES_GET_FUNC;
typedef GT_STATUS (*)(GT_U8, GT_PHYSICAL_PORT_NUM, CPSS_PORT_DUPLEX_ENT *, CPSS_MACDRV_STAGE_ENT, GT_BOOL *, 
    CPSS_PORT_DUPLEX_ENT *) CPSS_MACDRV_PORT_DUPLEX_GET_FUNC;
typedef GT_STATUS (*)(GT_U8, GT_PHYSICAL_PORT_NUM, CPSS_PORT_DUPLEX_ENT, CPSS_MACDRV_STAGE_ENT, GT_BOOL *, 
    CPSS_PORT_DUPLEX_ENT *) CPSS_MACDRV_PORT_DUPLEX_SET_FUNC;
typedef GT_STATUS (*)(GT_U8, GT_PHYSICAL_PORT_NUM, GT_BOOL *, CPSS_MACDRV_STAGE_ENT, GT_BOOL *, 
    GT_BOOL *) CPSS_MACDRV_PORT_ENABLE_GET_FUNC;
typedef GT_STATUS (*)(GT_U8, GT_PHYSICAL_PORT_NUM, GT_BOOL, CPSS_MACDRV_STAGE_ENT, GT_BOOL *, 
    GT_BOOL *) CPSS_MACDRV_PORT_ENABLE_SET_FUNC;
typedef GT_STATUS (*)(GT_U8, GT_PHYSICAL_PORT_NUM, GT_BOOL *, CPSS_MACDRV_STAGE_ENT, 
    GT_BOOL *) CPSS_MACDRV_PORT_FORCE_LINK_DOWN_GET_FUNC;
typedef GT_STATUS (*)(GT_U8, GT_PHYSICAL_PORT_NUM, GT_BOOL, CPSS_MACDRV_STAGE_ENT, 
    GT_BOOL *) CPSS_MACDRV_PORT_FORCE_LINK_DOWN_SET_FUNC;
typedef GT_STATUS (*)(GT_U8, GT_PHYSICAL_PORT_NUM, GT_BOOL *, CPSS_MACDRV_STAGE_ENT, 
    GT_BOOL *) CPSS_MACDRV_PORT_FORCE_LINK_PASS_GET_FUNC;
typedef GT_STATUS (*)(GT_U8, GT_PHYSICAL_PORT_NUM, GT_BOOL, CPSS_MACDRV_STAGE_ENT, 
    GT_BOOL *) CPSS_MACDRV_PORT_FORCE_LINK_PASS_SET_FUNC;
typedef GT_STATUS (*)(GT_U8, GT_PHYSICAL_PORT_NUM, CPSS_MACDRV_STAGE_ENT, GT_BOOL *, 
    CPSS_PORT_INTERFACE_MODE_ENT *) CPSS_MACDRV_PORT_INTERFACE_MODE_GET_FUNC;
typedef GT_STATUS (*)(GT_U8, GT_PHYSICAL_PORT_NUM, CPSS_PORT_INTERFACE_MODE_ENT, CPSS_PORT_SPEED_ENT, GT_BOOL *, 
    CPSS_MACDRV_STAGE_ENT, GT_BOOL *) CPSS_MACDRV_PORT_INTERFACE_SPEED_SUPPORT_GET_FUNC;
typedef GT_STATUS (*)(GT_U8, GT_PHYSICAL_PORT_NUM, GT_BOOL *, CPSS_MACDRV_STAGE_ENT, GT_BOOL *, 
    GT_BOOL *) CPSS_MACDRV_PORT_LINK_STATUS_GET_FUNC;
typedef GT_STATUS (*)(GT_U8, GT_PHYSICAL_PORT_NUM, GT_BOOL *, CPSS_MACDRV_STAGE_ENT, GT_BOOL *) CPSS_MACDRV_PORT_LOOPBACK_GET_FUNC;
typedef GT_STATUS (*)(GT_U8, GT_PHYSICAL_PORT_NUM, GT_BOOL, CPSS_MACDRV_STAGE_ENT, GT_BOOL *) CPSS_MACDRV_PORT_LOOPBACK_SET_FUNC;
typedef GT_STATUS (*)(GT_U8, GT_PHYSICAL_PORT_NUM, CPSS_PORT_MAC_COUNTER_SET_STC *, CPSS_MACDRV_STAGE_ENT, 
    GT_BOOL *) CPSS_MACDRV_PORT_MAC_COUNTERS_CAPTURE_ON_PORT_GET_FUNC;
typedef GT_STATUS (*)(GT_U8, GT_PHYSICAL_PORT_NUM, GT_BOOL *, CPSS_MACDRV_STAGE_ENT, 
    GT_BOOL *) CPSS_MACDRV_PORT_MAC_COUNTERS_CAPTURE_TRIGGER_GET_FUNC;
typedef GT_STATUS (*)(GT_U8, GT_PHYSICAL_PORT_NUM, CPSS_MACDRV_STAGE_ENT, 
    GT_BOOL *) CPSS_MACDRV_PORT_MAC_COUNTERS_CAPTURE_TRIGGER_SET_FUNC;
typedef GT_STATUS (*)(GT_U8, GT_PHYSICAL_PORT_NUM, GT_BOOL *, CPSS_MACDRV_STAGE_ENT, 
    GT_BOOL *) CPSS_MACDRV_PORT_MAC_COUNTERS_CLEAR_ON_READ_GET_FUNC;
typedef GT_STATUS (*)(GT_U8, GT_PHYSICAL_PORT_NUM, GT_BOOL, CPSS_MACDRV_STAGE_ENT, GT_BOOL *, 
    GT_BOOL *) CPSS_MACDRV_PORT_MAC_COUNTERS_CLEAR_ON_READ_SET_FUNC;
typedef GT_STATUS (*)(GT_U8, GT_PHYSICAL_PORT_NUM, GT_BOOL, CPSS_MACDRV_STAGE_ENT, GT_BOOL *, 
    GT_BOOL *) CPSS_MACDRV_PORT_MAC_COUNTERS_ENABLE_FUNC;
typedef GT_STATUS (*)(GT_U8, GT_PHYSICAL_PORT_NUM, GT_BOOL *, CPSS_MACDRV_STAGE_ENT, 
    GT_BOOL *) CPSS_MACDRV_PORT_MAC_COUNTERS_ENABLE_GET_FUNC;
typedef GT_STATUS (*)(GT_U8, GT_PHYSICAL_PORT_NUM, CPSS_PORT_DIRECTION_ENT, GT_BOOL *, CPSS_MACDRV_STAGE_ENT, 
    GT_BOOL *) CPSS_MACDRV_PORT_MAC_COUNTERS_HISTOGRAM_ENABLE_GET_FUNC;
typedef GT_STATUS (*)(GT_U8, GT_PHYSICAL_PORT_NUM, CPSS_PORT_MAC_COUNTER_SET_STC *, CPSS_MACDRV_STAGE_ENT, 
    GT_BOOL *) CPSS_MACDRV_PORT_MAC_COUNTERS_ON_PHY_SIDE_PORT_GET_FUNC;
typedef GT_STATUS (*)(GT_U8, GT_PHYSICAL_PORT_NUM, CPSS_PORT_MAC_COUNTER_SET_STC *, CPSS_MACDRV_STAGE_ENT, 
    GT_BOOL *) CPSS_MACDRV_PORT_MAC_COUNTERS_ON_PORT_GET_FUNC;
typedef GT_STATUS (*)(GT_U8, GT_PHYSICAL_PORT_NUM, GT_BOOL, CPSS_MACDRV_STAGE_ENT, GT_BOOL *, 
    GT_BOOL *) CPSS_MACDRV_PORT_MAC_COUNTERS_RX_HISTOGRAM_ENABLE_FUNC;
typedef GT_STATUS (*)(GT_U8, GT_PHYSICAL_PORT_NUM, GT_BOOL, CPSS_MACDRV_STAGE_ENT, GT_BOOL *, 
    GT_BOOL *) CPSS_MACDRV_PORT_MAC_COUNTERS_TX_HISTOGRAM_ENABLE_FUNC;
typedef GT_STATUS (*)(GT_U8, GT_PHYSICAL_PORT_NUM, CPSS_PORT_MAC_COUNTERS_ENT, GT_U64 *, CPSS_MACDRV_STAGE_ENT, 
    GT_BOOL *) CPSS_MACDRV_PORT_MAC_COUNTER_CAPTURE_GET_FUNC;
typedef GT_STATUS (*)(GT_U8, GT_PHYSICAL_PORT_NUM, CPSS_PORT_MAC_COUNTERS_ENT, GT_U64 *, CPSS_MACDRV_STAGE_ENT, 
    GT_BOOL *) CPSS_MACDRV_PORT_MAC_COUNTER_GET_FUNC;
typedef GT_STATUS (*)(GT_U8, GT_PHYSICAL_PORT_NUM, CPSS_PORT_MAC_COUNTERS_ENT, GT_U64 *, CPSS_MACDRV_STAGE_ENT, 
    GT_BOOL *) CPSS_MACDRV_PORT_MAC_COUNTER_ON_PHY_SIDE_GET_FUNC;
typedef GT_STATUS (*)(GT_U8, GT_PORT_NUM, GT_U8, CPSS_MACDRV_STAGE_ENT, GT_BOOL *) CPSS_MACDRV_PORT_MAC_DEFAULT_UP_SET_FUNC;
typedef GT_STATUS (*)(GT_U8, GT_PHYSICAL_PORT_NUM, CPSS_DXCH_PORT_MAC_OVERSIZED_PACKETS_COUNTER_MODE_ENT *, CPSS_MACDRV_STAGE_ENT, 
    GT_BOOL *) CPSS_MACDRV_PORT_MAC_OVERSIZED_PACKETS_COUNTER_MODE_GET_FUNC;
typedef GT_STATUS (*)(GT_U8, GT_PHYSICAL_PORT_NUM, CPSS_DXCH_PORT_MAC_OVERSIZED_PACKETS_COUNTER_MODE_ENT, CPSS_MACDRV_STAGE_ENT, 
    GT_BOOL *, CPSS_DXCH_PORT_MAC_OVERSIZED_PACKETS_COUNTER_MODE_ENT *) CPSS_MACDRV_PORT_MAC_OVERSIZED_PACKETS_COUNTER_MODE_SET_FUNC;
typedef GT_STATUS (*)(GT_U8, GT_PHYSICAL_PORT_NUM, CPSS_PORT_MAC_STATUS_STC *, CPSS_MACDRV_STAGE_ENT, 
    GT_BOOL *) CPSS_MACDRV_PORT_MAC_STATUS_GET_FUNC;
typedef GT_STATUS (*)(GT_U8, GT_PHYSICAL_PORT_NUM, CPSS_PORT_MAC_TYPE_ENT *, CPSS_MACDRV_STAGE_ENT, 
    GT_BOOL *) CPSS_MACDRV_PORT_MAC_TYPE_GET_FUNC;
typedef GT_STATUS (*)(GT_U8, GT_PHYSICAL_PORT_NUM, GT_BOOL, CPSS_MACDRV_STAGE_ENT, GT_BOOL *) CPSS_MACDRV_PORT_POWER_DOWN_SET_FUNC;
typedef GT_STATUS (*)(GT_U8, GT_PORT_NUM, CPSS_ETHER_MODE_ENT, GT_U32, CPSS_MACDRV_STAGE_ENT, 
    GT_BOOL *) CPSS_MACDRV_PORT_TPID_PROFILE_SET_FUNC;
typedef GT_STATUS (*)(GT_U8, GT_PHYSICAL_PORT_NUM, CPSS_PORT_DIRECTION_ENT, GT_U32 *, CPSS_MACDRV_STAGE_ENT, GT_BOOL *, 
    CPSS_PORT_DIRECTION_ENT *, GT_U32 *) CPSS_MACDRV_PREAMBLE_LENGTH_GET_FUNC;
typedef GT_STATUS (*)(GT_U8, GT_PHYSICAL_PORT_NUM, CPSS_PORT_DIRECTION_ENT, GT_U32, CPSS_MACDRV_STAGE_ENT, GT_BOOL *, 
    CPSS_PORT_DIRECTION_ENT *, GT_U32 *) CPSS_MACDRV_PREAMBLE_LENGTH_SET_FUNC;
typedef GT_STATUS (*)(GT_U8, GT_PHYSICAL_PORT_NUM, GT_BOOL *, CPSS_MACDRV_STAGE_ENT, GT_BOOL *, 
    GT_BOOL *) CPSS_MACDRV_SPEED_AN_GET_FUNC;
typedef GT_STATUS (*)(GT_U8, GT_PHYSICAL_PORT_NUM, GT_BOOL, CPSS_MACDRV_STAGE_ENT, GT_BOOL *, 
    GT_BOOL *) CPSS_MACDRV_SPEED_AN_SET_FUNC;
typedef enum {CPSS_MACDRV_STAGE_PRE_E, CPSS_MACDRV_STAGE_POST_E} CPSS_MACDRV_STAGE_ENT;
typedef GT_STATUS (*)(GT_U8, GT_PHYSICAL_PORT_NUM, GT_32 *, CPSS_MACDRV_STAGE_ENT, GT_BOOL *) CPSS_MACDRV_VCT_LENGTH_OFFSET_GET_FUNC;
typedef GT_STATUS (*)(GT_U8, GT_PHYSICAL_PORT_NUM, GT_32, CPSS_MACDRV_STAGE_ENT, GT_BOOL *) CPSS_MACDRV_VCT_LENGTH_OFFSET_SET_FUNC;
typedef GT_STATUS (*)(GT_U8, GT_PHYSICAL_PORT_NUM, CPSS_MACDRV_STAGE_ENT, GT_BOOL *, const char *) CPSS_MACDRV___STUB__FUNC;

File ../cpss/mainPpDrv/h/cpss/generic/ip/cpssIpTypes.h:
typedef enum {CPSS_IPV6_PREFIX_SCOPE_LINK_LOCAL_E, CPSS_IPV6_PREFIX_SCOPE_SITE_LOCAL_E, CPSS_IPV6_PREFIX_SCOPE_UNIQUE_LOCAL_E, 
    CPSS_IPV6_PREFIX_SCOPE_GLOBAL_E} CPSS_IPV6_PREFIX_SCOPE_ENT;
typedef enum {CPSS_IP_CNT_SET0_E, CPSS_IP_CNT_SET1_E, CPSS_IP_CNT_SET2_E, CPSS_IP_CNT_SET3_E, 
    CPSS_IP_CNT_NO_SET_E} CPSS_IP_CNT_SET_ENT;
typedef enum {CPSS_IP_SITE_ID_INTERNAL_E, CPSS_IP_SITE_ID_EXTERNAL_E} CPSS_IP_SITE_ID_ENT;
typedef enum {CPSS_IP_UNICAST_E, CPSS_IP_MULTICAST_E} CPSS_IP_UNICAST_MULTICAST_ENT;

File ../cpss/mainPpDrv/h/cpss/generic/networkIf/cpssGenNetIfTypes.h:
typedef enum {CPSS_NET_CPU_CODE_L4_DEST_PORT_E, CPSS_NET_CPU_CODE_L4_SRC_PORT_E, 
    CPSS_NET_CPU_CODE_L4_BOTH_DEST_SRC_PORT_E} CPSS_NET_CPU_CODE_L4_PORT_MODE_ENT;
typedef enum {CPSS_NET_CPU_CODE_RATE_LIMIT_LOCAL_E, CPSS_NET_CPU_CODE_RATE_LIMIT_AGGREGATE_E} CPSS_NET_CPU_CODE_RATE_LIMIT_MODE_ENT;
typedef enum {CPSS_NET_PROT_UDP_E, CPSS_NET_PROT_TCP_E, CPSS_NET_PROT_BOTH_UDP_TCP_E} CPSS_NET_PROT_ENT;
typedef enum {CPSS_NET_UNDEFINED_CPU_CODE_E, CPSS_NET_CONTROL_OBSOLETE_E, CPSS_NET_UN_KNOWN_UC_E = 10, CPSS_NET_UN_REGISTERD_MC_E, 
    CPSS_NET_CONTROL_BPDU_E = 16, CPSS_NET_CONTROL_DEST_MAC_TRAP_E, CPSS_NET_CONTROL_SRC_MAC_TRAP_E, 
    CPSS_NET_CONTROL_SRC_DST_MAC_TRAP_E, CPSS_NET_CONTROL_MAC_RANGE_TRAP_E, CPSS_NET_RX_SNIFFER_TRAP_E, 
    CPSS_NET_INTERVENTION_ARP_E = 32, CPSS_NET_INTERVENTION_IGMP_E, CPSS_NET_INTERVENTION_SA_E, CPSS_NET_INTERVENTION_DA_E, 
    CPSS_NET_INTERVENTION_SA_DA_E, CPSS_NET_INTERVENTION_PORT_LOCK_E, CPSS_NET_EXP_TNL_BAD_IPV4_HDR_E, CPSS_NET_EXP_TNL_BAD_VLAN_E, 
    CPSS_NET_STATIC_ADDR_MOVED_E = 41, CPSS_NET_MAC_SPOOF_E, CPSS_NET_MLL_RPF_TRAP_E = 120, CPSS_NET_RESERVED_SIP_TRAP_E = 128, 
    CPSS_NET_INTERNAL_SIP_TRAP_E, CPSS_NET_SIP_SPOOF_TRAP_E, CPSS_NET_DEF_KEY_TRAP_E = 132, CPSS_NET_IP_CLASS_TRAP_E, 
    CPSS_NET_CLASS_KEY_TRAP_E, CPSS_NET_TCP_RST_FIN_TRAP_E, CPSS_NET_CLASS_KEY_MIRROR_E, CPSS_NET_TRAP_BY_DEFAULT_ENTRY0_E, 
    CPSS_NET_TRAP_BY_DEFAULT_ENTRY1_E, CPSS_NET_TRAP_UD_INVALID_E, CPSS_NET_RESERVED_DIP_TRAP_E = 144, CPSS_NET_MC_BOUNDARY_TRAP_E, 
    CPSS_NET_INTERNAL_DIP_E, CPSS_NET_IP_ZERO_TTL_TRAP_E, CPSS_NET_BAD_IP_HDR_CHECKSUM_E, CPSS_NET_RPF_CHECK_FAILED_E, 
    CPSS_NET_OPTIONS_IN_IP_HDR_E, CPSS_NET_END_OF_IP_TUNNEL_E, CPSS_NET_BAD_TUNNEL_HDR_E, CPSS_NET_IP_HDR_ERROR_E, 
    CPSS_NET_ROUTE_ENTRY_TRAP_E, CPSS_NET_DIP_CHECK_ERROR_E, CPSS_NET_ILLEGAL_DIP_E, CPSS_NET_POLICY_TRAP_E, 
    CPSS_NET_DEFAULT_ROUTE_TRAP_E, CPSS_NET_IP_MTU_EXCEED_E = 161, CPSS_NET_MPLS_MTU_EXCEED_E, CPSS_NET_CLASS_MTU_EXCEED_E, 
    CPSS_NET_MPLS_ZERO_TTL_TRAP_E = 171, CPSS_NET_NHLFE_ENTRY_TRAP_E, CPSS_NET_ILLEGAL_POP_E, CPSS_NET_INVALID_MPLS_IF_E, 
    CPSS_NET_IPV6_ICMP_MLD_E, CPSS_NET_IPV6_IGMP_E, CPSS_NET_IPV6_MC_PCL_E = 186, CPSS_NET_IPV6_HOP_BY_HOP_E, 
    CPSS_NET_IPV6_EXT_HEADER_E, CPSS_NET_IPV6_BAD_HEADER_E, CPSS_NET_IPV6_ILLIGAL_DIP_E, CPSS_NET_IPV6_DIP_ERROR_E, 
    CPSS_NET_IPV6_ROUTE_TRAP_E, CPSS_NET_IPV6_ROUTER_RPF_E, CPSS_NET_IPV6_SCOP_FAIL_E, CPSS_NET_IPV6_TTL_TRAP_E, 
    CPSS_NET_IPV6_DEFAULT_ROUTE_E, CPSS_NET_MIRROR_PCL_RST_FIN_E = 201, CPSS_NET_MIRROR_PCL_PCE_E, CPSS_NET_MIRROR_BRIDGE_E, 
    CPSS_NET_MIRROR_MLD_E, CPSS_NET_MIRROR_IGMP_E, CPSS_NET_MIRROR_RIPV1_E, CPSS_NET_MIRROR_TTL_E, CPSS_NET_MIRROR_RPF_E, 
    CPSS_NET_MIRROR_IP_OPTIONS_E, CPSS_NET_MIRROR_ROUTE_E, CPSS_NET_MIRROR_ICMP_E, CPSS_NET_MIRROR_HOP_BY_HOP_E, 
    CPSS_NET_MIRROR_EXT_HEADER_E, CPSS_NET_MIRROR_HEADER_ERROR_E, CPSS_NET_MIRROR_ILLIGAL_IP_E, CPSS_NET_MIRROR_SPECIAL_DIP_E, 
    CPSS_NET_MIRROR_IP_SCOP_E, CPSS_NET_MIRROR_IP_MTU_E, CPSS_NET_MIRROR_INLIF_E, CPSS_NET_MIRROR_PCL_MTU_E, 
    CPSS_NET_MIRROR_DEFAULT_ROUTE_E, CPSS_NET_MIRROR_MC_ROUTE1_E, CPSS_NET_MIRROR_MC_ROUTE2_E, CPSS_NET_MIRROR_MC_ROUTE3_E, 
    CPSS_NET_MIRROR_IPV4_BC_E, CPSS_NET_ETH_BRIDGED_LLT_OBSOLETE_E = 248, CPSS_NET_IPV4_ROUTED_LLT_E, CPSS_NET_UC_MPLS_LLT_E, 
    CPSS_NET_MC_MPLS_LLT_E, CPSS_NET_IPV6_ROUTED_LLT_E, CPSS_NET_L2CE_LLT_E, CPSS_NET_EGRESS_MIRROR_TO_CPU_E, 
    CPSS_NET_UNKNOWN_UC_E = 261, CPSS_NET_UNREG_MC_E, CPSS_NET_LOCK_PORT_MIRROR_E = 271, CPSS_NET_IEEE_RSRVD_MULTICAST_ADDR_E = 300, 
    CPSS_NET_IPV6_ICMP_PACKET_E, CPSS_NET_MIRROR_IPV4_RIPV1_TO_CPU_E, CPSS_NET_IPV6_NEIGHBOR_SOLICITATION_E, 
    CPSS_NET_IPV4_BROADCAST_PACKET_E, CPSS_NET_NON_IPV4_BROADCAST_PACKET_E, CPSS_NET_CISCO_MULTICAST_MAC_RANGE_E, 
    CPSS_NET_UNREGISTERED_MULTICAST_E, CPSS_NET_IPV4_UNREGISTERED_MULTICAST_E, CPSS_NET_IPV6_UNREGISTERED_MULTICAST_E, 
    CPSS_NET_UNKNOWN_UNICAST_E, CPSS_NET_UDP_BC_MIRROR_TRAP0_E = 322, CPSS_NET_UDP_BC_MIRROR_TRAP1_E, 
    CPSS_NET_UDP_BC_MIRROR_TRAP2_E, CPSS_NET_UDP_BC_MIRROR_TRAP3_E, CPSS_NET_IEEE_RSRVD_MULTICAST_ADDR_1_E, 
    CPSS_NET_IEEE_RSRVD_MULTICAST_ADDR_2_E, CPSS_NET_IEEE_RSRVD_MULTICAST_ADDR_3_E, CPSS_NET_BRIDGED_PACKET_FORWARD_E = 400, 
    CPSS_NET_INGRESS_MIRRORED_TO_ANLYZER_E, CPSS_NET_EGRESS_MIRRORED_TO_ANLYZER_E, CPSS_NET_MAIL_FROM_NEIGHBOR_CPU_E, 
    CPSS_NET_CPU_TO_CPU_E, CPSS_NET_EGRESS_SAMPLED_E, CPSS_NET_INGRESS_SAMPLED_E, CPSS_NET_INVALID_PCL_KEY_TRAP_E = 409, 
    CPSS_NET_IPV4_IPV6_LINK_LOCAL_MC_DIP_TRP_MRR_E, CPSS_NET_PACKET_TO_VIRTUAL_ROUTER_PORT_E, 
    CPSS_NET_MIRROR_IPV4_UC_ICMP_REDIRECT_E, CPSS_NET_MIRROR_IPV6_UC_ICMP_REDIRECT_E, CPSS_NET_ROUTED_PACKET_FORWARD_E, 
    CPSS_NET_IP_DIP_DA_MISMATCH_E, CPSS_NET_IP_UC_SIP_SA_MISMATCH_E, CPSS_NET_IPV4_UC_ROUTE1_TRAP_E, CPSS_NET_IPV4_UC_ROUTE2_TRAP_E, 
    CPSS_NET_IPV4_UC_ROUTE3_TRAP_E, CPSS_NET_IPV4_MC_ROUTE0_TRAP_E, CPSS_NET_IPV4_MC_ROUTE1_TRAP_E, CPSS_NET_IPV4_MC_ROUTE2_TRAP_E, 
    CPSS_NET_IPV4_MC_ROUTE3_TRAP_E, CPSS_NET_IPV6_UC_ROUTE1_TRAP_E, CPSS_NET_IPV6_UC_ROUTE2_TRAP_E, CPSS_NET_IPV6_UC_ROUTE3_TRAP_E, 
    CPSS_NET_IPV6_MC_ROUTE0_TRAP_E, CPSS_NET_IPV6_MC_ROUTE1_TRAP_E, CPSS_NET_IPV6_MC_ROUTE2_TRAP_E = 430, 
    CPSS_NET_IPV6_MC_ROUTE3_TRAP_E, CPSS_NET_IP_UC_RPF_FAIL_E, CPSS_NET_ARP_BC_TO_ME_E, 
    CPSS_NET_IPV4_IPV6_LINK_LOCAL_MC_DIP_TRP_MRR_1_E, CPSS_NET_IPV4_IPV6_LINK_LOCAL_MC_DIP_TRP_MRR_2_E, 
    CPSS_NET_IPV4_IPV6_LINK_LOCAL_MC_DIP_TRP_MRR_3_E, CPSS_NET_SEC_AUTO_LEARN_UNK_SRC_TRAP_E, CPSS_NET_IPV4_TT_HEADER_ERROR_E, 
    CPSS_NET_IPV4_TT_OPTION_FRAG_ERROR_E, CPSS_NET_IPV4_TT_UNSUP_GRE_ERROR_E, CPSS_NET_ARP_REPLY_TO_ME_E, 
    CPSS_NET_CPU_TO_ALL_CPUS_E, CPSS_NET_TCP_SYN_TO_CPU_E, CPSS_NET_MC_BRIDGED_PACKET_FORWARD_E = 445, 
    CPSS_NET_MC_ROUTED_PACKET_FORWARD_E, CPSS_NET_L2VPN_PACKET_FORWARD_E, CPSS_NET_MPLS_PACKET_FORWARD_E, 
    CPSS_NET_ARP_BC_EGRESS_MIRROR_E = 451, CPSS_NET_VPLS_UNREGISTERED_MC_EGRESS_FILTER_E, CPSS_NET_VPLS_UNKWONW_UC_EGRESS_FILTER_E, 
    CPSS_NET_VPLS_BC_EGRESS_FILTER_E, CPSS_NET_MC_CPU_TO_CPU_E, CPSS_NET_PCL_MIRRORED_TO_ANALYZER_E, 
    CPSS_NET_VPLS_UNTAGGED_MRU_FILTER_E, CPSS_NET_TT_MPLS_HEADER_CHECK_E, CPSS_NET_TT_MPLS_TTL_EXCEED_E, CPSS_NET_TTI_MIRROR_E, 
    CPSS_NET_MPLS_SRC_FILTERING_E, CPSS_NET_IPV4_TTL1_EXCEEDED_E, CPSS_NET_IPV6_HOPLIMIT1_EXCEED_E, CPSS_NET_OAM_PDU_TRAP_E, 
    CPSS_NET_IPCL_MIRROR_E, CPSS_NET_MPLS_TTL1_EXCEEDED_E = 468, CPSS_NET_MPLS_ROUTE_ENTRY_1_E = 470, CPSS_NET_MPLS_ROUTE_ENTRY_2_E, 
    CPSS_NET_MPLS_ROUTE_ENTRY_3_E, CPSS_NET_PTP_HEADER_ERROR_E, CPSS_NET_IPV4_6_SIP_FILTERING_E, CPSS_NET_IPV4_6_SIP_IS_ZERO_E, 
    CPSS_NET_ACCESS_MATRIX_E, CPSS_NET_FCOE_DIP_LOOKUP_NOT_FOUND_OR_FCOE_EXCEPTION_E, CPSS_NET_FCOE_SIP_NOT_FOUND_E, 
    CPSS_NET_IP_MC_ROUTE_BIDIR_RPF_FAIL_E, CPSS_NET_MET_RED_DROP_CODE_E, CPSS_NET_ECC_DROP_CODE_E, 
    CPSS_NET_BAD_ANALYZER_INDEX_DROP_ERROR_E, CPSS_NET_RXDMA_DROP_E, CPSS_NET_TARGET_NULL_PORT_E, 
    CPSS_NET_TARGET_EPORT_MTU_EXCEEDED_OR_RX_PROTECTION_SWITCHING_OR_INGRESS_FORWARDING_RESTRICTIONS_E, 
    CPSS_NET_UNTAGGED_OVERSIZE_DROP_CODE_E, CPSS_NET_IPV6_TT_UNSUP_GRE_ERROR_E, CPSS_NET_CCFC_PKT_DROP_E, 
    CPSS_NET_BAD_FC_PKT_DROP_E, CPSS_NET_FIRST_USER_DEFINED_E = 500, CPSS_NET_USER_DEFINED_0_E = 500, CPSS_NET_USER_DEFINED_1_E, 
    CPSS_NET_USER_DEFINED_2_E, CPSS_NET_USER_DEFINED_3_E, CPSS_NET_USER_DEFINED_4_E, CPSS_NET_USER_DEFINED_5_E, 
    CPSS_NET_USER_DEFINED_6_E, CPSS_NET_USER_DEFINED_7_E, CPSS_NET_USER_DEFINED_8_E, CPSS_NET_USER_DEFINED_9_E, 
    CPSS_NET_USER_DEFINED_10_E, CPSS_NET_USER_DEFINED_11_E, CPSS_NET_USER_DEFINED_12_E, CPSS_NET_USER_DEFINED_13_E, 
    CPSS_NET_USER_DEFINED_14_E, CPSS_NET_USER_DEFINED_15_E, CPSS_NET_USER_DEFINED_16_E, CPSS_NET_USER_DEFINED_17_E, 
    CPSS_NET_USER_DEFINED_18_E, CPSS_NET_USER_DEFINED_19_E, CPSS_NET_USER_DEFINED_20_E, CPSS_NET_USER_DEFINED_21_E, 
    CPSS_NET_USER_DEFINED_22_E, CPSS_NET_USER_DEFINED_23_E, CPSS_NET_USER_DEFINED_24_E, CPSS_NET_USER_DEFINED_25_E, 
    CPSS_NET_USER_DEFINED_26_E, CPSS_NET_USER_DEFINED_27_E, CPSS_NET_USER_DEFINED_28_E, CPSS_NET_USER_DEFINED_29_E, 
    CPSS_NET_USER_DEFINED_30_E, CPSS_NET_USER_DEFINED_31_E, CPSS_NET_USER_DEFINED_32_E, CPSS_NET_USER_DEFINED_33_E, 
    CPSS_NET_USER_DEFINED_34_E, CPSS_NET_USER_DEFINED_35_E, CPSS_NET_USER_DEFINED_36_E, CPSS_NET_USER_DEFINED_37_E, 
    CPSS_NET_USER_DEFINED_38_E, CPSS_NET_USER_DEFINED_39_E, CPSS_NET_USER_DEFINED_40_E, CPSS_NET_USER_DEFINED_41_E, 
    CPSS_NET_USER_DEFINED_42_E, CPSS_NET_USER_DEFINED_43_E, CPSS_NET_USER_DEFINED_44_E, CPSS_NET_USER_DEFINED_45_E, 
    CPSS_NET_USER_DEFINED_46_E, CPSS_NET_USER_DEFINED_47_E, CPSS_NET_USER_DEFINED_48_E, CPSS_NET_USER_DEFINED_49_E, 
    CPSS_NET_USER_DEFINED_50_E, CPSS_NET_USER_DEFINED_51_E, CPSS_NET_USER_DEFINED_52_E, CPSS_NET_USER_DEFINED_53_E, 
    CPSS_NET_USER_DEFINED_54_E, CPSS_NET_USER_DEFINED_55_E, CPSS_NET_USER_DEFINED_56_E, CPSS_NET_USER_DEFINED_57_E, 
    CPSS_NET_USER_DEFINED_58_E, CPSS_NET_USER_DEFINED_59_E, CPSS_NET_USER_DEFINED_60_E, CPSS_NET_USER_DEFINED_61_E, 
    CPSS_NET_USER_DEFINED_62_E, CPSS_NET_USER_DEFINED_63_E, CPSS_NET_LAST_USER_DEFINED_E = 563, 
    CPSS_NET_FIRST_UNKNOWN_HW_CPU_CODE_E = 1024, CPSS_NET_LAST_UNKNOWN_HW_CPU_CODE_E = 1279, 
    CPSS_NET_ALL_CPU_OPCODES_E = 2147483647} CPSS_NET_RX_CPU_CODE_ENT;
typedef enum {CPSS_NET_TCP_UDP_PACKET_UC_E, CPSS_NET_TCP_UDP_PACKET_MC_E, 
    CPSS_NET_TCP_UDP_PACKET_BOTH_UC_MC_E} CPSS_NET_TCP_UDP_PACKET_TYPE_ENT;

File ../cpss/mainPpDrv/h/cpss/generic/pcl/cpssPcl.h:
typedef enum {CPSS_PCL_DIRECTION_INGRESS_E, CPSS_PCL_DIRECTION_EGRESS_E} CPSS_PCL_DIRECTION_ENT;
typedef enum {CPSS_PCL_LOOKUP_0_E, CPSS_PCL_LOOKUP_1_E, CPSS_PCL_LOOKUP_0_0_E, CPSS_PCL_LOOKUP_0_1_E, 
    CPSS_PCL_LOOKUP_NUMBER_0_E = 2, CPSS_PCL_LOOKUP_NUMBER_1_E, CPSS_PCL_LOOKUP_NUMBER_2_E = 1} CPSS_PCL_LOOKUP_NUMBER_ENT;
typedef enum {CPSS_PCL_RULE_SIZE_STD_E, CPSS_PCL_RULE_SIZE_30_BYTES_E = 0, CPSS_PCL_RULE_SIZE_EXT_E, 
    CPSS_PCL_RULE_SIZE_60_BYTES_E = 1, CPSS_PCL_RULE_SIZE_ULTRA_E, CPSS_PCL_RULE_SIZE_80_BYTES_E = 2, CPSS_PCL_RULE_SIZE_10_BYTES_E, 
    CPSS_PCL_RULE_SIZE_20_BYTES_E, CPSS_PCL_RULE_SIZE_40_BYTES_E, CPSS_PCL_RULE_SIZE_50_BYTES_E} CPSS_PCL_RULE_SIZE_ENT;

File ../cpss/mainPpDrv/h/cpss/generic/policer/cpssGenPolicerTypes.h:
typedef enum {CPSS_POLICER_COLOR_BLIND_E, CPSS_POLICER_COLOR_AWARE_E} CPSS_POLICER_COLOR_MODE_ENT;
typedef enum {CPSS_POLICER_PACKET_SIZE_TUNNEL_PASSENGER_E, CPSS_POLICER_PACKET_SIZE_L3_ONLY_E, 
    CPSS_POLICER_PACKET_SIZE_L2_INCLUDE_E, CPSS_POLICER_PACKET_SIZE_L1_INCLUDE_E} CPSS_POLICER_PACKET_SIZE_MODE_ENT;

File ../cpss/mainPpDrv/h/cpss/generic/port/cpssPortTx.h:
CPSS_PORT_TAIL_DROP_WRED_PARAMS_STC;
CPSS_PORT_TX_Q_TAIL_DROP_PROF_TC_PARAMS_STC;
CPSS_PORT_TX_Q_TAIL_DROP_WRED_TC_DP_PROF_PARAMS_STC;
typedef struct {
    GT_U32 guaranteedLimit;
    GT_U32 wredSize;
    CPSS_PORT_TX_TAIL_DROP_PROBABILITY_ENT probability;
} CPSS_PORT_TAIL_DROP_WRED_PARAMS_STC;
typedef enum {CPSS_PORT_TX_DROP_MCAST_PRIORITY_LOW_E, CPSS_PORT_TX_DROP_MCAST_PRIORITY_HI_E} CPSS_PORT_TX_DROP_MCAST_PRIORITY_ENT;
typedef enum {CPSS_PORT_TX_DROP_PROFILE_1_E, CPSS_PORT_TX_DROP_PROFILE_2_E, CPSS_PORT_TX_DROP_PROFILE_3_E, 
    CPSS_PORT_TX_DROP_PROFILE_4_E, CPSS_PORT_TX_DROP_PROFILE_5_E, CPSS_PORT_TX_DROP_PROFILE_6_E, CPSS_PORT_TX_DROP_PROFILE_7_E, 
    CPSS_PORT_TX_DROP_PROFILE_8_E, CPSS_PORT_TX_DROP_PROFILE_9_E, CPSS_PORT_TX_DROP_PROFILE_10_E, CPSS_PORT_TX_DROP_PROFILE_11_E, 
    CPSS_PORT_TX_DROP_PROFILE_12_E, CPSS_PORT_TX_DROP_PROFILE_13_E, CPSS_PORT_TX_DROP_PROFILE_14_E, CPSS_PORT_TX_DROP_PROFILE_15_E, 
    CPSS_PORT_TX_DROP_PROFILE_16_E} CPSS_PORT_TX_DROP_PROFILE_SET_ENT;
typedef enum {CPSS_PORT_TX_WRR_ARB_GROUP_0_E, CPSS_PORT_TX_WRR_ARB_GROUP_1_E, 
    CPSS_PORT_TX_SP_ARB_GROUP_E} CPSS_PORT_TX_Q_ARB_GROUP_ENT;
typedef CPSS_PORT_TX_Q_TAIL_DROP_PROF_TC_PARAMS_STC CPSS_PORT_TX_Q_TAIL_DROP_PROF_TC_PARAMS_STC;
typedef struct {
    CPSS_PORT_TAIL_DROP_WRED_PARAMS_STC dp0WredAttributes;
    CPSS_PORT_TAIL_DROP_WRED_PARAMS_STC dp1WredAttributes;
    CPSS_PORT_TAIL_DROP_WRED_PARAMS_STC dp2WredAttributes;
} CPSS_PORT_TX_Q_TAIL_DROP_WRED_TC_DP_PROF_PARAMS_STC;
typedef enum {CPSS_PORT_TX_SCHEDULER_PROFILE_1_E, CPSS_PORT_TX_SCHEDULER_PROFILE_2_E, CPSS_PORT_TX_SCHEDULER_PROFILE_3_E, 
    CPSS_PORT_TX_SCHEDULER_PROFILE_4_E, CPSS_PORT_TX_SCHEDULER_PROFILE_5_E, CPSS_PORT_TX_SCHEDULER_PROFILE_6_E, 
    CPSS_PORT_TX_SCHEDULER_PROFILE_7_E, CPSS_PORT_TX_SCHEDULER_PROFILE_8_E, CPSS_PORT_TX_SCHEDULER_PROFILE_9_E, 
    CPSS_PORT_TX_SCHEDULER_PROFILE_10_E, CPSS_PORT_TX_SCHEDULER_PROFILE_11_E, CPSS_PORT_TX_SCHEDULER_PROFILE_12_E, 
    CPSS_PORT_TX_SCHEDULER_PROFILE_13_E, CPSS_PORT_TX_SCHEDULER_PROFILE_14_E, CPSS_PORT_TX_SCHEDULER_PROFILE_15_E, 
    CPSS_PORT_TX_SCHEDULER_PROFILE_16_E} CPSS_PORT_TX_SCHEDULER_PROFILE_SET_ENT;
typedef enum {CPSS_PORT_TX_TAIL_DROP_DBA_ALPHA_0_E, CPSS_PORT_TX_TAIL_DROP_DBA_ALPHA_0_125_E, 
    CPSS_PORT_TX_TAIL_DROP_DBA_ALPHA_0_25_E, CPSS_PORT_TX_TAIL_DROP_DBA_ALPHA_0_5_E, CPSS_PORT_TX_TAIL_DROP_DBA_ALPHA_1_E, 
    CPSS_PORT_TX_TAIL_DROP_DBA_ALPHA_2_E, CPSS_PORT_TX_TAIL_DROP_DBA_ALPHA_4_E, CPSS_PORT_TX_TAIL_DROP_DBA_ALPHA_8_E, 
    CPSS_PORT_TX_TAIL_DROP_DBA_ALPHA_0_03125_E, CPSS_PORT_TX_TAIL_DROP_DBA_ALPHA_0_0625_E, CPSS_PORT_TX_TAIL_DROP_DBA_ALPHA_16_E, 
    CPSS_PORT_TX_TAIL_DROP_DBA_ALPHA_32_E} CPSS_PORT_TX_TAIL_DROP_DBA_ALPHA_ENT;
typedef enum {CPSS_PORT_TX_TAIL_DROP_PROBABILITY_100_E, CPSS_PORT_TX_TAIL_DROP_PROBABILITY_89_E, 
    CPSS_PORT_TX_TAIL_DROP_PROBABILITY_73_E, CPSS_PORT_TX_TAIL_DROP_PROBABILITY_67_E, CPSS_PORT_TX_TAIL_DROP_PROBABILITY_50_E, 
    CPSS_PORT_TX_TAIL_DROP_PROBABILITY_25_E} CPSS_PORT_TX_TAIL_DROP_PROBABILITY_ENT;
typedef enum {CPSS_PORT_TX_TAIL_DROP_RESOURCE_MODE_GLOBAL_E, 
    CPSS_PORT_TX_TAIL_DROP_RESOURCE_MODE_POOL_E} CPSS_PORT_TX_TAIL_DROP_RESOURCE_MODE_ENT;

File ../cpss/mainPpDrv/h/cpss/generic/tm/prvCpssTmDefs.h:
typedef enum {PRV_CPSS_TM_DEV_BC2_E, PRV_CPSS_TM_DEV_BOBK_CETUS_E, PRV_CPSS_TM_DEV_BOBK_CAELUM_E, 
    PRV_CPSS_TM_DEV_LAST_E} PRV_CPSS_TM_DEVS_ENT;

File ../cpss/mainPpDrv/h/cpss/generic/trunk/cpssGenTrunkTypes.h:
typedef enum {CPSS_TRUNK_TYPE_FREE_E, CPSS_TRUNK_TYPE_REGULAR_E, CPSS_TRUNK_TYPE_CASCADE_E} CPSS_TRUNK_TYPE_ENT;

File ../cpss/mainPpDrv/h/cpss/generic/trunk/private/prvCpssTrunkTypes.h:
PRV_CPSS_FAMILY_TRUNK_BIND_FUNC_STC;
PRV_CPSS_TRUNK_DB_INFO_STC;
PRV_CPSS_TRUNK_ENTRY_INFO_STC;
typedef PRV_CPSS_FAMILY_TRUNK_BIND_FUNC_STC PRV_CPSS_FAMILY_TRUNK_BIND_FUNC_STC;
typedef GT_STATUS (*)(GT_U8) PRV_CPSS_TRUNK_DB_FLAGS_INIT_FUN;
typedef PRV_CPSS_TRUNK_DB_INFO_STC PRV_CPSS_TRUNK_DB_INFO_STC;
typedef GT_STATUS (*)(GT_U8, GT_U32, CPSS_PORTS_BMP_STC *) PRV_CPSS_TRUNK_DESIGNATED_MEMBERS_BMP_GET_FUNC;
typedef GT_STATUS (*)(GT_U8, GT_U32, CPSS_PORTS_BMP_STC *) PRV_CPSS_TRUNK_DESIGNATED_MEMBERS_BMP_SET_FUNC;
typedef PRV_CPSS_TRUNK_ENTRY_INFO_STC PRV_CPSS_TRUNK_ENTRY_INFO_STC;
typedef enum {PRV_CPSS_TRUNK_LOAD_BALANCE_NATIVE_E, PRV_CPSS_TRUNK_LOAD_BALANCE_WA_TWIST_C_D_SAMBA_E, 
    PRV_CPSS_TRUNK_LOAD_BALANCE_SX_EMULATION_E, PRV_CPSS_TRUNK_LOAD_BALANCE_FORCE_8_MEMBERS_E, 
    PRV_CPSS_TRUNK_LOAD_BALANCE_FLEX_E} PRV_CPSS_TRUNK_LOAD_BALANCE_TYPE_ENT;
typedef GT_STATUS (*)(GT_U8, GT_TRUNK_ID, GT_U32, CPSS_TRUNK_MEMBER_STC *) PRV_CPSS_TRUNK_MEMBERS_SET_FUNC;
typedef GT_STATUS (*)(GT_U8, GT_TRUNK_ID, CPSS_PORTS_BMP_STC *) PRV_CPSS_TRUNK_NON_MEMBERS_BMP_GET_FUNC;
typedef GT_STATUS (*)(GT_U8, GT_TRUNK_ID, CPSS_PORTS_BMP_STC *) PRV_CPSS_TRUNK_NON_MEMBERS_BMP_SET_FUNC;
typedef GT_STATUS (*)(GT_U8, GT_PHYSICAL_PORT_NUM, GT_BOOL, GT_TRUNK_ID) PRV_CPSS_TRUNK_PORT_TRUNK_ID_SET_FUNC;

File ../cpss/mainPpDrv/h/cpss/generic/tunnel/cpssGenTunnelTypes.h:
typedef enum {CPSS_TUNNEL_X_OVER_IPV4_E = 6, CPSS_TUNNEL_X_OVER_GRE_IPV4_E, CPSS_TUNNEL_X_OVER_MPLS_E, 
    CPSS_TUNNEL_MAC_IN_MAC_E = 10, CPSS_TUNNEL_GENERIC_IPV4_E = 13, CPSS_TUNNEL_GENERIC_IPV6_E, 
    CPSS_TUNNEL_GENERIC_E} CPSS_TUNNEL_TYPE_ENT;

File ../cpss/simulation/simGeneral/h/os/simOsBind/simOsBindConsole.h:
typedef GT_STATUS (*)(void) SIM_OS_ALLOC_CONSOLE_FUN;
typedef struct {
    SIM_OS_GET_COMMAND_LINE_FUN simOsGetCommandLine;
    SIM_OS_ALLOC_CONSOLE_FUN simOsAllocConsole;
    SIM_OS_SET_CONSOLE_TITLE_FUN simOsSetConsoleTitle;
    SIM_OS_SHELL_EXECUTE_FUN simOsShellExecute;
} SIM_OS_FUNC_BIND_CONSOLE_STC;
typedef char *(*)(void) SIM_OS_GET_COMMAND_LINE_FUN;
typedef GT_STATUS (*)(char *) SIM_OS_SET_CONSOLE_TITLE_FUN;
typedef GT_STATUS (*)(char *) SIM_OS_SHELL_EXECUTE_FUN;

File ../cpss/simulation/simGeneral/h/os/simOsBind/simOsBindIniFile.h:
typedef struct {
    SIM_OS_GET_CNF_VALUE_FUN simOsGetCnfValue;
    SIM_OS_SET_CNF_FILE_FUN simOsSetCnfFile;
} SIM_OS_FUNC_BIND_INI_FILE_STC;
typedef GT_BOOL (*)(char *, char *, GT_U32, char *) SIM_OS_GET_CNF_VALUE_FUN;
typedef void (*)(char *) SIM_OS_SET_CNF_FILE_FUN;

File ../cpss/simulation/simGeneral/h/os/simOsBind/simOsBindIntr.h:
typedef struct {
    SIM_OS_INTERRUPT_SET_FUN simOsInterruptSet;
    SIM_OS_INIT_INTERRUPT_FUN simOsInitInterrupt;
} SIM_OS_FUNC_BIND_INTERRUPTS_STC;
typedef void (*)(void) SIM_OS_INIT_INTERRUPT_FUN;
typedef GT_STATUS (*)(GT_U32) SIM_OS_INTERRUPT_SET_FUN;

File ../cpss/simulation/simGeneral/h/os/simOsBind/simOsBindProcess.h:
typedef unsigned int GT_FLAGS;
typedef unsigned int GT_PROCESS_ID;
typedef unsigned long GT_SH_MEM_ID;
typedef unsigned int GT_SH_MEM_KEY;
typedef int GT_SIGNAL_ID;
typedef void (*)(GT_SIGNAL_ID) PROCESS_HADLER_FUN;
typedef struct {
    SIM_OS_SHARED_MEM_GET_FUN simOsSharedMemGet;
    SIM_OS_SHARED_MEM_ATTACH_FUN simOsSharedMemAttach;
    SIM_OS_PROCESS_ID_GET_FUN simOsProcessIdGet;
    SIM_OS_PROCESS_NOTIFY_FUN simOsProcessNotify;
    SIM_OS_PROCESS_HANDLER_FUN simOsProcessHandler;
} SIM_OS_FUNC_BIND_PROCESS_STC;
typedef GT_STATUS (*)(GT_SIGNAL_ID, PROCESS_HADLER_FUN) SIM_OS_PROCESS_HANDLER_FUN;
typedef GT_STATUS (*)(GT_PROCESS_ID *) SIM_OS_PROCESS_ID_GET_FUN;
typedef GT_STATUS (*)(GT_PROCESS_ID, GT_U32) SIM_OS_PROCESS_NOTIFY_FUN;
typedef void *(*)(GT_SH_MEM_ID, const void *, GT_FLAGS) SIM_OS_SHARED_MEM_ATTACH_FUN;
typedef GT_STATUS (*)(GT_SH_MEM_KEY, GT_U32, GT_FLAGS, GT_SH_MEM_ID *) SIM_OS_SHARED_MEM_GET_FUN;

File ../cpss/simulation/simGeneral/h/os/simOsBind/simOsBindSlan.h:
typedef void (*)(SIM_OS_SLAN_ID, GT_BOOL) SIM_OS_CHANGE_LINK_STATUS_FUN;
typedef struct {
    SIM_OS_SLAN_BIND_FUN simOsSlanBind;
    SIM_OS_SLAN_TRANSMIT_FUN simOsSlanTransmit;
    SIM_OS_SLAN_UNBIND_FUN simOsSlanUnbind;
    SIM_OS_SLAN_INIT_FUN simOsSlanInit;
    SIM_OS_SLAN_CLOSE_FUN simOsSlanClose;
    SIM_OS_SLAN_START_FUN simOsSlanStart;
    SIM_OS_CHANGE_LINK_STATUS_FUN simOsChangeLinkStatus;
} SIM_OS_FUNC_BIND_SLAN_STC;
typedef SIM_OS_SLAN_ID (*)(char *, char *, void *, SIM_OS_SLAN_RCV_FUN) SIM_OS_SLAN_BIND_FUN;
typedef void (*)(void) SIM_OS_SLAN_CLOSE_FUN;
typedef void * SIM_OS_SLAN_ID;
typedef void (*)(void) SIM_OS_SLAN_INIT_FUN;
typedef enum {SIM_OS_SLAN_MSG_CODE_FRAME_CNS} SIM_OS_SLAN_MSG_TYPE_ENT;
typedef char *(*)(GT_U32, GT_U32, GT_U32, GT_U32, void *, char *) SIM_OS_SLAN_RCV_FUN;
typedef void (*)(void) SIM_OS_SLAN_START_FUN;
typedef unsigned int (*)(SIM_OS_SLAN_ID, SIM_OS_SLAN_MSG_TYPE_ENT, GT_U32, char *) SIM_OS_SLAN_TRANSMIT_FUN;
typedef void (*)(SIM_OS_SLAN_ID) SIM_OS_SLAN_UNBIND_FUN;

File ../cpss/simulation/simGeneral/h/os/simOsBind/simOsBindSockets.h:
typedef struct {
    SIM_OS_SOCKET_TCP_CREATE_FUN osSocketTcpCreate;
    SIM_OS_SOCKET_UDS_CREATE_FUN osSocketUdsCreate;
    SIM_OS_SOCKET_UDP_CREATE_FUN osSocketUdpCreate;
    SIM_OS_SOCKET_TCP_DESTROY_FUN osSocketTcpDestroy;
    SIM_OS_SOCKET_UDP_DESTROY_FUN osSocketUdpDestroy;
    SIM_OS_SOCKET_CREATE_ADDR_FUN osSocketCreateAddr;
    SIM_OS_SOCKET_DESTROY_ADDR_FUN osSocketDestroyAddr;
    SIM_OS_SOCKET_BIND_FUN osSocketBind;
    SIM_OS_SOCKET_LISTEN_FUN osSocketListen;
    SIM_OS_SOCKET_ACCEPT_FUN osSocketAccept;
    SIM_OS_SOCKET_CONNECT_FUN osSocketConnect;
    SIM_OS_SOCKET_SET_NON_BLOCK_FUN osSocketSetNonBlock;
    SIM_OS_SOCKET_SET_BLOCK_FUN osSocketSetBlock;
    SIM_OS_SOCKET_SEND_FUN osSocketSend;
    SIM_OS_SOCKET_SEND_TO_FUN osSocketSendTo;
    SIM_OS_SOCKET_RECV_FUN osSocketRecv;
    SIM_OS_SOCKET_RECV_FROM_FUN osSocketRecvFrom;
    SIM_OS_SOCKET_SET_SOCKET_NO_LINGER_FUN osSocketSetSocketNoLinger;
    SIM_OS_SOCKET_EXTRACT_IP_ADDR_FROM_SOCKET_ADDR_FUN osSocketExtractIpAddrFromSocketAddr;
    SIM_OS_SOCKET_GET_SOCKET_ADDR_SIZE_FUN osSocketGetSocketAddrSize;
    SIM_OS_SOCKET_SHUT_DOWN_FUN osSocketShutDown;
    SIM_OS_SELECT_CREATE_SET_FUN osSelectCreateSet;
    SIM_OS_SELECT_ERASE_SET_FUN osSelectEraseSet;
    SIM_OS_SELECT_ZERO_SET_FUN osSelectZeroSet;
    SIM_OS_SELECT_ADD_FD_TO_SET_FUN osSelectAddFdToSet;
    SIM_OS_SELECT_CLEAR_FD_FROM_SET_FUN osSelectClearFdFromSet;
    SIM_OS_SELECT_IS_FD_SET_FUN osSelectIsFdSet;
    SIM_OS_SELECT_COPY_SET_FUN osSelectCopySet;
    SIM_OS_SELECT_FUN osSelect;
    SIM_OS_SOCKET_GET_SOCKET_FD_SET_SIZE_FUN osSocketGetSocketFdSetSize;
    SIM_OS_SOCKET_SET_SOCKET_NO_DELAY_FUN simOsSocketSetSocketNoDelay;
} SIM_OS_FUNC_BIND_SOCKETS_STC;
typedef void (*)(void *, CPSS_SOCKET_FD) SIM_OS_SELECT_ADD_FD_TO_SET_FUN;
typedef void (*)(void *, CPSS_SOCKET_FD) SIM_OS_SELECT_CLEAR_FD_FROM_SET_FUN;
typedef void (*)(void *, void *) SIM_OS_SELECT_COPY_SET_FUN;
typedef void *(*)(void) SIM_OS_SELECT_CREATE_SET_FUN;
typedef void (*)(void *) SIM_OS_SELECT_ERASE_SET_FUN;
typedef GT_SSIZE_T (*)(CPSS_SOCKET_FD, void *, void *, void *, GT_U32) SIM_OS_SELECT_FUN;
typedef GT_BOOL (*)(void *, CPSS_SOCKET_FD) SIM_OS_SELECT_IS_FD_SET_FUN;
typedef void (*)(void *) SIM_OS_SELECT_ZERO_SET_FUN;
typedef CPSS_SOCKET_FD (*)(CPSS_SOCKET_FD, void *, GT_SIZE_T *) SIM_OS_SOCKET_ACCEPT_FUN;
typedef GT_STATUS (*)(CPSS_SOCKET_FD, void *, GT_SIZE_T) SIM_OS_SOCKET_BIND_FUN;
typedef GT_STATUS (*)(CPSS_SOCKET_FD, void *, GT_SIZE_T) SIM_OS_SOCKET_CONNECT_FUN;
typedef GT_STATUS (*)(const GT_CHAR *, CPSS_SOCKET_PORT, void **, GT_SIZE_T *) SIM_OS_SOCKET_CREATE_ADDR_FUN;
typedef void (*)(void *) SIM_OS_SOCKET_DESTROY_ADDR_FUN;
typedef GT_STATUS (*)(void *, GT_U32 *) SIM_OS_SOCKET_EXTRACT_IP_ADDR_FROM_SOCKET_ADDR_FUN;
typedef GT_STATUS (*)(GT_U32 *) SIM_OS_SOCKET_GET_SOCKET_ADDR_SIZE_FUN;
typedef GT_STATUS (*)(GT_U32 *) SIM_OS_SOCKET_GET_SOCKET_FD_SET_SIZE_FUN;
typedef GT_STATUS (*)(CPSS_SOCKET_FD, GT_SSIZE_T) SIM_OS_SOCKET_LISTEN_FUN;
typedef GT_SSIZE_T (*)(CPSS_SOCKET_FD, void *, GT_SIZE_T, GT_BOOL, void *, GT_SIZE_T *) SIM_OS_SOCKET_RECV_FROM_FUN;
typedef GT_SSIZE_T (*)(CPSS_SOCKET_FD, void *, GT_SIZE_T, GT_BOOL) SIM_OS_SOCKET_RECV_FUN;
typedef GT_SSIZE_T (*)(CPSS_SOCKET_FD, const void *, GT_SIZE_T) SIM_OS_SOCKET_SEND_FUN;
typedef GT_SSIZE_T (*)(CPSS_SOCKET_FD, const void *, GT_SIZE_T, void *, GT_SIZE_T) SIM_OS_SOCKET_SEND_TO_FUN;
typedef GT_STATUS (*)(CPSS_SOCKET_FD) SIM_OS_SOCKET_SET_BLOCK_FUN;
typedef GT_STATUS (*)(CPSS_SOCKET_FD) SIM_OS_SOCKET_SET_NON_BLOCK_FUN;
typedef GT_STATUS (*)(CPSS_SOCKET_FD) SIM_OS_SOCKET_SET_SOCKET_NO_DELAY_FUN;
typedef GT_STATUS (*)(CPSS_SOCKET_FD) SIM_OS_SOCKET_SET_SOCKET_NO_LINGER_FUN;
typedef GT_STATUS (*)(CPSS_SOCKET_FD, SOCKET_SHUTDOWN_OPERATION) SIM_OS_SOCKET_SHUT_DOWN_FUN;
typedef CPSS_SOCKET_FD (*)(GT_32) SIM_OS_SOCKET_TCP_CREATE_FUN;
typedef GT_STATUS (*)(CPSS_SOCKET_FD) SIM_OS_SOCKET_TCP_DESTROY_FUN;
typedef CPSS_SOCKET_FD (*)(GT_32) SIM_OS_SOCKET_UDP_CREATE_FUN;
typedef GT_STATUS (*)(CPSS_SOCKET_FD) SIM_OS_SOCKET_UDP_DESTROY_FUN;
typedef CPSS_SOCKET_FD (*)() SIM_OS_SOCKET_UDS_CREATE_FUN;

File ../cpss/simulation/simGeneral/h/os/simOsBind/simOsBindSync.h:
typedef GT_SEM (*)(void) SIM_OS_EVENT_CREATE_FUN;
typedef GT_STATUS (*)(GT_SEM) SIM_OS_EVENT_SET_FUN;
typedef GT_STATUS (*)(GT_SEM, GT_U32) SIM_OS_EVENT_WAIT_FUN;
typedef struct {
    SIM_OS_SEM_CREATE_FUN simOsSemCreate;
    SIM_OS_SEM_DELETE_FUN simOsSemDelete;
    SIM_OS_SEM_WAIT_FUN simOsSemWait;
    SIM_OS_SEM_SIGNAL_FUN simOsSemSignal;
    SIM_OS_MUTEX_CREATE_FUN simOsMutexCreate;
    SIM_OS_MUTEX_DELETE_FUN simOsMutexDelete;
    SIM_OS_MUTEX_UNLOCK_FUN simOsMutexUnlock;
    SIM_OS_MUTEX_LOCK_FUN simOsMutexLock;
    SIM_OS_EVENT_CREATE_FUN simOsEventCreate;
    SIM_OS_EVENT_SET_FUN simOsEventSet;
    SIM_OS_EVENT_WAIT_FUN simOsEventWait;
    SIM_OS_SEND_DATA_TO_VISUAL_ASIC_FUN simOsSendDataToVisualAsic;
    SIM_OS_TIME_FUN simOsTime;
} SIM_OS_FUNC_BIND_SYNC_STC;
typedef GT_MUTEX (*)(void) SIM_OS_MUTEX_CREATE_FUN;
typedef void (*)(GT_MUTEX) SIM_OS_MUTEX_DELETE_FUN;
typedef void (*)(GT_MUTEX) SIM_OS_MUTEX_LOCK_FUN;
typedef void (*)(GT_MUTEX) SIM_OS_MUTEX_UNLOCK_FUN;
typedef GT_SEM (*)(GT_U32, GT_U32) SIM_OS_SEM_CREATE_FUN;
typedef GT_STATUS (*)(GT_SEM) SIM_OS_SEM_DELETE_FUN;
typedef GT_STATUS (*)(GT_SEM) SIM_OS_SEM_SIGNAL_FUN;
typedef GT_STATUS (*)(GT_SEM, GT_U32) SIM_OS_SEM_WAIT_FUN;
typedef void (*)(void **, GT_U32) SIM_OS_SEND_DATA_TO_VISUAL_ASIC_FUN;
typedef GT_U32 (*)(void) SIM_OS_TIME_FUN;

File ../cpss/simulation/simGeneral/h/os/simOsBind/simOsBindTask.h:
typedef void * GT_TASK_HANDLE;
typedef enum {GT_TASK_PRIORITY_ABOVE_NORMAL = 1, GT_TASK_PRIORITY_BELOW_NORMAL, GT_TASK_PRIORITY_HIGHEST, GT_TASK_PRIORITY_IDLE, 
    GT_TASK_PRIORITY_LOWEST, GT_TASK_PRIORITY_NORMAL, GT_TASK_PRIORITY_TIME_CRITICAL} GT_TASK_PRIORITY_ENT;
typedef void (*)(void) SIM_OS_ABORT_FUN;
typedef GT_U32 (*)(GT_U32, GT_CHAR *, GT_U32) SIM_OS_BACK_TRACE;
typedef struct {
    SIM_OS_TASK_CREATE_FUN simOsTaskCreate;
    SIM_OS_TASK_DELETE_FUN simOsTaskDelete;
    SIM_OS_TASK_OWN_TASK_PURPOSE_SET_FUN simOsTaskOwnTaskPurposeSet;
    SIM_OS_TASK_OWN_TASK_PURPOSE_GET_FUN simOsTaskOwnTaskPurposeGet;
    SIM_OS_SLEEP_FUN simOsSleep;
    SIM_OS_TICK_GET_FUN simOsTickGet;
    SIM_OS_ABORT_FUN simOsAbort;
    SIM_OS_LAUNCH_APPLICATION_FUN simOsLaunchApplication;
    SIM_OS_BACK_TRACE simOsBacktrace;
} SIM_OS_FUNC_BIND_TASK_STC;
typedef void (*)(char *) SIM_OS_LAUNCH_APPLICATION_FUN;
typedef void (*)(GT_U32) SIM_OS_SLEEP_FUN;
typedef struct {
    GT_U32 currentPipeId;
    GT_U32 currentMgUnitIndex;
    GT_U32 extParamArr[2];
    GT_BOOL additionalInfo;
} SIM_OS_TASK_COOKIE_INFO_STC;
typedef GT_TASK_HANDLE (*)(GT_TASK_PRIORITY_ENT, unsigned int (*)(void *), void *) SIM_OS_TASK_CREATE_FUN;
typedef GT_STATUS (*)(GT_TASK_HANDLE) SIM_OS_TASK_DELETE_FUN;
typedef GT_STATUS (*)(SIM_OS_TASK_PURPOSE_TYPE_ENT *) SIM_OS_TASK_OWN_TASK_PURPOSE_GET_FUN;
typedef GT_STATUS (*)(SIM_OS_TASK_PURPOSE_TYPE_ENT, SIM_OS_TASK_COOKIE_INFO_STC *) SIM_OS_TASK_OWN_TASK_PURPOSE_SET_FUN;
typedef enum {SIM_OS_TASK_PURPOSE_TYPE_CPU_APPLICATION_E, SIM_OS_TASK_PURPOSE_TYPE_CPU_ISR_E, 
    SIM_OS_TASK_PURPOSE_TYPE_PP_AGING_DAEMON_E, SIM_OS_TASK_PURPOSE_TYPE_PP_PIPE_PROCESSING_DAEMON_E, 
    SIM_OS_TASK_PURPOSE_TYPE_PP_PIPE_SDMA_QUEUE_DAEMON_E, SIM_OS_TASK_PURPOSE_TYPE_PP_PIPE_OAM_KEEP_ALIVE_DAEMON_E, 
    SIM_OS_TASK_PURPOSE_TYPE_PP_PIPE_GENERAL_PURPOSE_E, SIM_OS_TASK_PURPOSE_TYPE_PP_PIPE_SOFT_RESET_E, 
    SIM_OS_TASK_PURPOSE_TYPE_INITIALIZATION_E, SIM_OS_TASK_PURPOSE_TYPE_PP_PIPE_GENERAL____LAST__E} SIM_OS_TASK_PURPOSE_TYPE_ENT;
typedef GT_U32 (*)(void) SIM_OS_TICK_GET_FUN;

File ../cpss/simulation/simGeneral/h/os/simTypesBind.h:
typedef struct {
    SIM_OS_WRAPPER_OPEN_FUN osWrapperOpen;
    SIM_OS_SERIAL_DESTROY_SERIAL_FUN osSerialDestroySerial;
    SIM_OS_FUNC_BIND_TASK_STC tasks;
    SIM_OS_FUNC_BIND_SYNC_STC sync;
    SIM_OS_FUNC_BIND_SLAN_STC slan;
    SIM_OS_FUNC_BIND_INTERRUPTS_STC interrupts;
    SIM_OS_FUNC_BIND_INI_FILE_STC iniFile;
    SIM_OS_FUNC_BIND_CONSOLE_STC console;
    SIM_OS_FUNC_BIND_SOCKETS_STC sockets;
    SIM_OS_FUNC_BIND_PROCESS_STC processes;
} SIM_OS_FUNC_BIND_STC;
typedef GT_STATUS (*)(void) SIM_OS_SERIAL_DESTROY_SERIAL_FUN;
typedef GT_STATUS (*)(void *) SIM_OS_WRAPPER_OPEN_FUN;

File ../cpssHal/cpssHalAcl/cpssHalAcl.c:
typedef _Bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long long;
typedef unsigned long long;
typedef unsigned long;
typedef short;
typedef unsigned short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;

File ../cpssHal/cpssHalCascadeMgr/cpssHalCascadeMgr.c:
typedef _Bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long long;
typedef unsigned long long;
typedef unsigned long;
typedef short;
typedef unsigned short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;

File ../cpssHal/cpssHalCopp/cpssHalCopp.c:
typedef _Bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long long;
typedef unsigned long long;
typedef unsigned long;
typedef short;
typedef unsigned short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;

File ../cpssHal/cpssHalCopp/include/cpssHalCopp.h:
typedef enum {XPS_STAT_RATE_INDEX_FWD_ALL, XPS_STAT_RATE_INDEX_DROP_ALL} XPS_STAT_RATE_LIMIT_INDEX;

File ../cpssHal/cpssHalCounter/cpssHalCounter.c:
typedef _Bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long long;
typedef unsigned long long;
typedef unsigned long;
typedef short;
typedef unsigned short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;

File ../cpssHal/cpssHalCtrlPkt/cpssHalCtrlPkt.c:
typedef _Bool;
typedef char;
struct cpssHalCtrlPktIpLinkLocalProtoCpuCode_t;
struct cpssHalCtrlPktResIeeeMCastCpuCodeMap_t;
enum cpssHalCtrlPktResIeeeMCastProtoPortProfile_e;
struct cpssHalCtrlPktUdpPortCpuCodePktCmd_t;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long long;
typedef unsigned long long;
typedef unsigned long;
typedef short;
typedef unsigned short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;

File ../cpssHal/cpssHalCtrlPkt/include/cpssHalCtrlPkt.h:
cpssHalBgpType;
cpssHalCtrlPktAclPriority;
cpssHalCtrlPktIcmpV6MsgType_e;
cpssHalCtrlPktIpLinkLocalProto_e;
cpssHalCtrlPktResIeeeMCastProto_e;
cpssHalCtrlPktTypes_e;
cpssHalCtrlPktUdpPort_e;
cpssHalCtrlPktUserDefinedCpuCode;
cpssHalIPProtoIndex_e;
typedef cpssHalBgpType cpssHalBgpType;
enum cpssHalCtrlPktAclPriority;
typedef cpssHalCtrlPktAclPriority cpssHalCtrlPktAclPriority_e;
struct cpssHalCtrlPktIcmpV6MsgTypeCmd_t;
typedef cpssHalCtrlPktIcmpV6MsgType_e cpssHalCtrlPktIcmpV6MsgType_e;
typedef cpssHalCtrlPktIpLinkLocalProto_e cpssHalCtrlPktIpLinkLocalProto_e;
typedef cpssHalCtrlPktResIeeeMCastProto_e cpssHalCtrlPktResIeeeMCastProto_e;
typedef cpssHalCtrlPktTypes_e cpssHalCtrlPktTypes_e;
typedef cpssHalCtrlPktUdpPort_e cpssHalCtrlPktUdpPort_e;
enum cpssHalCtrlPktUserDefinedCpuCode;
enum cpssHalL4PortRangeIndex_e;

File ../cpssHal/cpssHalDeviceMgr/cpssHalDevice.c:
typedef _Bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long long;
typedef unsigned long long;
typedef unsigned long;
typedef short;
typedef unsigned short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;

File ../cpssHal/cpssHalDeviceMgr/include/cpssHalDeviceStruct.h:
typedef struct {
    int isValid;
    int numPPDevices;
    int numDevAdded;
    int numOfGPorts;
    PROFILE_TYPE_HW_SKU_STC *halHwsku;
    HW_TABLE_PROFILE_STC *halHwsku2;
    uint32_t startPort;
    cpssHalPerDeviceCfg deviceCfg[2];
} cpssHalDeviceCfg;
typedef enum {DEVICE_NOT_VALID, DEVICE_INIT_IN_PROGRESS, DEVICE_INITED} cpssHalDeviceState;
typedef struct {
    int deviceId;
    cpssHalDeviceState state;
    void *profile;
    int numOfLPorts;
    int numOfCscdPorts;
    int portActive[1024];
    int portMap[1024];
    int cscdPortMap[6];
    XP_DEV_TYPE_T devType;
} cpssHalPerDeviceCfg;

File ../cpssHal/cpssHalExt/cpssHalExt.c:
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long long;
typedef unsigned long long;
typedef unsigned long;
typedef short;
typedef unsigned short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;

File ../cpssHal/cpssHalExt/include/cpssHalExt.h:
typedef struct {
    GT_U16 vendorId;
    GT_U16 devId;
} GT_PCI_DEV_VENDOR_ID;
typedef struct {
    GT_PCI_DEV_VENDOR_ID pciDevVendorId;
    GT_UINTPTR pciBaseAddr;
    GT_UINTPTR internalPciBase;
    GT_UINTPTR resetAndInitControllerBase;
    GT_EXT_DRV_PCI_MAP_STC resourceMapping;
    GT_U32 pciIdSel;
    GT_U32 pciBusNum;
    GT_U32 funcNo;
    GT_U32 pciHeaderInfo[16];
} GT_PCI_INFO;

File ../cpssHal/cpssHalFdb/cpssHalFdb.c:
typedef _Bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long long;
typedef unsigned long long;
typedef unsigned long;
typedef short;
typedef unsigned short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;

File ../cpssHal/cpssHalFdb/cpssHalFdbMgr.c:
typedef _Bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long long;
typedef unsigned long long;
typedef unsigned long;
typedef short;
typedef unsigned short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;

File ../cpssHal/cpssHalFdb/include/cpssHalFdb.h:
typedef enum {PRV_XPS_BRG_FDB_ACCESS_MODE_BY_MESSAGE_E, PRV_XPS_BRG_FDB_ACCESS_MODE_BY_INDEX_E} PRV_XPS_BRG_FDB_ACCESS_MODE_ENT;
typedef enum {XPS_FDB_ENTRY_TYPE_MAC_ADDR_E, XPS_FDB_ENTRY_TYPE_IPV4_MCAST_E, XPS_FDB_ENTRY_TYPE_IPV6_MCAST_E, 
    XPS_FDB_ENTRY_TYPE_VPLS_E, XPS_FDB_ENTRY_TYPE_IPV4_UC_E, XPS_FDB_ENTRY_TYPE_IPV6_UC_ADDR_ENTRY_E, 
    XPS_FDB_ENTRY_TYPE_IPV6_UC_DATA_ENTRY_E, XPS_FDB_ENTRY_TYPE_MAC_ADDR_FID_VID1_E, XPS_FDB_ENTRY_TYPE_IPV4_MCAST_FID_VID1_E, 
    XPS_FDB_ENTRY_TYPE_IPV6_MCAST_FID_VID1_E} XPS_FDB_ENTRY_TYPE_ENT;

File ../cpssHal/cpssHalHostIntfMgr/cpssHalHostIf.c:
typedef _Bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long long;
typedef unsigned long long;
typedef unsigned long;
typedef short;
typedef unsigned short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;

File ../cpssHal/cpssHalHostIntfMgr/include/cpssHalHostIf.h:
CPSS_HAL_HOSTIF_TX_DATA_T;
XPS_HOSTIF_OUT_PACKET_BUFFER_STC;
typedef CPSS_HAL_HOSTIF_TX_DATA_T CPSS_HAL_HOSTIF_TX_DATA_T;
typedef struct {
    CPSS_NET_RX_CPU_CODE_ENT reason;
    uint32_t ingressPortNum;
    uint32_t hostPktDataSize;
    uint8_t *hostPktDataPtr;
    uint16_t vlanId;
} XPS_HOSTIF_IN_PACKET_BUFFER_STC;
typedef XPS_HOSTIF_OUT_PACKET_BUFFER_STC XPS_HOSTIF_OUT_PACKET_BUFFER_STC;
typedef enum {XPS_HOSTIF_HANDLER_TYPE_RX_E, XPS_HOSTIF_HANDLER_TYPE_RX_ERR_E, 
    XPS_HOSTIF_HANDLER_TYPE_ANY_E} XPS_HOSTIF_RX_EV_HANDLER_TYPE_ENT;
typedef enum {TC_PRIORITY_0, TC_PRIORITY_1, TC_PRIORITY_2, TC_PRIORITY_3, TC_PRIORITY_4, TC_PRIORITY_5, TC_PRIORITY_6, 
    TC_PRIORITY_7} XPS_HOSTIF_TRAFFIC_CLASS;

File ../cpssHal/cpssHalInit/cpssHalConfig.c:
typedef _Bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long long;
typedef unsigned long long;
typedef unsigned long;
typedef short;
typedef unsigned short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;

File ../cpssHal/cpssHalInit/cpssHalDev.c:
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long long;
typedef unsigned long long;
typedef unsigned long;
typedef short;
typedef unsigned short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;

File ../cpssHal/cpssHalInit/cpssHalInit.c:
typedef struct {
    GT_PHY_WRITE_TYPE_ENT allPorts;
    GT_U8 phyRegAddr;
    GT_U16 phyRegData;
} APP_DEMO_QUAD_PHY_CFG_STC;
typedef struct {
    GT_UINTPTR evHndl;
    GT_U32 hndlrIndex;
} EV_HNDLR_PARAM;
enum GT_PHY_WRITE_TYPE_ENT;
typedef struct {
    GT_U32 sdmaPort;
    GT_U32 macPort;
} MUX_DMA_STC;
typedef struct {
    GT_U32 firstDma;
    GT_U32 numPorts;
} SDMA_RANGE_INFO_STC;
typedef _Bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long long;
typedef unsigned long long;
typedef unsigned long;
typedef struct {
    GT_U8 devNum;
    CPSS_PP_DEVICE_TYPE devType;
    GT_PCI_INFO pciInfo;
    GT_BOOL Ports[1024];
    GT_U32 numPorts;
} mrvDevInfo;
typedef short;
typedef unsigned short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;

File ../cpssHal/cpssHalInit/cpssHalSys.c:
typedef _Bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long long;
typedef unsigned long long;
typedef unsigned long;
typedef short;
typedef unsigned short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;

File ../cpssHal/cpssHalInit/include/cpssHalDev.h:
typedef struct {
    CPSS_PP_DEVICE_TYPE devType;
    GT_BOOL needDevMapping;
    GT_BOOL needServiceCpu;
    CPSS_DXCH_PP_SERDES_REF_CLOCK_ENT serdesRefClock;
    CPSS_DXCH_IMPLEMENT_WA_ENT waList[30];
} mrvSupportedDevinfo;

File ../cpssHal/cpssHalInit/include/cpssHalProfile.h:
PORT_MAP_STC;
PROFILE_STC;
PROFILE_TYPE_HW_SKU_STC;
PROFILE_VALUE;
SERDES_LANE_POLARITY_STC;
SMI_PHY_STC;
typedef struct {
    uint32_t maxHashTable;
    uint32_t maxRouteLPM;
    uint32_t maxExactMatch;
    uint32_t maxPBR;
    uint32_t maxNH;
    uint32_t maxNhEcmpGrps;
    uint32_t maxNhEcmpMbrPerGrp;
    uint32_t maxNeighbours;
    uint32_t maxARP;
    uint32_t maxTunStart;
    uint32_t maxNATTable;
    uint32_t maxVRF;
    uint32_t maxIACL;
    uint32_t maxEACL;
    uint32_t maxTunTerm;
    uint32_t maxIVIF;
    uint32_t maxEVIF;
    uint32_t maxMirrorSessions;
    uint32_t maxMac2Me;
    uint32_t maxMllPair;
} HW_TABLE_PROFILE_STC;
typedef enum {LED_PROFILE_DEFAULT_E, LED_PROFILE_64BIT_AC3X, LED_PROFILE_97BIT_AC3X, LED_PROFILE_LAST_E = 255} LED_PROFILE_TYPE_E;
typedef PORT_MAP_STC PORT_MAP_STC;
typedef enum {PROFILE_INTERFACE_MODE_1000BASE_X_E = 6, PROFILE_INTERFACE_MODE_QSGMII_E = 13, PROFILE_INTERFACE_MODE_KR_E = 16, 
    PROFILE_INTERFACE_MODE_SR_LR_E = 20, PROFILE_INTERFACE_MODE_KR2_E = 27, PROFILE_INTERFACE_MODE_KR4_E, 
    PROFILE_INTERFACE_MODE_CR2_E = 37, PROFILE_INTERFACE_MODE_CR4_E, PROFILE_INTERFACE_MODE_KR8_E = 41, 
    PROFILE_INTERFACE_MODE_CR8_E} PROFILE_INTERFACE_MODE_ENT;
typedef PROFILE_STC PROFILE_STC;
typedef enum {PROFILE_TYPE_INVALID_E, PROFILE_TYPE_PORT_MAP_E, PROFILE_TYPE_LANE_SWAP_E, PROFILE_TYPE_SIM_INIFILE_E, 
    PROFILE_TYPE_CPU_PORT_MAP_E, PROFILE_TYPE_CASCADE_PORT_MAP_E, PROFILE_TYPE_HW_SKU_E, PROFILE_TYPE_MAX_E, 
    PROFILE_TYPE_LAST_E = 255} PROFILE_TYPE_ENT;
typedef PROFILE_TYPE_HW_SKU_STC PROFILE_TYPE_HW_SKU_STC;
typedef PROFILE_VALUE PROFILE_VALUE;
typedef SERDES_LANE_POLARITY_STC SERDES_LANE_POLARITY_STC;
typedef SMI_PHY_STC SMI_PHY_STC;

File ../cpssHal/cpssHalL3/cpssHalL3.c:
typedef _Bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long long;
typedef unsigned long long;
typedef unsigned long;
struct macSaTableIndexMap_t;
typedef short;
typedef unsigned short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;

File ../cpssHal/cpssHalLag/cpssHalLag.c:
typedef _Bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long long;
typedef unsigned long long;
typedef unsigned long;
typedef short;
typedef unsigned short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;

File ../cpssHal/cpssHalLinkMgr/cpssHalLed.c:
typedef struct {
    GT_U32 ledIntf;
    GT_U32 ledStart;
    GT_U32 ledEnd;
} CPSSHAL_ALDRIN2XL_LED_STREAM_INDICATIONS_STC;
typedef struct {
    GT_U32 ledStart;
    GT_U32 ledEnd;
    GT_BOOL cpuPort;
} CPSSHAL_FALCON_LED_STREAM_INDICATIONS_STC;
typedef _Bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long long;
typedef unsigned long long;
typedef unsigned long;
typedef short;
typedef unsigned short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;

File ../cpssHal/cpssHalLinkMgr/cpssHalMac.c:
typedef _Bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long long;
typedef unsigned long long;
typedef unsigned long;
typedef short;
typedef unsigned short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;

File ../cpssHal/cpssHalLinkMgr/cpssHalPhy.c:
typedef _Bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long long;
typedef unsigned long long;
typedef unsigned long;
typedef short;
typedef unsigned short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;

File ../cpssHal/cpssHalLinkMgr/cpssHalPort.c:
typedef _Bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long long;
typedef unsigned long long;
typedef unsigned long;
typedef short;
typedef unsigned short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;

File ../cpssHal/cpssHalLinkMgr/cpssHalPortMgr.c:
typedef _Bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long long;
typedef unsigned long long;
typedef unsigned long;
typedef short;
typedef unsigned short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;

File ../cpssHal/cpssHalLinkMgr/cpssHalPortNoMgr.c:
typedef _Bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long long;
typedef unsigned long long;
typedef unsigned long;
typedef short;
typedef unsigned short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;

File ../cpssHal/cpssHalLinkMgr/cpssLuaDemoAPI.c:
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long long;
typedef unsigned long long;
typedef unsigned long;
typedef short;
typedef unsigned short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;

File ../cpssHal/cpssHalMirror/cpssHalMirror.c:
typedef _Bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long long;
typedef unsigned long long;
typedef unsigned long;
typedef short;
typedef unsigned short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;

File ../cpssHal/cpssHalMulticast/cpssHalMulticast.c:
typedef _Bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long long;
typedef unsigned long long;
typedef unsigned long;
typedef short;
typedef unsigned short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;

File ../cpssHal/cpssHalNhgrp/cpssHalNhgrp.c:
typedef _Bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long long;
typedef unsigned long long;
typedef unsigned long;
typedef short;
typedef unsigned short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;

File ../cpssHal/cpssHalPlatform/cpssHalPlatform.c:
typedef _Bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long long;
typedef unsigned long long;
typedef unsigned long;
typedef short;
typedef unsigned short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;

File ../cpssHal/cpssHalPlatform/cpssHalSysKern.c:
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long long;
typedef unsigned long long;
typedef unsigned long;
typedef short;
typedef unsigned short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;

File ../cpssHal/cpssHalQos/cpssHalQos.c:
typedef struct {
    GT_U32 ingressAvaileble;
    GT_U32 ingressLimit;
    GT_U32 egressAvaileble;
    GT_U32 egressLimit;
} CPSS_HAL_VIRT_POOL_STC;
typedef _Bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long long;
typedef unsigned long long;
typedef unsigned long;
typedef short;
typedef unsigned short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;

File ../cpssHal/cpssHalShell/cpssHalShell.c:
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long long;
typedef unsigned long long;
typedef unsigned long;
typedef short;
typedef unsigned short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;

File ../cpssHal/cpssHalSim/cpssHalSim.c:
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long long;
typedef unsigned long long;
typedef unsigned long;
typedef short;
typedef unsigned short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;

File ../cpssHal/cpssHalStp/cpssHalStp.c:
typedef _Bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long long;
typedef unsigned long long;
typedef unsigned long;
typedef short;
typedef unsigned short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;

File ../cpssHal/cpssHalTcam/cpssHalTcam.c:
typedef _Bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long long;
typedef unsigned long long;
typedef unsigned long;
typedef short;
typedef unsigned short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;

File ../cpssHal/cpssHalTunnel/cpssHalTunnel.c:
typedef _Bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long long;
typedef unsigned long long;
typedef unsigned long;
typedef short;
typedef unsigned short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;

File ../cpssHal/cpssHalTunnel/include/cpssHalTunnel.h:
typedef enum {CPSS_HAL_TTI_IPV4_PCL_ID, CPSS_HAL_TTI_UDB_IPV6_PCL_ID} CPSS_HAL_TTI_PCL_ID;

File ../cpssHal/cpssHalUtil/cpssHalDumpUtil.c:
typedef _Bool;
typedef char;
struct cpssHalDumpUtlDbgFunction;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long long;
typedef unsigned long long;
typedef unsigned long;
typedef short;
typedef unsigned short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;

File ../cpssHal/cpssHalUtil/cpssHalOsNetworkStackLinux.c:
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long long;
typedef unsigned long long;
typedef unsigned long;
typedef short;
typedef unsigned short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;

File ../cpssHal/cpssHalUtil/cpssHalUtil.c:
typedef _Bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long long;
typedef unsigned long long;
typedef unsigned long;
typedef short;
typedef unsigned short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;

File ../cpssHal/cpssHalUtil/cpssHalUtilOsNetworkStack.c:
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long long;
typedef unsigned long long;
typedef unsigned long;
typedef short;
typedef unsigned short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;

File ../cpssHal/cpssHalUtil/include/cpssHalDumpUtil.h:
typedef struct {
    uint8_t addr[6];
} CPSS_HAL_DUMPMAC_ADDRESS_STC;
typedef enum {CPSS_HAL_DUMPERROR = -1, CPSS_HAL_DUMPOK, CPSS_HAL_DUMPFAIL} CPSS_HAL_DUMPSTATUS;
typedef struct {
    GT_U32 trafficClass : 3;
    GT_U32 dropPrecedence : 2;
    GT_U32 truncated : 1;
    GT_U32 reserved1 : 5;
    GT_U32 targetDeviceIndex : 3;
    GT_U32 reserved2 : 1;
    GT_U32 rateLimitingMode : 1;
    GT_U32 statisticalRateLimiterIndex : 8;
    GT_U32 rateLimiterIndex : 8;
} CPUCodeDisplayTable;
typedef struct {
    GT_U32 limiterPktNum : 16;
    GT_U32 limiterWindowSize : 12;
} rateLimiterConfigDisplayTable;

File ../cpssHal/cpssHalUtil/include/cpssHalUtil.h:
typedef enum {CPSS_HAL_MID_L3_MID_L2_NO_EM = 1, CPSS_HAL_MID_L3_MID_L2_MIN_EM, 
    CPSS_HAL_MAX_L3_MIN_L2_NO_EM = 9} CPSS_HAL_LPM_FBM_EM_PROF_ID;

File ../cpssHal/cpssHalVlan/cpssHalVlan.c:
typedef _Bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long long;
typedef unsigned long long;
typedef unsigned long;
typedef short;
typedef unsigned short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;

File ../demo/common/include/xpAppUtil.h:
struct _xpLinkPortTuneAndANThreadInfo;
struct allocatedMplsTnlVifMap;
typedef struct _xpLinkPortTuneAndANThreadInfo xpPortTuneAndANThreadInfo;
struct xpRecvThreadCfg;

File ../demo/common/py/xpPyEmbed.c:
typedef _Bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long double;
typedef long;
typedef long long;
typedef unsigned long long;
typedef unsigned long;
typedef short;
typedef unsigned short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;

File ../demo/common/py/xpPyInc.h:
typedef enum {XP_SHELL_NONE, XP_SHELL_APP, XP_SHELL_SIM, XP_SHELL_DEFAULT, XP_SHELL_STANDALONE, XP_SHELL_CLIENT, XP_SHELL_KERNEL, 
    XP_SHELL_INLINE, XP_SHELL_MAX} XP_SHELL_CLIENT_ID;
struct shellArg;
typedef struct shellArg xpShellArg;
typedef enum {XP_SHELL_EXIT_0, XP_SHELL_EXIT_1, XP_SHELL_EXIT_2, XP_SHELL_EXIT_3, XP_SHELL_EXIT_4, XP_SHELL_EXIT_5, XP_SHELL_EXIT_6, 
    XP_SHELL_EXIT_LAST} xpShellExitMode_e;

File ../demo/common/py/xpsAppShellInterface.c:
typedef char;
typedef int;
typedef long;
typedef long long;
typedef unsigned long long;
typedef unsigned long;
typedef short;
typedef unsigned short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;

File ../demo/common/xpAppSignalHandler.c:
typedef _Bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long long;
typedef unsigned long long;
typedef unsigned long;
typedef short;
typedef unsigned short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;

File ../demo/common/xpAppUtil.c:
typedef _Bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long long;
typedef unsigned long long;
typedef unsigned long;
typedef short;
typedef unsigned short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;

File ../demo/config/include/xpAppConfig.h:
struct _debugLogInfo;
struct _xpAppConfig;
struct _xpInputControlPktEntry;
typedef struct _debugLogInfo debugLogInfo;
typedef struct _xpAppConfig xpAppConfig;
typedef struct _xpInputControlPktEntry xpInputControlPktEntry;

File ../demo/config/include/xpConfigFile.h:
typedef struct {
    uint16_t keyVlanId : 12;
    uint16_t maskVlanId : 12;
    uint8_t keyMacAddr[6];
    uint8_t maskMacAddr[6];
    uint8_t routerMac;
    uint8_t controlMac;
    uint8_t controlActionEn;
} ControlMacEntry;
typedef struct {
    uint8_t sourcePort;
    uint32_t reasonCodeKey;
    uint8_t enPolicer;
    uint32_t policerId;
    uint8_t updatePktCmd;
    uint8_t pktCmd;
    uint8_t updateReasonCode;
    uint32_t reasonCode;
} CoppEntry;
typedef struct {
    uint32_t enPktCmdUpd;
    uint32_t enRsnCodeUpd;
    uint32_t pktCmd;
    uint32_t rsnCode;
} EaclData;
typedef struct {
    int8_t type;
    int32_t eAclId;
    uint8_t macDa[6];
    uint8_t macSa[6];
    int32_t etherType;
    ipv4Addr_t dip;
    ipv4Addr_t sip;
    ipv6Addr_t dip6;
    ipv6Addr_t sip6;
    int32_t L4DestPort;
    int32_t L4SourcePort;
    int32_t icmpMessageType;
    int32_t protocol;
    int32_t eVlan;
    int32_t egressVif;
    int32_t eRif;
    int32_t vi;
    int32_t tcpFlags;
    int32_t dscp;
    int32_t exp;
    int32_t pcp;
    int32_t reasonCode;
    uint32_t priority;
    int32_t isDmacSet;
    int32_t isSmacSet;
    int32_t isDIPSet;
    int32_t isSIPSet;
    int32_t isDIP6Set;
    int32_t isSIP6Set;
} EaclL2KeyAttribute;
typedef struct {
    int8_t type;
    int32_t eAclId;
    uint8_t macDa[6];
    uint8_t macSa[6];
    int32_t etherType;
    ipv4Addr_t dip;
    ipv4Addr_t sip;
    ipv6Addr_t dip6;
    ipv6Addr_t sip6;
    int32_t L4DestPort;
    int32_t L4SourcePort;
    int32_t icmpMessageType;
    int32_t protocol;
    int32_t eVlan;
    int32_t egressVif;
    int32_t eRif;
    int32_t vi;
    int32_t tcpFlags;
    int32_t dscp;
    int32_t exp;
    int32_t pcp;
    int32_t reasonCode;
    uint32_t priority;
    int32_t isDmacSet;
    int32_t isSmacSet;
    int32_t isDIPSet;
    int32_t isSIPSet;
    int32_t isDIP6Set;
    int32_t isSIP6Set;
} EaclL2MaskAttribute;
typedef struct {
    uint8_t macAddr[6];
    int vlanId;
    int reasonCode;
} FdbControlMacEntry;
typedef struct {
    uint32_t isTerminal;
    uint32_t enPktCmdUpd;
    uint32_t enRedirectToEvif;
    uint32_t remarkDp;
    uint32_t enPolicer;
    uint32_t qosOrVlanRw;
    uint32_t enMirrorSsnUpd;
    uint32_t remarkTc;
    uint32_t remarkDscp;
    uint32_t remarkPcp;
    uint32_t pktCmdOrEcmpSize;
    uint32_t eVifId;
    uint32_t rsnCode;
    uint32_t policerId;
    uint32_t TC;
    uint32_t PCP;
    uint32_t DSCP;
    uint32_t mirrorSessionId;
    uint32_t DP;
    uint32_t type;
    uint32_t portNum;
    uint32_t vlan;
    uint32_t encapType;
} IaclData;
typedef struct {
    int32_t iAclId;
    uint8_t macDA[6];
    uint8_t macSA[6];
    int32_t etherType;
    int32_t cTagVid;
    int32_t cTagDei;
    int32_t cTagPcp;
    int32_t sTagVid;
    int32_t sTagDei;
    int32_t sTagPcp;
    ipv4Addr_t SIP;
    ipv4Addr_t DIP;
    int32_t L4DestPort;
    int32_t L4SourcePort;
    int32_t icmpMessageType;
    int32_t protocol;
    int32_t ipv4DfSet;
    int32_t ipv4MfSet;
    int32_t BD;
    int32_t dscp;
    int32_t iVif;
    int32_t pktHasCtag;
    int32_t pktHasStag;
    uint32_t pktLen;
    uint32_t isDIPSet;
    uint32_t isSIPSet;
    uint32_t isDmacSet;
    uint32_t isSmacSet;
    int32_t vrfId;
    uint32_t priority;
    uint32_t tableId;
} IaclL2Ipv4KeyAttribute;
typedef struct {
    uint32_t iAclId;
    uint8_t macDA[6];
    uint8_t macSA[6];
    uint32_t etherType;
    uint32_t cTagVid;
    uint32_t cTagDei;
    uint32_t cTagPcp;
    uint32_t sTagVid;
    uint32_t sTagDei;
    uint32_t sTagPcp;
    ipv4Addr_t DIP;
    ipv4Addr_t SIP;
    uint32_t L4DestPort;
    uint32_t L4SourcePort;
    uint32_t icmpMessageType;
    uint32_t protocol;
    uint32_t ipv4DfSet;
    uint32_t ipv4MfSet;
    uint32_t BD;
    uint32_t dscp;
    uint32_t iVif;
    uint32_t pktHasCtag;
    uint32_t pktHasStag;
    uint32_t pktLen;
    uint32_t isDIPSet;
    uint32_t isSIPSet;
    uint32_t isDmacSet;
    uint32_t isSmacSet;
    uint32_t vrfId;
} IaclL2Ipv4MaskAttribute;
typedef enum {XP_CONFIGFILE_IPTNL_TYPE_VXLAN, XP_CONFIGFILE_IPTNL_TYPE_NVGRE, XP_CONFIGFILE_IPTNL_TYPE_GRE, 
    XP_CONFIGFILE_IPTNL_TYPE_IP_OVER_IP, XP_CONFIGFILE_IPTNL_TYPE_GENEVE, XP_CONFIGFILE_IPTNL_TYPE_VPN_GRE, 
    XP_CONFIGFILE_IPTNL_TYPE_VPN_GRE_LOOSE, XP_CONFIGFILE_IPTNL_TYPE_GRE_ERSPAN2, XP_CONFIGFILE_TNL_TYPE_SRH} IpTunnelType;
typedef struct {
    uint32_t idx;
    uint8_t sip[4];
    uint8_t grpAddr[4];
    uint8_t pktCmd;
    uint8_t agingFlag;
    uint16_t vlan : 12;
    uint32_t mvif;
    uint32_t nodeIdx[10];
} Ipv4BridgeMcEntry;
typedef struct {
    uint8_t ipv4Addr[4];
    uint8_t vrf;
    uint32_t reasonCode;
} Ipv4HostControlEntry;
typedef struct {
    uint8_t ipv4Addr[4];
    uint8_t vrf;
    uint32_t nhId;
} Ipv4HostEntry;
typedef struct {
    uint8_t ipv4Addr[4];
    uint8_t vrf;
    uint32_t nhId;
    uint8_t scopeId;
} Ipv4HostScopeEntry;
typedef struct {
    uint32_t vrfId;
    uint32_t bdId;
    uint8_t grpAddr[4];
    uint32_t rpfValue;
} Ipv4PimBiDirEntry;
typedef struct {
    uint8_t ipv4Addr[4];
    uint8_t vrf;
    uint32_t netMask;
    uint32_t ecmpSize;
    entryList nhId;
} Ipv4RouteEntry;
typedef struct {
    uint32_t idx;
    uint8_t sip[4];
    uint8_t grpAddr[4];
    int32_t vrfId;
    uint32_t pktCmd;
    uint32_t mvif;
    uint8_t agingFlag;
    uint32_t rpfType;
    uint32_t rpfValue;
    uint32_t rpfFailCmd;
    int32_t vlanForIvifRpf;
    int32_t isMartialIp;
    uint32_t reasonCode;
    vlanToNodeIdxMap vlanNode[10];
} Ipv4RouteMcEntry;
typedef struct {
    uint8_t ipv4Addr[4];
    uint8_t vrf;
    uint32_t netMask;
    uint32_t ecmpSize;
    entryList nhId;
    uint8_t scopeId;
} Ipv4RouteScopeEntry;
typedef struct {
    uint8_t ipv4Addr[4];
    uint32_t l3IntfId;
    uint8_t macSA[6];
    uint8_t pktCmd;
} Ipv4SaiNeighborEntry;
typedef struct {
    uint32_t nhId;
    uint8_t ipv4Addr[4];
    xpVlan_t l3IntfId;
    uint8_t nextHopType;
} Ipv4SaiNhEntry;
typedef struct _sai_u32_list_t
{
    uint32_t count;
    uint32_t *list;
} sai_u32_list_t;
typedef struct {
    uint32_t nhId;
    uint8_t ipv4Addr[4];
    uint32_t vrfId;
    uint8_t pktCmd;
    uint8_t trapPriority;
    uint32_t nhGroupId;
    uint8_t netMask;
} Ipv4SaiRouteEntry;
typedef struct {
    uint32_t idx;
    uint8_t sip[16];
    uint8_t grpAddr[16];
    uint8_t pktCmd;
    uint16_t vlan : 12;
    uint32_t mvif;
    uint32_t nodeIdx[10];
} Ipv6BridgeMcEntry;
typedef struct {
    uint8_t ipv6Addr[16];
    uint8_t vrf;
    uint32_t reasonCode;
} Ipv6HostControlEntry;
typedef struct {
    uint8_t ipv6Addr[16];
    uint8_t vrf;
    uint32_t nhId;
} Ipv6HostEntry;
typedef struct {
    uint8_t ipv6Addr[16];
    uint8_t vrf;
    uint32_t netMask;
    uint32_t ecmpSize;
    uint32_t srIdx;
    entryList nhId;
} Ipv6RouteEntry;
typedef struct {
    uint32_t idx;
    uint8_t sip[16];
    uint8_t grpAddr[16];
    int32_t vrfId;
    uint32_t pktCmd;
    uint32_t mvif;
    uint32_t rpfType;
    uint32_t rpfValue;
    uint32_t rpfFailCmd;
    int32_t vlanForIvifRpf;
    uint32_t isMartialIp;
    uint32_t reasonCode;
    vlanToNodeIdxMap vlanNode[10];
} Ipv6RouteMcEntry;
typedef struct {
    uint8_t ipv6Addr[16];
    uint32_t l3IntfId;
    uint8_t macSA[6];
    uint8_t pktCmd;
} Ipv6SaiNeighborEntry;
typedef struct {
    uint32_t nhId;
    uint8_t ipv6Addr[16];
    xpVlan_t l3IntfId;
    uint8_t nextHopType;
} Ipv6SaiNhEntry;
typedef struct {
    uint32_t nhId;
    uint8_t ipv6Addr[16];
    uint32_t vrfId;
    uint8_t pktCmd;
    uint8_t trapPriority;
    uint32_t nhGroupId;
    uint8_t netMask;
} Ipv6SaiRouteEntry;
typedef struct {
    struct {...} enableData;
    uint32_t type;
    uint32_t ecmpSize;
    uint32_t futureUse;
    uint32_t reasonCode;
    uint32_t mirrorSessionId;
    uint32_t vlan;
    uint32_t portNum;
    uint32_t tc;
    uint32_t pcp;
    uint32_t dscp;
    uint32_t policerId;
    uint32_t nextHopId;
    uint32_t pktCmd;
    uint32_t dp;
} IpvxIaclData;
typedef struct {
    int32_t type;
    int32_t iaclId;
    int32_t ipVersion;
    int32_t aclKeyType;
    int32_t priority;
    int32_t sourcePort;
    int32_t etherType;
    int32_t cTagVid;
    int32_t cTagDei;
    int32_t cTagPcp;
    int32_t fragment;
    int32_t nextHeader;
    int32_t hopLimit;
    int32_t l4DestPort;
    int32_t l4SourcePort;
    int32_t icmpCode;
    int32_t icmpType;
    int32_t tcpFlags;
    int32_t ipType;
    int32_t DSCP;
    int32_t ECN;
    int32_t vlanId;
    int32_t egressVif;
    int32_t egressBd;
    int32_t TC;
    int32_t DP;
    int32_t isUcastRouted;
    macAddr_t macDA;
    macAddr_t macSA;
    union {...} sip;
    union {...} dip;
    struct {...} flags;
} IpvxIaclKeyAttribute;
typedef struct {
    uint32_t iaclId;
    uint32_t aclKeyType;
    uint32_t sourcePort;
    uint32_t etherType;
    uint32_t cTagVid;
    uint32_t cTagDei;
    uint32_t cTagPcp;
    uint32_t fragment;
    uint32_t nextHeader;
    uint32_t hopLimit;
    uint32_t l4DestPort;
    uint32_t l4SourcePort;
    uint32_t icmpCode;
    uint32_t icmpType;
    uint32_t tcpFlags;
    uint32_t ipType;
    uint32_t DSCP;
    uint32_t ECN;
    uint32_t vlanId;
    uint32_t egressVif;
    uint32_t egressBd;
    int32_t TC;
    int32_t DP;
    int32_t isUcastRouted;
    macAddr_t macDA;
    macAddr_t macSA;
    union {...} sip;
    union {...} dip;
} IpvxIaclMaskAttribute;
typedef struct {
    uint32_t nhGroupId;
    uint32_t ecmpSize;
    uint8_t groupAttrType;
    entryList nhIdList;
} IpvxSaiNhGroupEntry;
typedef struct {
    uint8_t macAddr[6];
    uint32_t destPort;
    uint32_t nhId;
    xpVlan_t cTagVid;
    uint32_t virtualId : 24;
    uint32_t isTagged;
    int32_t tnlIdx;
    int32_t mplsIdx;
    uint32_t geneveTunnelType;
    uint8_t pktCmd;
    uint8_t procTTL;
    uint8_t nhType;
    int32_t lagId;
    int32_t extendedPortIdx;
    int32_t reasonCode;
    int32_t allocateNhWithId;
} IpxNhEntry;
typedef struct {
    uint8_t macAddr[6];
    uint32_t destPort;
    uint32_t nhId;
    xpVlan_t cTagVid;
    uint32_t virtualId : 24;
    uint32_t isTagged;
    int32_t tnlIdx;
    int32_t mplsIdx;
    uint32_t geneveTunnelType;
    uint8_t pktCmd;
    uint8_t procTTL;
    uint8_t nhType;
    int32_t lagId;
    int32_t extendedPortIdx;
    int32_t reasonCode;
    uint8_t scopeId;
} IpxNhScopeEntry;
typedef struct {
    uint8_t macAddr[6];
    int vlan;
    int port;
    uint8_t encapType;
    uint8_t controlMac;
    uint8_t routerMac;
    uint8_t pktCmd;
    int tunnelIdx;
    uint32_t geneveTunnelType;
    int isLag;
    int lagId;
    int16_t extendedPortIdx;
    int isMcast;
    uint32_t mvifIdx[10];
    uint32_t vifMcastIdx;
    uint32_t mcastIdx;
    uint8_t agingFlag;
} MacEntry;
typedef struct {
    uint8_t macAddr[6];
    int vlan;
    int port;
    uint8_t encapType;
    uint8_t controlMac;
    uint8_t routerMac;
    uint8_t pktCmd;
    int tunnelIdx;
    uint32_t geneveTunnelType;
    int isLag;
    int lagId;
    int16_t extendedPortIdx;
    int isMcast;
    uint32_t mvifIdx[10];
    uint32_t vifMcastIdx;
    uint8_t scopeId;
    uint8_t agingFlag;
} MacScopeEntry;
struct MirrorEntry;
struct MirrorSource;
enum MirrorType;
typedef struct {
    uint32_t keyMplsLabel;
    uint8_t keyEntryFormat;
    uint8_t pktCmd;
    uint8_t propTTL;
    uint16_t CTagVid;
    uint16_t egressVif;
    uint8_t mplsOper;
    uint32_t mplsSwapLabel : 24;
    uint8_t macDA[6];
    uint32_t encapType;
    uint32_t numOfLabel;
    uint32_t nhId;
} MplsLabelEntry;
typedef struct {
    int32_t index;
    int mdtRootIndex;
    uint32_t portList[264];
    uint32_t numPorts;
    int8_t vifType;
    int8_t tnlType;
    uint32_t tnlIdx;
} MvifEntry;
typedef struct {
    ipv4Addr_t keySrcAddress;
    xpPort_t keySrcPort;
    ipv4Addr_t keyDestAddress;
    xpPort_t keyDestPort;
    uint32_t bd;
    uint16_t flag;
    uint8_t protocol;
    uint8_t pktCmd;
    ipv4Addr_t sipAddress;
    xpPort_t srcPort;
    ipv4Addr_t dipAddress;
    xpPort_t destPort;
    xpPort_t port;
    uint8_t mdtNatConfig;
    uint8_t natMode;
    uint8_t natScope;
} NatEntry;
typedef struct {
    uint8_t ethAddr[6];
    uint32_t ethType;
    uint16_t vlanVID;
    uint8_t vlanPCP;
    uint32_t mplsLabel;
    uint32_t mplsTC;
    uint32_t mplsBOS;
    uint32_t arpOP;
    uint8_t ipv4Addr[4];
    uint8_t ipv6Addr[16];
    uint8_t ipv6FlowLabel;
    uint32_t ipDSCP;
    uint32_t ipECN;
    uint32_t icmpType;
    uint32_t icmpCode;
    uint16_t l4Port;
    uint32_t pbbISID;
    uint32_t pbbUCA;
    uint32_t port;
    uint32_t pktMaxLen;
    uint32_t setTTL;
    uint32_t mpls;
    uint32_t mplsTTL;
} OpenFlowActionDataMask;
typedef struct {
    uint32_t actId;
    uint32_t actType;
    int32_t subActType;
    OpenFlowActionDataMask ofActionData;
    OpenFlowActionDataMask ofActionMask;
} OpenFlowActionEntry;
typedef struct {
    int16_t ofIdx;
    int16_t tableId;
    int16_t entryType;
    int16_t ofType;
    int16_t Priority;
    int16_t isGrpEntry;
    int16_t dpId;
    int16_t groupId;
    int16_t groupType;
    int16_t instType;
    int32_t metaData;
    int32_t metaDataMask;
    OpenFlowKeyMaskEntry openFlowKey;
    OpenFlowKeyMaskEntry openFlowMask;
    int16_t actSetId;
    int16_t actList[20];
    int8_t actLen;
    openFlowBucketList bucketList[10];
} OpenFlowDataEntry;
typedef struct {
    int32_t inPort;
    int32_t ipPhyPort;
    uint8_t ethDst[6];
    int8_t isDestMac;
    uint8_t ethSrc[6];
    int8_t isSrcMac;
    int32_t ethType;
    int32_t tagging;
    int16_t vlanVID;
    int32_t vlanPCP;
    int32_t mpls;
    int16_t tpSrc;
    int16_t tpDst;
    uint8_t ip4srcAddr[4];
    int8_t isIpv4SrcAddr;
    uint8_t ip4dstAddr[4];
    int8_t isIpv4dstAddr;
    int32_t ip4tos;
    int32_t ip4proto;
    int32_t ip4icmpType;
    int32_t ip4icmpCode;
    int32_t metaData;
} OpenFlowKeyMaskEntry;
typedef struct {
    uint32_t nhId;
    uint32_t ecmpEn;
    uint32_t portNum;
    uint32_t vlan;
} PbrData;
typedef struct {
    uint16_t port;
    uint8_t portState;
    uint8_t acceptedFrameType;
    uint8_t disableTunnelVif;
    uint8_t disableAclPbr;
    uint8_t setBd;
    uint16_t defaultVlan;
    uint8_t privateWireEn;
    uint16_t evif;
    uint8_t addPortBasedTag;
    uint8_t macSaMissCmd;
    uint8_t bumPolicerEn;
    uint8_t portDefaultDEI;
    uint8_t portDefaultPCP;
    uint8_t etagExists;
} PortConfigEntry;
typedef struct {
    uint16_t port;
    uint8_t tagType;
    uint8_t numOfExtPorts;
    uint8_t stpState;
    uint8_t setIngressVif;
    uint8_t disableTunnelVif;
    uint8_t mirrorToAnalyzerMask;
    uint8_t setBd;
    uint8_t enVlanHairPining;
    uint8_t enPbb;
    uint8_t natMode;
    uint8_t natScope;
    uint8_t enRouterACL;
    uint32_t routeAclId;
    uint8_t enBridgeACL;
    uint32_t bridgeAclId;
    uint8_t enIpv4Tunnel;
    uint8_t enMplsTunnel;
    uint8_t enOpenFlow;
    uint8_t setEgressVif;
    uint16_t evif;
    uint8_t encapType;
} PortEntry;
typedef struct {
    uint16_t lagId;
    uint16_t vlan;
    xpPort_t ports[264];
    uint8_t numPorts;
    uint8_t tagType;
    uint8_t stpState;
} PortLagEntry;
typedef struct {
    uint32_t srIdx;
    uint8_t numSegment;
    uint32_t nhId;
    uint8_t dmac[6];
    uint8_t smac;
    uint8_t tagType;
    uint16_t vlan;
    uint16_t portId;
    uint16_t ins3Id;
    uint8_t ip0[16];
    uint8_t ip1[16];
    uint8_t ip2[16];
} SrhEntry;
typedef struct {
    uint32_t addEtagPorts[264];
    uint32_t numOfAddEtagPorts;
    uint32_t keepEtagPorts[264];
    uint32_t numOfKeepEtagPorts;
    uint32_t addEtagLags[264];
    uint32_t numOfAddEtagLags;
    uint32_t keepEtagLags[264];
    uint32_t numOfKeepEtagLags;
    uint32_t stripEtagLagVif[264];
    uint32_t numOfStripEtagLagVif;
    uint32_t stripEtagVif[264];
    uint32_t numOfStripEtagVif;
    uint32_t longEtagModePort[264];
    uint32_t numOflongEtagModePort;
    uint32_t byPassPipelinePort[264][2];
    uint32_t numOfByPassPipelinePort;
} TrustBrEntry;
typedef struct {
    int tnlIdx;
    uint8_t dmac[6];
    uint8_t smac;
    uint8_t tagType;
    uint8_t dip[4];
    uint8_t myVtepIp[4];
    int vni;
    uint16_t vlan;
    int udpPort;
    int tunnelVif;
    uint16_t portId;
    uint16_t bdId : 12;
    uint8_t isMcast;
    IpTunnelType tnlType;
    uint8_t setBd;
    uint16_t greProtocolId;
    uint16_t tnlVlan : 12;
    uint8_t ipv4ARPBCCmd;
    uint8_t ipv4RouteEn;
    uint8_t ipv6RouteEn;
    uint8_t ipv4BridgeMcMode;
    uint8_t ipv6BridgeMcMode;
    uint8_t ipv4RouteMcEn;
    uint8_t ipv6RouteMcEn;
    uint8_t mplsRouteEn;
    uint8_t ipv4RouteMcMode;
    uint8_t ipv6RouteMcMode;
    uint8_t vrfId;
    uint8_t unregMcCmd;
    uint8_t bind2Vlan;
    uint32_t bindVlan;
    uint32_t nhId;
    uint32_t pktCmd;
} TunnelEntry;
typedef struct {
    uint8_t tagType;
    uint8_t numOfLables;
    uint32_t label0;
    uint32_t label1;
    uint16_t vlan;
    int tunnelVif;
    uint16_t portId;
    uint16_t bdId : 12;
    uint32_t mplsIdx;
    uint8_t macSALSBs;
    uint8_t macDA[6];
    uint8_t entryType;
    uint8_t setBd;
    uint16_t tnlVlan : 12;
    uint8_t ipv4ARPBCCmd;
    uint8_t ipv4RouteEn;
    uint8_t ipv6RouteEn;
    uint8_t ipv4BridgeMcMode;
    uint8_t ipv6BridgeMcMode;
    uint8_t ipv4RouteMcEn;
    uint8_t ipv6RouteMcEn;
    uint8_t mplsRouteEn;
    uint8_t ipv4RouteMcMode;
    uint8_t ipv6RouteMcMode;
    uint8_t vrfId;
    uint8_t unregMcCmd;
    uint32_t nhId;
} TunnelMplsEntry;
typedef struct {
    uint8_t bDa[6];
    uint8_t bSa[6];
    uint16_t bTag : 12;
    uint32_t iSID : 24;
    uint16_t portId;
    uint16_t bdId : 12;
    uint8_t bind2Vlan;
    uint32_t bindVlan;
    uint32_t pktCmd;
    uint8_t isEndPt;
} TunnelPBBEntry;
typedef struct {
    uint8_t tagType;
    uint16_t sTag : 12;
    uint16_t cTag : 12;
    uint16_t vlan;
    int tunnelVif;
    uint16_t portId;
    uint16_t bdId : 12;
    uint8_t isMcast;
} TunnelQinQEntry;
typedef struct {
    int32_t evif;
    uint32_t egressPorts[264];
    uint32_t numOfEgressPorts;
    uint32_t egressLags[264];
    uint32_t numOfEgressLags;
} VifEntry;
typedef struct {
    uint16_t vlan : 12;
    uint8_t macSAmissCmd;
    uint8_t broadcastCmd;
    uint8_t ipv4ARPBCCmd;
    uint8_t ipv4RouteEn;
    uint8_t ipv6RouteEn;
    uint8_t ipv4BridgeMcMode;
    uint8_t ipv6BridgeMcMode;
    uint8_t ipv4RouteMcEn;
    uint8_t ipv6RouteMcEn;
    uint8_t mplsRouteEn;
    uint8_t ipv4RouteMcMode;
    uint8_t ipv6RouteMcMode;
    uint8_t vrfId;
    uint8_t unregMcCmd;
    PortEntry portData[264];
    uint8_t numPorts;
    uint8_t vlanType;
    uint16_t parentVlan : 12;
    uint8_t enL3Inf;
    uint8_t macSALSBs;
    uint8_t natMode;
    uint8_t natScope;
    uint8_t natEn;
    uint8_t ipv4UrpfEn;
    uint8_t ipv4UrpfMode;
    uint8_t ipv6UrpfEn;
    uint8_t ipv6UrpfMode;
    uint32_t ipv4MtuLen;
    uint32_t ipv6MtuLen;
    uint8_t mtuPktCmd;
    uint32_t mvifIdx[10];
    uint32_t mcVifIdx;
    uint32_t mcastIdx;
} VlanEntry;
typedef struct {
    uint16_t vlan : 12;
    uint8_t macSAmissCmd;
    uint8_t broadcastCmd;
    uint8_t ipv4ARPBCCmd;
    uint8_t ipv4RouteEn;
    uint8_t ipv6RouteEn;
    uint8_t ipv4BridgeMcMode;
    uint8_t ipv6BridgeMcMode;
    uint8_t ipv4RouteMcEn;
    uint8_t ipv6RouteMcEn;
    uint8_t mplsRouteEn;
    uint8_t ipv4RouteMcMode;
    uint8_t ipv6RouteMcMode;
    uint8_t vrfId;
    uint8_t unregMcCmd;
    PortEntry portData[264];
    uint8_t numPorts;
    uint8_t vlanType;
    uint16_t parentVlan : 12;
    uint8_t enL3Inf;
    uint8_t macSALSBs;
    uint8_t natMode;
    uint8_t natScope;
    uint8_t natEn;
    uint8_t ipv4UrpfEn;
    uint8_t ipv4UrpfMode;
    uint8_t ipv6UrpfEn;
    uint32_t ipv4MtuLen;
    uint32_t ipv6MtuLen;
    uint8_t mtuPktCmd;
    uint8_t ipv6UrpfMode;
    uint8_t scopeId;
} VlanScopeEntry;
typedef struct {
    uint16_t vlanId;
    uint32_t tenantId;
    uint8_t tunnelType;
} VlanTenantIdEntry;
typedef struct {
    uint32_t vrfIdx;
    uint8_t v4RouteEn;
    uint8_t v6RouteEn;
} VrfEntry;
struct _entryList;
typedef struct _entryList entryList;
typedef struct {
    uint32_t index;
    int32_t nxtL2Ptr;
    int32_t mvifIndex;
    uint32_t mirrorSessionId;
    uint32_t nextEngine;
    uint32_t isLast;
    uint16_t encap;
    uint32_t encapData;
    uint8_t disableVlanTranslation;
} l2MdtEntry;
typedef struct {
    uint32_t index;
    int32_t nxtL3Ptr;
    int32_t nxtL2Ptr;
    uint32_t altVif;
    int32_t mvifIndex;
    uint32_t mirrorSessionId;
    uint32_t nextEngine;
    uint32_t isLast;
    uint16_t encap;
    uint32_t encapData;
    uint16_t cVlan;
} l3MdtEntry;
typedef struct {
    uint32_t func;
    uint32_t args;
    uint32_t VRFId;
    uint32_t nhId;
    uint32_t ecmpEnable;
    uint32_t flag;
    uint8_t localSid[16];
} localSidEntry;
union mirrorData;
struct mirrorErspan2Data;
struct mirrorLocalData;
struct openFlowBucketList;
typedef struct {
    int32_t portList[264];
    uint32_t color;
    uint32_t cbs;
    uint32_t cir;
    uint32_t pbs;
    uint32_t pir;
    uint32_t yellowPktAction;
    uint32_t redPktAction;
} policerDataEntry;
typedef struct {
    uint32_t devPort;
    uint32_t queueNum;
    uint32_t profileId;
    uint32_t minThreshold;
    uint32_t maxThreshold;
    uint32_t weight;
    uint32_t maxDropProb;
    uint32_t lengthMaxThreshold;
    xpWredMode_e wredMode;
} qosAqmQProfileDataEntry;
typedef struct {
    uint32_t egressVif;
    uint32_t egressPort;
    uint32_t tc;
    uint32_t dp;
    uint32_t l2QosEn;
    uint32_t l3QosEn;
    uint32_t pcp;
    uint32_t dei;
    uint32_t dscp;
    uint32_t type;
    uint32_t idx;
    uint32_t geneveTnlType;
    uint32_t mcastType;
} qosEgressMapDataEntry;
typedef struct {
    int32_t portList[264];
    uint32_t pcp;
    uint32_t dei;
    uint32_t dscp;
    uint32_t exp;
    uint32_t tc;
    uint32_t dp;
    uint32_t l2QosEn;
    uint32_t l3QosEn;
    uint32_t mplsQosEn;
    uint32_t defaultTC;
} qosIngressMapDataEntry;
typedef struct {
    uint32_t devPortId;
    uint32_t queueNum[16];
    uint32_t priority;
    uint32_t enableSP;
    uint32_t weight;
} qosSchedulerDataEntry;
typedef struct {
    uint32_t devPort;
    uint32_t portShaperEn;
    uint32_t featureEn;
    uint32_t maxBurstSize;
    uint64_t rateKbps;
} qosShaperPortDataEntry;
typedef struct {
    uint32_t devPort;
    uint32_t queueNum;
    uint32_t qSlowShaperEn;
    uint32_t featureEn;
    uint32_t maxBurstSize;
    uint64_t rateKbps;
} qosShaperQueueDataEntry;
typedef struct {
    uint32_t portList[264];
    int32_t queueNum[16];
    uint32_t enableSP;
    uint32_t weight;
    uint32_t bandwidthRate;
    uint64_t burstSize;
} saiSchedulerDataEntry;
typedef struct {
    uint16_t vlanId;
    uint32_t nodeIdx[10];
} vlanToNodeIdxMap;
struct xpConfigFile;

File ../demo/config/include/xpDevTypes.h:
typedef enum {XP_SDK_DEV_TYPE_WM, XP_SDK_DEV_TYPE_SHADOW, XP_SDK_DEV_TYPE_SVB, XP_SDK_DEV_TYPE_CRB1_REV1, XP_SDK_DEV_TYPE_CRB1_REV2, 
    XP_SDK_DEV_TYPE_CRB2, XP_SDK_DEV_TYPE_CRB2_REV2, XP_SDK_DEV_TYPE_CRB2_REV3, XP_SDK_DEV_TYPE_CRB3_REV1, 
    XP_SDK_DEV_TYPE_CRB3_REV2, XP_SDK_DEV_TYPE_CRB1_XP70_REV1, XP_SDK_DEV_TYPE_CRB1_XP70_REV2, XP_SDK_DEV_TYPE_ET6448M, 
    XP_SDK_DEV_TYPE_ALDRIN_DB, XP_SDK_DEV_TYPE_CYGNUS, XP_SDK_DEV_TYPE_ALDRIN2_XL, XP_SDK_DEV_TYPE_TG48M_P, 
    XP_SDK_DEV_TYPE_FALCON_32, XP_SDK_DEV_TYPE_FALCON_32X400G, XP_SDK_DEV_TYPE_FALCON_32X100G_8X400G, 
    XP_SDK_DEV_TYPE_FALCON_24X25G_8X100G_12_8, XP_SDK_DEV_TYPE_FALCON_24X25G_8X100G, XP_SDK_DEV_TYPE_FALCON_24X25G_8X100G_6_4, 
    XP_SDK_DEV_TYPE_FALCON_24X25G_4X200G, XP_SDK_DEV_TYPE_FALCON_24X25G_4X200G_6_4, XP_SDK_DEV_TYPE_FALCON_24X100G_4X400G, 
    XP_SDK_DEV_TYPE_FALCON_16X100G_8X400G, XP_SDK_DEV_TYPE_FALCON_48X100G_8X400G, XP_SDK_DEV_TYPE_FALCON_128X10G, 
    XP_SDK_DEV_TYPE_FALCON_128X25G, XP_SDK_DEV_TYPE_FALCON_128X50G, XP_SDK_DEV_TYPE_FALCON_128X100G, XP_SDK_DEV_TYPE_FALCON_128, 
    XP_SDK_DEV_TYPE_FALCON_32X25G, XP_SDK_DEV_TYPE_FALCON_32X25G_6_4, XP_SDK_DEV_TYPE_FALCON_64X100G, 
    XP_SDK_DEV_TYPE_FALCON_64X100G_R4, XP_SDK_DEV_TYPE_FALCON_64X25G, XP_SDK_DEV_TYPE_FALCON_16X400G, XP_SDK_DEV_TYPE_FALCON_16X25G, 
    XP_SDK_DEV_TYPE_FALCON_32X25G_IXIA, XP_SDK_DEV_TYPE_FALCON_64X100G_R4_IXIA, XP_SDK_DEV_TYPE_FALCON_32X100G_R4_IXIA_6_4, 
    XP_SDK_DEV_TYPE_FALCON_32X100G_16X400G, XP_SDK_DEV_TYPE_FALCON_96X100G_8X400G, XP_SDK_DEV_TYPE_FALCON_16X25G_IXIA, 
    XP_SDK_DEV_TYPE_FALCON_48x10G_8x100G, XP_SDK_DEV_TYPE_FALCON_48x25G_8x100G, XP_SDK_DEV_TYPE_FALCON_64x25G_64x10G, 
    XP_SDK_DEV_TYPE_FALCON_32x25G_8x100G, XP_SDK_DEV_TYPE_UNKNOWN} xpSdkDevType_t;
typedef enum {XP_SDK_PROFILE_OPTIC, XP_SDK_PROFILE_5M_DAC, XP_SDK_PROFILE_3M_DAC, XP_SDK_PROFILE_1M_DAC, 
    XP_SDK_PROFILE_MAX} xpSdkProfile_t;

File ../demo/config/xpAppConfig.c:
typedef _Bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long long;
typedef unsigned long long;
typedef unsigned long;
typedef short;
typedef unsigned short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;

File ../demo/config/xpConfigFile.c:
typedef _Bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long long;
typedef unsigned long long;
typedef unsigned long;
typedef short;
typedef unsigned short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;

File ../plugins/sai/SAI/xpSai/include/xpSai.h:
_xpSaiNeighborState_t;
_xpSaiNotifType_t;
_xpSaiTableEntryCountDbEntry;
_xpSaiVlanContextDbEntry;
sXpSaiAclStaticDataType_e;
xpSaiAclEntry_t;
xpSaiMemPoolId;
typedef sXpSaiAclStaticDataType_e sXpSaiAclStaticDataType_e;
typedef xpSaiAclEntry_t xpSaiAclEntry_t;
typedef _xpSaiNeighborState_t xpSaiNeighborState_t;
typedef _xpSaiNotifType_t xpSaiNotifType_t;
typedef _xpSaiTableEntryCountDbEntry xpSaiTableEntryCountDbEntry;
typedef _xpSaiVlanContextDbEntry xpSaiVlanContextDbEntry;

File ../plugins/sai/SAI/xpSai/include/xpSaiAcl.h:
_xpSaiAclCounterAttributesT;
_xpSaiAclEntryActionData;
_xpSaiAclEntryAttributesT;
_xpSaiAclEntryFieldData;
_xpSaiAclEntryRuleT;
_xpSaiAclRangeAttributesT;
_xpSaiAclTableAttributesT;
_xpSaiAclTableGrpAttributesT;
_xpSaiAclTableGrpMembAttributesT;
_xpSaiKeyType;
xpSaiAclPolicerInfo_t;
typedef _xpSaiAclCounterAttributesT xpSaiAclCounterAttributesT;
typedef _xpSaiAclEntryAttributesT xpSaiAclEntryAttributesT;
typedef _xpSaiAclEntryRuleT xpSaiAclEntryRuleT;
typedef xpSaiAclPolicerInfo_t xpSaiAclPolicerInfo_t;
typedef _xpSaiAclRangeAttributesT xpSaiAclRangeAttributesT;
typedef _xpSaiAclTableAttributesT xpSaiAclTableAttributesT;
typedef _xpSaiAclTableGrpAttributesT xpSaiAclTableGrpAttributesT;
typedef _xpSaiAclTableGrpMembAttributesT xpSaiAclTableGrpMembAttributesT;
typedef _xpSaiKeyType xpSaiKeyType;

File ../plugins/sai/SAI/xpSai/include/xpSaiAclMapper.h:
_xpSaiAclCounterIdMappingT;
_xpSaiAclEntryIdMappingT;
_xpSaiAclRangeIdMappingT;
_xpSaiAclRsnCodeToQueueMapInfo_t;
_xpSaiAclStaticTableMappingT;
_xpSaiAclTableGrpIdT;
_xpSaiAclTableGrpMembIdT;
_xpSaiAclTableIdMappingT;
typedef _xpSaiAclCounterIdMappingT xpSaiAclCounterIdMappingT;
typedef _xpSaiAclEntryIdMappingT xpSaiAclEntryIdMappingT;
typedef _xpSaiAclRangeIdMappingT xpSaiAclRangeIdMappingT;
typedef _xpSaiAclRsnCodeToQueueMapInfo_t xpSaiAclRsnCodeToQueueMapInfo_t;
typedef _xpSaiAclStaticTableMappingT xpSaiAclStaticTableMappingT;
typedef _xpSaiAclTableGrpIdT xpSaiAclTableGrpIdMappingT;
typedef _xpSaiAclTableGrpMembIdT xpSaiAclTableGrpMembIdMappingT;
typedef _xpSaiAclTableIdMappingT xpSaiAclTableIdMappingT;

File ../plugins/sai/SAI/xpSai/include/xpSaiBridge.h:
_xpSaiBridgeMapItemT;
_xpSaiBridgePortT;
_xpSaiSubportT;
xpSaiBridgePortDescr_t;
typedef _xpSaiBridgeMapItemT xpSaiBridgeMapItem_t;
typedef xpSaiBridgePortDescr_t xpSaiBridgePortDescr_t;
typedef _xpSaiBridgePortT xpSaiBridgePort_t;
typedef _xpSaiSubportT xpSaiSubport_t;

File ../plugins/sai/SAI/xpSai/include/xpSaiBuffer.h:
_xpSaiBufferPoolAttributesT;
_xpSaiBufferProfileAttributesT;
xpSaiBufferPool_t;
xpSaiBufferProfile_t;
xpSaiIngressPg_t;
typedef _xpSaiBufferPoolAttributesT xpSaiBufferPoolAttributesT;
typedef xpSaiBufferPool_t xpSaiBufferPool_t;
typedef _xpSaiBufferProfileAttributesT xpSaiBufferProfileAttributesT;
typedef xpSaiBufferProfile_t xpSaiBufferProfile_t;
typedef xpSaiIngressPg_t xpSaiIngressPg_t;

File ../plugins/sai/SAI/xpSai/include/xpSaiFdb.h:
_xpSaiFdbChangeNotif_t;
_xpSaiFdbEntryAttributesT;
_xpSaiFdbProperties_t;
xpSaiFdbParams_s;
typedef _xpSaiFdbChangeNotif_t xpSaiFdbChangeNotif_t;
typedef _xpSaiFdbEntryAttributesT xpSaiFdbEntryAttributesT;
typedef xpSaiFdbParams_s xpSaiFdbParams_t;
typedef _xpSaiFdbProperties_t xpSaiFdbProperties_t;

File ../plugins/sai/SAI/xpSai/include/xpSaiHash.h:
xpSaiHashDbEntry_t;
xpSaiHwHashState_t;
typedef xpSaiHashDbEntry_t xpSaiHashDbEntry_t;
typedef xpSaiHwHashState_t xpSaiHwHashState_t;

File ../plugins/sai/SAI/xpSai/include/xpSaiHostInterface.h:
_xpSaiHostInterfaceAttributesT;
_xpSaiHostInterfaceChannelDbEntryT;
_xpSaiHostInterfaceGroupDbEntryT;
_xpSaiHostInterfacePolicerDbEntry;
_xpSaiHostInterfaceTableAttributesT;
_xpSaiHostInterfaceTableDbEntryT;
_xpSaiHostInterfaceTableEntryT;
_xpSaiHostInterfaceTrapAttributesT;
_xpSaiHostInterfaceTrapDbEntryT;
_xpSaiHostInterfaceTrapDefaultT;
_xpSaiHostInterfaceTrapGroupAttributesT;
xpTrapConfig;
typedef _xpSaiHostInterfaceAttributesT xpSaiHostInterfaceAttributesT;
typedef _xpSaiHostInterfaceChannelDbEntryT xpSaiHostInterfaceChannelDbEntryT;
typedef _xpSaiHostInterfaceGroupDbEntryT xpSaiHostInterfaceGroupDbEntryT;
typedef _xpSaiHostInterfacePolicerDbEntry xpSaiHostInterfacePolicerDbEntry_t;
typedef _xpSaiHostInterfaceTableAttributesT xpSaiHostInterfaceTableAttributesT;
typedef _xpSaiHostInterfaceTableDbEntryT xpSaiHostInterfaceTableDbEntryT;
typedef _xpSaiHostInterfaceTrapAttributesT xpSaiHostInterfaceTrapAttributesT;
typedef _xpSaiHostInterfaceTrapDbEntryT xpSaiHostInterfaceTrapDbEntryT;
typedef _xpSaiHostInterfaceTrapDefaultT xpSaiHostInterfaceTrapDefaultT;
typedef _xpSaiHostInterfaceTrapGroupAttributesT xpSaiHostInterfaceTrapGroupAttributesT;
typedef xpTrapConfig xpTrapConfig;

File ../plugins/sai/SAI/xpSai/include/xpSaiIpmc.h:
_xpSaiIpmcAttributesT;
typedef _xpSaiIpmcAttributesT xpSaiIpmcAttributesT;

File ../plugins/sai/SAI/xpSai/include/xpSaiIpmcGroup.h:
_xpSaiIpmcGroupContextDbEntry;
_xpSaiIpmcGroupMemberAttributesT;
_xpSaiIpmcGroupMemberContextDbEntry;
_xpSaiIpmcGroupVlan2GroupContextDbEntry;
typedef _xpSaiIpmcGroupContextDbEntry xpSaiIpmcGroupContextDbEntry;
typedef _xpSaiIpmcGroupMemberAttributesT xpSaiIpmcGroupMemberAttributesT;
typedef _xpSaiIpmcGroupMemberContextDbEntry xpSaiIpmcGroupMemberContextDbEntry;
typedef _xpSaiIpmcGroupVlan2GroupContextDbEntry xpSaiIpmcGroupVlan2GroupContextDbEntry;

File ../plugins/sai/SAI/xpSai/include/xpSaiL2Mc.h:
_xpSaiL2McAttributesT;
xpSaiL2McDbEntry_t;
typedef _xpSaiL2McAttributesT xpSaiL2McAttributesT;
typedef xpSaiL2McDbEntry_t xpSaiL2McDbEntry_t;

File ../plugins/sai/SAI/xpSai/include/xpSaiL2McGroup.h:
_xpSaiL2McGroupContextDbEntry;
_xpSaiL2McGroupHwEntry;
_xpSaiL2McGroupMemberAttributesT;
_xpSaiL2McGroupMemberContextDbEntry;
typedef _xpSaiL2McGroupContextDbEntry xpSaiL2McGroupContextDbEntry;
typedef _xpSaiL2McGroupHwEntry xpSaiL2McGroupHwEntry;
typedef _xpSaiL2McGroupMemberAttributesT xpSaiL2McGroupMemberAttributesT;
typedef _xpSaiL2McGroupMemberContextDbEntry xpSaiL2McGroupMemberContextDbEntry;

File ../plugins/sai/SAI/xpSai/include/xpSaiLag.h:
_xpSaiLagMemberAttributesT;
xpSaiLagInfo_t;
xpSaiLagPortCountInfo_t;
xpSaiPortLagInfo_t;
xpSaiPrimaryLagIdNode;
typedef xpSaiLagInfo_t xpSaiLagInfo_t;
typedef _xpSaiLagMemberAttributesT xpSaiLagMemberAttributesT;
typedef xpSaiLagPortCountInfo_t xpSaiLagPortCountInfo_t;
typedef xpSaiPortLagInfo_t xpSaiPortLagInfo_t;
typedef xpSaiPrimaryLagIdNode xpSaiPrimaryLagIdNode_t;

File ../plugins/sai/SAI/xpSai/include/xpSaiLog.h:
_xpSaiLogDestT;
enum _xpSaiLogDestT;
typedef _xpSaiLogDestT xpSaiLogDest_t;

File ../plugins/sai/SAI/xpSai/include/xpSaiMcastFdb.h:
_xpSaiMcastFdbAttributesT;
typedef _xpSaiMcastFdbAttributesT xpSaiMcastFdbAttributesT;

File ../plugins/sai/SAI/xpSai/include/xpSaiMirror.h:
xpSaiMirrorSession_t;
xpSaiPortMirrorEnabled;
typedef xpSaiMirrorSession_t xpSaiMirrorSession_t;

File ../plugins/sai/SAI/xpSai/include/xpSaiNeighbor.h:
_xpSaiNeighborAttributesT;
_xpSaiNeighborChangeNotif_t;
_xpSaiNeighborProperties_t;
xpSaiNeighborEntry_t;
typedef _xpSaiNeighborAttributesT xpSaiNeighborAttributesT;
typedef _xpSaiNeighborChangeNotif_t xpSaiNeighborChangeNotif_t;
typedef xpSaiNeighborEntry_t xpSaiNeighborEntry_t;
typedef _xpSaiNeighborProperties_t xpSaiNeighborProperties_t;

File ../plugins/sai/SAI/xpSai/include/xpSaiNextHop.h:
_xpSaiNextHopAttributesT;
xpSaiNextHopEntry_t;
typedef _xpSaiNextHopAttributesT xpSaiNextHopAttributesT;
typedef xpSaiNextHopEntry_t xpSaiNextHopEntry_t;

File ../plugins/sai/SAI/xpSai/include/xpSaiPolicer.h:
_xpSaiPolicerAttributesT;
xpSaiPolicerIdxMapList_t;
xpSaiPolicer_t;
typedef _xpSaiPolicerAttributesT xpSaiPolicerAttributes_t;
typedef xpSaiPolicer_t xpSaiPolicer_t;

File ../plugins/sai/SAI/xpSai/include/xpSaiPort.h:
_xpSaiPortDbEntryT;
_xpSaiPortStatisticDbEntryT;
xpSaiPortQosInfo_t;
typedef enum {pfcVectorUpdateTypeRx, pfcVectorUpdateTypeTx, pfcVectorUpdateTypeCombined} pfcVectorUpdateType;
typedef _xpSaiPortDbEntryT xpSaiPortDbEntryT;
typedef xpSaiPortQosInfo_t xpSaiPortQosInfo_t;
typedef _xpSaiPortStatisticDbEntryT xpSaiPortStatisticDbEntryT;

File ../plugins/sai/SAI/xpSai/include/xpSaiPortCfgManager.h:
xpSaiPortMgrInfo_s;
typedef xpSaiPortMgrInfo_s xpSaiPortMgrInfo_t;

File ../plugins/sai/SAI/xpSai/include/xpSaiProfileMng.h:
xpSaiProfileMngPortAttr_t;
typedef xpSaiProfileMngPortAttr_t xpSaiProfileMngPortAttr_t;

File ../plugins/sai/SAI/xpSai/include/xpSaiQueue.h:
_xpSaiQueueAttributesT;
xpSaiQueueQosInfo_t;
typedef _xpSaiQueueAttributesT xpSaiQueueAttributesT;
typedef xpSaiQueueQosInfo_t xpSaiQueueQosInfo_t;

File ../plugins/sai/SAI/xpSai/include/xpSaiRoute.h:
_xpSaiRouteAttributesT;
xpSaiRouteDbEntry_t;
xpSaiRouteStaticDataType_e;
xpSaiRouteStaticDbEntry;
typedef _xpSaiRouteAttributesT xpSaiRouteAttributesT;
typedef xpSaiRouteDbEntry_t xpSaiRouteDbEntry_t;
typedef xpSaiRouteStaticDataType_e xpSaiRouteStaticDataType_e;
typedef xpSaiRouteStaticDbEntry xpSaiRouteStaticDbEntry;

File ../plugins/sai/SAI/xpSai/include/xpSaiRouterInterface.h:
_xpSaiInterfaceVirtualRifInfoT;
_xpSaiRouterInterfaceAttributesT;
_xpSaiRouterInterfaceDbEntryT;
_xpSaiRouterInterfaceStatisticDbEntryT;
typedef _xpSaiRouterInterfaceAttributesT xpSaiRouterInterfaceAttributesT;
typedef _xpSaiRouterInterfaceDbEntryT xpSaiRouterInterfaceDbEntryT;
typedef _xpSaiRouterInterfaceStatisticDbEntryT xpSaiRouterInterfaceStatisticDbEntryT;

File ../plugins/sai/SAI/xpSai/include/xpSaiRpfGroup.h:
_xpSaiRpfGroupContextDbEntry;
_xpSaiRpfGroupMcEntryHwIdxDbEntry;
_xpSaiRpfGroupMemberAttributesT;
_xpSaiRpfGroupMemberContextDbEntry;
typedef _xpSaiRpfGroupContextDbEntry xpSaiRpfGroupContextDbEntry;
typedef _xpSaiRpfGroupMcEntryHwIdxDbEntry xpSaiRpfGroupMcEntryHwIdxDbEntry;
typedef _xpSaiRpfGroupMemberAttributesT xpSaiRpfGroupMemberAttributesT;
typedef _xpSaiRpfGroupMemberContextDbEntry xpSaiRpfGroupMemberContextDbEntry;

File ../plugins/sai/SAI/xpSai/include/xpSaiSamplePacket.h:
xpsSamplePacket_t;
typedef xpsSamplePacket_t xpsSamplePacket_t;

File ../plugins/sai/SAI/xpSai/include/xpSaiScheduler.h:
_xpSaiSchedulerAttributesT;
xpSaiSchedulerMapList_t;
xpSaiSchedulerNodeType_e;
xpSaiSchedulerProfile_t;
typedef _xpSaiSchedulerAttributesT xpSaiSchedulerAttributesT;
typedef xpSaiSchedulerNodeType_e xpSaiSchedulerNodeType_e;
typedef xpSaiSchedulerProfile_t xpSaiSchedulerProfile_t;

File ../plugins/sai/SAI/xpSai/include/xpSaiSchedulerGroup.h:
_xpSaiSchedulerGroupAttributesT;
xpSaiSchedulerGrp_t;
typedef _xpSaiSchedulerGroupAttributesT xpSaiSchedulerGroupAttributesT;
typedef xpSaiSchedulerGrp_t xpSaiSchedulerGrp_t;

File ../plugins/sai/SAI/xpSai/include/xpSaiStp.h:
_xpSaiStpPortAttrEntry_t;
_xpSaiStpPortAttributesT;
typedef _xpSaiStpPortAttrEntry_t xpSaiStpPortAttrEntry_t;
typedef _xpSaiStpPortAttributesT xpSaiStpPortAttributesT;

File ../plugins/sai/SAI/xpSai/include/xpSaiSwitch.h:
_sai_switch_notification_t;
_xpSaiSwitchAttributesT;
xpSaiSchedulerProfileType;
xpSaiSwitchEntry_t;
xpSaiSwitchIbufferCfg;
xpSaiSwitchIbufferParseTkns;
xpSaiSwitchProfile_s;
xpSaiSwitchQoSMapIds_t;
xpSaiSwitchStaticDataType_e;
typedef _sai_switch_notification_t sai_switch_notification_t;
typedef enum {XP_SAI_UNINITIALIZED, XP_SAI_INITIALIZED} xpSaiInitStat;
typedef xpSaiSchedulerProfileType xpSaiSchedulerProfileType_t;
typedef _xpSaiSwitchAttributesT xpSaiSwitchAttributesT;
typedef xpSaiSwitchEntry_t xpSaiSwitchEntry_t;
typedef xpSaiSwitchIbufferParseTkns xpSaiSwitchIbufferParseTkns_t;
typedef xpSaiSwitchProfile_s xpSaiSwitchProfile_t;
typedef xpSaiSwitchQoSMapIds_t xpSaiSwitchQoSMapIds_t;
typedef xpSaiSwitchStaticDataType_e xpSaiSwitchStaticDataType_e;

File ../plugins/sai/SAI/xpSai/include/xpSaiVirtualRouter.h:
_xpSaiVirtualRouterAttributesT;
typedef _xpSaiVirtualRouterAttributesT xpSaiVirtualRouterAttributesT;

File ../plugins/sai/SAI/xpSai/include/xpSaiVlan.h:
_sai_vlan_count_mode_t;
_sai_vlan_custom_attr_t;
_xpSaiVlanAttributesT;
typedef _xpSaiVlanAttributesT xpSaiVlanAttributesT;

File ../plugins/sai/SAI/xpSai/include/xpSaiVrf.h:
xpSaiVrfDbEntry_t;
xpSaiVrfIntfDbEntry_t;
typedef xpSaiVrfDbEntry_t xpSaiVrfDbEntry_t;
typedef xpSaiVrfIntfDbEntry_t xpSaiVrfIntfDbEntry_t;

File ../plugins/sai/SAI/xpSai/include/xpSaiWred.h:
_xpSaiWredAttributesT;
xpSaiWred_t;
typedef _xpSaiWredAttributesT xpSaiWredAttributesT;
typedef xpSaiWred_t xpSaiWred_t;

File ../plugins/sai/SAI/xpSai/sai/inc/../experimental/saiextensions.h:
_sai_api_extensions_t;

File ../plugins/sai/SAI/xpSai/sai/inc/sai.h:
_sai_api_t;
_sai_log_level_t;
_sai_service_method_table_t;
enum _sai_api_t;
enum _sai_log_level_t;
struct _sai_service_method_table_t;
typedef enum _sai_api_t sai_api_t;
typedef enum _sai_log_level_t sai_log_level_t;
typedef int (*)(sai_switch_profile_id_t, const char **, const char **) sai_profile_get_next_value_fn;
typedef const char *(*)(sai_switch_profile_id_t, const char *) sai_profile_get_value_fn;
typedef _sai_service_method_table_t sai_service_method_table_t;

File ../plugins/sai/SAI/xpSai/sai/inc/saiacl.h:
typedef enum _sai_acl_table_group_type_t
{
    SAI_ACL_TABLE_GROUP_TYPE_SEQUENTIAL,
    SAI_ACL_TABLE_GROUP_TYPE_PARALLEL,
} sai_acl_table_group_type_t;
typedef enum _sai_acl_table_attr_t
{
    SAI_ACL_TABLE_ATTR_START,
    SAI_ACL_TABLE_ATTR_ACL_STAGE = SAI_ACL_TABLE_ATTR_START,
    SAI_ACL_TABLE_ATTR_ACL_BIND_POINT_TYPE_LIST,
    SAI_ACL_TABLE_ATTR_SIZE,
    SAI_ACL_TABLE_ATTR_ACL_ACTION_TYPE_LIST,
    SAI_ACL_TABLE_ATTR_FIELD_START = 0x00001000,
    SAI_ACL_TABLE_ATTR_FIELD_SRC_IPV6 = SAI_ACL_TABLE_ATTR_FIELD_START,
    SAI_ACL_TABLE_ATTR_FIELD_SRC_IPV6_WORD3,
    SAI_ACL_TABLE_ATTR_FIELD_SRC_IPV6_WORD2,
    SAI_ACL_TABLE_ATTR_FIELD_SRC_IPV6_WORD1,
    SAI_ACL_TABLE_ATTR_FIELD_SRC_IPV6_WORD0,
    SAI_ACL_TABLE_ATTR_FIELD_DST_IPV6,
    SAI_ACL_TABLE_ATTR_FIELD_DST_IPV6_WORD3,
    SAI_ACL_TABLE_ATTR_FIELD_DST_IPV6_WORD2,
    SAI_ACL_TABLE_ATTR_FIELD_DST_IPV6_WORD1,
    SAI_ACL_TABLE_ATTR_FIELD_DST_IPV6_WORD0,
    SAI_ACL_TABLE_ATTR_FIELD_INNER_SRC_IPV6,
    SAI_ACL_TABLE_ATTR_FIELD_INNER_DST_IPV6,
    SAI_ACL_TABLE_ATTR_FIELD_SRC_MAC,
    SAI_ACL_TABLE_ATTR_FIELD_DST_MAC,
    SAI_ACL_TABLE_ATTR_FIELD_SRC_IP,
    SAI_ACL_TABLE_ATTR_FIELD_DST_IP,
    SAI_ACL_TABLE_ATTR_FIELD_INNER_SRC_IP,
    SAI_ACL_TABLE_ATTR_FIELD_INNER_DST_IP,
    SAI_ACL_TABLE_ATTR_FIELD_IN_PORTS,
    SAI_ACL_TABLE_ATTR_FIELD_OUT_PORTS,
    SAI_ACL_TABLE_ATTR_FIELD_IN_PORT,
    SAI_ACL_TABLE_ATTR_FIELD_OUT_PORT,
    SAI_ACL_TABLE_ATTR_FIELD_SRC_PORT,
    SAI_ACL_TABLE_ATTR_FIELD_OUTER_VLAN_ID,
    SAI_ACL_TABLE_ATTR_FIELD_OUTER_VLAN_PRI,
    SAI_ACL_TABLE_ATTR_FIELD_OUTER_VLAN_CFI,
    SAI_ACL_TABLE_ATTR_FIELD_INNER_VLAN_ID,
    SAI_ACL_TABLE_ATTR_FIELD_INNER_VLAN_PRI,
    SAI_ACL_TABLE_ATTR_FIELD_INNER_VLAN_CFI,
    SAI_ACL_TABLE_ATTR_FIELD_L4_SRC_PORT,
    SAI_ACL_TABLE_ATTR_FIELD_L4_DST_PORT,
    SAI_ACL_TABLE_ATTR_FIELD_INNER_L4_SRC_PORT,
    SAI_ACL_TABLE_ATTR_FIELD_INNER_L4_DST_PORT,
    SAI_ACL_TABLE_ATTR_FIELD_ETHER_TYPE,
    SAI_ACL_TABLE_ATTR_FIELD_INNER_ETHER_TYPE,
    SAI_ACL_TABLE_ATTR_FIELD_IP_PROTOCOL,
    SAI_ACL_TABLE_ATTR_FIELD_INNER_IP_PROTOCOL,
    SAI_ACL_TABLE_ATTR_FIELD_IP_IDENTIFICATION,
    SAI_ACL_TABLE_ATTR_FIELD_DSCP,
    SAI_ACL_TABLE_ATTR_FIELD_ECN,
    SAI_ACL_TABLE_ATTR_FIELD_TTL,
    SAI_ACL_TABLE_ATTR_FIELD_TOS,
    SAI_ACL_TABLE_ATTR_FIELD_IP_FLAGS,
    SAI_ACL_TABLE_ATTR_FIELD_TCP_FLAGS,
    SAI_ACL_TABLE_ATTR_FIELD_ACL_IP_TYPE,
    SAI_ACL_TABLE_ATTR_FIELD_ACL_IP_FRAG,
    SAI_ACL_TABLE_ATTR_FIELD_IPV6_FLOW_LABEL,
    SAI_ACL_TABLE_ATTR_FIELD_TC,
    SAI_ACL_TABLE_ATTR_FIELD_ICMP_TYPE,
    SAI_ACL_TABLE_ATTR_FIELD_ICMP_CODE,
    SAI_ACL_TABLE_ATTR_FIELD_ICMPV6_TYPE,
    SAI_ACL_TABLE_ATTR_FIELD_ICMPV6_CODE,
    SAI_ACL_TABLE_ATTR_FIELD_PACKET_VLAN,
    SAI_ACL_TABLE_ATTR_FIELD_TUNNEL_VNI,
    SAI_ACL_TABLE_ATTR_FIELD_HAS_VLAN_TAG,
    SAI_ACL_TABLE_ATTR_FIELD_MACSEC_SCI,
    SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL0_LABEL,
    SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL0_TTL,
    SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL0_EXP,
    SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL0_BOS,
    SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL1_LABEL,
    SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL1_TTL,
    SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL1_EXP,
    SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL1_BOS,
    SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL2_LABEL,
    SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL2_TTL,
    SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL2_EXP,
    SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL2_BOS,
    SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL3_LABEL,
    SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL3_TTL,
    SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL3_EXP,
    SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL3_BOS,
    SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL4_LABEL,
    SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL4_TTL,
    SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL4_EXP,
    SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL4_BOS,
    SAI_ACL_TABLE_ATTR_FIELD_FDB_DST_USER_META,
    SAI_ACL_TABLE_ATTR_FIELD_ROUTE_DST_USER_META,
    SAI_ACL_TABLE_ATTR_FIELD_NEIGHBOR_DST_USER_META,
    SAI_ACL_TABLE_ATTR_FIELD_PORT_USER_META,
    SAI_ACL_TABLE_ATTR_FIELD_VLAN_USER_META,
    SAI_ACL_TABLE_ATTR_FIELD_ACL_USER_META,
    SAI_ACL_TABLE_ATTR_FIELD_FDB_NPU_META_DST_HIT,
    SAI_ACL_TABLE_ATTR_FIELD_NEIGHBOR_NPU_META_DST_HIT,
    SAI_ACL_TABLE_ATTR_FIELD_ROUTE_NPU_META_DST_HIT,
    SAI_ACL_TABLE_ATTR_FIELD_BTH_OPCODE,
    SAI_ACL_TABLE_ATTR_FIELD_AETH_SYNDROME,
    SAI_ACL_TABLE_ATTR_USER_DEFINED_FIELD_GROUP_MIN,
    SAI_ACL_TABLE_ATTR_USER_DEFINED_FIELD_GROUP_MAX = SAI_ACL_TABLE_ATTR_USER_DEFINED_FIELD_GROUP_MIN + SAI_ACL_USER_DEFINED_FIELD_ATTR_ID_RANGE,
    SAI_ACL_TABLE_ATTR_FIELD_ACL_RANGE_TYPE,
    SAI_ACL_TABLE_ATTR_FIELD_IPV6_NEXT_HEADER,
    SAI_ACL_TABLE_ATTR_FIELD_GRE_KEY,
    SAI_ACL_TABLE_ATTR_FIELD_TAM_INT_TYPE,
    SAI_ACL_TABLE_ATTR_FIELD_END = SAI_ACL_TABLE_ATTR_FIELD_TAM_INT_TYPE,
    SAI_ACL_TABLE_ATTR_ENTRY_LIST,
    SAI_ACL_TABLE_ATTR_AVAILABLE_ACL_ENTRY,
    SAI_ACL_TABLE_ATTR_AVAILABLE_ACL_COUNTER,
    SAI_ACL_TABLE_ATTR_END,
    SAI_ACL_TABLE_ATTR_CUSTOM_RANGE_START = 0x10000000,
    SAI_ACL_TABLE_ATTR_CUSTOM_RANGE_END
} sai_acl_table_attr_t;
typedef enum _sai_acl_counter_attr_t
{
    SAI_ACL_COUNTER_ATTR_START,
    SAI_ACL_COUNTER_ATTR_TABLE_ID = SAI_ACL_COUNTER_ATTR_START,
    SAI_ACL_COUNTER_ATTR_ENABLE_PACKET_COUNT,
    SAI_ACL_COUNTER_ATTR_ENABLE_BYTE_COUNT,
    SAI_ACL_COUNTER_ATTR_PACKETS,
    SAI_ACL_COUNTER_ATTR_BYTES,
    SAI_ACL_COUNTER_ATTR_END,
    SAI_ACL_COUNTER_ATTR_CUSTOM_RANGE_START = 0x10000000,
    SAI_ACL_COUNTER_ATTR_CUSTOM_RANGE_END
} sai_acl_counter_attr_t;
typedef enum _sai_acl_range_type_t
{
    SAI_ACL_RANGE_TYPE_L4_SRC_PORT_RANGE,
    SAI_ACL_RANGE_TYPE_L4_DST_PORT_RANGE,
    SAI_ACL_RANGE_TYPE_OUTER_VLAN,
    SAI_ACL_RANGE_TYPE_INNER_VLAN,
    SAI_ACL_RANGE_TYPE_PACKET_LENGTH
} sai_acl_range_type_t;
typedef enum _sai_acl_range_attr_t
{
    SAI_ACL_RANGE_ATTR_START,
    SAI_ACL_RANGE_ATTR_TYPE = SAI_ACL_RANGE_ATTR_START,
    SAI_ACL_RANGE_ATTR_LIMIT,
    SAI_ACL_RANGE_ATTR_END,
    SAI_ACL_RANGE_ATTR_CUSTOM_RANGE_START = 0x10000000,
    SAI_ACL_RANGE_ATTR_CUSTOM_RANGE_END
} sai_acl_range_attr_t;
typedef enum _sai_acl_entry_attr_t
{
    SAI_ACL_ENTRY_ATTR_START,
    SAI_ACL_ENTRY_ATTR_TABLE_ID = SAI_ACL_ENTRY_ATTR_START,
    SAI_ACL_ENTRY_ATTR_PRIORITY,
    SAI_ACL_ENTRY_ATTR_ADMIN_STATE,
    SAI_ACL_ENTRY_ATTR_FIELD_START = 0x00001000,
    SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6 = SAI_ACL_ENTRY_ATTR_FIELD_START,
    SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6_WORD3,
    SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6_WORD2,
    SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6_WORD1,
    SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6_WORD0,
    SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6,
    SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6_WORD3,
    SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6_WORD2,
    SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6_WORD1,
    SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6_WORD0,
    SAI_ACL_ENTRY_ATTR_FIELD_INNER_SRC_IPV6,
    SAI_ACL_ENTRY_ATTR_FIELD_INNER_DST_IPV6,
    SAI_ACL_ENTRY_ATTR_FIELD_SRC_MAC,
    SAI_ACL_ENTRY_ATTR_FIELD_DST_MAC,
    SAI_ACL_ENTRY_ATTR_FIELD_SRC_IP,
    SAI_ACL_ENTRY_ATTR_FIELD_DST_IP,
    SAI_ACL_ENTRY_ATTR_FIELD_INNER_SRC_IP,
    SAI_ACL_ENTRY_ATTR_FIELD_INNER_DST_IP,
    SAI_ACL_ENTRY_ATTR_FIELD_IN_PORTS,
    SAI_ACL_ENTRY_ATTR_FIELD_OUT_PORTS,
    SAI_ACL_ENTRY_ATTR_FIELD_IN_PORT,
    SAI_ACL_ENTRY_ATTR_FIELD_OUT_PORT,
    SAI_ACL_ENTRY_ATTR_FIELD_SRC_PORT,
    SAI_ACL_ENTRY_ATTR_FIELD_OUTER_VLAN_ID,
    SAI_ACL_ENTRY_ATTR_FIELD_OUTER_VLAN_PRI,
    SAI_ACL_ENTRY_ATTR_FIELD_OUTER_VLAN_CFI,
    SAI_ACL_ENTRY_ATTR_FIELD_INNER_VLAN_ID,
    SAI_ACL_ENTRY_ATTR_FIELD_INNER_VLAN_PRI,
    SAI_ACL_ENTRY_ATTR_FIELD_INNER_VLAN_CFI,
    SAI_ACL_ENTRY_ATTR_FIELD_L4_SRC_PORT,
    SAI_ACL_ENTRY_ATTR_FIELD_L4_DST_PORT,
    SAI_ACL_ENTRY_ATTR_FIELD_INNER_L4_SRC_PORT,
    SAI_ACL_ENTRY_ATTR_FIELD_INNER_L4_DST_PORT,
    SAI_ACL_ENTRY_ATTR_FIELD_ETHER_TYPE,
    SAI_ACL_ENTRY_ATTR_FIELD_INNER_ETHER_TYPE,
    SAI_ACL_ENTRY_ATTR_FIELD_IP_PROTOCOL,
    SAI_ACL_ENTRY_ATTR_FIELD_INNER_IP_PROTOCOL,
    SAI_ACL_ENTRY_ATTR_FIELD_IP_IDENTIFICATION,
    SAI_ACL_ENTRY_ATTR_FIELD_DSCP,
    SAI_ACL_ENTRY_ATTR_FIELD_ECN,
    SAI_ACL_ENTRY_ATTR_FIELD_TTL,
    SAI_ACL_ENTRY_ATTR_FIELD_TOS,
    SAI_ACL_ENTRY_ATTR_FIELD_IP_FLAGS,
    SAI_ACL_ENTRY_ATTR_FIELD_TCP_FLAGS,
    SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE,
    SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_FRAG,
    SAI_ACL_ENTRY_ATTR_FIELD_IPV6_FLOW_LABEL,
    SAI_ACL_ENTRY_ATTR_FIELD_TC,
    SAI_ACL_ENTRY_ATTR_FIELD_ICMP_TYPE,
    SAI_ACL_ENTRY_ATTR_FIELD_ICMP_CODE,
    SAI_ACL_ENTRY_ATTR_FIELD_ICMPV6_TYPE,
    SAI_ACL_ENTRY_ATTR_FIELD_ICMPV6_CODE,
    SAI_ACL_ENTRY_ATTR_FIELD_PACKET_VLAN,
    SAI_ACL_ENTRY_ATTR_FIELD_TUNNEL_VNI,
    SAI_ACL_ENTRY_ATTR_FIELD_HAS_VLAN_TAG,
    SAI_ACL_ENTRY_ATTR_FIELD_MACSEC_SCI,
    SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL0_LABEL,
    SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL0_TTL,
    SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL0_EXP,
    SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL0_BOS,
    SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL1_LABEL,
    SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL1_TTL,
    SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL1_EXP,
    SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL1_BOS,
    SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL2_LABEL,
    SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL2_TTL,
    SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL2_EXP,
    SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL2_BOS,
    SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL3_LABEL,
    SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL3_TTL,
    SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL3_EXP,
    SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL3_BOS,
    SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL4_LABEL,
    SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL4_TTL,
    SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL4_EXP,
    SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL4_BOS,
    SAI_ACL_ENTRY_ATTR_FIELD_FDB_DST_USER_META,
    SAI_ACL_ENTRY_ATTR_FIELD_ROUTE_DST_USER_META,
    SAI_ACL_ENTRY_ATTR_FIELD_NEIGHBOR_DST_USER_META,
    SAI_ACL_ENTRY_ATTR_FIELD_PORT_USER_META,
    SAI_ACL_ENTRY_ATTR_FIELD_VLAN_USER_META,
    SAI_ACL_ENTRY_ATTR_FIELD_ACL_USER_META,
    SAI_ACL_ENTRY_ATTR_FIELD_FDB_NPU_META_DST_HIT,
    SAI_ACL_ENTRY_ATTR_FIELD_NEIGHBOR_NPU_META_DST_HIT,
    SAI_ACL_ENTRY_ATTR_FIELD_ROUTE_NPU_META_DST_HIT,
    SAI_ACL_ENTRY_ATTR_FIELD_BTH_OPCODE,
    SAI_ACL_ENTRY_ATTR_FIELD_AETH_SYNDROME,
    SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MIN,
    SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MAX = SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MIN + SAI_ACL_USER_DEFINED_FIELD_ATTR_ID_RANGE,
    SAI_ACL_ENTRY_ATTR_FIELD_ACL_RANGE_TYPE,
    SAI_ACL_ENTRY_ATTR_FIELD_IPV6_NEXT_HEADER,
    SAI_ACL_ENTRY_ATTR_FIELD_GRE_KEY,
    SAI_ACL_ENTRY_ATTR_FIELD_TAM_INT_TYPE,
    SAI_ACL_ENTRY_ATTR_FIELD_END = SAI_ACL_ENTRY_ATTR_FIELD_TAM_INT_TYPE,
    SAI_ACL_ENTRY_ATTR_ACTION_START = 0x00002000,
    SAI_ACL_ENTRY_ATTR_ACTION_REDIRECT = SAI_ACL_ENTRY_ATTR_ACTION_START,
    SAI_ACL_ENTRY_ATTR_ACTION_ENDPOINT_IP,
    SAI_ACL_ENTRY_ATTR_ACTION_REDIRECT_LIST,
    SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION,
    SAI_ACL_ENTRY_ATTR_ACTION_FLOOD,
    SAI_ACL_ENTRY_ATTR_ACTION_COUNTER,
    SAI_ACL_ENTRY_ATTR_ACTION_MIRROR_INGRESS,
    SAI_ACL_ENTRY_ATTR_ACTION_MIRROR_EGRESS,
    SAI_ACL_ENTRY_ATTR_ACTION_SET_POLICER,
    SAI_ACL_ENTRY_ATTR_ACTION_DECREMENT_TTL,
    SAI_ACL_ENTRY_ATTR_ACTION_SET_TC,
    SAI_ACL_ENTRY_ATTR_ACTION_SET_PACKET_COLOR,
    SAI_ACL_ENTRY_ATTR_ACTION_SET_INNER_VLAN_ID,
    SAI_ACL_ENTRY_ATTR_ACTION_SET_INNER_VLAN_PRI,
    SAI_ACL_ENTRY_ATTR_ACTION_SET_OUTER_VLAN_ID,
    SAI_ACL_ENTRY_ATTR_ACTION_SET_OUTER_VLAN_PRI,
    SAI_ACL_ENTRY_ATTR_ACTION_ADD_VLAN_ID,
    SAI_ACL_ENTRY_ATTR_ACTION_ADD_VLAN_PRI,
    SAI_ACL_ENTRY_ATTR_ACTION_SET_SRC_MAC,
    SAI_ACL_ENTRY_ATTR_ACTION_SET_DST_MAC,
    SAI_ACL_ENTRY_ATTR_ACTION_SET_SRC_IP,
    SAI_ACL_ENTRY_ATTR_ACTION_SET_DST_IP,
    SAI_ACL_ENTRY_ATTR_ACTION_SET_SRC_IPV6,
    SAI_ACL_ENTRY_ATTR_ACTION_SET_DST_IPV6,
    SAI_ACL_ENTRY_ATTR_ACTION_SET_DSCP,
    SAI_ACL_ENTRY_ATTR_ACTION_SET_ECN,
    SAI_ACL_ENTRY_ATTR_ACTION_SET_L4_SRC_PORT,
    SAI_ACL_ENTRY_ATTR_ACTION_SET_L4_DST_PORT,
    SAI_ACL_ENTRY_ATTR_ACTION_INGRESS_SAMPLEPACKET_ENABLE,
    SAI_ACL_ENTRY_ATTR_ACTION_EGRESS_SAMPLEPACKET_ENABLE,
    SAI_ACL_ENTRY_ATTR_ACTION_SET_ACL_META_DATA,
    SAI_ACL_ENTRY_ATTR_ACTION_EGRESS_BLOCK_PORT_LIST,
    SAI_ACL_ENTRY_ATTR_ACTION_SET_USER_TRAP_ID,
    SAI_ACL_ENTRY_ATTR_ACTION_SET_DO_NOT_LEARN,
    SAI_ACL_ENTRY_ATTR_ACTION_ACL_DTEL_FLOW_OP,
    SAI_ACL_ENTRY_ATTR_ACTION_DTEL_INT_SESSION,
    SAI_ACL_ENTRY_ATTR_ACTION_DTEL_DROP_REPORT_ENABLE,
    SAI_ACL_ENTRY_ATTR_ACTION_DTEL_TAIL_DROP_REPORT_ENABLE,
    SAI_ACL_ENTRY_ATTR_ACTION_DTEL_FLOW_SAMPLE_PERCENT,
    SAI_ACL_ENTRY_ATTR_ACTION_DTEL_REPORT_ALL_PACKETS,
    SAI_ACL_ENTRY_ATTR_ACTION_NO_NAT,
    SAI_ACL_ENTRY_ATTR_ACTION_INT_INSERT,
    SAI_ACL_ENTRY_ATTR_ACTION_INT_DELETE,
    SAI_ACL_ENTRY_ATTR_ACTION_INT_REPORT_FLOW,
    SAI_ACL_ENTRY_ATTR_ACTION_INT_REPORT_DROPS,
    SAI_ACL_ENTRY_ATTR_ACTION_INT_REPORT_TAIL_DROPS,
    SAI_ACL_ENTRY_ATTR_ACTION_TAM_INT_OBJECT,
    SAI_ACL_ENTRY_ATTR_ACTION_SET_ISOLATION_GROUP,
    SAI_ACL_ENTRY_ATTR_ACTION_MACSEC_FLOW,
    SAI_ACL_ENTRY_ATTR_ACTION_SET_LAG_HASH_ID,
    SAI_ACL_ENTRY_ATTR_ACTION_SET_ECMP_HASH_ID,
    SAI_ACL_ENTRY_ATTR_ACTION_SET_VRF,
    SAI_ACL_ENTRY_ATTR_ACTION_END = SAI_ACL_ENTRY_ATTR_ACTION_SET_VRF,
    SAI_ACL_ENTRY_ATTR_END,
    SAI_ACL_ENTRY_ATTR_CUSTOM_RANGE_START = 0x10000000,
    SAI_ACL_ENTRY_ATTR_CUSTOM_RANGE_END
} sai_acl_entry_attr_t;
typedef enum _sai_acl_table_group_member_attr_t
{
    SAI_ACL_TABLE_GROUP_MEMBER_ATTR_START,
    SAI_ACL_TABLE_GROUP_MEMBER_ATTR_ACL_TABLE_GROUP_ID = SAI_ACL_TABLE_GROUP_MEMBER_ATTR_START,
    SAI_ACL_TABLE_GROUP_MEMBER_ATTR_ACL_TABLE_ID,
    SAI_ACL_TABLE_GROUP_MEMBER_ATTR_PRIORITY,
    SAI_ACL_TABLE_GROUP_MEMBER_ATTR_END,
    SAI_ACL_TABLE_GROUP_MEMBER_ATTR_CUSTOM_RANGE_START = 0x10000000,
    SAI_ACL_TABLE_GROUP_MEMBER_ATTR_CUSTOM_RANGE_END
} sai_acl_table_group_member_attr_t;
typedef enum _sai_acl_table_group_attr_t
{
    SAI_ACL_TABLE_GROUP_ATTR_START,
    SAI_ACL_TABLE_GROUP_ATTR_ACL_STAGE = SAI_ACL_TABLE_GROUP_ATTR_START,
    SAI_ACL_TABLE_GROUP_ATTR_ACL_BIND_POINT_TYPE_LIST,
    SAI_ACL_TABLE_GROUP_ATTR_TYPE,
    SAI_ACL_TABLE_GROUP_ATTR_MEMBER_LIST,
    SAI_ACL_TABLE_GROUP_ATTR_END,
    SAI_ACL_TABLE_GROUP_ATTR_CUSTOM_RANGE_START = 0x10000000,
    SAI_ACL_TABLE_GROUP_ATTR_CUSTOM_RANGE_END
} sai_acl_table_group_attr_t;

_sai_acl_action_type_t;
_sai_acl_api_t;
_sai_acl_counter_attr_t;
_sai_acl_entry_attr_t;
_sai_acl_ip_type_t;
_sai_acl_range_attr_t;
_sai_acl_range_type_t;
_sai_acl_table_attr_t;
_sai_acl_table_group_attr_t;
_sai_acl_table_group_member_attr_t;
_sai_acl_table_group_type_t;
struct _sai_acl_api_t;
typedef _sai_acl_api_t sai_acl_api_t;
typedef _sai_acl_entry_attr_t sai_acl_entry_attr_t;
typedef _sai_acl_ip_type_t sai_acl_ip_type_t;
typedef _sai_acl_range_type_t sai_acl_range_type_t;
typedef _sai_acl_table_attr_t sai_acl_table_attr_t;
typedef _sai_acl_table_group_type_t sai_acl_table_group_type_t;
typedef sai_status_t (*)(sai_object_id_t *, sai_object_id_t, uint32_t, const sai_attribute_t *) sai_create_acl_counter_fn;
typedef sai_status_t (*)(sai_object_id_t *, sai_object_id_t, uint32_t, const sai_attribute_t *) sai_create_acl_entry_fn;
typedef sai_status_t (*)(sai_object_id_t *, sai_object_id_t, uint32_t, const sai_attribute_t *) sai_create_acl_range_fn;
typedef sai_status_t (*)(sai_object_id_t *, sai_object_id_t, uint32_t, const sai_attribute_t *) sai_create_acl_table_fn;
typedef sai_status_t (*)(sai_object_id_t *, sai_object_id_t, uint32_t, const sai_attribute_t *) sai_create_acl_table_group_fn;
typedef sai_status_t (*)(sai_object_id_t *, sai_object_id_t, uint32_t, const sai_attribute_t *) sai_create_acl_table_group_member_fn;
typedef sai_status_t (*)(sai_object_id_t, uint32_t, sai_attribute_t *) sai_get_acl_counter_attribute_fn;
typedef sai_status_t (*)(sai_object_id_t, uint32_t, sai_attribute_t *) sai_get_acl_entry_attribute_fn;
typedef sai_status_t (*)(sai_object_id_t, uint32_t, sai_attribute_t *) sai_get_acl_range_attribute_fn;
typedef sai_status_t (*)(sai_object_id_t, uint32_t, sai_attribute_t *) sai_get_acl_table_attribute_fn;
typedef sai_status_t (*)(sai_object_id_t, uint32_t, sai_attribute_t *) sai_get_acl_table_group_attribute_fn;
typedef sai_status_t (*)(sai_object_id_t, uint32_t, sai_attribute_t *) sai_get_acl_table_group_member_attribute_fn;
typedef sai_status_t (*)(sai_object_id_t) sai_remove_acl_counter_fn;
typedef sai_status_t (*)(sai_object_id_t) sai_remove_acl_entry_fn;
typedef sai_status_t (*)(sai_object_id_t) sai_remove_acl_range_fn;
typedef sai_status_t (*)(sai_object_id_t) sai_remove_acl_table_fn;
typedef sai_status_t (*)(sai_object_id_t) sai_remove_acl_table_group_fn;
typedef sai_status_t (*)(sai_object_id_t) sai_remove_acl_table_group_member_fn;
typedef sai_status_t (*)(sai_object_id_t, const sai_attribute_t *) sai_set_acl_counter_attribute_fn;
typedef sai_status_t (*)(sai_object_id_t, const sai_attribute_t *) sai_set_acl_entry_attribute_fn;
typedef sai_status_t (*)(sai_object_id_t, const sai_attribute_t *) sai_set_acl_range_attribute_fn;
typedef sai_status_t (*)(sai_object_id_t, const sai_attribute_t *) sai_set_acl_table_attribute_fn;
typedef sai_status_t (*)(sai_object_id_t, const sai_attribute_t *) sai_set_acl_table_group_attribute_fn;
typedef sai_status_t (*)(sai_object_id_t, const sai_attribute_t *) sai_set_acl_table_group_member_attribute_fn;

File ../plugins/sai/SAI/xpSai/sai/inc/saibridge.h:
typedef enum _sai_bridge_type_t
{
    SAI_BRIDGE_TYPE_1Q,
    SAI_BRIDGE_TYPE_1D,
} sai_bridge_type_t;
typedef enum _sai_bridge_attr_t
{
    SAI_BRIDGE_ATTR_START,
    SAI_BRIDGE_ATTR_TYPE = SAI_BRIDGE_ATTR_START,
    SAI_BRIDGE_ATTR_PORT_LIST,
    SAI_BRIDGE_ATTR_MAX_LEARNED_ADDRESSES,
    SAI_BRIDGE_ATTR_LEARN_DISABLE,
    SAI_BRIDGE_ATTR_UNKNOWN_UNICAST_FLOOD_CONTROL_TYPE,
    SAI_BRIDGE_ATTR_UNKNOWN_UNICAST_FLOOD_GROUP,
    SAI_BRIDGE_ATTR_UNKNOWN_MULTICAST_FLOOD_CONTROL_TYPE,
    SAI_BRIDGE_ATTR_UNKNOWN_MULTICAST_FLOOD_GROUP,
    SAI_BRIDGE_ATTR_BROADCAST_FLOOD_CONTROL_TYPE,
    SAI_BRIDGE_ATTR_BROADCAST_FLOOD_GROUP,
    SAI_BRIDGE_ATTR_END,
    SAI_BRIDGE_ATTR_CUSTOM_RANGE_START = 0x10000000,
    SAI_BRIDGE_ATTR_CUSTOM_RANGE_END
} sai_bridge_attr_t;
typedef enum _sai_bridge_port_attr_t
{
    SAI_BRIDGE_PORT_ATTR_START,
    SAI_BRIDGE_PORT_ATTR_TYPE = SAI_BRIDGE_PORT_ATTR_START,
    SAI_BRIDGE_PORT_ATTR_PORT_ID,
    SAI_BRIDGE_PORT_ATTR_TAGGING_MODE,
    SAI_BRIDGE_PORT_ATTR_VLAN_ID,
    SAI_BRIDGE_PORT_ATTR_RIF_ID,
    SAI_BRIDGE_PORT_ATTR_TUNNEL_ID,
    SAI_BRIDGE_PORT_ATTR_BRIDGE_ID,
    SAI_BRIDGE_PORT_ATTR_FDB_LEARNING_MODE,
    SAI_BRIDGE_PORT_ATTR_MAX_LEARNED_ADDRESSES,
    SAI_BRIDGE_PORT_ATTR_FDB_LEARNING_LIMIT_VIOLATION_PACKET_ACTION,
    SAI_BRIDGE_PORT_ATTR_ADMIN_STATE,
    SAI_BRIDGE_PORT_ATTR_INGRESS_FILTERING,
    SAI_BRIDGE_PORT_ATTR_EGRESS_FILTERING,
    SAI_BRIDGE_PORT_ATTR_ISOLATION_GROUP,
    SAI_BRIDGE_PORT_ATTR_END,
    SAI_BRIDGE_PORT_ATTR_CUSTOM_RANGE_START = 0x10000000,
    SAI_BRIDGE_PORT_ATTR_CUSTOM_RANGE_END
} sai_bridge_port_attr_t;
typedef enum _sai_bridge_flood_control_type_t
{
    SAI_BRIDGE_FLOOD_CONTROL_TYPE_SUB_PORTS,
    SAI_BRIDGE_FLOOD_CONTROL_TYPE_NONE,
    SAI_BRIDGE_FLOOD_CONTROL_TYPE_L2MC_GROUP,
    SAI_BRIDGE_FLOOD_CONTROL_TYPE_COMBINED
} sai_bridge_flood_control_type_t;
typedef enum _sai_bridge_port_type_t
{
    SAI_BRIDGE_PORT_TYPE_PORT,
    SAI_BRIDGE_PORT_TYPE_SUB_PORT,
    SAI_BRIDGE_PORT_TYPE_1Q_ROUTER,
    SAI_BRIDGE_PORT_TYPE_1D_ROUTER,
    SAI_BRIDGE_PORT_TYPE_TUNNEL,
} sai_bridge_port_type_t;
typedef enum _sai_bridge_port_tagging_mode_t
{
    SAI_BRIDGE_PORT_TAGGING_MODE_UNTAGGED,
    SAI_BRIDGE_PORT_TAGGING_MODE_TAGGED,
} sai_bridge_port_tagging_mode_t;
typedef enum _sai_bridge_port_fdb_learning_mode_t
{
    SAI_BRIDGE_PORT_FDB_LEARNING_MODE_DROP,
    SAI_BRIDGE_PORT_FDB_LEARNING_MODE_DISABLE,
    SAI_BRIDGE_PORT_FDB_LEARNING_MODE_HW,
    SAI_BRIDGE_PORT_FDB_LEARNING_MODE_CPU_TRAP,
    SAI_BRIDGE_PORT_FDB_LEARNING_MODE_CPU_LOG,
    SAI_BRIDGE_PORT_FDB_LEARNING_MODE_FDB_NOTIFICATION,
} sai_bridge_port_fdb_learning_mode_t;

_sai_bridge_api_t;
_sai_bridge_attr_t;
_sai_bridge_flood_control_type_t;
_sai_bridge_port_attr_t;
_sai_bridge_port_fdb_learning_mode_t;
_sai_bridge_port_tagging_mode_t;
_sai_bridge_port_type_t;
_sai_bridge_type_t;
struct _sai_bridge_api_t;
enum _sai_bridge_port_attr_t;
enum _sai_bridge_port_type_t;
typedef struct _sai_bridge_api_t sai_bridge_api_t;
typedef _sai_bridge_flood_control_type_t sai_bridge_flood_control_type_t;
typedef _sai_bridge_port_fdb_learning_mode_t sai_bridge_port_fdb_learning_mode_t;
typedef _sai_bridge_port_tagging_mode_t sai_bridge_port_tagging_mode_t;
typedef enum _sai_bridge_port_type_t sai_bridge_port_type_t;
typedef _sai_bridge_type_t sai_bridge_type_t;
typedef sai_status_t (*)(sai_object_id_t, uint32_t, const sai_stat_id_t *) sai_clear_bridge_port_stats_fn;
typedef sai_status_t (*)(sai_object_id_t, uint32_t, const sai_stat_id_t *) sai_clear_bridge_stats_fn;
typedef sai_status_t (*)(sai_object_id_t *, sai_object_id_t, uint32_t, const sai_attribute_t *) sai_create_bridge_fn;
typedef sai_status_t (*)(sai_object_id_t *, sai_object_id_t, uint32_t, const sai_attribute_t *) sai_create_bridge_port_fn;
typedef sai_status_t (*)(sai_object_id_t, uint32_t, sai_attribute_t *) sai_get_bridge_attribute_fn;
typedef sai_status_t (*)(sai_object_id_t, uint32_t, sai_attribute_t *) sai_get_bridge_port_attribute_fn;
typedef sai_status_t (*)(sai_object_id_t, uint32_t, const sai_stat_id_t *, sai_stats_mode_t, 
    uint64_t *) sai_get_bridge_port_stats_ext_fn;
typedef sai_status_t (*)(sai_object_id_t, uint32_t, const sai_stat_id_t *, uint64_t *) sai_get_bridge_port_stats_fn;
typedef sai_status_t (*)(sai_object_id_t, uint32_t, const sai_stat_id_t *, sai_stats_mode_t, uint64_t *) sai_get_bridge_stats_ext_fn;
typedef sai_status_t (*)(sai_object_id_t, uint32_t, const sai_stat_id_t *, uint64_t *) sai_get_bridge_stats_fn;
typedef sai_status_t (*)(sai_object_id_t) sai_remove_bridge_fn;
typedef sai_status_t (*)(sai_object_id_t) sai_remove_bridge_port_fn;
typedef sai_status_t (*)(sai_object_id_t, const sai_attribute_t *) sai_set_bridge_attribute_fn;
typedef sai_status_t (*)(sai_object_id_t, const sai_attribute_t *) sai_set_bridge_port_attribute_fn;

File ../plugins/sai/SAI/xpSai/sai/inc/saibuffer.h:
typedef enum _sai_ingress_priority_group_attr_t
{
    SAI_INGRESS_PRIORITY_GROUP_ATTR_START,
    SAI_INGRESS_PRIORITY_GROUP_ATTR_BUFFER_PROFILE = SAI_INGRESS_PRIORITY_GROUP_ATTR_START,
    SAI_INGRESS_PRIORITY_GROUP_ATTR_PORT,
    SAI_INGRESS_PRIORITY_GROUP_ATTR_TAM,
    SAI_INGRESS_PRIORITY_GROUP_ATTR_INDEX,
    SAI_INGRESS_PRIORITY_GROUP_ATTR_END,
    SAI_INGRESS_PRIORITY_GROUP_ATTR_CUSTOM_RANGE_START = 0x10000000,
    SAI_INGRESS_PRIORITY_GROUP_ATTR_CUSTOM_RANGE_END
} sai_ingress_priority_group_attr_t;
typedef enum _sai_buffer_pool_type_t
{
    SAI_BUFFER_POOL_TYPE_INGRESS,
    SAI_BUFFER_POOL_TYPE_EGRESS,
    SAI_BUFFER_POOL_TYPE_BOTH
} sai_buffer_pool_type_t;
typedef enum _sai_buffer_pool_threshold_mode_t
{
    SAI_BUFFER_POOL_THRESHOLD_MODE_STATIC,
    SAI_BUFFER_POOL_THRESHOLD_MODE_DYNAMIC
} sai_buffer_pool_threshold_mode_t;
typedef enum _sai_buffer_pool_attr_t
{
    SAI_BUFFER_POOL_ATTR_START,
    SAI_BUFFER_POOL_ATTR_SHARED_SIZE = SAI_BUFFER_POOL_ATTR_START,
    SAI_BUFFER_POOL_ATTR_TYPE,
    SAI_BUFFER_POOL_ATTR_SIZE,
    SAI_BUFFER_POOL_ATTR_THRESHOLD_MODE,
    SAI_BUFFER_POOL_ATTR_TAM,
    SAI_BUFFER_POOL_ATTR_XOFF_SIZE,
    SAI_BUFFER_POOL_ATTR_WRED_PROFILE_ID,
    SAI_BUFFER_POOL_ATTR_END,
    SAI_BUFFER_POOL_ATTR_CUSTOM_RANGE_START = 0x10000000,
    SAI_BUFFER_POOL_ATTR_CUSTOM_RANGE_END
} sai_buffer_pool_attr_t;
typedef enum _sai_buffer_profile_threshold_mode_t
{
    SAI_BUFFER_PROFILE_THRESHOLD_MODE_STATIC,
    SAI_BUFFER_PROFILE_THRESHOLD_MODE_DYNAMIC,
} sai_buffer_profile_threshold_mode_t;
typedef enum _sai_buffer_profile_attr_t
{
    SAI_BUFFER_PROFILE_ATTR_START,
    SAI_BUFFER_PROFILE_ATTR_POOL_ID = SAI_BUFFER_PROFILE_ATTR_START,
    SAI_BUFFER_PROFILE_ATTR_RESERVED_BUFFER_SIZE,
    SAI_BUFFER_PROFILE_ATTR_BUFFER_SIZE = SAI_BUFFER_PROFILE_ATTR_RESERVED_BUFFER_SIZE,
    SAI_BUFFER_PROFILE_ATTR_THRESHOLD_MODE,
    SAI_BUFFER_PROFILE_ATTR_SHARED_DYNAMIC_TH,
    SAI_BUFFER_PROFILE_ATTR_SHARED_STATIC_TH,
    SAI_BUFFER_PROFILE_ATTR_XOFF_TH,
    SAI_BUFFER_PROFILE_ATTR_XON_TH,
    SAI_BUFFER_PROFILE_ATTR_XON_OFFSET_TH,
    SAI_BUFFER_PROFILE_ATTR_END,
    SAI_BUFFER_PROFILE_ATTR_CUSTOM_RANGE_START = 0x10000000,
    SAI_BUFFER_PROFILE_ATTR_CUSTOM_RANGE_END
} sai_buffer_profile_attr_t;

_sai_buffer_api_t;
_sai_buffer_pool_attr_t;
_sai_buffer_pool_stat_t;
_sai_buffer_pool_threshold_mode_t;
_sai_buffer_pool_type_t;
_sai_buffer_profile_attr_t;
_sai_buffer_profile_threshold_mode_t;
_sai_ingress_priority_group_attr_t;
_sai_ingress_priority_group_stat_t;
typedef _sai_buffer_api_t sai_buffer_api_t;
typedef _sai_buffer_pool_threshold_mode_t sai_buffer_pool_threshold_mode_t;
typedef _sai_buffer_pool_type_t sai_buffer_pool_type_t;
typedef _sai_buffer_profile_threshold_mode_t sai_buffer_profile_threshold_mode_t;
typedef sai_status_t (*)(sai_object_id_t, uint32_t, const sai_stat_id_t *) sai_clear_buffer_pool_stats_fn;
typedef sai_status_t (*)(sai_object_id_t, uint32_t, const sai_stat_id_t *) sai_clear_ingress_priority_group_stats_fn;
typedef sai_status_t (*)(sai_object_id_t *, sai_object_id_t, uint32_t, const sai_attribute_t *) sai_create_buffer_pool_fn;
typedef sai_status_t (*)(sai_object_id_t *, sai_object_id_t, uint32_t, const sai_attribute_t *) sai_create_buffer_profile_fn;
typedef sai_status_t (*)(sai_object_id_t *, sai_object_id_t, uint32_t, const sai_attribute_t *) sai_create_ingress_priority_group_fn;
typedef sai_status_t (*)(sai_object_id_t, uint32_t, sai_attribute_t *) sai_get_buffer_pool_attribute_fn;
typedef sai_status_t (*)(sai_object_id_t, uint32_t, const sai_stat_id_t *, sai_stats_mode_t, 
    uint64_t *) sai_get_buffer_pool_stats_ext_fn;
typedef sai_status_t (*)(sai_object_id_t, uint32_t, const sai_stat_id_t *, uint64_t *) sai_get_buffer_pool_stats_fn;
typedef sai_status_t (*)(sai_object_id_t, uint32_t, sai_attribute_t *) sai_get_buffer_profile_attribute_fn;
typedef sai_status_t (*)(sai_object_id_t, uint32_t, sai_attribute_t *) sai_get_ingress_priority_group_attribute_fn;
typedef sai_status_t (*)(sai_object_id_t, uint32_t, const sai_stat_id_t *, sai_stats_mode_t, 
    uint64_t *) sai_get_ingress_priority_group_stats_ext_fn;
typedef sai_status_t (*)(sai_object_id_t, uint32_t, const sai_stat_id_t *, uint64_t *) sai_get_ingress_priority_group_stats_fn;
typedef sai_status_t (*)(sai_object_id_t) sai_remove_buffer_pool_fn;
typedef sai_status_t (*)(sai_object_id_t) sai_remove_buffer_profile_fn;
typedef sai_status_t (*)(sai_object_id_t) sai_remove_ingress_priority_group_fn;
typedef sai_status_t (*)(sai_object_id_t, const sai_attribute_t *) sai_set_buffer_pool_attribute_fn;
typedef sai_status_t (*)(sai_object_id_t, const sai_attribute_t *) sai_set_buffer_profile_attribute_fn;
typedef sai_status_t (*)(sai_object_id_t, const sai_attribute_t *) sai_set_ingress_priority_group_attribute_fn;

File ../plugins/sai/SAI/xpSai/sai/inc/saifdb.h:
typedef enum _sai_fdb_entry_attr_t
{
    SAI_FDB_ENTRY_ATTR_START,
    SAI_FDB_ENTRY_ATTR_TYPE = SAI_FDB_ENTRY_ATTR_START,
    SAI_FDB_ENTRY_ATTR_PACKET_ACTION,
    SAI_FDB_ENTRY_ATTR_USER_TRAP_ID,
    SAI_FDB_ENTRY_ATTR_BRIDGE_PORT_ID,
    SAI_FDB_ENTRY_ATTR_META_DATA,
    SAI_FDB_ENTRY_ATTR_ENDPOINT_IP,
    SAI_FDB_ENTRY_ATTR_COUNTER_ID,
    SAI_FDB_ENTRY_ATTR_ALLOW_MAC_MOVE,
    SAI_FDB_ENTRY_ATTR_END,
    SAI_FDB_ENTRY_ATTR_CUSTOM_RANGE_START = 0x10000000,
    SAI_FDB_ENTRY_ATTR_CUSTOM_RANGE_END
} sai_fdb_entry_attr_t;
typedef enum _sai_fdb_entry_type_t
{
    SAI_FDB_ENTRY_TYPE_DYNAMIC,
    SAI_FDB_ENTRY_TYPE_STATIC,
} sai_fdb_entry_type_t;

_sai_fdb_api_t;
_sai_fdb_entry_attr_t;
_sai_fdb_entry_t;
_sai_fdb_entry_type_t;
_sai_fdb_event_notification_data_t;
_sai_fdb_event_t;
_sai_fdb_flush_attr_t;
struct _sai_fdb_api_t;
enum _sai_fdb_entry_attr_t;
struct _sai_fdb_entry_t;
enum _sai_fdb_entry_type_t;
struct _sai_fdb_event_notification_data_t;
enum _sai_fdb_event_t;
typedef sai_status_t (*)(uint32_t, const sai_fdb_entry_t *, const uint32_t *, const sai_attribute_t **, sai_bulk_op_error_mode_t, 
    sai_status_t *) sai_bulk_create_fdb_entry_fn;
typedef sai_status_t (*)(uint32_t, const sai_fdb_entry_t *, const uint32_t *, sai_attribute_t **, sai_bulk_op_error_mode_t, 
    sai_status_t *) sai_bulk_get_fdb_entry_attribute_fn;
typedef sai_status_t (*)(uint32_t, const sai_fdb_entry_t *, sai_bulk_op_error_mode_t, sai_status_t *) sai_bulk_remove_fdb_entry_fn;
typedef sai_status_t (*)(uint32_t, const sai_fdb_entry_t *, const sai_attribute_t *, sai_bulk_op_error_mode_t, 
    sai_status_t *) sai_bulk_set_fdb_entry_attribute_fn;
typedef sai_status_t (*)(const sai_fdb_entry_t *, uint32_t, const sai_attribute_t *) sai_create_fdb_entry_fn;
typedef struct _sai_fdb_api_t sai_fdb_api_t;
typedef struct _sai_fdb_entry_t sai_fdb_entry_t;
typedef _sai_fdb_event_notification_data_t sai_fdb_event_notification_data_t;
typedef void (*)(uint32_t, const sai_fdb_event_notification_data_t *) sai_fdb_event_notification_fn;
typedef _sai_fdb_event_t sai_fdb_event_t;
typedef sai_status_t (*)(sai_object_id_t, uint32_t, const sai_attribute_t *) sai_flush_fdb_entries_fn;
typedef sai_status_t (*)(const sai_fdb_entry_t *, uint32_t, sai_attribute_t *) sai_get_fdb_entry_attribute_fn;
typedef sai_status_t (*)(const sai_fdb_entry_t *) sai_remove_fdb_entry_fn;
typedef sai_status_t (*)(const sai_fdb_entry_t *, const sai_attribute_t *) sai_set_fdb_entry_attribute_fn;

File ../plugins/sai/SAI/xpSai/sai/inc/saihash.h:
_sai_hash_api_t;
_sai_hash_attr_t;
_sai_native_hash_field_t;
typedef sai_status_t (*)(sai_object_id_t *, sai_object_id_t, uint32_t, 
    const sai_attribute_t *) sai_create_fine_grained_hash_field_fn;
typedef sai_status_t (*)(sai_object_id_t *, sai_object_id_t, uint32_t, const sai_attribute_t *) sai_create_hash_fn;
typedef sai_status_t (*)(sai_object_id_t, uint32_t, sai_attribute_t *) sai_get_fine_grained_hash_field_attribute_fn;
typedef sai_status_t (*)(sai_object_id_t, uint32_t, sai_attribute_t *) sai_get_hash_attribute_fn;
typedef _sai_hash_api_t sai_hash_api_t;
typedef _sai_native_hash_field_t sai_native_hash_field_t;
typedef sai_status_t (*)(sai_object_id_t) sai_remove_fine_grained_hash_field_fn;
typedef sai_status_t (*)(sai_object_id_t) sai_remove_hash_fn;
typedef sai_status_t (*)(sai_object_id_t, const sai_attribute_t *) sai_set_fine_grained_hash_field_attribute_fn;
typedef sai_status_t (*)(sai_object_id_t, const sai_attribute_t *) sai_set_hash_attribute_fn;

File ../plugins/sai/SAI/xpSai/sai/inc/saihostif.h:
_sai_hostif_api_t;
_sai_hostif_attr_t;
_sai_hostif_packet_attr_t;
_sai_hostif_table_entry_attr_t;
_sai_hostif_table_entry_channel_type_t;
_sai_hostif_table_entry_type_t;
_sai_hostif_trap_attr_t;
_sai_hostif_trap_group_attr_t;
_sai_hostif_trap_type_t;
_sai_hostif_tx_type_t;
_sai_hostif_type_t;
_sai_hostif_user_defined_trap_attr_t;
_sai_hostif_user_defined_trap_type_t;
_sai_hostif_vlan_tag_t;
struct _sai_hostif_api_t;
enum _sai_hostif_attr_t;
enum _sai_hostif_type_t;
typedef sai_status_t (*)(sai_object_id_t, sai_size_t, void **, uint32_t, const sai_attribute_t *) sai_allocate_hostif_packet_fn;
typedef sai_status_t (*)(sai_object_id_t *, sai_object_id_t, uint32_t, const sai_attribute_t *) sai_create_hostif_fn;
typedef sai_status_t (*)(sai_object_id_t *, sai_object_id_t, uint32_t, const sai_attribute_t *) sai_create_hostif_table_entry_fn;
typedef sai_status_t (*)(sai_object_id_t *, sai_object_id_t, uint32_t, const sai_attribute_t *) sai_create_hostif_trap_fn;
typedef sai_status_t (*)(sai_object_id_t *, sai_object_id_t, uint32_t, const sai_attribute_t *) sai_create_hostif_trap_group_fn;
typedef sai_status_t (*)(sai_object_id_t *, sai_object_id_t, uint32_t, 
    const sai_attribute_t *) sai_create_hostif_user_defined_trap_fn;
typedef sai_status_t (*)(sai_object_id_t, void *) sai_free_hostif_packet_fn;
typedef sai_status_t (*)(sai_object_id_t, uint32_t, sai_attribute_t *) sai_get_hostif_attribute_fn;
typedef sai_status_t (*)(sai_object_id_t, uint32_t, sai_attribute_t *) sai_get_hostif_table_entry_attribute_fn;
typedef sai_status_t (*)(sai_object_id_t, uint32_t, sai_attribute_t *) sai_get_hostif_trap_attribute_fn;
typedef sai_status_t (*)(sai_object_id_t, uint32_t, sai_attribute_t *) sai_get_hostif_trap_group_attribute_fn;
typedef sai_status_t (*)(sai_object_id_t, uint32_t, sai_attribute_t *) sai_get_hostif_user_defined_trap_attribute_fn;
typedef _sai_hostif_api_t sai_hostif_api_t;
typedef _sai_hostif_table_entry_channel_type_t sai_hostif_table_entry_channel_type_t;
typedef _sai_hostif_table_entry_type_t sai_hostif_table_entry_type_t;
typedef _sai_hostif_trap_type_t sai_hostif_trap_type_t;
typedef _sai_hostif_tx_type_t sai_hostif_tx_type_t;
typedef _sai_hostif_type_t sai_hostif_type_t;
typedef _sai_hostif_user_defined_trap_type_t sai_hostif_user_defined_trap_type_t;
typedef _sai_hostif_vlan_tag_t sai_hostif_vlan_tag_t;
typedef void (*)(sai_object_id_t, sai_size_t, const void *, uint32_t, const sai_attribute_t *) sai_packet_event_notification_fn;
typedef sai_status_t (*)(sai_object_id_t, sai_size_t *, void *, uint32_t *, sai_attribute_t *) sai_recv_hostif_packet_fn;
typedef sai_status_t (*)(sai_object_id_t) sai_remove_hostif_fn;
typedef sai_status_t (*)(sai_object_id_t) sai_remove_hostif_table_entry_fn;
typedef sai_status_t (*)(sai_object_id_t) sai_remove_hostif_trap_fn;
typedef sai_status_t (*)(sai_object_id_t) sai_remove_hostif_trap_group_fn;
typedef sai_status_t (*)(sai_object_id_t) sai_remove_hostif_user_defined_trap_fn;
typedef sai_status_t (*)(sai_object_id_t, sai_size_t, const void *, uint32_t, const sai_attribute_t *) sai_send_hostif_packet_fn;
typedef sai_status_t (*)(sai_object_id_t, const sai_attribute_t *) sai_set_hostif_attribute_fn;
typedef sai_status_t (*)(sai_object_id_t, const sai_attribute_t *) sai_set_hostif_table_entry_attribute_fn;
typedef sai_status_t (*)(sai_object_id_t, const sai_attribute_t *) sai_set_hostif_trap_attribute_fn;
typedef sai_status_t (*)(sai_object_id_t, const sai_attribute_t *) sai_set_hostif_trap_group_attribute_fn;
typedef sai_status_t (*)(sai_object_id_t, const sai_attribute_t *) sai_set_hostif_user_defined_trap_attribute_fn;

File ../plugins/sai/SAI/xpSai/sai/inc/saiipmc.h:
_sai_ipmc_api_t;
_sai_ipmc_entry_attr_t;
_sai_ipmc_entry_t;
_sai_ipmc_entry_type_t;
struct _sai_ipmc_entry_t;
enum _sai_ipmc_entry_type_t;
typedef sai_status_t (*)(const sai_ipmc_entry_t *, uint32_t, const sai_attribute_t *) sai_create_ipmc_entry_fn;
typedef sai_status_t (*)(const sai_ipmc_entry_t *, uint32_t, sai_attribute_t *) sai_get_ipmc_entry_attribute_fn;
typedef _sai_ipmc_api_t sai_ipmc_api_t;
typedef struct _sai_ipmc_entry_t sai_ipmc_entry_t;
typedef enum _sai_ipmc_entry_type_t sai_ipmc_entry_type_t;
typedef sai_status_t (*)(const sai_ipmc_entry_t *) sai_remove_ipmc_entry_fn;
typedef sai_status_t (*)(const sai_ipmc_entry_t *, const sai_attribute_t *) sai_set_ipmc_entry_attribute_fn;

File ../plugins/sai/SAI/xpSai/sai/inc/saiipmcgroup.h:
_sai_ipmc_group_api_t;
_sai_ipmc_group_attr_t;
_sai_ipmc_group_member_attr_t;
typedef sai_status_t (*)(sai_object_id_t *, sai_object_id_t, uint32_t, const sai_attribute_t *) sai_create_ipmc_group_fn;
typedef sai_status_t (*)(sai_object_id_t *, sai_object_id_t, uint32_t, const sai_attribute_t *) sai_create_ipmc_group_member_fn;
typedef sai_status_t (*)(sai_object_id_t, uint32_t, sai_attribute_t *) sai_get_ipmc_group_attribute_fn;
typedef sai_status_t (*)(sai_object_id_t, uint32_t, sai_attribute_t *) sai_get_ipmc_group_member_attribute_fn;
typedef _sai_ipmc_group_api_t sai_ipmc_group_api_t;
typedef sai_status_t (*)(sai_object_id_t) sai_remove_ipmc_group_fn;
typedef sai_status_t (*)(sai_object_id_t) sai_remove_ipmc_group_member_fn;
typedef sai_status_t (*)(sai_object_id_t, const sai_attribute_t *) sai_set_ipmc_group_attribute_fn;
typedef sai_status_t (*)(sai_object_id_t, const sai_attribute_t *) sai_set_ipmc_group_member_attribute_fn;

File ../plugins/sai/SAI/xpSai/sai/inc/sail2mc.h:
_sai_l2mc_api_t;
_sai_l2mc_entry_attr_t;
_sai_l2mc_entry_t;
_sai_l2mc_entry_type_t;
struct _sai_l2mc_entry_t;
enum _sai_l2mc_entry_type_t;
typedef sai_status_t (*)(const sai_l2mc_entry_t *, uint32_t, const sai_attribute_t *) sai_create_l2mc_entry_fn;
typedef sai_status_t (*)(const sai_l2mc_entry_t *, uint32_t, sai_attribute_t *) sai_get_l2mc_entry_attribute_fn;
typedef _sai_l2mc_api_t sai_l2mc_api_t;
typedef struct _sai_l2mc_entry_t sai_l2mc_entry_t;
typedef enum _sai_l2mc_entry_type_t sai_l2mc_entry_type_t;
typedef sai_status_t (*)(const sai_l2mc_entry_t *) sai_remove_l2mc_entry_fn;
typedef sai_status_t (*)(const sai_l2mc_entry_t *, const sai_attribute_t *) sai_set_l2mc_entry_attribute_fn;

File ../plugins/sai/SAI/xpSai/sai/inc/sail2mcgroup.h:
_sai_l2mc_group_api_t;
_sai_l2mc_group_attr_t;
_sai_l2mc_group_member_attr_t;
typedef sai_status_t (*)(sai_object_id_t *, sai_object_id_t, uint32_t, const sai_attribute_t *) sai_create_l2mc_group_fn;
typedef sai_status_t (*)(sai_object_id_t *, sai_object_id_t, uint32_t, const sai_attribute_t *) sai_create_l2mc_group_member_fn;
typedef sai_status_t (*)(sai_object_id_t, uint32_t, sai_attribute_t *) sai_get_l2mc_group_attribute_fn;
typedef sai_status_t (*)(sai_object_id_t, uint32_t, sai_attribute_t *) sai_get_l2mc_group_member_attribute_fn;
typedef _sai_l2mc_group_api_t sai_l2mc_group_api_t;
typedef sai_status_t (*)(sai_object_id_t) sai_remove_l2mc_group_fn;
typedef sai_status_t (*)(sai_object_id_t) sai_remove_l2mc_group_member_fn;
typedef sai_status_t (*)(sai_object_id_t, const sai_attribute_t *) sai_set_l2mc_group_attribute_fn;
typedef sai_status_t (*)(sai_object_id_t, const sai_attribute_t *) sai_set_l2mc_group_member_attribute_fn;

File ../plugins/sai/SAI/xpSai/sai/inc/sailag.h:
typedef enum _sai_lag_attr_t
{
    SAI_LAG_ATTR_START,
    SAI_LAG_ATTR_PORT_LIST = SAI_LAG_ATTR_START,
    SAI_LAG_ATTR_INGRESS_ACL,
    SAI_LAG_ATTR_EGRESS_ACL,
    SAI_LAG_ATTR_PORT_VLAN_ID,
    SAI_LAG_ATTR_DEFAULT_VLAN_PRIORITY,
    SAI_LAG_ATTR_DROP_UNTAGGED,
    SAI_LAG_ATTR_DROP_TAGGED,
    SAI_LAG_ATTR_TPID,
    SAI_LAG_ATTR_SYSTEM_PORT_AGGREGATE_ID,
    SAI_LAG_ATTR_LABEL,
    SAI_LAG_ATTR_END,
    SAI_LAG_ATTR_CUSTOM_RANGE_START = 0x10000000,
    SAI_LAG_ATTR_CUSTOM_RANGE_END
} sai_lag_attr_t;
typedef struct shell_string {
	char name[30];
} shell_string;
typedef enum _sai_lag_member_attr_t
{
    SAI_LAG_MEMBER_ATTR_START,
    SAI_LAG_MEMBER_ATTR_LAG_ID = SAI_LAG_MEMBER_ATTR_START,
    SAI_LAG_MEMBER_ATTR_PORT_ID,
    SAI_LAG_MEMBER_ATTR_EGRESS_DISABLE,
    SAI_LAG_MEMBER_ATTR_INGRESS_DISABLE,
    SAI_LAG_MEMBER_ATTR_END,
    SAI_LAG_MEMBER_ATTR_CUSTOM_RANGE_START = 0x10000000,
    SAI_LAG_MEMBER_ATTR_CUSTOM_RANGE_END
} sai_lag_member_attr_t;

_sai_lag_api_t;
_sai_lag_attr_t;
_sai_lag_member_attr_t;
struct _sai_lag_api_t;
enum _sai_lag_member_attr_t;
typedef sai_status_t (*)(sai_object_id_t *, sai_object_id_t, uint32_t, const sai_attribute_t *) sai_create_lag_fn;
typedef sai_status_t (*)(sai_object_id_t *, sai_object_id_t, uint32_t, const sai_attribute_t *) sai_create_lag_member_fn;
typedef sai_status_t (*)(sai_object_id_t, uint32_t, sai_attribute_t *) sai_get_lag_attribute_fn;
typedef sai_status_t (*)(sai_object_id_t, uint32_t, sai_attribute_t *) sai_get_lag_member_attribute_fn;
typedef struct _sai_lag_api_t sai_lag_api_t;
typedef sai_status_t (*)(sai_object_id_t) sai_remove_lag_fn;
typedef sai_status_t (*)(sai_object_id_t) sai_remove_lag_member_fn;
typedef sai_status_t (*)(sai_object_id_t, const sai_attribute_t *) sai_set_lag_attribute_fn;
typedef sai_status_t (*)(sai_object_id_t, const sai_attribute_t *) sai_set_lag_member_attribute_fn;

File ../plugins/sai/SAI/xpSai/sai/inc/saimcastfdb.h:
_sai_mcast_fdb_api_t;
_sai_mcast_fdb_entry_attr_t;
_sai_mcast_fdb_entry_t;
struct _sai_mcast_fdb_entry_t;
typedef sai_status_t (*)(const sai_mcast_fdb_entry_t *, uint32_t, const sai_attribute_t *) sai_create_mcast_fdb_entry_fn;
typedef sai_status_t (*)(const sai_mcast_fdb_entry_t *, uint32_t, sai_attribute_t *) sai_get_mcast_fdb_entry_attribute_fn;
typedef _sai_mcast_fdb_api_t sai_mcast_fdb_api_t;
typedef struct _sai_mcast_fdb_entry_t sai_mcast_fdb_entry_t;
typedef sai_status_t (*)(const sai_mcast_fdb_entry_t *) sai_remove_mcast_fdb_entry_fn;
typedef sai_status_t (*)(const sai_mcast_fdb_entry_t *, const sai_attribute_t *) sai_set_mcast_fdb_entry_attribute_fn;

File ../plugins/sai/SAI/xpSai/sai/inc/saimirror.h:
typedef enum _sai_erspan_encapsulation_type_t
{
    SAI_ERSPAN_ENCAPSULATION_TYPE_MIRROR_L3_GRE_TUNNEL,
} sai_erspan_encapsulation_type_t;
typedef enum _sai_mirror_session_type_t
{
    SAI_MIRROR_SESSION_TYPE_LOCAL = 0,
    SAI_MIRROR_SESSION_TYPE_REMOTE,
    SAI_MIRROR_SESSION_TYPE_ENHANCED_REMOTE,
    SAI_MIRROR_SESSION_TYPE_SFLOW
} sai_mirror_session_type_t;
typedef enum _sai_mirror_session_attr_t
{
    SAI_MIRROR_SESSION_ATTR_START,
    SAI_MIRROR_SESSION_ATTR_TYPE = SAI_MIRROR_SESSION_ATTR_START,
    SAI_MIRROR_SESSION_ATTR_MONITOR_PORT,
    SAI_MIRROR_SESSION_ATTR_TRUNCATE_SIZE,
    SAI_MIRROR_SESSION_ATTR_SAMPLE_RATE,
    SAI_MIRROR_SESSION_ATTR_CONGESTION_MODE,
    SAI_MIRROR_SESSION_ATTR_TC,
    SAI_MIRROR_SESSION_ATTR_VLAN_TPID,
    SAI_MIRROR_SESSION_ATTR_VLAN_ID,
    SAI_MIRROR_SESSION_ATTR_VLAN_PRI,
    SAI_MIRROR_SESSION_ATTR_VLAN_CFI,
    SAI_MIRROR_SESSION_ATTR_VLAN_HEADER_VALID,
    SAI_MIRROR_SESSION_ATTR_ERSPAN_ENCAPSULATION_TYPE,
    SAI_MIRROR_SESSION_ATTR_IPHDR_VERSION,
    SAI_MIRROR_SESSION_ATTR_TOS,
    SAI_MIRROR_SESSION_ATTR_TTL,
    SAI_MIRROR_SESSION_ATTR_SRC_IP_ADDRESS,
    SAI_MIRROR_SESSION_ATTR_DST_IP_ADDRESS,
    SAI_MIRROR_SESSION_ATTR_SRC_MAC_ADDRESS,
    SAI_MIRROR_SESSION_ATTR_DST_MAC_ADDRESS,
    SAI_MIRROR_SESSION_ATTR_GRE_PROTOCOL_TYPE,
    SAI_MIRROR_SESSION_ATTR_MONITOR_PORTLIST_VALID,
    SAI_MIRROR_SESSION_ATTR_MONITOR_PORTLIST,
    SAI_MIRROR_SESSION_ATTR_POLICER,
    SAI_MIRROR_SESSION_ATTR_UDP_SRC_PORT,
    SAI_MIRROR_SESSION_ATTR_UDP_DST_PORT,
    SAI_MIRROR_SESSION_ATTR_END,
    SAI_MIRROR_SESSION_ATTR_CUSTOM_RANGE_START = 0x10000000,
    SAI_MIRROR_SESSION_ATTR_CUSTOM_RANGE_END
} sai_mirror_session_attr_t;
typedef struct shell_mac {
        sai_mac_t mac;
} shell_mac;

_sai_erspan_encapsulation_type_t;
_sai_mirror_api_t;
_sai_mirror_session_attr_t;
_sai_mirror_session_congestion_mode_t;
_sai_mirror_session_type_t;
enum _sai_erspan_encapsulation_type_t;
struct _sai_mirror_api_t;
enum _sai_mirror_session_attr_t;
enum _sai_mirror_session_type_t;
typedef sai_status_t (*)(sai_object_id_t *, sai_object_id_t, uint32_t, const sai_attribute_t *) sai_create_mirror_session_fn;
typedef _sai_erspan_encapsulation_type_t sai_erspan_encapsulation_type_t;
typedef sai_status_t (*)(sai_object_id_t, uint32_t, sai_attribute_t *) sai_get_mirror_session_attribute_fn;
typedef struct _sai_mirror_api_t sai_mirror_api_t;
typedef _sai_mirror_session_type_t sai_mirror_session_type_t;
typedef sai_status_t (*)(sai_object_id_t) sai_remove_mirror_session_fn;
typedef sai_status_t (*)(sai_object_id_t, const sai_attribute_t *) sai_set_mirror_session_attribute_fn;

File ../plugins/sai/SAI/xpSai/sai/inc/saimpls.h:
_sai_inseg_entry_t;
struct _sai_inseg_entry_t;
typedef struct _sai_inseg_entry_t sai_inseg_entry_t;

File ../plugins/sai/SAI/xpSai/sai/inc/sainat.h:
_sai_nat_entry_data_t;
_sai_nat_entry_key_t;
_sai_nat_entry_mask_t;
_sai_nat_entry_t;
_sai_nat_type_t;
struct _sai_nat_entry_data_t;
struct _sai_nat_entry_key_t;
struct _sai_nat_entry_mask_t;
struct _sai_nat_entry_t;
enum _sai_nat_type_t;
typedef struct _sai_nat_entry_data_t sai_nat_entry_data_t;
typedef struct _sai_nat_entry_key_t sai_nat_entry_key_t;
typedef struct _sai_nat_entry_mask_t sai_nat_entry_mask_t;
typedef struct _sai_nat_entry_t sai_nat_entry_t;
typedef enum _sai_nat_type_t sai_nat_type_t;

File ../plugins/sai/SAI/xpSai/sai/inc/saineighbor.h:
typedef enum _sai_neighbor_entry_attr_t
{
    SAI_NEIGHBOR_ENTRY_ATTR_START,
    SAI_NEIGHBOR_ENTRY_ATTR_DST_MAC_ADDRESS = SAI_NEIGHBOR_ENTRY_ATTR_START,
    SAI_NEIGHBOR_ENTRY_ATTR_PACKET_ACTION,
    SAI_NEIGHBOR_ENTRY_ATTR_USER_TRAP_ID,
    SAI_NEIGHBOR_ENTRY_ATTR_NO_HOST_ROUTE,
    SAI_NEIGHBOR_ENTRY_ATTR_META_DATA,
    SAI_NEIGHBOR_ENTRY_ATTR_COUNTER_ID,
    SAI_NEIGHBOR_ENTRY_ATTR_ENCAP_INDEX,
    SAI_NEIGHBOR_ENTRY_ATTR_ENCAP_IMPOSE_INDEX,
    SAI_NEIGHBOR_ENTRY_ATTR_IS_LOCAL,
    SAI_NEIGHBOR_ENTRY_ATTR_IP_ADDR_FAMILY,
    SAI_NEIGHBOR_ENTRY_ATTR_END,
    SAI_NEIGHBOR_ENTRY_ATTR_CUSTOM_RANGE_START = 0x10000000,
    SAI_NEIGHBOR_ENTRY_ATTR_CUSTOM_RANGE_END
} sai_neighbor_entry_attr_t;

_sai_neighbor_api_t;
_sai_neighbor_entry_attr_t;
_sai_neighbor_entry_t;
struct _sai_neighbor_api_t;
enum _sai_neighbor_entry_attr_t;
struct _sai_neighbor_entry_t;
typedef sai_status_t (*)(const sai_neighbor_entry_t *, uint32_t, const sai_attribute_t *) sai_create_neighbor_entry_fn;
typedef sai_status_t (*)(const sai_neighbor_entry_t *, uint32_t, sai_attribute_t *) sai_get_neighbor_entry_attribute_fn;
typedef struct _sai_neighbor_api_t sai_neighbor_api_t;
typedef struct _sai_neighbor_entry_t sai_neighbor_entry_t;
typedef sai_status_t (*)(sai_object_id_t) sai_remove_all_neighbor_entries_fn;
typedef sai_status_t (*)(const sai_neighbor_entry_t *) sai_remove_neighbor_entry_fn;
typedef sai_status_t (*)(const sai_neighbor_entry_t *, const sai_attribute_t *) sai_set_neighbor_entry_attribute_fn;

File ../plugins/sai/SAI/xpSai/sai/inc/sainexthop.h:
typedef enum _sai_next_hop_type_t
{
    SAI_NEXT_HOP_TYPE_IP,
    SAI_NEXT_HOP_TYPE_MPLS,
    SAI_NEXT_HOP_TYPE_TUNNEL_ENCAP,
    SAI_NEXT_HOP_TYPE_SEGMENTROUTE_SIDLIST,
    SAI_NEXT_HOP_TYPE_SEGMENTROUTE_ENDPOINT,
} sai_next_hop_type_t;
typedef enum _sai_next_hop_attr_t
{
    SAI_NEXT_HOP_ATTR_START,
    SAI_NEXT_HOP_ATTR_TYPE = SAI_NEXT_HOP_ATTR_START,
    SAI_NEXT_HOP_ATTR_IP,
    SAI_NEXT_HOP_ATTR_ROUTER_INTERFACE_ID,
    SAI_NEXT_HOP_ATTR_TUNNEL_ID,
    SAI_NEXT_HOP_ATTR_TUNNEL_VNI,
    SAI_NEXT_HOP_ATTR_TUNNEL_MAC,
    SAI_NEXT_HOP_ATTR_SEGMENTROUTE_SIDLIST_ID,
    SAI_NEXT_HOP_ATTR_SEGMENTROUTE_ENDPOINT_TYPE,
    SAI_NEXT_HOP_ATTR_SEGMENTROUTE_ENDPOINT_POP_TYPE,
    SAI_NEXT_HOP_ATTR_LABELSTACK,
    SAI_NEXT_HOP_ATTR_COUNTER_ID,
    SAI_NEXT_HOP_ATTR_DISABLE_DECREMENT_TTL,
    SAI_NEXT_HOP_ATTR_OUTSEG_TYPE,
    SAI_NEXT_HOP_ATTR_OUTSEG_TTL_MODE,
    SAI_NEXT_HOP_ATTR_OUTSEG_TTL_VALUE,
    SAI_NEXT_HOP_ATTR_OUTSEG_EXP_MODE,
    SAI_NEXT_HOP_ATTR_OUTSEG_EXP_VALUE,
    SAI_NEXT_HOP_ATTR_QOS_TC_AND_COLOR_TO_MPLS_EXP_MAP,
    SAI_NEXT_HOP_ATTR_END,
    SAI_NEXT_HOP_ATTR_CUSTOM_RANGE_START = 0x10000000,
    SAI_NEXT_HOP_ATTR_CUSTOM_RANGE_END
} sai_next_hop_attr_t;

_sai_next_hop_api_t;
_sai_next_hop_attr_t;
_sai_next_hop_endpoint_pop_type_t;
_sai_next_hop_endpoint_type_t;
_sai_next_hop_type_t;
struct _sai_next_hop_api_t;
enum _sai_next_hop_attr_t;
enum _sai_next_hop_type_t;
typedef sai_status_t (*)(sai_object_id_t *, sai_object_id_t, uint32_t, const sai_attribute_t *) sai_create_next_hop_fn;
typedef sai_status_t (*)(sai_object_id_t, uint32_t, sai_attribute_t *) sai_get_next_hop_attribute_fn;
typedef struct _sai_next_hop_api_t sai_next_hop_api_t;
typedef sai_status_t (*)(sai_object_id_t) sai_remove_next_hop_fn;
typedef sai_status_t (*)(sai_object_id_t, const sai_attribute_t *) sai_set_next_hop_attribute_fn;

File ../plugins/sai/SAI/xpSai/sai/inc/sainexthopgroup.h:
typedef enum _sai_next_hop_group_type_t
{
    SAI_NEXT_HOP_GROUP_TYPE_DYNAMIC_UNORDERED_ECMP,
    SAI_NEXT_HOP_GROUP_TYPE_ECMP = SAI_NEXT_HOP_GROUP_TYPE_DYNAMIC_UNORDERED_ECMP,
    SAI_NEXT_HOP_GROUP_TYPE_DYNAMIC_ORDERED_ECMP,
    SAI_NEXT_HOP_GROUP_TYPE_FINE_GRAIN_ECMP,
    SAI_NEXT_HOP_GROUP_TYPE_PROTECTION,
} sai_next_hop_group_type_t;
typedef enum _sai_next_hop_group_attr_t
{
    SAI_NEXT_HOP_GROUP_ATTR_START,
    SAI_NEXT_HOP_GROUP_ATTR_NEXT_HOP_COUNT = SAI_NEXT_HOP_GROUP_ATTR_START,
    SAI_NEXT_HOP_GROUP_ATTR_NEXT_HOP_MEMBER_LIST,
    SAI_NEXT_HOP_GROUP_ATTR_TYPE,
    SAI_NEXT_HOP_GROUP_ATTR_SET_SWITCHOVER,
    SAI_NEXT_HOP_GROUP_ATTR_COUNTER_ID,
    SAI_NEXT_HOP_GROUP_ATTR_CONFIGURED_SIZE,
    SAI_NEXT_HOP_GROUP_ATTR_REAL_SIZE,
    SAI_NEXT_HOP_GROUP_ATTR_END,
    SAI_NEXT_HOP_GROUP_ATTR_CUSTOM_RANGE_START = 0x10000000,
    SAI_NEXT_HOP_GROUP_ATTR_CUSTOM_RANGE_END
} sai_next_hop_group_attr_t;
typedef enum _sai_next_hop_group_member_attr_t
{
    SAI_NEXT_HOP_GROUP_MEMBER_ATTR_START,
    SAI_NEXT_HOP_GROUP_MEMBER_ATTR_NEXT_HOP_GROUP_ID = SAI_NEXT_HOP_GROUP_MEMBER_ATTR_START,
    SAI_NEXT_HOP_GROUP_MEMBER_ATTR_NEXT_HOP_ID,
    SAI_NEXT_HOP_GROUP_MEMBER_ATTR_WEIGHT,
    SAI_NEXT_HOP_GROUP_MEMBER_ATTR_CONFIGURED_ROLE,
    SAI_NEXT_HOP_GROUP_MEMBER_ATTR_OBSERVED_ROLE,
    SAI_NEXT_HOP_GROUP_MEMBER_ATTR_MONITORED_OBJECT,
    SAI_NEXT_HOP_GROUP_MEMBER_ATTR_INDEX,
    SAI_NEXT_HOP_GROUP_MEMBER_ATTR_SEQUENCE_ID,
    SAI_NEXT_HOP_GROUP_MEMBER_ATTR_COUNTER_ID,
    SAI_NEXT_HOP_GROUP_MEMBER_ATTR_END,
    SAI_NEXT_HOP_GROUP_MEMBER_ATTR_CUSTOM_RANGE_START  = 0x10000000,
    SAI_NEXT_HOP_GROUP_MEMBER_ATTR_CUSTOM_RANGE_END
} sai_next_hop_group_member_attr_t;

_sai_next_hop_group_api_t;
_sai_next_hop_group_attr_t;
_sai_next_hop_group_member_attr_t;
_sai_next_hop_group_member_configured_role_t;
_sai_next_hop_group_member_observed_role_t;
_sai_next_hop_group_type_t;
struct _sai_next_hop_group_api_t;
enum _sai_next_hop_group_attr_t;
enum _sai_next_hop_group_member_attr_t;
enum _sai_next_hop_group_type_t;
typedef sai_status_t (*)(sai_object_id_t *, sai_object_id_t, uint32_t, const sai_attribute_t *) sai_create_next_hop_group_fn;
typedef sai_status_t (*)(sai_object_id_t *, sai_object_id_t, uint32_t, const sai_attribute_t *) sai_create_next_hop_group_member_fn;
typedef sai_status_t (*)(sai_object_id_t, uint32_t, sai_attribute_t *) sai_get_next_hop_group_attribute_fn;
typedef sai_status_t (*)(sai_object_id_t, uint32_t, sai_attribute_t *) sai_get_next_hop_group_member_attribute_fn;
typedef struct _sai_next_hop_group_api_t sai_next_hop_group_api_t;
typedef sai_status_t (*)(sai_object_id_t) sai_remove_next_hop_group_fn;
typedef sai_status_t (*)(sai_object_id_t) sai_remove_next_hop_group_member_fn;
typedef sai_status_t (*)(sai_object_id_t, const sai_attribute_t *) sai_set_next_hop_group_attribute_fn;
typedef sai_status_t (*)(sai_object_id_t, const sai_attribute_t *) sai_set_next_hop_group_member_attribute_fn;

File ../plugins/sai/SAI/xpSai/sai/inc/saiobject.h:
_sai_attr_capability_t;
_sai_object_key_entry_t;
_sai_object_key_t;
union _sai_object_key_entry_t;
struct _sai_object_key_t;
typedef _sai_attr_capability_t sai_attr_capability_t;
typedef union _sai_object_key_entry_t sai_object_key_entry_t;
typedef struct _sai_object_key_t sai_object_key_t;

File ../plugins/sai/SAI/xpSai/sai/inc/saipolicer.h:
typedef enum _sai_meter_type_t
{
    SAI_METER_TYPE_PACKETS = 0x00000000,
    SAI_METER_TYPE_BYTES = 0x00000001,
    SAI_METER_TYPE_CUSTOM_RANGE_BASE = 0x10000000
} sai_meter_type_t;
typedef enum _sai_policer_mode_t
{
    SAI_POLICER_MODE_SR_TCM = 0x00000000,
    SAI_POLICER_MODE_TR_TCM = 0x00000001,
    SAI_POLICER_MODE_STORM_CONTROL = 0x00000002,
    SAI_POLICER_MODE_CUSTOM_RANGE_BASE = 0x10000000
} sai_policer_mode_t;
typedef enum _sai_policer_color_source_t
{
    SAI_POLICER_COLOR_SOURCE_BLIND = 0x00000000,
    SAI_POLICER_COLOR_SOURCE_AWARE = 0x00000001,
    SAI_POLICER_COLOR_SOURCE_CUSTOM_RANGE_BASE = 0x10000000
} sai_policer_color_source_t;
typedef enum _sai_policer_attr_t
{
    SAI_POLICER_ATTR_START = 0x00000000,
    SAI_POLICER_ATTR_METER_TYPE = SAI_POLICER_ATTR_START,
    SAI_POLICER_ATTR_MODE = 0x00000001,
    SAI_POLICER_ATTR_COLOR_SOURCE = 0x00000002,
    SAI_POLICER_ATTR_CBS = 0x00000003,
    SAI_POLICER_ATTR_CIR = 0x00000004,
    SAI_POLICER_ATTR_PBS = 0x00000005,
    SAI_POLICER_ATTR_PIR = 0x00000006,
    SAI_POLICER_ATTR_GREEN_PACKET_ACTION = 0x00000007,
    SAI_POLICER_ATTR_YELLOW_PACKET_ACTION = 0x00000008,
    SAI_POLICER_ATTR_RED_PACKET_ACTION = 0x00000009,
    SAI_POLICER_ATTR_ENABLE_COUNTER_PACKET_ACTION_LIST = 0x0000000a,
    SAI_POLICER_ATTR_END,
    SAI_POLICER_ATTR_CUSTOM_RANGE_START = 0x10000000,
    SAI_POLICER_ATTR_CUSTOM_RANGE_END
} sai_policer_attr_t;

_sai_meter_type_t;
_sai_policer_api_t;
_sai_policer_attr_t;
_sai_policer_color_source_t;
_sai_policer_mode_t;
_sai_policer_stat_t;
enum _sai_meter_type_t;
struct _sai_policer_api_t;
enum _sai_policer_attr_t;
enum _sai_policer_color_source_t;
enum _sai_policer_mode_t;
typedef sai_status_t (*)(sai_object_id_t, uint32_t, const sai_stat_id_t *) sai_clear_policer_stats_fn;
typedef sai_status_t (*)(sai_object_id_t *, sai_object_id_t, uint32_t, const sai_attribute_t *) sai_create_policer_fn;
typedef sai_status_t (*)(sai_object_id_t, uint32_t, sai_attribute_t *) sai_get_policer_attribute_fn;
typedef sai_status_t (*)(sai_object_id_t, uint32_t, const sai_stat_id_t *, sai_stats_mode_t, 
    uint64_t *) sai_get_policer_stats_ext_fn;
typedef sai_status_t (*)(sai_object_id_t, uint32_t, const sai_stat_id_t *, uint64_t *) sai_get_policer_stats_fn;
typedef struct _sai_policer_api_t sai_policer_api_t;
typedef sai_status_t (*)(sai_object_id_t) sai_remove_policer_fn;
typedef sai_status_t (*)(sai_object_id_t, const sai_attribute_t *) sai_set_policer_attribute_fn;

File ../plugins/sai/SAI/xpSai/sai/inc/saiport.h:
typedef enum _sai_port_pool_attr_t
{
    SAI_PORT_POOL_ATTR_START,
    SAI_PORT_POOL_ATTR_PORT_ID = SAI_PORT_POOL_ATTR_START,
    SAI_PORT_POOL_ATTR_BUFFER_POOL_ID,
    SAI_PORT_POOL_ATTR_QOS_WRED_PROFILE_ID,
    SAI_PORT_POOL_ATTR_END,
    SAI_PORT_POOL_ATTR_CUSTOM_RANGE_START = 0x10000000,
    SAI_PORT_POOL_ATTR_CUSTOM_RANGE_END
} sai_port_pool_attr_t;
typedef enum _sai_port_attr_t
{
    SAI_PORT_ATTR_START,
    SAI_PORT_ATTR_TYPE = SAI_PORT_ATTR_START,
    SAI_PORT_ATTR_OPER_STATUS,
    SAI_PORT_ATTR_SUPPORTED_BREAKOUT_MODE_TYPE,
    SAI_PORT_ATTR_CURRENT_BREAKOUT_MODE_TYPE,
    SAI_PORT_ATTR_QOS_QUEUE_LIST,
    SAI_PORT_ATTR_QOS_NUMBER_OF_SCHEDULER_GROUPS,
    SAI_PORT_ATTR_QOS_SCHEDULER_GROUP_LIST,
    SAI_PORT_ATTR_QOS_MAXIMUM_HEADROOM_SIZE,
    SAI_PORT_ATTR_SUPPORTED_SPEED,
    SAI_PORT_ATTR_SUPPORTED_FEC_MODE,
    SAI_PORT_ATTR_SUPPORTED_HALF_DUPLEX_SPEED,
    SAI_PORT_ATTR_SUPPORTED_AUTO_NEG_MODE,
    SAI_PORT_ATTR_SUPPORTED_FLOW_CONTROL_MODE,
    SAI_PORT_ATTR_SUPPORTED_ASYMMETRIC_PAUSE_MODE,
    SAI_PORT_ATTR_SUPPORTED_MEDIA_TYPE,
    SAI_PORT_ATTR_REMOTE_ADVERTISED_SPEED,
    SAI_PORT_ATTR_REMOTE_ADVERTISED_FEC_MODE,
    SAI_PORT_ATTR_REMOTE_ADVERTISED_HALF_DUPLEX_SPEED,
    SAI_PORT_ATTR_REMOTE_ADVERTISED_AUTO_NEG_MODE,
    SAI_PORT_ATTR_REMOTE_ADVERTISED_FLOW_CONTROL_MODE,
    SAI_PORT_ATTR_REMOTE_ADVERTISED_ASYMMETRIC_PAUSE_MODE,
    SAI_PORT_ATTR_REMOTE_ADVERTISED_MEDIA_TYPE,
    SAI_PORT_ATTR_REMOTE_ADVERTISED_OUI_CODE,
    SAI_PORT_ATTR_NUMBER_OF_INGRESS_PRIORITY_GROUPS,
    SAI_PORT_ATTR_INGRESS_PRIORITY_GROUP_LIST,
    SAI_PORT_ATTR_EYE_VALUES,
    SAI_PORT_ATTR_OPER_SPEED,
    SAI_PORT_ATTR_HW_LANE_LIST,
    SAI_PORT_ATTR_SPEED,
    SAI_PORT_ATTR_FULL_DUPLEX_MODE,
    SAI_PORT_ATTR_AUTO_NEG_MODE,
    SAI_PORT_ATTR_ADMIN_STATE,
    SAI_PORT_ATTR_MEDIA_TYPE,
    SAI_PORT_ATTR_ADVERTISED_SPEED,
    SAI_PORT_ATTR_ADVERTISED_FEC_MODE,
    SAI_PORT_ATTR_ADVERTISED_HALF_DUPLEX_SPEED,
    SAI_PORT_ATTR_ADVERTISED_AUTO_NEG_MODE,
    SAI_PORT_ATTR_ADVERTISED_FLOW_CONTROL_MODE,
    SAI_PORT_ATTR_ADVERTISED_ASYMMETRIC_PAUSE_MODE,
    SAI_PORT_ATTR_ADVERTISED_MEDIA_TYPE,
    SAI_PORT_ATTR_ADVERTISED_OUI_CODE,
    SAI_PORT_ATTR_PORT_VLAN_ID,
    SAI_PORT_ATTR_DEFAULT_VLAN_PRIORITY,
    SAI_PORT_ATTR_DROP_UNTAGGED,
    SAI_PORT_ATTR_DROP_TAGGED,
    SAI_PORT_ATTR_INTERNAL_LOOPBACK_MODE,
    SAI_PORT_ATTR_FEC_MODE,
    SAI_PORT_ATTR_UPDATE_DSCP,
    SAI_PORT_ATTR_MTU,
    SAI_PORT_ATTR_FLOOD_STORM_CONTROL_POLICER_ID,
    SAI_PORT_ATTR_BROADCAST_STORM_CONTROL_POLICER_ID,
    SAI_PORT_ATTR_MULTICAST_STORM_CONTROL_POLICER_ID,
    SAI_PORT_ATTR_GLOBAL_FLOW_CONTROL_MODE,
    SAI_PORT_ATTR_INGRESS_ACL,
    SAI_PORT_ATTR_EGRESS_ACL,
    SAI_PORT_ATTR_INGRESS_MACSEC_ACL,
    SAI_PORT_ATTR_EGRESS_MACSEC_ACL,
    SAI_PORT_ATTR_MACSEC_PORT_LIST,
    SAI_PORT_ATTR_INGRESS_MIRROR_SESSION,
    SAI_PORT_ATTR_EGRESS_MIRROR_SESSION,
    SAI_PORT_ATTR_INGRESS_SAMPLEPACKET_ENABLE,
    SAI_PORT_ATTR_EGRESS_SAMPLEPACKET_ENABLE,
    SAI_PORT_ATTR_INGRESS_SAMPLE_MIRROR_SESSION,
    SAI_PORT_ATTR_EGRESS_SAMPLE_MIRROR_SESSION,
    SAI_PORT_ATTR_POLICER_ID,
    SAI_PORT_ATTR_QOS_DEFAULT_TC,
    SAI_PORT_ATTR_QOS_DOT1P_TO_TC_MAP,
    SAI_PORT_ATTR_QOS_DOT1P_TO_COLOR_MAP,
    SAI_PORT_ATTR_QOS_DSCP_TO_TC_MAP,
    SAI_PORT_ATTR_QOS_DSCP_TO_COLOR_MAP,
    SAI_PORT_ATTR_QOS_TC_TO_QUEUE_MAP,
    SAI_PORT_ATTR_QOS_TC_AND_COLOR_TO_DOT1P_MAP,
    SAI_PORT_ATTR_QOS_TC_AND_COLOR_TO_DSCP_MAP,
    SAI_PORT_ATTR_QOS_TC_TO_PRIORITY_GROUP_MAP,
    SAI_PORT_ATTR_QOS_PFC_PRIORITY_TO_PRIORITY_GROUP_MAP,
    SAI_PORT_ATTR_QOS_PFC_PRIORITY_TO_QUEUE_MAP,
    SAI_PORT_ATTR_QOS_SCHEDULER_PROFILE_ID,
    SAI_PORT_ATTR_QOS_INGRESS_BUFFER_PROFILE_LIST,
    SAI_PORT_ATTR_QOS_EGRESS_BUFFER_PROFILE_LIST,
    SAI_PORT_ATTR_PRIORITY_FLOW_CONTROL_MODE,
    SAI_PORT_ATTR_PRIORITY_FLOW_CONTROL,
    SAI_PORT_ATTR_PRIORITY_FLOW_CONTROL_RX,
    SAI_PORT_ATTR_PRIORITY_FLOW_CONTROL_TX,
    SAI_PORT_ATTR_META_DATA,
    SAI_PORT_ATTR_EGRESS_BLOCK_PORT_LIST,
    SAI_PORT_ATTR_HW_PROFILE_ID,
    SAI_PORT_ATTR_EEE_ENABLE,
    SAI_PORT_ATTR_EEE_IDLE_TIME,
    SAI_PORT_ATTR_EEE_WAKE_TIME,
    SAI_PORT_ATTR_PORT_POOL_LIST,
    SAI_PORT_ATTR_ISOLATION_GROUP,
    SAI_PORT_ATTR_PKT_TX_ENABLE,
    SAI_PORT_ATTR_TAM_OBJECT,
    SAI_PORT_ATTR_SERDES_PREEMPHASIS,
    SAI_PORT_ATTR_SERDES_IDRIVER,
    SAI_PORT_ATTR_SERDES_IPREDRIVER,
    SAI_PORT_ATTR_LINK_TRAINING_ENABLE,
    SAI_PORT_ATTR_PTP_MODE,
    SAI_PORT_ATTR_INTERFACE_TYPE,
    SAI_PORT_ATTR_ADVERTISED_INTERFACE_TYPE,
    SAI_PORT_ATTR_REFERENCE_CLOCK,
    SAI_PORT_ATTR_PRBS_POLYNOMIAL,
    SAI_PORT_ATTR_PORT_SERDES_ID,
    SAI_PORT_ATTR_LINK_TRAINING_FAILURE_STATUS,
    SAI_PORT_ATTR_LINK_TRAINING_RX_STATUS,
    SAI_PORT_ATTR_PRBS_CONFIG,
    SAI_PORT_ATTR_PRBS_LOCK_STATUS,
    SAI_PORT_ATTR_PRBS_LOCK_LOSS_STATUS,
    SAI_PORT_ATTR_PRBS_RX_STATUS,
    SAI_PORT_ATTR_PRBS_RX_STATE,
    SAI_PORT_ATTR_AUTO_NEG_STATUS,
    SAI_PORT_ATTR_DISABLE_DECREMENT_TTL,
    SAI_PORT_ATTR_QOS_MPLS_EXP_TO_TC_MAP,
    SAI_PORT_ATTR_QOS_MPLS_EXP_TO_COLOR_MAP,
    SAI_PORT_ATTR_QOS_TC_AND_COLOR_TO_MPLS_EXP_MAP,
    SAI_PORT_ATTR_TPID,
    SAI_PORT_ATTR_ERR_STATUS_LIST,
    SAI_PORT_ATTR_FABRIC_ATTACHED,
    SAI_PORT_ATTR_FABRIC_ATTACHED_SWITCH_TYPE,
    SAI_PORT_ATTR_FABRIC_ATTACHED_SWITCH_ID,
    SAI_PORT_ATTR_FABRIC_ATTACHED_PORT_INDEX,
    SAI_PORT_ATTR_FABRIC_REACHABILITY,
    SAI_PORT_ATTR_SYSTEM_PORT,
    SAI_PORT_ATTR_END,
    SAI_PORT_ATTR_CUSTOM_RANGE_START = 0x10000000,
    SAI_PORT_ATTR_CUSTOM_RANGE_END
} sai_port_attr_t;

_sai_port_api_t;
_sai_port_attr_t;
_sai_port_breakout_mode_type_t;
_sai_port_fec_mode_t;
_sai_port_flow_control_mode_t;
_sai_port_interface_type_t;
_sai_port_internal_loopback_mode_t;
_sai_port_link_training_failure_status_t;
_sai_port_link_training_rx_status_t;
_sai_port_media_type_t;
_sai_port_oper_status_notification_t;
_sai_port_oper_status_t;
_sai_port_prbs_config_t;
_sai_port_prbs_rx_status_t;
_sai_port_priority_flow_control_mode_t;
_sai_port_ptp_mode_t;
_sai_port_stat_t;
enum _sai_port_type_t;
struct _sai_port_api_t;
enum _sai_port_attr_t;
struct _sai_port_oper_status_notification_t;
enum _sai_port_oper_status_t;
typedef sai_status_t (*)(sai_object_id_t) sai_clear_port_all_stats_fn;
typedef sai_status_t (*)(sai_object_id_t, uint32_t, const sai_stat_id_t *) sai_clear_port_pool_stats_fn;
typedef sai_status_t (*)(sai_object_id_t, uint32_t, const sai_stat_id_t *) sai_clear_port_stats_fn;
typedef sai_status_t (*)(sai_object_id_t *, sai_object_id_t, uint32_t, const sai_attribute_t *) sai_create_port_connector_fn;
typedef sai_status_t (*)(sai_object_id_t *, sai_object_id_t, uint32_t, const sai_attribute_t *) sai_create_port_fn;
typedef sai_status_t (*)(sai_object_id_t *, sai_object_id_t, uint32_t, const sai_attribute_t *) sai_create_port_pool_fn;
typedef sai_status_t (*)(sai_object_id_t *, sai_object_id_t, uint32_t, const sai_attribute_t *) sai_create_port_serdes_fn;
typedef sai_status_t (*)(sai_object_id_t, uint32_t, sai_attribute_t *) sai_get_port_attribute_fn;
typedef sai_status_t (*)(sai_object_id_t, uint32_t, sai_attribute_t *) sai_get_port_connector_attribute_fn;
typedef sai_status_t (*)(sai_object_id_t, uint32_t, sai_attribute_t *) sai_get_port_pool_attribute_fn;
typedef sai_status_t (*)(sai_object_id_t, uint32_t, const sai_stat_id_t *, sai_stats_mode_t, 
    uint64_t *) sai_get_port_pool_stats_ext_fn;
typedef sai_status_t (*)(sai_object_id_t, uint32_t, const sai_stat_id_t *, uint64_t *) sai_get_port_pool_stats_fn;
typedef sai_status_t (*)(sai_object_id_t, uint32_t, sai_attribute_t *) sai_get_port_serdes_attribute_fn;
typedef sai_status_t (*)(sai_object_id_t, uint32_t, const sai_stat_id_t *, sai_stats_mode_t, uint64_t *) sai_get_port_stats_ext_fn;
typedef sai_status_t (*)(sai_object_id_t, uint32_t, const sai_stat_id_t *, uint64_t *) sai_get_port_stats_fn;
typedef struct _sai_port_api_t sai_port_api_t;
typedef _sai_port_media_type_t sai_port_media_type_t;
typedef _sai_port_oper_status_notification_t sai_port_oper_status_notification_t;
typedef _sai_port_oper_status_t sai_port_oper_status_t;
typedef void (*)(uint32_t, const sai_port_oper_status_notification_t *) sai_port_state_change_notification_fn;
typedef sai_status_t (*)(sai_object_id_t) sai_remove_port_connector_fn;
typedef sai_status_t (*)(sai_object_id_t) sai_remove_port_fn;
typedef sai_status_t (*)(sai_object_id_t) sai_remove_port_pool_fn;
typedef sai_status_t (*)(sai_object_id_t) sai_remove_port_serdes_fn;
typedef sai_status_t (*)(sai_object_id_t, const sai_attribute_t *) sai_set_port_attribute_fn;
typedef sai_status_t (*)(sai_object_id_t, const sai_attribute_t *) sai_set_port_connector_attribute_fn;
typedef sai_status_t (*)(sai_object_id_t, const sai_attribute_t *) sai_set_port_pool_attribute_fn;
typedef sai_status_t (*)(sai_object_id_t, const sai_attribute_t *) sai_set_port_serdes_attribute_fn;

File ../plugins/sai/SAI/xpSai/sai/inc/saiqosmap.h:
typedef enum _sai_qos_map_type_t
{
    SAI_QOS_MAP_TYPE_DOT1P_TO_TC = 0x00000000,
    SAI_QOS_MAP_TYPE_DOT1P_TO_COLOR = 0x00000001,
    SAI_QOS_MAP_TYPE_DSCP_TO_TC = 0x00000002,
    SAI_QOS_MAP_TYPE_DSCP_TO_COLOR = 0x00000003,
    SAI_QOS_MAP_TYPE_TC_TO_QUEUE = 0x00000004,
    SAI_QOS_MAP_TYPE_TC_AND_COLOR_TO_DSCP = 0x00000005,
    SAI_QOS_MAP_TYPE_TC_AND_COLOR_TO_DOT1P = 0x00000006,
    SAI_QOS_MAP_TYPE_TC_TO_PRIORITY_GROUP = 0x00000007,
    SAI_QOS_MAP_TYPE_PFC_PRIORITY_TO_PRIORITY_GROUP = 0x00000008,
    SAI_QOS_MAP_TYPE_PFC_PRIORITY_TO_QUEUE = 0x00000009,
    SAI_QOS_MAP_TYPE_MPLS_EXP_TO_TC = 0x0000000a,
    SAI_QOS_MAP_TYPE_MPLS_EXP_TO_COLOR = 0x0000000b,
    SAI_QOS_MAP_TYPE_TC_AND_COLOR_TO_MPLS_EXP = 0x0000000c,
    SAI_QOS_MAP_TYPE_CUSTOM_RANGE_BASE = 0x10000000
} sai_qos_map_type_t;
typedef enum _sai_qos_map_attr_t
{
    SAI_QOS_MAP_ATTR_START,
    SAI_QOS_MAP_ATTR_TYPE = SAI_QOS_MAP_ATTR_START,
    SAI_QOS_MAP_ATTR_MAP_TO_VALUE_LIST = 0x00000001,
    SAI_QOS_MAP_ATTR_END,
    SAI_QOS_MAP_ATTR_CUSTOM_RANGE_START = 0x10000000,
    SAI_QOS_MAP_ATTR_CUSTOM_RANGE_END
} sai_qos_map_attr_t;

_sai_qos_map_api_t;
_sai_qos_map_attr_t;
_sai_qos_map_type_t;
struct _sai_qos_map_api_t;
enum _sai_qos_map_attr_t;
enum _sai_qos_map_type_t;
typedef sai_status_t (*)(sai_object_id_t *, sai_object_id_t, uint32_t, const sai_attribute_t *) sai_create_qos_map_fn;
typedef sai_status_t (*)(sai_object_id_t, uint32_t, sai_attribute_t *) sai_get_qos_map_attribute_fn;
typedef struct _sai_qos_map_api_t sai_qos_map_api_t;
typedef sai_status_t (*)(sai_object_id_t) sai_remove_qos_map_fn;
typedef sai_status_t (*)(sai_object_id_t, const sai_attribute_t *) sai_set_qos_map_attribute_fn;

File ../plugins/sai/SAI/xpSai/sai/inc/saiqueue.h:
typedef enum _sai_queue_type_t
{
    SAI_QUEUE_TYPE_ALL = 0x00000000,
    SAI_QUEUE_TYPE_UNICAST = 0x00000001,
    SAI_QUEUE_TYPE_MULTICAST = 0x00000002,
    SAI_QUEUE_TYPE_UNICAST_VOQ = 0x00000003,
    SAI_QUEUE_TYPE_MULTICAST_VOQ = 0x00000004,
    SAI_QUEUE_TYPE_FABRIC_TX = 0x00000005,
    SAI_QUEUE_TYPE_CUSTOM_RANGE_BASE = 0x10000000
} sai_queue_type_t;
typedef enum _sai_queue_attr_t
{
    SAI_QUEUE_ATTR_START,
    SAI_QUEUE_ATTR_TYPE = SAI_QUEUE_ATTR_START,
    SAI_QUEUE_ATTR_PORT,
    SAI_QUEUE_ATTR_INDEX,
    SAI_QUEUE_ATTR_PARENT_SCHEDULER_NODE,
    SAI_QUEUE_ATTR_WRED_PROFILE_ID,
    SAI_QUEUE_ATTR_BUFFER_PROFILE_ID,
    SAI_QUEUE_ATTR_SCHEDULER_PROFILE_ID,
    SAI_QUEUE_ATTR_PAUSE_STATUS,
    SAI_QUEUE_ATTR_ENABLE_PFC_DLDR,
    SAI_QUEUE_ATTR_PFC_DLR_INIT,
    SAI_QUEUE_ATTR_TAM_OBJECT,
    SAI_QUEUE_ATTR_END,
    SAI_QUEUE_ATTR_CUSTOM_RANGE_START = 0x10000000,
    SAI_QUEUE_ATTR_CUSTOM_RANGE_END
} sai_queue_attr_t;

_sai_queue_api_t;
_sai_queue_attr_t;
_sai_queue_deadlock_notification_data_t;
_sai_queue_pfc_deadlock_event_type_t;
_sai_queue_stat_t;
_sai_queue_type_t;
struct _sai_queue_api_t;
enum _sai_queue_attr_t;
typedef sai_status_t (*)(sai_object_id_t, uint32_t, const sai_stat_id_t *) sai_clear_queue_stats_fn;
typedef sai_status_t (*)(sai_object_id_t *, sai_object_id_t, uint32_t, const sai_attribute_t *) sai_create_queue_fn;
typedef sai_status_t (*)(sai_object_id_t, uint32_t, sai_attribute_t *) sai_get_queue_attribute_fn;
typedef sai_status_t (*)(sai_object_id_t, uint32_t, const sai_stat_id_t *, sai_stats_mode_t, uint64_t *) sai_get_queue_stats_ext_fn;
typedef sai_status_t (*)(sai_object_id_t, uint32_t, const sai_stat_id_t *, uint64_t *) sai_get_queue_stats_fn;
typedef struct _sai_queue_api_t sai_queue_api_t;
typedef _sai_queue_deadlock_notification_data_t sai_queue_deadlock_notification_data_t;
typedef _sai_queue_pfc_deadlock_event_type_t sai_queue_pfc_deadlock_event_type_t;
typedef void (*)(uint32_t, const sai_queue_deadlock_notification_data_t *) sai_queue_pfc_deadlock_notification_fn;
typedef _sai_queue_type_t sai_queue_type_t;
typedef sai_status_t (*)(sai_object_id_t) sai_remove_queue_fn;
typedef sai_status_t (*)(sai_object_id_t, const sai_attribute_t *) sai_set_queue_attribute_fn;

File ../plugins/sai/SAI/xpSai/sai/inc/sairoute.h:
typedef struct shell_ip6 {
	uint8_t addr[16];
} shell_ip6;
typedef enum _sai_route_entry_attr_t
{
    SAI_ROUTE_ENTRY_ATTR_START,
    SAI_ROUTE_ENTRY_ATTR_PACKET_ACTION = SAI_ROUTE_ENTRY_ATTR_START,
    SAI_ROUTE_ENTRY_ATTR_USER_TRAP_ID,
    SAI_ROUTE_ENTRY_ATTR_NEXT_HOP_ID,
    SAI_ROUTE_ENTRY_ATTR_META_DATA,
    SAI_ROUTE_ENTRY_ATTR_IP_ADDR_FAMILY,
    SAI_ROUTE_ENTRY_ATTR_COUNTER_ID,
    SAI_ROUTE_ENTRY_ATTR_END,
    SAI_ROUTE_ENTRY_ATTR_CUSTOM_RANGE_START = 0x10000000,
    SAI_ROUTE_ENTRY_ATTR_CUSTOM_RANGE_END
} sai_route_entry_attr_t;

_sai_route_api_t;
_sai_route_entry_attr_t;
_sai_route_entry_t;
struct _sai_route_api_t;
enum _sai_route_entry_attr_t;
struct _sai_route_entry_t;
typedef sai_status_t (*)(uint32_t, const sai_route_entry_t *, const uint32_t *, const sai_attribute_t **, sai_bulk_op_error_mode_t, 
    sai_status_t *) sai_bulk_create_route_entry_fn;
typedef sai_status_t (*)(uint32_t, const sai_route_entry_t *, const uint32_t *, sai_attribute_t **, sai_bulk_op_error_mode_t, 
    sai_status_t *) sai_bulk_get_route_entry_attribute_fn;
typedef sai_status_t (*)(uint32_t, const sai_route_entry_t *, sai_bulk_op_error_mode_t, 
    sai_status_t *) sai_bulk_remove_route_entry_fn;
typedef sai_status_t (*)(uint32_t, const sai_route_entry_t *, const sai_attribute_t *, sai_bulk_op_error_mode_t, 
    sai_status_t *) sai_bulk_set_route_entry_attribute_fn;
typedef sai_status_t (*)(const sai_route_entry_t *, uint32_t, const sai_attribute_t *) sai_create_route_entry_fn;
typedef sai_status_t (*)(const sai_route_entry_t *, uint32_t, sai_attribute_t *) sai_get_route_entry_attribute_fn;
typedef sai_status_t (*)(const sai_route_entry_t *) sai_remove_route_entry_fn;
typedef struct _sai_route_api_t sai_route_api_t;
typedef struct _sai_route_entry_t sai_route_entry_t;
typedef sai_status_t (*)(const sai_route_entry_t *, const sai_attribute_t *) sai_set_route_entry_attribute_fn;

File ../plugins/sai/SAI/xpSai/sai/inc/sairouterinterface.h:
typedef enum _sai_router_interface_type_t
{
    SAI_ROUTER_INTERFACE_TYPE_PORT,
    SAI_ROUTER_INTERFACE_TYPE_VLAN,
    SAI_ROUTER_INTERFACE_TYPE_LOOPBACK,
    SAI_ROUTER_INTERFACE_TYPE_MPLS_ROUTER,
    SAI_ROUTER_INTERFACE_TYPE_SUB_PORT,
    SAI_ROUTER_INTERFACE_TYPE_BRIDGE,
    SAI_ROUTER_INTERFACE_TYPE_QINQ_PORT,
} sai_router_interface_type_t;
typedef enum _sai_router_interface_attr_t
{
    SAI_ROUTER_INTERFACE_ATTR_START,
    SAI_ROUTER_INTERFACE_ATTR_VIRTUAL_ROUTER_ID = SAI_ROUTER_INTERFACE_ATTR_START,
    SAI_ROUTER_INTERFACE_ATTR_TYPE,
    SAI_ROUTER_INTERFACE_ATTR_PORT_ID,
    SAI_ROUTER_INTERFACE_ATTR_VLAN_ID,
    SAI_ROUTER_INTERFACE_ATTR_OUTER_VLAN_ID,
    SAI_ROUTER_INTERFACE_ATTR_INNER_VLAN_ID,
    SAI_ROUTER_INTERFACE_ATTR_BRIDGE_ID,
    SAI_ROUTER_INTERFACE_ATTR_SRC_MAC_ADDRESS,
    SAI_ROUTER_INTERFACE_ATTR_ADMIN_V4_STATE,
    SAI_ROUTER_INTERFACE_ATTR_ADMIN_V6_STATE,
    SAI_ROUTER_INTERFACE_ATTR_MTU,
    SAI_ROUTER_INTERFACE_ATTR_INGRESS_ACL,
    SAI_ROUTER_INTERFACE_ATTR_EGRESS_ACL,
    SAI_ROUTER_INTERFACE_ATTR_NEIGHBOR_MISS_PACKET_ACTION,
    SAI_ROUTER_INTERFACE_ATTR_V4_MCAST_ENABLE,
    SAI_ROUTER_INTERFACE_ATTR_V6_MCAST_ENABLE,
    SAI_ROUTER_INTERFACE_ATTR_LOOPBACK_PACKET_ACTION,
    SAI_ROUTER_INTERFACE_ATTR_IS_VIRTUAL,
    SAI_ROUTER_INTERFACE_ATTR_NAT_ZONE_ID,
    SAI_ROUTER_INTERFACE_ATTR_DISABLE_DECREMENT_TTL,
    SAI_ROUTER_INTERFACE_ATTR_ADMIN_MPLS_STATE,
    SAI_ROUTER_INTERFACE_ATTR_END,
    SAI_ROUTER_INTERFACE_ATTR_CUSTOM_RANGE_START = 0x10000000,
    SAI_ROUTER_INTERFACE_ATTR_CUSTOM_RANGE_END
} sai_router_interface_attr_t;

_sai_router_interface_api_t;
_sai_router_interface_attr_t;
_sai_router_interface_stat_t;
_sai_router_interface_type_t;
struct _sai_router_interface_api_t;
enum _sai_router_interface_attr_t;
enum _sai_router_interface_type_t;
typedef sai_status_t (*)(sai_object_id_t, uint32_t, const sai_stat_id_t *) sai_clear_router_interface_stats_fn;
typedef sai_status_t (*)(sai_object_id_t *, sai_object_id_t, uint32_t, const sai_attribute_t *) sai_create_router_interface_fn;
typedef sai_status_t (*)(sai_object_id_t, uint32_t, sai_attribute_t *) sai_get_router_interface_attribute_fn;
typedef sai_status_t (*)(sai_object_id_t, uint32_t, const sai_stat_id_t *, sai_stats_mode_t, 
    uint64_t *) sai_get_router_interface_stats_ext_fn;
typedef sai_status_t (*)(sai_object_id_t, uint32_t, const sai_stat_id_t *, uint64_t *) sai_get_router_interface_stats_fn;
typedef sai_status_t (*)(sai_object_id_t) sai_remove_router_interface_fn;
typedef struct _sai_router_interface_api_t sai_router_interface_api_t;
typedef _sai_router_interface_type_t sai_router_interface_type_t;
typedef sai_status_t (*)(sai_object_id_t, const sai_attribute_t *) sai_set_router_interface_attribute_fn;

File ../plugins/sai/SAI/xpSai/sai/inc/sairpfgroup.h:
_sai_rpf_group_api_t;
_sai_rpf_group_attr_t;
_sai_rpf_group_member_attr_t;
typedef sai_status_t (*)(sai_object_id_t *, sai_object_id_t, uint32_t, const sai_attribute_t *) sai_create_rpf_group_fn;
typedef sai_status_t (*)(sai_object_id_t *, sai_object_id_t, uint32_t, const sai_attribute_t *) sai_create_rpf_group_member_fn;
typedef sai_status_t (*)(sai_object_id_t, uint32_t, sai_attribute_t *) sai_get_rpf_group_attribute_fn;
typedef sai_status_t (*)(sai_object_id_t, uint32_t, sai_attribute_t *) sai_get_rpf_group_member_attribute_fn;
typedef sai_status_t (*)(sai_object_id_t) sai_remove_rpf_group_fn;
typedef sai_status_t (*)(sai_object_id_t) sai_remove_rpf_group_member_fn;
typedef _sai_rpf_group_api_t sai_rpf_group_api_t;
typedef sai_status_t (*)(sai_object_id_t, const sai_attribute_t *) sai_set_rpf_group_attribute_fn;
typedef sai_status_t (*)(sai_object_id_t, const sai_attribute_t *) sai_set_rpf_group_member_attribute_fn;

File ../plugins/sai/SAI/xpSai/sai/inc/saisamplepacket.h:
_sai_samplepacket_api_t;
_sai_samplepacket_attr_t;
_sai_samplepacket_mode_t;
_sai_samplepacket_type_t;
typedef sai_status_t (*)(sai_object_id_t *, sai_object_id_t, uint32_t, const sai_attribute_t *) sai_create_samplepacket_fn;
typedef sai_status_t (*)(sai_object_id_t, uint32_t, sai_attribute_t *) sai_get_samplepacket_attribute_fn;
typedef sai_status_t (*)(sai_object_id_t) sai_remove_samplepacket_fn;
typedef _sai_samplepacket_api_t sai_samplepacket_api_t;
typedef _sai_samplepacket_mode_t sai_samplepacket_mode_t;
typedef _sai_samplepacket_type_t sai_samplepacket_type_t;
typedef sai_status_t (*)(sai_object_id_t, const sai_attribute_t *) sai_set_samplepacket_attribute_fn;

File ../plugins/sai/SAI/xpSai/sai/inc/saischeduler.h:
typedef enum _sai_scheduling_type_t
{
    SAI_SCHEDULING_TYPE_STRICT = 0x00000000,
    SAI_SCHEDULING_TYPE_WRR = 0x00000001,
    SAI_SCHEDULING_TYPE_DWRR = 0x00000002,
} sai_scheduling_type_t;
typedef enum _sai_scheduler_attr_t
{
    SAI_SCHEDULER_ATTR_START = 0x00000000,
    SAI_SCHEDULER_ATTR_SCHEDULING_TYPE = SAI_SCHEDULER_ATTR_START,
    SAI_SCHEDULER_ATTR_SCHEDULING_WEIGHT = 0x00000001,
    SAI_SCHEDULER_ATTR_METER_TYPE = 0x00000002,
    SAI_SCHEDULER_ATTR_MIN_BANDWIDTH_RATE = 0x00000003,
    SAI_SCHEDULER_ATTR_MIN_BANDWIDTH_BURST_RATE = 0x00000004,
    SAI_SCHEDULER_ATTR_MAX_BANDWIDTH_RATE = 0x00000005,
    SAI_SCHEDULER_ATTR_MAX_BANDWIDTH_BURST_RATE = 0x00000006,
    SAI_SCHEDULER_ATTR_END,
    SAI_SCHEDULER_ATTR_CUSTOM_RANGE_START = 0x10000000,
    SAI_SCHEDULER_ATTR_CUSTOM_RANGE_END
} sai_scheduler_attr_t;

_sai_scheduler_api_t;
_sai_scheduler_attr_t;
_sai_scheduling_type_t;
struct _sai_scheduler_api_t;
enum _sai_scheduler_attr_t;
enum _sai_scheduling_type_t;
typedef sai_status_t (*)(sai_object_id_t *, sai_object_id_t, uint32_t, const sai_attribute_t *) sai_create_scheduler_fn;
typedef sai_status_t (*)(sai_object_id_t, uint32_t, sai_attribute_t *) sai_get_scheduler_attribute_fn;
typedef sai_status_t (*)(sai_object_id_t) sai_remove_scheduler_fn;
typedef struct _sai_scheduler_api_t sai_scheduler_api_t;
typedef sai_status_t (*)(sai_object_id_t, const sai_attribute_t *) sai_set_scheduler_attribute_fn;

File ../plugins/sai/SAI/xpSai/sai/inc/saischedulergroup.h:
typedef enum _sai_scheduler_group_attr_t
{
    SAI_SCHEDULER_GROUP_ATTR_START = 0x00000000,
    SAI_SCHEDULER_GROUP_ATTR_CHILD_COUNT = SAI_SCHEDULER_GROUP_ATTR_START,
    SAI_SCHEDULER_GROUP_ATTR_CHILD_LIST = 0x00000001,
    SAI_SCHEDULER_GROUP_ATTR_PORT_ID = 0x00000002,
    SAI_SCHEDULER_GROUP_ATTR_LEVEL = 0x00000003,
    SAI_SCHEDULER_GROUP_ATTR_MAX_CHILDS = 0x00000004,
    SAI_SCHEDULER_GROUP_ATTR_SCHEDULER_PROFILE_ID = 0x00000005,
    SAI_SCHEDULER_GROUP_ATTR_PARENT_NODE = 0x00000006,
    SAI_SCHEDULER_GROUP_ATTR_END,
    SAI_SCHEDULER_GROUP_ATTR_CUSTOM_RANGE_START = 0x10000000,
    SAI_SCHEDULER_GROUP_ATTR_CUSTOM_RANGE_END
} sai_scheduler_group_attr_t;

_sai_scheduler_group_api_t;
_sai_scheduler_group_attr_t;
typedef sai_status_t (*)(sai_object_id_t *, sai_object_id_t, uint32_t, const sai_attribute_t *) sai_create_scheduler_group_fn;
typedef sai_status_t (*)(sai_object_id_t, uint32_t, sai_attribute_t *) sai_get_scheduler_group_attribute_fn;
typedef sai_status_t (*)(sai_object_id_t) sai_remove_scheduler_group_fn;
typedef _sai_scheduler_group_api_t sai_scheduler_group_api_t;
typedef sai_status_t (*)(sai_object_id_t, const sai_attribute_t *) sai_set_scheduler_group_attribute_fn;

File ../plugins/sai/SAI/xpSai/sai/inc/saistp.h:
_sai_stp_api_t;
_sai_stp_attr_t;
_sai_stp_port_attr_t;
_sai_stp_port_state_t;
struct _sai_stp_api_t;
enum _sai_stp_port_attr_t;
enum _sai_stp_port_state_t;
typedef sai_status_t (*)(sai_object_id_t *, sai_object_id_t, uint32_t, const sai_attribute_t *) sai_create_stp_fn;
typedef sai_status_t (*)(sai_object_id_t *, sai_object_id_t, uint32_t, const sai_attribute_t *) sai_create_stp_port_fn;
typedef sai_status_t (*)(sai_object_id_t, uint32_t, sai_attribute_t *) sai_get_stp_attribute_fn;
typedef sai_status_t (*)(sai_object_id_t, uint32_t, sai_attribute_t *) sai_get_stp_port_attribute_fn;
typedef sai_status_t (*)(sai_object_id_t) sai_remove_stp_fn;
typedef sai_status_t (*)(sai_object_id_t) sai_remove_stp_port_fn;
typedef sai_status_t (*)(sai_object_id_t, const sai_attribute_t *) sai_set_stp_attribute_fn;
typedef sai_status_t (*)(sai_object_id_t, const sai_attribute_t *) sai_set_stp_port_attribute_fn;
typedef struct _sai_stp_api_t sai_stp_api_t;
typedef enum _sai_stp_port_state_t sai_stp_port_state_t;

File ../plugins/sai/SAI/xpSai/sai/inc/saiswitch.h:
typedef enum _sai_switch_attr_t
{
    SAI_SWITCH_ATTR_START,
    SAI_SWITCH_ATTR_NUMBER_OF_ACTIVE_PORTS = SAI_SWITCH_ATTR_START,
    SAI_SWITCH_ATTR_PORT_NUMBER = SAI_SWITCH_ATTR_NUMBER_OF_ACTIVE_PORTS,
    SAI_SWITCH_ATTR_MAX_NUMBER_OF_SUPPORTED_PORTS,
    SAI_SWITCH_ATTR_PORT_MAX_MTU,
    SAI_SWITCH_ATTR_CPU_PORT,
    SAI_SWITCH_ATTR_MAX_VIRTUAL_ROUTERS,
    SAI_SWITCH_ATTR_FDB_TABLE_SIZE,
    SAI_SWITCH_ATTR_L3_NEIGHBOR_TABLE_SIZE,
    SAI_SWITCH_ATTR_L3_ROUTE_TABLE_SIZE,
    SAI_SWITCH_ATTR_LAG_MEMBERS,
    SAI_SWITCH_ATTR_NUMBER_OF_LAGS,
    SAI_SWITCH_ATTR_ECMP_MEMBERS,
    SAI_SWITCH_ATTR_NUMBER_OF_ECMP_GROUPS,
    SAI_SWITCH_ATTR_NUMBER_OF_UNICAST_QUEUES,
    SAI_SWITCH_ATTR_NUMBER_OF_MULTICAST_QUEUES,
    SAI_SWITCH_ATTR_NUMBER_OF_QUEUES,
    SAI_SWITCH_ATTR_NUMBER_OF_CPU_QUEUES,
    SAI_SWITCH_ATTR_ON_LINK_ROUTE_SUPPORTED,
    SAI_SWITCH_ATTR_OPER_STATUS,
    SAI_SWITCH_ATTR_MAX_NUMBER_OF_TEMP_SENSORS,
    SAI_SWITCH_ATTR_TEMP_LIST,
    SAI_SWITCH_ATTR_MAX_TEMP,
    SAI_SWITCH_ATTR_AVERAGE_TEMP,
    SAI_SWITCH_ATTR_ACL_TABLE_MINIMUM_PRIORITY,
    SAI_SWITCH_ATTR_ACL_TABLE_MAXIMUM_PRIORITY,
    SAI_SWITCH_ATTR_ACL_ENTRY_MINIMUM_PRIORITY,
    SAI_SWITCH_ATTR_ACL_ENTRY_MAXIMUM_PRIORITY,
    SAI_SWITCH_ATTR_ACL_TABLE_GROUP_MINIMUM_PRIORITY,
    SAI_SWITCH_ATTR_ACL_TABLE_GROUP_MAXIMUM_PRIORITY,
    SAI_SWITCH_ATTR_FDB_DST_USER_META_DATA_RANGE,
    SAI_SWITCH_ATTR_ROUTE_DST_USER_META_DATA_RANGE,
    SAI_SWITCH_ATTR_NEIGHBOR_DST_USER_META_DATA_RANGE,
    SAI_SWITCH_ATTR_PORT_USER_META_DATA_RANGE,
    SAI_SWITCH_ATTR_VLAN_USER_META_DATA_RANGE,
    SAI_SWITCH_ATTR_ACL_USER_META_DATA_RANGE,
    SAI_SWITCH_ATTR_ACL_USER_TRAP_ID_RANGE,
    SAI_SWITCH_ATTR_DEFAULT_VLAN_ID,
    SAI_SWITCH_ATTR_DEFAULT_STP_INST_ID,
    SAI_SWITCH_ATTR_MAX_STP_INSTANCE,
    SAI_SWITCH_ATTR_DEFAULT_VIRTUAL_ROUTER_ID,
    SAI_SWITCH_ATTR_DEFAULT_OVERRIDE_VIRTUAL_ROUTER_ID,
    SAI_SWITCH_ATTR_DEFAULT_1Q_BRIDGE_ID,
    SAI_SWITCH_ATTR_INGRESS_ACL,
    SAI_SWITCH_ATTR_EGRESS_ACL,
    SAI_SWITCH_ATTR_QOS_MAX_NUMBER_OF_TRAFFIC_CLASSES,
    SAI_SWITCH_ATTR_QOS_MAX_NUMBER_OF_SCHEDULER_GROUP_HIERARCHY_LEVELS,
    SAI_SWITCH_ATTR_QOS_MAX_NUMBER_OF_SCHEDULER_GROUPS_PER_HIERARCHY_LEVEL,
    SAI_SWITCH_ATTR_QOS_MAX_NUMBER_OF_CHILDS_PER_SCHEDULER_GROUP,
    SAI_SWITCH_ATTR_TOTAL_BUFFER_SIZE,
    SAI_SWITCH_ATTR_INGRESS_BUFFER_POOL_NUM,
    SAI_SWITCH_ATTR_EGRESS_BUFFER_POOL_NUM,
    SAI_SWITCH_ATTR_AVAILABLE_IPV4_ROUTE_ENTRY,
    SAI_SWITCH_ATTR_AVAILABLE_IPV6_ROUTE_ENTRY,
    SAI_SWITCH_ATTR_AVAILABLE_IPV4_NEXTHOP_ENTRY,
    SAI_SWITCH_ATTR_AVAILABLE_IPV6_NEXTHOP_ENTRY,
    SAI_SWITCH_ATTR_AVAILABLE_IPV4_NEIGHBOR_ENTRY,
    SAI_SWITCH_ATTR_AVAILABLE_IPV6_NEIGHBOR_ENTRY,
    SAI_SWITCH_ATTR_AVAILABLE_NEXT_HOP_GROUP_ENTRY,
    SAI_SWITCH_ATTR_AVAILABLE_NEXT_HOP_GROUP_MEMBER_ENTRY,
    SAI_SWITCH_ATTR_AVAILABLE_FDB_ENTRY,
    SAI_SWITCH_ATTR_AVAILABLE_L2MC_ENTRY,
    SAI_SWITCH_ATTR_AVAILABLE_IPMC_ENTRY,
    SAI_SWITCH_ATTR_AVAILABLE_SNAT_ENTRY,
    SAI_SWITCH_ATTR_AVAILABLE_DNAT_ENTRY,
    SAI_SWITCH_ATTR_AVAILABLE_DOUBLE_NAT_ENTRY,
    SAI_SWITCH_ATTR_AVAILABLE_ACL_TABLE,
    SAI_SWITCH_ATTR_AVAILABLE_ACL_TABLE_GROUP,
    SAI_SWITCH_ATTR_DEFAULT_TRAP_GROUP,
    SAI_SWITCH_ATTR_ECMP_HASH,
    SAI_SWITCH_ATTR_LAG_HASH,
    SAI_SWITCH_ATTR_RESTART_WARM,
    SAI_SWITCH_ATTR_WARM_RECOVER,
    SAI_SWITCH_ATTR_RESTART_TYPE,
    SAI_SWITCH_ATTR_MIN_PLANNED_RESTART_INTERVAL,
    SAI_SWITCH_ATTR_NV_STORAGE_SIZE,
    SAI_SWITCH_ATTR_MAX_ACL_ACTION_COUNT,
    SAI_SWITCH_ATTR_MAX_ACL_RANGE_COUNT,
    SAI_SWITCH_ATTR_ACL_CAPABILITY,
    SAI_SWITCH_ATTR_MCAST_SNOOPING_CAPABILITY,
    SAI_SWITCH_ATTR_SWITCHING_MODE,
    SAI_SWITCH_ATTR_BCAST_CPU_FLOOD_ENABLE,
    SAI_SWITCH_ATTR_MCAST_CPU_FLOOD_ENABLE,
    SAI_SWITCH_ATTR_SRC_MAC_ADDRESS,
    SAI_SWITCH_ATTR_MAX_LEARNED_ADDRESSES,
    SAI_SWITCH_ATTR_FDB_AGING_TIME,
    SAI_SWITCH_ATTR_FDB_UNICAST_MISS_PACKET_ACTION,
    SAI_SWITCH_ATTR_FDB_BROADCAST_MISS_PACKET_ACTION,
    SAI_SWITCH_ATTR_FDB_MULTICAST_MISS_PACKET_ACTION,
    SAI_SWITCH_ATTR_ECMP_DEFAULT_HASH_ALGORITHM,
    SAI_SWITCH_ATTR_ECMP_DEFAULT_HASH_SEED,
    SAI_SWITCH_ATTR_ECMP_DEFAULT_HASH_OFFSET,
    SAI_SWITCH_ATTR_ECMP_DEFAULT_SYMMETRIC_HASH,
    SAI_SWITCH_ATTR_ECMP_HASH_IPV4,
    SAI_SWITCH_ATTR_ECMP_HASH_IPV4_IN_IPV4,
    SAI_SWITCH_ATTR_ECMP_HASH_IPV6,
    SAI_SWITCH_ATTR_LAG_DEFAULT_HASH_ALGORITHM,
    SAI_SWITCH_ATTR_LAG_DEFAULT_HASH_SEED,
    SAI_SWITCH_ATTR_LAG_DEFAULT_HASH_OFFSET,
    SAI_SWITCH_ATTR_LAG_DEFAULT_SYMMETRIC_HASH,
    SAI_SWITCH_ATTR_LAG_HASH_IPV4,
    SAI_SWITCH_ATTR_LAG_HASH_IPV4_IN_IPV4,
    SAI_SWITCH_ATTR_LAG_HASH_IPV6,
    SAI_SWITCH_ATTR_COUNTER_REFRESH_INTERVAL,
    SAI_SWITCH_ATTR_QOS_DEFAULT_TC,
    SAI_SWITCH_ATTR_QOS_DOT1P_TO_TC_MAP,
    SAI_SWITCH_ATTR_QOS_DOT1P_TO_COLOR_MAP,
    SAI_SWITCH_ATTR_QOS_DSCP_TO_TC_MAP,
    SAI_SWITCH_ATTR_QOS_DSCP_TO_COLOR_MAP,
    SAI_SWITCH_ATTR_QOS_TC_TO_QUEUE_MAP,
    SAI_SWITCH_ATTR_QOS_TC_AND_COLOR_TO_DOT1P_MAP,
    SAI_SWITCH_ATTR_QOS_TC_AND_COLOR_TO_DSCP_MAP,
    SAI_SWITCH_ATTR_SWITCH_SHELL_ENABLE,
    SAI_SWITCH_ATTR_SWITCH_PROFILE_ID,
    SAI_SWITCH_ATTR_SWITCH_HARDWARE_INFO,
    SAI_SWITCH_ATTR_FIRMWARE_PATH_NAME,
    SAI_SWITCH_ATTR_INIT_SWITCH,
    SAI_SWITCH_ATTR_SWITCH_STATE_CHANGE_NOTIFY,
    SAI_SWITCH_ATTR_SWITCH_SHUTDOWN_REQUEST_NOTIFY,
    SAI_SWITCH_ATTR_SHUTDOWN_REQUEST_NOTIFY = SAI_SWITCH_ATTR_SWITCH_SHUTDOWN_REQUEST_NOTIFY,
    SAI_SWITCH_ATTR_FDB_EVENT_NOTIFY,
    SAI_SWITCH_ATTR_PORT_STATE_CHANGE_NOTIFY,
    SAI_SWITCH_ATTR_PACKET_EVENT_NOTIFY,
    SAI_SWITCH_ATTR_FAST_API_ENABLE,
    SAI_SWITCH_ATTR_MIRROR_TC,
    SAI_SWITCH_ATTR_ACL_STAGE_INGRESS,
    SAI_SWITCH_ATTR_ACL_STAGE_EGRESS,
    SAI_SWITCH_ATTR_SEGMENTROUTE_MAX_SID_DEPTH,
    SAI_SWITCH_ATTR_SEGMENTROUTE_TLV_TYPE,
    SAI_SWITCH_ATTR_QOS_NUM_LOSSLESS_QUEUES,
    SAI_SWITCH_ATTR_QUEUE_PFC_DEADLOCK_NOTIFY,
    SAI_SWITCH_ATTR_PFC_DLR_PACKET_ACTION,
    SAI_SWITCH_ATTR_PFC_TC_DLD_INTERVAL_RANGE,
    SAI_SWITCH_ATTR_PFC_TC_DLD_INTERVAL,
    SAI_SWITCH_ATTR_PFC_TC_DLR_INTERVAL_RANGE,
    SAI_SWITCH_ATTR_PFC_TC_DLR_INTERVAL,
    SAI_SWITCH_ATTR_SUPPORTED_PROTECTED_OBJECT_TYPE,
    SAI_SWITCH_ATTR_TPID_OUTER_VLAN,
    SAI_SWITCH_ATTR_TPID_INNER_VLAN,
    SAI_SWITCH_ATTR_CRC_CHECK_ENABLE,
    SAI_SWITCH_ATTR_CRC_RECALCULATION_ENABLE,
    SAI_SWITCH_ATTR_BFD_SESSION_STATE_CHANGE_NOTIFY,
    SAI_SWITCH_ATTR_NUMBER_OF_BFD_SESSION,
    SAI_SWITCH_ATTR_MAX_BFD_SESSION,
    SAI_SWITCH_ATTR_SUPPORTED_IPV4_BFD_SESSION_OFFLOAD_TYPE,
    SAI_SWITCH_ATTR_SUPPORTED_IPV6_BFD_SESSION_OFFLOAD_TYPE,
    SAI_SWITCH_ATTR_MIN_BFD_RX,
    SAI_SWITCH_ATTR_MIN_BFD_TX,
    SAI_SWITCH_ATTR_ECN_ECT_THRESHOLD_ENABLE,
    SAI_SWITCH_ATTR_VXLAN_DEFAULT_ROUTER_MAC,
    SAI_SWITCH_ATTR_VXLAN_DEFAULT_PORT,
    SAI_SWITCH_ATTR_MAX_MIRROR_SESSION,
    SAI_SWITCH_ATTR_MAX_SAMPLED_MIRROR_SESSION,
    SAI_SWITCH_ATTR_SUPPORTED_EXTENDED_STATS_MODE,
    SAI_SWITCH_ATTR_UNINIT_DATA_PLANE_ON_REMOVAL,
    SAI_SWITCH_ATTR_TAM_OBJECT_ID,
    SAI_SWITCH_ATTR_TAM_EVENT_NOTIFY,
    SAI_SWITCH_ATTR_SUPPORTED_OBJECT_TYPE_LIST,
    SAI_SWITCH_ATTR_PRE_SHUTDOWN,
    SAI_SWITCH_ATTR_NAT_ZONE_COUNTER_OBJECT_ID,
    SAI_SWITCH_ATTR_NAT_ENABLE,
    SAI_SWITCH_ATTR_HARDWARE_ACCESS_BUS,
    SAI_SWITCH_ATTR_PLATFROM_CONTEXT,
    SAI_SWITCH_ATTR_REGISTER_READ,
    SAI_SWITCH_ATTR_REGISTER_WRITE,
    SAI_SWITCH_ATTR_FIRMWARE_DOWNLOAD_BROADCAST,
    SAI_SWITCH_ATTR_FIRMWARE_LOAD_METHOD,
    SAI_SWITCH_ATTR_FIRMWARE_LOAD_TYPE,
    SAI_SWITCH_ATTR_FIRMWARE_DOWNLOAD_EXECUTE,
    SAI_SWITCH_ATTR_FIRMWARE_BROADCAST_STOP,
    SAI_SWITCH_ATTR_FIRMWARE_VERIFY_AND_INIT_SWITCH,
    SAI_SWITCH_ATTR_FIRMWARE_STATUS,
    SAI_SWITCH_ATTR_FIRMWARE_MAJOR_VERSION,
    SAI_SWITCH_ATTR_FIRMWARE_MINOR_VERSION,
    SAI_SWITCH_ATTR_PORT_CONNECTOR_LIST,
    SAI_SWITCH_ATTR_PROPOGATE_PORT_STATE_FROM_LINE_TO_SYSTEM_PORT_SUPPORT,
    SAI_SWITCH_ATTR_TYPE,
    SAI_SWITCH_ATTR_MACSEC_OBJECT_LIST,
    SAI_SWITCH_ATTR_QOS_MPLS_EXP_TO_TC_MAP,
    SAI_SWITCH_ATTR_QOS_MPLS_EXP_TO_COLOR_MAP,
    SAI_SWITCH_ATTR_QOS_TC_AND_COLOR_TO_MPLS_EXP_MAP,
    SAI_SWITCH_ATTR_SWITCH_ID,
    SAI_SWITCH_ATTR_MAX_SYSTEM_CORES,
    SAI_SWITCH_ATTR_SYSTEM_PORT_CONFIG_LIST,
    SAI_SWITCH_ATTR_NUMBER_OF_SYSTEM_PORTS,
    SAI_SWITCH_ATTR_SYSTEM_PORT_LIST,
    SAI_SWITCH_ATTR_NUMBER_OF_FABRIC_PORTS,
    SAI_SWITCH_ATTR_FABRIC_PORT_LIST,
    SAI_SWITCH_ATTR_PACKET_DMA_MEMORY_POOL_SIZE,
    SAI_SWITCH_ATTR_FAILOVER_CONFIG_MODE,
    SAI_SWITCH_ATTR_SUPPORTED_FAILOVER_MODE,
    SAI_SWITCH_ATTR_TUNNEL_OBJECTS_LIST,
    SAI_SWITCH_ATTR_PACKET_AVAILABLE_DMA_MEMORY_POOL_SIZE,
    SAI_SWITCH_ATTR_PRE_INGRESS_ACL,
    SAI_SWITCH_ATTR_AVAILABLE_SNAPT_ENTRY,
    SAI_SWITCH_ATTR_AVAILABLE_DNAPT_ENTRY,
    SAI_SWITCH_ATTR_AVAILABLE_DOUBLE_NAPT_ENTRY,
    SAI_SWITCH_ATTR_END,
    SAI_SWITCH_ATTR_CUSTOM_RANGE_START = 0x10000000,
    SAI_SWITCH_ATTR_CUSTOM_RANGE_END
} sai_switch_attr_t;
typedef enum _sai_switch_tunnel_attr_t
{
    SAI_SWITCH_TUNNEL_ATTR_START,
    SAI_SWITCH_TUNNEL_ATTR_TUNNEL_TYPE = SAI_SWITCH_TUNNEL_ATTR_START,
    SAI_SWITCH_TUNNEL_ATTR_LOOPBACK_PACKET_ACTION,
    SAI_SWITCH_TUNNEL_ATTR_TUNNEL_ENCAP_ECN_MODE,
    SAI_SWITCH_TUNNEL_ATTR_ENCAP_MAPPERS,
    SAI_SWITCH_TUNNEL_ATTR_TUNNEL_DECAP_ECN_MODE,
    SAI_SWITCH_TUNNEL_ATTR_DECAP_MAPPERS,
    SAI_SWITCH_TUNNEL_ATTR_TUNNEL_VXLAN_UDP_SPORT_MODE,
    SAI_SWITCH_TUNNEL_ATTR_VXLAN_UDP_SPORT,
    SAI_SWITCH_TUNNEL_ATTR_END,
    SAI_SWITCH_TUNNEL_ATTR_CUSTOM_RANGE_START = 0x10000000,
    SAI_SWITCH_TUNNEL_ATTR_CUSTOM_RANGE_END
} sai_switch_tunnel_attr_t;
typedef enum _sai_switch_type_t
{
    SAI_SWITCH_TYPE_NPU,
    SAI_SWITCH_TYPE_PHY,
    SAI_SWITCH_TYPE_VOQ,
    SAI_SWITCH_TYPE_FABRIC,
} sai_switch_type_t;
typedef enum _sai_packet_action_t
{
    SAI_PACKET_ACTION_DROP,
    SAI_PACKET_ACTION_FORWARD,
    SAI_PACKET_ACTION_COPY,
    SAI_PACKET_ACTION_COPY_CANCEL,
    SAI_PACKET_ACTION_TRAP,
    SAI_PACKET_ACTION_LOG,
    SAI_PACKET_ACTION_DENY,
    SAI_PACKET_ACTION_TRANSIT
} sai_packet_action_t;
typedef enum _sai_switch_firmware_load_method_t
{
    SAI_SWITCH_FIRMWARE_LOAD_METHOD_NONE,
    SAI_SWITCH_FIRMWARE_LOAD_METHOD_INTERNAL,
    SAI_SWITCH_FIRMWARE_LOAD_METHOD_EEPROM,
} sai_switch_firmware_load_method_t;
typedef enum _sai_tunnel_vxlan_udp_sport_mode_t
{
    SAI_TUNNEL_VXLAN_UDP_SPORT_MODE_USER_DEFINED,
    SAI_TUNNEL_VXLAN_UDP_SPORT_MODE_EPHEMERAL,
} sai_tunnel_vxlan_udp_sport_mode_t;

_sai_hash_algorithm_t;
_sai_packet_action_t;
_sai_packet_vlan_t;
_sai_switch_api_t;
_sai_switch_attr_t;
_sai_switch_failover_config_mode_t;
_sai_switch_firmware_load_method_t;
_sai_switch_firmware_load_type_t;
_sai_switch_hardware_access_bus_t;
_sai_switch_mcast_snooping_capability_t;
_sai_switch_oper_status_t;
_sai_switch_restart_type_t;
_sai_switch_switching_mode_t;
_sai_switch_type_t;
enum _sai_packet_action_t;
struct _sai_switch_api_t;
enum _sai_switch_attr_t;
typedef sai_status_t (*)(sai_object_id_t, uint32_t, const sai_stat_id_t *) sai_clear_switch_stats_fn;
typedef sai_status_t (*)(sai_object_id_t *, uint32_t, const sai_attribute_t *) sai_create_switch_fn;
typedef sai_status_t (*)(sai_object_id_t, uint32_t, sai_attribute_t *) sai_get_switch_attribute_fn;
typedef sai_status_t (*)(sai_object_id_t, uint32_t, const sai_stat_id_t *, sai_stats_mode_t, uint64_t *) sai_get_switch_stats_ext_fn;
typedef sai_status_t (*)(sai_object_id_t, uint32_t, const sai_stat_id_t *, uint64_t *) sai_get_switch_stats_fn;
typedef enum _sai_packet_action_t sai_packet_action_t;
typedef sai_status_t (*)(sai_object_id_t) sai_remove_switch_fn;
typedef sai_status_t (*)(sai_object_id_t, const sai_attribute_t *) sai_set_switch_attribute_fn;
typedef struct _sai_switch_api_t sai_switch_api_t;
typedef sai_status_t (*)(sai_object_id_t, uint32_t, uint32_t, uint32_t, uint32_t *) sai_switch_mdio_read_fn;
typedef sai_status_t (*)(sai_object_id_t, uint32_t, uint32_t, uint32_t, const uint32_t *) sai_switch_mdio_write_fn;
typedef _sai_switch_oper_status_t sai_switch_oper_status_t;
typedef _sai_switch_restart_type_t sai_switch_restart_type_t;
typedef void (*)(sai_object_id_t) sai_switch_shutdown_request_notification_fn;
typedef void (*)(sai_object_id_t, sai_switch_oper_status_t) sai_switch_state_change_notification_fn;

File ../plugins/sai/SAI/xpSai/sai/inc/saitunnel.h:
typedef enum _sai_tunnel_decap_ecn_mode_t
{
    SAI_TUNNEL_DECAP_ECN_MODE_STANDARD,
    SAI_TUNNEL_DECAP_ECN_MODE_COPY_FROM_OUTER,
    SAI_TUNNEL_DECAP_ECN_MODE_USER_DEFINED
} sai_tunnel_decap_ecn_mode_t;
typedef enum _sai_tunnel_type_t
{
    SAI_TUNNEL_TYPE_IPINIP,
    SAI_TUNNEL_TYPE_IPINIP_GRE,
    SAI_TUNNEL_TYPE_VXLAN,
    SAI_TUNNEL_TYPE_MPLS,
} sai_tunnel_type_t;
typedef enum _sai_tunnel_encap_ecn_mode_t
{
    SAI_TUNNEL_ENCAP_ECN_MODE_STANDARD,
    SAI_TUNNEL_ENCAP_ECN_MODE_USER_DEFINED
} sai_tunnel_encap_ecn_mode_t;
typedef enum _sai_tunnel_term_table_entry_attr_t
{
    SAI_TUNNEL_TERM_TABLE_ENTRY_ATTR_START,
    SAI_TUNNEL_TERM_TABLE_ENTRY_ATTR_VR_ID = SAI_TUNNEL_TERM_TABLE_ENTRY_ATTR_START,
    SAI_TUNNEL_TERM_TABLE_ENTRY_ATTR_TYPE,
    SAI_TUNNEL_TERM_TABLE_ENTRY_ATTR_DST_IP,
    SAI_TUNNEL_TERM_TABLE_ENTRY_ATTR_DST_IP_MASK,
    SAI_TUNNEL_TERM_TABLE_ENTRY_ATTR_SRC_IP,
    SAI_TUNNEL_TERM_TABLE_ENTRY_ATTR_SRC_IP_MASK,
    SAI_TUNNEL_TERM_TABLE_ENTRY_ATTR_TUNNEL_TYPE,
    SAI_TUNNEL_TERM_TABLE_ENTRY_ATTR_ACTION_TUNNEL_ID,
    SAI_TUNNEL_TERM_TABLE_ENTRY_ATTR_IP_ADDR_FAMILY,
    SAI_TUNNEL_TERM_TABLE_ENTRY_ATTR_END,
    SAI_TUNNEL_TERM_TABLE_ENTRY_ATTR_CUSTOM_RANGE_START = 0x10000000,
    SAI_TUNNEL_TERM_TABLE_ENTRY_ATTR_CUSTOM_RANGE_END
} sai_tunnel_term_table_entry_attr_t;
typedef enum _sai_tunnel_map_entry_attr_t
{
    SAI_TUNNEL_MAP_ENTRY_ATTR_START = 0x00000000,
    SAI_TUNNEL_MAP_ENTRY_ATTR_TUNNEL_MAP_TYPE = SAI_TUNNEL_MAP_ENTRY_ATTR_START,
    SAI_TUNNEL_MAP_ENTRY_ATTR_TUNNEL_MAP = 0x00000001,
    SAI_TUNNEL_MAP_ENTRY_ATTR_OECN_KEY = 0x00000002,
    SAI_TUNNEL_MAP_ENTRY_ATTR_OECN_VALUE = 0x00000003,
    SAI_TUNNEL_MAP_ENTRY_ATTR_UECN_KEY = 0x00000004,
    SAI_TUNNEL_MAP_ENTRY_ATTR_UECN_VALUE = 0x00000005,
    SAI_TUNNEL_MAP_ENTRY_ATTR_VLAN_ID_KEY = 0x00000006,
    SAI_TUNNEL_MAP_ENTRY_ATTR_VLAN_ID_VALUE = 0x00000007,
    SAI_TUNNEL_MAP_ENTRY_ATTR_VNI_ID_KEY = 0x00000008,
    SAI_TUNNEL_MAP_ENTRY_ATTR_VNI_ID_VALUE = 0x00000009,
    SAI_TUNNEL_MAP_ENTRY_ATTR_BRIDGE_ID_KEY = 0x0000000a,
    SAI_TUNNEL_MAP_ENTRY_ATTR_BRIDGE_ID_VALUE = 0x0000000b,
    SAI_TUNNEL_MAP_ENTRY_ATTR_VIRTUAL_ROUTER_ID_KEY = 0x0000000c,
    SAI_TUNNEL_MAP_ENTRY_ATTR_VIRTUAL_ROUTER_ID_VALUE = 0x0000000d,
    SAI_TUNNEL_MAP_ENTRY_ATTR_END,
    SAI_TUNNEL_MAP_ENTRY_ATTR_CUSTOM_RANGE_START = 0x10000000,
    SAI_TUNNEL_MAP_ENTRY_ATTR_CUSTOM_RANGE_END
} sai_tunnel_map_entry_attr_t;
typedef enum _sai_tunnel_map_type_t
{
    SAI_TUNNEL_MAP_TYPE_OECN_TO_UECN = 0x00000000,
    SAI_TUNNEL_MAP_TYPE_UECN_OECN_TO_OECN = 0x00000001,
    SAI_TUNNEL_MAP_TYPE_VNI_TO_VLAN_ID = 0x00000002,
    SAI_TUNNEL_MAP_TYPE_VLAN_ID_TO_VNI = 0x00000003,
    SAI_TUNNEL_MAP_TYPE_VNI_TO_BRIDGE_IF = 0x00000004,
    SAI_TUNNEL_MAP_TYPE_BRIDGE_IF_TO_VNI = 0x00000005,
    SAI_TUNNEL_MAP_TYPE_VNI_TO_VIRTUAL_ROUTER_ID = 0x00000006,
    SAI_TUNNEL_MAP_TYPE_VIRTUAL_ROUTER_ID_TO_VNI = 0x00000007,
    SAI_TUNNEL_MAP_TYPE_CUSTOM_RANGE_BASE = 0x10000000
} sai_tunnel_map_type_t;
typedef enum _sai_tunnel_peer_mode_t
{
    SAI_TUNNEL_PEER_MODE_P2P,
    SAI_TUNNEL_PEER_MODE_P2MP,
} sai_tunnel_peer_mode_t;
typedef enum _sai_tunnel_attr_t
{
    SAI_TUNNEL_ATTR_START,
    SAI_TUNNEL_ATTR_TYPE = SAI_TUNNEL_ATTR_START,
    SAI_TUNNEL_ATTR_UNDERLAY_INTERFACE,
    SAI_TUNNEL_ATTR_OVERLAY_INTERFACE,
    SAI_TUNNEL_ATTR_PEER_MODE,
    SAI_TUNNEL_ATTR_ENCAP_SRC_IP,
    SAI_TUNNEL_ATTR_ENCAP_DST_IP,
    SAI_TUNNEL_ATTR_ENCAP_TTL_MODE,
    SAI_TUNNEL_ATTR_ENCAP_TTL_VAL,
    SAI_TUNNEL_ATTR_ENCAP_DSCP_MODE,
    SAI_TUNNEL_ATTR_ENCAP_DSCP_VAL,
    SAI_TUNNEL_ATTR_ENCAP_GRE_KEY_VALID,
    SAI_TUNNEL_ATTR_ENCAP_GRE_KEY,
    SAI_TUNNEL_ATTR_ENCAP_ECN_MODE,
    SAI_TUNNEL_ATTR_ENCAP_MAPPERS,
    SAI_TUNNEL_ATTR_DECAP_ECN_MODE,
    SAI_TUNNEL_ATTR_DECAP_MAPPERS,
    SAI_TUNNEL_ATTR_DECAP_TTL_MODE,
    SAI_TUNNEL_ATTR_DECAP_DSCP_MODE,
    SAI_TUNNEL_ATTR_TERM_TABLE_ENTRY_LIST,
    SAI_TUNNEL_ATTR_LOOPBACK_PACKET_ACTION,
    SAI_TUNNEL_ATTR_VXLAN_UDP_SPORT_MODE,
    SAI_TUNNEL_ATTR_VXLAN_UDP_SPORT,
    SAI_TUNNEL_ATTR_END,
    SAI_TUNNEL_ATTR_CUSTOM_RANGE_START = 0x10000000,
    SAI_TUNNEL_ATTR_CUSTOM_RANGE_END
} sai_tunnel_attr_t;
typedef enum _sai_tunnel_term_table_entry_type_t
{
    SAI_TUNNEL_TERM_TABLE_ENTRY_TYPE_P2P,
    SAI_TUNNEL_TERM_TABLE_ENTRY_TYPE_P2MP,
    SAI_TUNNEL_TERM_TABLE_ENTRY_TYPE_MP2P,
    SAI_TUNNEL_TERM_TABLE_ENTRY_TYPE_MP2MP,
} sai_tunnel_term_table_entry_type_t;
typedef enum _sai_tunnel_ttl_mode_t
{
    SAI_TUNNEL_TTL_MODE_UNIFORM_MODEL,
    SAI_TUNNEL_TTL_MODE_PIPE_MODEL
} sai_tunnel_ttl_mode_t;
typedef enum _sai_tunnel_map_attr_t
{
    SAI_TUNNEL_MAP_ATTR_START = 0x00000000,
    SAI_TUNNEL_MAP_ATTR_TYPE = SAI_TUNNEL_MAP_ATTR_START,
    SAI_TUNNEL_MAP_ATTR_ENTRY_LIST,
    SAI_TUNNEL_MAP_ATTR_END,
    SAI_TUNNEL_MAP_ATTR_CUSTOM_RANGE_START = 0x10000000,
    SAI_TUNNEL_MAP_ATTR_CUSTOM_RANGE_END
} sai_tunnel_map_attr_t;
typedef enum _sai_tunnel_dscp_mode_t
{
    SAI_TUNNEL_DSCP_MODE_UNIFORM_MODEL,
    SAI_TUNNEL_DSCP_MODE_PIPE_MODEL
} sai_tunnel_dscp_mode_t;

_sai_tunnel_api_t;
_sai_tunnel_attr_t;
_sai_tunnel_decap_ecn_mode_t;
_sai_tunnel_dscp_mode_t;
_sai_tunnel_encap_ecn_mode_t;
_sai_tunnel_map_attr_t;
_sai_tunnel_map_entry_attr_t;
_sai_tunnel_map_type_t;
_sai_tunnel_peer_mode_t;
_sai_tunnel_term_table_entry_attr_t;
_sai_tunnel_term_table_entry_type_t;
_sai_tunnel_ttl_mode_t;
_sai_tunnel_type_t;
typedef sai_status_t (*)(sai_object_id_t, uint32_t, const sai_stat_id_t *) sai_clear_tunnel_stats_fn;
typedef sai_status_t (*)(sai_object_id_t *, sai_object_id_t, uint32_t, const sai_attribute_t *) sai_create_tunnel_fn;
typedef sai_status_t (*)(sai_object_id_t *, sai_object_id_t, uint32_t, const sai_attribute_t *) sai_create_tunnel_map_entry_fn;
typedef sai_status_t (*)(sai_object_id_t *, sai_object_id_t, uint32_t, const sai_attribute_t *) sai_create_tunnel_map_fn;
typedef sai_status_t (*)(sai_object_id_t *, sai_object_id_t, uint32_t, 
    const sai_attribute_t *) sai_create_tunnel_term_table_entry_fn;
typedef sai_status_t (*)(sai_object_id_t, uint32_t, sai_attribute_t *) sai_get_tunnel_attribute_fn;
typedef sai_status_t (*)(sai_object_id_t, uint32_t, sai_attribute_t *) sai_get_tunnel_map_attribute_fn;
typedef sai_status_t (*)(sai_object_id_t, uint32_t, sai_attribute_t *) sai_get_tunnel_map_entry_attribute_fn;
typedef sai_status_t (*)(sai_object_id_t, uint32_t, const sai_stat_id_t *, sai_stats_mode_t, uint64_t *) sai_get_tunnel_stats_ext_fn;
typedef sai_status_t (*)(sai_object_id_t, uint32_t, const sai_stat_id_t *, uint64_t *) sai_get_tunnel_stats_fn;
typedef sai_status_t (*)(sai_object_id_t, uint32_t, sai_attribute_t *) sai_get_tunnel_term_table_entry_attribute_fn;
typedef sai_status_t (*)(sai_object_id_t) sai_remove_tunnel_fn;
typedef sai_status_t (*)(sai_object_id_t) sai_remove_tunnel_map_entry_fn;
typedef sai_status_t (*)(sai_object_id_t) sai_remove_tunnel_map_fn;
typedef sai_status_t (*)(sai_object_id_t) sai_remove_tunnel_term_table_entry_fn;
typedef sai_status_t (*)(sai_object_id_t, const sai_attribute_t *) sai_set_tunnel_attribute_fn;
typedef sai_status_t (*)(sai_object_id_t, const sai_attribute_t *) sai_set_tunnel_map_attribute_fn;
typedef sai_status_t (*)(sai_object_id_t, const sai_attribute_t *) sai_set_tunnel_map_entry_attribute_fn;
typedef sai_status_t (*)(sai_object_id_t, const sai_attribute_t *) sai_set_tunnel_term_table_entry_attribute_fn;
typedef _sai_tunnel_api_t sai_tunnel_api_t;
typedef _sai_tunnel_map_type_t sai_tunnel_map_type_t;

File ../plugins/sai/SAI/xpSai/sai/inc/saitypes.h:
typedef enum _sai_common_api_t
{
    SAI_COMMON_API_CREATE      = 0,
    SAI_COMMON_API_REMOVE      = 1,
    SAI_COMMON_API_SET         = 2,
    SAI_COMMON_API_GET         = 3,
    SAI_COMMON_API_BULK_CREATE = 4,
    SAI_COMMON_API_BULK_REMOVE = 5,
    SAI_COMMON_API_BULK_SET    = 6,
    SAI_COMMON_API_BULK_GET    = 7,
    SAI_COMMON_API_MAX         = 8,
} sai_common_api_t;
typedef struct _sai_u8_list_t
{
    uint32_t count;
    uint8_t *list;
} sai_u8_list_t;
typedef struct _sai_u16_list_t
{
    uint32_t count;
    uint16_t *list;
} sai_u16_list_t;

typedef struct _sai_s16_list_t
{
    uint32_t count;
    int16_t *list;
} sai_s16_list_t;

typedef struct _sai_u32_list_t
{
    uint32_t count;
    uint32_t *list;
} sai_u32_list_t;

typedef struct _sai_s32_list_t
{
    uint32_t count;
    int32_t *list;
} sai_s32_list_t;
typedef struct _sai_u32_range_t
{
    uint32_t min;
    uint32_t max;
} sai_u32_range_t;
typedef struct _sai_s32_range_t
{
    int32_t min;
    int32_t max;
} sai_s32_range_t;
typedef struct _sai_vlan_list_t
{
    uint32_t count;
    sai_vlan_id_t *list;

} sai_vlan_list_t;
typedef enum _sai_ip_addr_family_t
{
    SAI_IP_ADDR_FAMILY_IPV4,
    SAI_IP_ADDR_FAMILY_IPV6

} sai_ip_addr_family_t;
typedef union _sai_ip_addr_t
{
    sai_ip4_t ip4;
    sai_ip6_t ip6;
} sai_ip_addr_t;
{
    uint32_t count;
    sai_vlan_id_t *list;
} sai_vlan_list_t;
typedef union _sai_ip_addr_t
{
    sai_ip4_t ip4;
    sai_ip6_t ip6;
} sai_ip_addr_t;
typedef struct _sai_ip_address_t
{
    sai_ip_addr_family_t addr_family;
    sai_ip_addr_t addr;
} sai_ip_address_t;
typedef struct _sai_ip_address_list_t
{
    uint32_t count;
    sai_ip_address_t *list;
} sai_ip_address_list_t;
typedef struct _sai_ip_prefix_t
{
    sai_ip_addr_family_t addr_family;
    sai_ip_addr_t addr;
    sai_ip_addr_t mask;
} sai_ip_prefix_t;
typedef struct _sai_object_list_t
{
    uint32_t count;
    sai_object_id_t *list;
} sai_object_list_t;
typedef union _sai_acl_field_data_mask_t
{
    sai_uint8_t u8;
    sai_int8_t s8;
    sai_uint16_t u16;
    sai_int16_t s16;
    sai_uint32_t u32;
    sai_int32_t s32;
    sai_uint64_t u64;
    sai_mac_t mac;
    sai_ip4_t ip4;
    sai_ip6_t ip6;
    sai_u8_list_t u8list;
} sai_acl_field_data_mask_t;
typedef union _sai_acl_field_data_data_t
{
    bool booldata;
    sai_uint8_t u8;
    sai_int8_t s8;
    sai_uint16_t u16;
    sai_int16_t s16;
    sai_uint32_t u32;
    sai_int32_t s32;
    sai_uint64_t u64;
    sai_mac_t mac;
    sai_ip4_t ip4;
    sai_ip6_t ip6;
    sai_object_id_t oid;
    sai_object_list_t objlist;
    sai_u8_list_t u8list;
} sai_acl_field_data_data_t;
typedef struct _sai_acl_field_data_t
{
    bool enable;
    sai_acl_field_data_mask_t mask;
    sai_acl_field_data_data_t data;
} sai_acl_field_data_t;
ypedef union _sai_acl_action_parameter_t
{
    bool booldata;
    sai_uint8_t u8;
    sai_int8_t s8;
    sai_uint16_t u16;
    sai_int16_t s16;
    sai_uint32_t u32;
    sai_int32_t s32;
    sai_mac_t mac;
    sai_ip4_t ip4;
    sai_ip6_t ip6;
    sai_object_id_t oid;
    sai_object_list_t objlist;
    sai_ip_address_t ipaddr;
} sai_acl_action_parameter_t;
typedef struct _sai_acl_action_data_t
{
    bool enable;
    sai_acl_action_parameter_t parameter;
} sai_acl_action_data_t;
typedef enum _sai_packet_color_t
{
    SAI_PACKET_COLOR_GREEN,
    SAI_PACKET_COLOR_YELLOW,
    SAI_PACKET_COLOR_RED,
} sai_packet_color_t;
typedef struct _sai_qos_map_params_t
{
    sai_cos_t tc;
    sai_uint8_t dscp;
    sai_uint8_t dot1p;
    sai_uint8_t prio;
    sai_uint8_t pg;
    sai_queue_index_t queue_index;
    sai_packet_color_t color;
    sai_uint8_t mpls_exp;
} sai_qos_map_params_t;
typedef struct _sai_qos_map_t
{
    sai_qos_map_params_t key;
    sai_qos_map_params_t value;
} sai_qos_map_t;
typedef struct _sai_qos_map_list_t
{
    uint32_t count;
    sai_qos_map_t *list;
} sai_qos_map_list_t;
typedef struct _sai_map_t
{
    sai_uint32_t key;
    sai_int32_t value;
} sai_map_t;
typedef struct _sai_map_list_t
{
    uint32_t count;
    sai_map_t *list;
} sai_map_list_t;
typedef enum _sai_acl_stage_t
{
    SAI_ACL_STAGE_INGRESS,
    SAI_ACL_STAGE_EGRESS,
    SAI_ACL_STAGE_INGRESS_MACSEC,
    SAI_ACL_STAGE_EGRESS_MACSEC,
    SAI_ACL_STAGE_PRE_INGRESS,
} sai_acl_stage_t;
typedef enum _sai_acl_bind_point_type_t
{
    SAI_ACL_BIND_POINT_TYPE_PORT,
    SAI_ACL_BIND_POINT_TYPE_LAG,
    SAI_ACL_BIND_POINT_TYPE_VLAN,
    SAI_ACL_BIND_POINT_TYPE_ROUTER_INTERFACE,
    SAI_ACL_BIND_POINT_TYPE_ROUTER_INTF = SAI_ACL_BIND_POINT_TYPE_ROUTER_INTERFACE,
    SAI_ACL_BIND_POINT_TYPE_SWITCH
} sai_acl_bind_point_type_t;
typedef enum _sai_tam_bind_point_type_t
{
    SAI_TAM_BIND_POINT_TYPE_QUEUE,
    SAI_TAM_BIND_POINT_TYPE_PORT,
    SAI_TAM_BIND_POINT_TYPE_LAG,
    SAI_TAM_BIND_POINT_TYPE_VLAN,
    SAI_TAM_BIND_POINT_TYPE_SWITCH,
    SAI_TAM_BIND_POINT_TYPE_IPG,
    SAI_TAM_BIND_POINT_TYPE_BSP,
} sai_tam_bind_point_type_t;
typedef struct _sai_acl_resource_t
{
    sai_acl_stage_t stage;
    sai_acl_bind_point_type_t bind_point;
    sai_uint32_t avail_num;
} sai_acl_resource_t;
typedef struct _sai_acl_resource_list_t
{
    uint32_t count;
    sai_acl_resource_t *list;
} sai_acl_resource_list_t;
typedef enum _sai_tlv_type_t
{
    SAI_TLV_TYPE_INGRESS,
    SAI_TLV_TYPE_EGRESS,
    SAI_TLV_TYPE_OPAQUE,
    SAI_TLV_TYPE_HMAC
} sai_tlv_type_t;
typedef struct _sai_hmac_t
{
    sai_uint32_t key_id;
    sai_uint32_t hmac[8];
} sai_hmac_t;
typedef union _sai_tlv_entry_t
{
    sai_ip6_t ingress_node;
    sai_ip6_t egress_node;
    sai_uint32_t opaque_container[4];
    sai_hmac_t hmac;
} sai_tlv_entry_t;
typedef struct _sai_tlv_t
{
    sai_tlv_type_t tlv_type;
    sai_tlv_entry_t entry;
} sai_tlv_t;
typedef struct _sai_tlv_list_t
{
    uint32_t count;
    sai_tlv_t *list;
} sai_tlv_list_t;
typedef struct _sai_segment_list_t
{
    uint32_t count;
    sai_ip6_t *list;
} sai_segment_list_t;
typedef struct _sai_port_lane_eye_values_t
{
    uint32_t lane;
    int32_t left;
    int32_t right;
    int32_t up;
    int32_t down;
} sai_port_lane_eye_values_t;
typedef struct _sai_port_eye_values_list_t
{
    uint32_t count;
    sai_port_lane_eye_values_t *list;
} sai_port_eye_values_list_t;
typedef enum _sai_outseg_type_t
{
    SAI_OUTSEG_TYPE_PUSH,
    SAI_OUTSEG_TYPE_SWAP,
} sai_outseg_type_t;
typedef enum _sai_outseg_ttl_mode_t
{
    SAI_OUTSEG_TTL_MODE_UNIFORM,
    SAI_OUTSEG_TTL_MODE_PIPE,
} sai_outseg_ttl_mode_t;
typedef enum _sai_outseg_exp_mode_t
{
    SAI_OUTSEG_EXP_MODE_UNIFORM,
    SAI_OUTSEG_EXP_MODE_PIPE,
} sai_outseg_exp_mode_t;
typedef struct _sai_system_port_config_t
{
    uint32_t port_id;
    uint32_t attached_switch_id;
    uint32_t attached_core_index;
    uint32_t attached_core_port_index;
    uint32_t speed;
    uint32_t num_voq;
} sai_system_port_config_t;
typedef struct _sai_system_port_config_list_t
{
    uint32_t count;
    sai_system_port_config_t *list;
} sai_system_port_config_list_t;
typedef struct _sai_fabric_port_reachability_t
{
    uint32_t switch_id;
    bool reachable;
} sai_fabric_port_reachability_t;
typedef enum _sai_port_err_status_t
{
    SAI_PORT_ERR_STATUS_DATA_UNIT_CRC_ERROR,
    SAI_PORT_ERR_STATUS_DATA_UNIT_SIZE,
    SAI_PORT_ERR_STATUS_DATA_UNIT_MISALIGNMENT_ERROR,
    SAI_PORT_ERR_STATUS_CODE_GROUP_ERROR,
    SAI_PORT_ERR_STATUS_SIGNAL_LOCAL_ERROR,
    SAI_PORT_ERR_STATUS_NO_RX_REACHABILITY,
    SAI_PORT_ERR_STATUS_CRC_RATE,
    SAI_PORT_ERR_STATUS_REMOTE_FAULT_STATUS,
    SAI_PORT_ERR_STATUS_MAX,
} sai_port_err_status_t;
typedef struct _sai_port_err_status_list_t
{
    uint32_t count;
    sai_port_err_status_t *list;
} sai_port_err_status_list_t;
typedef union _sai_attribute_value_t
{
    bool booldata;
    char chardata[32];
    sai_uint8_t u8;
    sai_int8_t s8;
    sai_uint16_t u16;
    sai_int16_t s16;
    sai_uint32_t u32;
    sai_int32_t s32;
    sai_uint64_t u64;
    sai_int64_t s64;
    sai_pointer_t ptr;
    sai_mac_t mac;
    sai_ip4_t ip4;
    sai_ip6_t ip6;
    sai_ip_address_t ipaddr;
    sai_ip_prefix_t ipprefix;
    sai_prbs_rx_state_t rx_state;
    sai_object_id_t oid;
    sai_object_list_t objlist;
    sai_u8_list_t u8list;
    sai_s8_list_t s8list;
    sai_u16_list_t u16list;
    sai_s16_list_t s16list;
    sai_u32_list_t u32list;
    sai_s32_list_t s32list;
    sai_u32_range_t u32range;
    sai_s32_range_t s32range;
    sai_vlan_list_t vlanlist;
    sai_qos_map_list_t qosmap;
    sai_map_list_t maplist;
    sai_acl_field_data_t aclfield;
    sai_acl_action_data_t aclaction;
    sai_acl_capability_t aclcapability;
    sai_acl_resource_list_t aclresource;
    sai_tlv_list_t tlvlist;
    sai_segment_list_t segmentlist;
    sai_ip_address_list_t ipaddrlist;
    sai_port_eye_values_list_t porteyevalues;
    sai_timespec_t timespec;
    sai_macsec_sak_t macsecsak;
    sai_macsec_auth_key_t macsecauthkey;
    sai_macsec_salt_t macsecsalt;
    sai_system_port_config_t sysportconfig;
    sai_system_port_config_list_t sysportconfiglist;
    sai_fabric_port_reachability_t reachability;
    sai_port_err_status_list_t porterror;
} sai_attribute_value_t;
typedef struct _sai_attribute_t
{
    sai_attr_id_t id;
    sai_attribute_value_t value;
} sai_attribute_t;
typedef enum _sai_bulk_op_error_mode_t
{
    SAI_BULK_OP_ERROR_MODE_STOP_ON_ERROR,
    SAI_BULK_OP_ERROR_MODE_IGNORE_ERROR,
} sai_bulk_op_error_mode_t;

sai_acl_action_data_t;
_sai_acl_action_parameter_t;
_sai_acl_bind_point_type_t;
_sai_acl_capability_t;
_sai_acl_field_data_data_t;
_sai_acl_field_data_mask_t;
_sai_acl_field_data_t;
_sai_acl_resource_list_t;
_sai_acl_resource_t;
_sai_acl_stage_t;
_sai_attribute_t;
_sai_attribute_value_t;
_sai_bulk_op_error_mode_t;
_sai_common_api_t;
_sai_fabric_port_reachability_t;
_sai_hmac_t;
_sai_ip_addr_family_t;
_sai_ip_addr_t;
_sai_ip_address_list_t;
_sai_ip_address_t;
_sai_ip_prefix_t;
_sai_map_list_t;
_sai_map_t;
_sai_object_list_t;
_sai_object_type_t;
_sai_outseg_exp_mode_t;
_sai_outseg_ttl_mode_t;
_sai_outseg_type_t;
_sai_packet_color_t;
_sai_port_err_status_list_t;
_sai_port_err_status_t;
_sai_port_eye_values_list_t;
_sai_port_lane_eye_values_t;
_sai_qos_map_list_t;
_sai_qos_map_params_t;
_sai_qos_map_t;
_sai_s16_list_t;
_sai_s32_list_t;
_sai_s32_range_t;
_sai_s8_list_t;
_sai_segment_list_t;
_sai_stats_mode_t;
_sai_system_port_config_list_t;
_sai_system_port_config_t;
_sai_timespec_t;
_sai_tlv_entry_t;
_sai_tlv_list_t;
_sai_tlv_t;
_sai_tlv_type_t;
_sai_u16_list_t;
_sai_u32_list_t;
_sai_u32_range_t;
_sai_u8_list_t;
_sai_vlan_list_t;
struct _sai_acl_action_data_t;
union _sai_acl_action_parameter_t;
enum _sai_acl_bind_point_type_t;
struct _sai_acl_capability_t;
union _sai_acl_field_data_data_t;
union _sai_acl_field_data_mask_t;
struct _sai_acl_field_data_t;
struct _sai_acl_resource_list_t;
struct _sai_acl_resource_t;
enum _sai_acl_stage_t;
struct _sai_attribute_t;
union _sai_attribute_value_t;
enum _sai_bulk_op_error_mode_t;
struct _sai_fabric_port_reachability_t;
struct _sai_hmac_t;
enum _sai_ip_addr_family_t;
union _sai_ip_addr_t;
struct _sai_ip_address_list_t;
struct _sai_ip_address_t;
struct _sai_ip_prefix_t;
struct _sai_map_list_t;
struct _sai_map_t;
struct _sai_object_list_t;
enum _sai_object_type_t;
enum _sai_packet_color_t;
struct _sai_port_err_status_list_t;
enum _sai_port_err_status_t;
struct _sai_port_eye_values_list_t;
struct _sai_port_lane_eye_values_t;
struct _sai_qos_map_list_t;
struct _sai_qos_map_params_t;
struct _sai_qos_map_t;
struct _sai_s16_list_t;
struct _sai_s32_list_t;
struct _sai_s32_range_t;
struct _sai_s8_list_t;
struct _sai_segment_list_t;
enum _sai_stats_mode_t;
struct _sai_system_port_config_list_t;
struct _sai_system_port_config_t;
struct _sai_timespec_t;
union _sai_tlv_entry_t;
struct _sai_tlv_list_t;
struct _sai_tlv_t;
enum _sai_tlv_type_t;
struct _sai_u16_list_t;
struct _sai_u32_list_t;
struct _sai_u32_range_t;
struct _sai_u8_list_t;
struct _sai_vlan_list_t;
typedef struct _sai_acl_action_data_t sai_acl_action_data_t;
typedef union _sai_acl_action_parameter_t sai_acl_action_parameter_t;
typedef enum _sai_acl_bind_point_type_t sai_acl_bind_point_type_t;
typedef struct _sai_acl_capability_t sai_acl_capability_t;
typedef union _sai_acl_field_data_data_t sai_acl_field_data_data_t;
typedef union _sai_acl_field_data_mask_t sai_acl_field_data_mask_t;
typedef struct _sai_acl_field_data_t sai_acl_field_data_t;
typedef struct _sai_acl_resource_list_t sai_acl_resource_list_t;
typedef struct _sai_acl_resource_t sai_acl_resource_t;
typedef enum _sai_acl_stage_t sai_acl_stage_t;
typedef unsigned int sai_attr_id_t;
typedef struct _sai_attribute_t sai_attribute_t;
typedef union _sai_attribute_value_t sai_attribute_value_t;
typedef sai_status_t (*)(sai_object_id_t, uint32_t, const uint32_t *, const sai_attribute_t **, sai_bulk_op_error_mode_t, 
    sai_object_id_t *, sai_status_t *) sai_bulk_object_create_fn;
typedef sai_status_t (*)(uint32_t, const sai_object_id_t *, sai_bulk_op_error_mode_t, sai_status_t *) sai_bulk_object_remove_fn;
typedef enum _sai_bulk_op_error_mode_t sai_bulk_op_error_mode_t;
typedef _sai_common_api_t sai_common_api_t;
typedef unsigned char sai_cos_t;
typedef struct _sai_fabric_port_reachability_t sai_fabric_port_reachability_t;
typedef struct _sai_hmac_t sai_hmac_t;
typedef short sai_int16_t;
typedef int sai_int32_t;
typedef long sai_int64_t;
typedef signed char sai_int8_t;
typedef unsigned int sai_ip4_t;
typedef uint8_t [16] sai_ip6_t;
typedef enum _sai_ip_addr_family_t sai_ip_addr_family_t;
typedef union _sai_ip_addr_t sai_ip_addr_t;
typedef struct _sai_ip_address_list_t sai_ip_address_list_t;
typedef struct _sai_ip_address_t sai_ip_address_t;
typedef struct _sai_ip_prefix_t sai_ip_prefix_t;
typedef unsigned int sai_label_id_t;
typedef uint8_t [6] sai_mac_t;
typedef uint8_t [16] sai_macsec_auth_key_t;
typedef uint8_t [32] sai_macsec_sak_t;
typedef uint8_t [12] sai_macsec_salt_t;
typedef struct _sai_map_list_t sai_map_list_t;
typedef struct _sai_map_t sai_map_t;
typedef unsigned long sai_object_id_t;
typedef struct _sai_object_list_t sai_object_list_t;
typedef enum _sai_object_type_t sai_object_type_t;
typedef enum _sai_packet_color_t sai_packet_color_t;
typedef void * sai_pointer_t;
typedef struct _sai_port_err_status_list_t sai_port_err_status_list_t;
typedef enum _sai_port_err_status_t sai_port_err_status_t;
typedef struct _sai_port_eye_values_list_t sai_port_eye_values_list_t;
typedef struct _sai_port_lane_eye_values_t sai_port_lane_eye_values_t;
typedef struct _sai_qos_map_list_t sai_qos_map_list_t;
typedef struct _sai_qos_map_params_t sai_qos_map_params_t;
typedef struct _sai_qos_map_t sai_qos_map_t;
typedef unsigned char sai_queue_index_t;
typedef struct _sai_s16_list_t sai_s16_list_t;
typedef struct _sai_s32_list_t sai_s32_list_t;
typedef struct _sai_s32_range_t sai_s32_range_t;
typedef struct _sai_s8_list_t sai_s8_list_t;
typedef struct _sai_segment_list_t sai_segment_list_t;
typedef unsigned long sai_size_t;
typedef unsigned int sai_stat_id_t;
typedef enum _sai_stats_mode_t sai_stats_mode_t;
typedef int sai_status_t;
typedef unsigned int sai_switch_profile_id_t;
typedef struct _sai_system_port_config_list_t sai_system_port_config_list_t;
typedef struct _sai_system_port_config_t sai_system_port_config_t;
typedef struct _sai_timespec_t sai_timespec_t;
typedef union _sai_tlv_entry_t sai_tlv_entry_t;
typedef struct _sai_tlv_list_t sai_tlv_list_t;
typedef struct _sai_tlv_t sai_tlv_t;
typedef enum _sai_tlv_type_t sai_tlv_type_t;
typedef struct _sai_u16_list_t sai_u16_list_t;
typedef struct _sai_u32_list_t sai_u32_list_t;
typedef struct _sai_u32_range_t sai_u32_range_t;
typedef struct _sai_u8_list_t sai_u8_list_t;
typedef unsigned short sai_uint16_t;
typedef unsigned int sai_uint32_t;
typedef unsigned long sai_uint64_t;
typedef unsigned char sai_uint8_t;
typedef unsigned short sai_vlan_id_t;
typedef struct _sai_vlan_list_t sai_vlan_list_t;

File ../plugins/sai/SAI/xpSai/sai/inc/saiudf.h:
_sai_udf_api_t;
_sai_udf_attr_t;
_sai_udf_group_attr_t;
_sai_udf_match_attr_t;
typedef sai_status_t (*)(sai_object_id_t *, sai_object_id_t, uint32_t, const sai_attribute_t *) sai_create_udf_fn;
typedef sai_status_t (*)(sai_object_id_t *, sai_object_id_t, uint32_t, const sai_attribute_t *) sai_create_udf_group_fn;
typedef sai_status_t (*)(sai_object_id_t *, sai_object_id_t, uint32_t, const sai_attribute_t *) sai_create_udf_match_fn;
typedef sai_status_t (*)(sai_object_id_t, uint32_t, sai_attribute_t *) sai_get_udf_attribute_fn;
typedef sai_status_t (*)(sai_object_id_t, uint32_t, sai_attribute_t *) sai_get_udf_group_attribute_fn;
typedef sai_status_t (*)(sai_object_id_t, uint32_t, sai_attribute_t *) sai_get_udf_match_attribute_fn;
typedef sai_status_t (*)(sai_object_id_t) sai_remove_udf_fn;
typedef sai_status_t (*)(sai_object_id_t) sai_remove_udf_group_fn;
typedef sai_status_t (*)(sai_object_id_t) sai_remove_udf_match_fn;
typedef sai_status_t (*)(sai_object_id_t, const sai_attribute_t *) sai_set_udf_attribute_fn;
typedef sai_status_t (*)(sai_object_id_t, const sai_attribute_t *) sai_set_udf_group_attribute_fn;
typedef sai_status_t (*)(sai_object_id_t, const sai_attribute_t *) sai_set_udf_match_attribute_fn;
typedef _sai_udf_api_t sai_udf_api_t;

File ../plugins/sai/SAI/xpSai/sai/inc/saivirtualrouter.h:
typedef enum _sai_virtual_router_attr_t
{
    SAI_VIRTUAL_ROUTER_ATTR_START,
    SAI_VIRTUAL_ROUTER_ATTR_ADMIN_V4_STATE = SAI_VIRTUAL_ROUTER_ATTR_START,
    SAI_VIRTUAL_ROUTER_ATTR_ADMIN_V6_STATE,
    SAI_VIRTUAL_ROUTER_ATTR_SRC_MAC_ADDRESS,
    SAI_VIRTUAL_ROUTER_ATTR_VIOLATION_TTL1_PACKET_ACTION,
    SAI_VIRTUAL_ROUTER_ATTR_VIOLATION_IP_OPTIONS_PACKET_ACTION,
    SAI_VIRTUAL_ROUTER_ATTR_UNKNOWN_L3_MULTICAST_PACKET_ACTION,
    SAI_VIRTUAL_ROUTER_ATTR_LABEL,
    SAI_VIRTUAL_ROUTER_ATTR_END,
    SAI_VIRTUAL_ROUTER_ATTR_CUSTOM_RANGE_START = 0x10000000,
    SAI_VIRTUAL_ROUTER_ATTR_CUSTOM_RANGE_END
}sai_virtual_router_attr_t;

_sai_virtual_router_api_t;
_sai_virtual_router_attr_t;
struct _sai_virtual_router_api_t;
enum _sai_virtual_router_attr_t;
typedef sai_status_t (*)(sai_object_id_t *, sai_object_id_t, uint32_t, const sai_attribute_t *) sai_create_virtual_router_fn;
typedef sai_status_t (*)(sai_object_id_t, uint32_t, sai_attribute_t *) sai_get_virtual_router_attribute_fn;
typedef sai_status_t (*)(sai_object_id_t) sai_remove_virtual_router_fn;
typedef sai_status_t (*)(sai_object_id_t, const sai_attribute_t *) sai_set_virtual_router_attribute_fn;
typedef struct _sai_virtual_router_api_t sai_virtual_router_api_t;

File ../plugins/sai/SAI/xpSai/sai/inc/saivlan.h:
typedef enum _sai_vlan_flood_control_type_t
{
    SAI_VLAN_FLOOD_CONTROL_TYPE_ALL,
    SAI_VLAN_FLOOD_CONTROL_TYPE_NONE,
    SAI_VLAN_FLOOD_CONTROL_TYPE_L2MC_GROUP,
    SAI_VLAN_FLOOD_CONTROL_TYPE_COMBINED
} sai_vlan_flood_control_type_t;
typedef enum _sai_vlan_member_attr_t
{
    SAI_VLAN_MEMBER_ATTR_START,
    SAI_VLAN_MEMBER_ATTR_VLAN_ID = SAI_VLAN_MEMBER_ATTR_START,
    SAI_VLAN_MEMBER_ATTR_BRIDGE_PORT_ID,
    SAI_VLAN_MEMBER_ATTR_VLAN_TAGGING_MODE,
    SAI_VLAN_MEMBER_ATTR_END,
    SAI_VLAN_MEMBER_ATTR_CUSTOM_RANGE_START = 0x10000000,
    SAI_VLAN_MEMBER_ATTR_CUSTOM_RANGE_END
} sai_vlan_member_attr_t;
typedef enum _sai_vlan_tagging_mode_t
{
    SAI_VLAN_TAGGING_MODE_UNTAGGED,
    SAI_VLAN_TAGGING_MODE_TAGGED,
    SAI_VLAN_TAGGING_MODE_PRIORITY_TAGGED
} sai_vlan_tagging_mode_t;
typedef enum _sai_vlan_attr_t
{
    SAI_VLAN_ATTR_START,
    SAI_VLAN_ATTR_VLAN_ID = SAI_VLAN_ATTR_START,
    SAI_VLAN_ATTR_MEMBER_LIST,
    SAI_VLAN_ATTR_MAX_LEARNED_ADDRESSES,
    SAI_VLAN_ATTR_STP_INSTANCE,
    SAI_VLAN_ATTR_LEARN_DISABLE,
    SAI_VLAN_ATTR_IPV4_MCAST_LOOKUP_KEY_TYPE,
    SAI_VLAN_ATTR_IPV6_MCAST_LOOKUP_KEY_TYPE,
    SAI_VLAN_ATTR_UNKNOWN_NON_IP_MCAST_OUTPUT_GROUP_ID,
    SAI_VLAN_ATTR_UNKNOWN_IPV4_MCAST_OUTPUT_GROUP_ID,
    SAI_VLAN_ATTR_UNKNOWN_IPV6_MCAST_OUTPUT_GROUP_ID,
    SAI_VLAN_ATTR_UNKNOWN_LINKLOCAL_MCAST_OUTPUT_GROUP_ID,
    SAI_VLAN_ATTR_INGRESS_ACL,
    SAI_VLAN_ATTR_EGRESS_ACL,
    SAI_VLAN_ATTR_META_DATA,
    SAI_VLAN_ATTR_UNKNOWN_UNICAST_FLOOD_CONTROL_TYPE,
    SAI_VLAN_ATTR_UNKNOWN_UNICAST_FLOOD_GROUP,
    SAI_VLAN_ATTR_UNKNOWN_MULTICAST_FLOOD_CONTROL_TYPE,
    SAI_VLAN_ATTR_UNKNOWN_MULTICAST_FLOOD_GROUP,
    SAI_VLAN_ATTR_BROADCAST_FLOOD_CONTROL_TYPE,
    SAI_VLAN_ATTR_BROADCAST_FLOOD_GROUP,
    SAI_VLAN_ATTR_CUSTOM_IGMP_SNOOPING_ENABLE,
    SAI_VLAN_ATTR_TAM_OBJECT,
    SAI_VLAN_ATTR_END,
    SAI_VLAN_ATTR_CUSTOM_RANGE_START = 0x10000000,
    SAI_VLAN_ATTR_CUSTOM_RANGE_END
} sai_vlan_attr_t;
typedef enum _sai_vlan_mcast_lookup_key_type_t
{
    SAI_VLAN_MCAST_LOOKUP_KEY_TYPE_MAC_DA,
    SAI_VLAN_MCAST_LOOKUP_KEY_TYPE_XG,
    SAI_VLAN_MCAST_LOOKUP_KEY_TYPE_SG,
    SAI_VLAN_MCAST_LOOKUP_KEY_TYPE_XG_AND_SG
} sai_vlan_mcast_lookup_key_type_t;

_sai_vlan_api_t;
_sai_vlan_attr_t;
_sai_vlan_flood_control_type_t;
_sai_vlan_mcast_lookup_key_type_t;
_sai_vlan_member_attr_t;
_sai_vlan_stat_t;
_sai_vlan_tagging_mode_t;
struct _sai_vlan_api_t;
enum _sai_vlan_attr_t;
enum _sai_vlan_member_attr_t;
enum _sai_vlan_tagging_mode_t;
typedef sai_status_t (*)(sai_object_id_t, uint32_t, const sai_stat_id_t *) sai_clear_vlan_stats_fn;
typedef sai_status_t (*)(sai_object_id_t *, sai_object_id_t, uint32_t, const sai_attribute_t *) sai_create_vlan_fn;
typedef sai_status_t (*)(sai_object_id_t *, sai_object_id_t, uint32_t, const sai_attribute_t *) sai_create_vlan_member_fn;
typedef sai_status_t (*)(sai_object_id_t, uint32_t, sai_attribute_t *) sai_get_vlan_attribute_fn;
typedef sai_status_t (*)(sai_object_id_t, uint32_t, sai_attribute_t *) sai_get_vlan_member_attribute_fn;
typedef sai_status_t (*)(sai_object_id_t, uint32_t, const sai_stat_id_t *, sai_stats_mode_t, uint64_t *) sai_get_vlan_stats_ext_fn;
typedef sai_status_t (*)(sai_object_id_t, uint32_t, const sai_stat_id_t *, uint64_t *) sai_get_vlan_stats_fn;
typedef sai_status_t (*)(sai_object_id_t) sai_remove_vlan_fn;
typedef sai_status_t (*)(sai_object_id_t) sai_remove_vlan_member_fn;
typedef sai_status_t (*)(sai_object_id_t, const sai_attribute_t *) sai_set_vlan_attribute_fn;
typedef sai_status_t (*)(sai_object_id_t, const sai_attribute_t *) sai_set_vlan_member_attribute_fn;
typedef struct _sai_vlan_api_t sai_vlan_api_t;
typedef _sai_vlan_flood_control_type_t sai_vlan_flood_control_type_t;
typedef _sai_vlan_mcast_lookup_key_type_t sai_vlan_mcast_lookup_key_type_t;
typedef enum _sai_vlan_tagging_mode_t sai_vlan_tagging_mode_t;

File ../plugins/sai/SAI/xpSai/sai/inc/saiwred.h:
typedef enum _sai_ecn_mark_mode_t
{
    SAI_ECN_MARK_MODE_NONE,
    SAI_ECN_MARK_MODE_GREEN,
    SAI_ECN_MARK_MODE_YELLOW,
    SAI_ECN_MARK_MODE_RED,
    SAI_ECN_MARK_MODE_GREEN_YELLOW,
    SAI_ECN_MARK_MODE_GREEN_RED,
    SAI_ECN_MARK_MODE_YELLOW_RED,
    SAI_ECN_MARK_MODE_ALL,
} sai_ecn_mark_mode_t;
typedef enum _sai_wred_attr_t
{
    SAI_WRED_ATTR_START = 0x00000000,
    SAI_WRED_ATTR_GREEN_ENABLE = SAI_WRED_ATTR_START,
    SAI_WRED_ATTR_GREEN_MIN_THRESHOLD = 0x00000001,
    SAI_WRED_ATTR_GREEN_MAX_THRESHOLD = 0x00000002,
    SAI_WRED_ATTR_GREEN_DROP_PROBABILITY = 0x00000003,
    SAI_WRED_ATTR_YELLOW_ENABLE = 0x00000004,
    SAI_WRED_ATTR_YELLOW_MIN_THRESHOLD = 0x00000005,
    SAI_WRED_ATTR_YELLOW_MAX_THRESHOLD = 0x00000006,
    SAI_WRED_ATTR_YELLOW_DROP_PROBABILITY = 0x00000007,
    SAI_WRED_ATTR_RED_ENABLE = 0x00000008,
    SAI_WRED_ATTR_RED_MIN_THRESHOLD = 0x00000009,
    SAI_WRED_ATTR_RED_MAX_THRESHOLD = 0x0000000a,
    SAI_WRED_ATTR_RED_DROP_PROBABILITY = 0x0000000b,
    SAI_WRED_ATTR_WEIGHT = 0x0000000c,
    SAI_WRED_ATTR_ECN_MARK_MODE = 0x0000000d,
    SAI_WRED_ATTR_ECN_GREEN_MIN_THRESHOLD = 0x0000000e,
    SAI_WRED_ATTR_ECN_GREEN_MAX_THRESHOLD = 0x0000000f,
    SAI_WRED_ATTR_ECN_GREEN_MARK_PROBABILITY = 0x00000010,
    SAI_WRED_ATTR_ECN_YELLOW_MIN_THRESHOLD = 0x00000011,
    SAI_WRED_ATTR_ECN_YELLOW_MAX_THRESHOLD = 0x00000012,
    SAI_WRED_ATTR_ECN_YELLOW_MARK_PROBABILITY = 0x00000013,
    SAI_WRED_ATTR_ECN_RED_MIN_THRESHOLD = 0x00000014,
    SAI_WRED_ATTR_ECN_RED_MAX_THRESHOLD = 0x00000015,
    SAI_WRED_ATTR_ECN_RED_MARK_PROBABILITY = 0x00000016,
    SAI_WRED_ATTR_ECN_COLOR_UNAWARE_MIN_THRESHOLD = 0x00000017,
    SAI_WRED_ATTR_ECN_COLOR_UNAWARE_MAX_THRESHOLD = 0x00000018,
    SAI_WRED_ATTR_ECN_COLOR_UNAWARE_MARK_PROBABILITY = 0x00000019,
    SAI_WRED_ATTR_END,
    SAI_WRED_ATTR_CUSTOM_RANGE_START = 0x10000000,
    SAI_WRED_ATTR_CUSTOM_RANGE_END
} sai_wred_attr_t;

_sai_ecn_mark_mode_t;
_sai_wred_api_t;
_sai_wred_attr_t;
enum _sai_ecn_mark_mode_t;
struct _sai_wred_api_t;
enum _sai_wred_attr_t;
typedef sai_status_t (*)(sai_object_id_t *, sai_object_id_t, uint32_t, const sai_attribute_t *) sai_create_wred_fn;
typedef _sai_ecn_mark_mode_t sai_ecn_mark_mode_t;
typedef sai_status_t (*)(sai_object_id_t, uint32_t, sai_attribute_t *) sai_get_wred_attribute_fn;
typedef sai_status_t (*)(sai_object_id_t) sai_remove_wred_fn;
typedef sai_status_t (*)(sai_object_id_t, const sai_attribute_t *) sai_set_wred_attribute_fn;
typedef struct _sai_wred_api_t sai_wred_api_t;

File ../plugins/sai/SAI/xpSai/util/include/xpSaiDev.h:
xpSaiWmIpcParam_t;
typedef bool (*)(void *, const char *) sai_shell_check_run_function;
typedef void (*)(std_parsed_string_t) sai_shell_function;
typedef void * std_parsed_string_t;
struct xpSaiWmIpcParam_t;

File ../plugins/sai/SAI/xpSai/util/include/xpSaiUtil.h:
_attr_val_type_t;
xpSaiAppSaiKeyValue_t;
xpSaiAttrEntry_t;
xpSaiPortProfile_t;
typedef xpSaiAppSaiKeyValue_t xpSaiAppSaiKeyValue_t;
typedef xpSaiAttrEntry_t xpSaiAttrEntry_t;
typedef xpSaiPortProfile_t xpSaiPortProfile_t;

File ../plugins/sai/SAI/xpSai/util/xpSaiDev.c:
typedef bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long double;
typedef long long;
typedef short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;
typedef unsigned long;
typedef unsigned long long;
typedef unsigned short;
typedef wchar_t;

File ../plugins/sai/SAI/xpSai/util/xpSaiUtil.c:
typedef bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long double;
typedef long long;
typedef short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;
typedef unsigned long;
typedef unsigned long long;
typedef unsigned short;
typedef wchar_t;

File ../plugins/sai/SAI/xpSai/xpSai.c:
xpSaiSaiObjIdEnumToStr;
typedef bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long double;
typedef long long;
typedef short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;
typedef unsigned long;
typedef unsigned long long;
typedef unsigned short;
typedef wchar_t;
typedef xpSaiSaiObjIdEnumToStr xpSaiSaiObjIdEnumToStr;

File ../plugins/sai/SAI/xpSai/xpSaiAcl.c:
_xpSaiAclFieldT;
typedef bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long double;
typedef long long;
typedef short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;
typedef unsigned long;
typedef unsigned long long;
typedef unsigned short;
typedef wchar_t;
typedef _xpSaiAclFieldT xpSaiAclFieldT;

File ../plugins/sai/SAI/xpSai/xpSaiAclMapper.c:
typedef bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long double;
typedef long long;
typedef short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;
typedef unsigned long;
typedef unsigned long long;
typedef unsigned short;
typedef wchar_t;

File ../plugins/sai/SAI/xpSai/xpSaiBridge.c:
_xpSaiBridgeAttributesT;
_xpSaiBridgeDbEntry;
_xpSaiBridgePortAttributesT;
_xpSaiBridgePortDbEntry;
_xpSaiObjsMappingDbEntry;
typedef bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long double;
typedef long long;
typedef short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;
typedef unsigned long;
typedef unsigned long long;
typedef unsigned short;
typedef wchar_t;
typedef _xpSaiObjsMappingDbEntry xpSaiBrObjsMapInfoT;
typedef _xpSaiBridgeAttributesT xpSaiBridgeAttributesT;
typedef _xpSaiBridgeDbEntry xpSaiBridgeInfoT;
typedef _xpSaiBridgePortAttributesT xpSaiBridgePortAttributesT;
typedef _xpSaiBridgePortDbEntry xpSaiBridgePortInfoT;

File ../plugins/sai/SAI/xpSai/xpSaiBuffer.c:
typedef bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long double;
typedef long long;
typedef short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;
typedef unsigned long;
typedef unsigned long long;
typedef unsigned short;
typedef wchar_t;

File ../plugins/sai/SAI/xpSai/xpSaiCopp.c:
typedef bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long double;
typedef long long;
typedef short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;
typedef unsigned long;
typedef unsigned long long;
typedef unsigned short;
typedef wchar_t;

File ../plugins/sai/SAI/xpSai/xpSaiFdb.c:
typedef bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long double;
typedef long long;
typedef short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;
typedef unsigned long;
typedef unsigned long long;
typedef unsigned short;
typedef wchar_t;

File ../plugins/sai/SAI/xpSai/xpSaiHash.c:
typedef bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long double;
typedef long long;
typedef short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;
typedef unsigned long;
typedef unsigned long long;
typedef unsigned short;
typedef wchar_t;

File ../plugins/sai/SAI/xpSai/xpSaiHostIfFd.c:
typedef bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long double;
typedef long long;
typedef short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;
typedef unsigned long;
typedef unsigned long long;
typedef unsigned short;
typedef wchar_t;

File ../plugins/sai/SAI/xpSai/xpSaiHostIfNetdev.c:
typedef bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long double;
typedef long long;
typedef short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;
typedef unsigned long;
typedef unsigned long long;
typedef unsigned short;
typedef wchar_t;

File ../plugins/sai/SAI/xpSai/xpSaiHostInterface.c:
_xpSaiSoftFwdInfo_t;
typedef bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long double;
typedef long long;
typedef short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;
typedef unsigned long;
typedef unsigned long long;
typedef unsigned short;
typedef wchar_t;
typedef _xpSaiSoftFwdInfo_t xpSaiSoftFwdInfo_t;

File ../plugins/sai/SAI/xpSai/xpSaiIpmc.c:
typedef bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long double;
typedef long long;
typedef short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;
typedef unsigned long;
typedef unsigned long long;
typedef unsigned short;
typedef wchar_t;

File ../plugins/sai/SAI/xpSai/xpSaiIpmcGroup.c:
typedef bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long double;
typedef long long;
typedef short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;
typedef unsigned long;
typedef unsigned long long;
typedef unsigned short;
typedef wchar_t;

File ../plugins/sai/SAI/xpSai/xpSaiL2Mc.c:
typedef bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long double;
typedef long long;
typedef short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;
typedef unsigned long;
typedef unsigned long long;
typedef unsigned short;
typedef wchar_t;

File ../plugins/sai/SAI/xpSai/xpSaiL2McGroup.c:
typedef bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long double;
typedef long long;
typedef short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;
typedef unsigned long;
typedef unsigned long long;
typedef unsigned short;
typedef wchar_t;

File ../plugins/sai/SAI/xpSai/xpSaiLag.c:
typedef bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long double;
typedef long long;
typedef short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;
typedef unsigned long;
typedef unsigned long long;
typedef unsigned short;
typedef wchar_t;

File ../plugins/sai/SAI/xpSai/xpSaiLog.c:
typedef bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long double;
typedef long long;
typedef short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;
typedef unsigned long;
typedef unsigned long long;
typedef unsigned short;
typedef wchar_t;

File ../plugins/sai/SAI/xpSai/xpSaiMcastFdb.c:
typedef bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long double;
typedef long long;
typedef short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;
typedef unsigned long;
typedef unsigned long long;
typedef unsigned short;
typedef wchar_t;

File ../plugins/sai/SAI/xpSai/xpSaiMirror.c:
typedef bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long double;
typedef long long;
typedef short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;
typedef unsigned long;
typedef unsigned long long;
typedef unsigned short;
typedef wchar_t;

File ../plugins/sai/SAI/xpSai/xpSaiNeighbor.c:
xpSaiNeighborFdbEntry_t;
typedef bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long double;
typedef long long;
typedef short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;
typedef unsigned long;
typedef unsigned long long;
typedef unsigned short;
typedef wchar_t;
typedef xpSaiNeighborFdbEntry_t xpSaiNeighborFdbEntry_t;

File ../plugins/sai/SAI/xpSai/xpSaiNextHop.c:
typedef bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long double;
typedef long long;
typedef short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;
typedef unsigned long;
typedef unsigned long long;
typedef unsigned short;
typedef wchar_t;

File ../plugins/sai/SAI/xpSai/xpSaiNextHopGroup.c:
_xpSaiNextHopGroupAttributesT;
_xpSaiNextHopGroupInfo_t;
_xpSaiNextHopGroupMemberAttributesT;
_xpSaiNextHopGroupMemberInfo_t;
typedef bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long double;
typedef long long;
typedef short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;
typedef unsigned long;
typedef unsigned long long;
typedef unsigned short;
typedef wchar_t;
typedef _xpSaiNextHopGroupAttributesT xpSaiNextHopGroupAttributesT;
typedef _xpSaiNextHopGroupInfo_t xpSaiNextHopGroupInfo_t;
typedef _xpSaiNextHopGroupMemberAttributesT xpSaiNextHopGroupMemberAttributesT;
typedef _xpSaiNextHopGroupMemberInfo_t xpSaiNextHopGroupMemberInfo_t;

File ../plugins/sai/SAI/xpSai/xpSaiObject.c:
typedef bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long double;
typedef long long;
typedef short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;
typedef unsigned long;
typedef unsigned long long;
typedef unsigned short;
typedef wchar_t;

File ../plugins/sai/SAI/xpSai/xpSaiPolicer.c:
typedef bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long double;
typedef long long;
typedef short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;
typedef unsigned long;
typedef unsigned long long;
typedef unsigned short;
typedef wchar_t;

File ../plugins/sai/SAI/xpSai/xpSaiPort.c:
_xpSaiPortAttributesT;
typedef bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long double;
typedef long long;
typedef short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;
typedef unsigned long;
typedef unsigned long long;
typedef unsigned short;
typedef wchar_t;
typedef _xpSaiPortAttributesT xpSaiPortAttributesT;

File ../plugins/sai/SAI/xpSai/xpSaiPortCfgManager.c:
typedef bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long double;
typedef long long;
typedef short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;
typedef unsigned long;
typedef unsigned long long;
typedef unsigned short;
typedef wchar_t;

File ../plugins/sai/SAI/xpSai/xpSaiProfileMng.c:
xpSaiProfileMngEnumToStr;
typedef bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long double;
typedef long long;
typedef short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;
typedef unsigned long;
typedef unsigned long long;
typedef unsigned short;
typedef wchar_t;
typedef xpSaiProfileMngEnumToStr xpSaiProfileMngEnumToStr;

File ../plugins/sai/SAI/xpSai/xpSaiQosMap.c:
_xpSaiQosMapAttributesT;
xpSaiL2QosMap_t;
xpSaiL3QosMap_t;
xpSaiPfcPrioToPgMap_t;
xpSaiPfcPrioToQueueMap_t;
xpSaiPortQosProfileList_t;
xpSaiPortQosProfileMap_t;
xpSaiQosMap_t;
xpSaiTcToPgMap_t;
xpSaiTcToQueueMap_t;
typedef __int128 unsigned;
typedef bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long double;
typedef long long;
typedef short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;
typedef unsigned long;
typedef unsigned long long;
typedef unsigned short;
typedef wchar_t;
typedef xpSaiL2QosMap_t xpSaiL2QosMap_t;
typedef xpSaiL3QosMap_t xpSaiL3QosMap_t;
typedef xpSaiPfcPrioToPgMap_t xpSaiPfcPrioToPgMap_t;
typedef xpSaiPfcPrioToQueueMap_t xpSaiPfcPrioToQueueMap_t;
typedef xpSaiPortQosProfileList_t xpSaiPortQosProfileList_t;
typedef xpSaiPortQosProfileMap_t xpSaiPortQosProfileMap_t;
typedef _xpSaiQosMapAttributesT xpSaiQosMapAttributesT;
typedef xpSaiQosMap_t xpSaiQosMap_t;
typedef xpSaiTcToPgMap_t xpSaiTcToPgMap_t;
typedef xpSaiTcToQueueMap_t xpSaiTcToQueueMap_t;

File ../plugins/sai/SAI/xpSai/xpSaiQueue.c:
typedef bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long double;
typedef long long;
typedef short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;
typedef unsigned long;
typedef unsigned long long;
typedef unsigned short;
typedef wchar_t;

File ../plugins/sai/SAI/xpSai/xpSaiRoute.c:
typedef bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long double;
typedef long long;
typedef short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;
typedef unsigned long;
typedef unsigned long long;
typedef unsigned short;
typedef wchar_t;

File ../plugins/sai/SAI/xpSai/xpSaiRouterInterface.c:
typedef bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long double;
typedef long long;
typedef short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;
typedef unsigned long;
typedef unsigned long long;
typedef unsigned short;
typedef wchar_t;

File ../plugins/sai/SAI/xpSai/xpSaiRpfGroup.c:
typedef bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long double;
typedef long long;
typedef short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;
typedef unsigned long;
typedef unsigned long long;
typedef unsigned short;
typedef wchar_t;

File ../plugins/sai/SAI/xpSai/xpSaiSamplePacket.c:
typedef bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long double;
typedef long long;
typedef short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;
typedef unsigned long;
typedef unsigned long long;
typedef unsigned short;
typedef wchar_t;

File ../plugins/sai/SAI/xpSai/xpSaiScheduler.c:
typedef bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long double;
typedef long long;
typedef short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;
typedef unsigned long;
typedef unsigned long long;
typedef unsigned short;
typedef wchar_t;

File ../plugins/sai/SAI/xpSai/xpSaiSchedulerGroup.c:
typedef bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long double;
typedef long long;
typedef short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;
typedef unsigned long;
typedef unsigned long long;
typedef unsigned short;
typedef wchar_t;

File ../plugins/sai/SAI/xpSai/xpSaiStp.c:
typedef bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long double;
typedef long long;
typedef short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;
typedef unsigned long;
typedef unsigned long long;
typedef unsigned short;
typedef wchar_t;

File ../plugins/sai/SAI/xpSai/xpSaiSwitch.c:
xpSaiInitParams_s;
typedef bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long double;
typedef long long;
typedef short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;
typedef unsigned long;
typedef unsigned long long;
typedef unsigned short;
typedef wchar_t;
typedef xpSaiInitParams_s xpSaiInitParams_t;

File ../plugins/sai/SAI/xpSai/xpSaiTunnel.c:
_xpSaiTnlBrPort;
_xpSaiTunnelAttributesT;
_xpSaiTunnelBridgeDbEntry;
_xpSaiTunnelDbEntry;
_xpSaiTunnelEntryDbEntry;
_xpSaiTunnelMapAttributesT;
_xpSaiTunnelMapDbEntry;
_xpSaiTunnelMapEntryAttributesT;
_xpSaiTunnelMapEntryDbEntry;
_xpSaiTunnelTermTableEntryAttributesT;
typedef bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long double;
typedef long long;
typedef short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;
typedef unsigned long;
typedef unsigned long long;
typedef unsigned short;
typedef wchar_t;
typedef _xpSaiTunnelAttributesT xpSaiTunnelAttributesT;
typedef _xpSaiTunnelBridgeDbEntry xpSaiTunnelBridgeInfoT;
typedef _xpSaiTunnelEntryDbEntry xpSaiTunnelEntryInfoT;
typedef _xpSaiTunnelDbEntry xpSaiTunnelInfoT;
typedef _xpSaiTunnelMapAttributesT xpSaiTunnelMapAttributesT;
typedef _xpSaiTunnelMapEntryAttributesT xpSaiTunnelMapEntryAttributesT;
typedef _xpSaiTunnelMapEntryDbEntry xpSaiTunnelMapEntryInfoT;
typedef _xpSaiTunnelMapDbEntry xpSaiTunnelMapInfoT;
typedef _xpSaiTunnelTermTableEntryAttributesT xpSaiTunnelTermTableEntryAttributesT;

File ../plugins/sai/SAI/xpSai/xpSaiUdf.c:
typedef bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long double;
typedef long long;
typedef short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;
typedef unsigned long;
typedef unsigned long long;
typedef unsigned short;
typedef wchar_t;

File ../plugins/sai/SAI/xpSai/xpSaiVirtualRouter.c:
typedef bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long double;
typedef long long;
typedef short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;
typedef unsigned long;
typedef unsigned long long;
typedef unsigned short;
typedef wchar_t;

File ../plugins/sai/SAI/xpSai/xpSaiVlan.c:
typedef bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long double;
typedef long long;
typedef short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;
typedef unsigned long;
typedef unsigned long long;
typedef unsigned short;
typedef wchar_t;

File ../plugins/sai/SAI/xpSai/xpSaiVrf.c:
typedef bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long double;
typedef long long;
typedef short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;
typedef unsigned long;
typedef unsigned long long;
typedef unsigned short;
typedef wchar_t;

File ../plugins/sai/SAI/xpSai/xpSaiWred.c:
typedef bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long double;
typedef long long;
typedef short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;
typedef unsigned long;
typedef unsigned long long;
typedef unsigned short;
typedef wchar_t;

File ../plugins/sai/SAI/xpSaiApp/l2/include/xpSaiAppL2.h:
struct _extPortGroup;
typedef struct {
    uint8_t encapType;
    uint32_t encapId;
} encapEntry;
typedef struct _extPortGroup extPortGroup;
struct xpSaiAppPortVlanParams;
struct xpSaiAppVlanContext;
struct xpSaiAppVlanParams;

File ../plugins/sai/SAI/xpSaiApp/l2/xpSaiAppL2.c:
typedef _Bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long long;
typedef unsigned long long;
typedef unsigned long;
typedef short;
typedef unsigned short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;

File ../plugins/sai/SAI/xpSaiApp/l3/include/xpSaiAppL3.h:
struct xpSaiAppNhContextMap;

File ../plugins/sai/SAI/xpSaiApp/l3/xpSaiAppL3.c:
typedef _Bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long long;
typedef unsigned long long;
typedef unsigned long;
typedef short;
typedef unsigned short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;

File ../plugins/sai/SAI/xpSaiApp/main.c:
typedef _Bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long long;
typedef unsigned long long;
typedef unsigned long;
typedef short;
typedef unsigned short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;

File ../plugins/sai/SAI/xpSaiApp/qos/xpSaiAppQos.c:
typedef _Bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long long;
typedef unsigned long long;
typedef unsigned long;
typedef short;
typedef unsigned short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;

File ../plugins/sai/SAI/xpSaiApp/sai/xpSaiAppSaiUtils.c:
typedef _Bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long long;
typedef unsigned long long;
typedef unsigned long;
typedef short;
typedef unsigned short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;

File ../plugins/sai/SAI/xpSaiApp/tunnel/include/xpSaiAppTnl.h:
struct xpSaiAppIpTunnelData;
typedef enum {XPAPP_IPTNL_TYPE_VXLAN, XPAPP_IPTNL_TYPE_NVGRE, XPAPP_IPTNL_TYPE_GRE, XPAPP_IPTNL_TYPE_IP_OVER_IP, 
    XPAPP_IPTNL_TYPE_GENEVE, XPAPP_IPTNL_TYPE_VPN_GRE, XPAPP_IPTNL_TYPE_VPN_GRE_LOOSE, 
    XPAPP_IPTNL_TYPE_GRE_ERSPAN2} xpSaiAppIpTunnelType;
struct xpSaiAppTnlInfParams;

File ../plugins/sai/SAI/xpSaiApp/tunnel/xpSaiAppMpls.c:
typedef _Bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long long;
typedef unsigned long long;
typedef unsigned long;
typedef short;
typedef unsigned short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;

File ../plugins/sai/SAI/xpSaiApp/tunnel/xpSaiAppTnl.c:
typedef _Bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long long;
typedef unsigned long long;
typedef unsigned long;
typedef short;
typedef unsigned short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;

File ../plugins/sai/SAI/xpSaiApp/xpSaiApp.c:
typedef _Bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long long;
typedef unsigned long long;
typedef unsigned long;
typedef short;
typedef unsigned short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;

File ../plugins/sai/SAI/xpSaiApp/xpSaiAppL3Uc.c:
typedef _Bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long long;
typedef unsigned long long;
typedef unsigned long;
typedef short;
typedef unsigned short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;

File ../utils/allocator/include/xpsAllocatorMgr.h:
xpsAllocatorMgr;

File ../utils/allocator/include/xpsBitVector.h:
xpsBitVector;
xpsBitVector::xpsBitVector_bit_ref;
xpsBitVector::xpsBitVector_range_ref;

File ../utils/allocator/include/xpsGeneric.h:
typedef Generic;
Generic::StackObjAllocator<unsigned int, 5ul>;
Generic::StackObjAllocator<unsigned int, 6ul>;

File ../utils/allocator/include/xpsIdAllocator.h:
xpsIdAllocator;

File ../utils/allocator/include/xpsIdAllocatorCtx.h:
xpsIdAllocatorCtx;

File ../utils/allocator/include/xpsLock.h:
xpsGenLock;

File ../utils/allocator/include/xpsLockArr.h:
xpsLockArray;
xpsLockMgr;
xpsLockOrderedRdAuto;
xpsLockOrderedWrAuto;
xpsLockRdAuto;
xpsLockWrAuto;

File ../utils/allocator/include/xpsMutex.h:
xpsMutex;

File ../utils/allocator/include/xpsMutexBase.h:
xpMutexBase;

File ../utils/allocator/include/xpsMutexDummy.h:
xpMutexDummy;

File ../utils/allocator/include/xpsMutexPosix.h:
xpsMutexPthread;

File ../utils/allocator/include/xpsPersistBitVector.h:
xpsPersistBitVector;
xpsPersistBitVector::xpsPersistBitVector_bit_ref;
xpsPersistBitVector::xpsPersistBitVector_range_ref;

File ../utils/allocator/xpsAllocatorMgr.cpp:
typedef bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long double;
typedef long long;
typedef short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;
typedef unsigned long;
typedef unsigned long long;
typedef unsigned short;
typedef wchar_t;

File ../utils/allocator/xpsBitVector.cpp:
typedef Generic::StackObjAllocator<unsigned int, 6ul> MemUInt32;
typedef bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long double;
typedef long long;
typedef short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;
typedef unsigned long;
typedef unsigned long long;
typedef unsigned short;
typedef wchar_t;

File ../utils/allocator/xpsIdAllocator.cpp:
typedef bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long double;
typedef long long;
typedef short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;
typedef unsigned long;
typedef unsigned long long;
typedef unsigned short;
typedef wchar_t;

File ../utils/allocator/xpsIdAllocatorCtx.cpp:
typedef bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long double;
typedef long long;
typedef short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;
typedef unsigned long;
typedef unsigned long long;
typedef unsigned short;
typedef wchar_t;

File ../utils/allocator/xpsLock.cpp:
typedef __int128 unsigned;
typedef bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long double;
typedef long long;
typedef short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;
typedef unsigned long;
typedef unsigned long long;
typedef unsigned short;
typedef wchar_t;

File ../utils/allocator/xpsLockArr.cpp:
xpLockSortCmp;
typedef bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long double;
typedef long long;
typedef short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;
typedef unsigned long;
typedef unsigned long long;
typedef unsigned short;
typedef wchar_t;

File ../utils/allocator/xpsMutex.cpp:
typedef bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long double;
typedef long long;
typedef short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;
typedef unsigned long;
typedef unsigned long long;
typedef unsigned short;
typedef wchar_t;

File ../utils/allocator/xpsMutexDummy.cpp:
typedef bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long double;
typedef long long;
typedef short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;
typedef unsigned long;
typedef unsigned long long;
typedef unsigned short;
typedef wchar_t;

File ../utils/allocator/xpsMutexPosix.cpp:
tls_rw_cnt_t;
typedef bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long double;
typedef long long;
typedef short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;
typedef unsigned long;
typedef unsigned long long;
typedef unsigned short;
typedef wchar_t;

File ../utils/allocator/xpsPersistBitVector.cpp:
typedef bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long double;
typedef long long;
typedef short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;
typedef unsigned long;
typedef unsigned long long;
typedef unsigned short;
typedef wchar_t;

File ../utils/sal/xpsSal.c:
typedef bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long double;
typedef long long;
typedef short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;
typedef unsigned long;
typedef unsigned long long;
typedef unsigned short;
typedef wchar_t;

File ../utils/state/include/xpsRBTree.h:
xpsColor_e;
xpsRBNode_t;
xpsRBTree_t;
typedef xpsColor_e xpsColor_e;
typedef int32_t (*)(void *, void *) xpsComp_t;
typedef xpsRBNode_t xpsRBNode_t;
typedef xpsRBTree_t xpsRBTree_t;

File ../utils/state/include/xpsState.h:
xpsDbBucket_e;
xpsDbStateHandle_e;
typedef xpsDbBucket_e xpsDbBucket_e;
typedef unsigned int xpsDbHandle_t;
typedef void * xpsDbKey_t;

File ../utils/state/xpsRBTree.c:
xpsDelCase_e;
typedef bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long double;
typedef long long;
typedef short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;
typedef unsigned long;
typedef unsigned long long;
typedef unsigned short;
typedef wchar_t;
typedef xpsDelCase_e xpsDelCase_e;

File ../utils/state/xpsState.c:
typedef bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long double;
typedef long long;
typedef short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;
typedef unsigned long;
typedef unsigned long long;
typedef unsigned short;
typedef wchar_t;

File ../xps/include/openXpsEnums.h:
XP_ACM_CONFIG_MODE;
XP_AGE_MODE_T;
XP_PROFILE_TYPE_E;
_xpPortANLtState;
txMode;
xpAcmClient_e;
xpBdCountMode_e;
xpCountMode_e;
xpCpuTypes;
xpEventType;
xpFecMode;
xpHashField;
xpInitType_t;
xpIpPrefixType_t;
xpL2EncapType_e;
xpMacConfigMode;
xpOfActionType_e;
xpOfFlowType_e;
xpOfGroupType_e;
xpOfMatchPktType_e;
xpOfPacketInReason_e;
xpOfPortNo_e;
xpOfTableType_e;
xpOxmType_e;
xpPacketInterface;
xpPktCmd_e;
xpPolicingResultType;
xpQosMapPfl_t;
xpSalType_e;
xpSerdesDfeTuneMode_t;
xpSkuMode_e;
xpSpeed;
xpVlanBridgeMcMode_e;
xpVlanStgState_e;
xpsDalType_e;
xpsInterfaceType_e;
xpsPolicerType_e;
xpsPortConfigFieldList_t;
xpsPortFrameType_e;
typedef XP_ACM_CONFIG_MODE XP_ACM_CONFIG_MODE;
typedef XP_AGE_MODE_T XP_AGE_MODE_T;
typedef enum XP_PROFILE_TYPE_E XP_PROFILE_TYPE;
enum XP_PROFILE_TYPE_E;
typedef txMode txMode;
typedef xpAcmClient_e xpAcmClient_e;
typedef XP_ACM_CONFIG_MODE xpAcmType_t;
enum xpBdCountMode_e;
enum xpCountMode_e;
typedef xpCpuTypes xpCpuTypes_e;
typedef xpEventType xpEventType;
typedef xpFecMode xpFecMode;
typedef xpHashField xpHashField;
enum xpInitType_t;
enum xpIpPrefixType_t;
enum xpL2EncapType_e;
typedef xpMacConfigMode xpMacConfigMode;
typedef xpOfActionType_e xpOfActionType_e;
typedef xpOfFlowType_e xpOfFlowType_e;
typedef xpOfGroupType_e xpOfGroupType_e;
typedef xpOfMatchPktType_e xpOfMatchPktType_e;
typedef xpOfPacketInReason_e xpOfPacketInReason_e;
typedef xpOfPortNo_e xpOfPortNo_e;
typedef xpOfTableType_e xpOfTableType_e;
typedef xpOxmType_e xpOxmType_e;
enum xpPacketInterface;
enum xpPktCmd_e;
typedef xpPolicingResultType xpPolicingResultType;
typedef _xpPortANLtState xpPortANLtState;
enum xpQosMapPfl_t;
enum xpRxConfigMode;
enum xpSalType_e;
typedef enum xpSalType_e xpSalType_t;
typedef enum {PACKET_DRIVER_TX, PACKET_DRIVER_RX, IPC_SIGNAL, POLL_AGE_FIFO, GET_STATISTICS, SEND_LED_STREAM, TOTAL_TASK_OF_SCPU, 
    ALL_SCPU_TASKS = 6} xpScpuTaskList_e;
typedef xpSerdesDfeTuneMode_t xpSerdesDfeTuneMode_t;
enum xpSkuMode_e;
typedef xpSpeed xpSpeed;
enum xpVlanBridgeMcMode_e;
enum xpVlanStgState_e;
typedef enum xpCountMode_e xpsCountMode_e;
typedef xpsDalType_e xpsDalType_e;
typedef enum xpInitType_t xpsInitType_t;
enum xpsInterfaceType_e;
typedef xpIpPrefixType_t xpsIpPrefixType_e;
typedef enum xpL2EncapType_e xpsL2EncapType_e;
typedef enum xpPktCmd_e xpsPktCmd_e;
typedef xpsPolicerType_e xpsPolicerType_e;
typedef xpsPortConfigFieldList_t xpsPortConfigFieldList_t;
typedef xpSalType_e xpsSalType_e;
typedef xpVlanStgState_e xpsStpState_e;
typedef enum xpVlanBridgeMcMode_e xpsVlanBridgeMcMode_e;
typedef enum xpBdCountMode_e xpsVlanCountMode_e;

File ../xps/include/openXpsFdb.h:
xpsFdbEntry_t;
typedef void (*)(xpsDevice_t, xpsFdbEntry_t) xpFdbAgingHandler;
struct xpsFdbEntry_t;
typedef XP_STATUS (*)(xpsDevice_t, uint32_t, uint32_t, uint32_t, void *, uint16_t, void *) xpsFdbLearnHandler;

File ../xps/include/openXpsInit.h:
xpsDevConfigStruct_t;
xpsRangeProfileType_t;
typedef xpsDevConfigStruct_t xpsDevConfigStruct_t;
typedef xpsRangeProfileType_t xpsRangeProfileType_t;

File ../xps/include/openXpsL3.h:
xpsL3HostEntry_t;
xpsL3NextHopData_t;
xpsL3NextHopEntry_t;
xpsL3NhSwDbEntry_t;
xpsL3RouteEntry_t;
struct xpsL3HostEntry_t;
struct xpsL3NextHopData_t;
struct xpsL3NextHopEntry_t;
typedef xpsL3NhSwDbEntry_t xpsL3NhSwDbEntry_t;
struct xpsL3RouteEntry_t;

File ../xps/include/openXpsLag.h:
xpsLagAutoDistributeControl_e;
xpsLagPortIntfList_s;
typedef xpsLagAutoDistributeControl_e xpsLagAutoDistributeControl_e;
typedef xpsLagPortIntfList_s xpsLagPortIntfList_t;

File ../xps/include/openXpsOpenflow.h:
typedef XP_STATUS (*)(xpsDevice_t, xpDatapath_t, uint32_t, xpOfFlowId_t *, xpOfStats_t *, void *) xpOfFlowStatsFlushHandler;
typedef XP_STATUS (*)(xpsDevice_t, xpDatapath_t, xpOfPacketIn_t *, void *) xpOfPacketInHandler;

File ../xps/include/openXpsPolicer.h:
xpsPolicerEntry_t;
xpsPolicerMode_e;
typedef xpsPolicerEntry_t xpsPolicerEntry_t;
typedef xpsPolicerMode_e xpsPolicerMode_e;

File ../xps/include/openXpsTypes.h:
XP_STATUS_E;
inetAddr_t;
xpCoppEntryData_t;
xpFlowEntry_t;
xpHashIndexList_t;
xpIntEntryData_t;
xpOfActionGroup_t;
xpOfActionOutput_t;
xpOfActionPopMpls_t;
xpOfActionPush_t;
xpOfActionSetField_t;
xpOfActionSetTTL_t;
xpOfAction_t;
xpOfBucket_t;
xpOfFlowIdList_t;
xpOfFlowId_t;
xpOfHash_t;
xpOfInstructions_t;
xpOfIpv4Match_t;
xpOfMatch_t;
xpOfMplsMatch_t;
xpOfPacketField_t;
xpOfPacketIn_t;
xpOfStats_t;
xpOfTableData_t;
xpOfTableInfo_t;
xpOfTableStats_t;
xpOfTcam_t;
xpOpenFlowTableProfile_t;
xpPacketInfo;
xpPortConfig_t;
xp_Statistics;
typedef enum XP_STATUS_E XP_STATUS;
enum XP_STATUS_E;
struct inetAddr_t;
typedef uint8_t [4] ipv4Addr_t;
typedef uint8_t [16] ipv6Addr_t;
typedef uint8_t [5] macAddrHigh_t;
typedef unsigned char macAddrLow_t;
typedef uint8_t [6] macAddr_t;
typedef xpCoppEntryData_t xpCoppEntryData_t;
typedef unsigned int xpDatapath_t;
typedef unsigned int xpDevice_t;
typedef void (*)(xpDevice_t, uint32_t) xpEventHandler;
typedef xpFlowEntry_t xpFlowEntry_t;
struct xpHashIndexList_t;
typedef xpIntEntryData_t xpIntEntryData_t;
typedef xpOfActionGroup_t xpOfActionGroup_t;
typedef xpOfActionOutput_t xpOfActionOutput_t;
typedef xpOfActionPopMpls_t xpOfActionPopMpls_t;
typedef xpOfActionPush_t xpOfActionPush_t;
typedef xpOfActionSetField_t xpOfActionSetField_t;
typedef xpOfActionSetTTL_t xpOfActionSetTTL_t;
typedef xpOfAction_t xpOfAction_t;
typedef xpOfBucket_t xpOfBucket_t;
typedef xpOfFlowIdList_t xpOfFlowIdList_t;
typedef xpOfFlowId_t xpOfFlowId_t;
typedef xpOfHash_t xpOfHash_t;
typedef xpOfInstructions_t xpOfInstructions_t;
typedef xpOfIpv4Match_t xpOfIpv4Match_t;
typedef xpOfMatch_t xpOfMatch_t;
typedef xpOfMplsMatch_t xpOfMplsMatch_t;
typedef xpOfPacketField_t xpOfPacketField_t;
typedef xpOfPacketIn_t xpOfPacketIn_t;
typedef xpOfStats_t xpOfStats_t;
typedef xpOfTableData_t xpOfTableData_t;
typedef xpOfTableStats_t xpOfTableStats_t;
typedef xpOfTcam_t xpOfTcam_t;
typedef xpOpenFlowTableProfile_t xpOpenFlowTableProfile_t;
struct xpPacketInfo;
struct xpPortConfig_t;
typedef unsigned int xpPort_t;
struct xpRecvPacketInfo_t;
typedef unsigned int xpScope_t;
typedef unsigned int xpVif_t;
typedef unsigned short xpVlan_t;
struct xp_Statistics;
typedef unsigned int xpsArpPointer_t;
typedef unsigned int xpsDevice_t;
typedef struct xpHashIndexList_t xpsHashIndexList_t;
typedef unsigned int xpsInterfaceId_t;
typedef xpOfFlowIdList_t xpsOfFlowIdList_t;
typedef struct xpPortConfig_t xpsPortConfig_t;
typedef unsigned int xpsPort_t;
typedef unsigned int xpsScope_t;
typedef unsigned int xpsStp_t;
typedef unsigned short xpsVlan_t;
typedef enum {XPS_VSI_ACCESS_MODE_ETHERNET, XPS_VSI_ACCESS_MODE_VLAN} xpsVsiAccessMode_e;
typedef unsigned int xpsVsi_t;

File ../xps/include/openXpsVlan.h:
xpsVlanConfig_t;
struct xpsVlanConfig_t;

File ../xps/include/xpEnums.h:
XP_ACM_PROFILE_TYPE_E;
XP_DAL_TYPE_E;
XP_DEV_TYPE_E;
XP_PIPE_MODE_E;
xpAllocatorObjectId;
xpBackPlaneAbilityModes;
xpDecodeTrap;
xpDynThldCoeff;
xpDynThldFraction;
xpDynThldOperator;
xpFdbEntryAction_e;
xpFdbFlushType_e;
xpHashOption;
xpL3EncapType_e;
xpLockIndex_e;
xpMacLoopbackLevel;
xpMacRxFault;
xpMacTxFaultGen;
xpPCSDataPattern;
xpPCSEnableTestMode;
xpPCSTestPattern;
xpPolicerStandard_e;
xpPortEnable;
xpPreambleLenBytes;
xpQGuarThresholdGranularity;
xpQosColor;
xpResetPortLevel;
xpRxPreambleLenBytes;
xpSerdesEyeHbtc;
xpSerdesEyeVbtc;
xpSerdesSignalOverride;
xpSerdesTxEq_t;
xpSlaveResetId;
xpWredMode;
xpsAllocatorId;
typedef float Float;
typedef XP_ACM_PROFILE_TYPE_E XP_ACM_PROFILE_TYPE;
enum XP_DAL_TYPE_E;
typedef enum XP_DAL_TYPE_E XP_DAL_TYPE_T;
enum XP_DEV_TYPE_E;
typedef enum XP_DEV_TYPE_E XP_DEV_TYPE_T;
typedef enum XP_PIPE_MODE_E XP_PIPE_MODE;
enum XP_PIPE_MODE_E;
typedef enum {XP_IP_TUNNEL_ECN_MODE_STANDARD, XP_IP_TUNNEL_ECN_MODE_COPY_FROM_OUTER, 
    XP_IP_TUNNEL_ECN_MODE_USER_DEFINED} XpIpTunnelEcnMode_t;
typedef enum {XP_IP_TUNNEL_MODE_PIPE, XP_IP_TUNNEL_MODE_UNIFORM} XpIpTunnelMode_t;
typedef xpBackPlaneAbilityModes xpBackPlaneAbilityModes;
typedef enum {XP_TXQ_EQ_BYPASS_MODE_ALL, XP_TXQ_EQ_BYPASS_MODE_CUT_THRU, XP_TXQ_EQ_BYPASS_MODE_CUT_THRU_NON_MRE_COPY, 
    XP_TXQ_EQ_BYPASS_MODE_NONE} xpBypassMode_e;
typedef xpDecodeTrap xpDecodeTrap;
typedef xpDynThldCoeff xpDynThldCoeff_e;
typedef xpDynThldFraction xpDynThldFraction_e;
typedef xpDynThldOperator xpDynThldOperator_e;
typedef xpFdbEntryAction_e xpFdbEntryAction_e;
typedef xpFdbFlushType_e xpFdbFlushType_e;
typedef enum {XP_FDB_ENTRY_TYPE_DYNAMIC, XP_FDB_ENTRY_TYPE_STATIC, XP_FDB_ENTRY_TYPE_ALL} xpFdbTblEntryType_e;
typedef xpHashOption xpHashOption_e;
typedef enum {XP_LAG, XP_L2ECMP, XP_L3ECMP} xpHashType_e;
typedef enum {XP_IP_VXLAN_TUNNEL, XP_IP_NVGRE_TUNNEL, XP_IP_GRE_TUNNEL, XP_IP_OVER_IP_TUNNEL, XP_IP_GENEVE_TUNNEL, 
    XP_IP_VPN_GRE_TUNNEL, XP_IP_VPN_GRE_TUNNEL_LOOSE, XP_IP_GRE_ERSPAN2_TUNNEL, XP_IP_PBB_TUNNEL, 
    XP_INVALID_TUNNEL} xpIpTunnelType_t;
typedef xpL3EncapType_e xpL3EncapType_e;
typedef enum {ETHERNET, TU_ETHER, ULL_ETHERNET, GTPc = 2, PBB, ARP, IPv4, IPv6, IPv6_SPLIT, MPLS, GRE, ICMP, IGMP, ICMPv6, UDP, TCP, 
    FCoE, FCoE_SPLIT, CNM, SRH = 15, SRH_IP0, SRH_IP1, GENEVE, GRE_NOLAYER, UDPVxLanNsh, NSH, PTP, TUNNEL_IPv6_SPLIT, 
    TUNNEL_IPv6_ICMPv6, TUNNEL_IPv6_UDP, TUNNEL_IPv6_TCP, UDPVxLan, SRH_IP2, INT, GTPu, ETH_NEXT = 30, CFM = 30, IPv6_RH_EXT = 30, 
    LAYER_NA, NUM_LAYERS = 31} xpLayerType_t;
typedef xpMacLoopbackLevel xpMacLoopbackLevel;
typedef xpMacRxFault xpMacRxFault;
typedef xpMacTxFaultGen xpMacTxFaultGen;
typedef enum {XP_MIRROR_LOCAL, XP_MIRROR_ERSPAN2, XP_MIRROR_RSPAN, XP_MTU_MIRROR, XP_MIRROR_PT, XP_MIRROR_TOTAL_TYPE} xpMirrorType_e;
typedef xpPCSDataPattern xpPCSDataPattern;
typedef xpPCSEnableTestMode xpPCSEnableTestMode;
typedef xpPCSTestPattern xpPCSTestPattern;
typedef enum {XP_POLICER_POL_RESULT, XP_POLICER_REMARK_RED, XP_POLICER_REMARK_YELLOW, XP_POLICER_REMARK_GREEN, 
    XP_POLICER_DROP_YELLOW, XP_POLICER_RESERVED0, XP_POLICER_DROP_RED, XP_POLICER_COLOR_AWARE, XP_POLICER_PIR_EXPO, 
    XP_POLICER_PIR_BASE, XP_POLICER_CIR_EXPO, XP_POLICER_CIR_BASE, XP_POLICER_PIR_TIME_GRAN_EXPO, XP_POLICER_PBS_EXPO, 
    XP_POLICER_PBS_BASE, XP_POLICER_CIR_TIME_GRAN_EXPO, XP_POLICER_CBS_EXPO, XP_POLICER_CBS_BASE, 
    XP_POLICER_PACKET_MODE} xpPolicerField_t;
typedef xpPolicerStandard_e xpPolicerStandard_e;
typedef xpPortEnable xpPortEnable;
typedef xpPreambleLenBytes xpPreambleLenBytes;
typedef enum {XP_PT_GLOBAL_SHARED_POOL_WM, XP_PT_GLOBAL_MAX_THRESHOLD, XP_PT_GLOBAL_MC_MAX_THRESHOLD} xpPtGlobalState_e;
typedef enum {XP_PT_NO_MIRROR_MODE, XP_PT_STATE_CHANGE_MODE, XP_PT_LEVEL_CHANGE_MODE, XP_PT_RESERVED} xpPtMirrorModes_e;
typedef enum {XP_PT_PORT_MAX_THRESHOLD, XP_PT_PORT_QUEUE_DYN_MAX_THRESHOLD, XP_PT_PORT_QUEUE_WM, 
    XP_PT_PORT_AVG_QUEUE_WM} xpPtPortState_e;
typedef xpQGuarThresholdGranularity xpQGuarThresholdGranularity_e;
typedef xpQosColor xpQosColor_e;
typedef xpResetPortLevel xpResetPortLevel;
typedef xpRxPreambleLenBytes xpRxPreambleLenBytes;
typedef enum {SERDES_REFCLK, SERDES_PCIE_CORE_CLK, SERDES_TX_F10_CLK_FIXED, SERDES_TX_F40_CLK_FIXED, SERDES_REFCLK_DIV2, 
    SERDES_PCIE_CORE_CLK_DIV2, SERDES_TX_F10_CLK_FIXED_DIV2, SERDES_TX_F40_CLK_FIXED_DIV2, SERDES_XP_TX_DATA_CLK = 2, 
    SERDES_XP_TX_DATA_CLK_DIV2 = 6, SERDES_XP_TX_F20_CLK_FIXED = 14, SERDES_XP_TX_F80_CLK_FIXED} xpSerdesClk_t;
typedef enum {SERDES_NRZ, SERDES_PAM2 = 0, SERDES_PAM4} xpSerdesEncodingMode_t;
typedef xpSerdesEyeHbtc xpSerdesEyeHbtc_t;
typedef xpSerdesEyeVbtc xpSerdesEyeVbtc_t;
typedef enum {SERDES_UNKNOWN_IP, SERDES, SERDES_SBUS_CONTROLLER, SERDES_SPICO, SERDES_QPI, SERDES_FBD, SERDES_PCS64B66B, 
    SERDES_AUTO_NEGOTIATION, SERDES_PCS64B66B_FEC, SERDES_PCIE_PCS, SERDES_PLL, SERDES_PMRO, SERDES_DDR_ADDRESS, SERDES_DDR_DATA, 
    SERDES_DDR_TRAIN, SERDES_DDR_CTC, SERDES_DDR_STOP, SERDES_THERMAL_SENSOR, SERDES_RMON, SERDES_LINK_EMULATOR, 
    SERDES_AVSP_CONTROL_LOGIC, SERDES_M4, SERDES_P1, SERDES_MLD, SERDES_RSFEC_BRIDGE, SERDES_CROSSPOINT, SERDES_SAPPH_GBX = 32, 
    SERDES_SAPPH_GBX_TOP, SERDES_OPAL_RSFEC528, SERDES_OPAL_RSFEC528_544, SERDES_OPAL_HOST_ALIGNER, SERDES_OPAL_MOD_ALIGNER, 
    SERDES_OPAL_CONTROL, SERDES_LINK_EMULATOR_2 = 129, SERDES_SLE_PKT, SERDES_SLE, SERDES_RAM_PMRO, SERDES_PANDORA_LSB, 
    SERDES_MAX_RING_ADDRESS = 223, SERDES_SERDES_P1_BROADCAST = 237, SERDES_SERDES_M4_BROADCAST, SERDES_SERDES_D6_BROADCAST = 255, 
    SERDES_THERMAL_SENSOR_BROADCAST = 239, SERDES_DDR_STOP_BROADCAST, SERDES_DDR_CTC_BROADCAST, SERDES_DDR_TRAIN_BROADCAST, 
    SERDES_DDR_DATA_BROADCAST, SERDES_DDR_ADDRESS_BROADCAST, SERDES_PMRO_BROADCAST, SERDES_RESERVED_BROADCAST, 
    SERDES_PCIE_PCS_BROADCAST, SERDES_PCS64B66B_BROADCAST, SERDES_AUTO_NEGOTIATION_BROADCAST, SERDES_FBD_BROADCAST = 251, 
    SERDES_QPI_BROADCAST, SERDES_SPICO_BROADCAST, SERDES_BROADCAST = 255} xpSerdesIpType_t;
typedef enum {XP_SERDES_DEBUG0, XP_SERDES_DEBUG1, XP_SERDES_DEBUG2, XP_SERDES_DEBUG3, XP_SERDES_DEBUG4, XP_SERDES_DEBUG5, 
    XP_SERDES_DEBUG6, XP_SERDES_DEBUG7, XP_SERDES_DEBUG8, XP_SERDES_DEBUG9, XP_SERDES_MEM_LOG, XP_SERDES_DATA_CHAR, 
    XP_SERDES_DATA_CHAR_ADD, XP_SERDES_ERR, XP_SERDES_WARNING, XP_SERDES_INFO} xpSerdesLogType_t;
typedef enum {ESB, ESB_DIRECT, LSB, LSB_DIRECT, DMEM, DMEM_PREHALTED, IMEM, IMEM_PREHALTED, BIG_REG_16, 
    BIG_REG_32} xpSerdesMemType_t;
typedef enum {SERDES_RX_CMP_DATA_PRBS7, SERDES_RX_CMP_DATA_PRBS9, SERDES_RX_CMP_DATA_PRBS11, SERDES_RX_CMP_DATA_PRBS15, 
    SERDES_RX_CMP_DATA_PRBS23, SERDES_RX_CMP_DATA_PRBS31, SERDES_RX_CMP_DATA_PRBS13, SERDES_RX_CMP_DATA_SELF_SEED, 
    SERDES_RX_CMP_DATA_OFF} xpSerdesRxCmpData_t;
typedef enum {SERDES_RX_CMP_MODE_OFF, SERDES_RX_CMP_MODE_XOR = 256, SERDES_RX_CMP_MODE_TEST_PATGEN = 288, 
    SERDES_RX_CMP_MODE_MAIN_PATGEN = 512} xpSerdesRxCmpMode_t;
typedef enum {SERDES_RX_DATA_QUAL_UNQUAL, SERDES_RX_DATA_QUAL_DEFAULT = 256, SERDES_RX_DATA_QUAL_UNLOCK, 
    SERDES_RX_DATA_QUAL_EVEN = 16384, SERDES_RX_DATA_QUAL_ODD = 32768, SERDES_RX_DATA_QUAL_PREV0 = 8192, 
    SERDES_RX_DATA_QUAL_PREV1 = 10240, SERDES_RX_DATA_QUAL_PREV0E = 24576, SERDES_RX_DATA_QUAL_PREV1E = 26624, 
    SERDES_RX_DATA_QUAL_PREV0O = 40960, SERDES_RX_DATA_QUAL_PREV1O = 43008} xpSerdesRxDataQual_t;
typedef enum {SERDES_RX_TERM_AGND, SERDES_RX_TERM_AVDD, SERDES_RX_TERM_FLOAT} xpSerdesRxTerm_t;
typedef enum {SERDES_TX_DATA_SEL_PRBS7, SERDES_TX_DATA_SEL_PRBS9, SERDES_TX_DATA_SEL_PRBS11, SERDES_TX_DATA_SEL_PRBS15, 
    SERDES_TX_DATA_SEL_PRBS23, SERDES_TX_DATA_SEL_PRBS31, SERDES_TX_DATA_SEL_PRBS13, SERDES_TX_DATA_SEL_USER, 
    SERDES_TX_DATA_SEL_CORE, SERDES_TX_DATA_SEL_LOOPBACK, SERDES_TX_DATA_SEL_PMD, SERDES_TX_DATA_SEL_AN} xpSerdesTxDataSel_t;
typedef xpSerdesTxEq_t xpSerdesTxEq_t;
typedef enum {SERDES_TX_PLL_REFCLK, SERDES_TX_PLL_RX_DIVX = 16, SERDES_TX_PLL_OFF = 48, SERDES_TX_PLL_PCIE_CORE_CLK = 112, 
    SERDES_TX_PLL_PCIE_CORE_CLK_DIV2 = 240} xpSerdesTxPllClk_t;
typedef xpSlaveResetId xpSlaveResetId_e;
typedef enum {XP_URPF_MODE_LOOSE, XP_URPF_MODE_STRICT, XP_URPF_MODE_MAX} xpUrpfMode_e;
typedef enum {UNTAG, TAG, PRI_TAG, QINQ, STRIP_OUTER, ENCAP_MAX} xpVlanEncap_t;
typedef enum {NAT_DISABLE, NAT_IP_ONLY, NAT_IP_PORT, NAT_SIP_AND_DIP, NAT_MAX} xpVlanNatMode_e;
typedef enum {MC_ROUTE_MODE_S_G_V, MC_ROUTE_MODE_0_G_V, MC_ROUTE_MODE_MAX} xpVlanRouteMcMode_t;
enum xpWredMode;
typedef enum xpWredMode xpWredMode_e;
typedef enum {XP_XOR_FIELD01, XP_XOR_FIELD12, XP_XOR_FIELD23, XP_XOR_MAX_FIELDS} xpXorFieldType_t;
typedef xpsAllocatorId xpsAllocatorId;

File ../xps/include/xpTypes.h:
XP_DIR_E;
XP_SPEED_E;
_xphRxHdrMetaData__;
_xphRxHdr__;
_xphTxHdrMetaData__;
_xphTxHdr__;
xpDmaConfigInfo;
xpEgressCosMapData_t;
xpGeneveData_t;
xpL2Encapdata_t;
xpLpmSubTrieMode;
xpNvgreData_t;
xpPbbData_t;
xpPolicerResult_t;
xpPolicingResultColor;
xpPortsList_t;
xpTimeStamp;
xpTxqQueuePathToPort;
xpVlanData_t;
xpVxlanData_t;
xpsIpGreTunnelConfig_t;
xpsIpinIpTunnelConfig_t;
enum MULTICAST_TYPE_E;
enum XP_DIR_E;
typedef enum XP_PVLAN_TYPE_E XP_PVLAN_TYPE;
enum XP_PVLAN_TYPE_E;
typedef XP_SPEED_E XP_SPEED;
typedef enum {NOT_APPLICABLE, WIDTH_64 = 65, WIDTH_128 = 130, WIDTH_192 = 195, WIDTH_384 = 390} XP_TCAM_WIDTH_T;
struct _xphRxHdrMetaData__;
struct _xphRxHdr__;
struct _xphTxHdrMetaData__;
struct _xphTxHdr__;
typedef uint8_t [6] compIpv6Addr_t;
typedef XP_STATUS (*)(xpDevice_t, uint8_t, uint8_t, xpMacConfigMode, char *, uint8_t *, uint8_t *, void *) getChassisPortInfoFunc;
typedef XP_STATUS (*)(xpDevice_t, uint8_t, uint32_t, uint32_t, uint32_t, uint8_t *, uint8_t *) platformSerdesInitFunc;
struct rxQueueWeightInfo;
typedef unsigned int xpAcm_t;
typedef enum {XP_CORE_CLK_FREQ_400_MHZ, XP_CORE_CLK_FREQ_500_MHZ, XP_CORE_CLK_FREQ_550_MHZ, XP_CORE_CLK_FREQ_600_MHZ, 
    XP_CORE_CLK_FREQ_633_MHZ, XP_CORE_CLK_FREQ_650_MHZ, XP_CORE_CLK_FREQ_683_MHZ, XP_CORE_CLK_FREQ_700_MHZ, 
    XP_CORE_CLK_FREQ_733_MHZ, XP_CORE_CLK_FREQ_750_MHZ, XP_CORE_CLK_FREQ_783_MHZ, XP_CORE_CLK_FREQ_800_MHZ, 
    XP_CORE_CLK_FREQ_833_MHZ, XP_CORE_CLK_FREQ_850_MHZ, XP_CORE_CLK_FREQ_900_MHZ, XP_CORE_CLK_FREQ_950_MHZ, 
    XP_CORE_CLK_FREQ_1000_MHZ, XP_CORE_CLK_FREQ_MAX} xpCoreClkFreq_t;
struct xpDmaConfigInfo;
typedef xpEgressCosMapData_t xpEgressCosMapData_t;
typedef unsigned int xpEgressFilter_t;
typedef void *(*)(void *) xpEventSignalHandler;
struct xpGeneveData_t;
struct xpL2DomainCtx_t;
enum xpL2DomainType_t;
struct xpL2EncapEntry;
typedef struct xpL2EncapEntry xpL2EncapEntry_t;
struct xpL2EncapHead;
typedef struct xpL2EncapHead xpL2EncapHead_t;
struct xpL2EncapNode;
typedef struct xpL2EncapNode xpL2EncapNode_t;
union xpL2Encapdata_t;
typedef xpLpmSubTrieMode xpLpmSubTrieMode;
typedef unsigned int xpMcastDomainId_t;
struct xpNvgreData_t;
struct xpPbbData_t;
typedef unsigned char xpPeg_t;
typedef xpPolicerResult_t xpPolicerResult_t;
typedef xpPolicingResultColor xpPolicingResultColor;
typedef uint32_t [264] xpPortArr_t;
typedef std::vector<unsigned int, std::allocator<unsigned int> > xpPortList_t;
typedef struct {
    uint32_t size;
    xpPortArr_t portList;
} xpPortsList_t;
struct xpTimeStamp;
typedef enum {XP_BOOTUP_ALL, XP_APP_NEW_DEVICE_INIT, XP_INIT_ADD_DEVICE, XP_VLAN_ADD_DEVICE, XP_TUNNEL_ADD_DEVICE, 
    XP_LINK_ADD_DEVICE, XP_DEVICE_INIT, XP_TXQMGR_INIT, XP_PORT_INIT, XP_SINGLE_PORT_INIT, XP_MAC_INIT, XP_SERDES_ILB, 
    XP_SERDES_SETUP, XP_SERDES_FW_UPLOAD, XP_MAX_FUNCTION} xpTimeStampFun_t;
typedef struct xpTimeStamp xpTimeStamp_t;
typedef xpTxqQueuePathToPort xpTxqQueuePathToPort_t;
struct xpVlanData_t;
struct xpVxlanData_t;
typedef enum {XP_WCM_INSTR_NONE, XP_WCM_INSTR_NOT_MATCH, XP_WCM_INSTR_MATCH, XP_WCM_INSTR_IN_RANGE, XP_WCM_INSTR_OUT_RANGE, 
    XP_WCM_MAX_INSTR} xpWcmInstrType_t;
typedef struct _xphRxHdr__ xphRxHdr;
typedef struct _xphRxHdrMetaData__ xphRxHdrMetaData;
typedef struct _xphTxHdr__ xphTxHdr;
typedef struct _xphTxHdrMetaData__ xphTxHdrMetaData;
struct xpsIpGreTunnelConfig_t;
struct xpsIpinIpTunnelConfig_t;
typedef struct {
    uint32_t size;
    xpPortArr_t portList;
} xpsPortList_t;

File ../xps/include/xpsAc.h:
xpsAcConfig_t;
xpsAcInfo_t;
typedef xpsAcConfig_t xpsAcConfig_t;
typedef xpsAcInfo_t xpsAcInfo_t;

File ../xps/include/xpsAcl.h:
udbConfig;
xpAclTableInfo;
xpsAclCounterIdMappingContextDbEntry;
xpsAclEntryContextDbEntry;
xpsAclKeyFormat;
xpsAclStage;
xpsAclTableContextDbEntry;
xpsAclTableType;
xpsAclTableVtcamMapContextDbEntry;
xpsAclkeyField;
xpsAclkeyFieldList;
xpsDefineKeyConfig;
xpsIaclKeyFlds;
xpsVTcamInfo;
typedef enum {GT_FALSE, GT_TRUE} XPS_BOOL;
struct xpAclTableInfo;
typedef xpAclTableInfo xpAclTableInfo_t;
typedef xpsAclCounterIdMappingContextDbEntry xpsAclCounterIdMappingContextDbEntry_t;
typedef enum {XPS_ACL_DIRECTION_INGRESS, XPS_ACL_DIRECTION_EGRESS} xpsAclDirection;
typedef xpsAclEntryContextDbEntry xpsAclEntryContextDbEntry_t;
typedef xpsIaclKeyFlds xpsAclKeyFlds_t;
typedef xpsAclKeyFormat xpsAclKeyFormat;
typedef enum {XPS_ACL_PARALLEL_LOOKUP_0, XPS_ACL_PARALLEL_LOOKUP_1, XPS_ACL_PARALLEL_LOOKUP_2, XPS_ACL_PARALLEL_LOOKUP_3, 
    XPS_ACL_PARALLEL_LOOKUP_INVALID} xpsAclParallelLookUp;
enum xpsAclStage;
typedef xpsAclStage xpsAclStage_e;
typedef xpsAclTableContextDbEntry xpsAclTableContextDbEntry_t;
enum xpsAclTableType;
typedef xpsAclTableType xpsAclTableType_t;
typedef xpsAclTableVtcamMapContextDbEntry xpsAclTableVtcamMapContextDbEntry_t;
typedef enum {XPS_VIRTUAL_TCAM_RULE_ADDITION_METHOD_LOGICAL_INDEX_E, 
    XPS_VIRTUAL_TCAM_RULE_ADDITION_METHOD_PRIORITY_E} xpsAclTcamRuleAdditionMethod_e;
typedef enum {XPS_VIRTUAL_TCAM_RULE_SIZE_10_B_E, XPS_VIRTUAL_TCAM_RULE_SIZE_20_B_E, XPS_VIRTUAL_TCAM_RULE_SIZE_30_B_E, 
    XPS_VIRTUAL_TCAM_RULE_SIZE_40_B_E, XPS_VIRTUAL_TCAM_RULE_SIZE_50_B_E, XPS_VIRTUAL_TCAM_RULE_SIZE_60_B_E, 
    XPS_VIRTUAL_TCAM_RULE_SIZE_80_B_E = 7, XPS_VIRTUAL_TCAM_RULE_SIZE_STD_E = 2, XPS_VIRTUAL_TCAM_RULE_SIZE_EXT_E = 5, 
    XPS_VIRTUAL_TCAM_RULE_SIZE_ULTRA_E = 7} xpsAclVTcamRuleSize_e;
struct xpsAclkeyField;
struct xpsAclkeyFieldList;
typedef xpsAclkeyFieldList xpsAclkeyFieldList_t;
typedef xpsAclkeyField xpsAclkeyField_t;
typedef xpsDefineKeyConfig xpsDefineKeyConfig_t;
enum xpsIaclKeyFlds;
typedef CPSS_DXCH_PCL_ACTION_STC xpsPclAction_t;
typedef CPSS_DXCH_PCL_RULE_FORMAT_EGRESS_UDB_ONLY_STC xpsPclRuleFormatEgrUdbOnly_t;
typedef CPSS_DXCH_PCL_RULE_FORMAT_INGRESS_UDB_ONLY_STC xpsPclRuleFormatIngrUdbOnly_t;
typedef CPSS_DXCH_PCL_RULE_FORMAT_UNT xpsPclRuleFormat_t;
typedef enum {CPSS_DXCH_PCL_RULE_FORMAT_INGRESS_STD_NOT_IP_E, CPSS_DXCH_PCL_RULE_FORMAT_INGRESS_STD_IP_L2_QOS_E, 
    CPSS_DXCH_PCL_RULE_FORMAT_INGRESS_STD_IPV4_L4_E, CPSS_DXCH_PCL_RULE_FORMAT_INGRESS_STD_IPV6_DIP_E, 
    CPSS_DXCH_PCL_RULE_FORMAT_INGRESS_EXT_NOT_IPV6_E, CPSS_DXCH_PCL_RULE_FORMAT_INGRESS_EXT_IPV6_L2_E, 
    CPSS_DXCH_PCL_RULE_FORMAT_INGRESS_EXT_IPV6_L4_E, CPSS_DXCH_PCL_RULE_FORMAT_EGRESS_STD_NOT_IP_E, 
    CPSS_DXCH_PCL_RULE_FORMAT_EGRESS_STD_IP_L2_QOS_E, CPSS_DXCH_PCL_RULE_FORMAT_EGRESS_STD_IPV4_L4_E, 
    CPSS_DXCH_PCL_RULE_FORMAT_EGRESS_EXT_NOT_IPV6_E, CPSS_DXCH_PCL_RULE_FORMAT_EGRESS_EXT_IPV6_L2_E, 
    CPSS_DXCH_PCL_RULE_FORMAT_EGRESS_EXT_IPV6_L4_E, CPSS_DXCH_PCL_RULE_FORMAT_INGRESS_STD_UDB_E, 
    CPSS_DXCH_PCL_RULE_FORMAT_INGRESS_EXT_UDB_E, CPSS_DXCH_PCL_RULE_FORMAT_INGRESS_STD_IPV4_ROUTED_ACL_QOS_E, 
    CPSS_DXCH_PCL_RULE_FORMAT_INGRESS_EXT_IPV4_PORT_VLAN_QOS_E, CPSS_DXCH_PCL_RULE_FORMAT_INGRESS_ULTRA_IPV6_PORT_VLAN_QOS_E, 
    CPSS_DXCH_PCL_RULE_FORMAT_INGRESS_ULTRA_IPV6_ROUTED_ACL_QOS_E, CPSS_DXCH_PCL_RULE_FORMAT_EGRESS_EXT_IPV4_RACL_VACL_E, 
    CPSS_DXCH_PCL_RULE_FORMAT_EGRESS_ULTRA_IPV6_RACL_VACL_E, CPSS_DXCH_PCL_RULE_FORMAT_INGRESS_UDB_10_E, 
    CPSS_DXCH_PCL_RULE_FORMAT_INGRESS_UDB_20_E, CPSS_DXCH_PCL_RULE_FORMAT_INGRESS_UDB_30_E, 
    CPSS_DXCH_PCL_RULE_FORMAT_INGRESS_UDB_40_E, CPSS_DXCH_PCL_RULE_FORMAT_INGRESS_UDB_50_E, 
    CPSS_DXCH_PCL_RULE_FORMAT_INGRESS_UDB_60_E, CPSS_DXCH_PCL_RULE_FORMAT_EGRESS_UDB_10_E, 
    CPSS_DXCH_PCL_RULE_FORMAT_EGRESS_UDB_20_E, CPSS_DXCH_PCL_RULE_FORMAT_EGRESS_UDB_30_E, CPSS_DXCH_PCL_RULE_FORMAT_EGRESS_UDB_40_E, 
    CPSS_DXCH_PCL_RULE_FORMAT_EGRESS_UDB_50_E, CPSS_DXCH_PCL_RULE_FORMAT_EGRESS_UDB_60_E, 
    CPSS_DXCH_PCL_RULE_FORMAT_INGRESS_UDB_60_NO_FIXED_FIELDS_E, CPSS_DXCH_PCL_RULE_FORMAT_INGRESS_UDB_80_E, 
    CPSS_DXCH_PCL_RULE_FORMAT_EGRESS_UDB_60_NO_FIXED_FIELDS_E, CPSS_DXCH_PCL_RULE_FORMAT_LAST_E} xpsRuleFormat_t;
struct xpsVTcamInfo;
typedef xpsVTcamInfo xpsVTcamInfo_t;
typedef CPSS_DXCH_VIRTUAL_TCAM_RULE_DATA_STC xpsVirtualTcamRuleData_t;
typedef CPSS_DXCH_VIRTUAL_TCAM_RULE_TYPE_STC xpsVirtualTcamRuleType_t;

File ../xps/include/xpsAging.h:
xpAgeFifoData;
typedef xpAgeFifoData xpAgeFifoData;

File ../xps/include/xpsCopp.h:
typedef enum {XPS_COPP_CTRL_PKT_ARP_REQUEST, XPS_COPP_CTRL_PKT_ARP_RESPONSE, XPS_COPP_CTRL_PKT_BGP, XPS_COPP_CTRL_PKT_BGPV6, 
    XPS_COPP_CTRL_PKT_DHCP, XPS_COPP_CTRL_PKT_DHCPV6, XPS_COPP_CTRL_PKT_EAPOL, XPS_COPP_CTRL_PKT_IGMP_TYPE_LEAVE, 
    XPS_COPP_CTRL_PKT_IGMP_TYPE_QUERY, XPS_COPP_CTRL_PKT_IGMP_TYPE_V1_REPORT, XPS_COPP_CTRL_PKT_IGMP_TYPE_V2_REPORT, 
    XPS_COPP_CTRL_PKT_IGMP_TYPE_V3_REPORT, XPS_COPP_CTRL_PKT_IP2ME, XPS_COPP_CTRL_PKT_IPV6_MLD_V1_DONE, 
    XPS_COPP_CTRL_PKT_IPV6_MLD_V1_REPORT, XPS_COPP_CTRL_PKT_IPV6_MLD_V1_V2, XPS_COPP_CTRL_PKT_IPV6_NEIGHBOR_DISCOVERY, 
    XPS_COPP_CTRL_PKT_L3_MTU_ERROR, XPS_COPP_CTRL_PKT_LACP, XPS_COPP_CTRL_PKT_LLDP, XPS_COPP_CTRL_PKT_MLD_V2_REPORT, 
    XPS_COPP_CTRL_PKT_OSPF, XPS_COPP_CTRL_PKT_OSPFV6, XPS_COPP_CTRL_PKT_PIM, XPS_COPP_CTRL_PKT_PVRST, 
    XPS_COPP_CTRL_PKT_SAMPLEPACKET, XPS_COPP_CTRL_PKT_SNMP, XPS_COPP_CTRL_PKT_SSH, XPS_COPP_CTRL_PKT_STP, 
    XPS_COPP_CTRL_PKT_TTL_ERROR, XPS_COPP_CTRL_PKT_UDLD, XPS_COPP_CTRL_PKT_VRRP, XPS_COPP_CTRL_PKT_VRRPV6, 
    XPS_COPP_CTRL_PKT_MAX} xpsCoppCtrlPkt_e;

File ../xps/include/xpsEnums.h:
typedef enum {XPS_AC_ALL_TAGGED, XPS_AC_ALL_UNTAGGED, XPS_AC_OUTER_VID, XPS_AC_OUTER_VID_ONLY_TAGGED, XPS_AC_DEFAULT, 
    XPS_AC_MAX_TYPES} xpsAcMatchType_e;
typedef XP_DIR_E xpsDirection_t;
typedef unsigned int xpsEgressFilter_t;
typedef enum {XPS_FDB_PKT_CMD, XPS_FDB_IS_CONTROL_MAC, XPS_FDB_IS_ROUTER_MAC, XPS_FDB_IS_STATIC_MAC} xpsFdbAttribute_e;
typedef xpFdbEntryAction_e xpsFdbEntryAction_e;
typedef unsigned char xpsPeg_t;
typedef enum {VLAN_NONE, VLAN_PRIMARY, VLAN_COMMUNITY, VLAN_ISOLATED, VLAN_MAX} xpsPrivateVlanType_e;
typedef enum {XPS_VXLAN_TUNNEL, XPS_NVGRE_TUNNEL, XPS_GENEVE_TUNNEL, XPS_PBB_TUNNEL, XPS_INVALID_TUNNEL} xpsServiceInstanceType_e;
typedef enum {XP_URPF_MODE_LOOSE, XP_URPF_MODE_STRICT, XP_URPF_MODE_MAX} xpsUrpfMode_e;
typedef enum {NAT_DISABLE, NAT_IP_ONLY, NAT_IP_PORT, NAT_SIP_AND_DIP, NAT_MAX} xpsVlanNatMode_e;

File ../xps/include/xpsFdb.h:
xpsFlushParams;
typedef XP_STATUS (*)(xpsDevice_t, xpsFdbEntry_t, xpsFdbEntryAction_e) xpFdbLearnHandler;
typedef enum {XP_FDB_ENTRY_TYPE_DYNAMIC, XP_FDB_ENTRY_TYPE_STATIC, XP_FDB_ENTRY_TYPE_ALL} xpsFdbEntryType_e;
typedef xpsFlushParams xpsFlushParams;

File ../xps/include/xpsGeneve.h:
xpsGeneveFormatType_t;
xpsGeneveTunnelConfig_t;
enum xpsGeneveFormatType_t;
struct xpsGeneveTunnelConfig_t;

File ../xps/include/xpsInit.h:
xpCfgTblEntryCountStruct;
xpDevConfigStruct;
xpPacketDriverConfig;
typedef xpCfgTblEntryCountStruct xpCfgTblEntryCountStruct;
struct xpDevConfigStruct;
struct xpPacketDriverConfig;
typedef struct xpPacketDriverConfig xpPcktDrvConfig;
typedef XP_PROFILE_TYPE_E xpsDevProfileType_t;
typedef XP_DEV_TYPE_E xpsDevType_t;

File ../xps/include/xpsInterface.h:
xpsInterfaceInfo_t;
xpsInterfaceInfo_t::interfaceMappingInfo_t;
struct interfaceMappingInfo_t;
typedef xpsInterfaceInfo_t xpsInterfaceInfo_t;

File ../xps/include/xpsL3.h:
xpsArpInfo_t;
xpsArpState;
xpsL3StatsInfo_s;
xpsMac2MeInfo_t;
typedef xpsArpInfo_t xpsArpInfo_t;
typedef xpsArpState xpsArpState_t;
typedef xpsL3StatsInfo_s xpsL3StatsInfo_t;
typedef xpsMac2MeInfo_t xpsMac2MeInfo_t;

File ../xps/include/xpsLag.h:
xpLagDbEntry_t;
xpLagDistributionEntry_t;
xpsLagHashAlgoType_e;
xpsLagPortOperState_e;
typedef xpLagDbEntry_t xpLagDbEntry_t;
typedef xpLagDistributionEntry_t xpLagDistributionEntry_t;
typedef xpsLagHashAlgoType_e xpsLagHashAlgoType_e;

File ../xps/include/xpsMirror.h:
xpMirrorData_t;
xpMirrorErspan2Data_t;
xpMirrorRspanData_t;
xpMirrorSpanData_t;
typedef xpMirrorData_t xpMirrorData_t;
typedef xpMirrorErspan2Data_t xpMirrorErspan2Data_t;
typedef xpMirrorRspanData_t xpMirrorRspanData_t;
typedef xpMirrorSpanData_t xpMirrorSpanData_t;
typedef xpMirrorData_t xpsMirrorData_t;
typedef enum {XP_MIRROR_LOCAL, XP_MIRROR_ERSPAN2, XP_MIRROR_RSPAN, XP_MTU_MIRROR, XP_MIRROR_PT, 
    XP_MIRROR_TOTAL_TYPE} xpsMirrorType_e;

File ../xps/include/xpsMpls.h:
xpMplsLabelOper;
xpsMplsLabelEntry_t;
xpsMplsMpTunnelData_t;
xpsMplsTunnelKey_t;
xpsMplsTunnelParams_t;
xpsMplsUhpLabelData_t;
xpsMplsVpnGreLooseModeParams_t;
xpsMplsVpnParams_t;
enum xpMplsLabelOper;
struct xpsMplsLabelEntry_t;
struct xpsMplsMpTunnelData_t;
struct xpsMplsTunnelKey_t;
union xpsMplsTunnelParams_t;
struct xpsMplsUhpLabelData_t;
struct xpsMplsVpnGreLooseModeParams_t;
struct xpsMplsVpnParams_t;

File ../xps/include/xpsMtuProfile.h:
xpsMtuMap;
typedef enum {MTU_L3_PROFILE_INDEX0, MTU_L3_PROFILE_INDEX1, MTU_L3_PROFILE_INDEX2, MTU_L3_PROFILE_INDEX3, MTU_L3_PROFILE_INDEX4, 
    MTU_L3_PROFILE_INDEX5, MTU_L3_PROFILE_INDEX6, MTU_L3_PROFILE_INDEX7, MTU_L3_PROFILE_INDEX_MAX_VAL} xpsMtuL3ProfileIndex_e;
typedef xpsMtuMap xpsMtuMap_t;
typedef enum {MTU_PROFILE_INDEX0, MTU_PROFILE_INDEX1, MTU_PROFILE_INDEX2, MTU_PROFILE_INDEX3, 
    MTU_PROFILE_INDEX_MAX_VAL} xpsMtuProfileIndex_e;

File ../xps/include/xpsMulticast.h:
_xpIPv4MulticastBridgeEntry_;
_xpIPv4MulticastPimBidirRpfEntry_;
_xpIPv4MulticastRouteEntry_;
_xpIPv6MulticastBridgeEntry_;
_xpIPv6MulticastRouteEntry_;
struct _xpIPv4MulticastBridgeEntry_;
struct _xpIPv4MulticastPimBidirRpfEntry_;
struct _xpIPv4MulticastRouteEntry_;
struct _xpIPv6MulticastBridgeEntry_;
struct _xpIPv6MulticastRouteEntry_;
typedef void (*)(xpDevice_t, uint32_t *, void *) multicastAgingHandler;
typedef struct _xpIPv4MulticastBridgeEntry_ xpIPv4MulticastBridgeEntry_t;
typedef struct _xpIPv4MulticastPimBidirRpfEntry_ xpIPv4MulticastPimBidirRpfEntry_t;
typedef struct _xpIPv4MulticastRouteEntry_ xpIPv4MulticastRouteEntry_t;
typedef struct _xpIPv6MulticastBridgeEntry_ xpIPv6MulticastBridgeEntry_t;
typedef struct _xpIPv6MulticastRouteEntry_ xpIPv6MulticastRouteEntry_t;
typedef enum {XP_MC_PKTCMD_FWD = 1, XP_MC_PKTCMD_DROP = 0, XP_MC_PKTCMD_TRAP = 2, XP_MC_PKTCMD_MAX} xpMulticastPktCmdType_e;
typedef enum {XP_MC_RPF_CHECK_TYPE_PORT, XP_MC_RPF_CHECK_TYPE_BD, XP_MC_RPF_CHECK_TYPE_VIF, XP_MC_RPF_CHECK_TYPE_PIMBIDIR, 
    XP_MC_RPF_CHECK_TYPE_MAX} xpMulticastRpfCheckType_e;
typedef enum {XP_MC_RPF_FAIL_CMD_DEFER_TO_EGRESS = 1, XP_MC_RPF_FAIL_CMD_TRAP, XP_MC_RPF_FAIL_CMD_MAX} xpMulticastRpfFailCmd_e;
typedef unsigned int xpsMcL2InterfaceListId_t;
typedef unsigned int xpsMcL3InterfaceListId_t;
typedef unsigned int xpsMcastDomainId_t;
typedef struct _xpIPv4MulticastBridgeEntry_ xpsMulticastIPv4BridgeEntry_t;
typedef struct _xpIPv4MulticastPimBidirRpfEntry_ xpsMulticastIPv4PimBidirRpfEntry_t;
typedef struct _xpIPv4MulticastRouteEntry_ xpsMulticastIPv4RouteEntry_t;
typedef struct _xpIPv6MulticastBridgeEntry_ xpsMulticastIPv6BridgeEntry_t;
typedef struct _xpIPv6MulticastRouteEntry_ xpsMulticastIPv6RouteEntry_t;
typedef enum {XP_MC_PKTCMD_FWD = 1, XP_MC_PKTCMD_DROP = 0, XP_MC_PKTCMD_TRAP = 2, XP_MC_PKTCMD_MAX} xpsMulticastPktCmdType_e;

File ../xps/include/xpsNat.h:
__xpsNatEntryData_t;
__xpsNatEntryKey_t;
__xpsNatEntryMask_t;
struct __xpsNatEntryData_t;
struct __xpsNatEntryKey_t;
struct __xpsNatEntryMask_t;
typedef struct __xpsNatEntryData_t xpsNatEntryData_t;
typedef struct __xpsNatEntryKey_t xpsNatEntryKey_t;
typedef struct __xpsNatEntryMask_t xpsNatEntryMask_t;

File ../xps/include/xpsNhGrp.h:
xpsL3NextHopGroupEntry_t;
xpsL3NextHopGroupStaticDataType_e;
xpsL3NextHopGroupStaticEntry_t;
typedef xpsL3NextHopGroupEntry_t xpsL3NextHopGroupEntry_t;
typedef xpsL3NextHopGroupStaticDataType_e xpsL3NextHopGroupStaticDataType_e;
typedef xpsL3NextHopGroupStaticEntry_t xpsL3NextHopGroupStaticEntry_t;

File ../xps/include/xpsNvgre.h:
xpsNvgreTunnelConfig_t;
struct xpsNvgreTunnelConfig_t;

File ../xps/include/xpsPacketDrv.h:
_xpEthHdr_t;
_xpsPacketDrvHostifVlanTagType;
xpDsaHeader;
typedef enum {XPS_NETDEV_FALSE, XPS_NETDEV_TRUE} netdevBoolType;
typedef xpDsaHeader xpDsaHeader;
typedef _xpEthHdr_t xpEthHdr_t;
typedef _xpsPacketDrvHostifVlanTagType xpsPacketDrvHostifVlanTagType;

File ../xps/include/xpsPacketTrakker.h:
xpPacketTrakkerEvent;
xpPacketTrakkerEventType;
typedef xpPacketTrakkerEventType xpPacketTrakkerEventType_t;
typedef xpPacketTrakkerEvent xpsPacketTrakkerEvent;

File ../xps/include/xpsPolicer.h:
xpPolicerCounterEntry_t;
xpsPolicerStormType_e;
typedef xpPolicerCounterEntry_t xpPolicerCounterEntry_t;
typedef xpPolicerCounterEntry_t xpsPolicerCounterEntry_t;
typedef xpsPolicerStormType_e xpsPolicerStormType_e;

File ../xps/include/xpsPort.h:
xpsIntfPortMap;
xpsPortIntfMap;
typedef xpsIntfPortMap xpsIntfPortMap_t;
typedef xpsPortIntfMap xpsPortIntfMap_t;

File ../xps/include/xpsSerdes.h:
xpSerdesAddr_t;
xpSerdesCtle;
xpSerdesDfeState;
xpSerdesDfeTune;
xpSerdesEyeConfig;
xpSerdesInt;
xpSerdesStatus;
xpSerdes_t;
typedef enum {UNKNOWN_PROCESS, TSMC_90, TSMC_65, TSMC_40, TSMC_28, TSMC_20, TSMC_16} ProcessId_t;
typedef int (*)(void) userLogCloseFunc;
typedef void (*)(int, const char *, size_t) userLogFunc;
typedef int (*)(void) userLogOpenFunc;
typedef enum {INT_ALL, INT_FIRST, INT_NOT_FIRST} xpIntFlags_t;
typedef xpSerdesAddr_t xpSerdesAddr_t;
typedef xpSerdesCtle xpSerdesCtle_t;
typedef xpSerdesDfeState xpSerdesDfeState_t;
typedef xpSerdesDfeTune xpSerdesDfeTune_t;
typedef xpSerdesEyeConfig xpSerdesEyeConfig_t;
typedef enum {EYE_CROSS, EYE_SIZE = 0, EYE_SIZE_VDUAL, EYE_HEIGHT, EYE_WIDTH, EYE_FULL, EYE_HEIGHT_DVOS} xpSerdesEyeType_t;
typedef xpSerdesInt xpSerdesInt_t;
typedef enum {XP_RESET, XP_RUNNING, XP_PAUSE, XP_ERROR} xpSerdesState_t;
typedef xpSerdesStatus xpSerdesStatus_t;
typedef xpSerdes_t xpSerdes_t;

File ../xps/include/xpsStp.h:
xpsStgIntfStateDbEntry;
xpsStgStaticDataType_e;
xpsStgStaticDbEntry;
typedef xpsStgIntfStateDbEntry xpsStgIntfStateDbEntry;
typedef xpsStgStaticDataType_e xpsStgStaticDataType_e;
typedef xpsStgStaticDbEntry xpsStgStaticDbEntry;
typedef enum {XPS_STP_MODE_VLAN_E, XPS_STP_MODE_PORT_E} xpsStpMode_e;

File ../xps/include/xpsTunnel.h:
xpLocalSidData;
xpSidEntry;
xpsIpMcOIFData_t;
xpsIpTunnelConfig_t;
xpsIpTunnelData_t;
xpsPbbTunnelData_t;
xpsSrhData_t;
xpsTnlDbEntry_t;
typedef XP_STATUS (*)(xpDevice_t, xphRxHdr *, void *, uint16_t, void *) remoteVtepLearnPktHandler;
typedef xpLocalSidData xpSidData_t;
typedef xpSidEntry xpSidEntry;
typedef enum {XP_SRV6_END_FUNCTION = 1, XP_SRV6_END_T_FUNCTION, XP_SRV6_END_X_FUNCTION, XP_SRV6_END_DX6_FUNCTION, 
    XP_SRV6_END_DX4_FUNCTION, XP_SRV6_END_DX2_FUNCTION, XP_SRV6_END_DT6_FUNCTION, XP_SRV6_END_B6_FUNCTION, 
    XP_SRV6_END_B6_ENCAP_FUNCTION, XP_SRV6_END_TM_FUNCTION, XP_SRV6_END_T_TMAP_FUNCTION, XP_SRV6_T_INS_FUNCTION, 
    XP_SRV6_T_INS_ENCAP_FUNCTION} xpSrEndFuncType_t;
typedef xpsIpMcOIFData_t xpsIpMcOIFData_t;
union xpsIpTunnelConfig_t;
struct xpsIpTunnelData_t;
typedef xpsPbbTunnelData_t xpsPbbTunnelData_t;
typedef xpSidEntry xpsSidEntry;
typedef xpsSrhData_t xpsSrhData_t;
typedef xpsTnlDbEntry_t xpsTnlDbEntry_t;

File ../xps/include/xpsUtil.h:
xpLogLevel;
xpsDeviceMap;
xpsDllHead;
xpsDllLink;
typedef xpLogLevel xpLogLevel;
typedef xpsDeviceMap xpsDeviceMap;
typedef xpsDllHead xpsDllHead;
typedef xpsDllLink xpsDllLink;

File ../xps/include/xpsVlan.h:
xpsServiceIdData;
typedef enum {XPS_PROTOCOL_IPV4_E, XPS_PROTOCOL_IPV6_E} XPS_PROTOCOL_ENT;
struct xpsServiceIdData;
typedef struct xpsServiceIdData xpsServiceIdData_t;

File ../xps/include/xpsVpnGre.h:
xpsVpnGreTunnelConfig_t;
struct xpsVpnGreTunnelConfig_t;

File ../xps/include/xpsVxlan.h:
xpsVxlanTunnelConfig_t;
struct xpsVxlanTunnelConfig_t;

File ../xps/include/xpsXpImports.h:
xpFdbTblEntry_t;
xp_nl_hostif_trap_channel;
typedef xpFdbTblEntry_t xpFdbTblEntry_t;
typedef enum {TNL_IVIF_SET_INGRESS_VIF, TNL_IVIF_SET_PKT_CMD, TNL_IVIF_P2MP_BUDNODE, TNL_IVIF_INGRESS_VIF, TNL_IVIF_RSVD, 
    TUNNELIVIF_KEY_IPADDRESS, TNL_IVIF_FIELD_NUM} xpTnlIvifFieldList_t;
typedef xp_nl_hostif_trap_channel xp_nl_hostif_trap_channel_t;

File ../xps/xps8021Br.c:
typedef bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long double;
typedef long long;
typedef short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;
typedef unsigned long;
typedef unsigned long long;
typedef unsigned short;
typedef wchar_t;

File ../xps/xpsAc.c:
typedef bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long double;
typedef long long;
typedef short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;
typedef unsigned long;
typedef unsigned long long;
typedef unsigned short;
typedef wchar_t;

File ../xps/xpsAcl.c:
typedef bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long double;
typedef long long;
typedef short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;
typedef unsigned long;
typedef unsigned long long;
typedef unsigned short;
typedef wchar_t;

File ../xps/xpsAcm.c:
typedef bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long double;
typedef long long;
typedef short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;
typedef unsigned long;
typedef unsigned long long;
typedef unsigned short;
typedef wchar_t;

File ../xps/xpsAging.c:
typedef bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long double;
typedef long long;
typedef short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;
typedef unsigned long;
typedef unsigned long long;
typedef unsigned short;
typedef wchar_t;

File ../xps/xpsAllocator.c:
typedef bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long double;
typedef long long;
typedef short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;
typedef unsigned long;
typedef unsigned long long;
typedef unsigned short;
typedef wchar_t;

File ../xps/xpsCopp.c:
typedef bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long double;
typedef long long;
typedef short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;
typedef unsigned long;
typedef unsigned long long;
typedef unsigned short;
typedef wchar_t;

File ../xps/xpsEgressFilter.c:
typedef bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long double;
typedef long long;
typedef short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;
typedef unsigned long;
typedef unsigned long long;
typedef unsigned short;
typedef wchar_t;

File ../xps/xpsErspanGre.c:
typedef bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long double;
typedef long long;
typedef short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;
typedef unsigned long;
typedef unsigned long long;
typedef unsigned short;
typedef wchar_t;

File ../xps/xpsFdb.c:
EV_HNDLR_PARAM;
macData;
typedef EV_HNDLR_PARAM EV_HNDLR_PARAM;
typedef bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long double;
typedef long long;
typedef macData macData;
typedef enum {MAC_ADDR_AGING_SW, MAC_ADDR_AGING_HW} mac_aging_type;
typedef short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;
typedef unsigned long;
typedef unsigned long long;
typedef unsigned short;
typedef wchar_t;

File ../xps/xpsFdbMgr.c:
EV_HNDLR_PARAM;
typedef EV_HNDLR_PARAM EV_HNDLR_PARAM;
typedef bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long double;
typedef long long;
typedef short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;
typedef unsigned long;
typedef unsigned long long;
typedef unsigned short;
typedef wchar_t;

File ../xps/xpsGeneve.c:
typedef bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long double;
typedef long long;
typedef short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;
typedef unsigned long;
typedef unsigned long long;
typedef unsigned short;
typedef wchar_t;

File ../xps/xpsGlobalSwitchControl.c:
typedef bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long double;
typedef long long;
typedef short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;
typedef unsigned long;
typedef unsigned long long;
typedef unsigned short;
typedef wchar_t;

File ../xps/xpsInit.c:
typedef bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long double;
typedef long long;
typedef short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;
typedef unsigned long;
typedef unsigned long long;
typedef unsigned short;
typedef wchar_t;

File ../xps/xpsInt.c:
typedef bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long double;
typedef long long;
typedef short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;
typedef unsigned long;
typedef unsigned long long;
typedef unsigned short;
typedef wchar_t;

File ../xps/xpsInterface.c:
xpsInterfaceAllocatorRangeInfo;
typedef bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long double;
typedef long long;
typedef short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;
typedef unsigned long;
typedef unsigned long long;
typedef unsigned short;
typedef wchar_t;

File ../xps/xpsIpGre.c:
typedef bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long double;
typedef long long;
typedef short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;
typedef unsigned long;
typedef unsigned long long;
typedef unsigned short;
typedef wchar_t;

File ../xps/xpsIpinIp.c:
typedef bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long double;
typedef long long;
typedef short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;
typedef unsigned long;
typedef unsigned long long;
typedef unsigned short;
typedef wchar_t;

File ../xps/xpsL3.c:
typedef bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long double;
typedef long long;
typedef short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;
typedef unsigned long;
typedef unsigned long long;
typedef unsigned short;
typedef wchar_t;

File ../xps/xpsLag.c:
xpsIntfLagMap_t;
typedef bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long double;
typedef long long;
typedef short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;
typedef unsigned long;
typedef unsigned long long;
typedef unsigned short;
typedef wchar_t;
typedef xpsIntfLagMap_t xpsIntfLagMap_t;

File ../xps/xpsLink.c:
typedef bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long double;
typedef long long;
typedef short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;
typedef unsigned long;
typedef unsigned long long;
typedef unsigned short;
typedef wchar_t;

File ../xps/xpsLock.c:
typedef bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long double;
typedef long long;
typedef short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;
typedef unsigned long;
typedef unsigned long long;
typedef unsigned short;
typedef wchar_t;

File ../xps/xpsMac.c:
typedef bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long double;
typedef long long;
typedef short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;
typedef unsigned long;
typedef unsigned long long;
typedef unsigned short;
typedef wchar_t;

File ../xps/xpsMirror.c:
xpsMirrorSessionDbEntry_t;
typedef bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long double;
typedef long long;
typedef short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;
typedef unsigned long;
typedef unsigned long long;
typedef unsigned short;
typedef wchar_t;
typedef xpsMirrorSessionDbEntry_t xpsMirrorSessionDbEntry_t;

File ../xps/xpsMpls.c:
typedef bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long double;
typedef long long;
typedef short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;
typedef unsigned long;
typedef unsigned long long;
typedef unsigned short;
typedef wchar_t;

File ../xps/xpsMtuProfile.c:
typedef bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long double;
typedef long long;
typedef short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;
typedef unsigned long;
typedef unsigned long long;
typedef unsigned short;
typedef wchar_t;

File ../xps/xpsMulticast.c:
xpsLagL2McListDbEntry;
xpsMcL2IntfListDbEntry;
typedef bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long double;
typedef long long;
typedef short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;
typedef unsigned long;
typedef unsigned long long;
typedef unsigned short;
typedef wchar_t;
typedef xpsLagL2McListDbEntry xpsLagL2McListDbEntry;
typedef xpsMcL2IntfListDbEntry xpsMcL2IntfListDbEntry;

File ../xps/xpsNat.c:
typedef bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long double;
typedef long long;
typedef short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;
typedef unsigned long;
typedef unsigned long long;
typedef unsigned short;
typedef wchar_t;

File ../xps/xpsNhGrp.c:
typedef bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long double;
typedef long long;
typedef short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;
typedef unsigned long;
typedef unsigned long long;
typedef unsigned short;
typedef wchar_t;

File ../xps/xpsNvgre.c:
typedef bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long double;
typedef long long;
typedef short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;
typedef unsigned long;
typedef unsigned long long;
typedef unsigned short;
typedef wchar_t;

File ../xps/xpsOpenflow.c:
typedef bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long double;
typedef long long;
typedef short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;
typedef unsigned long;
typedef unsigned long long;
typedef unsigned short;
typedef wchar_t;

File ../xps/xpsPacketDrv.c:
xpsNetDevDbEntry;
xpsNetDevDefaultFdDbEntry;
xpsPktDrvDefaultFd_e;
typedef bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long double;
typedef long long;
typedef short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;
typedef unsigned long;
typedef unsigned long long;
typedef unsigned short;
typedef wchar_t;
typedef xpsNetDevDbEntry xpsNetDevDbEntry;
typedef xpsNetDevDefaultFdDbEntry xpsNetDevDefaultFdDbEntry;
typedef xpsPktDrvDefaultFd_e xpsPktDrvDefaultFd_e;

File ../xps/xpsPacketTrakker.c:
typedef bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long double;
typedef long long;
typedef short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;
typedef unsigned long;
typedef unsigned long long;
typedef unsigned short;
typedef wchar_t;

File ../xps/xpsPbb.c:
typedef bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long double;
typedef long long;
typedef short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;
typedef unsigned long;
typedef unsigned long long;
typedef unsigned short;
typedef wchar_t;

File ../xps/xpsPolicer.c:
typedef bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long double;
typedef long long;
typedef short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;
typedef unsigned long;
typedef unsigned long long;
typedef unsigned short;
typedef wchar_t;

File ../xps/xpsPort.c:
typedef bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long double;
typedef long long;
typedef short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;
typedef unsigned long;
typedef unsigned long long;
typedef unsigned short;
typedef wchar_t;

File ../xps/xpsPtp.c:
typedef bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long double;
typedef long long;
typedef short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;
typedef unsigned long;
typedef unsigned long long;
typedef unsigned short;
typedef wchar_t;

File ../xps/xpsQos.c:
typedef bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long double;
typedef long long;
typedef short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;
typedef unsigned long;
typedef unsigned long long;
typedef unsigned short;
typedef wchar_t;

File ../xps/xpsScope.c:
typedef bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long double;
typedef long long;
typedef short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;
typedef unsigned long;
typedef unsigned long long;
typedef unsigned short;
typedef wchar_t;

File ../xps/xpsSerdes.c:
typedef bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long double;
typedef long long;
typedef short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;
typedef unsigned long;
typedef unsigned long long;
typedef unsigned short;
typedef wchar_t;

File ../xps/xpsSflow.c:
typedef bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long double;
typedef long long;
typedef short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;
typedef unsigned long;
typedef unsigned long long;
typedef unsigned short;
typedef wchar_t;

File ../xps/xpsSr.c:
typedef bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long double;
typedef long long;
typedef short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;
typedef unsigned long;
typedef unsigned long long;
typedef unsigned short;
typedef wchar_t;

File ../xps/xpsStp.c:
xpsStgDbEntry;
typedef bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long double;
typedef long long;
typedef short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;
typedef unsigned long;
typedef unsigned long long;
typedef unsigned short;
typedef wchar_t;
typedef xpsStgDbEntry xpsStgDbEntry;

File ../xps/xpsTunnel.c:
xpsIpTnlGblDbEntry_t;
xpsTnlStartAllocGblDbEntry_t;
typedef bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long double;
typedef long long;
typedef short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;
typedef unsigned long;
typedef unsigned long long;
typedef unsigned short;
typedef wchar_t;
typedef xpsIpTnlGblDbEntry_t xpsIpTnlGblDbEntry_t;
typedef xpsTnlStartAllocGblDbEntry_t xpsTnlStartAllocGblDbEntry_t;

File ../xps/xpsUtil.c:
typedef bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long double;
typedef long long;
typedef short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;
typedef unsigned long;
typedef unsigned long long;
typedef unsigned short;
typedef wchar_t;

File ../xps/xpsVlan.c:
xpsIntfVlanEncapInfoDbEntry;
xpsIntfVlanIndexDbEntry;
xpsLagBridgePortListDbEntry;
xpsLagVlanListDbEntry;
xpsVlanContextDbEntry;
xpsVlanStaticDataType_e;
xpsVlanStaticDbEntry;
typedef bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long double;
typedef long long;
typedef short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;
typedef unsigned long;
typedef unsigned long long;
typedef unsigned short;
typedef wchar_t;
typedef xpsIntfVlanEncapInfoDbEntry xpsIntfVlanEncapInfoDbEntry;
typedef xpsIntfVlanIndexDbEntry xpsIntfVlanIndexDbEntry;
typedef xpsLagBridgePortListDbEntry xpsLagBridgePortListDbEntry;
typedef xpsLagVlanListDbEntry xpsLagVlanListDbEntry;
typedef xpsVlanContextDbEntry xpsVlanContextDbEntry;
typedef xpsVlanStaticDataType_e xpsVlanStaticDataType_e;
typedef xpsVlanStaticDbEntry xpsVlanStaticDbEntry;

File ../xps/xpsVpnGre.c:
typedef bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long double;
typedef long long;
typedef short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;
typedef unsigned long;
typedef unsigned long long;
typedef unsigned short;
typedef wchar_t;

File ../xps/xpsVsi.c:
typedef bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long double;
typedef long long;
typedef short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;
typedef unsigned long;
typedef unsigned long long;
typedef unsigned short;
typedef wchar_t;

File ../xps/xpsVxlan.c:
typedef bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long double;
typedef long long;
typedef short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;
typedef unsigned long;
typedef unsigned long long;
typedef unsigned short;
typedef wchar_t;

File ../xps/xpsXpImports.c:
typedef bool;
typedef char;
typedef double;
typedef float;
typedef int;
typedef long;
typedef long double;
typedef long long;
typedef short;
typedef signed char;
typedef sizetype;
typedef unsigned char;
typedef unsigned int;
typedef unsigned long;
typedef unsigned long long;
typedef unsigned short;
typedef wchar_t;

File /usr/include/c++/4.8/bits/allocator.h:
std::__alloc_swap<std::allocator<unsigned int>, true>;
std::allocator<char>;
std::allocator<std::_Rb_tree_node<std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> > >;
std::allocator<std::_Rb_tree_node<std::pair<unsigned int const, unsigned int> > >;
std::allocator<std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> >;
std::allocator<std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> >::rebind<std::_Rb_tree_node<std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> > >;
std::allocator<std::pair<unsigned int const, unsigned int> >;
std::allocator<std::pair<unsigned int const, unsigned int> >::rebind<std::_Rb_tree_node<std::pair<unsigned int const, unsigned int> > >;
std::allocator<unsigned int>;
std::allocator<unsigned int>::rebind<unsigned int>;
std::allocator<xpsGenLock*>;
std::allocator<xpsGenLock*>::rebind<xpsGenLock*>;
std::allocator<xpsIdAllocator*>;
std::allocator<xpsIdAllocator*>::rebind<xpsIdAllocator*>;
std::allocator<xpsPersistBitVector>;
std::allocator<xpsPersistBitVector>::rebind<xpsPersistBitVector>;
typedef const char & std::allocator<char>::const_reference;
typedef char & std::allocator<char>::reference;
typedef unsigned long std::allocator<char>::size_type;
typedef std::allocator<std::_Rb_tree_node<std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> > > std::allocator<std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> >::rebind<std::_Rb_tree_node<std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> > >::other;
typedef std::allocator<std::_Rb_tree_node<std::pair<unsigned int const, unsigned int> > > std::allocator<std::pair<unsigned int const, unsigned int> >::rebind<std::_Rb_tree_node<std::pair<unsigned int const, unsigned int> > >::other;
typedef const unsigned int * std::allocator<unsigned int>::const_pointer;
typedef const unsigned int & std::allocator<unsigned int>::const_reference;
typedef unsigned int * std::allocator<unsigned int>::pointer;
typedef std::allocator<unsigned int> std::allocator<unsigned int>::rebind<unsigned int>::other;
typedef unsigned int & std::allocator<unsigned int>::reference;
typedef unsigned long std::allocator<unsigned int>::size_type;
typedef xpsGenLock * const * std::allocator<xpsGenLock*>::const_pointer;
typedef xpsGenLock * const& std::allocator<xpsGenLock*>::const_reference;
typedef xpsGenLock ** std::allocator<xpsGenLock*>::pointer;
typedef std::allocator<xpsGenLock*> std::allocator<xpsGenLock*>::rebind<xpsGenLock*>::other;
typedef xpsGenLock *& std::allocator<xpsGenLock*>::reference;
typedef unsigned long std::allocator<xpsGenLock*>::size_type;
typedef xpsIdAllocator * const * std::allocator<xpsIdAllocator*>::const_pointer;
typedef xpsIdAllocator * const& std::allocator<xpsIdAllocator*>::const_reference;
typedef xpsIdAllocator ** std::allocator<xpsIdAllocator*>::pointer;
typedef std::allocator<xpsIdAllocator*> std::allocator<xpsIdAllocator*>::rebind<xpsIdAllocator*>::other;
typedef xpsIdAllocator *& std::allocator<xpsIdAllocator*>::reference;
typedef unsigned long std::allocator<xpsIdAllocator*>::size_type;
typedef const xpsPersistBitVector * std::allocator<xpsPersistBitVector>::const_pointer;
typedef const xpsPersistBitVector & std::allocator<xpsPersistBitVector>::const_reference;
typedef xpsPersistBitVector * std::allocator<xpsPersistBitVector>::pointer;
typedef std::allocator<xpsPersistBitVector> std::allocator<xpsPersistBitVector>::rebind<xpsPersistBitVector>::other;
typedef xpsPersistBitVector & std::allocator<xpsPersistBitVector>::reference;
typedef unsigned long std::allocator<xpsPersistBitVector>::size_type;

File /usr/include/c++/4.8/bits/basic_ios.h:
typedef char std::basic_ios<char, std::char_traits<char> >::char_type;

File /usr/include/c++/4.8/bits/basic_string.h:
std::basic_string<char, std::char_traits<char>, std::allocator<char> >;
std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider;
std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Rep;
std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Rep_base;
typedef std::allocator<char> std::basic_string<char, std::char_traits<char>, std::allocator<char> >::allocator_type;
typedef __gnu_cxx::__normal_iterator<char const*, std::basic_string<char, std::char_traits<char>, std::allocator<char> > > std::basic_string<char, std::char_traits<char>, std::allocator<char> >::const_iterator;
typedef const char & std::basic_string<char, std::char_traits<char>, std::allocator<char> >::const_reference;
typedef std::reverse_iterator<__gnu_cxx::__normal_iterator<char const*, std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > std::basic_string<char, std::char_traits<char>, std::allocator<char> >::const_reverse_iterator;
typedef __gnu_cxx::__normal_iterator<char*, std::basic_string<char, std::char_traits<char>, std::allocator<char> > > std::basic_string<char, std::char_traits<char>, std::allocator<char> >::iterator;
typedef char & std::basic_string<char, std::char_traits<char>, std::allocator<char> >::reference;
typedef std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > std::basic_string<char, std::char_traits<char>, std::allocator<char> >::reverse_iterator;
typedef unsigned long std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type;

File /usr/include/c++/4.8/bits/char_traits.h:
std::char_traits<char>;
typedef char std::char_traits<char>::char_type;
typedef int std::char_traits<char>::int_type;

File /usr/include/c++/4.8/bits/cpp_type_traits.h:
typedef __gnu_cxx;
std::__are_same<unsigned int*, unsigned int*>;
std::__are_same<xpsGenLock**, xpsGenLock**>;
std::__are_same<xpsPersistBitVector*, xpsPersistBitVector*>;
std::__is_arithmetic<int>;
std::__is_floating<int>;
std::__is_integer<int>;
std::__is_move_iterator<__gnu_cxx::__normal_iterator<xpsGenLock**, std::vector<xpsGenLock*, std::allocator<xpsGenLock*> > > >;
std::__is_move_iterator<unsigned int*>;
std::__is_move_iterator<xpsGenLock**>;
std::__is_move_iterator<xpsPersistBitVector*>;
std::__is_normal_iterator<__gnu_cxx::__normal_iterator<xpsGenLock**, std::vector<xpsGenLock*, std::allocator<xpsGenLock*> > > >;
std::__is_normal_iterator<unsigned int*>;
std::__is_normal_iterator<unsigned long*>;
std::__is_normal_iterator<xpsGenLock**>;
std::__is_normal_iterator<xpsPersistBitVector*>;
std::__is_pointer<int>;
std::__traitor<std::__is_arithmetic<int>, std::__is_pointer<int> >;
std::__traitor<std::__is_integer<int>, std::__is_floating<int> >;

File /usr/include/c++/4.8/bits/ios_base.h:
std::_Ios_Fmtflags;
std::_Ios_Iostate;
std::_Ios_Openmode;
std::_Ios_Seekdir;
std::ios_base::Init;
typedef std::_Ios_Fmtflags std::ios_base::fmtflags;
typedef std::_Ios_Iostate std::ios_base::iostate;
typedef std::_Ios_Openmode std::ios_base::openmode;
typedef std::_Ios_Seekdir std::ios_base::seekdir;

File /usr/include/c++/4.8/bits/locale_facets.h:
typedef char std::ctype<char>::char_type;

File /usr/include/c++/4.8/bits/postypes.h:
typedef long std::streamsize;

File /usr/include/c++/4.8/bits/stl_algobase.h:
std::__copy_move<false, true, std::random_access_iterator_tag>;
std::__copy_move_backward<false, false, std::random_access_iterator_tag>;
std::__copy_move_backward<false, true, std::random_access_iterator_tag>;
std::__iter_swap<true>;

File /usr/include/c++/4.8/bits/stl_construct.h:
std::_Destroy_aux<false>;
std::_Destroy_aux<true>;

File /usr/include/c++/4.8/bits/stl_function.h:
std::_Select1st<std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> >;
std::_Select1st<std::pair<unsigned int const, unsigned int> >;
std::binary_function<pthread_rwlock_t*, pthread_rwlock_t*, bool>;
std::binary_function<unsigned int, unsigned int, bool>;
std::less<pthread_rwlock_t*>;
std::less<unsigned int>;
std::unary_function<std::pair<pthread_rwlock_t* const, tls_rw_cnt_t>, pthread_rwlock_t* const>;
std::unary_function<std::pair<unsigned int const, unsigned int>, unsigned int const>;

File /usr/include/c++/4.8/bits/stl_iterator.h:
__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >;
__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >;
__gnu_cxx::__normal_iterator<xpsGenLock**, std::vector<xpsGenLock*, std::allocator<xpsGenLock*> > >;
__gnu_cxx::__normal_iterator<xpsIdAllocator**, std::vector<xpsIdAllocator*, std::allocator<xpsIdAllocator*> > >;
__gnu_cxx::__normal_iterator<xpsPersistBitVector*, std::vector<xpsPersistBitVector, std::allocator<xpsPersistBitVector> > >;
typedef long __gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >::difference_type;
typedef const unsigned int * __gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >::iterator_type;
typedef const unsigned int * __gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >::pointer;
typedef const unsigned int & __gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >::reference;
typedef long __gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >::difference_type;
typedef unsigned int * __gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >::iterator_type;
typedef unsigned int * __gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >::pointer;
typedef unsigned int & __gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >::reference;
typedef unsigned int __gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >::value_type;
typedef long __gnu_cxx::__normal_iterator<xpsGenLock**, std::vector<xpsGenLock*, std::allocator<xpsGenLock*> > >::difference_type;
typedef xpsGenLock ** __gnu_cxx::__normal_iterator<xpsGenLock**, std::vector<xpsGenLock*, std::allocator<xpsGenLock*> > >::iterator_type;
typedef xpsGenLock ** __gnu_cxx::__normal_iterator<xpsGenLock**, std::vector<xpsGenLock*, std::allocator<xpsGenLock*> > >::pointer;
typedef xpsGenLock *& __gnu_cxx::__normal_iterator<xpsGenLock**, std::vector<xpsGenLock*, std::allocator<xpsGenLock*> > >::reference;
typedef xpsGenLock * __gnu_cxx::__normal_iterator<xpsGenLock**, std::vector<xpsGenLock*, std::allocator<xpsGenLock*> > >::value_type;
typedef long __gnu_cxx::__normal_iterator<xpsIdAllocator**, std::vector<xpsIdAllocator*, std::allocator<xpsIdAllocator*> > >::difference_type;
typedef xpsIdAllocator ** __gnu_cxx::__normal_iterator<xpsIdAllocator**, std::vector<xpsIdAllocator*, std::allocator<xpsIdAllocator*> > >::pointer;
typedef xpsIdAllocator *& __gnu_cxx::__normal_iterator<xpsIdAllocator**, std::vector<xpsIdAllocator*, std::allocator<xpsIdAllocator*> > >::reference;
typedef long __gnu_cxx::__normal_iterator<xpsPersistBitVector*, std::vector<xpsPersistBitVector, std::allocator<xpsPersistBitVector> > >::difference_type;
typedef xpsPersistBitVector * __gnu_cxx::__normal_iterator<xpsPersistBitVector*, std::vector<xpsPersistBitVector, std::allocator<xpsPersistBitVector> > >::pointer;
typedef xpsPersistBitVector & __gnu_cxx::__normal_iterator<xpsPersistBitVector*, std::vector<xpsPersistBitVector, std::allocator<xpsPersistBitVector> > >::reference;

File /usr/include/c++/4.8/bits/stl_iterator_base_types.h:
std::_Iter_base<__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >, false>;
std::_Iter_base<__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >, true>;
std::_Iter_base<__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >, false>;
std::_Iter_base<__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >, true>;
std::_Iter_base<__gnu_cxx::__normal_iterator<xpsGenLock**, std::vector<xpsGenLock*, std::allocator<xpsGenLock*> > >, false>;
std::_Iter_base<__gnu_cxx::__normal_iterator<xpsGenLock**, std::vector<xpsGenLock*, std::allocator<xpsGenLock*> > >, true>;
std::_Iter_base<unsigned int*, false>;
std::_Iter_base<xpsGenLock**, false>;
std::_Iter_base<xpsIdAllocator**, false>;
std::_Iter_base<xpsPersistBitVector*, false>;
std::iterator_traits<__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > > >;
std::iterator_traits<__gnu_cxx::__normal_iterator<xpsGenLock**, std::vector<xpsGenLock*, std::allocator<xpsGenLock*> > > >;
std::iterator_traits<unsigned int const*>;
std::iterator_traits<unsigned int*>;
std::iterator_traits<xpsGenLock**>;
std::iterator_traits<xpsIdAllocator**>;
std::iterator_traits<xpsPersistBitVector*>;
typedef __gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > > std::_Iter_base<__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >, false>::iterator_type;
typedef const unsigned int * std::_Iter_base<__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >, true>::iterator_type;
typedef __gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > > std::_Iter_base<__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >, false>::iterator_type;
typedef unsigned int * std::_Iter_base<__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >, true>::iterator_type;
typedef __gnu_cxx::__normal_iterator<xpsGenLock**, std::vector<xpsGenLock*, std::allocator<xpsGenLock*> > > std::_Iter_base<__gnu_cxx::__normal_iterator<xpsGenLock**, std::vector<xpsGenLock*, std::allocator<xpsGenLock*> > >, false>::iterator_type;
typedef xpsGenLock ** std::_Iter_base<__gnu_cxx::__normal_iterator<xpsGenLock**, std::vector<xpsGenLock*, std::allocator<xpsGenLock*> > >, true>::iterator_type;
typedef unsigned int * std::_Iter_base<unsigned int*, false>::iterator_type;
typedef xpsGenLock ** std::_Iter_base<xpsGenLock**, false>::iterator_type;
typedef xpsIdAllocator ** std::_Iter_base<xpsIdAllocator**, false>::iterator_type;
typedef xpsPersistBitVector * std::_Iter_base<xpsPersistBitVector*, false>::iterator_type;
typedef long std::iterator_traits<__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > > >::difference_type;
typedef unsigned int std::iterator_traits<__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > > >::value_type;
typedef long std::iterator_traits<__gnu_cxx::__normal_iterator<xpsGenLock**, std::vector<xpsGenLock*, std::allocator<xpsGenLock*> > > >::difference_type;
typedef xpsGenLock * std::iterator_traits<__gnu_cxx::__normal_iterator<xpsGenLock**, std::vector<xpsGenLock*, std::allocator<xpsGenLock*> > > >::value_type;
typedef long std::iterator_traits<unsigned int const*>::difference_type;
typedef const unsigned int * std::iterator_traits<unsigned int const*>::pointer;
typedef const unsigned int & std::iterator_traits<unsigned int const*>::reference;
typedef long std::iterator_traits<unsigned int*>::difference_type;
typedef unsigned int * std::iterator_traits<unsigned int*>::pointer;
typedef unsigned int & std::iterator_traits<unsigned int*>::reference;
typedef unsigned int std::iterator_traits<unsigned int*>::value_type;
typedef long std::iterator_traits<xpsGenLock**>::difference_type;
typedef xpsGenLock ** std::iterator_traits<xpsGenLock**>::pointer;
typedef xpsGenLock *& std::iterator_traits<xpsGenLock**>::reference;
typedef xpsGenLock * std::iterator_traits<xpsGenLock**>::value_type;
typedef long std::iterator_traits<xpsIdAllocator**>::difference_type;
typedef xpsIdAllocator ** std::iterator_traits<xpsIdAllocator**>::pointer;
typedef xpsIdAllocator *& std::iterator_traits<xpsIdAllocator**>::reference;
typedef long std::iterator_traits<xpsPersistBitVector*>::difference_type;
typedef xpsPersistBitVector * std::iterator_traits<xpsPersistBitVector*>::pointer;
typedef xpsPersistBitVector & std::iterator_traits<xpsPersistBitVector*>::reference;

File /usr/include/c++/4.8/bits/stl_map.h:
std::map<pthread_rwlock_t*, tls_rw_cnt_t, std::less<pthread_rwlock_t*>, std::allocator<std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> > >;
std::map<unsigned int, unsigned int, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > >;
typedef std::_Rb_tree<pthread_rwlock_t*, std::pair<pthread_rwlock_t* const, tls_rw_cnt_t>, std::_Select1st<std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> >, std::less<pthread_rwlock_t*>, std::allocator<std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> > > std::map<pthread_rwlock_t*, tls_rw_cnt_t, std::less<pthread_rwlock_t*>, std::allocator<std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> > >::_Rep_type;
typedef std::allocator<std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> > std::map<pthread_rwlock_t*, tls_rw_cnt_t, std::less<pthread_rwlock_t*>, std::allocator<std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> > >::allocator_type;
typedef std::_Rb_tree_const_iterator<std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> > std::map<pthread_rwlock_t*, tls_rw_cnt_t, std::less<pthread_rwlock_t*>, std::allocator<std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> > >::const_iterator;
typedef std::reverse_iterator<std::_Rb_tree_const_iterator<std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> > > std::map<pthread_rwlock_t*, tls_rw_cnt_t, std::less<pthread_rwlock_t*>, std::allocator<std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> > >::const_reverse_iterator;
typedef std::_Rb_tree_iterator<std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> > std::map<pthread_rwlock_t*, tls_rw_cnt_t, std::less<pthread_rwlock_t*>, std::allocator<std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> > >::iterator;
typedef std::less<pthread_rwlock_t*> std::map<pthread_rwlock_t*, tls_rw_cnt_t, std::less<pthread_rwlock_t*>, std::allocator<std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> > >::key_compare;
typedef pthread_rwlock_t * std::map<pthread_rwlock_t*, tls_rw_cnt_t, std::less<pthread_rwlock_t*>, std::allocator<std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> > >::key_type;
typedef tls_rw_cnt_t std::map<pthread_rwlock_t*, tls_rw_cnt_t, std::less<pthread_rwlock_t*>, std::allocator<std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> > >::mapped_type;
typedef std::reverse_iterator<std::_Rb_tree_iterator<std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> > > std::map<pthread_rwlock_t*, tls_rw_cnt_t, std::less<pthread_rwlock_t*>, std::allocator<std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> > >::reverse_iterator;
typedef unsigned long std::map<pthread_rwlock_t*, tls_rw_cnt_t, std::less<pthread_rwlock_t*>, std::allocator<std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> > >::size_type;
typedef std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> std::map<pthread_rwlock_t*, tls_rw_cnt_t, std::less<pthread_rwlock_t*>, std::allocator<std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> > >::value_type;
typedef std::_Rb_tree<unsigned int, std::pair<unsigned int const, unsigned int>, std::_Select1st<std::pair<unsigned int const, unsigned int> >, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > std::map<unsigned int, unsigned int, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > >::_Rep_type;
typedef std::allocator<std::pair<unsigned int const, unsigned int> > std::map<unsigned int, unsigned int, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > >::allocator_type;
typedef std::_Rb_tree_const_iterator<std::pair<unsigned int const, unsigned int> > std::map<unsigned int, unsigned int, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > >::const_iterator;
typedef std::reverse_iterator<std::_Rb_tree_const_iterator<std::pair<unsigned int const, unsigned int> > > std::map<unsigned int, unsigned int, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > >::const_reverse_iterator;
typedef std::_Rb_tree_iterator<std::pair<unsigned int const, unsigned int> > std::map<unsigned int, unsigned int, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > >::iterator;
typedef std::less<unsigned int> std::map<unsigned int, unsigned int, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > >::key_compare;
typedef unsigned int std::map<unsigned int, unsigned int, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > >::key_type;
typedef unsigned int std::map<unsigned int, unsigned int, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > >::mapped_type;
typedef std::reverse_iterator<std::_Rb_tree_iterator<std::pair<unsigned int const, unsigned int> > > std::map<unsigned int, unsigned int, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > >::reverse_iterator;
typedef unsigned long std::map<unsigned int, unsigned int, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > >::size_type;
typedef std::pair<unsigned int const, unsigned int> std::map<unsigned int, unsigned int, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > >::value_type;

File /usr/include/c++/4.8/bits/stl_pair.h:
std::pair<pthread_rwlock_t* const, tls_rw_cnt_t>;
std::pair<std::_Rb_tree_iterator<std::pair<unsigned int const, unsigned int> >, bool>;
std::pair<std::_Rb_tree_iterator<std::pair<unsigned int const, unsigned int> >, std::_Rb_tree_iterator<std::pair<unsigned int const, unsigned int> > >;
std::pair<std::_Rb_tree_node_base*, std::_Rb_tree_node_base*>;
std::pair<unsigned int const, unsigned int>;
std::pair<unsigned int, unsigned int>;
typedef pthread_rwlock_t * const std::pair<pthread_rwlock_t* const, tls_rw_cnt_t>::first_type;
typedef const unsigned int std::pair<unsigned int const, unsigned int>::first_type;

File /usr/include/c++/4.8/bits/stl_tree.h:
std::_Rb_tree<pthread_rwlock_t*, std::pair<pthread_rwlock_t* const, tls_rw_cnt_t>, std::_Select1st<std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> >, std::less<pthread_rwlock_t*>, std::allocator<std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> > >;
std::_Rb_tree<pthread_rwlock_t*, std::pair<pthread_rwlock_t* const, tls_rw_cnt_t>, std::_Select1st<std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> >, std::less<pthread_rwlock_t*>, std::allocator<std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> > >::_Rb_tree_impl<std::less<pthread_rwlock_t*>, false>;
std::_Rb_tree<unsigned int, std::pair<unsigned int const, unsigned int>, std::_Select1st<std::pair<unsigned int const, unsigned int> >, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > >;
std::_Rb_tree<unsigned int, std::pair<unsigned int const, unsigned int>, std::_Select1st<std::pair<unsigned int const, unsigned int> >, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > >::_Rb_tree_impl<std::less<unsigned int>, false>;
std::_Rb_tree_color;
std::_Rb_tree_const_iterator<std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> >;
std::_Rb_tree_const_iterator<std::pair<unsigned int const, unsigned int> >;
std::_Rb_tree_iterator<std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> >;
std::_Rb_tree_iterator<std::pair<unsigned int const, unsigned int> >;
std::_Rb_tree_node<std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> >;
std::_Rb_tree_node<std::pair<unsigned int const, unsigned int> >;
std::_Rb_tree_node_base;
typedef std::_Rb_tree_node_base * std::_Rb_tree<pthread_rwlock_t*, std::pair<pthread_rwlock_t* const, tls_rw_cnt_t>, std::_Select1st<std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> >, std::less<pthread_rwlock_t*>, std::allocator<std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> > >::_Base_ptr;
typedef const std::_Rb_tree_node_base * std::_Rb_tree<pthread_rwlock_t*, std::pair<pthread_rwlock_t* const, tls_rw_cnt_t>, std::_Select1st<std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> >, std::less<pthread_rwlock_t*>, std::allocator<std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> > >::_Const_Base_ptr;
typedef const std::_Rb_tree_node<std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> > * std::_Rb_tree<pthread_rwlock_t*, std::pair<pthread_rwlock_t* const, tls_rw_cnt_t>, std::_Select1st<std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> >, std::less<pthread_rwlock_t*>, std::allocator<std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> > >::_Const_Link_type;
typedef std::_Rb_tree_node<std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> > * std::_Rb_tree<pthread_rwlock_t*, std::pair<pthread_rwlock_t* const, tls_rw_cnt_t>, std::_Select1st<std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> >, std::less<pthread_rwlock_t*>, std::allocator<std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> > >::_Link_type;
typedef std::allocator<std::_Rb_tree_node<std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> > > std::_Rb_tree<pthread_rwlock_t*, std::pair<pthread_rwlock_t* const, tls_rw_cnt_t>, std::_Select1st<std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> >, std::less<pthread_rwlock_t*>, std::allocator<std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> > >::_Node_allocator;
typedef std::allocator<std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> > std::_Rb_tree<pthread_rwlock_t*, std::pair<pthread_rwlock_t* const, tls_rw_cnt_t>, std::_Select1st<std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> >, std::less<pthread_rwlock_t*>, std::allocator<std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> > >::allocator_type;
typedef std::_Rb_tree_const_iterator<std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> > std::_Rb_tree<pthread_rwlock_t*, std::pair<pthread_rwlock_t* const, tls_rw_cnt_t>, std::_Select1st<std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> >, std::less<pthread_rwlock_t*>, std::allocator<std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> > >::const_iterator;
typedef const std::_Rb_tree<pthread_rwlock_t*, std::pair<pthread_rwlock_t* const, tls_rw_cnt_t>, std::_Select1st<std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> >, std::less<pthread_rwlock_t*>, std::allocator<std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> > >::value_type & std::_Rb_tree<pthread_rwlock_t*, std::pair<pthread_rwlock_t* const, tls_rw_cnt_t>, std::_Select1st<std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> >, std::less<pthread_rwlock_t*>, std::allocator<std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> > >::const_reference;
typedef std::reverse_iterator<std::_Rb_tree_const_iterator<std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> > > std::_Rb_tree<pthread_rwlock_t*, std::pair<pthread_rwlock_t* const, tls_rw_cnt_t>, std::_Select1st<std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> >, std::less<pthread_rwlock_t*>, std::allocator<std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> > >::const_reverse_iterator;
typedef std::_Rb_tree_iterator<std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> > std::_Rb_tree<pthread_rwlock_t*, std::pair<pthread_rwlock_t* const, tls_rw_cnt_t>, std::_Select1st<std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> >, std::less<pthread_rwlock_t*>, std::allocator<std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> > >::iterator;
typedef pthread_rwlock_t * std::_Rb_tree<pthread_rwlock_t*, std::pair<pthread_rwlock_t* const, tls_rw_cnt_t>, std::_Select1st<std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> >, std::less<pthread_rwlock_t*>, std::allocator<std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> > >::key_type;
typedef std::reverse_iterator<std::_Rb_tree_iterator<std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> > > std::_Rb_tree<pthread_rwlock_t*, std::pair<pthread_rwlock_t* const, tls_rw_cnt_t>, std::_Select1st<std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> >, std::less<pthread_rwlock_t*>, std::allocator<std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> > >::reverse_iterator;
typedef unsigned long std::_Rb_tree<pthread_rwlock_t*, std::pair<pthread_rwlock_t* const, tls_rw_cnt_t>, std::_Select1st<std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> >, std::less<pthread_rwlock_t*>, std::allocator<std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> > >::size_type;
typedef std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> std::_Rb_tree<pthread_rwlock_t*, std::pair<pthread_rwlock_t* const, tls_rw_cnt_t>, std::_Select1st<std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> >, std::less<pthread_rwlock_t*>, std::allocator<std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> > >::value_type;
typedef std::_Rb_tree_node_base * std::_Rb_tree<unsigned int, std::pair<unsigned int const, unsigned int>, std::_Select1st<std::pair<unsigned int const, unsigned int> >, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > >::_Base_ptr;
typedef const std::_Rb_tree_node_base * std::_Rb_tree<unsigned int, std::pair<unsigned int const, unsigned int>, std::_Select1st<std::pair<unsigned int const, unsigned int> >, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > >::_Const_Base_ptr;
typedef const std::_Rb_tree_node<std::pair<unsigned int const, unsigned int> > * std::_Rb_tree<unsigned int, std::pair<unsigned int const, unsigned int>, std::_Select1st<std::pair<unsigned int const, unsigned int> >, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > >::_Const_Link_type;
typedef std::_Rb_tree_node<std::pair<unsigned int const, unsigned int> > * std::_Rb_tree<unsigned int, std::pair<unsigned int const, unsigned int>, std::_Select1st<std::pair<unsigned int const, unsigned int> >, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > >::_Link_type;
typedef std::allocator<std::_Rb_tree_node<std::pair<unsigned int const, unsigned int> > > std::_Rb_tree<unsigned int, std::pair<unsigned int const, unsigned int>, std::_Select1st<std::pair<unsigned int const, unsigned int> >, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > >::_Node_allocator;
typedef std::allocator<std::pair<unsigned int const, unsigned int> > std::_Rb_tree<unsigned int, std::pair<unsigned int const, unsigned int>, std::_Select1st<std::pair<unsigned int const, unsigned int> >, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > >::allocator_type;
typedef std::_Rb_tree_const_iterator<std::pair<unsigned int const, unsigned int> > std::_Rb_tree<unsigned int, std::pair<unsigned int const, unsigned int>, std::_Select1st<std::pair<unsigned int const, unsigned int> >, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > >::const_iterator;
typedef const std::_Rb_tree<unsigned int, std::pair<unsigned int const, unsigned int>, std::_Select1st<std::pair<unsigned int const, unsigned int> >, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > >::value_type & std::_Rb_tree<unsigned int, std::pair<unsigned int const, unsigned int>, std::_Select1st<std::pair<unsigned int const, unsigned int> >, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > >::const_reference;
typedef std::reverse_iterator<std::_Rb_tree_const_iterator<std::pair<unsigned int const, unsigned int> > > std::_Rb_tree<unsigned int, std::pair<unsigned int const, unsigned int>, std::_Select1st<std::pair<unsigned int const, unsigned int> >, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > >::const_reverse_iterator;
typedef std::_Rb_tree_iterator<std::pair<unsigned int const, unsigned int> > std::_Rb_tree<unsigned int, std::pair<unsigned int const, unsigned int>, std::_Select1st<std::pair<unsigned int const, unsigned int> >, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > >::iterator;
typedef unsigned int std::_Rb_tree<unsigned int, std::pair<unsigned int const, unsigned int>, std::_Select1st<std::pair<unsigned int const, unsigned int> >, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > >::key_type;
typedef std::reverse_iterator<std::_Rb_tree_iterator<std::pair<unsigned int const, unsigned int> > > std::_Rb_tree<unsigned int, std::pair<unsigned int const, unsigned int>, std::_Select1st<std::pair<unsigned int const, unsigned int> >, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > >::reverse_iterator;
typedef unsigned long std::_Rb_tree<unsigned int, std::pair<unsigned int const, unsigned int>, std::_Select1st<std::pair<unsigned int const, unsigned int> >, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > >::size_type;
typedef std::pair<unsigned int const, unsigned int> std::_Rb_tree<unsigned int, std::pair<unsigned int const, unsigned int>, std::_Select1st<std::pair<unsigned int const, unsigned int> >, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > >::value_type;
typedef const std::_Rb_tree_node_base * std::_Rb_tree_const_iterator<std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> >::_Base_ptr;
typedef const std::_Rb_tree_node<std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> > * std::_Rb_tree_const_iterator<std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> >::_Link_type;
typedef std::_Rb_tree_const_iterator<std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> > std::_Rb_tree_const_iterator<std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> >::_Self;
typedef std::_Rb_tree_iterator<std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> > std::_Rb_tree_const_iterator<std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> >::iterator;
typedef const std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> * std::_Rb_tree_const_iterator<std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> >::pointer;
typedef const std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> & std::_Rb_tree_const_iterator<std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> >::reference;
typedef const std::_Rb_tree_node_base * std::_Rb_tree_const_iterator<std::pair<unsigned int const, unsigned int> >::_Base_ptr;
typedef const std::_Rb_tree_node<std::pair<unsigned int const, unsigned int> > * std::_Rb_tree_const_iterator<std::pair<unsigned int const, unsigned int> >::_Link_type;
typedef std::_Rb_tree_const_iterator<std::pair<unsigned int const, unsigned int> > std::_Rb_tree_const_iterator<std::pair<unsigned int const, unsigned int> >::_Self;
typedef std::_Rb_tree_iterator<std::pair<unsigned int const, unsigned int> > std::_Rb_tree_const_iterator<std::pair<unsigned int const, unsigned int> >::iterator;
typedef const std::pair<unsigned int const, unsigned int> * std::_Rb_tree_const_iterator<std::pair<unsigned int const, unsigned int> >::pointer;
typedef const std::pair<unsigned int const, unsigned int> & std::_Rb_tree_const_iterator<std::pair<unsigned int const, unsigned int> >::reference;
typedef std::_Rb_tree_node_base * std::_Rb_tree_iterator<std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> >::_Base_ptr;
typedef std::_Rb_tree_node<std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> > * std::_Rb_tree_iterator<std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> >::_Link_type;
typedef std::_Rb_tree_iterator<std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> > std::_Rb_tree_iterator<std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> >::_Self;
typedef std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> * std::_Rb_tree_iterator<std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> >::pointer;
typedef std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> & std::_Rb_tree_iterator<std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> >::reference;
typedef std::_Rb_tree_node_base * std::_Rb_tree_iterator<std::pair<unsigned int const, unsigned int> >::_Base_ptr;
typedef std::_Rb_tree_node<std::pair<unsigned int const, unsigned int> > * std::_Rb_tree_iterator<std::pair<unsigned int const, unsigned int> >::_Link_type;
typedef std::_Rb_tree_iterator<std::pair<unsigned int const, unsigned int> > std::_Rb_tree_iterator<std::pair<unsigned int const, unsigned int> >::_Self;
typedef std::pair<unsigned int const, unsigned int> * std::_Rb_tree_iterator<std::pair<unsigned int const, unsigned int> >::pointer;
typedef std::pair<unsigned int const, unsigned int> & std::_Rb_tree_iterator<std::pair<unsigned int const, unsigned int> >::reference;
typedef std::_Rb_tree_node_base * std::_Rb_tree_node_base::_Base_ptr;
typedef const std::_Rb_tree_node_base * std::_Rb_tree_node_base::_Const_Base_ptr;

File /usr/include/c++/4.8/bits/stl_uninitialized.h:
std::__uninitialized_copy<false>;
std::__uninitialized_copy<true>;
std::__uninitialized_fill_n<true>;

File /usr/include/c++/4.8/bits/stl_vector.h:
std::_Vector_base<unsigned int, std::allocator<unsigned int> >;
std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_impl;
std::_Vector_base<xpsGenLock*, std::allocator<xpsGenLock*> >;
std::_Vector_base<xpsGenLock*, std::allocator<xpsGenLock*> >::_Vector_impl;
std::_Vector_base<xpsIdAllocator*, std::allocator<xpsIdAllocator*> >;
std::_Vector_base<xpsIdAllocator*, std::allocator<xpsIdAllocator*> >::_Vector_impl;
std::_Vector_base<xpsPersistBitVector, std::allocator<xpsPersistBitVector> >;
std::_Vector_base<xpsPersistBitVector, std::allocator<xpsPersistBitVector> >::_Vector_impl;
std::vector<unsigned int, std::allocator<unsigned int> >;
std::vector<xpsGenLock*, std::allocator<xpsGenLock*> >;
std::vector<xpsIdAllocator*, std::allocator<xpsIdAllocator*> >;
std::vector<xpsPersistBitVector, std::allocator<xpsPersistBitVector> >;
typedef std::allocator<unsigned int> std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Tp_alloc_type;
typedef std::allocator<unsigned int> std::_Vector_base<unsigned int, std::allocator<unsigned int> >::allocator_type;
typedef unsigned int * std::_Vector_base<unsigned int, std::allocator<unsigned int> >::pointer;
typedef std::allocator<xpsGenLock*> std::_Vector_base<xpsGenLock*, std::allocator<xpsGenLock*> >::_Tp_alloc_type;
typedef std::allocator<xpsGenLock*> std::_Vector_base<xpsGenLock*, std::allocator<xpsGenLock*> >::allocator_type;
typedef xpsGenLock ** std::_Vector_base<xpsGenLock*, std::allocator<xpsGenLock*> >::pointer;
typedef std::allocator<xpsIdAllocator*> std::_Vector_base<xpsIdAllocator*, std::allocator<xpsIdAllocator*> >::_Tp_alloc_type;
typedef std::allocator<xpsIdAllocator*> std::_Vector_base<xpsIdAllocator*, std::allocator<xpsIdAllocator*> >::allocator_type;
typedef xpsIdAllocator ** std::_Vector_base<xpsIdAllocator*, std::allocator<xpsIdAllocator*> >::pointer;
typedef std::allocator<xpsPersistBitVector> std::_Vector_base<xpsPersistBitVector, std::allocator<xpsPersistBitVector> >::_Tp_alloc_type;
typedef std::allocator<xpsPersistBitVector> std::_Vector_base<xpsPersistBitVector, std::allocator<xpsPersistBitVector> >::allocator_type;
typedef xpsPersistBitVector * std::_Vector_base<xpsPersistBitVector, std::allocator<xpsPersistBitVector> >::pointer;
typedef std::allocator<unsigned int> std::vector<unsigned int, std::allocator<unsigned int> >::allocator_type;
typedef __gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > > std::vector<unsigned int, std::allocator<unsigned int> >::const_iterator;
typedef const unsigned int * std::vector<unsigned int, std::allocator<unsigned int> >::const_pointer;
typedef const unsigned int & std::vector<unsigned int, std::allocator<unsigned int> >::const_reference;
typedef std::reverse_iterator<__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > > > std::vector<unsigned int, std::allocator<unsigned int> >::const_reverse_iterator;
typedef __gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > > std::vector<unsigned int, std::allocator<unsigned int> >::iterator;
typedef unsigned int * std::vector<unsigned int, std::allocator<unsigned int> >::pointer;
typedef unsigned int & std::vector<unsigned int, std::allocator<unsigned int> >::reference;
typedef std::reverse_iterator<__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > > > std::vector<unsigned int, std::allocator<unsigned int> >::reverse_iterator;
typedef unsigned long std::vector<unsigned int, std::allocator<unsigned int> >::size_type;
typedef unsigned int std::vector<unsigned int, std::allocator<unsigned int> >::value_type;
typedef std::allocator<xpsGenLock*> std::vector<xpsGenLock*, std::allocator<xpsGenLock*> >::allocator_type;
typedef __gnu_cxx::__normal_iterator<xpsGenLock* const*, std::vector<xpsGenLock*, std::allocator<xpsGenLock*> > > std::vector<xpsGenLock*, std::allocator<xpsGenLock*> >::const_iterator;
typedef xpsGenLock * const * std::vector<xpsGenLock*, std::allocator<xpsGenLock*> >::const_pointer;
typedef xpsGenLock * const& std::vector<xpsGenLock*, std::allocator<xpsGenLock*> >::const_reference;
typedef std::reverse_iterator<__gnu_cxx::__normal_iterator<xpsGenLock* const*, std::vector<xpsGenLock*, std::allocator<xpsGenLock*> > > > std::vector<xpsGenLock*, std::allocator<xpsGenLock*> >::const_reverse_iterator;
typedef __gnu_cxx::__normal_iterator<xpsGenLock**, std::vector<xpsGenLock*, std::allocator<xpsGenLock*> > > std::vector<xpsGenLock*, std::allocator<xpsGenLock*> >::iterator;
typedef xpsGenLock ** std::vector<xpsGenLock*, std::allocator<xpsGenLock*> >::pointer;
typedef xpsGenLock *& std::vector<xpsGenLock*, std::allocator<xpsGenLock*> >::reference;
typedef std::reverse_iterator<__gnu_cxx::__normal_iterator<xpsGenLock**, std::vector<xpsGenLock*, std::allocator<xpsGenLock*> > > > std::vector<xpsGenLock*, std::allocator<xpsGenLock*> >::reverse_iterator;
typedef unsigned long std::vector<xpsGenLock*, std::allocator<xpsGenLock*> >::size_type;
typedef xpsGenLock * std::vector<xpsGenLock*, std::allocator<xpsGenLock*> >::value_type;
typedef std::allocator<xpsIdAllocator*> std::vector<xpsIdAllocator*, std::allocator<xpsIdAllocator*> >::allocator_type;
typedef __gnu_cxx::__normal_iterator<xpsIdAllocator* const*, std::vector<xpsIdAllocator*, std::allocator<xpsIdAllocator*> > > std::vector<xpsIdAllocator*, std::allocator<xpsIdAllocator*> >::const_iterator;
typedef xpsIdAllocator * const * std::vector<xpsIdAllocator*, std::allocator<xpsIdAllocator*> >::const_pointer;
typedef xpsIdAllocator * const& std::vector<xpsIdAllocator*, std::allocator<xpsIdAllocator*> >::const_reference;
typedef std::reverse_iterator<__gnu_cxx::__normal_iterator<xpsIdAllocator* const*, std::vector<xpsIdAllocator*, std::allocator<xpsIdAllocator*> > > > std::vector<xpsIdAllocator*, std::allocator<xpsIdAllocator*> >::const_reverse_iterator;
typedef __gnu_cxx::__normal_iterator<xpsIdAllocator**, std::vector<xpsIdAllocator*, std::allocator<xpsIdAllocator*> > > std::vector<xpsIdAllocator*, std::allocator<xpsIdAllocator*> >::iterator;
typedef xpsIdAllocator ** std::vector<xpsIdAllocator*, std::allocator<xpsIdAllocator*> >::pointer;
typedef xpsIdAllocator *& std::vector<xpsIdAllocator*, std::allocator<xpsIdAllocator*> >::reference;
typedef std::reverse_iterator<__gnu_cxx::__normal_iterator<xpsIdAllocator**, std::vector<xpsIdAllocator*, std::allocator<xpsIdAllocator*> > > > std::vector<xpsIdAllocator*, std::allocator<xpsIdAllocator*> >::reverse_iterator;
typedef unsigned long std::vector<xpsIdAllocator*, std::allocator<xpsIdAllocator*> >::size_type;
typedef xpsIdAllocator * std::vector<xpsIdAllocator*, std::allocator<xpsIdAllocator*> >::value_type;
typedef std::allocator<xpsPersistBitVector> std::vector<xpsPersistBitVector, std::allocator<xpsPersistBitVector> >::allocator_type;
typedef __gnu_cxx::__normal_iterator<xpsPersistBitVector const*, std::vector<xpsPersistBitVector, std::allocator<xpsPersistBitVector> > > std::vector<xpsPersistBitVector, std::allocator<xpsPersistBitVector> >::const_iterator;
typedef const xpsPersistBitVector * std::vector<xpsPersistBitVector, std::allocator<xpsPersistBitVector> >::const_pointer;
typedef const xpsPersistBitVector & std::vector<xpsPersistBitVector, std::allocator<xpsPersistBitVector> >::const_reference;
typedef std::reverse_iterator<__gnu_cxx::__normal_iterator<xpsPersistBitVector const*, std::vector<xpsPersistBitVector, std::allocator<xpsPersistBitVector> > > > std::vector<xpsPersistBitVector, std::allocator<xpsPersistBitVector> >::const_reverse_iterator;
typedef __gnu_cxx::__normal_iterator<xpsPersistBitVector*, std::vector<xpsPersistBitVector, std::allocator<xpsPersistBitVector> > > std::vector<xpsPersistBitVector, std::allocator<xpsPersistBitVector> >::iterator;
typedef xpsPersistBitVector * std::vector<xpsPersistBitVector, std::allocator<xpsPersistBitVector> >::pointer;
typedef xpsPersistBitVector & std::vector<xpsPersistBitVector, std::allocator<xpsPersistBitVector> >::reference;
typedef std::reverse_iterator<__gnu_cxx::__normal_iterator<xpsPersistBitVector*, std::vector<xpsPersistBitVector, std::allocator<xpsPersistBitVector> > > > std::vector<xpsPersistBitVector, std::allocator<xpsPersistBitVector> >::reverse_iterator;
typedef unsigned long std::vector<xpsPersistBitVector, std::allocator<xpsPersistBitVector> >::size_type;
typedef xpsPersistBitVector std::vector<xpsPersistBitVector, std::allocator<xpsPersistBitVector> >::value_type;

File /usr/include/c++/4.8/cwchar:
typedef __gnu_cxx;

File /usr/include/c++/4.8/debug/debug.h:
typedef __gnu_debug;
typedef std::__debug;

File /usr/include/c++/4.8/exception:
typedef __gnu_cxx;

File /usr/include/c++/4.8/ext/alloc_traits.h:
__gnu_cxx::__alloc_traits<std::allocator<unsigned int> >;
__gnu_cxx::__alloc_traits<std::allocator<unsigned int> >::rebind<unsigned int>;
__gnu_cxx::__alloc_traits<std::allocator<xpsGenLock*> >;
__gnu_cxx::__alloc_traits<std::allocator<xpsGenLock*> >::rebind<xpsGenLock*>;
__gnu_cxx::__alloc_traits<std::allocator<xpsIdAllocator*> >;
__gnu_cxx::__alloc_traits<std::allocator<xpsIdAllocator*> >::rebind<xpsIdAllocator*>;
__gnu_cxx::__alloc_traits<std::allocator<xpsPersistBitVector> >;
__gnu_cxx::__alloc_traits<std::allocator<xpsPersistBitVector> >::rebind<xpsPersistBitVector>;
typedef const unsigned int * __gnu_cxx::__alloc_traits<std::allocator<unsigned int> >::const_pointer;
typedef const unsigned int & __gnu_cxx::__alloc_traits<std::allocator<unsigned int> >::const_reference;
typedef unsigned int * __gnu_cxx::__alloc_traits<std::allocator<unsigned int> >::pointer;
typedef std::allocator<unsigned int> __gnu_cxx::__alloc_traits<std::allocator<unsigned int> >::rebind<unsigned int>::other;
typedef unsigned int & __gnu_cxx::__alloc_traits<std::allocator<unsigned int> >::reference;
typedef unsigned long __gnu_cxx::__alloc_traits<std::allocator<unsigned int> >::size_type;
typedef xpsGenLock * const * __gnu_cxx::__alloc_traits<std::allocator<xpsGenLock*> >::const_pointer;
typedef xpsGenLock * const& __gnu_cxx::__alloc_traits<std::allocator<xpsGenLock*> >::const_reference;
typedef xpsGenLock ** __gnu_cxx::__alloc_traits<std::allocator<xpsGenLock*> >::pointer;
typedef std::allocator<xpsGenLock*> __gnu_cxx::__alloc_traits<std::allocator<xpsGenLock*> >::rebind<xpsGenLock*>::other;
typedef xpsGenLock *& __gnu_cxx::__alloc_traits<std::allocator<xpsGenLock*> >::reference;
typedef unsigned long __gnu_cxx::__alloc_traits<std::allocator<xpsGenLock*> >::size_type;
typedef xpsIdAllocator * const * __gnu_cxx::__alloc_traits<std::allocator<xpsIdAllocator*> >::const_pointer;
typedef xpsIdAllocator * const& __gnu_cxx::__alloc_traits<std::allocator<xpsIdAllocator*> >::const_reference;
typedef xpsIdAllocator ** __gnu_cxx::__alloc_traits<std::allocator<xpsIdAllocator*> >::pointer;
typedef std::allocator<xpsIdAllocator*> __gnu_cxx::__alloc_traits<std::allocator<xpsIdAllocator*> >::rebind<xpsIdAllocator*>::other;
typedef xpsIdAllocator *& __gnu_cxx::__alloc_traits<std::allocator<xpsIdAllocator*> >::reference;
typedef unsigned long __gnu_cxx::__alloc_traits<std::allocator<xpsIdAllocator*> >::size_type;
typedef const xpsPersistBitVector * __gnu_cxx::__alloc_traits<std::allocator<xpsPersistBitVector> >::const_pointer;
typedef const xpsPersistBitVector & __gnu_cxx::__alloc_traits<std::allocator<xpsPersistBitVector> >::const_reference;
typedef xpsPersistBitVector * __gnu_cxx::__alloc_traits<std::allocator<xpsPersistBitVector> >::pointer;
typedef std::allocator<xpsPersistBitVector> __gnu_cxx::__alloc_traits<std::allocator<xpsPersistBitVector> >::rebind<xpsPersistBitVector>::other;
typedef xpsPersistBitVector & __gnu_cxx::__alloc_traits<std::allocator<xpsPersistBitVector> >::reference;
typedef unsigned long __gnu_cxx::__alloc_traits<std::allocator<xpsPersistBitVector> >::size_type;

File /usr/include/c++/4.8/ext/new_allocator.h:
__gnu_cxx::new_allocator<char>;
__gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> > >;
__gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<unsigned int const, unsigned int> > >;
__gnu_cxx::new_allocator<std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> >;
__gnu_cxx::new_allocator<std::pair<unsigned int const, unsigned int> >;
__gnu_cxx::new_allocator<unsigned int>;
__gnu_cxx::new_allocator<xpsGenLock*>;
__gnu_cxx::new_allocator<xpsIdAllocator*>;
__gnu_cxx::new_allocator<xpsPersistBitVector>;
typedef const char * __gnu_cxx::new_allocator<char>::const_pointer;
typedef const char & __gnu_cxx::new_allocator<char>::const_reference;
typedef char * __gnu_cxx::new_allocator<char>::pointer;
typedef char & __gnu_cxx::new_allocator<char>::reference;
typedef unsigned long __gnu_cxx::new_allocator<char>::size_type;
typedef const std::_Rb_tree_node<std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> > * __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> > >::const_pointer;
typedef const std::_Rb_tree_node<std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> > & __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> > >::const_reference;
typedef std::_Rb_tree_node<std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> > * __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> > >::pointer;
typedef std::_Rb_tree_node<std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> > & __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> > >::reference;
typedef unsigned long __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> > >::size_type;
typedef const std::_Rb_tree_node<std::pair<unsigned int const, unsigned int> > * __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<unsigned int const, unsigned int> > >::const_pointer;
typedef const std::_Rb_tree_node<std::pair<unsigned int const, unsigned int> > & __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<unsigned int const, unsigned int> > >::const_reference;
typedef std::_Rb_tree_node<std::pair<unsigned int const, unsigned int> > * __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<unsigned int const, unsigned int> > >::pointer;
typedef std::_Rb_tree_node<std::pair<unsigned int const, unsigned int> > & __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<unsigned int const, unsigned int> > >::reference;
typedef unsigned long __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<unsigned int const, unsigned int> > >::size_type;
typedef const std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> * __gnu_cxx::new_allocator<std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> >::const_pointer;
typedef const std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> & __gnu_cxx::new_allocator<std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> >::const_reference;
typedef std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> * __gnu_cxx::new_allocator<std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> >::pointer;
typedef std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> & __gnu_cxx::new_allocator<std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> >::reference;
typedef unsigned long __gnu_cxx::new_allocator<std::pair<pthread_rwlock_t* const, tls_rw_cnt_t> >::size_type;
typedef const std::pair<unsigned int const, unsigned int> * __gnu_cxx::new_allocator<std::pair<unsigned int const, unsigned int> >::const_pointer;
typedef const std::pair<unsigned int const, unsigned int> & __gnu_cxx::new_allocator<std::pair<unsigned int const, unsigned int> >::const_reference;
typedef std::pair<unsigned int const, unsigned int> * __gnu_cxx::new_allocator<std::pair<unsigned int const, unsigned int> >::pointer;
typedef std::pair<unsigned int const, unsigned int> & __gnu_cxx::new_allocator<std::pair<unsigned int const, unsigned int> >::reference;
typedef unsigned long __gnu_cxx::new_allocator<std::pair<unsigned int const, unsigned int> >::size_type;
typedef const unsigned int * __gnu_cxx::new_allocator<unsigned int>::const_pointer;
typedef const unsigned int & __gnu_cxx::new_allocator<unsigned int>::const_reference;
typedef unsigned int * __gnu_cxx::new_allocator<unsigned int>::pointer;
typedef unsigned int & __gnu_cxx::new_allocator<unsigned int>::reference;
typedef unsigned long __gnu_cxx::new_allocator<unsigned int>::size_type;
typedef xpsGenLock * const * __gnu_cxx::new_allocator<xpsGenLock*>::const_pointer;
typedef xpsGenLock * const& __gnu_cxx::new_allocator<xpsGenLock*>::const_reference;
typedef xpsGenLock ** __gnu_cxx::new_allocator<xpsGenLock*>::pointer;
typedef xpsGenLock *& __gnu_cxx::new_allocator<xpsGenLock*>::reference;
typedef unsigned long __gnu_cxx::new_allocator<xpsGenLock*>::size_type;
typedef xpsIdAllocator * const * __gnu_cxx::new_allocator<xpsIdAllocator*>::const_pointer;
typedef xpsIdAllocator * const& __gnu_cxx::new_allocator<xpsIdAllocator*>::const_reference;
typedef xpsIdAllocator ** __gnu_cxx::new_allocator<xpsIdAllocator*>::pointer;
typedef xpsIdAllocator *& __gnu_cxx::new_allocator<xpsIdAllocator*>::reference;
typedef unsigned long __gnu_cxx::new_allocator<xpsIdAllocator*>::size_type;
typedef const xpsPersistBitVector * __gnu_cxx::new_allocator<xpsPersistBitVector>::const_pointer;
typedef const xpsPersistBitVector & __gnu_cxx::new_allocator<xpsPersistBitVector>::const_reference;
typedef xpsPersistBitVector * __gnu_cxx::new_allocator<xpsPersistBitVector>::pointer;
typedef xpsPersistBitVector & __gnu_cxx::new_allocator<xpsPersistBitVector>::reference;
typedef unsigned long __gnu_cxx::new_allocator<xpsPersistBitVector>::size_type;

File /usr/include/c++/4.8/ext/numeric_traits.h:
__gnu_cxx::__numeric_traits_integer<char>;
__gnu_cxx::__numeric_traits_integer<int>;
__gnu_cxx::__numeric_traits_integer<long>;
__gnu_cxx::__numeric_traits_integer<short>;
__gnu_cxx::__numeric_traits_integer<unsigned long>;

File /usr/include/c++/4.8/ext/type_traits.h:
__gnu_cxx::__enable_if<true, unsigned int*>;
typedef unsigned int * __gnu_cxx::__enable_if<true, unsigned int*>::__type;

File /usr/include/c++/4.8/iosfwd:
typedef std::basic_ostream<char, std::char_traits<char> > std::ostream;

File /usr/include/c++/4.8/new:
std::nothrow_t;

File /usr/include/c++/4.8/ostream:
typedef std::basic_ostream<char, std::char_traits<char> > std::basic_ostream<char, std::char_traits<char> >::__ostream_type;
typedef char std::basic_ostream<char, std::char_traits<char> >::char_type;

File /usr/include/dirent.h:
typedef __dirstream DIR;

File /usr/include/getopt.h:
struct option;

File /usr/include/grp.h:
struct group;

File /usr/include/libio.h:
_IO_FILE;
_IO_marker;
struct _IO_FILE;
typedef void _IO_lock_t;
struct _IO_marker;

File /usr/include/linux/hdlc/ioctl.h:
typedef struct {
    unsigned int interval;
    unsigned int timeout;
} cisco_proto;
typedef struct {
    unsigned int t391;
    unsigned int t392;
    unsigned int n391;
    unsigned int n392;
    unsigned int n393;
    unsigned short lmi;
    unsigned short dce;
} fr_proto;
typedef struct {
    unsigned int dlci;
} fr_proto_pvc;
typedef struct {
    unsigned int dlci;
    char master[16];
} fr_proto_pvc_info;
typedef struct {
    unsigned short encoding;
    unsigned short parity;
} raw_hdlc_proto;
typedef struct {
    unsigned int clock_rate;
    unsigned int clock_type;
    unsigned short loopback;
} sync_serial_settings;
typedef struct {
    unsigned int clock_rate;
    unsigned int clock_type;
    unsigned short loopback;
    unsigned int slot_map;
} te1_settings;

File /usr/include/linux/if.h:
struct if_settings;
struct ifmap;
struct ifreq;

File /usr/include/locale.h:
lconv;

File /usr/include/net/if.h:
ifmap;
ifreq;
struct ifmap;
struct ifreq;

File /usr/include/netinet/in.h:
in_addr;
sockaddr_in;
struct in6_addr;
typedef unsigned int in_addr_t;
typedef unsigned short in_port_t;

File /usr/include/pwd.h:
struct passwd;

File /usr/include/python2.7/descrobject.h:
struct PyGetSetDef;
typedef PyObject *(*)(PyObject *, void *) getter;
typedef int (*)(PyObject *, PyObject *, void *) setter;

File /usr/include/python2.7/methodobject.h:
typedef PyObject *(*)(PyObject *, PyObject *) PyCFunction;
struct PyMethodDef;

File /usr/include/python2.7/object.h:
typedef struct {
    readbufferproc bf_getreadbuffer;
    writebufferproc bf_getwritebuffer;
    segcountproc bf_getsegcount;
    charbufferproc bf_getcharbuffer;
    getbufferproc bf_getbuffer;
    releasebufferproc bf_releasebuffer;
} PyBufferProcs;
typedef struct {
    lenfunc mp_length;
    binaryfunc mp_subscript;
    objobjargproc mp_ass_subscript;
} PyMappingMethods;
typedef struct {
    binaryfunc nb_add;
    binaryfunc nb_subtract;
    binaryfunc nb_multiply;
    binaryfunc nb_divide;
    binaryfunc nb_remainder;
    binaryfunc nb_divmod;
    ternaryfunc nb_power;
    unaryfunc nb_negative;
    unaryfunc nb_positive;
    unaryfunc nb_absolute;
    inquiry nb_nonzero;
    unaryfunc nb_invert;
    binaryfunc nb_lshift;
    binaryfunc nb_rshift;
    binaryfunc nb_and;
    binaryfunc nb_xor;
    binaryfunc nb_or;
    coercion nb_coerce;
    unaryfunc nb_int;
    unaryfunc nb_long;
    unaryfunc nb_float;
    unaryfunc nb_oct;
    unaryfunc nb_hex;
    binaryfunc nb_inplace_add;
    binaryfunc nb_inplace_subtract;
    binaryfunc nb_inplace_multiply;
    binaryfunc nb_inplace_divide;
    binaryfunc nb_inplace_remainder;
    ternaryfunc nb_inplace_power;
    binaryfunc nb_inplace_lshift;
    binaryfunc nb_inplace_rshift;
    binaryfunc nb_inplace_and;
    binaryfunc nb_inplace_xor;
    binaryfunc nb_inplace_or;
    binaryfunc nb_floor_divide;
    binaryfunc nb_true_divide;
    binaryfunc nb_inplace_floor_divide;
    binaryfunc nb_inplace_true_divide;
    unaryfunc nb_index;
} PyNumberMethods;
typedef struct _object PyObject;
typedef struct {
    lenfunc sq_length;
    binaryfunc sq_concat;
    ssizeargfunc sq_repeat;
    ssizeargfunc sq_item;
    ssizessizeargfunc sq_slice;
    ssizeobjargproc sq_ass_item;
    ssizessizeobjargproc sq_ass_slice;
    objobjproc sq_contains;
    binaryfunc sq_inplace_concat;
    ssizeargfunc sq_inplace_repeat;
} PySequenceMethods;
typedef struct bufferinfo Py_buffer;
struct _object;
struct _typeobject;
typedef PyObject *(*)(struct _typeobject *, Py_ssize_t) allocfunc;
typedef PyObject *(*)(PyObject *, PyObject *) binaryfunc;
struct bufferinfo;
typedef Py_ssize_t (*)(PyObject *, Py_ssize_t, char **) charbufferproc;
typedef int (*)(PyObject *, PyObject *) cmpfunc;
typedef int (*)(PyObject **, PyObject **) coercion;
typedef PyObject *(*)(PyObject *, PyObject *, PyObject *) descrgetfunc;
typedef int (*)(PyObject *, PyObject *, PyObject *) descrsetfunc;
typedef void (*)(PyObject *) destructor;
typedef void (*)(void *) freefunc;
typedef PyObject *(*)(PyObject *, char *) getattrfunc;
typedef PyObject *(*)(PyObject *, PyObject *) getattrofunc;
typedef int (*)(PyObject *, Py_buffer *, int) getbufferproc;
typedef PyObject *(*)(PyObject *) getiterfunc;
typedef long (*)(PyObject *) hashfunc;
typedef int (*)(PyObject *, PyObject *, PyObject *) initproc;
typedef int (*)(PyObject *) inquiry;
typedef PyObject *(*)(PyObject *) iternextfunc;
typedef Py_ssize_t (*)(PyObject *) lenfunc;
typedef PyObject *(*)(struct _typeobject *, PyObject *, PyObject *) newfunc;
typedef int (*)(PyObject *, PyObject *, PyObject *) objobjargproc;
typedef int (*)(PyObject *, PyObject *) objobjproc;
typedef int (*)(PyObject *, FILE *, int) printfunc;
typedef Py_ssize_t (*)(PyObject *, Py_ssize_t, void **) readbufferproc;
typedef void (*)(PyObject *, Py_buffer *) releasebufferproc;
typedef PyObject *(*)(PyObject *) reprfunc;
typedef PyObject *(*)(PyObject *, PyObject *, int) richcmpfunc;
typedef Py_ssize_t (*)(PyObject *, Py_ssize_t *) segcountproc;
typedef int (*)(PyObject *, char *, PyObject *) setattrfunc;
typedef int (*)(PyObject *, PyObject *, PyObject *) setattrofunc;
typedef PyObject *(*)(PyObject *, Py_ssize_t) ssizeargfunc;
typedef int (*)(PyObject *, Py_ssize_t, PyObject *) ssizeobjargproc;
typedef PyObject *(*)(PyObject *, Py_ssize_t, Py_ssize_t) ssizessizeargfunc;
typedef int (*)(PyObject *, Py_ssize_t, Py_ssize_t, PyObject *) ssizessizeobjargproc;
typedef PyObject *(*)(PyObject *, PyObject *, PyObject *) ternaryfunc;
typedef int (*)(PyObject *, visitproc, void *) traverseproc;
typedef PyObject *(*)(PyObject *) unaryfunc;
typedef int (*)(PyObject *, void *) visitproc;
typedef Py_ssize_t (*)(PyObject *, Py_ssize_t, void **) writebufferproc;

File /usr/include/python2.7/pyport.h:
typedef long Py_ssize_t;

File /usr/include/python2.7/pystate.h:
typedef enum {PyGILState_LOCKED, PyGILState_UNLOCKED} PyGILState_STATE;

File /usr/include/python2.7/pythonrun.h:
typedef struct {
    int cf_flags;
} PyCompilerFlags;

File /usr/include/search.h:
typedef enum {preorder, postorder, endorder, leaf} VISIT;
typedef void (*)(const void *, VISIT, int) __action_fn_t;
typedef int (*)(const void *, const void *) __compar_fn_t;

File /usr/include/signal.h:
typedef void (*)(int) __sighandler_t;

File /usr/include/stdint.h:
typedef short int16_t;
typedef int int32_t;
typedef long int64_t;
typedef signed char int8_t;
typedef unsigned short uint16_t;
typedef unsigned int uint32_t;
typedef unsigned long uint64_t;
typedef unsigned char uint8_t;
typedef unsigned long uintptr_t;

File /usr/include/stdio.h:
typedef struct _IO_FILE FILE;
typedef _IO_FILE __FILE;
typedef long ssize_t;
typedef typedef __va_list_tag __va_list_tag [1] va_list;

File /usr/include/stdlib.h:
div_t;
ldiv_t;
lldiv_t;
typedef int (*)(const void *, const void *) __compar_fn_t;
typedef div_t div_t;
typedef ldiv_t ldiv_t;
typedef lldiv_t lldiv_t;

File /usr/include/time.h:
timespec;
tm;
typedef int clockid_t;
typedef long time_t;
struct timespec;

File /usr/include/wchar.h:
__mbstate_t;
typedef __mbstate_t __mbstate_t;
typedef __mbstate_t mbstate_t;

File /usr/include/wctype.h:
typedef const __int32_t * wctrans_t;
typedef unsigned long wctype_t;

File /usr/include/x86_64-linux-gnu/bits/fcntl-linux.h:
__pid_type;

File /usr/include/x86_64-linux-gnu/bits/pthreadtypes.h:
__pthread_internal_list;
pthread_cond_t;
pthread_mutex_t;
pthread_mutex_t::__pthread_mutex_s;
pthread_mutexattr_t;
pthread_rwlock_t;
pthread_rwlockattr_t;
typedef __pthread_internal_list __pthread_list_t;
union pthread_attr_t;
typedef pthread_cond_t pthread_cond_t;
typedef unsigned int pthread_key_t;
typedef pthread_mutex_t pthread_mutex_t;
typedef pthread_mutexattr_t pthread_mutexattr_t;
typedef int pthread_once_t;
typedef pthread_rwlock_t pthread_rwlock_t;
typedef pthread_rwlockattr_t pthread_rwlockattr_t;
typedef unsigned long pthread_t;

File /usr/include/x86_64-linux-gnu/bits/sched.h:
sched_param;

File /usr/include/x86_64-linux-gnu/bits/semaphore.h:
typedef union {
    char __size[32];
    long __align;
} sem_t;

File /usr/include/x86_64-linux-gnu/bits/sigaction.h:
struct sigaction;

File /usr/include/x86_64-linux-gnu/bits/siginfo.h:
typedef long __sigchld_clock_t;
typedef struct {
    int si_signo;
    int si_errno;
    int si_code;
    union {...} _sifields;
} siginfo_t;
union sigval;
typedef union sigval sigval_t;

File /usr/include/x86_64-linux-gnu/bits/sigset.h:
typedef struct {
    unsigned long __val[16];
} __sigset_t;

File /usr/include/x86_64-linux-gnu/bits/sockaddr.h:
typedef unsigned short sa_family_t;

File /usr/include/x86_64-linux-gnu/bits/socket.h:
sockaddr;
struct sockaddr;
typedef unsigned int socklen_t;

File /usr/include/x86_64-linux-gnu/bits/socket_type.h:
__socket_type;
enum __socket_type;

File /usr/include/x86_64-linux-gnu/bits/stat.h:
stat;
struct stat;

File /usr/include/x86_64-linux-gnu/bits/time.h:
timeval;

File /usr/include/x86_64-linux-gnu/bits/types.h:
typedef long __blkcnt_t;
typedef long __blksize_t;
typedef char * __caddr_t;
typedef long __clock_t;
typedef int __clockid_t;
typedef unsigned long __dev_t;
typedef unsigned int __gid_t;
typedef unsigned long __ino_t;
typedef int __int32_t;
typedef unsigned int __mode_t;
typedef unsigned long __nlink_t;
typedef long __off64_t;
typedef long __off_t;
typedef int __pid_t;
typedef unsigned int __socklen_t;
typedef long __ssize_t;
typedef long __suseconds_t;
typedef long __syscall_slong_t;
typedef long __time_t;
typedef unsigned int __uid_t;
typedef unsigned int __useconds_t;

File /usr/include/x86_64-linux-gnu/c++/4.8/bits/atomic_word.h:
typedef int _Atomic_word;

File /usr/include/x86_64-linux-gnu/c++/4.8/bits/c++config.h:
typedef long std::ptrdiff_t;
typedef unsigned long std::size_t;

File /usr/include/x86_64-linux-gnu/sys/select.h:
fd_set;
typedef long __fd_mask;
typedef fd_set fd_set;
typedef struct {
    unsigned long __val[16];
} sigset_t;

File /usr/include/x86_64-linux-gnu/sys/types.h:
typedef unsigned int gid_t;
typedef short int16_t;
typedef int int32_t;
typedef long int64_t;
typedef signed char int8_t;
typedef int pid_t;
typedef long ssize_t;
typedef unsigned int uid_t;

File /usr/lib/gcc/x86_64-linux-gnu/4.8/include/stdarg.h:
typedef typedef __va_list_tag __va_list_tag [1] __gnuc_va_list;
typedef typedef __va_list_tag __va_list_tag [1] va_list;

File /usr/lib/gcc/x86_64-linux-gnu/4.8/include/stddef.h:
typedef unsigned long size_t;
typedef unsigned int wint_t;

File <built-in>:
typedef std;
typedef __va_list_tag __va_list_tag;
struct __va_list_tag;
(gdb) 
