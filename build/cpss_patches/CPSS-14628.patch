diff --git a/mainPpDrv/h/cpss/dxCh/dxChxGen/pcl/cpssDxChPcl.h b/mainPpDrv/h/cpss/dxCh/dxChxGen/pcl/cpssDxChPcl.h
index 99a621f445..0493df7ccf 100755
--- a/mainPpDrv/h/cpss/dxCh/dxChxGen/pcl/cpssDxChPcl.h
+++ b/mainPpDrv/h/cpss/dxCh/dxChxGen/pcl/cpssDxChPcl.h
@@ -1173,6 +1173,9 @@ typedef enum{
     /** @brief type for thread to handle SFLOW mirroring packets */
     CPSS_DXCH_PCL_ACTION_EGRESS_PHA_THREAD_SFLOW_V5_MIRROR_E,
 
+    /** @brief type for thread to handle enhanced SFLOW mirroring packets */
+    CPSS_DXCH_PCL_ACTION_EGRESS_PHA_THREAD_ENHANCED_SFLOW_E,
+    
     CPSS_DXCH_PCL_ACTION_EGRESS_PHA_THREAD___LAST___E   /* not to be used */
 }CPSS_DXCH_PCL_ACTION_EGRESS_PHA_THREAD_TYPE_ENT;
 
@@ -1238,6 +1241,19 @@ typedef struct{
     */
     GT_U32  sflowSamplingRate;
 }CPSS_DXCH_PCL_ACTION_EGRESS_PHA_THREAD_SFLOW_V5_STC ;
+/**
+ * @struct CPSS_DXCH_PCL_ACTION_EGRESS_PHA_THREAD_ENHANCED_SFLOW_STC
+ *
+ * @brief This structure defines the PHA metadata for Enhanced SFLOW PHA threads.
+ *
+ *  (APPLICABLE DEVICES: Falcon, AC5P, AC5X, Harrier)
+*/
+typedef struct{
+    /** @brief The Agent IP information information
+    */
+    GT_IPADDR agentIpAddr;
+} CPSS_DXCH_PCL_ACTION_EGRESS_PHA_THREAD_ENHANCED_SFLOW_STC;
+
 /**
  * @struct CPSS_DXCH_PCL_ACTION_EGRESS_PHA_THREAD_CLASSIFIER_NSH_OVER_VXLAN_GPE_STC
  *
@@ -1290,6 +1306,10 @@ typedef union{
 
     /** @brief EPCL info for thread to handle SFLOW packets in the system */
     CPSS_DXCH_PCL_ACTION_EGRESS_PHA_THREAD_SFLOW_V5_STC epclSflowV5Mirror;
+
+    /** @brief EPCL info for thread to handle SFLOW packets in the system */
+    CPSS_DXCH_PCL_ACTION_EGRESS_PHA_THREAD_ENHANCED_SFLOW_STC epclEnhancedSflow;
+
 }CPSS_DXCH_PCL_ACTION_EGRESS_PHA_THREAD_INFO_UNT;
 
 /**
diff --git a/mainPpDrv/h/cpss/dxCh/dxChxGen/pha/cpssDxChPha.h b/mainPpDrv/h/cpss/dxCh/dxChxGen/pha/cpssDxChPha.h
index 41f9774f81..7da8a1d77e 100644
--- a/mainPpDrv/h/cpss/dxCh/dxChxGen/pha/cpssDxChPha.h
+++ b/mainPpDrv/h/cpss/dxCh/dxChxGen/pha/cpssDxChPha.h
@@ -308,14 +308,28 @@ typedef enum{
     /** PHA thread to handle packet drop */
     CPSS_DXCH_PHA_THREAD_TYPE_DROP_ALL_TRAFFIC_E,
 
-    /** Thread to process ERSPAN Type II Same Device Mirroring over IPv4 tunnel
-     *  APPLICABLE DEVICES: Falcon   */
+    /** Thread to process ERSPAN Type II Same Device Mirroring over IPv4 tunnel */
     CPSS_DXCH_PHA_THREAD_TYPE_ERSPAN_TYPE_II_SAME_DEV_IPV4_E,
 
-    /** Thread to process ERSPAN Type II Same Device Mirroring over IPv6 tunnel
-     *  APPLICABLE DEVICES: Falcon   */
+    /** Thread to process ERSPAN Type II Same Device Mirroring over IPv6 tunnel */
     CPSS_DXCH_PHA_THREAD_TYPE_ERSPAN_TYPE_II_SAME_DEV_IPV6_E,
 
+    /** PHA thread for encapsulating the egress mirrored data
+      * With enhanced SFLOW IPv4 header */
+    CPSS_DXCH_PHA_THREAD_TYPE_ENHANCED_SFLOW_SAVE_TARGET_PORT_E,
+
+    /** PHA thread for encapsulating the egress mirrored data
+      * With enhanced SFLOW IPv4 header */
+    CPSS_DXCH_PHA_THREAD_TYPE_ENHANCED_SFLOW_E,
+
+     /** PHA thread for encapsulating the egress mirrored data
+      * With enhanced SFLOW IPv6 header */
+    CPSS_DXCH_PHA_THREAD_TYPE_ENHANCED_SFLOW_FILL_REMAIN_IPV4_E,
+
+     /** PHA thread for encapsulating the egress mirrored data
+      * With enhanced SFLOW IPv6 header */
+    CPSS_DXCH_PHA_THREAD_TYPE_ENHANCED_SFLOW_FILL_REMAIN_IPV6_E,
+
     CPSS_DXCH_PHA_THREAD_TYPE___LAST___E  /* not to be used */
 }CPSS_DXCH_PHA_THREAD_TYPE_ENT;
 
@@ -503,7 +517,6 @@ typedef struct{
     GT_U32  reserved;
 }CPSS_DXCH_PHA_THREAD_INFO_TYPE_CLASSIFIER_NSH_OVER_VXLAN_GPE_STC;
 
-
 /**
  * @struct CPSS_DXCH_PHA_THREAD_INFO_TYPE_SRV6_SRC_NODE_STC
  *
@@ -564,6 +577,19 @@ typedef struct {
     GT_U32 sflowDataFormat;
 }  CPSS_DXCH_PHA_THREAD_INFO_TYPE_SFLOW_V5_STC;
 
+/**
+ * @struct CPSS_DXCH_PHA_THREAD_INFO_TYPE_ENHANCED_SFLOW_STC
+ *
+ * @brief This structure defines the fields for the template needed for the
+ *      PHA thread to handle enhanced SFLOW type5 Header fields
+ *
+ *  (APPLICABLE DEVICES: Falcon; AC5P; AC5X)
+ */
+typedef struct{
+    /* @original source module or device id of the packet*/
+    GT_U8   srcModId;
+
+} CPSS_DXCH_PHA_THREAD_INFO_TYPE_ENHANCED_SFLOW_STC;
 
 /**
  * @struct CPSS_DXCH_PHA_SHARED_MEMORY_ERSPAN_L2_STC
@@ -819,6 +845,9 @@ typedef union{
 
     /** template for thread to handle SFLOW mirror packets in the system */
     CPSS_DXCH_PHA_THREAD_INFO_TYPE_SFLOW_V5_STC  sflowV5Mirror;
+
+    /** template for thread to handle enhanced SFLOW mirror packets in the system */
+    CPSS_DXCH_PHA_THREAD_INFO_TYPE_ENHANCED_SFLOW_STC enhancedSflow;
 }CPSS_DXCH_PHA_THREAD_INFO_UNT;
 
 /**
@@ -1472,8 +1501,8 @@ GT_STATUS cpssDxChPhaStatisticalProcessingCounterGet
 *
 * @brief   Set the ERSPAN entry in the PHA shared memory table.
 *
-* @note   APPLICABLE DEVICES:      Falcon.
-* @note   NOT APPLICABLE DEVICES:  xCat3; AC5; Lion2; Bobcat2; Caelum; Aldrin; AC3X; Bobcat3; Aldrin2; AC5P; AC5X; Harrier; Ironman.
+* @note   APPLICABLE DEVICES:      Falcon; AC5P; AC5X; Harrier.
+* @note   NOT APPLICABLE DEVICES:  xCat3; AC5; Lion2; Bobcat2; Caelum; Aldrin; AC3X; Bobcat3; Aldrin2; Ironman.
 *
 * @param[in] devNum                   - device number.
 * @param[in] analyzerIndex            - analyzer index.
@@ -1503,8 +1532,8 @@ GT_STATUS cpssDxChPhaSharedMemoryErspanIpTemplateEntrySet
 *
 * @brief   Get the ERSPAN entry from the PHA shared memory table.
 *
-* @note   APPLICABLE DEVICES:      Falcon.
-* @note   NOT APPLICABLE DEVICES:  xCat3; AC5; Lion2; Bobcat2; Caelum; Aldrin; AC3X; Bobcat3; Aldrin2; AC5P; AC5X; Harrier; Ironman.
+* @note   APPLICABLE DEVICES:      Falcon; AC5P; AC5X; Harrier.
+* @note   NOT APPLICABLE DEVICES:  xCat3; AC5; Lion2; Bobcat2; Caelum; Aldrin; AC3X; Bobcat3; Aldrin2; Ironman.
 *
 * @param[in] devNum                   - device number.
 * @param[in] analyzerIndex            - analyzer index.
diff --git a/mainPpDrv/h/cpss/dxCh/dxChxGen/pha/private/prvCpssDxChPpaFwImageInfo_Ac5pDefault.h b/mainPpDrv/h/cpss/dxCh/dxChxGen/pha/private/prvCpssDxChPpaFwImageInfo_Ac5pDefault.h
index cb665e7008..058572995c 100644
--- a/mainPpDrv/h/cpss/dxCh/dxChxGen/pha/private/prvCpssDxChPpaFwImageInfo_Ac5pDefault.h
+++ b/mainPpDrv/h/cpss/dxCh/dxChxGen/pha/private/prvCpssDxChPpaFwImageInfo_Ac5pDefault.h
@@ -16,9 +16,9 @@
  *
  *   NOTE: this file is generated automatically by fw tool
  *
- *   APPLICABLE DEVICES: Ac5p; Ac5x.
+ *   APPLICABLE DEVICES: Ac5p; Ac5x; Harrier.
  *
- * @version 21_06_00_00
+ * @version 22_02_00_00
  *******************************************************************************
  */
 
@@ -27,12 +27,12 @@
 
 /* PHA fw version information */
 const PRV_CPSS_DXCH_PHA_FW_IMAGE_VERSION_INFO_STC fwImageVersionAc5pDefault = {
-     0x21060000 /* | year << 24 | month << 16 | in_month << 8 | debug | */
-    ,0x00000000 /* image_id << 24 */
-    ,"Default"}; /* image_name */
+	 0x22020000 /* | year << 24 | month << 16 | in_month << 8 | debug | */
+	,0x00000000 /* image_id << 24 */
+	,"Default"}; /* image_name */
 
 /* The number of words of data in prvCpssDxChPpaFwImemAc5pDefault*/
-#define PRV_CPSS_DXCH_PPA_FW_IMAGE_SIZE_AC5P_DEFAULT (1108)
+#define PRV_CPSS_DXCH_PPA_FW_IMAGE_SIZE_AC5P_DEFAULT (1320)
 
 /* The FW code to load into the PHA unit */
 const GT_U32 prvCpssDxChPpaFwImemAc5pDefault[PRV_CPSS_DXCH_PPA_FW_IMAGE_SIZE_AC5P_DEFAULT] = {
@@ -167,15 +167,15 @@ const GT_U32 prvCpssDxChPpaFwImemAc5pDefault[PRV_CPSS_DXCH_PPA_FW_IMAGE_SIZE_AC5
     ,0x211cf090
     ,0x10d00f00
     ,0xc020211c
-    ,0x03ba8010
-    ,0x500035c0
-    ,0x2d500160
+    ,0x048c8010
+    ,0x50003cc0
+    ,0x345001be
     ,0x90105000
     ,0x1100eb30
     ,0x82104366
-    ,0x0024c040
+    ,0x002bc040
     ,0x43000050
-    ,0x20432106
+    ,0x20432202
     ,0x00038011
     ,0x50000750
     ,0xa3239343
@@ -192,342 +192,438 @@ const GT_U32 prvCpssDxChPpaFwImemAc5pDefault[PRV_CPSS_DXCH_PPA_FW_IMAGE_SIZE_AC5
     ,0x30420000
     ,0x109200c0
     ,0x400010a0
-    ,0x43900d43
-    ,0x01441ffc
-    ,0x29104400
+    ,0x441ffc43
+    ,0x11440001
+    ,0x29135000
     ,0x12822073
-    ,0xfc877097
-    ,0x0001471f
-    ,0x60002947
-    ,0x900d9340
-    ,0x4a00014a
-    ,0x10765114
-    ,0x46900d85
-    ,0x1046900d
-    ,0x88107989
-    ,0x0d49900d
-    ,0x9a104990
-    ,0x1ffc8aa0
+    ,0x01471ffc
+    ,0x00294700
+    ,0x0d934060
+    ,0x900d4390
+    ,0x7651144a
+    ,0x900d8510
+    ,0x46900d46
+    ,0x87709710
+    ,0x49900d88
+    ,0x1049900d
+    ,0xfc8aa09a
+    ,0x00014a1f
+    ,0xc0604400
+    ,0x20d00f00
+    ,0x8011211c
+    ,0x107989ea
+    ,0x7549f7d0
+    ,0x46b1b444
+    ,0x254c1c26
+    ,0x01440200
+    ,0x54084435
     ,0x50935122
     ,0x444143c0
-    ,0x1c20d00f
-    ,0xea801121
+    ,0x0f000000
+    ,0x07404f00
     ,0x4e00004e
     ,0x0f000000
     ,0x509450d0
-    ,0x54084435
+    ,0x84304290
     ,0x00430740
     ,0x9fe04300
     ,0x004f0684
-    ,0x07404f00
+    ,0x9230d00f
     ,0x463f8330
     ,0x244dff22
     ,0x0d42cafe
-    ,0x84304290
-    ,0x49460344
-    ,0x01450807
-    ,0xc0304a00
-    ,0x9230d00f
-    ,0x00014b02
-    ,0x4705d04b
-    ,0x0f4806e9
-    ,0x080146c0
-    ,0xa8495f03
-    ,0xaa004400
-    ,0x484e0246
-    ,0xa2475f02
-    ,0x29369424
-    ,0x95253699
-    ,0x00a02a36
-    ,0x4500ac4a
-    ,0x36922b36
-    ,0x28369327
-    ,0xf426369a
-    ,0x3698225c
-    ,0xe6223697
-    ,0x00074606
-    ,0x4b5c0f48
-    ,0x96470003
-    ,0x44036042
-    ,0xa049c4c0
-    ,0x001f4506
-    ,0x44075049
+    ,0x540f4a00
+    ,0x44050d45
+    ,0x0d4206c0
+    ,0xc0304954
+    ,0x03488200
+    ,0x45814bc6
+    ,0x48000f4b
+    ,0x0b46000b
+    ,0x42c64049
+    ,0x10449850
+    ,0xccc04598
+    ,0x4686004a
+    ,0x36bd2a36
+    ,0x2436bc25
+    ,0xc12236bb
+    ,0x503e2936
+    ,0xfc2736bf
+    ,0x36ba279c
+    ,0x2836c02b
+    ,0xc22636be
+    ,0x45440744
+    ,0x034a0442
+    ,0x040f4600
+    ,0x4b440748
+    ,0xbfbe4ac6
+    ,0x44be8845
+    ,0x0742bc10
+    ,0x44074244
+    ,0xdd2b36b1
+    ,0xca104b93
+    ,0x46c07448
+    ,0x4a494403
+    ,0x2536b424
+    ,0x012a36b9
+    ,0x36b549c4
+    ,0x2836b726
+    ,0x01440807
+    ,0x36b64208
+    ,0xb2b28727
+    ,0x36b32236
+    ,0x49540d46
+    ,0xb846000b
+    ,0x44072936
+    ,0x45c00f4a
+    ,0x00a84200
+    ,0x45a60044
+    ,0x8648000f
+    ,0x8e004a92
+    ,0x002b4cf4
+    ,0x36ab488a
+    ,0x2436aa25
+    ,0xa42236a9
+    ,0x4604424a
+    ,0x362936af
+    ,0x36ac4950
+    ,0x2a36b026
+    ,0x44034404
+    ,0x2836ae45
+    ,0xfc2b36a8
+    ,0x540f279c
+    ,0xad4a9e24
+    ,0x00032736
+    ,0x4806c04b
+    ,0x0f45b801
+    ,0x4745814b
+    ,0xa749050d
+    ,0x36a32a36
+    ,0x46ba4a26
+    ,0x36a14508
+    ,0x44be1024
+    ,0x402536a2
+    ,0xb47448ba
+    ,0x504a4407
+    ,0xba03499e
+    ,0x2b369f47
+    ,0x072836a5
+    ,0xb3be2936
+    ,0x46aa004a
+    ,0x422236a0
+    ,0x46c00fb2
+    ,0xac253699
+    ,0x44074500
+    ,0x4b000148
+    ,0xa62736a4
+    ,0x4408012a
+    ,0x07494407
+    ,0x02a24744
+    ,0x48b0104b
+    ,0x00a849b2
+    ,0x4606e644
+    ,0x9a4a0001
+    ,0x369e2636
+    ,0x9c4b5c0f
+    ,0x36962836
+    ,0x479a082b
+    ,0x88225cf4
+    ,0x4506a024
+    ,0x9729369d
+    ,0x369b2236
+    ,0x4806e927
+    ,0x36914407
+    ,0x2a369526
+    ,0x614a00a0
+    ,0x36984602
+    ,0xd0484e02
+    ,0x07904705
+    ,0x49460342
+    ,0x5045035f
+    ,0x42037449
+    ,0x93475f02
+    ,0x368d2836
+    ,0x4bd0042b
+    ,0xbdd846d6
+    ,0x46064b2a
+    ,0x90440360
+    ,0x5f032536
+    ,0x8e273692
+    ,0x36942236
+    ,0x45040329
+    ,0x5524368f
+    ,0x49001f45
+    ,0xe022bdec
+    ,0x000348e4
+    ,0x48000747
+    ,0x00134a08
+    ,0x2a368c46
+    ,0x00263688
+    ,0xd6544444
+    ,0x0f28368a
+    ,0xc4c04bc0
+    ,0x25368749
+    ,0x2144d401
+    ,0x485c0f4b
+    ,0x89420403
     ,0xe4e02736
-    ,0x4bd00447
-    ,0x6148e4e0
-    ,0x07904602
-    ,0xd8420374
-    ,0x36912abd
-    ,0x28368a26
-    ,0x892b368d
-    ,0x25369044
-    ,0x5f490801
-    ,0x368b4503
-    ,0x24368f29
-    ,0x082146d6
-    ,0x46064b4a
-    ,0x8e2a368c
-    ,0x44002236
-    ,0xa628bdd6
-    ,0x04034900
-    ,0x44d40145
-    ,0x5522bdec
-    ,0x22368526
-    ,0x54243686
-    ,0x368245d6
-    ,0x28368129
-    ,0x04034406
-    ,0x46001342
-    ,0xae2a3683
-    ,0x36884a00
-    ,0x804bae00
-    ,0xacf82736
-    ,0x4bc00f27
-    ,0x4b253687
-    ,0x26367f22
-    ,0x5446c4c0
-    ,0xc25542c2
-    ,0x45000f44
-    ,0x3684284d
-    ,0x45c4c02b
-    ,0x7d292d10
-    ,0x367c2436
-    ,0xfc25367e
-    ,0x3678272d
-    ,0x2a4d1028
-    ,0xfc4b4400
-    ,0x4844072a
-    ,0x03273677
-    ,0x46804900
-    ,0x29367945
-    ,0x44074200
-    ,0x4a000b44
+    ,0x22368547
+    ,0x00ae46c4
+    ,0x2436864a
+    ,0x8b45000f
+    ,0xae002936
+    ,0xc0490801
+    ,0x064b45c4
+    ,0x2a368344
+    ,0xc026367f
+    ,0x2836814b
+    ,0x5422367c
+    ,0xa60442c2
+    ,0x2b368448
+    ,0xc2552436
+    ,0x25367e44
+    ,0xa627acf8
+    ,0x44004900
     ,0x012b367b
-    ,0x367a4bc0
-    ,0x0026bdfc
-    ,0xc40045b8
-    ,0x47000549
-    ,0x1f487b04
-    ,0x28366f42
-    ,0x7047c800
-    ,0x36752936
-    ,0x26367625
-    ,0x36742236
-    ,0x2a367124
-    ,0xfc4aa4a0
-    ,0xa4a0447b
-    ,0x13499ca4
-    ,0x366e4900
-    ,0x48000f27
-    ,0x734b000b
-    ,0x2b367228
-    ,0xa44bc4c0
-    ,0x2df8489c
+    ,0x36824bc0
+    ,0x27368029
+    ,0x7d454680
+    ,0x26bdfc45
+    ,0xfc272dfc
+    ,0x4d10284d
+    ,0x292d102a
+    ,0x36782a36
+    ,0x27367728
+    ,0x75263676
+    ,0xb8002536
+    ,0x0b42001f
+    ,0x44074b00
+    ,0x4a000b44
+    ,0x7a293679
+    ,0x487b0449
+    ,0x0547c800
+    ,0x44074700
+    ,0x49000348
+    ,0xa4a02a36
+    ,0x447bfc4a
+    ,0xa04bc4c0
+    ,0xc40042a4
+    ,0x7026bdf8
+    ,0x36732936
+    ,0x2b367222
+    ,0x71243674
     ,0x47000b25
-    ,0x9ca424ad
-    ,0x25366c47
-    ,0xf842001f
-    ,0x366626bd
-    ,0x6524366b
-    ,0x000f2736
-    ,0x4a001749
-    ,0xf8293667
-    ,0x46000748
-    ,0x6d48000b
-    ,0x9ca42636
-    ,0x45000342
-    ,0x001f4700
-    ,0x4b001b44
-    ,0x6a459ca4
-    ,0xa4ac2236
-    ,0x5e47a4ac
-    ,0x36682936
-    ,0x4a9ca42a
-    ,0x0749a4ac
-    ,0x28365d46
-    ,0x6342001b
-    ,0x9ca42536
-    ,0x44a4ac4b
-    ,0x00032b36
-    ,0x42a4ac45
-    ,0x03263664
-    ,0x9ca44800
-    ,0x134aa4ac
-    ,0x00034a00
-    ,0x27365c49
-    ,0x69243662
-    ,0x45d0cc22
-    ,0x034b0017
-    ,0x00034400
-    ,0x49bcb847
-    ,0xa4ac4200
-    ,0x28365446
-    ,0x0348b8b4
-    ,0x36614600
-    ,0xb0293655
-    ,0xccc847b4
-    ,0x4ba4ac44
-    ,0x0325365a
-    ,0x2436592b
-    ,0x03273653
-    ,0x44074a00
-    ,0x2a365f49
-    ,0x4400266d
-    ,0x26365b48
-    ,0x0342c8c4
-    ,0x36604500
-    ,0x03440003
-    ,0xaca84b00
-    ,0x22365845
-    ,0x0c48d001
-    ,0x2a365647
-    ,0x3029364c
-    ,0xc0bc497b
-    ,0x47044b4a
-    ,0x00032836
-    ,0x25365142
-    ,0xa44bc4c0
-    ,0xd15a44a8
-    ,0xa0454509
-    ,0x478042a4
-    ,0x48000f46
-    ,0x4b263652
-    ,0x49001349
-    ,0x4a4a1c07
-    ,0x36502736
-    ,0x2b365724
-    ,0x000345d1
-    ,0x4444094b
-    ,0xb247000b
-    ,0xacb44a7b
-    ,0x42263649
-    ,0xacb42836
-    ,0x46d20048
-    ,0x0722364f
-    ,0x47acb42a
-    ,0x9c44d000
-    ,0x36484ba0
-    ,0x42001f25
-    ,0x36412436
-    ,0x49540f27
-    ,0x434a0017
-    ,0x364d2936
-    ,0x0746acb4
-    ,0xacb44600
-    ,0x45000342
-    ,0x472b364e
-    ,0x47001f49
-    ,0x1b444780
-    ,0xacb44b00
-    ,0x22364645
-    ,0xd0e844d2
-    ,0x29363a47
-    ,0xb42a3644
-    ,0xcc284aac
-    ,0x40289dfc
-    ,0x44072636
-    ,0x25363f42
-    ,0x014bacb4
-    ,0x2b364524
-    ,0xe245001f
-    ,0x000f427b
-    ,0x28363946
-    ,0x001f4b00
-    ,0x47440749
-    ,0x3844000b
-    ,0x363e2736
-    ,0x3742001f
-    ,0xd8f02636
-    ,0x22363d46
-    ,0x0f45e4fc
-    ,0x44d8f024
-    ,0x9647ce2b
-    ,0xf8a649f8
-    ,0x2536364b
-    ,0x540f42b8
-    ,0x2b363c45
-    ,0x2f293631
-    ,0x36352736
+    ,0x6e48000f
+    ,0x366f2736
+    ,0x252df828
+    ,0x9ca44500
+    ,0x46000749
+    ,0x6d490013
+    ,0x366c2636
+    ,0xf8489ca4
+    ,0x001b24ad
+    ,0x479ca44b
+    ,0x0342001f
+    ,0x27366542
+    ,0xa424366b
+    ,0x36664b9c
+    ,0x4a001728
+    ,0x000f2636
+    ,0x469ca449
+    ,0xa4293667
+    ,0x9ca4459c
+    ,0x1f2b3669
+    ,0x00074400
+    ,0x22366a47
+    ,0x64253663
+    ,0x4b001744
+    ,0x6848a4ac
+    ,0x9ca42a36
+    ,0x48000b4a
+    ,0x000349a4
+    ,0x45000346
+    ,0xac42001b
+    ,0xa4ac47a4
+    ,0xac27365c
+    ,0xd0cc42a4
+    ,0x46a4ac45
+    ,0xac29365e
+    ,0x4800034a
+    ,0x5d4a0013
+    ,0xa4ac2836
+    ,0x2436624b
+    ,0x36612536
+    ,0x47000322
+    ,0x60440003
+    ,0xa4ac2b36
+    ,0xb8450003
+    ,0x6d0c49bc
+    ,0x49000326
+    ,0x5a26365b
+    ,0x2a365f48
+    ,0xc84b0003
+    ,0xb4b044cc
+    ,0x42000347
+    ,0x36592736
+    ,0x4bc4c024
+    ,0x03283654
+    ,0xb8b44a00
+    ,0x52494407
+    ,0x36552636
+    ,0x45aca829
+    ,0x5342c8c4
+    ,0x4400032b
+    ,0x5847044b
+    ,0x36512236
+    ,0x46478025
+    ,0xd0014b00
+    ,0x2a365648
+    ,0x004ac0bc
+    ,0x36574844
+    ,0x0946d200
+    ,0x00034545
+    ,0x47d15a42
+    ,0x0344a8a4
+    ,0x42a4a027
+    ,0x4945d107
+    ,0x364c2636
+    ,0x497b3029
+    ,0x1c074800
+    ,0x28364b4a
+    ,0x504ba09c
+    ,0x364a2436
+    ,0x0b22364f
+    ,0x44094700
+    ,0x2b364e44
+    ,0x0f4a7bb2
+    ,0x46acb445
+    ,0x1349acb4
+    ,0x00074900
+    ,0x25364846
+    ,0x001b2a36
+    ,0x44d0004b
+    ,0x1f47acb4
+    ,0x00034200
+    ,0xb4243647
+    ,0x00174bac
+    ,0x2836424a
+    ,0x4d48acb4
+    ,0x29364346
+    ,0xb4263640
+    ,0xacb445ac
+    ,0x27364142
+    ,0x001f4447
+    ,0x22364647
+    ,0x0f25363f
+    ,0x000f4954
+    ,0x0f44d201
+    ,0x36444b00
+    ,0x4aacb42a
+    ,0x802b3645
+    ,0x46d8f026
+    ,0x1f49cc28
+    ,0x44074500
+    ,0x47d0e842
+    ,0x36382436
+    ,0x427be227
+    ,0x3a45e4fc
+    ,0x36372936
+    ,0x3c44000b
+    ,0x36392b36
+    ,0x289dfc28
+    ,0x3e4bf8a6
+    ,0x49001f45
+    ,0xfc253636
+    ,0x363d2abd
+    ,0x47440722
+    ,0xd8f02436
+    ,0x47ce2b44
+    ,0x3b42001f
+    ,0x540f2a36
+    ,0x07267dfc
+    ,0xb8d04a44
+    ,0x4b001f42
+    ,0x3527362f
+    ,0x289dfc26
+    ,0x3125362d
+    ,0xf8962936
+    ,0x45cc3849
+    ,0x36334200
+    ,0x4b98b02b
+    ,0xf2223634
+    ,0x362e4a7b
     ,0xfc283630
-    ,0x363b267d
-    ,0x2abdfc2a
-    ,0xd0289dfc
-    ,0x4b001f48
-    ,0x2d420003
-    ,0xcc382536
-    ,0x22363445
-    ,0x362e245d
-    ,0x4a440726
-    ,0x0f47000b
+    ,0x001f245d
+    ,0x47000b46
+    ,0x032a3632
+    ,0x46a8d047
+    ,0x0f24362c
     ,0x001f4900
-    ,0xf049c8f0
-    ,0x7bf247c8
-    ,0x24362c4a
-    ,0xfc46001f
-    ,0x2b363345
-    ,0x9222362b
-    ,0x98b042f4
-    ,0x48d4fc4b
-    ,0x36324445
-    ,0x2736262a
-    ,0x27293628
-    ,0x001f2836
-    ,0x1f47001f
-    ,0xa4004a00
+    ,0x45001f48
+    ,0x2dfc4ad0
+    ,0x22362b2b
+    ,0x1f42f492
+    ,0xc8f04a00
+    ,0xf048d4fc
+    ,0x450049c8
     ,0x26362544
-    ,0x0046a8d0
-    ,0x48d0e049
-    ,0xb0253624
-    ,0x00054588
-    ,0x49000f48
-    ,0x2dfc4600
-    ,0x2436232b
-    ,0xc04ad0f8
-    ,0xd6b647b0
-    ,0x2a2a3629
-    ,0x44072b36
-    ,0x4690a044
-    ,0x1f424407
-    ,0x48440747
+    ,0xf8273626
+    ,0x44a40046
+    ,0x27293628
+    ,0x36242836
+    ,0x4588b025
+    ,0x000f4b54
+    ,0x2b362a4a
+    ,0x1f2a3629
+    ,0x001f4700
+    ,0x2349000f
+    ,0x90a02436
+    ,0x47b0c046
+    ,0x8f424407
+    ,0x26361c27
+    ,0xb6444407
+    ,0xd0e049d6
+    ,0x48000548
+    ,0x36202b36
+    ,0x4ab6002a
+    ,0x104ba901
+    ,0x361d427b
+    ,0x448e2b29
+    ,0x000fb825
+    ,0x47000146
+    ,0x21223622
+    ,0x361a2536
+    ,0x48440724
     ,0x1e4946ca
     ,0x361f2836
-    ,0x27361d29
-    ,0x361c427b
-    ,0x448e2b26
-    ,0x0f4b548f
-    ,0x00014a00
-    ,0x4ba9014a
-    ,0x2524361a
-    ,0x46000fb8
-    ,0x10223622
-    ,0x36162836
-    ,0x49b20129
-    ,0x8e48b102
-    ,0xb60047b0
-    ,0x1f25361b
-    ,0x36214400
-    ,0x2a36202b
-    ,0x15273614
-    ,0x4488a024
-    ,0x0742540f
-    ,0x36134500
-    ,0x46b89026
-    ,0x36182536
+    ,0x13450007
+    ,0x36142636
+    ,0x47b08e27
+    ,0x1b46b890
     ,0x2badda2b
-    ,0x1845a8c0
-    ,0x3611428c
-    ,0x002a3617
-    ,0x000f4ab4
+    ,0x0249b201
+    ,0x540f48b1
+    ,0x44001f42
+    ,0x8c184488
     ,0x4a440742
-    ,0x12223619
+    ,0x16283615
+    ,0x36182936
+    ,0x194ab400
+    ,0x36112236
+    ,0x25361224
+    ,0xa045a8c0
+    ,0x0c0200d0
+    ,0xb0223610
+    ,0x000f4298
+    ,0x2a361742
+    ,0x42888844
+    ,0x00428888
     ,0xc1304400
-    ,0x00d00f00
-    ,0x36100c02
-    ,0x4298b022
+    ,0x0f000000
+    ,0x00000000
+    ,0x00000000
     ,0x9230d00f
     ,0x07809340
-    ,0x42888844
-    ,0x00428888
     ,0x00004821
     ,0x4afff848
     ,0x9f490003
@@ -1096,50 +1192,166 @@ const GT_U32 prvCpssDxChPpaFwImemAc5pDefault[PRV_CPSS_DXCH_PPA_FW_IMAGE_SIZE_AC5
     ,0x00000000
     ,0xd00f0000
     ,0x810a6000
-    ,0x02c25369
-    ,0xc040d340
+    ,0x53692421
+    ,0xc03002c2
     ,0x22008228
     ,0x42000042
-    ,0x66152466
-    ,0x46120024
-    ,0x00460000
-    ,0x242f4500
-    ,0x24661824
-    ,0x00246619
-    ,0x37fa4521
-    ,0x16b13369
-    ,0x00073302
-    ,0x00104700
-    ,0x1a835f47
-    ,0x66172466
+    ,0x23761823
+    ,0x0f237619
+    ,0x1200257d
+    ,0x47000047
+    ,0x00064402
+    ,0x00104600
+    ,0x1a845f46
+    ,0x76172376
     ,0x02002882
-    ,0x2486800c
+    ,0x2386800c
     ,0x00483e00
-    ,0x935f4800
-    ,0x1053fc1c
-    ,0x211cf090
+    ,0x945f4800
+    ,0x00000000
+    ,0x00000000
     ,0xd00f0000
     ,0x810a8000
-    ,0x53fe2053
-    ,0xe653fdf5
-    ,0xfdd753fd
-    ,0x53fdaf53
-    ,0xfec553ff
-    ,0x53fe9553
-    ,0x6753fe72
-    ,0xfe5053fe
-    ,0x5d53ff74
-    ,0xff5653ff
-    ,0x53ff3a53
-    ,0x0453ff23
-    ,0x53ffb853
-    ,0x9e53ffad
-    ,0xff8b53ff
-    ,0x53ff7f53
+    ,0x00441200
+    ,0x00004bfe
+    ,0x4400004b
+    ,0xc062c050
+    ,0x4d0c0808
+    ,0x17873c22
+    ,0x4d0f2830
+    ,0x294d1023
+    ,0x2b82862b
+    ,0x8811ab88
+    ,0x077a0a0a
+    ,0x42070740
+    ,0x26822b82
+    ,0x2b82882b
+    ,0x872b2681
+    ,0x26802b82
+    ,0x9b982b82
+    ,0x972b8281
+    ,0x2b82809b
+    ,0x892b2683
+    ,0x9b288285
+    ,0x2b82849b
+    ,0x82839b9a
+    ,0x829b992b
+    ,0x22228326
+    ,0x19080849
+    ,0xa0040808
+    ,0x0faa1100
+    ,0x7d122546
+    ,0x0e771127
+    ,0x1c02024b
+    ,0x461b2646
+    ,0x25462225
+    ,0x9e267620
+    ,0x25461f98
+    ,0x1d25461e
+    ,0x46272546
+    ,0x25462625
+    ,0x24254625
+    ,0x46232546
+    ,0x2b4b3e00
+    ,0x00002546
+    ,0x25462a4b
+    ,0x28254629
+    ,0x2d60000a
+    ,0x462c2546
+    ,0x29343b25
+    ,0xcc2cc392
+    ,0xb6800c02
+    ,0x25462f25
+    ,0x3b25462e
+    ,0xc3a62a34
+    ,0x00000000
+    ,0x0f000000
+    ,0x0ab000d0
+    ,0x002bb281
+    ,0x00441200
+    ,0x00004bfe
+    ,0x4400004b
+    ,0xc062c050
+    ,0x4d0c0808
+    ,0x17873c22
+    ,0x4d0f2830
+    ,0x294d1023
+    ,0x2b828b2b
+    ,0x8811ab88
+    ,0x077a0a0a
+    ,0x42070740
+    ,0x26822b82
+    ,0x2b828d2b
+    ,0x8c2b2681
+    ,0x26802b82
+    ,0x9b962b82
+    ,0x952b8281
+    ,0x2b82809b
+    ,0x8e2b2683
+    ,0x992b8285
+    ,0x2b82849b
+    ,0x82839b98
+    ,0x829b972b
+    ,0x2b82889b
+    ,0x82879b9c
+    ,0x869b9b2b
+    ,0x9b9a2b82
+    ,0x00a00408
+    ,0x8a0faa11
+    ,0x9b9e2882
+    ,0x9d2b8289
+    ,0x024b2546
+    ,0x25464202
+    ,0x49222283
+    ,0x08190808
+    ,0x12254633
+    ,0x7711277d
+    ,0x2646320e
+    ,0x30254631
+    ,0x25463825
+    ,0x11267636
+    ,0x46352896
+    ,0x25463425
+    ,0x463d4b00
+    ,0x25463c25
+    ,0x3a25463b
+    ,0x46392546
+    ,0x463e2546
+    ,0x29343b25
+    ,0xcc2cc39a
+    ,0x004b3e00
+    ,0x25464125
+    ,0x3b254640
+    ,0xc3ae2a34
+    ,0x3f60000a
+    ,0x0f000000
+    ,0x0ab000d0
+    ,0x002bb281
+    ,0xb6800c02
+    ,0xfd6553fd
+    ,0x53fd3d53
+    ,0x1053fb4a
+    ,0x211cf090
+    ,0xf553fe00
+    ,0xfdde53fd
+    ,0x53fdae53
+    ,0x7453fd83
+    ,0x53fec853
+    ,0x9253feb1
+    ,0xfe5353fe
+    ,0x53fe2353
+    ,0xff1953ff
+    ,0x53ff0d53
+    ,0xeb53ff02
+    ,0xfee453fe
+    ,0x4153ff78
+    ,0xff6653fb
+    ,0x53ff4653
+    ,0x2c53ff3b
     ,0x03b13082
-    ,0x1c10d00f
-    ,0x13801021
-    ,0xffd853fc
+    ,0xd00f0000
+    ,0x10211c10
+    ,0x53ffaf80
     ,0x01000300
     ,0xc72f211d
     ,0xb1318316
@@ -1149,31 +1361,31 @@ const GT_U32 prvCpssDxChPpaFwImemAc5pDefault[PRV_CPSS_DXCH_PPA_FW_IMAGE_SIZE_AC5
 /* Table to hold thread PC address. Each entry represents different thread. */
 const GT_U32 phaFwThreadsPcAddressAc5pDefault[PRV_CPSS_DXCH_PHA_MAX_THREADS_CNS] = {
      0x400160                                            /* 0 THR0_DoNothing */
-    ,0x4007b0                                            /* 1 THR1_SRv6_End_Node */
-    ,0x400850                                            /* 2 THR2_SRv6_Source_Node_1_segment */
-    ,0x400890                                            /* 3 THR3_SRv6_Source_Node_First_Pass_2_3_segments */
-    ,0x4008d0                                            /* 4 THR4_SRv6_Source_Node_Second_Pass_3_segments */
-    ,0x400980                                            /* 5 THR5_SRv6_Source_Node_Second_Pass_2_segments */
+    ,0x400930                                            /* 1 THR1_SRv6_End_Node */
+    ,0x4009d0                                            /* 2 THR2_SRv6_Source_Node_1_segment */
+    ,0x400a10                                            /* 3 THR3_SRv6_Source_Node_First_Pass_2_3_segments */
+    ,0x400a50                                            /* 4 THR4_SRv6_Source_Node_Second_Pass_3_segments */
+    ,0x400b00                                            /* 5 THR5_SRv6_Source_Node_Second_Pass_2_segments */
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 6 */
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 7 */
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 8 */
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 9 */
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 10 */
-    ,0x400a40                                            /* 11 THR11_VXLAN_GPB_SourceGroupPolicyID */
-    ,0x400aa0                                            /* 12 THR12_MPLS_SR_NO_EL */
-    ,0x400ad0                                            /* 13 THR13_MPLS_SR_ONE_EL */
-    ,0x400b60                                            /* 14 THR14_MPLS_SR_TWO_EL */
-    ,0x400c20                                            /* 15 THR15_MPLS_SR_THREE_EL */
-    ,0x400d20                                            /* 16 THR16_SGT_NetAddMSB */
-    ,0x400da0                                            /* 17 THR17_SGT_NetFix */
-    ,0x400e00                                            /* 18 THR18_SGT_NetRemove */
-    ,0x400e70                                            /* 19 THR19_SGT_eDSAFix */
-    ,0x400e90                                            /* 20 THR20_SGT_eDSARemove */
-    ,0x400ef0                                            /* 21 THR21_SGT_GBPFixIPv4 */
-    ,0x400f20                                            /* 22 THR22_SGT_GBPFixIPv6 */
-    ,0x400f50                                            /* 23 THR23_SGT_GBPRemoveIPv4 */
-    ,0x400fa0                                            /* 24 THR24_SGT_GBPRemoveIPv6 */
-    ,0x400fe0                                            /* 25 THR25_PTP_Phy_1_Step */
+    ,0x400bc0                                            /* 11 THR11_VXLAN_GPB_SourceGroupPolicyID */
+    ,0x400c20                                            /* 12 THR12_MPLS_SR_NO_EL */
+    ,0x400c50                                            /* 13 THR13_MPLS_SR_ONE_EL */
+    ,0x400ce0                                            /* 14 THR14_MPLS_SR_TWO_EL */
+    ,0x400da0                                            /* 15 THR15_MPLS_SR_THREE_EL */
+    ,0x400ea0                                            /* 16 THR16_SGT_NetAddMSB */
+    ,0x400f20                                            /* 17 THR17_SGT_NetFix */
+    ,0x400f80                                            /* 18 THR18_SGT_NetRemove */
+    ,0x400ff0                                            /* 19 THR19_SGT_eDSAFix */
+    ,0x401010                                            /* 20 THR20_SGT_eDSARemove */
+    ,0x401070                                            /* 21 THR21_SGT_GBPFixIPv4 */
+    ,0x4010a0                                            /* 22 THR22_SGT_GBPFixIPv6 */
+    ,0x4010d0                                            /* 23 THR23_SGT_GBPRemoveIPv4 */
+    ,0x401120                                            /* 24 THR24_SGT_GBPRemoveIPv6 */
+    ,0x401160                                            /* 25 THR25_PTP_Phy_1_Step */
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 26 */
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 27 */
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 28 */
@@ -1201,19 +1413,19 @@ const GT_U32 phaFwThreadsPcAddressAc5pDefault[PRV_CPSS_DXCH_PHA_MAX_THREADS_CNS]
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 50 */
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 51 */
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 52 */
-    ,0x401010                                            /* 53 THR53_SRV6_End_Node_GSID_COC32 */
+    ,0x401190                                            /* 53 THR53_SRV6_End_Node_GSID_COC32 */
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 54 */
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 55 */
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 56 */
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 57 */
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 58 */
-    ,0x401090                                            /* 59 THR59_SLS_Test */
+    ,0x401210                                            /* 59 THR59_SLS_Test */
     ,0x400180                                            /* 60 THR60_DropAllTraffic */
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 61 */
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 62 */
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 63 */
-    ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 64 */
-    ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 65 */
+    ,0x401260                                            /* 64 THR64_Erspan_TypeII_SameDevMirroring_Ipv4 */
+    ,0x401340                                            /* 65 THR65_Erspan_TypeII_SameDevMirroring_Ipv6 */
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 66 */
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 67 */
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 68 */
@@ -1450,46 +1662,46 @@ const GT_U32 phaFwAccelCmdsAc5pDefault[FW_ACCEL_CMDS_MAX_NUM_CNS] = {
    ,0x080100a8 /* CSUM_LOAD_NEW_THR59_SLS_Test_LEN2_FROM_PKT_IPv4_Header__version_PLUS8, offset = 0x0220 */
    ,0x080700ac /* CSUM_LOAD_NEW_THR59_SLS_Test_LEN8_FROM_PKT_IPv4_Header__version_PLUS12, offset = 0x0224 */
    ,0xc00faa00 /* CSUM_STORE_IP_THR59_SLS_Test_TO_PKT_IPv4_Header__header_checksum, offset = 0x0228 */
-   ,0x00000000 /* offset = 0x022c */
-   ,0x00000000 /* offset = 0x0230 */
-   ,0x00000000 /* offset = 0x0234 */
-   ,0x00000000 /* offset = 0x0238 */
-   ,0x00000000 /* offset = 0x023c */
-   ,0x00000000 /* offset = 0x0240 */
-   ,0x00000000 /* offset = 0x0244 */
-   ,0x00000000 /* offset = 0x0248 */
-   ,0x00000000 /* offset = 0x024c */
-   ,0x00000000 /* offset = 0x0250 */
-   ,0x00000000 /* offset = 0x0254 */
-   ,0x00000000 /* offset = 0x0258 */
-   ,0x00000000 /* offset = 0x025c */
-   ,0x00000000 /* offset = 0x0260 */
-   ,0x00000000 /* offset = 0x0264 */
-   ,0x00000000 /* offset = 0x0268 */
-   ,0x00000000 /* offset = 0x026c */
-   ,0x00000000 /* offset = 0x0270 */
-   ,0x00000000 /* offset = 0x0274 */
-   ,0x00000000 /* offset = 0x0278 */
-   ,0x00000000 /* offset = 0x027c */
-   ,0x00000000 /* offset = 0x0280 */
-   ,0x00000000 /* offset = 0x0284 */
-   ,0x00000000 /* offset = 0x0288 */
-   ,0x00000000 /* offset = 0x028c */
-   ,0x00000000 /* offset = 0x0290 */
-   ,0x00000000 /* offset = 0x0294 */
-   ,0x00000000 /* offset = 0x0298 */
-   ,0x00000000 /* offset = 0x029c */
-   ,0x00000000 /* offset = 0x02a0 */
-   ,0x00000000 /* offset = 0x02a4 */
-   ,0x00000000 /* offset = 0x02a8 */
-   ,0x00000000 /* offset = 0x02ac */
-   ,0x00000000 /* offset = 0x02b0 */
-   ,0x00000000 /* offset = 0x02b4 */
-   ,0x00000000 /* offset = 0x02b8 */
-   ,0x00000000 /* offset = 0x02bc */
-   ,0x00000000 /* offset = 0x02c0 */
-   ,0x00000000 /* offset = 0x02c4 */
-   ,0x00000000 /* offset = 0x02c8 */
+   ,0x44079a08 /* COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x08_LEN8_TO_PKT_ethertype_header__ethertype, offset = 0x022c */
+   ,0x4407b010 /* COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x10_LEN8_TO_PKT_GRE_header__C, offset = 0x0230 */
+   ,0x4407b288 /* COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x88_LEN8_TO_PKT_GRE_header__NP, offset = 0x0234 */
+   ,0x4407b3be /* COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0xBE_LEN8_TO_PKT_GRE_header__NP_PLUS8, offset = 0x0238 */
+   ,0x0003b474 /* COPY_BYTES_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__lm_counter_LEN4_TO_PKT_GRE_header__Seq_num, offset = 0x023c */
+   ,0x040fbe12 /* COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_srcTrgPortEntry__targetPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4, offset = 0x0240 */
+   ,0x040fbe10 /* COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_srcTrgPortEntry__srcPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4, offset = 0x0244 */
+   ,0x4403b801 /* COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x1_LEN4_TO_PKT_ERSPAN_type_II_header__Ver, offset = 0x0248 */
+   ,0x0442ba4a /* COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__qos_mapped_up_LEN3_TO_PKT_ERSPAN_type_II_header__COS, offset = 0x024c */
+   ,0x4581ba03 /* COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x3_LEN2_TO_PKT_ERSPAN_type_II_header__En, offset = 0x0250 */
+   ,0x06c0ba40 /* COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__truncated_LEN1_TO_PKT_ERSPAN_type_II_header__T, offset = 0x0254 */
+   ,0x050d9e50 /* COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__egress_byte_count_LEN14_TO_PKT_IPv4_Header__total_length_PLUS2, offset = 0x0258 */
+   ,0x540f9e24 /* ADD_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x24_LEN16_TO_PKT_IPv4_Header__total_length, offset = 0x025c */
+   ,0x0807009c /* CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN8_FROM_PKT_IPv4_Header__version, offset = 0x0260 */
+   ,0x080100a4 /* CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN2_FROM_PKT_IPv4_Header__ttl, offset = 0x0264 */
+   ,0x080700a8 /* CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN8_FROM_PKT_IPv4_Header__sip_high, offset = 0x0268 */
+   ,0xc00fa600 /* CSUM_STORE_IP_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_TO_PKT_IPv4_Header__header_checksum, offset = 0x026c */
+   ,0x000b8e00 /* COPY_BYTES_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_erspan_template__mac_da_47_32_LEN12_TO_PKT_IPv4_Header__version_MINUS14, offset = 0x0270 */
+   ,0x540d5032 /* ADD_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x32_LEN14_TO_DESC_phal2ppa__egress_byte_count, offset = 0x0274 */
+   ,0x000f8a00 /* COPY_BYTES_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_erspan_template__mac_da_47_32_LEN16_TO_PKT_IPv4_Header__version_MINUS18, offset = 0x0278 */
+   ,0x540d5036 /* ADD_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x36_LEN14_TO_DESC_phal2ppa__egress_byte_count, offset = 0x027c */
+   ,0x44079286 /* COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x86_LEN8_TO_PKT_ethertype_header__ethertype, offset = 0x0280 */
+   ,0x440793dd /* COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0xDD_LEN8_TO_PKT_ethertype_header__ethertype_PLUS8, offset = 0x0284 */
+   ,0x4407bc10 /* COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x10_LEN8_TO_PKT_GRE_header__C, offset = 0x0288 */
+   ,0x4407be88 /* COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x88_LEN8_TO_PKT_GRE_header__NP, offset = 0x028c */
+   ,0x4407bfbe /* COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0xBE_LEN8_TO_PKT_GRE_header__NP_PLUS8, offset = 0x0290 */
+   ,0x0003c074 /* COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__lm_counter_LEN4_TO_PKT_GRE_header__Seq_num, offset = 0x0294 */
+   ,0x040fca12 /* COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_srcTrgPortEntry__targetPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4, offset = 0x0298 */
+   ,0x040fca10 /* COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_srcTrgPortEntry__srcPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4, offset = 0x029c */
+   ,0x4403c401 /* COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x1_LEN4_TO_PKT_ERSPAN_type_II_header__Ver, offset = 0x02a0 */
+   ,0x0442c64a /* COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__qos_mapped_up_LEN3_TO_PKT_ERSPAN_type_II_header__COS, offset = 0x02a4 */
+   ,0x4581c603 /* COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x3_LEN2_TO_PKT_ERSPAN_type_II_header__En, offset = 0x02a8 */
+   ,0x06c0c640 /* COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__truncated_LEN1_TO_PKT_ERSPAN_type_II_header__T, offset = 0x02ac */
+   ,0x050d9850 /* COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__egress_byte_count_LEN14_TO_PKT_IPv6_Header__payload_length_PLUS2, offset = 0x02b0 */
+   ,0x540f9810 /* ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x10_LEN16_TO_PKT_IPv6_Header__payload_length, offset = 0x02b4 */
+   ,0x000b8600 /* COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_erspan_template__mac_da_47_32_LEN12_TO_PKT_IPv6_Header__version_MINUS14, offset = 0x02b8 */
+   ,0x540d503a /* ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x3A_LEN14_TO_DESC_phal2ppa__egress_byte_count, offset = 0x02bc */
+   ,0x000f8200 /* COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_erspan_template__mac_da_47_32_LEN16_TO_PKT_IPv6_Header__version_MINUS18, offset = 0x02c0 */
+   ,0x540d503e /* ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x3E_LEN14_TO_DESC_phal2ppa__egress_byte_count, offset = 0x02c4 */
+   ,0x000bccc0 /* SHIFTRIGHT_12_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_LEN12_FROM_PKT_mac_header__mac_da_47_32, offset = 0x02c8 */
    ,0x00000000 /* offset = 0x02cc */
    ,0x00000000 /* offset = 0x02d0 */
    ,0x00000000 /* offset = 0x02d4 */
@@ -1713,4 +1925,4 @@ const GT_U32 phaFwAccelCmdsAc5pDefault[FW_ACCEL_CMDS_MAX_NUM_CNS] = {
    ,0x00000000 /* offset = 0x063c */
 };
 
-#endif  /* __prvCpssDxChPpaFwImageInfo_Ac5pDefault_h */
+#endif	/* __prvCpssDxChPpaFwImageInfo_Ac5pDefault_h */
diff --git a/mainPpDrv/h/cpss/dxCh/dxChxGen/pha/private/prvCpssDxChPpaFwImageInfo_Ac5pImage01.h b/mainPpDrv/h/cpss/dxCh/dxChxGen/pha/private/prvCpssDxChPpaFwImageInfo_Ac5pImage01.h
index 15f84670ab..30ef42dd61 100644
--- a/mainPpDrv/h/cpss/dxCh/dxChxGen/pha/private/prvCpssDxChPpaFwImageInfo_Ac5pImage01.h
+++ b/mainPpDrv/h/cpss/dxCh/dxChxGen/pha/private/prvCpssDxChPpaFwImageInfo_Ac5pImage01.h
@@ -16,9 +16,9 @@
  *
  *   NOTE: this file is generated automatically by fw tool
  *
- *   APPLICABLE DEVICES: Ac5p; Ac5x.
+ *   APPLICABLE DEVICES: Ac5p; Ac5x; Harrier.
  *
- * @version 21_10_00_00
+ * @version 22_02_00_00
  *******************************************************************************
  */
 
@@ -27,12 +27,12 @@
 
 /* PHA fw version information */
 const PRV_CPSS_DXCH_PHA_FW_IMAGE_VERSION_INFO_STC fwImageVersionAc5pImage01 = {
-	 0x21100000 /* | year << 24 | month << 16 | in_month << 8 | debug | */
+	 0x22020000 /* | year << 24 | month << 16 | in_month << 8 | debug | */
 	,0x01000000 /* image_id << 24 */
 	,"Image01"}; /* image_name */
 
 /* The number of words of data in prvCpssDxChPpaFwImemAc5pImage01*/
-#define PRV_CPSS_DXCH_PPA_FW_IMAGE_SIZE_AC5P_IMAGE01 (1620)
+#define PRV_CPSS_DXCH_PPA_FW_IMAGE_SIZE_AC5P_IMAGE01 (1832)
 
 /* The FW code to load into the PHA unit */
 const GT_U32 prvCpssDxChPpaFwImemAc5pImage01[PRV_CPSS_DXCH_PPA_FW_IMAGE_SIZE_AC5P_IMAGE01] = {
@@ -167,15 +167,15 @@ const GT_U32 prvCpssDxChPpaFwImemAc5pImage01[PRV_CPSS_DXCH_PPA_FW_IMAGE_SIZE_AC5
     ,0x211cf090
     ,0x10d00f00
     ,0xc020211c
-    ,0x059e8010
+    ,0x06718010
     ,0x50003cc0
-    ,0x345001e4
+    ,0x34500242
     ,0x90105000
     ,0x1100eb30
     ,0x82104366
     ,0x002bc040
     ,0x43000050
-    ,0x21432110
+    ,0x21432202
     ,0x00038011
     ,0x50000750
     ,0xa3239343
@@ -232,434 +232,530 @@ const GT_U32 prvCpssDxChPpaFwImemAc5pImage01[PRV_CPSS_DXCH_PPA_FW_IMAGE_SIZE_AC5
     ,0x463f8330
     ,0x244dff22
     ,0x0d42cafe
-    ,0x45024b47
-    ,0x4a458044
-    ,0x0b424603
-    ,0xc0304700
-    ,0x7646b171
-    ,0x47804604
-    ,0x48041649
-    ,0x82454707
-    ,0x4460024a
-    ,0x224b4500
-    ,0xbf6f4561
-    ,0x49bf0148
-    ,0x36d62a36
-    ,0x2736d122
-    ,0x0447b400
-    ,0x4801425f
-    ,0xd22936d3
-    ,0x36d82836
-    ,0x2b36d525
-    ,0xd42436d7
-    ,0x45040f4b
-    ,0x0f484682
-    ,0x04074654
-    ,0x2636d049
-    ,0xaa74227d
-    ,0x4a997144
-    ,0x2d4a0467
-    ,0x042f4405
-    ,0x2c49980f
-    ,0x970546a4
-    ,0x45ac7648
-    ,0xf04b9a4c
-    ,0x2b36cc22
-    ,0xc92536cf
-    ,0x36c72836
-    ,0x2936ca26
-    ,0x36c84a00
-    ,0x277de027
-    ,0xce2a36cb
-    ,0x36cd2436
-    ,0xf24200f8
-    ,0x08054b00
-    ,0x4208034b
-    ,0x0144c00f
-    ,0x2436c525
-    ,0x562a36c2
-    ,0xf0004af9
-    ,0x256d2844
-    ,0x2cf24600
-    ,0x27bcf228
-    ,0xc42b36c3
-    ,0x36c62236
-    ,0xc02736bf
-    ,0xeb542836
-    ,0x2936c146
-    ,0x01294df2
-    ,0x2636be25
-    ,0x01484480
-    ,0xc00f4208
-    ,0x4b540f47
-    ,0x36bd4200
-    ,0x48600125
-    ,0x03440821
-    ,0x4dba4608
-    ,0xb62236bb
-    ,0x36ba2736
-    ,0x4ba22c2b
-    ,0xa247dc00
-    ,0x4600e426
-    ,0xb74400aa
-    ,0xbd162836
-    ,0x45080529
-    ,0x4cf84500
-    ,0x2936b82a
-    ,0xbc480507
-    ,0x36b52436
-    ,0x6f227df2
-    ,0x0001484d
-    ,0x2a36b949
-    ,0xde2536b4
-    ,0x2b6cf249
-    ,0xb22836ae
-    ,0x05672236
-    ,0x44000147
-    ,0x04092a5c
-    ,0x48478046
-    ,0xaf2b36b1
-    ,0xd7542936
-    ,0xb32736ad
-    ,0xe5562436
-    ,0x474c6d44
-    ,0xf2420001
-    ,0x2836a526
-    ,0x4d48ef01
-    ,0x36b046ee
-    ,0x42c2c62a
-    ,0x36a94700
-    ,0x2b6dd822
-    ,0x0f256dfc
-    ,0x36ac4a54
-    ,0xa82536ab
-    ,0x6dc02b36
-    ,0x47e47424
-    ,0x03424682
-    ,0x4b000f24
-    ,0x0f29add8
-    ,0x36a74500
-    ,0x4ac4282a
-    ,0x47804447
-    ,0x2236a047
-    ,0xa442cb05
-    ,0x36aa2736
-    ,0xa2460003
-    ,0xd0002536
-    ,0x2936a645
-    ,0x014bb8e0
-    ,0x47db0127
-    ,0x024a001f
-    ,0x369f44cf
-    ,0x49540f2b
-    ,0x468249bc
-    ,0x2436a14b
-    ,0xc0227dec
-    ,0x369b4a98
-    ,0x05289dea
-    ,0x369d4bc3
-    ,0x2636a329
-    ,0x1c46e054
-    ,0x4207904a
-    ,0x972a369e
-    ,0x00032236
-    ,0x256dec44
-    ,0x36964705
-    ,0x28369c2b
-    ,0x0c253699
-    ,0x001b44c8
-    ,0x03460003
-    ,0x06e94946
-    ,0x475f0248
-    ,0xd04b5c0f
-    ,0x22368e2a
-    ,0xc0420374
-    ,0x36984aa4
-    ,0x4506a024
-    ,0x5f03484e
-    ,0x46d07449
-    ,0x5045035f
-    ,0x36954407
-    ,0x03283693
-    ,0x368d4700
-    ,0x4bd0042b
-    ,0x02273692
-    ,0x2abdd822
-    ,0x90440360
-    ,0x369a2536
-    ,0x29369426
-    ,0x001f4800
-    ,0x4606e649
-    ,0x8f450403
-    ,0xbdec2436
-    ,0xc0460261
-    ,0xe4e049c4
-    ,0x27368948
-    ,0x0747e4e0
-    ,0x4204034a
-    ,0x852a368c
-    ,0x44002236
-    ,0x45d65444
-    ,0x368b2836
-    ,0x26369129
-    ,0x01253687
-    ,0x082144d4
-    ,0x0146064b
-    ,0xae004908
-    ,0x485c0f4b
-    ,0x8a4bc00f
-    ,0x22367c2a
-    ,0xae42c254
-    ,0x36864a00
-    ,0x45000f24
-    ,0x00a627ac
-    ,0x46d65549
-    ,0x4b45c4c0
-    ,0x36834406
-    ,0x00273680
-    ,0x36814b44
-    ,0x48a60428
-    ,0xf82b3684
-    ,0x24367d45
-    ,0x7e44c255
-    ,0x36882536
-    ,0x29368226
-    ,0xc0012b36
-    ,0x272dfc4b
-    ,0x13292d10
-    ,0x46804600
-    ,0xfc46c4c0
-    ,0x3679284d
-    ,0x2a4d1029
-    ,0x7b273677
-    ,0x28367849
-    ,0x1f26367f
-    ,0x36754200
-    ,0x45b80025
-    ,0x440747c8
-    ,0x4a000b44
-    ,0x7a470005
-    ,0x00032a36
-    ,0xa0223673
-    ,0xbdfc42a4
-    ,0x48440726
-    ,0x0049c400
-    ,0x252df827
-    ,0x04293670
-    ,0x000b487b
-    ,0x2636764b
-    ,0x36744700
-    ,0x2a367124
-    ,0xfc4aa4a0
-    ,0x366e447b
-    ,0xc02b3672
-    ,0x366f4bc4
-    ,0x49001328
-    ,0x0b25366c
-    ,0x42001f47
-    ,0xf8450003
-    ,0x9ca426bd
-    ,0x48000f49
-    ,0x366d2936
-    ,0x459ca426
-    ,0x65429ca4
-    ,0x9ca42736
-    ,0x6649000f
-    ,0x00172836
-    ,0x489ca44a
-    ,0x6724adf8
-    ,0x4b001b47
-    ,0x6b22366a
-    ,0x36632436
-    ,0x46000725
-    ,0x001f4500
-    ,0x42001b44
-    ,0xac4b9ca4
-    ,0x000747a4
-    ,0xa42a3668
-    ,0x000b4a9c
-    ,0x49a4ac48
-    ,0x03469ca4
-    ,0x44a4ac42
-    ,0x6445d0cc
-    ,0x365e2636
-    ,0x48a4ac29
-    ,0x00032236
-    ,0x4b001747
-    ,0x6927365c
-    ,0xa4ac2b36
-    ,0x0328365d
-    ,0x00034900
-    ,0x25365a46
-    ,0x61243662
-    ,0x46a4ac45
-    ,0xac49bcb8
-    ,0x00034aa4
-    ,0x4a001348
-    ,0xa4ac2b36
-    ,0x47b4b04b
-    ,0x03420003
-    ,0x00034400
-    ,0xa826365b
-    ,0xccc845ac
-    ,0x42c8c444
-    ,0x60273653
-    ,0x28365449
-    ,0xb44a0003
-    ,0x365f48b8
-    ,0x2936552a
-    ,0x36584704
-    ,0x24365922
-    ,0x0c253651
-    ,0x4407266d
-    ,0x03440003
-    ,0xd15a4200
-    ,0x4bc4c047
-    ,0x4b4b0003
-    ,0x4ac0bc2a
-    ,0x30484400
-    ,0x3652497b
-    ,0x45450926
-    ,0xd10744a8
-    ,0x46478045
-    ,0x0129364c
-    ,0x365648d0
-    ,0x0b4b0003
-    ,0x36574700
-    ,0x27364a2b
-    ,0xa442a4a0
-    ,0x49001328
-    ,0x4846d200
-    ,0x36502536
-    ,0x22364f24
-    ,0xacb42636
-    ,0x4a7bb249
-    ,0x0748000f
-    ,0x364b4a1c
-    ,0x9c47acb4
-    ,0x001f4ba0
-    ,0x44440942
-    ,0x49450003
-    ,0x45acb446
-    ,0xb444d000
-    ,0x364e42ac
-    ,0x2736412b
-    ,0x36424a00
-    ,0x48acb428
-    ,0x432a364d
-    ,0x00072936
-    ,0x47223646
-    ,0x363f2436
-    ,0x46acb425
-    ,0x1749540f
-    ,0x42440744
-    ,0xe84bacb4
-    ,0x001f47d0
-    ,0x4b001b47
-    ,0xacb42a36
-    ,0x49cc284a
-    ,0x1f263640
-    ,0x47804500
-    ,0x01427be2
-    ,0xe4fc44d2
-    ,0x46000f45
-    ,0x4429363a
-    ,0x4744074b
-    ,0xfc283639
-    ,0x3638289d
-    ,0x2b364527
-    ,0xd8f02636
-    ,0x25363646
-    ,0x3d24363e
-    ,0x000f2236
-    ,0x1f4bf8a6
+    ,0x45804347
+    ,0x47052d42
+    ,0x0b4b4780
+    ,0xc0804a00
+    ,0x76449971
+    ,0x040f49ac
+    ,0x44046749
+    ,0x8245042f
+    ,0x4bbf014a
+    ,0x0147aa74
+    ,0x45004248
+    ,0x459a4c43
+    ,0x86fe2386
+    ,0x2786fa22
+    ,0xfc2b86fd
+    ,0xb4002a86
+    ,0xf02686f9
+    ,0x86fb26ad
+    ,0x2486f729
+    ,0xff2586f8
+    ,0x42468247
+    ,0x0b430407
+    ,0x540f4500
+    ,0x49540d44
+    ,0x86004498
+    ,0x43980f45
+    ,0x00429705
+    ,0x000f4782
+    ,0xf42486ee
+    ,0x86f22b86
+    ,0x49503e29
+    ,0x102bade0
+    ,0x2786f126
+    ,0xf62286f5
+    ,0x000b2386
+    ,0x2586ef4a
+    ,0x050d4acc
+    ,0x4206c043
+    ,0xf047040f
+    ,0x9cfc2686
+    ,0x0344bfbe
+    ,0x45814bc6
+    ,0x4444074b
+    ,0xc0450003
+    ,0x42c64047
+    ,0x50494403
+    ,0x86f34398
+    ,0x45c0742a
+    ,0x86ed4a04
+    ,0x49c40123
+    ,0xe82286ec
+    ,0xca102786
+    ,0x2686e74b
+    ,0x86ebb276
+    ,0x2486e52b
+    ,0x422586e6
+    ,0x44072986
+    ,0x4ac64a43
+    ,0x0f45000b
+    ,0x440744c0
+    ,0x882a86ea
+    ,0xbc1043be
+    ,0x49540d42
+    ,0xe9424407
+    ,0x2b86e224
+    ,0x004b93dd
+    ,0x8e0044a6
+    ,0x47000f45
+    ,0x86e42286
+    ,0x4a440723
+    ,0xdd478a00
+    ,0x86dc2586
+    ,0x074a9286
+    ,0x08014308
+    ,0x2986e042
+    ,0xe3495036
+    ,0x44b80145
+    ,0x42444403
+    ,0x9cfc4504
+    ,0x2786df26
+    ,0x00a84200
+    ,0x2a86e143
+    ,0xde4706c0
+    ,0xba4a2686
+    ,0x0f47ba40
+    ,0x050d4a54
+    ,0x2386db49
+    ,0xa42286da
+    ,0x45047644
+    ,0xd42486d3
+    ,0x45812586
+    ,0x2b3cf446
+    ,0x9e24499e
+    ,0x2786d64a
+    ,0x032b86d9
+    ,0x047646ba
+    ,0x074b0003
+    ,0x86d84744
+    ,0x2986d72a
+    ,0x5043040f
+    ,0x2486ca46
+    ,0x482586cb
+    ,0xed7145fb
+    ,0x2686d544
+    ,0x440743be
+    ,0x4a440749
+    ,0x7447b010
+    ,0x44074bb4
+    ,0xcd2b86d0
+    ,0xb3be2786
+    ,0x49b2884a
+    ,0x102386d2
+    ,0xc00f4700
+    ,0x2686cc4b
+    ,0x322286d1
+    ,0x469a08b2
+    ,0x054a0803
+    ,0x540f4908
+    ,0x2986ce43
+    ,0x012a86cf
+    ,0x2786c44a
+    ,0xc726bdf2
+    ,0xf0002b86
+    ,0x47f9564b
+    ,0x86c52a86
+    ,0x2386c929
+    ,0xf243a42c
+    ,0x00f84900
+    ,0xf225acf2
+    ,0x86c3249c
+    ,0x223d2826
+    ,0xc6470801
+    ,0x2286c847
+    ,0x0f4b0476
+    ,0x86c14654
+    ,0x2586c224
+    ,0x08214bd9
+    ,0x42047649
+    ,0xbb4ac00f
+    ,0x00a22786
+    ,0x1643eb54
+    ,0x86ba246d
+    ,0x46a22c26
+    ,0x71430001
+    ,0x2a86bd22
+    ,0x484aaa00
+    ,0x00aa42e7
+    ,0x2b86be49
+    ,0xad242486
+    ,0x2386c027
+    ,0xbc4b0803
+    ,0x86bf2986
+    ,0xb2434480
+    ,0x00012786
+    ,0x2586b944
+    ,0xb8259cf8
+    ,0x47000122
+    ,0x01436001
+    ,0x86b54900
+    ,0x4b00e42b
+    ,0x86b14a08
+    ,0x2486af26
+    ,0xf244d754
+    ,0xad3226bc
+    ,0x562986b3
+    ,0x86b649e5
+    ,0x2386b722
+    ,0x0547c2c6
+    ,0x4a00de2a
+    ,0x072786a9
+    ,0x05674305
+    ,0x4b040942
+    ,0x4c6d4bee
+    ,0x25acf242
+    ,0x82434d6f
+    ,0x86b44746
+    ,0xd82586b0
+    ,0xbdc026bd
+    ,0x2286ad29
+    ,0x4d2b86ac
+    ,0x45540f26
+    ,0xa0434780
+    ,0xcb052786
+    ,0x2386ae47
+    ,0xe4744947
+    ,0x2abdfc42
+    ,0xaa420003
+    ,0x86a82986
+    ,0xa52586a7
+    ,0xef012386
+    ,0x45c42843
+    ,0x0146000f
+    ,0x2a86ab42
+    ,0x022286a4
+    ,0x5dd849cf
+    ,0x46b8e024
+    ,0x86a62686
+    ,0x2986a124
+    ,0x034a000f
+    ,0x47804b00
+    ,0x1f4ad000
+    ,0x00034500
+    ,0x267df849
+    ,0x9f44540f
+    ,0x2a86a245
+    ,0x9b2b86a3
+    ,0xdb012286
+    ,0x4be05442
+    ,0x869d465c
+    ,0x44bc1c24
+    ,0x0c268696
+    ,0x98c049c8
+    ,0x034b0003
+    ,0x869e4a00
+    ,0x272dec25
+    ,0x0f298698
+    ,0x45001b42
+    ,0x744acc54
+    ,0x869c4bd0
+    ,0x234dea23
+    ,0x868d4707
+    ,0x46d00426
+    ,0x50278697
+    ,0x05d04907
+    ,0x992b869a
+    ,0xa4c02a86
+    ,0x425f0245
+    ,0x90490360
+    ,0x4b06e64a
+    ,0x02445f03
+    ,0x06e9434e
+    ,0x44460343
+    ,0x03744944
+    ,0x29868f47
+    ,0x95228692
+    ,0x06a02586
+    ,0x5f4b0261
+    ,0x6dd84a03
+    ,0x42000325
+    ,0x0027868e
+    ,0x2b86912a
+    ,0x1f430007
+    ,0x86934400
+    ,0x24869423
+    ,0xd4012986
+    ,0x276dec49
+    ,0x8c42e4e0
+    ,0x86902586
+    ,0x034b064b
+    ,0x08214a04
+    ,0x22868945
+    ,0x86278685
+    ,0x24868b23
+    ,0x0f46ae00
+    ,0xc4c046c0
+    ,0x43e4e044
+    ,0x86832a86
+    ,0x4500ae25
+    ,0x554ad654
+    ,0x868a4bd6
+    ,0x84225cf8
+    ,0x08012686
+    ,0x435c0f44
+    ,0x872b8688
+    ,0x22868046
+    ,0x7d27867c
+    ,0xbdec2986
+    ,0x27adec29
+    ,0x86812486
+    ,0x4b001323
+    ,0xa643a604
+    ,0x44004400
+    ,0x104ac4c0
+    ,0x867b259d
+    ,0x46c00126
+    ,0x824a000f
+    ,0x2b867f23
+    ,0xfc4bc4c0
+    ,0x7dfc239d
+    ,0x247d1022
+    ,0x867a4700
+    ,0x2a867e25
+    ,0x77248679
+    ,0x86782286
+    ,0x03420005
+    ,0x46804400
+    ,0x4944074a
+    ,0x1f45000b
+    ,0x437b0442
+    ,0x7646000b
+    ,0x6dfc2b86
+    ,0x4344072b
+    ,0xa4a047a4
+    ,0x497bfc45
+    ,0x004ab800
+    ,0xc80044c4
+    ,0x75248670
+    ,0x86742a86
+    ,0x25867129
+    ,0xa0278673
+    ,0x43000f2b
+    ,0xc0268672
+    ,0x866f46c4
+    ,0x22866e23
+    ,0x7df8429c
+    ,0x449ca42a
+    ,0x0b440013
+    ,0x6df84200
+    ,0x17238666
+    ,0x9ca44500
+    ,0x295df843
+    ,0xa42b866d
+    ,0x2a866c24
+    ,0x6547001f
+    ,0x866b2286
+    ,0x4b000729
+    ,0x0003479c
+    ,0x469ca44a
+    ,0x1b44000f
+    ,0x86674600
+    ,0x0b459ca4
+    ,0x9ca44300
+    ,0x49001f4b
+    ,0xa4420007
+    ,0x42a4ac27
+    ,0x6449a4ac
+    ,0xa4ac2b86
+    ,0x25866843
+    ,0x00172486
+    ,0x44a4ac46
+    ,0xa4268669
+    ,0x866a4a9c
+    ,0x624b0003
+    ,0x865c2986
+    ,0x47001b22
+    ,0x5e2a8663
+    ,0x4ba4ac49
+    ,0x0345a4ac
+    ,0x00134300
+    ,0x23865d45
+    ,0x000346a4
+    ,0x4a000344
+    ,0x0347a4ac
+    ,0x00034200
+    ,0x6142b4b0
+    ,0xd0cc2786
+    ,0x44bcb84a
+    ,0xac268660
+    ,0x45000323
+    ,0x5f43b8b4
+    ,0x865b2586
+    ,0x49ccc82b
+    ,0x00032a86
+    ,0x22865347
+    ,0x0c298659
+    ,0x86542bbd
+    ,0xc04a0003
+    ,0x440746c4
+    ,0x46000344
+    ,0x5a248655
+    ,0x43440045
+    ,0x032b8652
+    ,0x044b4900
+    ,0x47c8c442
+    ,0xa8a442d1
+    ,0x4b478049
+    ,0x5643d001
+    ,0xc0bc2586
+    ,0x30460003
+    ,0x8657447b
+    ,0x4aaca826
+    ,0x5a278658
+    ,0x2986504b
+    ,0x0322864a
+    ,0x86514700
+    ,0x24864c2a
+    ,0x7bb22b86
+    ,0x43000f45
+    ,0x4b451c07
+    ,0xd2002386
+    ,0x09440013
+    ,0xa4a04a45
+    ,0x42000b47
+    ,0x49494409
+    ,0x27864f42
+    ,0xb44ad107
+    ,0x864e44ac
+    ,0x46a09c26
+    ,0xacb42386
+    ,0x25864d43
+    ,0x004b0007
+    ,0xacb449d0
+    ,0x4147001f
+    ,0x86472286
+    ,0x4bacb429
+    ,0x42450017
+    ,0x46acb44a
+    ,0x1b44540f
+    ,0x86434600
+    ,0x2a864824
+    ,0x864045ac
+    ,0x4947802b
+    ,0xb442001f
+    ,0x000347ac
+    ,0xe8278646
+    ,0xd20142d0
+    ,0x4b000f49
+    ,0xb4258644
+    ,0x46000f2a
+    ,0x2824863a
+    ,0x864544cc
+    ,0x4aacb426
+    ,0xd8f0234d
+    ,0x29863e4b
+    ,0x07228638
+    ,0x863f4744
+    ,0x07477be2
+    ,0x000b4244
+    ,0x2b863749
+    ,0xfc238639
+    ,0x4ae4fc27
+    ,0x3c44001f
+    ,0xf8a62686
+    ,0x4a001f46
+    ,0x86352286
+    ,0x49d8f029
+    ,0xfc42ce2b
+    ,0x863d256d
+    ,0x3644f896
+    ,0x001f2a86
+    ,0x25863b47
+    ,0x2f2b2dfc
+    ,0x45440723
+    ,0x0f47b8d0
+    ,0x001f4a54
+    ,0x24863146
+    ,0x8630457b
+    ,0x4b001f23
+    ,0x2e42000b
+    ,0x4dfc2b86
+    ,0x332a862d
+    ,0x98b02686
+    ,0x4acc3846
+    ,0xf2278634
+    ,0x43001f4b
+    ,0x0f29adfc
+    ,0x86324400
+    ,0x47000325
+    ,0xd4fc2986
+    ,0x2b862543
+    ,0xf0228626
+    ,0xa8d042c8
+    ,0x2b4a001f
+    ,0xf4922786
+    ,0x45001f47
+    ,0x2c44c8f0
+    ,0x2386274b
+    ,0x28494500
+    ,0x7dfc2486
+    ,0x45d0f826
+    ,0x000549a4
+    ,0x4b90a043
+    ,0x1f42b0c0
     ,0x001f4200
-    ,0x44000b49
-    ,0x3745540f
-    ,0x42b8d049
-    ,0x3c2abdfc
-    ,0x362f2b36
-    ,0x47ce2b27
-    ,0x36352936
-    ,0x25362d24
-    ,0xf045cc38
-    ,0xf89644d8
-    ,0x3b420003
-    ,0x36342a36
-    ,0x289dfc22
-    ,0x31267dfc
-    ,0x48001f49
-    ,0x3026362e
-    ,0x44072836
-    ,0x4b001f4a
-    ,0x98b042f4
-    ,0x4a7bf24b
-    ,0x1f274df0
-    ,0x000f4600
-    ,0x26245dfc
-    ,0x36322736
-    ,0x2b36332a
-    ,0x9222362b
-    ,0x29362826
-    ,0xfc283627
-    ,0xc8f048d4
-    ,0x46a8d049
-    ,0xbdf02536
-    ,0x4a001f25
-    ,0x2c47001f
-    ,0x36252436
-    ,0x1f49000f
-    ,0x45004600
-    ,0x47b0c044
-    ,0x244ad0f8
-    ,0x44a4002b
-    ,0xb64690a0
-    ,0xd0e049d6
-    ,0x48000548
-    ,0x000f4244
-    ,0x4700014a
-    ,0x1d2a3629
-    ,0x2dfc2736
-    ,0x1f28361e
-    ,0x361c2936
-    ,0x2b362a26
-    ,0x07243623
-    ,0x44440742
-    ,0x0f4b548f
-    ,0x44074600
-    ,0x4946ca48
-    ,0x36202236
-    ,0x2736142a
-    ,0x0047b08e
-    ,0x7b104ab6
-    ,0x48b10249
-    ,0x0146b890
-    ,0xb8254ba9
-    ,0x22448e2b
-    ,0x36212536
-    ,0x2636132b
-    ,0x16283615
-    ,0xb2012936
-    ,0x0f2badda
-    ,0x001f4254
-    ,0x45000744
-    ,0x1b24361a
-    ,0x45a8c025
-    ,0x184488a0
-    ,0x4407428c
-    ,0x2b36184a
-    ,0x36174200
-    ,0x4ab4002a
-    ,0x11223619
-    ,0x36122436
+    ,0xb02a8624
+    ,0x86294a88
+    ,0x26862a25
+    ,0x0044000f
+    ,0x29862343
+    ,0x0744d6b6
+    ,0x548f4744
+    ,0x45000f46
+    ,0x00012386
+    ,0x4b000f42
+    ,0x1c22861d
+    ,0xd0e02b86
+    ,0x0145b600
+    ,0x7b1046a9
+    ,0x24861f47
+    ,0x1e494407
+    ,0xb87a498e
+    ,0x224446ca
+    ,0x86212786
+    ,0x25862026
+    ,0x13228614
+    ,0xb8902b86
+    ,0x42b08e4b
+    ,0x2b434407
+    ,0x2486164a
+    ,0x1b44b201
+    ,0x861a2a86
+    ,0x43b10229
+    ,0x86154246
+    ,0x265dda23
+    ,0x1f47540f
+    ,0x00074900
+    ,0x07478c18
+    ,0x86184544
+    ,0x232a0026
+    ,0x03425f04
+    ,0x2a861229
+    ,0x02446002
+    ,0xa8c04445
+    ,0x4988a04a
+    ,0xb1002586
+    ,0x46478046
+    ,0x1945b400
+    ,0x86112786
+    ,0x22278610
+    ,0x47074561
+    ,0x4798b045
+    ,0x1747000f
+    ,0x0c0200d0
+    ,0x81223680
+    ,0x36822436
+    ,0x26368325
+    ,0x42888844
+    ,0x00428888
     ,0xc1304400
-    ,0x0200d00f
-    ,0x2236100c
-    ,0x0f4298b0
+    ,0x0f000000
+    ,0x00000000
+    ,0x00000000
     ,0x9230d00f
     ,0x07809340
-    ,0x42888844
-    ,0x00428888
     ,0x00004821
     ,0x4afff848
     ,0x9f490003
@@ -1222,7 +1318,7 @@ const GT_U32 prvCpssDxChPpaFwImemAc5pImage01[PRV_CPSS_DXCH_PPA_FW_IMAGE_SIZE_AC5
     ,0x431dcd43
     ,0x0bc7110c
     ,0x60480000
-    ,0x500199c0
+    ,0x50020dc0
     ,0x0f434240
     ,0x770b2786
     ,0x0c770a02
@@ -1263,7 +1359,7 @@ const GT_U32 prvCpssDxChPpaFwImemAc5pImage01[PRV_CPSS_DXCH_PPA_FW_IMAGE_SIZE_AC5
     ,0x0c482200
     ,0xc7110c77
     ,0x4800000b
-    ,0x0173c060
+    ,0x01e7c060
     ,0x2656800c
     ,0x0b27861a
     ,0x770a0277
@@ -1525,41 +1621,157 @@ const GT_U32 prvCpssDxChPpaFwImemAc5pImage01[PRV_CPSS_DXCH_PPA_FW_IMAGE_SIZE_AC5
     ,0x0c020022
     ,0x2c232680
     ,0x462f2346
-    ,0x242dd423
-    ,0x00423e00
-    ,0xc0304200
-    ,0x35234634
-    ,0x46332346
-    ,0x23463223
-    ,0x31234630
-    ,0x23463a23
-    ,0x38234637
-    ,0x46392346
-    ,0x23463623
-    ,0x02002222
-    ,0x2326800c
-    ,0x3b23463d
-    ,0x463c2346
-    ,0x00000000
+    ,0x224d2c23
+    ,0x00441200
+    ,0xc0304400
+    ,0x3323463f
+    ,0x46322346
+    ,0x23463023
+    ,0x3e234631
+    ,0x23463823
+    ,0x36234639
+    ,0x46342346
+    ,0x23463523
+    ,0x463d2326
+    ,0x23463b23
+    ,0x3a23463c
+    ,0x46372346
     ,0x00000000
-    ,0xd00f0000
-    ,0x810a2000
-    ,0x463e2346
-    ,0x242dd423
-    ,0x00423e00
-    ,0xc0304200
-    ,0x44234643
-    ,0x46422346
+    ,0x2000d00f
+    ,0x2222810a
+    ,0x800c0200
+    ,0x46402346
+    ,0x224d2c23
+    ,0x00441200
+    ,0xc0304400
+    ,0x4423464b
+    ,0x46432346
     ,0x23464123
-    ,0x4023463f
-    ,0x2326800c
-    ,0x46234637
-    ,0x46472346
-    ,0x23464523
+    ,0x4a234642
+    ,0x23464823
+    ,0x47234649
+    ,0x46452346
+    ,0x23464623
+    ,0x2000d00f
+    ,0x2222810a
+    ,0x800c0200
+    ,0x46372326
+    ,0x00441200
+    ,0x00004bfe
+    ,0x4400004b
+    ,0xc062c050
+    ,0x4d0c0808
+    ,0x17873c22
+    ,0x4d0f2830
+    ,0x294d1023
+    ,0x2b82862b
+    ,0x8811ab88
+    ,0x077a0a0a
+    ,0x42070740
+    ,0x26822b82
+    ,0x2b82882b
+    ,0x872b2681
+    ,0x26802b82
+    ,0x9b982b82
+    ,0x972b8281
+    ,0x2b82809b
+    ,0x892b2683
+    ,0x9b288285
+    ,0x2b82849b
+    ,0x82839b9a
+    ,0x829b992b
+    ,0x22228326
+    ,0x19080849
+    ,0xa0040808
+    ,0x0faa1100
+    ,0x7d132546
+    ,0x0e771127
+    ,0x4d02024b
+    ,0x464c2646
+    ,0x25465325
+    ,0x9e267611
+    ,0x25465098
+    ,0x4e25464f
+    ,0x46582546
+    ,0x25465725
+    ,0x55254656
+    ,0x46542546
+    ,0x5c4b3e00
+    ,0x00002546
+    ,0x25465b4b
+    ,0x5925465a
+    ,0x5e60000a
+    ,0x465d2546
+    ,0x29343b25
+    ,0xcc2cc392
+    ,0xb6800c02
+    ,0x25466025
+    ,0x3b25465f
+    ,0xc3a62a34
     ,0x00000000
-    ,0xd00f0000
-    ,0x810a2000
-    ,0x02002222
+    ,0x0f000000
+    ,0x0ab000d0
+    ,0x002bb281
+    ,0x00441200
+    ,0x00004bfe
+    ,0x4400004b
+    ,0xc062c050
+    ,0x4d0c0808
+    ,0x17873c22
+    ,0x4d0f2830
+    ,0x294d1023
+    ,0x2b828b2b
+    ,0x8811ab88
+    ,0x077a0a0a
+    ,0x42070740
+    ,0x26822b82
+    ,0x2b828d2b
+    ,0x8c2b2681
+    ,0x26802b82
+    ,0x9b962b82
+    ,0x952b8281
+    ,0x2b82809b
+    ,0x8e2b2683
+    ,0x992b8285
+    ,0x2b82849b
+    ,0x82839b98
+    ,0x829b972b
+    ,0x2b82889b
+    ,0x82879b9c
+    ,0x869b9b2b
+    ,0x9b9a2b82
+    ,0x00a00408
+    ,0x8a0faa11
+    ,0x9b9e2882
+    ,0x9d2b8289
+    ,0x024b2546
+    ,0x25467302
+    ,0x49222283
+    ,0x08190808
+    ,0x13254664
+    ,0x7711277d
+    ,0x2646630e
+    ,0x61254662
+    ,0x25466925
+    ,0x11267627
+    ,0x46662896
+    ,0x25466525
+    ,0x466e4b00
+    ,0x25466d25
+    ,0x6b25466c
+    ,0x466a2546
+    ,0x466f2546
+    ,0x29343b25
+    ,0xcc2cc39a
+    ,0x004b3e00
+    ,0x25467225
+    ,0x3b254671
+    ,0xc3ae2a34
+    ,0x7060000a
+    ,0x0f000000
+    ,0x0ab000d0
+    ,0x002bb281
+    ,0xb6800c02
     ,0x21008857
     ,0x43020045
     ,0x00430001
@@ -1568,14 +1780,14 @@ const GT_U32 prvCpssDxChPpaFwImemAc5pImage01[PRV_CPSS_DXCH_PPA_FW_IMAGE_SIZE_AC5
     ,0x02e24203
     ,0xf1085840
     ,0x825a275d
-    ,0x29764b29
-    ,0xaa29764c
+    ,0x29767729
+    ,0xaa297678
     ,0x2b5d01b1
-    ,0xb1297648
-    ,0x4d0c8811
+    ,0xb1297674
+    ,0x790c8811
     ,0x9ab82976
-    ,0x492a26b1
-    ,0x764a2976
+    ,0x752a26b1
+    ,0x76762976
     ,0x431dcd43
     ,0x95288295
     ,0x82942482
@@ -1588,50 +1800,50 @@ const GT_U32 prvCpssDxChPpaFwImemAc5pImage01[PRV_CPSS_DXCH_PPA_FW_IMAGE_SIZE_AC5
     ,0xe8517861
     ,0x4a3e0008
     ,0x5d4a0000
-    ,0x7651c2bc
-    ,0x22765029
-    ,0x4e29764f
+    ,0x767cc2bc
+    ,0x22768329
+    ,0x7a29767b
     ,0x55942976
-    ,0x29765629
-    ,0x54297655
-    ,0x76532976
-    ,0x29765229
-    ,0x02002aa2
-    ,0x29a6800c
-    ,0x582b543b
-    ,0x76572976
-    ,0x1053fa38
+    ,0x29768129
+    ,0x7f297680
+    ,0x767e2976
+    ,0x29767d29
+    ,0xa2810aa0
+    ,0x0c02002a
+    ,0x3b29a680
+    ,0x76822b54
+    ,0x53fbdc53
+    ,0x1053f965
     ,0x211cf090
-    ,0xd00f0000
-    ,0x810aa000
-    ,0x53fcc053
-    ,0x8653fc95
-    ,0xfc7753fc
-    ,0x53fc4f53
-    ,0xfd6553fd
-    ,0x53fd3553
-    ,0x0753fd12
-    ,0xfcf053fd
-    ,0xfd53fe14
-    ,0xfdf653fd
-    ,0x53fdda53
-    ,0xa453fdc3
-    ,0x53fe5853
-    ,0x3e53fe4d
-    ,0xfe2b53fe
-    ,0x53fe1f53
-    ,0xfeed53ff
-    ,0x53fedd53
-    ,0xa753febe
-    ,0xfe8053fe
-    ,0x9953ffac
-    ,0xff9253ff
-    ,0x53fa2a53
-    ,0x3053ff73
+    ,0x00d00f00
+    ,0xfc7d53fc
+    ,0x53fc4d53
+    ,0x1353fc22
+    ,0xfc0453fc
+    ,0x3153fd50
+    ,0xfcf253fd
+    ,0x53fcc253
+    ,0x9453fc9f
+    ,0x53fdac53
+    ,0x8a53fda1
+    ,0xfd8353fd
+    ,0x53fd6753
+    ,0xfe0d53fe
+    ,0x53fde553
+    ,0xcb53fdda
+    ,0xfdb853fd
+    ,0xbd53ff00
+    ,0xfe7a53fe
+    ,0x53fe6a53
+    ,0x3453fe4b
+    ,0x53ff4853
+    ,0x2653ff39
+    ,0xff1f53ff
+    ,0x53f95753
     ,0x6e3230d6
-    ,0xd00f0000
-    ,0x10211c10
-    ,0x53ffbb80
+    ,0x1c10d00f
+    ,0xbb801021
+    ,0xff8053ff
     ,0x0c004104
     ,0x5b290544
     ,0x043f0474
@@ -1661,31 +1873,31 @@ const GT_U32 prvCpssDxChPpaFwImemAc5pImage01[PRV_CPSS_DXCH_PPA_FW_IMAGE_SIZE_AC5
 /* Table to hold thread PC address. Each entry represents different thread. */
 const GT_U32 phaFwThreadsPcAddressAc5pImage01[PRV_CPSS_DXCH_PHA_MAX_THREADS_CNS] = {
      0x400160                                            /* 0 THR0_DoNothing */
-    ,0x4009c0                                            /* 1 THR1_SRv6_End_Node */
-    ,0x400a60                                            /* 2 THR2_SRv6_Source_Node_1_segment */
-    ,0x400aa0                                            /* 3 THR3_SRv6_Source_Node_First_Pass_2_3_segments */
-    ,0x400ae0                                            /* 4 THR4_SRv6_Source_Node_Second_Pass_3_segments */
-    ,0x400b90                                            /* 5 THR5_SRv6_Source_Node_Second_Pass_2_segments */
+    ,0x400b40                                            /* 1 THR1_SRv6_End_Node */
+    ,0x400be0                                            /* 2 THR2_SRv6_Source_Node_1_segment */
+    ,0x400c20                                            /* 3 THR3_SRv6_Source_Node_First_Pass_2_3_segments */
+    ,0x400c60                                            /* 4 THR4_SRv6_Source_Node_Second_Pass_3_segments */
+    ,0x400d10                                            /* 5 THR5_SRv6_Source_Node_Second_Pass_2_segments */
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 6 */
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 7 */
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 8 */
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 9 */
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 10 */
-    ,0x400c50                                            /* 11 THR11_VXLAN_GPB_SourceGroupPolicyID */
-    ,0x400cb0                                            /* 12 THR12_MPLS_SR_NO_EL */
-    ,0x400ce0                                            /* 13 THR13_MPLS_SR_ONE_EL */
-    ,0x400d70                                            /* 14 THR14_MPLS_SR_TWO_EL */
-    ,0x400e30                                            /* 15 THR15_MPLS_SR_THREE_EL */
-    ,0x400f30                                            /* 16 THR16_SGT_NetAddMSB */
-    ,0x400fb0                                            /* 17 THR17_SGT_NetFix */
-    ,0x401010                                            /* 18 THR18_SGT_NetRemove */
-    ,0x401080                                            /* 19 THR19_SGT_eDSAFix */
-    ,0x4010a0                                            /* 20 THR20_SGT_eDSARemove */
-    ,0x401100                                            /* 21 THR21_SGT_GBPFixIPv4 */
-    ,0x401130                                            /* 22 THR22_SGT_GBPFixIPv6 */
-    ,0x401160                                            /* 23 THR23_SGT_GBPRemoveIPv4 */
-    ,0x4011b0                                            /* 24 THR24_SGT_GBPRemoveIPv6 */
-    ,0x4011f0                                            /* 25 THR25_PTP_Phy_1_Step */
+    ,0x400dd0                                            /* 11 THR11_VXLAN_GPB_SourceGroupPolicyID */
+    ,0x400e30                                            /* 12 THR12_MPLS_SR_NO_EL */
+    ,0x400e60                                            /* 13 THR13_MPLS_SR_ONE_EL */
+    ,0x400ef0                                            /* 14 THR14_MPLS_SR_TWO_EL */
+    ,0x400fb0                                            /* 15 THR15_MPLS_SR_THREE_EL */
+    ,0x4010b0                                            /* 16 THR16_SGT_NetAddMSB */
+    ,0x401130                                            /* 17 THR17_SGT_NetFix */
+    ,0x401190                                            /* 18 THR18_SGT_NetRemove */
+    ,0x401200                                            /* 19 THR19_SGT_eDSAFix */
+    ,0x401220                                            /* 20 THR20_SGT_eDSARemove */
+    ,0x401280                                            /* 21 THR21_SGT_GBPFixIPv4 */
+    ,0x4012b0                                            /* 22 THR22_SGT_GBPFixIPv6 */
+    ,0x4012e0                                            /* 23 THR23_SGT_GBPRemoveIPv4 */
+    ,0x401330                                            /* 24 THR24_SGT_GBPRemoveIPv6 */
+    ,0x401370                                            /* 25 THR25_PTP_Phy_1_Step */
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 26 */
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 27 */
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 28 */
@@ -1706,14 +1918,14 @@ const GT_U32 phaFwThreadsPcAddressAc5pImage01[PRV_CPSS_DXCH_PHA_MAX_THREADS_CNS]
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 43 */
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 44 */
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 45 */
-    ,0x401220                                            /* 46 THR46_SFLOW_IPv4 */
-    ,0x4012c0                                            /* 47 THR47_SFLOW_IPv6 */
-    ,0x401360                                            /* 48 THR48_SRV6_Best_Effort */
-    ,0x4013c0                                            /* 49 THR49_SRV6_Source_Node_1_CONTAINER */
-    ,0x401440                                            /* 50 THR50_SRV6_Source_Node_First_Pass_1_CONTAINER */
-    ,0x401480                                            /* 51 THR51_SRV6_Source_Node_Second_Pass_3_CONTAINER */
-    ,0x401590                                            /* 52 THR52_SRV6_Source_Node_Second_Pass_2_CONTAINER */
-    ,0x4016a0                                            /* 53 THR53_SRV6_End_Node_GSID_COC32 */
+    ,0x4013a0                                            /* 46 THR46_SFLOW_IPv4 */
+    ,0x401440                                            /* 47 THR47_SFLOW_IPv6 */
+    ,0x4014e0                                            /* 48 THR48_SRV6_Best_Effort */
+    ,0x401540                                            /* 49 THR49_SRV6_Source_Node_1_CONTAINER */
+    ,0x4015c0                                            /* 50 THR50_SRV6_Source_Node_First_Pass_1_CONTAINER */
+    ,0x401600                                            /* 51 THR51_SRV6_Source_Node_Second_Pass_3_CONTAINER */
+    ,0x401710                                            /* 52 THR52_SRV6_Source_Node_Second_Pass_2_CONTAINER */
+    ,0x401820                                            /* 53 THR53_SRV6_End_Node_GSID_COC32 */
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 54 */
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 55 */
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 56 */
@@ -1721,12 +1933,12 @@ const GT_U32 phaFwThreadsPcAddressAc5pImage01[PRV_CPSS_DXCH_PHA_MAX_THREADS_CNS]
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 58 */
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 59 */
     ,0x400180                                            /* 60 THR60_DropAllTraffic */
-    ,0x401720                                            /* 61 THR61_save_target_port_info */
-    ,0x401740                                            /* 62 THR62_enhanced_sFlow_fill_remain_IPv4 */
-    ,0x401790                                            /* 63 THR63_enhanced_sFlow_fill_remain_IPv6 */
-    ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 64 */
-    ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 65 */
-    ,0x4017d0                                            /* 66 THR66_enhanced_sFlow */
+    ,0x4018a0                                            /* 61 THR61_save_target_port_info */
+    ,0x4018c0                                            /* 62 THR62_enhanced_sFlow_fill_remain_IPv4 */
+    ,0x401910                                            /* 63 THR63_enhanced_sFlow_fill_remain_IPv6 */
+    ,0x401950                                            /* 64 THR64_Erspan_TypeII_SameDevMirroring_Ipv4 */
+    ,0x401a30                                            /* 65 THR65_Erspan_TypeII_SameDevMirroring_Ipv6 */
+    ,0x401b20                                            /* 66 THR66_enhanced_sFlow */
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 67 */
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 68 */
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 69 */
@@ -2052,77 +2264,77 @@ const GT_U32 phaFwAccelCmdsAc5pImage01[FW_ACCEL_CMDS_MAX_NUM_CNS] = {
    ,0x080100a2 /* CSUM_LOAD_NEW_THR62_enhanced_sFlow_fill_remain_IPv4_LEN2_FROM_PKT_IPv4_Header__total_length, offset = 0x02ac */
    ,0x082100aa /* CSUM_LOAD_OLD_THR62_enhanced_sFlow_fill_remain_IPv4_LEN2_FROM_PKT_IPv4_Header__header_checksum, offset = 0x02b0 */
    ,0xc00faa00 /* CSUM_STORE_IP_THR62_enhanced_sFlow_fill_remain_IPv4_TO_PKT_IPv4_Header__header_checksum, offset = 0x02b4 */
-   ,0x0001eb54 /* COPY_BYTES_THR63_enhanced_sFlow_fill_remain_IPv6_DESC_phal2ppa__pha_metadata3_LEN2_TO_PKT_enhanced_sflow_rx_ts_shim_header__ip_high, offset = 0x02b8 */
-   ,0x080500e4 /* CSUM_LOAD_NEW_THR63_enhanced_sFlow_fill_remain_IPv6_LEN6_FROM_PKT_enhanced_sflow_rx_ts_shim_header__rx_timestamp_47_32, offset = 0x02bc */
-   ,0x080300ea /* CSUM_LOAD_NEW_THR63_enhanced_sFlow_fill_remain_IPv6_LEN4_FROM_PKT_enhanced_sflow_rx_ts_shim_header__reserved, offset = 0x02c0 */
-   ,0xc00fe200 /* CSUM_STORE_IP_THR63_enhanced_sFlow_fill_remain_IPv6_TO_PKT_enhanced_sflow_rx_ts_shim_header__checksum_PLUS2, offset = 0x02c4 */
-   ,0x0001f956 /* COPY_BYTES_THR63_enhanced_sFlow_fill_remain_IPv6_DESC_phal2ppa__pha_metadata1_LEN2_TO_PKT_enhanced_sflow_tx_ts_shim_header__ip_low, offset = 0x02c8 */
-   ,0x080500f2 /* CSUM_LOAD_NEW_THR63_enhanced_sFlow_fill_remain_IPv6_LEN6_FROM_PKT_enhanced_sflow_tx_ts_shim_header__tx_timestamp_47_32, offset = 0x02cc */
-   ,0x080300f8 /* CSUM_LOAD_NEW_THR63_enhanced_sFlow_fill_remain_IPv6_LEN4_FROM_PKT_enhanced_sflow_tx_ts_shim_header__reserved, offset = 0x02d0 */
-   ,0xc00ff000 /* CSUM_STORE_IP_THR63_enhanced_sFlow_fill_remain_IPv6_TO_PKT_enhanced_sflow_tx_ts_shim_header__checksum_PLUS2, offset = 0x02d4 */
+   ,0x0476d971 /* COPY_BITS_THR62_enhanced_sFlow_fill_remain_IPv4_DESC_phal2ppa__orig_src_eport_PLUS6_LEN7_TO_PKT_enhanced_sflow_rx_ts_shim_header__port_number, offset = 0x02b8 */
+   ,0x0476e748 /* COPY_BITS_THR62_enhanced_sFlow_fill_remain_IPv4_DESC_phal2ppa__local_dev_trg_phy_port_PLUS3_LEN7_TO_PKT_enhanced_sflow_tx_ts_shim_header__port_number, offset = 0x02bc */
+   ,0x0001eb54 /* COPY_BYTES_THR63_enhanced_sFlow_fill_remain_IPv6_DESC_phal2ppa__pha_metadata3_LEN2_TO_PKT_enhanced_sflow_rx_ts_shim_header__ip_high, offset = 0x02c0 */
+   ,0x080500e4 /* CSUM_LOAD_NEW_THR63_enhanced_sFlow_fill_remain_IPv6_LEN6_FROM_PKT_enhanced_sflow_rx_ts_shim_header__rx_timestamp_47_32, offset = 0x02c4 */
+   ,0x080300ea /* CSUM_LOAD_NEW_THR63_enhanced_sFlow_fill_remain_IPv6_LEN4_FROM_PKT_enhanced_sflow_rx_ts_shim_header__reserved, offset = 0x02c8 */
+   ,0xc00fe200 /* CSUM_STORE_IP_THR63_enhanced_sFlow_fill_remain_IPv6_TO_PKT_enhanced_sflow_rx_ts_shim_header__checksum_PLUS2, offset = 0x02cc */
+   ,0x0001f956 /* COPY_BYTES_THR63_enhanced_sFlow_fill_remain_IPv6_DESC_phal2ppa__pha_metadata1_LEN2_TO_PKT_enhanced_sflow_tx_ts_shim_header__ip_low, offset = 0x02d0 */
+   ,0x080500f2 /* CSUM_LOAD_NEW_THR63_enhanced_sFlow_fill_remain_IPv6_LEN6_FROM_PKT_enhanced_sflow_tx_ts_shim_header__tx_timestamp_47_32, offset = 0x02d4 */
+   ,0x080300f8 /* CSUM_LOAD_NEW_THR63_enhanced_sFlow_fill_remain_IPv6_LEN4_FROM_PKT_enhanced_sflow_tx_ts_shim_header__reserved, offset = 0x02d8 */
+   ,0xc00ff000 /* CSUM_STORE_IP_THR63_enhanced_sFlow_fill_remain_IPv6_TO_PKT_enhanced_sflow_tx_ts_shim_header__checksum_PLUS2, offset = 0x02dc */
    /* 44806001 COPY_BITS_THR63_enhanced_sFlow_fill_remain_IPv6_CONST_0x1_LEN1_TO_DESC_phal2ppa__egress_checksum_mode, offset = 0x029c */
-   ,0x540fcc2c /* ADD_BITS_THR63_enhanced_sFlow_fill_remain_IPv6_CONST_0x2C_LEN16_TO_PKT_udp_header__Length, offset = 0x02d8 */
-   ,0x540fa42c /* ADD_BITS_THR63_enhanced_sFlow_fill_remain_IPv6_CONST_0x2C_LEN16_TO_PKT_IPv6_Header__payload_length, offset = 0x02dc */
-   ,0x000b9400 /* COPY_BYTES_THR66_enhanced_sFlow_CFG_enhanced_sflow_template__reserved_0_LEN12_TO_PKT_enhanced_sflow_shim_header__version, offset = 0x02e0 */
-   ,0x46829705 /* COPY_BITS_THR66_enhanced_sFlow_CONST_0x5_LEN3_TO_PKT_enhanced_sflow_shim_header__version_PLUS29, offset = 0x02e4 */
-   ,0x0407980f /* COPY_BITS_THR66_enhanced_sFlow_CFG_enhanced_sflow_template__src_device_id_LEN8_TO_PKT_enhanced_sflow_shim_header__src_modid, offset = 0x02e8 */
-   ,0x04679971 /* COPY_BITS_THR66_enhanced_sFlow_DESC_phal2ppa__orig_src_eport_PLUS5_LEN8_TO_PKT_enhanced_sflow_shim_header__src_port, offset = 0x02ec */
-   ,0x042f9a4c /* COPY_BITS_THR66_enhanced_sFlow_DESC_phal2ppa__copy_reserved_PLUS2_LEN16_TO_PKT_enhanced_sflow_shim_header__dst_modid, offset = 0x02f0 */
-   ,0x000ba400 /* COPY_BYTES_THR66_enhanced_sFlow_CFG_enhanced_sflow_template__reserved_0_LEN12_TO_PKT_enhanced_sflow_rx_ts_shim_header__checksum, offset = 0x02f4 */
-   ,0x052daa74 /* COPY_BITS_THR66_enhanced_sFlow_DESC_phal2ppa__timestamp_PLUS2_LEN14_TO_PKT_enhanced_sflow_rx_ts_shim_header__rx_timestamp_31_16_PLUS2, offset = 0x02f8 */
-   ,0x040fac76 /* COPY_BITS_THR66_enhanced_sFlow_DESC_phal2ppa__timestamp_PLUS16_LEN16_TO_PKT_enhanced_sflow_rx_ts_shim_header__rx_timestamp_15_0, offset = 0x02fc */
-   ,0x0476b171 /* COPY_BITS_THR66_enhanced_sFlow_DESC_phal2ppa__orig_src_eport_PLUS6_LEN7_TO_PKT_enhanced_sflow_rx_ts_shim_header__port_number, offset = 0x0300 */
-   ,0x000bb400 /* COPY_BYTES_THR66_enhanced_sFlow_CFG_enhanced_sflow_template__reserved_0_LEN12_TO_PKT_enhanced_sflow_tx_ts_shim_header__checksum_PLUS2, offset = 0x0304 */
-   ,0x0416bf6f /* COPY_BITS_THR66_enhanced_sFlow_DESC_phal2ppa__trg_phy_port_PLUS3_LEN7_TO_PKT_enhanced_sflow_tx_ts_shim_header__port_number, offset = 0x0308 */
-   ,0x4780bf01 /* COPY_BITS_THR66_enhanced_sFlow_CONST_0x1_LEN1_TO_PKT_enhanced_sflow_tx_ts_shim_header__port_direction, offset = 0x030c */
-   ,0x45804801 /* COPY_BITS_THR66_enhanced_sFlow_CONST_0x1_LEN1_TO_DESC_phal2ppa__mac_timestamping_en, offset = 0x0310 */
-   ,0x47824500 /* COPY_BITS_THR66_enhanced_sFlow_CONST_0x0_LEN3_TO_DESC_phal2ppa__ptp_packet_format, offset = 0x0314 */
-   ,0x46035f04 /* COPY_BITS_THR66_enhanced_sFlow_CONST_0x4_LEN4_TO_DESC_phal2ppa__ptp_action, offset = 0x0318 */
-   ,0x45026002 /* COPY_BITS_THR66_enhanced_sFlow_CONST_0x2_LEN3_TO_DESC_phal2ppa__timestamp_mask_profile, offset = 0x031c */
-   ,0x47076122 /* COPY_BITS_THR66_enhanced_sFlow_CONST_0x22_LEN8_TO_DESC_phal2ppa__timestamp_offset, offset = 0x0320 */
-   ,0x00000000 /* offset = 0x0324 */
-   ,0x00000000 /* offset = 0x0328 */
-   ,0x00000000 /* offset = 0x032c */
-   ,0x00000000 /* offset = 0x0330 */
-   ,0x00000000 /* offset = 0x0334 */
-   ,0x00000000 /* offset = 0x0338 */
-   ,0x00000000 /* offset = 0x033c */
-   ,0x00000000 /* offset = 0x0340 */
-   ,0x00000000 /* offset = 0x0344 */
-   ,0x00000000 /* offset = 0x0348 */
-   ,0x00000000 /* offset = 0x034c */
-   ,0x00000000 /* offset = 0x0350 */
-   ,0x00000000 /* offset = 0x0354 */
-   ,0x00000000 /* offset = 0x0358 */
-   ,0x00000000 /* offset = 0x035c */
-   ,0x00000000 /* offset = 0x0360 */
-   ,0x00000000 /* offset = 0x0364 */
-   ,0x00000000 /* offset = 0x0368 */
-   ,0x00000000 /* offset = 0x036c */
-   ,0x00000000 /* offset = 0x0370 */
-   ,0x00000000 /* offset = 0x0374 */
-   ,0x00000000 /* offset = 0x0378 */
-   ,0x00000000 /* offset = 0x037c */
-   ,0x00000000 /* offset = 0x0380 */
-   ,0x00000000 /* offset = 0x0384 */
-   ,0x00000000 /* offset = 0x0388 */
-   ,0x00000000 /* offset = 0x038c */
-   ,0x00000000 /* offset = 0x0390 */
-   ,0x00000000 /* offset = 0x0394 */
-   ,0x00000000 /* offset = 0x0398 */
-   ,0x00000000 /* offset = 0x039c */
-   ,0x00000000 /* offset = 0x03a0 */
-   ,0x00000000 /* offset = 0x03a4 */
-   ,0x00000000 /* offset = 0x03a8 */
-   ,0x00000000 /* offset = 0x03ac */
-   ,0x00000000 /* offset = 0x03b0 */
-   ,0x00000000 /* offset = 0x03b4 */
-   ,0x00000000 /* offset = 0x03b8 */
-   ,0x00000000 /* offset = 0x03bc */
-   ,0x00000000 /* offset = 0x03c0 */
-   ,0x00000000 /* offset = 0x03c4 */
-   ,0x00000000 /* offset = 0x03c8 */
-   ,0x00000000 /* offset = 0x03cc */
+   ,0x540fcc2c /* ADD_BITS_THR63_enhanced_sFlow_fill_remain_IPv6_CONST_0x2C_LEN16_TO_PKT_udp_header__Length, offset = 0x02e0 */
+   ,0x540fa42c /* ADD_BITS_THR63_enhanced_sFlow_fill_remain_IPv6_CONST_0x2C_LEN16_TO_PKT_IPv6_Header__payload_length, offset = 0x02e4 */
+   ,0x0476ed71 /* COPY_BITS_THR63_enhanced_sFlow_fill_remain_IPv6_DESC_phal2ppa__orig_src_eport_PLUS6_LEN7_TO_PKT_enhanced_sflow_rx_ts_shim_header__port_number, offset = 0x02e8 */
+   ,0x0476fb48 /* COPY_BITS_THR63_enhanced_sFlow_fill_remain_IPv6_DESC_phal2ppa__local_dev_trg_phy_port_PLUS3_LEN7_TO_PKT_enhanced_sflow_tx_ts_shim_header__port_number, offset = 0x02ec */
+   ,0x44079a08 /* COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x08_LEN8_TO_PKT_ethertype_header__ethertype, offset = 0x02f0 */
+   ,0x4407b010 /* COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x10_LEN8_TO_PKT_GRE_header__C, offset = 0x02f4 */
+   ,0x4407b288 /* COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x88_LEN8_TO_PKT_GRE_header__NP, offset = 0x02f8 */
+   ,0x4407b3be /* COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0xBE_LEN8_TO_PKT_GRE_header__NP_PLUS8, offset = 0x02fc */
+   ,0x0003b474 /* COPY_BYTES_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__lm_counter_LEN4_TO_PKT_GRE_header__Seq_num, offset = 0x0300 */
+   ,0x040fbe12 /* COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_srcTrgPortEntry__targetPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4, offset = 0x0304 */
+   ,0x040fbe10 /* COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_srcTrgPortEntry__srcPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4, offset = 0x0308 */
+   ,0x4403b801 /* COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x1_LEN4_TO_PKT_ERSPAN_type_II_header__Ver, offset = 0x030c */
+   ,0x0442ba4a /* COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__qos_mapped_up_LEN3_TO_PKT_ERSPAN_type_II_header__COS, offset = 0x0310 */
+   ,0x4581ba03 /* COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x3_LEN2_TO_PKT_ERSPAN_type_II_header__En, offset = 0x0314 */
+   ,0x06c0ba40 /* COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__truncated_LEN1_TO_PKT_ERSPAN_type_II_header__T, offset = 0x0318 */
+   ,0x050d9e50 /* COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__egress_byte_count_LEN14_TO_PKT_IPv4_Header__total_length_PLUS2, offset = 0x031c */
+   ,0x540f9e24 /* ADD_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x24_LEN16_TO_PKT_IPv4_Header__total_length, offset = 0x0320 */
+   ,0x0807009c /* CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN8_FROM_PKT_IPv4_Header__version, offset = 0x0324 */
+   ,0x080100a4 /* CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN2_FROM_PKT_IPv4_Header__ttl, offset = 0x0328 */
+   ,0x080700a8 /* CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN8_FROM_PKT_IPv4_Header__sip_high, offset = 0x032c */
+   ,0xc00fa600 /* CSUM_STORE_IP_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_TO_PKT_IPv4_Header__header_checksum, offset = 0x0330 */
+   ,0x000b8e00 /* COPY_BYTES_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_erspan_template__mac_da_47_32_LEN12_TO_PKT_IPv4_Header__version_MINUS14, offset = 0x0334 */
+   ,0x540d5032 /* ADD_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x32_LEN14_TO_DESC_phal2ppa__egress_byte_count, offset = 0x0338 */
+   ,0x000f8a00 /* COPY_BYTES_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_erspan_template__mac_da_47_32_LEN16_TO_PKT_IPv4_Header__version_MINUS18, offset = 0x033c */
+   ,0x540d5036 /* ADD_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x36_LEN14_TO_DESC_phal2ppa__egress_byte_count, offset = 0x0340 */
+   ,0x44079286 /* COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x86_LEN8_TO_PKT_ethertype_header__ethertype, offset = 0x0344 */
+   ,0x440793dd /* COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0xDD_LEN8_TO_PKT_ethertype_header__ethertype_PLUS8, offset = 0x0348 */
+   ,0x4407bc10 /* COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x10_LEN8_TO_PKT_GRE_header__C, offset = 0x034c */
+   ,0x4407be88 /* COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x88_LEN8_TO_PKT_GRE_header__NP, offset = 0x0350 */
+   ,0x4407bfbe /* COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0xBE_LEN8_TO_PKT_GRE_header__NP_PLUS8, offset = 0x0354 */
+   ,0x0003c074 /* COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__lm_counter_LEN4_TO_PKT_GRE_header__Seq_num, offset = 0x0358 */
+   ,0x040fca12 /* COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_srcTrgPortEntry__targetPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4, offset = 0x035c */
+   ,0x040fca10 /* COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_srcTrgPortEntry__srcPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4, offset = 0x0360 */
+   ,0x4403c401 /* COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x1_LEN4_TO_PKT_ERSPAN_type_II_header__Ver, offset = 0x0364 */
+   ,0x0442c64a /* COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__qos_mapped_up_LEN3_TO_PKT_ERSPAN_type_II_header__COS, offset = 0x0368 */
+   ,0x4581c603 /* COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x3_LEN2_TO_PKT_ERSPAN_type_II_header__En, offset = 0x036c */
+   ,0x06c0c640 /* COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__truncated_LEN1_TO_PKT_ERSPAN_type_II_header__T, offset = 0x0370 */
+   ,0x050d9850 /* COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__egress_byte_count_LEN14_TO_PKT_IPv6_Header__payload_length_PLUS2, offset = 0x0374 */
+   ,0x540f9810 /* ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x10_LEN16_TO_PKT_IPv6_Header__payload_length, offset = 0x0378 */
+   ,0x000b8600 /* COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_erspan_template__mac_da_47_32_LEN12_TO_PKT_IPv6_Header__version_MINUS14, offset = 0x037c */
+   ,0x540d503a /* ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x3A_LEN14_TO_DESC_phal2ppa__egress_byte_count, offset = 0x0380 */
+   ,0x000f8200 /* COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_erspan_template__mac_da_47_32_LEN16_TO_PKT_IPv6_Header__version_MINUS18, offset = 0x0384 */
+   ,0x540d503e /* ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x3E_LEN14_TO_DESC_phal2ppa__egress_byte_count, offset = 0x0388 */
+   ,0x000bccc0 /* SHIFTRIGHT_12_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_LEN12_FROM_PKT_mac_header__mac_da_47_32, offset = 0x038c */
+   ,0x000b9400 /* COPY_BYTES_THR66_enhanced_sFlow_CFG_enhanced_sflow_template__reserved_0_LEN12_TO_PKT_enhanced_sflow_shim_header__version, offset = 0x0390 */
+   ,0x46829705 /* COPY_BITS_THR66_enhanced_sFlow_CONST_0x5_LEN3_TO_PKT_enhanced_sflow_shim_header__version_PLUS29, offset = 0x0394 */
+   ,0x0407980f /* COPY_BITS_THR66_enhanced_sFlow_CFG_enhanced_sflow_template__src_device_id_LEN8_TO_PKT_enhanced_sflow_shim_header__src_modid, offset = 0x0398 */
+   ,0x04679971 /* COPY_BITS_THR66_enhanced_sFlow_DESC_phal2ppa__orig_src_eport_PLUS5_LEN8_TO_PKT_enhanced_sflow_shim_header__src_port, offset = 0x039c */
+   ,0x042f9a4c /* COPY_BITS_THR66_enhanced_sFlow_DESC_phal2ppa__copy_reserved_PLUS2_LEN16_TO_PKT_enhanced_sflow_shim_header__dst_modid, offset = 0x03a0 */
+   ,0x000ba400 /* COPY_BYTES_THR66_enhanced_sFlow_CFG_enhanced_sflow_template__reserved_0_LEN12_TO_PKT_enhanced_sflow_rx_ts_shim_header__checksum, offset = 0x03a4 */
+   ,0x052daa74 /* COPY_BITS_THR66_enhanced_sFlow_DESC_phal2ppa__timestamp_PLUS2_LEN14_TO_PKT_enhanced_sflow_rx_ts_shim_header__rx_timestamp_31_16_PLUS2, offset = 0x03a8 */
+   ,0x040fac76 /* COPY_BITS_THR66_enhanced_sFlow_DESC_phal2ppa__timestamp_PLUS16_LEN16_TO_PKT_enhanced_sflow_rx_ts_shim_header__rx_timestamp_15_0, offset = 0x03ac */
+   ,0x000bb400 /* COPY_BYTES_THR66_enhanced_sFlow_CFG_enhanced_sflow_template__reserved_0_LEN12_TO_PKT_enhanced_sflow_tx_ts_shim_header__checksum_PLUS2, offset = 0x03b0 */
+   ,0x4780bf01 /* COPY_BITS_THR66_enhanced_sFlow_CONST_0x1_LEN1_TO_PKT_enhanced_sflow_tx_ts_shim_header__port_direction, offset = 0x03b4 */
+   ,0x45804801 /* COPY_BITS_THR66_enhanced_sFlow_CONST_0x1_LEN1_TO_DESC_phal2ppa__mac_timestamping_en, offset = 0x03b8 */
+   ,0x47824500 /* COPY_BITS_THR66_enhanced_sFlow_CONST_0x0_LEN3_TO_DESC_phal2ppa__ptp_packet_format, offset = 0x03bc */
+   ,0x46035f04 /* COPY_BITS_THR66_enhanced_sFlow_CONST_0x4_LEN4_TO_DESC_phal2ppa__ptp_action, offset = 0x03c0 */
+   ,0x45026002 /* COPY_BITS_THR66_enhanced_sFlow_CONST_0x2_LEN3_TO_DESC_phal2ppa__timestamp_mask_profile, offset = 0x03c4 */
+   ,0x47076122 /* COPY_BITS_THR66_enhanced_sFlow_CONST_0x22_LEN8_TO_DESC_phal2ppa__timestamp_offset, offset = 0x03c8 */
+   ,0x4780b100 /* COPY_BITS_THR66_enhanced_sFlow_CONST_0x0_LEN1_TO_PKT_enhanced_sflow_rx_ts_shim_header__port_direction, offset = 0x03cc */
    ,0x00000000 /* offset = 0x03d0 */
    ,0x00000000 /* offset = 0x03d4 */
    ,0x00000000 /* offset = 0x03d8 */
diff --git a/mainPpDrv/h/cpss/dxCh/dxChxGen/pha/private/prvCpssDxChPpaFwImageInfo_FalconDefault.h b/mainPpDrv/h/cpss/dxCh/dxChxGen/pha/private/prvCpssDxChPpaFwImageInfo_FalconDefault.h
index 0cb55ac6c2..5df3e721eb 100644
--- a/mainPpDrv/h/cpss/dxCh/dxChxGen/pha/private/prvCpssDxChPpaFwImageInfo_FalconDefault.h
+++ b/mainPpDrv/h/cpss/dxCh/dxChxGen/pha/private/prvCpssDxChPpaFwImageInfo_FalconDefault.h
@@ -18,7 +18,7 @@
  *
  *   APPLICABLE DEVICES: Falcon.
  *
- * @version 21_11_00_00
+ * @version 22_02_00_00
  *******************************************************************************
  */
 
@@ -27,12 +27,12 @@
 
 /* PHA fw version information */
 const PRV_CPSS_DXCH_PHA_FW_IMAGE_VERSION_INFO_STC fwImageVersionFalconDefault = {
-	 0x21110000 /* | year << 24 | month << 16 | in_month << 8 | debug | */
+	 0x22020000 /* | year << 24 | month << 16 | in_month << 8 | debug | */
 	,0x00000000 /* image_id << 24 */
 	,"Default"}; /* image_name */
 
 /* The number of words of data in prvCpssDxChPpaFwImemFalconDefault*/
-#define PRV_CPSS_DXCH_PPA_FW_IMAGE_SIZE_FALCON_DEFAULT (1544)
+#define PRV_CPSS_DXCH_PPA_FW_IMAGE_SIZE_FALCON_DEFAULT (1552)
 
 /* The FW code to load into the PHA unit */
 const GT_U32 prvCpssDxChPpaFwImemFalconDefault[PRV_CPSS_DXCH_PPA_FW_IMAGE_SIZE_FALCON_DEFAULT] = {
@@ -167,15 +167,15 @@ const GT_U32 prvCpssDxChPpaFwImemFalconDefault[PRV_CPSS_DXCH_PPA_FW_IMAGE_SIZE_F
     ,0x211cf090
     ,0x10d00f00
     ,0xc020211c
-    ,0x05708010
+    ,0x05758010
     ,0x500042c0
-    ,0x3a5001fb
+    ,0x3a5001fd
     ,0x90105000
     ,0x1100eb30
     ,0x82104366
     ,0x0031c040
     ,0x43000050
-    ,0x20432111
+    ,0x20432202
     ,0x00038011
     ,0x50000750
     ,0xa3239343
@@ -217,13 +217,13 @@ const GT_U32 prvCpssDxChPpaFwImemFalconDefault[PRV_CPSS_DXCH_PPA_FW_IMAGE_SIZE_F
     ,0x245d0526
     ,0x0045fe00
     ,0x00254c1c
-    ,0x00014402
+    ,0x00014406
     ,0x7659f244
     ,0xb455b244
     ,0x44464cc0
-    ,0xd00f0000
-    ,0x447549f7
-    ,0x2746b1b4
+    ,0x0f000000
+    ,0x7549f8d0
+    ,0x9741b444
     ,0x0f000000
     ,0x4e9450d0
     ,0x54084443
@@ -236,454 +236,458 @@ const GT_U32 prvCpssDxChPpaFwImemFalconDefault[PRV_CPSS_DXCH_PPA_FW_IMAGE_SIZE_F
     ,0x0d42cafe
     ,0x84304290
     ,0x00430740
-    ,0x0f46000b
-    ,0xc0304704
+    ,0x0f494403
+    ,0xc0304700
     ,0x9230d00f
     ,0x463f8330
-    ,0x45000f4b
-    ,0x0f484403
-    ,0x000b4254
-    ,0x4a458244
-    ,0x820048c4
-    ,0x4b985045
-    ,0x4249c652
-    ,0x050d4904
-    ,0xc047ca10
-    ,0xc60646cc
-    ,0x4486004a
-    ,0x01429810
-    ,0x2236d628
-    ,0xd42436d7
-    ,0x36d92a36
-    ,0x2736d126
-    ,0x44074944
-    ,0x2936d34b
-    ,0xd82b36d5
-    ,0x36d22536
-    ,0x074a4407
+    ,0x46000b42
+    ,0x814a0442
+    ,0x050d4b45
+    ,0x45540f44
+    ,0x86004ac6
+    ,0x42c64046
+    ,0x0b48ccc0
+    ,0x06c04800
+    ,0x01478200
+    ,0x981049c4
+    ,0x44985045
+    ,0x524bc603
+    ,0x2b36d52a
+    ,0xd82436d7
+    ,0x36d32536
+    ,0x2736da29
+    ,0x44074804
+    ,0x2836db42
+    ,0xd92236d6
+    ,0x36d42636
+    ,0x07454407
     ,0x44074444
-    ,0x48000f42
-    ,0x07450003
-    ,0x8a0045c0
-    ,0x88b27648
-    ,0xbfbe42be
-    ,0x4a93dd44
-    ,0xca2536cf
-    ,0x36cc2936
-    ,0x4bbc102b
-    ,0x74499286
-    ,0x2436ce2a
-    ,0xcd47540d
-    ,0x36d02236
-    ,0x2836c926
+    ,0x4a44074b
+    ,0x0f460003
+    ,0x46c07429
+    ,0xdd4a9286
+    ,0xbe884b93
+    ,0x45bfbe44
+    ,0x36d22936
+    ,0x2236cd28
+    ,0x1042bc10
+    ,0x7d0848ca
+    ,0xce2536cf
+    ,0x36cc2436
+    ,0x2a36cb2b
+    ,0xca2636d0
+    ,0xb28746c0
+    ,0x0f4a050d
+    ,0x08074b54
+    ,0x44080145
+    ,0x0d4a9e50
+    ,0xa6004854
+    ,0x49ba4046
+    ,0x0f4906c0
+    ,0x2436c525
+    ,0xa84400a4
+    ,0x9e244500
+    ,0x2736d14b
+    ,0x5cf44850
+    ,0x2a36c222
+    ,0xc347000b
+    ,0x36c62b36
+    ,0x072836c9
+    ,0x44034944
+    ,0x2936c146
+    ,0x322636c7
+    ,0x45040f4b
+    ,0x004b4407
+    ,0x4407478e
+    ,0x2236c44a
+    ,0x458149b0
+    ,0x42000348
+    ,0xc84ab288
+    ,0xb3be2736
+    ,0x0342b474
+    ,0x36b848ba
+    ,0x2636be29
+    ,0x1046b801
+    ,0x2536bd4b
+    ,0xba45be10
+    ,0x04422b36
+    ,0x2a36b947
+    ,0x36c0b254
+    ,0x2236bb28
+    ,0x524a001b
+    ,0x001f47ba
+    ,0x2436bc48
+    ,0xa8499ca4
     ,0x08014600
-    ,0x47503242
-    ,0x074a540f
-    ,0x36cb4408
-    ,0x5045a600
-    ,0x050d499e
-    ,0x45c00f49
-    ,0x0b484582
-    ,0x4a9e2444
-    ,0xa42736c8
-    ,0x8e004200
-    ,0x48ba0646
-    ,0x04422236
-    ,0x2b4cf447
-    ,0xc52a36c2
-    ,0x00a82436
-    ,0xc145040f
-    ,0x36c62936
-    ,0x2836c025
-    ,0xc42636c7
-    ,0x47ba522b
-    ,0x03420003
-    ,0x44074644
-    ,0x49440748
-    ,0x36bf42b4
-    ,0x4ab28827
-    ,0x074b4407
-    ,0x36c34a44
-    ,0x102536bd
-    ,0xb01045be
-    ,0x489a0849
-    ,0x7446b801
+    ,0x49001746
+    ,0x9ca44508
+    ,0x2736bf4b
+    ,0x014a9ca4
+    ,0x44074200
+    ,0xa0489a08
+    ,0x36b04200
     ,0x47c00f2a
-    ,0xbe2236bb
-    ,0x36b72636
-    ,0x2936b828
-    ,0xba4a001b
-    ,0x36bc2b36
-    ,0xbeb25424
-    ,0x36b94bb3
-    ,0x49001749
-    ,0x01480013
-    ,0x00014608
-    ,0x47aa0042
-    ,0x08072736
-    ,0x4200a045
-    ,0xa44600a8
-    ,0x9ca4489c
-    ,0xa24b9ca4
-    ,0x00014402
-    ,0x4b001f44
-    ,0xb64a9ca4
-    ,0x2636b528
-    ,0xa02236b2
-    ,0x000f4500
-    ,0x2a36b047
-    ,0x000b4200
-    ,0x49001346
-    ,0xaf48000f
-    ,0x36ae2936
-    ,0xb12436b3
-    ,0x00172b36
+    ,0x072b36b1
+    ,0x46000b44
+    ,0xb5490013
+    ,0x36af2636
+    ,0x44000129
+    ,0xaa004b00
+    ,0x4a001747
+    ,0xb72236b2
+    ,0x02a22836
+    ,0xb64aa4ac
+    ,0xa4ac2736
+    ,0x2536b44b
+    ,0x1b4500a0
+    ,0x49a4ac29
+    ,0xb3469ca4
+    ,0x00132436
+    ,0x42001f48
+    ,0xa4ac2a36
+    ,0x489ca442
+    ,0xac440003
+    ,0x36a62636
+    ,0x03459ca4
+    ,0x00074b00
+    ,0x2b36a845
+    ,0xa747000f
+    ,0x449ca446
+    ,0xa92836ae
+    ,0x00032236
     ,0x479ca44a
-    ,0x1f2536b4
-    ,0x45000742
-    ,0xac2736ad
-    ,0x00034aa4
-    ,0x4b001b44
-    ,0x36a52936
-    ,0x48a4ac28
-    ,0xa449a4ac
-    ,0xa4ac469c
-    ,0x0b2a36a7
-    ,0x9ca44700
-    ,0x2236a945
-    ,0xa62636ac
-    ,0x4a000347
-    ,0xa82436aa
-    ,0xa4ac2b36
-    ,0x449ca44b
-    ,0x00034800
-    ,0x46000749
-    ,0xab420003
-    ,0xa4ac2536
-    ,0xc8450003
-    ,0xa4ac42cc
-    ,0x49c0bc46
-    ,0x0348bcb8
-    ,0x4bc8c444
-    ,0x034b0003
-    ,0xc4c04400
-    ,0x2736a44a
-    ,0x36a02636
-    ,0x45a4ac22
-    ,0x9e470003
-    ,0xd0cc2a36
-    ,0x07460003
-    ,0x1c074844
-    ,0x28369c49
-    ,0xa329369d
-    ,0x2436a12b
-    ,0xb44a0003
-    ,0x36a247b8
-    ,0x42000325
-    ,0x369b255d
-    ,0x4aa09c27
-    ,0x034b0003
-    ,0x369f4400
-    ,0xb2293694
-    ,0x7b30497b
-    ,0x46b4b048
-    ,0x0c42a8a4
+    ,0x36aa4800
+    ,0x46a4ac24
+    ,0x0349c0bc
+    ,0x00074900
+    ,0xab4bc8c4
+    ,0x36ad2536
+    ,0x4ac4c027
+    ,0x0f420003
+    ,0x42ccc848
+    ,0x0b2a369e
+    ,0x00034700
+    ,0x2b369f45
+    ,0x0003491c
+    ,0x29369d46
+    ,0x032636a3
+    ,0xa4ac4400
+    ,0x0347a4ac
+    ,0x36a04a00
+    ,0x2836a522
+    ,0x0744d0cc
+    ,0x42000348
+    ,0xa44aa09c
+    ,0x36a22736
+    ,0x45a4ac25
+    ,0xb4b02636
+    ,0x2b5cf446
+    ,0xa1497bb2
+    ,0x00032436
+    ,0xb842a8a4
+    ,0x000348bc
+    ,0x29369444
+    ,0x9a2b3696
+    ,0x22369728
+    ,0x1b47b8b4
+    ,0x00034a00
+    ,0x2a369547
+    ,0x001f4604
+    ,0x4900174b
+    ,0x0c44aca8
+    ,0x369c255d
+    ,0x98253699
+    ,0xacb42436
+    ,0x4bacb449
+    ,0x4b46d15a
     ,0x4744002a
-    ,0x97253699
-    ,0x369a2236
-    ,0x28369326
-    ,0x36964a00
-    ,0x2436982b
-    ,0xa044aca8
-    ,0x36954ba4
-    ,0x4b480013
-    ,0x44094604
-    ,0x45478042
-    ,0x1b47d001
-    ,0x42d00045
-    ,0xb446d15a
-    ,0xacb448ac
-    ,0x49001749
-    ,0x450944d1
-    ,0x4b001f44
-    ,0x924aacb4
-    ,0xd2002736
-    ,0x9022368e
-    ,0x000f2536
-    ,0x2a368c47
-    ,0x074bacb4
-    ,0x49000f46
-    ,0x8b48540d
-    ,0x368a2936
-    ,0x26369128
-    ,0x07d22b36
-    ,0x47acb44a
-    ,0x80450007
-    ,0x000b4247
-    ,0x03273689
-    ,0x00034ad4
-    ,0x4b450044
-    ,0x8d24368f
-    ,0x48503a28
-    ,0xb4498600
-    ,0xd20146ac
-    ,0x45acb442
-    ,0x36874700
-    ,0x22368525
-    ,0x82263688
-    ,0x36812936
-    ,0x84243686
-    ,0xd5012b36
-    ,0x44acb44b
-    ,0x0b2a3683
-    ,0x4a9c5022
-    ,0x80258cec
-    ,0x8a002736
+    ,0x9b4aacb4
+    ,0x44092736
+    ,0x48440742
+    ,0x45092936
+    ,0x45478044
+    ,0x00487b30
+    ,0x368c42d0
+    ,0x0b49000f
+    ,0x45004600
+    ,0x2636914b
+    ,0x8b2b368d
+    ,0x4a07d247
+    ,0x9322368e
+    ,0xd2002836
+    ,0x44d10745
+    ,0x00132536
+    ,0x42478048
+    ,0x924ad403
+    ,0xd0012736
+    ,0x012b3684
+    ,0xacb44bd5
+    ,0x49860046
+    ,0x9024368f
+    ,0x48acb442
+    ,0x03450007
+    ,0x36824400
+    ,0x26368829
+    ,0xacb42236
     ,0x4a050d47
-    ,0x367fb489
-    ,0x24367d26
-    ,0xfc248ce8
-    ,0x9d14268c
-    ,0x42043447
-    ,0x7c2b7d14
-    ,0x367e2236
-    ,0x2a367a25
-    ,0x36794605
-    ,0x4a06a029
-    ,0xd02b367b
-    ,0x44074506
-    ,0xd44a9407
-    ,0x92044905
-    ,0x448f0e46
-    ,0x21440444
-    ,0x48440722
-    ,0x86428f07
-    ,0x8f014796
-    ,0x4b06b045
-    ,0x3671498e
-    ,0x4b940e2a
-    ,0x77253675
-    ,0x36732736
-    ,0xb0293670
-    ,0x45804407
-    ,0x24367446
-    ,0x05263676
-    ,0x42450048
-    ,0x0247064b
-    ,0x36724504
-    ,0x4a000b2b
-    ,0x900e4b44
-    ,0x47900e45
-    ,0x78428e01
-    ,0x97dd2836
-    ,0x0126366d
-    ,0x8f0e4690
-    ,0x49c00f44
-    ,0x014a8200
-    ,0x25366c27
-    ,0x684b8e02
-    ,0xb6002a36
-    ,0x24366b49
-    ,0x8e064708
-    ,0x42540d48
-    ,0x6a480663
-    ,0x366e2236
-    ,0x6744050d
-    ,0x06162936
-    ,0x2b36694a
-    ,0x0145540f
-    ,0x45ae1447
-    ,0x0f4b05b4
-    ,0xae504ace
-    ,0x49460144
-    ,0x08072736
-    ,0x22366148
-    ,0x6f42502a
-    ,0x00b42836
-    ,0x6249cd02
-    ,0x365f2436
-    ,0x4bcf002a
-    ,0x65253663
-    ,0x45053447
-    ,0x822b3660
-    ,0x057d4a45
-    ,0x29365e44
-    ,0xcf0645ce
-    ,0x268cf447
-    ,0xb8283666
-    ,0x04c14800
-    ,0x2436592a
-    ,0x0644ce09
-    ,0x07f24aca
-    ,0x00b0924b
-    ,0x365c2636
-    ,0x25365a27
-    ,0x08223658
-    ,0x36564bcd
-    ,0x03454407
-    ,0xca024700
-    ,0x46043049
-    ,0x64490402
-    ,0x44440744
-    ,0x574a06d0
-    ,0x05842b36
-    ,0x42440748
-    ,0xaa0845c2
-    ,0x48cf0142
-    ,0x014b0521
-    ,0xc0104aa3
-    ,0x4426365b
-    ,0xcf094904
-    ,0x29365546
-    ,0x8847c474
-    ,0x4ba6042a
-    ,0x4f28365d
-    ,0x36512236
-    ,0x27365325
-    ,0x364e4844
-    ,0x4406632b
-    ,0x504a064b
-    ,0x364d2436
-    ,0x0749a30e
-    ,0x06b04644
-    ,0x4505d447
-    ,0x0342000b
+    ,0x8347000f
+    ,0xd2012a36
+    ,0x86253687
+    ,0xacb42436
+    ,0x45acb444
+    ,0x8528368a
+    ,0x47000b2a
+    ,0x894a9c50
+    ,0x9d142736
+    ,0x48540d22
+    ,0x0434b489
+    ,0x28368142
+    ,0x7c48503a
+    ,0x367a2236
+    ,0x478a0027
+    ,0xa0268cfc
+    ,0x8ce84a06
+    ,0x258cec24
+    ,0x367d2536
+    ,0x4a940724
+    ,0x7f2b7d14
+    ,0x36802636
+    ,0x734506d0
+    ,0x05d42236
+    ,0x428f0749
+    ,0x7e293679
+    ,0x4b06b046
+    ,0x7b460521
+    ,0x36712b36
+    ,0x4404442a
+    ,0x44074245
+    ,0x458f0147
+    ,0x0b448f0e
+    ,0x92044a00
+    ,0x86253675
+    ,0x8e014796
+    ,0x29367042
+    ,0x00498e05
+    ,0x46458048
+    ,0x764b940e
+    ,0x82002636
+    ,0x2436744a
+    ,0x04022736
+    ,0x4407b045
+    ,0x722a3668
+    ,0x44072b36
+    ,0x0047064b
+    ,0x540d49b6
+    ,0x49c00f42
+    ,0x7722366a
+    ,0x4897dd46
+    ,0x164b4401
+    ,0x8f0e4a06
+    ,0x45900e44
+    ,0xce0f2436
+    ,0x4b8e024a
+    ,0x6d283678
+    ,0x90012636
+    ,0x2a223661
+    ,0x36674250
+    ,0x47900e29
+    ,0x6b25366c
+    ,0x2a365f2b
+    ,0x0f44050d
+    ,0x366e4554
+    ,0x49460127
+    ,0x458244ae
+    ,0x488e064a
+    ,0x634b05b4
+    ,0x36694806
+    ,0x5e4700b4
+    ,0xcd022936
+    ,0x47080149
+    ,0x5045ae14
+    ,0x366f4bcf
+    ,0x4aca0628
+    ,0x63243662
+    ,0xb0922536
+    ,0x7d450534
+    ,0x36564405
+    ,0x2b36602a
+    ,0x00480807
+    ,0x45ce0044
+    ,0x074704c1
+    ,0x36654244
+    ,0x22365827
+    ,0x00b82836
+    ,0x4b07f248
+    ,0x024a06d0
+    ,0xce094904
+    ,0x5925365a
+    ,0xca022436
+    ,0x4aa30149
+    ,0x664bcd08
+    ,0x26366427
+    ,0x0822364f
+    ,0x8cf442aa
+    ,0x47cf0626
+    ,0x364d2b36
+    ,0x2936552a
+    ,0x07444407
+    ,0x365c4544
+    ,0x1045c288
+    ,0x044444c0
+    ,0x4b052149
+    ,0x574a064b
     ,0x42d0c048
-    ,0x0e45a205
-    ,0xc3be47a8
-    ,0x29364c46
-    ,0x36442436
+    ,0x8442000b
+    ,0x04304805
+    ,0x47000346
+    ,0x365049a3
+    ,0x25365124
+    ,0x0947c474
+    ,0xcf0146cf
+    ,0x4e29364c
+    ,0x36442b36
     ,0x4aa40e2a
-    ,0x0f44a206
-    ,0xc8014b00
-    ,0x4827364a
-    ,0x36462536
-    ,0x28365422
-    ,0x474b00cc
-    ,0x47458045
-    ,0xa049a40e
-    ,0x04024606
-    ,0x26365249
-    ,0x000b4b00
-    ,0x2b364544
-    ,0x07480434
-    ,0x44014244
-    ,0x0247a401
-    ,0x7be245a2
-    ,0x48a30742
-    ,0x0f449600
-    ,0x27364125
-    ,0x0f263649
-    ,0xa8074954
-    ,0x29364346
-    ,0xf8a62b36
-    ,0x24363e4b
-    ,0x3d28364b
-    ,0x363f2236
-    ,0x1f45001f
-    ,0xbdfc4200
+    ,0x0e4ba604
+    ,0x28365d22
+    ,0x5326365b
+    ,0x05d42736
+    ,0x44066345
+    ,0x06b045a2
+    ,0x46440747
+    ,0x03424407
+    ,0x36464844
+    ,0xcc49a40e
+    ,0x000f4b00
+    ,0x4904024b
+    ,0x0544a206
+    ,0x427be248
+    ,0x0e46c3be
+    ,0x364847a8
+    ,0x24364725
+    ,0x364a4544
+    ,0x26365227
+    ,0x5422363d
+    ,0xc8012836
+    ,0x0f4b000f
+    ,0x36454954
+    ,0x2936432b
+    ,0x0144000b
+    ,0x42001f48
+    ,0x804606a0
+    ,0xa2024745
+    ,0x44960045
+    ,0xa4012536
+    ,0x46a80747
+    ,0x0742b8d0
+    ,0x043448a3
+    ,0x3a2b363c
+    ,0xcc282936
+    ,0x4bf8a649
+    ,0x3f24363e
+    ,0x2abdfc22
+    ,0x41263649
+    ,0x001f2736
+    ,0x44000b45
+    ,0x363b4645
     ,0x4807b02a
-    ,0x3c44000b
-    ,0x46a20147
-    ,0x2829363a
-    ,0x450049cc
-    ,0x47001f46
-    ,0xa30e44d8
-    ,0x2a363b48
-    ,0xfc42b8d0
-    ,0xd0e845e4
-    ,0x07223634
-    ,0x36424a44
-    ,0x4b001f28
-    ,0xf0243635
-    ,0x46000f45
-    ,0x40474407
-    ,0x36382636
-    ,0x25363627
-    ,0x98b02b36
-    ,0x289dfc4b
-    ,0x034a7bf2
-    ,0x540f4200
-    ,0x9245cc38
-    ,0x363242f4
-    ,0x49001f2a
-    ,0x33283639
-    ,0x25362d22
-    ,0x2f263637
-    ,0xce2b2736
-    ,0x46d8f047
-    ,0x36314ad0
-    ,0x49f89629
-    ,0xfc4a001f
-    ,0x362b245d
-    ,0x0745001f
-    ,0x362c4244
-    ,0x2b2dfc24
-    ,0xf8289dfc
-    ,0x2b362a4a
-    ,0x302a3629
-    ,0x7dfc2836
-    ,0x44450026
-    ,0x000b2636
-    ,0x49000f47
-    ,0x8f48001f
-    ,0x000f4b54
-    ,0x22253624
+    ,0x4b420003
+    ,0x36342836
+    ,0x35253636
+    ,0xd8f02436
+    ,0x45e4fc44
+    ,0x0047001f
+    ,0x48a30e42
+    ,0x1f4a4407
+    ,0xa2014b00
+    ,0x47d0e846
+    ,0x98b02636
+    ,0x4a7bf24b
+    ,0x2b283642
+    ,0xf4922236
+    ,0x0746000f
+    ,0x362d4744
+    ,0x259c1025
+    ,0x40273638
+    ,0x28363949
+    ,0xfc289dfc
+    ,0x3632245d
+    ,0x2b36332a
+    ,0xd8f047ce
+    ,0x2b2dfc46
+    ,0x2c4a001f
+    ,0x001f2436
+    ,0x1f4ad0f8
+    ,0x44074500
+    ,0x26363742
+    ,0x2b27362f
+    ,0x4b548f44
+    ,0x96293631
+    ,0x362a49f8
+    ,0x4445002b
     ,0x7b102236
     ,0x4588b042
-    ,0x2e44a400
-    ,0x48d4fc4b
-    ,0xf049c8f0
-    ,0x001f47c8
-    ,0x24362346
-    ,0x36272936
-    ,0x2b362128
-    ,0x002a3620
-    ,0xa9014ab6
-    ,0x2b263625
-    ,0x4407448e
-    ,0x46a8d044
-    ,0x28273626
-    ,0xd0e049d6
-    ,0x48000548
-    ,0x1f49000f
-    ,0xb8254700
-    ,0x1a25361b
-    ,0x001f2436
-    ,0x42540f46
-    ,0xb647b0c0
-    ,0x44001f46
-    ,0x07450007
-    ,0x36184a44
-    ,0x2badda2b
-    ,0x361e4946
-    ,0x29361f28
-    ,0x1827361d
-    ,0x90a0428c
-    ,0x1c4488a0
-    ,0x36192636
-    ,0x47000122
-    ,0xca484407
-    ,0x24361146
-    ,0x17253612
-    ,0xb4002a36
-    ,0x45a8c04a
-    ,0xb2012936
-    ,0x48b10249
-    ,0x0f47b08e
-    ,0x000f4200
-    ,0x90263613
-    ,0x98b046b8
-    ,0x27361442
-    ,0x16283615
+    ,0xfc2a3629
+    ,0xa400289d
+    ,0xfc243623
+    ,0x3630267d
+    ,0x4a000f28
+    ,0x22253624
+    ,0x26362e48
+    ,0x0749000f
+    ,0x36214444
+    ,0x4ba9012b
+    ,0x2547c8f0
+    ,0x2a3620b8
+    ,0x0b4ab600
+    ,0x001f4700
+    ,0x24361a29
+    ,0xf0448e2b
+    ,0x001f49c8
+    ,0x48d4fc46
+    ,0x540f2536
+    ,0x27362642
+    ,0xd0283627
+    ,0x362846a8
+    ,0x07428c18
+    ,0x44074500
+    ,0x2b36184a
+    ,0x1b2badda
+    ,0x46001f49
+    ,0x2549000f
+    ,0x00052636
+    ,0x47001f48
+    ,0xa8c04ab4
+    ,0x22361945
+    ,0xe047b0c0
+    ,0xd6b648d0
+    ,0x1d28361e
+    ,0x000f2736
+    ,0x25361242
+    ,0x002a3617
+    ,0x48440747
+    ,0x1c4946ca
+    ,0x90a02636
+    ,0x29361f46
+    ,0x361147b0
+    ,0x22361024
+    ,0xf84298b0
+    ,0x0001246d
+    ,0x15273614
+    ,0x36162836
+    ,0x49b20129
+    ,0x8e48b102
+    ,0xd00f0000
+    ,0x130c0200
+    ,0xb8902636
+    ,0x46000f46
+    ,0x07809340
+    ,0x42888844
     ,0x00428888
     ,0xc1304400
-    ,0x0200d00f
-    ,0x2236100c
+    ,0x00000000
+    ,0x00000000
     ,0x00000000
     ,0x9230d00f
-    ,0x07809340
-    ,0x42888844
     ,0x00004821
     ,0x4afff848
     ,0x9f490003
@@ -1472,30 +1476,30 @@ const GT_U32 prvCpssDxChPpaFwImemFalconDefault[PRV_CPSS_DXCH_PPA_FW_IMAGE_SIZE_F
     ,0x7711277d
     ,0x02024b0e
     ,0x38264637
-    ,0x46412546
+    ,0x46422546
     ,0x26763c25
     ,0x4639989e
     ,0x25463a25
-    ,0x45254644
-    ,0x46422546
-    ,0x25463e25
-    ,0x4025463f
-    ,0x29343b25
-    ,0xcc2cc392
-    ,0xb6254646
-    ,0x254643c3
+    ,0x43254646
+    ,0x463e2546
+    ,0x25463f25
+    ,0x41254640
+    ,0x2cc39229
+    ,0x254647cc
+    ,0x4644c3b6
+    ,0x25464525
+    ,0x00002b34
+    ,0x60000e4a
+    ,0x48254649
     ,0x343b2546
-    ,0x4a00002b
-    ,0x4860000e
-    ,0x46472546
-    ,0x00252680
-    ,0x0000423e
-    ,0x25a6ff42
-    ,0x494a0e00
-    ,0x00000000
-    ,0x00d00f00
-    ,0x22810a20
-    ,0x0c020022
+    ,0x00423e00
+    ,0xa6ff4200
+    ,0x4a0e0025
+    ,0x3b25464a
+    ,0xd00f0000
+    ,0x810a2000
+    ,0x02002222
+    ,0x2526800c
     ,0x00441200
     ,0x00004bfe
     ,0x4400004b
@@ -1528,78 +1532,82 @@ const GT_U32 prvCpssDxChPpaFwImemFalconDefault[PRV_CPSS_DXCH_PPA_FW_IMAGE_SIZE_F
     ,0x0faa1100
     ,0x9e28828a
     ,0x2b82899b
-    ,0x4b26464c
-    ,0x46590202
+    ,0x4b26464d
+    ,0x465b0202
     ,0x22228325
     ,0x19080849
-    ,0x25464f25
+    ,0x25465025
     ,0x11277d13
-    ,0x464a0e77
-    ,0x25464b25
-    ,0x46552546
-    ,0x26761025
-    ,0x4d289611
-    ,0x464e2546
-    ,0xc39a2934
-    ,0x4656cc2b
-    ,0x25465225
-    ,0x54254653
-    ,0x00004a0e
-    ,0x10c3be4a
-    ,0x95416000
-    ,0x3b254657
-    ,0x00423e00
-    ,0xa6f94200
-    ,0x25465825
-    ,0x002b343b
-    ,0xd00f0000
-    ,0x810a2000
-    ,0x02002222
-    ,0x2526800c
-    ,0xfcbd53fc
-    ,0x53fc9553
-    ,0x1053fa66
+    ,0x464b0e77
+    ,0x25464c25
+    ,0x46572546
+    ,0x26761125
+    ,0x4e289611
+    ,0x464f2546
+    ,0x58cc2bc3
+    ,0x46532546
+    ,0x25465425
+    ,0x56254655
+    ,0xc3be4a00
+    ,0x41600010
+    ,0x25465995
+    ,0x9a29343b
+    ,0xf9420000
+    ,0x465a25a6
+    ,0x2b343b25
+    ,0x004a0e00
+    ,0x0a2000d0
+    ,0x00222281
+    ,0x26800c02
+    ,0x423e0025
+    ,0x53fc9453
+    ,0x1053fa61
     ,0x211cf090
-    ,0x8d53fde8
-    ,0xfd3653fd
-    ,0x53fd0653
-    ,0xcc53fcdb
-    ,0x53feb853
-    ,0x9653fead
-    ,0xfe8b53fe
-    ,0x53fe3753
-    ,0xfa6153ff
-    ,0x53ff6953
-    ,0x0b53ff4a
-    ,0xfedc53ff
-    ,0x03b13082
+    ,0x0f000000
+    ,0xfd3553fd
+    ,0x53fd0553
+    ,0xcb53fcda
+    ,0xfcbc53fc
+    ,0x9553feac
+    ,0xfe8a53fe
+    ,0x53fe3653
+    ,0x8c53fde7
+    ,0x53ff6853
+    ,0x0a53ff49
+    ,0xfedb53ff
+    ,0x53feb753
     ,0x10d00f00
     ,0x8010211c
-    ,0x7c53ffb3
-    ,0x01000300
+    ,0x7b53ffb2
+    ,0xfa5c53ff
     ,0xc72f211d
     ,0xb1318316
     ,0x15b33303
+    ,0x03b13082
+    ,0xffffffff
+    ,0xffffffff
+    ,0xffffffff
+    ,0x01000300
 };
 
 /* Table to hold thread PC address. Each entry represents different thread. */
 const GT_U32 phaFwThreadsPcAddressFalconDefault[PRV_CPSS_DXCH_PHA_MAX_THREADS_CNS] = {
      0x400160                                            /* 0 THR0_DoNothing */
-    ,0x400a20                                            /* 1 THR1_SRv6_End_Node */
-    ,0x400ac0                                            /* 2 THR2_SRv6_Source_Node_1_segment */
-    ,0x400b00                                            /* 3 THR3_SRv6_Source_Node_First_Pass_2_3_segments */
-    ,0x400b40                                            /* 4 THR4_SRv6_Source_Node_Second_Pass_3_segments */
-    ,0x400bf0                                            /* 5 THR5_SRv6_Source_Node_Second_Pass_2_segments */
-    ,0x400cb0                                            /* 6 THR6_Cc_Erspan_TypeII_TrgDevLcMirroring_Ipv4 */
-    ,0x400e10                                            /* 7 THR7_Cc_Erspan_TypeII_TrgDevLcMirroring_Ipv6 */
-    ,0x400f80                                            /* 8 THR8_Cc_Erspan_TypeII_TrgDevDirectMirroring_Ipv4 */
-    ,0x4010c0                                            /* 9 THR9_Cc_Erspan_TypeII_TrgDevDirectMirroring_Ipv6 */
-    ,0x401210                                            /* 10 THR10_Cc_Erspan_TypeII_SrcDevMirroring */
-    ,0x401240                                            /* 11 THR11_VXLAN_GPB_SourceGroupPolicyID */
-    ,0x4012a0                                            /* 12 THR12_MPLS_SR_NO_EL */
-    ,0x4012d0                                            /* 13 THR13_MPLS_SR_ONE_EL */
-    ,0x401360                                            /* 14 THR14_MPLS_SR_TWO_EL */
-    ,0x401420                                            /* 15 THR15_MPLS_SR_THREE_EL */
+    ,0x400a30                                            /* 1 THR1_SRv6_End_Node */
+    ,0x400ad0                                            /* 2 THR2_SRv6_Source_Node_1_segment */
+    ,0x400b10                                            /* 3 THR3_SRv6_Source_Node_First_Pass_2_3_segments */
+    ,0x400b50                                            /* 4 THR4_SRv6_Source_Node_Second_Pass_3_segments */
+    ,0x400c00                                            /* 5 THR5_SRv6_Source_Node_Second_Pass_2_segments */
+    ,0x400cc0                                            /* 6 THR6_Cc_Erspan_TypeII_TrgDevLcMirroring_Ipv4 */
+    ,0x400e20                                            /* 7 THR7_Cc_Erspan_TypeII_TrgDevLcMirroring_Ipv6 */
+    ,0x400f90                                            /* 8 THR8_Cc_Erspan_TypeII_TrgDevDirectMirroring_Ipv4 */
+    ,0x4010d0                                            /* 9 THR9_Cc_Erspan_TypeII_TrgDevDirectMirroring_Ipv6 */
+    ,0x401220                                            /* 10 THR10_Cc_Erspan_TypeII_SrcDevMirroring */
+    ,0x401250                                            /* 11 THR11_VXLAN_GPB_SourceGroupPolicyID */
+    ,0x4012b0                                            /* 12 THR12_MPLS_SR_NO_EL */
+    ,0x4012e0                                            /* 13 THR13_MPLS_SR_ONE_EL */
+    ,0x401370                                            /* 14 THR14_MPLS_SR_TWO_EL */
+    ,0x401430                                            /* 15 THR15_MPLS_SR_THREE_EL */
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 16 */
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 17 */
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 18 */
@@ -1637,19 +1645,19 @@ const GT_U32 phaFwThreadsPcAddressFalconDefault[PRV_CPSS_DXCH_PHA_MAX_THREADS_CN
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 50 */
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 51 */
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 52 */
-    ,0x401520                                            /* 53 THR53_SRV6_End_Node_GSID_COC32 */
+    ,0x401530                                            /* 53 THR53_SRV6_End_Node_GSID_COC32 */
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 54 */
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 55 */
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 56 */
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 57 */
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 58 */
-    ,0x4015a0                                            /* 59 THR59_SLS_Test */
+    ,0x4015b0                                            /* 59 THR59_SLS_Test */
     ,0x400180                                            /* 60 THR60_DropAllTraffic */
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 61 */
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 62 */
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 63 */
-    ,0x4015f0                                            /* 64 THR64_Erspan_TypeII_SameDevMirroring_Ipv4 */
-    ,0x4016d0                                            /* 65 THR65_Erspan_TypeII_SameDevMirroring_Ipv6 */
+    ,0x401600                                            /* 64 THR64_Erspan_TypeII_SameDevMirroring_Ipv4 */
+    ,0x4016e0                                            /* 65 THR65_Erspan_TypeII_SameDevMirroring_Ipv6 */
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 66 */
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 67 */
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 68 */
@@ -1991,37 +1999,37 @@ const GT_U32 phaFwAccelCmdsFalconDefault[FW_ACCEL_CMDS_MAX_NUM_CNS] = {
    ,0x040fbe10 /* COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_srcTrgPortEntry__srcPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4, offset = 0x02b4 */
    ,0x4403b801 /* COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x1_LEN4_TO_PKT_ERSPAN_type_II_header__Ver, offset = 0x02b8 */
    ,0x0442ba52 /* COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__qos_mapped_up_LEN3_TO_PKT_ERSPAN_type_II_header__COS, offset = 0x02bc */
-   ,0x4582ba06 /* COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x6_LEN3_TO_PKT_ERSPAN_type_II_header__En, offset = 0x02c0 */
-   ,0x050d9e50 /* COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__egress_byte_count_LEN14_TO_PKT_IPv4_Header__total_length_PLUS2, offset = 0x02c4 */
-   ,0x540f9e24 /* ADD_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x24_LEN16_TO_PKT_IPv4_Header__total_length, offset = 0x02c8 */
-   ,0x0807009c /* CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN8_FROM_PKT_IPv4_Header__version, offset = 0x02cc */
-   ,0x080100a4 /* CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN2_FROM_PKT_IPv4_Header__ttl, offset = 0x02d0 */
-   ,0x080700a8 /* CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN8_FROM_PKT_IPv4_Header__sip_high, offset = 0x02d4 */
-   ,0xc00fa600 /* CSUM_STORE_IP_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_TO_PKT_IPv4_Header__header_checksum, offset = 0x02d8 */
-   ,0x000b8e00 /* COPY_BYTES_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_erspan_template__mac_da_47_32_LEN12_TO_PKT_IPv4_Header__version_MINUS14, offset = 0x02dc */
-   ,0x540d5032 /* ADD_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x32_LEN14_TO_DESC_phal2ppa__egress_byte_count, offset = 0x02e0 */
-   ,0x000f8a00 /* COPY_BYTES_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_erspan_template__mac_da_47_32_LEN16_TO_PKT_IPv4_Header__version_MINUS18, offset = 0x02e4 */
+   ,0x4581ba03 /* COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x3_LEN2_TO_PKT_ERSPAN_type_II_header__En, offset = 0x02c0 */
+   ,0x06c0ba40 /* COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__truncated_LEN1_TO_PKT_ERSPAN_type_II_header__T, offset = 0x02c4 */
+   ,0x050d9e50 /* COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__egress_byte_count_LEN14_TO_PKT_IPv4_Header__total_length_PLUS2, offset = 0x02c8 */
+   ,0x540f9e24 /* ADD_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x24_LEN16_TO_PKT_IPv4_Header__total_length, offset = 0x02cc */
+   ,0x0807009c /* CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN8_FROM_PKT_IPv4_Header__version, offset = 0x02d0 */
+   ,0x080100a4 /* CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN2_FROM_PKT_IPv4_Header__ttl, offset = 0x02d4 */
+   ,0x080700a8 /* CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN8_FROM_PKT_IPv4_Header__sip_high, offset = 0x02d8 */
+   ,0xc00fa600 /* CSUM_STORE_IP_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_TO_PKT_IPv4_Header__header_checksum, offset = 0x02dc */
+   ,0x000b8e00 /* COPY_BYTES_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_erspan_template__mac_da_47_32_LEN12_TO_PKT_IPv4_Header__version_MINUS14, offset = 0x02e0 */
+   ,0x540d5032 /* ADD_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x32_LEN14_TO_DESC_phal2ppa__egress_byte_count, offset = 0x02e4 */
+   ,0x000f8a00 /* COPY_BYTES_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_erspan_template__mac_da_47_32_LEN16_TO_PKT_IPv4_Header__version_MINUS18, offset = 0x02e8 */
    /* 540d5036 ADD_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x36_LEN14_TO_DESC_phal2ppa__egress_byte_count, offset = 0x01bc */
-   ,0x44079286 /* COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x86_LEN8_TO_PKT_ethertype_header__ethertype, offset = 0x02e8 */
-   ,0x440793dd /* COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0xDD_LEN8_TO_PKT_ethertype_header__ethertype_PLUS8, offset = 0x02ec */
-   ,0x4407bc10 /* COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x10_LEN8_TO_PKT_GRE_header__C, offset = 0x02f0 */
-   ,0x4407be88 /* COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x88_LEN8_TO_PKT_GRE_header__NP, offset = 0x02f4 */
-   ,0x4407bfbe /* COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0xBE_LEN8_TO_PKT_GRE_header__NP_PLUS8, offset = 0x02f8 */
-   ,0x0003c074 /* COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__lm_counter_LEN4_TO_PKT_GRE_header__Seq_num, offset = 0x02fc */
-   ,0x040fca12 /* COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_srcTrgPortEntry__targetPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4, offset = 0x0300 */
-   ,0x040fca10 /* COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_srcTrgPortEntry__srcPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4, offset = 0x0304 */
-   ,0x4403c401 /* COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x1_LEN4_TO_PKT_ERSPAN_type_II_header__Ver, offset = 0x0308 */
-   ,0x0442c652 /* COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__qos_mapped_up_LEN3_TO_PKT_ERSPAN_type_II_header__COS, offset = 0x030c */
-   ,0x4582c606 /* COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x6_LEN3_TO_PKT_ERSPAN_type_II_header__En, offset = 0x0310 */
-   ,0x050d9850 /* COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__egress_byte_count_LEN14_TO_PKT_IPv6_Header__payload_length_PLUS2, offset = 0x0314 */
-   ,0x540f9810 /* ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x10_LEN16_TO_PKT_IPv6_Header__payload_length, offset = 0x0318 */
-   ,0x000b8600 /* COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_erspan_template__mac_da_47_32_LEN12_TO_PKT_IPv6_Header__version_MINUS14, offset = 0x031c */
+   ,0x44079286 /* COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x86_LEN8_TO_PKT_ethertype_header__ethertype, offset = 0x02ec */
+   ,0x440793dd /* COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0xDD_LEN8_TO_PKT_ethertype_header__ethertype_PLUS8, offset = 0x02f0 */
+   ,0x4407bc10 /* COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x10_LEN8_TO_PKT_GRE_header__C, offset = 0x02f4 */
+   ,0x4407be88 /* COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x88_LEN8_TO_PKT_GRE_header__NP, offset = 0x02f8 */
+   ,0x4407bfbe /* COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0xBE_LEN8_TO_PKT_GRE_header__NP_PLUS8, offset = 0x02fc */
+   ,0x0003c074 /* COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__lm_counter_LEN4_TO_PKT_GRE_header__Seq_num, offset = 0x0300 */
+   ,0x040fca12 /* COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_srcTrgPortEntry__targetPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4, offset = 0x0304 */
+   ,0x040fca10 /* COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_srcTrgPortEntry__srcPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4, offset = 0x0308 */
+   ,0x4403c401 /* COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x1_LEN4_TO_PKT_ERSPAN_type_II_header__Ver, offset = 0x030c */
+   ,0x0442c652 /* COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__qos_mapped_up_LEN3_TO_PKT_ERSPAN_type_II_header__COS, offset = 0x0310 */
+   ,0x4581c603 /* COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x3_LEN2_TO_PKT_ERSPAN_type_II_header__En, offset = 0x0314 */
+   ,0x06c0c640 /* COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__truncated_LEN1_TO_PKT_ERSPAN_type_II_header__T, offset = 0x0318 */
+   ,0x050d9850 /* COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__egress_byte_count_LEN14_TO_PKT_IPv6_Header__payload_length_PLUS2, offset = 0x031c */
+   ,0x540f9810 /* ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x10_LEN16_TO_PKT_IPv6_Header__payload_length, offset = 0x0320 */
+   ,0x000b8600 /* COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_erspan_template__mac_da_47_32_LEN12_TO_PKT_IPv6_Header__version_MINUS14, offset = 0x0324 */
    /* 540d503a ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x3A_LEN14_TO_DESC_phal2ppa__egress_byte_count, offset = 0x01c4 */
-   ,0x000f8200 /* COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_erspan_template__mac_da_47_32_LEN16_TO_PKT_IPv6_Header__version_MINUS18, offset = 0x0320 */
+   ,0x000f8200 /* COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_erspan_template__mac_da_47_32_LEN16_TO_PKT_IPv6_Header__version_MINUS18, offset = 0x0328 */
    /* 540d503e ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x3E_LEN14_TO_DESC_phal2ppa__egress_byte_count, offset = 0x01a4 */
-   ,0x000bccc0 /* SHIFTRIGHT_12_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_LEN12_FROM_PKT_mac_header__mac_da_47_32, offset = 0x0324 */
-   ,0x00000000 /* offset = 0x0328 */
-   ,0x00000000 /* offset = 0x032c */
+   ,0x000bccc0 /* SHIFTRIGHT_12_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_LEN12_FROM_PKT_mac_header__mac_da_47_32, offset = 0x032c */
    ,0x00000000 /* offset = 0x0330 */
    ,0x00000000 /* offset = 0x0334 */
    ,0x00000000 /* offset = 0x0338 */
diff --git a/mainPpDrv/h/cpss/dxCh/dxChxGen/pha/private/prvCpssDxChPpaFwImageInfo_FalconImage01.h b/mainPpDrv/h/cpss/dxCh/dxChxGen/pha/private/prvCpssDxChPpaFwImageInfo_FalconImage01.h
index 3fb4752ba7..28a309c27c 100644
--- a/mainPpDrv/h/cpss/dxCh/dxChxGen/pha/private/prvCpssDxChPpaFwImageInfo_FalconImage01.h
+++ b/mainPpDrv/h/cpss/dxCh/dxChxGen/pha/private/prvCpssDxChPpaFwImageInfo_FalconImage01.h
@@ -18,7 +18,7 @@
  *
  *   APPLICABLE DEVICES: Falcon.
  *
- * @version 21_11_00_00
+ * @version 22_02_00_00
  *******************************************************************************
  */
 
@@ -27,12 +27,12 @@
 
 /* PHA fw version information */
 const PRV_CPSS_DXCH_PHA_FW_IMAGE_VERSION_INFO_STC fwImageVersionFalconImage01 = {
-	 0x21110000 /* | year << 24 | month << 16 | in_month << 8 | debug | */
+	 0x22020000 /* | year << 24 | month << 16 | in_month << 8 | debug | */
 	,0x01000000 /* image_id << 24 */
 	,"Image01"}; /* image_name */
 
 /* The number of words of data in prvCpssDxChPpaFwImemFalconImage01*/
-#define PRV_CPSS_DXCH_PPA_FW_IMAGE_SIZE_FALCON_IMAGE01 (2064)
+#define PRV_CPSS_DXCH_PPA_FW_IMAGE_SIZE_FALCON_IMAGE01 (2072)
 
 /* The FW code to load into the PHA unit */
 const GT_U32 prvCpssDxChPpaFwImemFalconImage01[PRV_CPSS_DXCH_PPA_FW_IMAGE_SIZE_FALCON_IMAGE01] = {
@@ -167,15 +167,15 @@ const GT_U32 prvCpssDxChPpaFwImemFalconImage01[PRV_CPSS_DXCH_PPA_FW_IMAGE_SIZE_F
     ,0x211cf090
     ,0x10d00f00
     ,0xc020211c
-    ,0x075a8010
+    ,0x07658010
     ,0x500042c0
-    ,0x3a500282
+    ,0x3a50028f
     ,0x90105000
     ,0x1100eb30
     ,0x82104366
     ,0x0031c040
     ,0x43000050
-    ,0x21432111
+    ,0x21432202
     ,0x00038011
     ,0x50000750
     ,0xa3239343
@@ -217,13 +217,13 @@ const GT_U32 prvCpssDxChPpaFwImemFalconImage01[PRV_CPSS_DXCH_PPA_FW_IMAGE_SIZE_F
     ,0x245d0526
     ,0x0045fe00
     ,0x00254c1c
-    ,0x00014402
+    ,0x00014406
     ,0x7659f244
     ,0xb455b244
     ,0x44464cc0
-    ,0xd00f0000
-    ,0x447549f7
-    ,0x2746b1b4
+    ,0x0f000000
+    ,0x7549f8d0
+    ,0x9741b444
     ,0x0f000000
     ,0x4e9450d0
     ,0x54084443
@@ -236,590 +236,602 @@ const GT_U32 prvCpssDxChPpaFwImemFalconImage01[PRV_CPSS_DXCH_PPA_FW_IMAGE_SIZE_F
     ,0x0d42cafe
     ,0x84304290
     ,0x00430740
-    ,0x07464407
-    ,0xc0204808
+    ,0x01440807
+    ,0xc0204308
     ,0x9230d00f
     ,0x463f8330
-    ,0x4744074a
-    ,0x0d444407
-    ,0x000f4b54
-    ,0x45440743
-    ,0xbe884492
-    ,0x4a8e0047
-    ,0x0f49a600
-    ,0x000b49c0
-    ,0x104800a8
-    ,0x93dd46bc
-    ,0x438a0045
-    ,0x864b5032
-    ,0x2b26fa24
-    ,0xfd2326fb
-    ,0x26fe2526
-    ,0x2826f726
-    ,0x44034904
-    ,0x2926f84a
-    ,0xff2a26f9
-    ,0x26fc2726
-    ,0x8245540f
-    ,0x04424345
-    ,0x44050d4b
-    ,0x0f470801
-    ,0x4700a426
-    ,0x52449e50
-    ,0xba064bba
-    ,0x459e2443
-    ,0x26ef2626
-    ,0x2a26f029
-    ,0x104ab801
-    ,0x8cf449be
-    ,0xf22526f4
-    ,0x26f12326
-    ,0x2426f32b
-    ,0xf52726f6
-    ,0x470003b2
-    ,0x0f444407
-    ,0x44074b54
-    ,0x43440745
+    ,0x47540d48
+    ,0x0f46000b
+    ,0x540f45c0
+    ,0x49050d4a
+    ,0xa6004a9e
+    ,0x468e0045
+    ,0x40475032
+    ,0x06c048ba
+    ,0xfb2426fc
+    ,0x00a42326
+    ,0x4400a843
+    ,0x24499e50
+    ,0x2726ff28
+    ,0xfd2626fe
+    ,0x26f92526
+    ,0x2926f82a
+    ,0x45814604
+    ,0x48440747
+    ,0xf42b26fa
+    ,0x26f72b4c
+    ,0x0f49b288
+    ,0x44074404
+    ,0x4a440749
+    ,0x42454403
+    ,0x48b0104b
+    ,0x5247ba03
+    ,0xb80146ba
+    ,0x4ab3be45
+    ,0x26f52526
+    ,0x2726f626
     ,0x742826ee
-    ,0xb3be47b4
-    ,0x49c00f46
-    ,0x98464407
-    ,0x2326e925
-    ,0x88439a08
-    ,0xa42c45b2
-    ,0x44b0104b
-    ,0x26ed2626
-    ,0x48080327
-    ,0xe82426ea
-    ,0x26eb2b26
-    ,0xe7460001
-    ,0x26e62a26
-    ,0x49f00029
-    ,0xec2abd28
-    ,0x4b000147
-    ,0xe5248cf2
-    ,0x00f82826
-    ,0x47080548
-    ,0x26e32726
-    ,0x2526e226
-    ,0x56259df2
-    ,0x00f246f9
-    ,0xba480801
-    ,0x26e12a9d
-    ,0x237cf224
-    ,0xe44beb54
-    ,0x2b26df4a
-    ,0xe02a26de
-    ,0x44802326
-    ,0x49082144
-    ,0x60014900
-    ,0x43c00f44
-    ,0x0347540f
-    ,0x08054b08
-    ,0xd8269cf8
-    ,0x26dd2426
-    ,0x2826dc29
-    ,0xaa4800a2
-    ,0x2a26d52b
-    ,0xe44a00de
-    ,0xa22c4b00
-    ,0x43dc0047
-    ,0x0507257d
-    ,0x2626da44
-    ,0xdb2326d7
-    ,0x26d62726
-    ,0x6f450001
-    ,0x26d9444d
-    ,0x283df225
-    ,0x16490001
-    ,0x49e55629
-    ,0x672826d3
-    ,0x26cf4305
-    ,0x26acf224
-    ,0x26d145d7
-    ,0x44478026
-    ,0x01434c6d
-    ,0x26d44800
-    ,0x0946540f
-    ,0x26d04b04
-    ,0x2726d225
-    ,0x5427bcf2
-    ,0x43000324
-    ,0xc62826ca
-    ,0x26ce48c2
-    ,0x44ef0123
-    ,0x26c844c0
-    ,0x2b26cd26
-    ,0x284bee4d
-    ,0x26c646c4
-    ,0xfc484682
-    ,0xbdc02abd
-    ,0x43e47429
-    ,0x0f256dd8
-    ,0x2926cb23
-    ,0x052a26cc
-    ,0x26c948cb
-    ,0x27bdd827
-    ,0x540f4308
-    ,0x2426bd45
-    ,0xc744ae00
-    ,0x26c52526
-    ,0xc147000f
-    ,0x000f2826
-    ,0x4947014a
-    ,0x2146001f
-    ,0x4698c043
-    ,0x0049cf02
-    ,0xb8e04ad0
-    ,0x48478047
-    ,0x26bf2926
-    ,0x2326bc26
-    ,0x1c2526be
-    ,0x00ae45bc
-    ,0x012826b8
-    ,0x26c048db
-    ,0x4b000327
-    ,0xc22a26c3
-    ,0x2426b42a
-    ,0x542b26c4
-    ,0x8dec4be0
-    ,0x47000324
-    ,0x26b72626
-    ,0x47d07427
-    ,0xf826bdec
-    ,0x5dea293c
-    ,0x032a26ba
-    ,0x00174500
-    ,0x43468248
-    ,0xb62926b9
-    ,0x489ca443
-    ,0xa445c80c
-    ,0x001f449c
-    ,0x4400074a
-    ,0x0013479c
-    ,0x4b080147
-    ,0x1b46000f
-    ,0xc3054900
-    ,0xb32826af
-    ,0x9ca42326
+    ,0x00034bb4
+    ,0xf3490805
+    ,0xbe102426
+    ,0x2926ef44
+    ,0xf42a26f0
+    ,0x4800012b
+    ,0x76474407
+    ,0x04764604
+    ,0x4a080345
+    ,0x56479a08
+    ,0xc00f48f9
+    ,0x2326f24b
+    ,0x26f1b243
+    ,0x2926e62a
+    ,0xf84900f2
+    ,0xed714a00
+    ,0x46fb4845
+    ,0x540f2826
+    ,0x2726ed44
+    ,0xeb2626ec
+    ,0x26e72526
+    ,0x2c2426ea
+    ,0x080144a4
+    ,0x2b26e848
+    ,0xe54bf000
+    ,0x259cf225
+    ,0xa226acf2
+    ,0x4d284800
+    ,0x27bdf223
+    ,0x26dc2326
+    ,0x49082128
+    ,0xe34ac00f
+    ,0x26e22626
+    ,0x71430476
+    ,0x540f4bd9
+    ,0x4b047647
+    ,0xe92726e4
+    ,0x2a26de29
+    ,0xaa4aaa00
+    ,0x00014900
+    ,0x48c00f44
+    ,0x26df47a2
+    ,0x43e7482b
+    ,0x5448ce00
+    ,0x26dd44eb
+    ,0x03257d16
+    ,0x26db4b08
+    ,0x2626da27
+    ,0x2c269cf8
+    ,0x44448048
+    ,0xe1490001
+    ,0x26d32426
+    ,0x2326e028
+    ,0x26d64500
+    ,0x4b00e42b
+    ,0x322526d9
+    ,0x000123ad
+    ,0xd749e556
+    ,0x60012326
+    ,0x48c2c644
+    ,0x014a0805
+    ,0x27bcf24a
+    ,0xd82826ca
+    ,0x05672426
+    ,0x2926d443
+    ,0x26d24b04
+    ,0x2a26d527
+    ,0x542526d0
+    ,0x00de45d7
+    ,0x6d2326ce
+    ,0x0507434c
+    ,0x26acf244
+    ,0x09484682
+    ,0x2b26cd28
+    ,0x054bee4d
+    ,0x26d148cb
+    ,0x444d6f26
+    ,0x26cf4300
+    ,0x27bdd824
+    ,0x0f29bdc0
+    ,0x26c14654
+    ,0xc92926cb
+    ,0xbdfc2726
+    ,0x43e4742a
+    ,0x03444780
+    ,0x47000f2a
+    ,0x01256dd8
+    ,0x26c84947
+    ,0x46c42826
+    ,0x08214a00
+    ,0x2426c643
+    ,0xc544ef01
+    ,0x26cc2326
+    ,0xec2826b8
+    ,0xcf02284d
+    ,0x2526c749
+    ,0x0f47b8e0
+    ,0x2726c04a
+    ,0x0346001f
+    ,0x540f4b00
+    ,0x2926c245
+    ,0xc00f4700
+    ,0x2a26c344
+    ,0xae2326bc
+    ,0xd0004300
+    ,0xbe2b26c4
+    ,0xbc1c2526
+    ,0x4be05445
+    ,0x034698c0
+    ,0x2426bd27
+    ,0x7444ae00
+    ,0x26bf47d0
+    ,0x293cf826
+    ,0x5dea4346
+    ,0x4b08012a
+    ,0x032926b9
+    ,0x26b74600
+    ,0x1b46cc54
+    ,0x00a64900
+    ,0x2a26ba4b
+    ,0x8243c305
+    ,0x479ca445
+    ,0xec2426b4
+    ,0x0013248d
+    ,0x45000347
+    ,0x001f2326
+    ,0x2b26bb4a
+    ,0xb6499ca4
+    ,0xc80c2626
+    ,0xa44b001b
+    ,0x9ca44a9c
+    ,0x43000348
+    ,0xb3480017
+    ,0x44000747
+    ,0xb52726ae
+    ,0x000f2526
+    ,0x2926b046
+    ,0x00174ba4
     ,0x469ca449
-    ,0xa44b00a6
-    ,0x44000345
-    ,0xa42a26b1
-    ,0x26ab4a9c
-    ,0x2526b524
-    ,0x26ad2b26
-    ,0x2926b026
-    ,0x13430003
-    ,0x000b4800
-    ,0x0b490017
-    ,0x000f4600
-    ,0x4b001b47
-    ,0xbb2726ae
-    ,0x2426a225
-    ,0xa444a4ac
-    ,0xa4ac459c
-    ,0x439ca448
-    ,0xa4ac47a4
-    ,0x49a4ac46
-    ,0xa62326aa
-    ,0x26ac2826
-    ,0xa42abcec
-    ,0x26a52626
-    ,0x2b26b227
-    ,0xac4ba4c0
-    ,0x244d0c24
-    ,0x03450007
-    ,0x00034800
-    ,0x2926a743
-    ,0x00032a26
-    ,0x43d0cc49
-    ,0xac48c0bc
-    ,0x269945a4
-    ,0xb44a0003
-    ,0xbcb846b8
-    ,0x47000347
-    ,0xa8460003
-    ,0x2526a344
-    ,0xa128269d
+    ,0xa445000b
+    ,0x000f449c
+    ,0x132326aa
+    ,0x9ca44800
+    ,0x2826af43
+    ,0xc02a26b1
+    ,0x459ca424
+    ,0xac2626ad
+    ,0x26b249a4
+    ,0x4a001b2b
+    ,0x26ac4600
+    ,0x2726a525
+    ,0xac440003
+    ,0x26ab47a4
+    ,0x0348a4ac
+    ,0xa4ac4300
+    ,0x4b001f4a
+    ,0x0b2926a7
+    ,0x49000346
+    ,0xa84ba4ac
+    ,0xd0cc2a26
+    ,0x2826a643
+    ,0x26a247bc
+    ,0x44a4ac24
+    ,0x07470003
+    ,0xa4ac4500
+    ,0xa94a0003
+    ,0xc4c02b26
+    ,0x2626a449
+    ,0xb845a4ac
+    ,0x4ac8c44b
+    ,0x0348c0bc
+    ,0x00034300
+    ,0x2326a148
+    ,0x269c244d
+    ,0x2526a327
+    ,0x9e460003
+    ,0x00032926
+    ,0xb4490003
+    ,0x000346b8
+    ,0x24269945
+    ,0x0c474407
+    ,0x481c0723
+    ,0x9d43aca8
+    ,0x269f2826
+    ,0x4bccc82a
+    ,0x269b45b4
+    ,0x49a09c26
+    ,0x032b26a0
+    ,0x26984a00
+    ,0x0025269a
+    ,0x269344d2
+    ,0x477b3027
+    ,0xb0444780
+    ,0x43450948
+    ,0x034aa4a0
+    ,0x26954b00
+    ,0x46440029
+    ,0xa8a44900
+    ,0x2a26964b
+    ,0x9443d107
+    ,0x7bb22826
+    ,0x13440007
+    ,0x26904700
+    ,0x45044b24
+    ,0x1b46d001
+    ,0x2b26974a
+    ,0x9249acb4
+    ,0xd15a2626
+    ,0x47acb445
+    ,0xacb44aac
+    ,0x43000348
+    ,0x8f480017
     ,0x001f2326
-    ,0x49c4c04b
-    ,0x00034ba4
-    ,0x481c0743
-    ,0x0344d200
-    ,0x47804500
-    ,0x9c464400
-    ,0x269b2726
-    ,0x4ac8c426
-    ,0xac29269e
-    ,0x43aca848
-    ,0x032b26a9
-    ,0x269f4900
-    ,0x4744072a
-    ,0x269a2826
-    ,0x44000725
-    ,0x9045b4b0
-    ,0x7bb22426
-    ,0x03477b30
-    ,0xa09c4a00
-    ,0x4b000349
-    ,0x94232698
-    ,0x2926954b
-    ,0x934aa4a0
-    ,0x26922726
-    ,0x46d00126
-    ,0xacb42426
-    ,0x45044b44
-    ,0x09480017
-    ,0xccc84345
-    ,0xa049001b
-    ,0xd1072b26
-    ,0x48acb443
-    ,0x8745d15a
-    ,0x47acb44a
-    ,0x0f46acb4
-    ,0x00134600
-    ,0x2a269647
-    ,0x268b2526
-    ,0x23268f28
-    ,0xb44b0003
-    ,0x001f49ac
-    ,0xa429268c
-    ,0x00034ba8
-    ,0x45000b43
-    ,0x9148000f
-    ,0x46000b2a
-    ,0x8947540d
-    ,0x268a2626
-    ,0x4aacb427
-    ,0xacb44886
-    ,0x43acb445
-    ,0xd22b2697
-    ,0x268d4907
-    ,0x0949d403
-    ,0x26864b44
-    ,0x25268823
-    ,0x00282682
-    ,0x2626804a
-    ,0x3a272681
-    ,0x8a004750
-    ,0x4a450046
-    ,0x050d2b26
-    ,0x4bd00049
-    ,0xec292683
-    ,0xd501247c
+    ,0x9127268a
+    ,0x000f2526
+    ,0x29268c46
+    ,0xb44b4409
+    ,0x46acb449
+    ,0x0d45000b
+    ,0x26874754
+    ,0x44acb424
+    ,0xacb42326
+    ,0x28268b43
+    ,0x002a268d
+    ,0x07d24bd0
+    ,0x03262689
+    ,0x268e49d4
+    ,0x4a45002b
+    ,0x8648000f
+    ,0x46000b24
+    ,0x81252688
+    ,0x503a2726
+    ,0x45acb447
+    ,0x86002826
+    ,0x4ad50148
+    ,0x834b4780
+    ,0x7cec2926
+    ,0x7e237ce8
+    ,0x050d2426
+    ,0x4bd20149
+    ,0x822a2684
+    ,0x499c502b
+    ,0x7d4406d0
+    ,0x26802326
+    ,0x468a0026
+    ,0x267a448f
+    ,0x2b8d1429
     ,0xfc25267f
-    ,0x7ce8257c
-    ,0x2a268423
-    ,0x8e24267e
-    ,0x499c5029
-    ,0xd04b4780
-    ,0x6d144406
-    ,0x23267d2a
-    ,0x04442a26
-    ,0x46440743
-    ,0x01448f01
-    ,0x267a4bd2
-    ,0x0e469686
-    ,0x9204438f
-    ,0x4a06b045
-    ,0x7b450521
-    ,0x49940744
-    ,0xa02b8d14
-    ,0x26854906
-    ,0x2426752b
-    ,0x940e4545
-    ,0x2526764a
-    ,0x77232674
-    ,0x04022626
-    ,0x0e292671
-    ,0x064b4490
-    ,0x4307b046
-    ,0x802a2672
-    ,0x000b2426
+    ,0x2685257c
+    ,0x07242675
+    ,0x8f0e4644
+    ,0x43044443
+    ,0x012a6d14
+    ,0x05214b04
+    ,0x2b267c45
+    ,0x06a0b478
+    ,0x2a267b49
+    ,0xb0440402
+    ,0x94074a06
     ,0x47440749
-    ,0x784b0434
-    ,0x2b267cb4
-    ,0x79459001
-    ,0x44012826
-    ,0x438f0e4a
-    ,0x6c46900e
-    ,0x26266e44
-    ,0x0223266b
-    ,0x05d44a8e
-    ,0x25266d48
+    ,0x34459204
+    ,0x4805d426
+    ,0x794307b0
+    ,0x26742826
+    ,0x46968623
+    ,0x97dd2526
+    ,0x29267147
+    ,0x0e4a940e
+    ,0x26774490
+    ,0x7849000b
     ,0x26732726
-    ,0x4b8f072b
-    ,0x004797dd
-    ,0x540f4982
-    ,0x0d2a2669
-    ,0x08014305
-    ,0x44ae1446
-    ,0x78292668
-    ,0x4600b424
-    ,0x7043ae50
-    ,0x05b42826
-    ,0x488e054a
-    ,0x8e01478e
-    ,0x4b45004b
-    ,0x16470663
-    ,0x26634906
-    ,0x6248c00f
-    ,0x26652326
-    ,0x44053426
-    ,0x0649ce0f
-    ,0x4604c144
-    ,0x0043057d
-    ,0x266048b6
-    ,0x4acf002a
-    ,0x08074b54
-    ,0x2b266a47
-    ,0x5f27266f
-    ,0xce002926
-    ,0x09282667
-    ,0xcf0643ce
-    ,0x24265a46
-    ,0x0d494582
-    ,0x26265c44
-    ,0x08232659
-    ,0x46014acd
-    ,0x4a07f248
-    ,0x26662b26
-    ,0x4700b827
-    ,0x064b502a
-    ,0x440749ca
-    ,0xf4434407
-    ,0x0003257c
-    ,0x44c28846
-    ,0x61292656
-    ,0x43c01025
-    ,0x5e4a0521
-    ,0xcd022826
-    ,0x2a265748
-    ,0xa3014405
-    ,0x4906d049
-    ,0x74242651
-    ,0x266446c4
-    ,0x2326504a
-    ,0x30470584
-    ,0xb08b4504
-    ,0xd4262653
-    ,0xcf092b26
-    ,0x47cf0145
-    ,0x632a264e
-    ,0xa6044306
-    ,0x0249064b
-    ,0x264d4804
+    ,0x4545802b
+    ,0x764b8f07
+    ,0x438f0e23
+    ,0x4b488e05
+    ,0x266c4606
+    ,0x2a267224
+    ,0x44014982
+    ,0x44540f4a
+    ,0x7046900e
+    ,0x266b2826
+    ,0x6d4b8e01
+    ,0x90012526
+    ,0x4b450045
+    ,0x00470663
+    ,0x26266e48
+    ,0x0244ae14
+    ,0x26684a8e
+    ,0x478e0629
+    ,0x08012426
+    ,0x48b60046
+    ,0x0d43ae50
+    ,0xc00f4305
+    ,0x6a470807
+    ,0x266f2b26
+    ,0x49061627
+    ,0x632a2669
+    ,0x4600b428
+    ,0xb4440534
+    ,0xce0f4a05
+    ,0x4b540d49
+    ,0x266544ce
+    ,0x43057d26
+    ,0x62484601
+    ,0x26672326
+    ,0xb8272666
+    ,0x502a4700
+    ,0x29265f4b
+    ,0x004acf00
+    ,0x257cf446
+    ,0x6024265a
+    ,0x45822a26
+    ,0x2b266149
+    ,0x265946cf
+    ,0x28265e23
+    ,0x0948cd02
+    ,0x04c143ce
+    ,0x06292656
+    ,0x07f249ca
+    ,0x4444074a
+    ,0x06252664
+    ,0x265c4344
+    ,0x30b08b26
+    ,0xc2884504
+    ,0x4acd0844
+    ,0x032b2658
+    ,0xc0104600
+    ,0x47cf0143
+    ,0x07470584
+    ,0x4906d04a
+    ,0x512a2657
+    ,0x04022426
+    ,0x45cf0948
+    ,0x265b4b44
+    ,0x48ca0225
+    ,0x014405d4
+    ,0x052149a3
+    ,0x63474403
+    ,0x265d4306
+    ,0x23265027
+    ,0x0746c474
     ,0x44a20529
-    ,0x584606b0
-    ,0x25265b27
-    ,0x0e4b4407
-    ,0x264846a8
-    ,0x48ca0224
-    ,0x00cc4744
-    ,0x2326474a
-    ,0x0f43a206
-    ,0x265d4a00
-    ,0x01282655
-    ,0x264a4444
-    ,0x4baa0826
-    ,0x03454407
-    ,0x4645802b
-    ,0x4444a202
-    ,0x26444804
+    ,0x07282655
+    ,0xaa084544
+    ,0x2626534b
+    ,0x26484804
+    ,0x2a264e24
+    ,0x0449064b
+    ,0x264d4aa6
+    ,0x0143a206
+    ,0x06b047c8
+    ,0x2b264f46
+    ,0x4445c3be
+    ,0x25265248
+    ,0x0e4b000b
+    ,0x265446a8
+    ,0x23264727
+    ,0x26444a00
     ,0x49a40e29
-    ,0x000b4a00
-    ,0x2a264543
-    ,0xbe47c801
-    ,0x264f45c3
-    ,0x0b46a401
-    ,0x26524b00
-    ,0x27265425
-    ,0x0f439600
+    ,0x014a000f
+    ,0xa30e4444
+    ,0xc026264a
+    ,0x06a04bd0
+    ,0x28264c45
+    ,0xcc44a202
+    ,0x4645802b
+    ,0x0047a307
+    ,0x000b4396
+    ,0x47043443
+    ,0x26454400
+    ,0x24263f2a
+    ,0x07480402
+    ,0x264645a8
+    ,0x0746a401
+    ,0x26494b44
+    ,0x48a40e25
+    ,0x1f4a000f
     ,0x2626414b
-    ,0x1f28264c
-    ,0xa30e4400
-    ,0x24263f48
-    ,0xf8a62a26
-    ,0x23263e4a
-    ,0xa0470434
-    ,0xd0c04506
-    ,0x072b2646
-    ,0xadfc45a8
-    ,0x47a30729
-    ,0x3c43000b
-    ,0x48a40e46
-    ,0xfc242636
-    ,0x040244e4
-    ,0x46001f48
-    ,0x264b43d8
-    ,0x29263b27
-    ,0x07252649
-    ,0xd0e84b44
-    ,0x07454500
-    ,0x07b04944
-    ,0x4a001f47
-    ,0xf0232635
-    ,0x48540f2b
-    ,0x43464407
-    ,0x26382826
-    ,0x4b7be226
-    ,0x98b02a26
-    ,0x47a30e4a
-    ,0x01497bf2
-    ,0x263d45a2
-    ,0x1f48cc28
-    ,0x26404b00
-    ,0x29263225
-    ,0x33272642
-    ,0x45000f49
-    ,0x3a4bb8d0
-    ,0x262f2826
-    ,0x46ce2b26
-    ,0xd0f845d8
-    ,0x234dfc49
-    ,0x1024262d
-    ,0x001f248c
-    ,0x03252637
-    ,0x26394b00
+    ,0xb043000b
+    ,0x263e4707
+    ,0x27264b23
+    ,0xe4fc2426
+    ,0x4af8a644
+    ,0x00282643
+    ,0x7be24545
+    ,0x3d29adfc
+    ,0xa2012b26
+    ,0x48540f45
+    ,0x362a263c
+    ,0x23263546
+    ,0x0e272642
+    ,0xd8f047a3
+    ,0x46001f43
+    ,0xcc282826
+    ,0x25264048
+    ,0x3b4b001f
+    ,0xd0e82926
+    ,0x07262638
+    ,0xb8d04944
+    ,0x4a001f4b
+    ,0x3a45000f
+    ,0x497bf22b
+    ,0x07234dfc
+    ,0x262d4644
+    ,0x248c1024
+    ,0x26392526
     ,0x278dfc27
-    ,0xf02b2634
-    ,0x48001f43
-    ,0x0f44001f
-    ,0x262c4900
-    ,0x29262923
-    ,0xbdfc4600
-    ,0x2b262b2a
-    ,0xfc4bf492
-    ,0x4500256d
-    ,0xb049b600
-    ,0xf8964488
-    ,0x25262e48
-    ,0x0b43a400
-    ,0x278dfc23
-    ,0x3145001f
+    ,0xb045d8f0
+    ,0x26344a98
+    ,0x2c46ce2b
+    ,0x26322326
+    ,0x4b000329
+    ,0x372a2633
+    ,0x49001f4b
+    ,0x1f434500
+    ,0x001f4800
+    ,0x26262f44
+    ,0xa400256d
+    ,0x2abdfc43
+    ,0x2b49d0f8
+    ,0xf4922b26
+    ,0x3146000b
     ,0x26242826
-    ,0x29262024
-    ,0x548f2626
-    ,0x4b44074a
-    ,0xf02a262a
-    ,0x262346c8
-    ,0x2547001f
-    ,0xa8d02526
-    ,0x27263045
-    ,0x26434407
-    ,0x4b7b102b
-    ,0x1f4aa901
-    ,0x000f4600
-    ,0x438e2b48
-    ,0xf023261a
-    ,0xb0c048c8
-    ,0x21b8b446
-    ,0x26222a26
-    ,0x26261d24
-    ,0x27282628
-    ,0x001f2726
-    ,0x47d4fc43
-    ,0x00074600
-    ,0x49440744
-    ,0xda2a2618
-    ,0x261b2a9d
-    ,0xa0232611
-    ,0x00054388
-    ,0x48000f47
-    ,0x014b540f
-    ,0x46b08e44
-    ,0xb64b8c18
-    ,0x3d0848d6
-    ,0x47d0e025
-    ,0x26172426
-    ,0x4abfbe29
-    ,0x004a4407
-    ,0xa8c049b4
-    ,0x1c27261e
+    ,0x4488b024
+    ,0xfc48f896
+    ,0x29262945
+    ,0x2a25262e
+    ,0x8dfc2a26
+    ,0x23262327
+    ,0x26304344
+    ,0x4b440727
+    ,0x0f4a548f
+    ,0x001f4900
+    ,0x0f47001f
+    ,0x8e2b4800
+    ,0x26262643
+    ,0x0746c8f0
+    ,0x25262529
+    ,0x0045a8d0
+    ,0xa90149b6
+    ,0x4b7b104a
+    ,0xb448c8f0
+    ,0x47d4fcb8
+    ,0x212b2622
+    ,0x26202a26
+    ,0x28262824
+    ,0x1f46b0c0
+    ,0x001f4300
+    ,0x23261a46
+    ,0x000f4b54
+    ,0x47000548
+    ,0x27440007
+    ,0x261b2726
+    ,0x112a2618
+    ,0x88a02326
+    ,0x2a9dda43
+    ,0x0f26261d
+    ,0x48d6b647
+    ,0x18253d08
+    ,0x44074b8c
+    ,0x46000149
     ,0x261f2526
-    ,0x2b261928
-    ,0x12262614
-    ,0x4b000f46
-    ,0x0f4846ca
-    ,0x44074500
-    ,0x232a0047
-    ,0xc60646c4
-    ,0x49c07444
-    ,0x82490003
-    ,0x44034445
-    ,0x02272615
-    ,0xb89047b1
-    ,0x48b20145
-    ,0x014b98b0
-    ,0x4b540f45
-    ,0x1048040f
-    ,0x26162b26
-    ,0x25261328
-    ,0x8cfe4205
-    ,0x48ca1227
-    ,0x524b9810
-    ,0x044245c6
-    ,0x84253685
-    ,0x36832636
-    ,0x2b368827
-    ,0x0d429850
-    ,0x2936814a
-    ,0x822a3680
+    ,0x27261e28
+    ,0xc0242612
+    ,0xd0e044a8
+    ,0x0f4a8a00
+    ,0xb08e4a00
+    ,0x49b40046
+    ,0x1c2b2619
+    ,0x45000f48
+    ,0x174b000f
+    ,0x26142926
+    ,0x232a0026
+    ,0xb10248b2
+    ,0x44c07447
+    ,0x07440003
+    ,0x46ca4744
+    ,0x0746be88
+    ,0x44074644
+    ,0x4b98b049
+    ,0x0145b890
+    ,0x27261548
+    ,0x13282616
+    ,0x26102526
+    ,0x4992862b
+    ,0xbc104893
+    ,0x45bfbe47
+    ,0x07454407
+    ,0x44074744
+    ,0x82273683
     ,0x36872836
-    ,0x24368622
-    ,0x04674504
-    ,0x42042f44
-    ,0x0f48000b
-    ,0x000b4900
-    ,0x71429a4c
-    ,0x980f4499
-    ,0x46970545
-    ,0x07464682
-    ,0x29368a27
-    ,0x002a3689
-    ,0x82004a86
-    ,0x48ccc049
-    ,0x368e2636
-    ,0x24368f25
-    ,0x8b223690
-    ,0xad0e2836
-    ,0x80444580
-    ,0x04164547
-    ,0x2b369146
-    ,0x8d2bad1e
-    ,0x47000b49
-    ,0x8c49040f
-    ,0x04762736
-    ,0x42478248
-    ,0xbf0146bf
-    ,0x44480145
-    ,0x71424500
-    ,0xac7648b1
-    ,0x99283694
-    ,0x36982236
-    ,0x25369724
-    ,0x6f263696
-    ,0x4aaa742a
-    ,0x00273695
-    ,0x052d47b4
-    ,0x2936934a
-    ,0x6002485f
-    ,0x49450249
-    ,0x07484603
-    ,0x36924a47
-    ,0x9b0c0200
-    ,0x369a2936
-    ,0x2a369c28
-    ,0x044a6122
-    ,0x42888844
+    ,0x42ca1222
+    ,0xdd42040f
+    ,0x2436862a
+    ,0xfe253685
+    ,0x36842b2c
+    ,0x29368126
+    ,0x36884605
+    ,0x45540f2b
+    ,0x0b4a4403
+    ,0x36804400
+    ,0x0347c640
+    ,0x458148c6
+    ,0x4706c048
+    ,0x0d490442
+    ,0x4598104a
+    ,0x0b42000f
+    ,0x98504b00
+    ,0x49c65246
+    ,0x368e4282
+    ,0x2a368925
+    ,0x0024368f
+    ,0xc4014486
+    ,0x8c28368b
+    ,0x368a2736
+    ,0x26368d29
+    ,0x004bccc0
+    ,0x2b369122
+    ,0x8246042f
+    ,0x04074946
+    ,0x47046748
+    ,0x4d0e469a
+    ,0x254d1e2a
+    ,0x8242040f
+    ,0x36904b47
+    ,0x95283694
+    ,0x99712736
+    ,0x48980f47
+    ,0x4c499705
+    ,0x42ac7622
+    ,0x92253697
+    ,0x36962a36
+    ,0x29369326
+    ,0x47804800
+    ,0x46478049
+    ,0x074a4580
+    ,0x36994547
+    ,0x02424603
+    ,0x36984445
+    ,0x44aa7424
+    ,0x0b44052d
+    ,0x4a480149
+    ,0x224b4500
+    ,0xb1004561
+    ,0x48b40046
+    ,0x36a02636
+    ,0x2b369d25
+    ,0x9b2a369c
+    ,0xbf012936
+    ,0x9f22369e
+    ,0x60022436
+    ,0x425f0444
+    ,0xa128369a
     ,0x00428888
     ,0xc1304400
-    ,0xd00f0000
-    ,0x00000000
+    ,0x0f000000
+    ,0x0c0200d0
     ,0x00000000
     ,0x9230d00f
     ,0x07809340
+    ,0x42888844
     ,0x00004821
     ,0x4afff848
     ,0x9f490003
@@ -1549,7 +1561,7 @@ const GT_U32 prvCpssDxChPpaFwImemFalconImage01[PRV_CPSS_DXCH_PPA_FW_IMAGE_SIZE_F
     ,0x431dcd43
     ,0x94200295
     ,0x60480000
-    ,0x50020ac0
+    ,0x500209c0
     ,0x0f434240
     ,0xdc004300
     ,0x0c770a02
@@ -1591,7 +1603,7 @@ const GT_U32 prvCpssDxChPpaFwImemFalconImage01[PRV_CPSS_DXCH_PPA_FW_IMAGE_SIZE_F
     ,0x0c482200
     ,0xc7110c77
     ,0x4800000b
-    ,0x01e5c060
+    ,0x01e4c060
     ,0x2656800c
     ,0x0b27861a
     ,0x770a0277
@@ -1853,41 +1865,41 @@ const GT_U32 prvCpssDxChPpaFwImemFalconImage01[PRV_CPSS_DXCH_PPA_FW_IMAGE_SIZE_F
     ,0x0c020022
     ,0x2c232680
     ,0x46502346
-    ,0x242dd423
-    ,0x00423e00
-    ,0xc0304200
-    ,0x56234655
-    ,0x46542346
-    ,0x23465323
-    ,0x52234651
-    ,0x23465b23
-    ,0x59234658
-    ,0x465a2346
-    ,0x23465723
-    ,0x02002222
-    ,0x2326800c
-    ,0x5c23465e
-    ,0x465d2346
-    ,0x00000000
+    ,0x224d2c23
+    ,0x00441200
+    ,0xc0304400
+    ,0x54234660
+    ,0x46532346
+    ,0x23465123
+    ,0x5f234652
+    ,0x23465923
+    ,0x5723465a
+    ,0x46552346
+    ,0x23465623
+    ,0x465e2326
+    ,0x23465c23
+    ,0x5b23465d
+    ,0x46582346
     ,0x00000000
-    ,0xd00f0000
-    ,0x810a2000
-    ,0x465f2346
-    ,0x242dd423
-    ,0x00423e00
-    ,0xc0304200
-    ,0x65234664
-    ,0x46632346
+    ,0x2000d00f
+    ,0x2222810a
+    ,0x800c0200
+    ,0x46612346
+    ,0x224d2c23
+    ,0x00441200
+    ,0xc0304400
+    ,0x6523466c
+    ,0x46642346
     ,0x23466223
-    ,0x61234660
-    ,0x2326800c
-    ,0x67234658
-    ,0x46682346
-    ,0x23466623
-    ,0x00000000
-    ,0xd00f0000
-    ,0x810a2000
-    ,0x02002222
+    ,0x6b234663
+    ,0x23466923
+    ,0x6823466a
+    ,0x46662346
+    ,0x23466723
+    ,0x2000d00f
+    ,0x2222810a
+    ,0x800c0200
+    ,0x46582326
     ,0x00441200
     ,0x00004bfe
     ,0x4400004b
@@ -1916,34 +1928,34 @@ const GT_U32 prvCpssDxChPpaFwImemFalconImage01[PRV_CPSS_DXCH_PPA_FW_IMAGE_SIZE_F
     ,0x08084922
     ,0x04080819
     ,0xaa1100a0
-    ,0x1325466d
+    ,0x13254671
     ,0x7711277d
     ,0x02024b0e
-    ,0x6a264669
-    ,0x46732546
-    ,0x26762e25
-    ,0x466b989e
-    ,0x25466c25
-    ,0x77254676
-    ,0x46742546
+    ,0x6e26466d
+    ,0x46782546
+    ,0x26763225
+    ,0x466f989e
     ,0x25467025
-    ,0x72254671
-    ,0x29343b25
-    ,0xcc2cc392
-    ,0xb6254678
-    ,0x254675c3
+    ,0x7925467c
+    ,0x46742546
+    ,0x25467525
+    ,0x77254676
+    ,0x2cc39229
+    ,0x25467dcc
+    ,0x467ac3b6
+    ,0x25467b25
+    ,0x00002b34
+    ,0x60000e4a
+    ,0x7e25467f
     ,0x343b2546
-    ,0x4a00002b
-    ,0x7a60000e
-    ,0x46792546
-    ,0x00252680
-    ,0x0000423e
-    ,0x25a6ff42
-    ,0x7b4a0e00
-    ,0x00000000
-    ,0x00d00f00
-    ,0x22810a20
-    ,0x0c020022
+    ,0x00423e00
+    ,0xa6ff4200
+    ,0x4a0e0025
+    ,0x3b254680
+    ,0xd00f0000
+    ,0x810a2000
+    ,0x02002222
+    ,0x2526800c
     ,0x00441200
     ,0x00004bfe
     ,0x4400004b
@@ -1976,150 +1988,146 @@ const GT_U32 prvCpssDxChPpaFwImemFalconImage01[PRV_CPSS_DXCH_PPA_FW_IMAGE_SIZE_F
     ,0x0faa1100
     ,0x9e28828a
     ,0x2b82899b
-    ,0x4b26467e
-    ,0x468b0202
+    ,0x4b264683
+    ,0x46910202
     ,0x22228325
     ,0x19080849
-    ,0x25468125
+    ,0x25468625
     ,0x11277d14
-    ,0x467c0e77
-    ,0x25467d25
-    ,0x87254686
-    ,0x96722546
-    ,0x7f289611
-    ,0x46802546
-    ,0x9a29343b
-    ,0x88cc2bc3
-    ,0x46842546
-    ,0x25468525
-    ,0x004a0e00
-    ,0xc3be4a00
-    ,0x41600010
-    ,0x25468995
-    ,0x423e0025
-    ,0xf9420000
-    ,0x468a25a6
-    ,0x2b343b25
-    ,0x0f000000
-    ,0x0a2000d0
-    ,0x00222281
-    ,0x26800c02
+    ,0x46810e77
+    ,0x25468225
+    ,0x8d25468c
+    ,0x96772546
+    ,0x84289611
+    ,0x46852546
+    ,0xcc2bc39a
+    ,0x8925468e
+    ,0x468a2546
+    ,0x25468b25
+    ,0xbe4a0000
+    ,0x600010c3
+    ,0x468f9541
+    ,0x29343b25
+    ,0x42000042
+    ,0x9025a6f9
+    ,0x343b2546
+    ,0x4a0e002b
+    ,0x2000d00f
+    ,0x2222810a
+    ,0x800c0200
+    ,0x3e002526
     ,0x21008857
-    ,0x43020045
+    ,0x43060045
     ,0x00430001
     ,0xc0904500
-    ,0x220a2a22
+    ,0x220a8a21
     ,0x02e24203
     ,0xf1085840
     ,0x825a275d
-    ,0x29768f29
-    ,0xaa297690
-    ,0x2b5d01b1
-    ,0xb129768c
-    ,0x910c8811
-    ,0x9ab82976
-    ,0x8d2a26b1
-    ,0x768e2976
-    ,0x431dcd43
-    ,0x95288295
-    ,0x82942482
-    ,0x288d2e26
-    ,0x04064188
-    ,0xd480c022
-    ,0x04763301
-    ,0x64ff7481
-    ,0x01b04424
-    ,0xe8517861
-    ,0x4a3e0008
-    ,0x5d4a0000
-    ,0x7695c2bc
-    ,0x22769429
-    ,0x92297693
-    ,0x55942976
-    ,0x29769a29
-    ,0x98297699
-    ,0x76972976
+    ,0x76952976
     ,0x29769629
-    ,0x02002aa2
-    ,0x29a6800c
-    ,0x9c2b543b
-    ,0x769b2976
-    ,0x1053f87c
+    ,0x5d01b1aa
+    ,0x2976922b
+    ,0x8811288d
+    ,0x2976970c
+    ,0x9a219ab8
+    ,0x94297693
+    ,0xcd4364ff
+    ,0x8295431d
+    ,0x24829528
+    ,0x2e268294
+    ,0x41885d4a
+    ,0xc0220406
+    ,0x3301d480
+    ,0x74810476
+    ,0x44245594
+    ,0x786101b0
+    ,0x0008e851
+    ,0x00004a3e
+    ,0xc2bc2976
+    ,0xa129769a
+    ,0x76992276
+    ,0x29769829
+    ,0x9f2976a0
+    ,0x769e2976
+    ,0x29769d29
+    ,0x9b29769c
+    ,0x0aa000d0
+    ,0x002aa281
+    ,0xa6800c02
+    ,0x2b543b29
+    ,0x53fb3453
+    ,0x1053f871
     ,0x211cf090
-    ,0xd00f0000
-    ,0x810aa000
-    ,0x53fba453
-    ,0x6a53fb79
-    ,0xfb5b53fb
-    ,0x53fb3353
-    ,0xfd2953fd
-    ,0x53fcd553
-    ,0x2b53fc86
-    ,0xfbd453fc
-    ,0xa953fde8
-    ,0xfd7a53fd
-    ,0x53fd5653
-    ,0x3453fd4b
-    ,0x53fe7c53
-    ,0x4e53fe6d
-    ,0xfe3753fe
-    ,0x53fe0f53
-    ,0xff2953ff
-    ,0x53ff2153
-    ,0x0353f872
-    ,0xfec053ff
+    ,0x0f000000
+    ,0xfbd553fc
+    ,0x53fba553
+    ,0x6b53fb7a
+    ,0xfb5c53fb
+    ,0x3553fd4c
+    ,0xfd2a53fd
+    ,0x53fcd653
+    ,0x2c53fc87
+    ,0x53fe1053
+    ,0xaa53fde9
+    ,0xfd7b53fd
+    ,0x53fd5753
+    ,0xfec153ff
+    ,0x53fe7d53
+    ,0x4f53fe6e
+    ,0xfe3853fe
+    ,0x3d53ff4c
+    ,0xff2a53ff
+    ,0x53ff2253
+    ,0x0453f867
+    ,0x0f000000
     ,0x211c10d0
-    ,0xffbe8010
-    ,0x53ff8253
-    ,0x3c53ff4b
+    ,0xffbf8010
+    ,0x53ff8353
+    ,0x5b290544
     ,0x043f0474
     ,0x20056f04
     ,0x6e3230d6
-    ,0x0f000000
+    ,0x03660cb1
     ,0x20736304
     ,0x00331ac0
     ,0x0c004104
-    ,0x5b290544
+    ,0x736301b1
     ,0x44654fec
     ,0x031314b0
     ,0x220f2211
-    ,0x03660cb1
+    ,0x21d00f00
     ,0x73630cc0
     ,0xc839d00f
     ,0x22d00f00
-    ,0x736301b1
+    ,0x03b13082
     ,0xc020d00f
     ,0x44495630
     ,0x00000000
-    ,0x21d00f00
+    ,0x01000300
     ,0xc72f211d
     ,0xb1318316
     ,0x15b33303
-    ,0x03b13082
-    ,0xffffffff
-    ,0xffffffff
-    ,0xffffffff
-    ,0x01000300
 };
 
 /* Table to hold thread PC address. Each entry represents different thread. */
 const GT_U32 phaFwThreadsPcAddressFalconImage01[PRV_CPSS_DXCH_PHA_MAX_THREADS_CNS] = {
      0x400160                                            /* 0 THR0_DoNothing */
-    ,0x400c40                                            /* 1 THR1_SRv6_End_Node */
-    ,0x400ce0                                            /* 2 THR2_SRv6_Source_Node_1_segment */
-    ,0x400d20                                            /* 3 THR3_SRv6_Source_Node_First_Pass_2_3_segments */
-    ,0x400d60                                            /* 4 THR4_SRv6_Source_Node_Second_Pass_3_segments */
-    ,0x400e10                                            /* 5 THR5_SRv6_Source_Node_Second_Pass_2_segments */
-    ,0x400ed0                                            /* 6 THR6_Cc_Erspan_TypeII_TrgDevLcMirroring_Ipv4 */
-    ,0x401030                                            /* 7 THR7_Cc_Erspan_TypeII_TrgDevLcMirroring_Ipv6 */
-    ,0x4011a0                                            /* 8 THR8_Cc_Erspan_TypeII_TrgDevDirectMirroring_Ipv4 */
-    ,0x4012e0                                            /* 9 THR9_Cc_Erspan_TypeII_TrgDevDirectMirroring_Ipv6 */
-    ,0x401430                                            /* 10 THR10_Cc_Erspan_TypeII_SrcDevMirroring */
-    ,0x401460                                            /* 11 THR11_VXLAN_GPB_SourceGroupPolicyID */
-    ,0x4014c0                                            /* 12 THR12_MPLS_SR_NO_EL */
-    ,0x4014f0                                            /* 13 THR13_MPLS_SR_ONE_EL */
-    ,0x401580                                            /* 14 THR14_MPLS_SR_TWO_EL */
-    ,0x401640                                            /* 15 THR15_MPLS_SR_THREE_EL */
+    ,0x400c70                                            /* 1 THR1_SRv6_End_Node */
+    ,0x400d10                                            /* 2 THR2_SRv6_Source_Node_1_segment */
+    ,0x400d50                                            /* 3 THR3_SRv6_Source_Node_First_Pass_2_3_segments */
+    ,0x400d90                                            /* 4 THR4_SRv6_Source_Node_Second_Pass_3_segments */
+    ,0x400e40                                            /* 5 THR5_SRv6_Source_Node_Second_Pass_2_segments */
+    ,0x400f00                                            /* 6 THR6_Cc_Erspan_TypeII_TrgDevLcMirroring_Ipv4 */
+    ,0x401060                                            /* 7 THR7_Cc_Erspan_TypeII_TrgDevLcMirroring_Ipv6 */
+    ,0x4011d0                                            /* 8 THR8_Cc_Erspan_TypeII_TrgDevDirectMirroring_Ipv4 */
+    ,0x401310                                            /* 9 THR9_Cc_Erspan_TypeII_TrgDevDirectMirroring_Ipv6 */
+    ,0x401460                                            /* 10 THR10_Cc_Erspan_TypeII_SrcDevMirroring */
+    ,0x401490                                            /* 11 THR11_VXLAN_GPB_SourceGroupPolicyID */
+    ,0x4014f0                                            /* 12 THR12_MPLS_SR_NO_EL */
+    ,0x401520                                            /* 13 THR13_MPLS_SR_ONE_EL */
+    ,0x4015b0                                            /* 14 THR14_MPLS_SR_TWO_EL */
+    ,0x401670                                            /* 15 THR15_MPLS_SR_THREE_EL */
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 16 */
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 17 */
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 18 */
@@ -2150,14 +2158,14 @@ const GT_U32 phaFwThreadsPcAddressFalconImage01[PRV_CPSS_DXCH_PHA_MAX_THREADS_CN
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 43 */
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 44 */
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 45 */
-    ,0x401740                                            /* 46 THR46_SFLOW_IPv4 */
-    ,0x4017e0                                            /* 47 THR47_SFLOW_IPv6 */
-    ,0x401880                                            /* 48 THR48_SRV6_Best_Effort */
-    ,0x4018e0                                            /* 49 THR49_SRV6_Source_Node_1_CONTAINER */
-    ,0x401960                                            /* 50 THR50_SRV6_Source_Node_First_Pass_1_CONTAINER */
-    ,0x4019a0                                            /* 51 THR51_SRV6_Source_Node_Second_Pass_3_CONTAINER */
-    ,0x401ab0                                            /* 52 THR52_SRV6_Source_Node_Second_Pass_2_CONTAINER */
-    ,0x401bc0                                            /* 53 THR53_SRV6_End_Node_GSID_COC32 */
+    ,0x401770                                            /* 46 THR46_SFLOW_IPv4 */
+    ,0x401810                                            /* 47 THR47_SFLOW_IPv6 */
+    ,0x4018b0                                            /* 48 THR48_SRV6_Best_Effort */
+    ,0x401910                                            /* 49 THR49_SRV6_Source_Node_1_CONTAINER */
+    ,0x401990                                            /* 50 THR50_SRV6_Source_Node_First_Pass_1_CONTAINER */
+    ,0x4019d0                                            /* 51 THR51_SRV6_Source_Node_Second_Pass_3_CONTAINER */
+    ,0x401ae0                                            /* 52 THR52_SRV6_Source_Node_Second_Pass_2_CONTAINER */
+    ,0x401bf0                                            /* 53 THR53_SRV6_End_Node_GSID_COC32 */
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 54 */
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 55 */
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 56 */
@@ -2165,12 +2173,12 @@ const GT_U32 phaFwThreadsPcAddressFalconImage01[PRV_CPSS_DXCH_PHA_MAX_THREADS_CN
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 58 */
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 59 */
     ,0x400180                                            /* 60 THR60_DropAllTraffic */
-    ,0x401c40                                            /* 61 THR61_save_target_port_info */
-    ,0x401c60                                            /* 62 THR62_enhanced_sFlow_fill_remain_IPv4 */
-    ,0x401cb0                                            /* 63 THR63_enhanced_sFlow_fill_remain_IPv6 */
-    ,0x401cf0                                            /* 64 THR64_Erspan_TypeII_SameDevMirroring_Ipv4 */
-    ,0x401dd0                                            /* 65 THR65_Erspan_TypeII_SameDevMirroring_Ipv6 */
-    ,0x401ec0                                            /* 66 THR66_enhanced_sFlow */
+    ,0x401c70                                            /* 61 THR61_save_target_port_info */
+    ,0x401c90                                            /* 62 THR62_enhanced_sFlow_fill_remain_IPv4 */
+    ,0x401ce0                                            /* 63 THR63_enhanced_sFlow_fill_remain_IPv6 */
+    ,0x401d20                                            /* 64 THR64_Erspan_TypeII_SameDevMirroring_Ipv4 */
+    ,0x401e00                                            /* 65 THR65_Erspan_TypeII_SameDevMirroring_Ipv6 */
+    ,0x401ef0                                            /* 66 THR66_enhanced_sFlow */
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 67 */
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 68 */
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 69 */
@@ -2592,77 +2600,77 @@ const GT_U32 phaFwAccelCmdsFalconImage01[FW_ACCEL_CMDS_MAX_NUM_CNS] = {
    ,0x080100a2 /* CSUM_LOAD_NEW_THR62_enhanced_sFlow_fill_remain_IPv4_LEN2_FROM_PKT_IPv4_Header__total_length, offset = 0x0330 */
    ,0x082100aa /* CSUM_LOAD_OLD_THR62_enhanced_sFlow_fill_remain_IPv4_LEN2_FROM_PKT_IPv4_Header__header_checksum, offset = 0x0334 */
    ,0xc00faa00 /* CSUM_STORE_IP_THR62_enhanced_sFlow_fill_remain_IPv4_TO_PKT_IPv4_Header__header_checksum, offset = 0x0338 */
-   ,0x0001eb54 /* COPY_BYTES_THR63_enhanced_sFlow_fill_remain_IPv6_DESC_phal2ppa__pha_metadata_LEN2_TO_PKT_enhanced_sflow_rx_ts_shim_header__ip_high, offset = 0x033c */
-   ,0x080500e4 /* CSUM_LOAD_NEW_THR63_enhanced_sFlow_fill_remain_IPv6_LEN6_FROM_PKT_enhanced_sflow_rx_ts_shim_header__rx_timestamp_47_32, offset = 0x0340 */
-   ,0x080300ea /* CSUM_LOAD_NEW_THR63_enhanced_sFlow_fill_remain_IPv6_LEN4_FROM_PKT_enhanced_sflow_rx_ts_shim_header__reserved, offset = 0x0344 */
-   ,0xc00fe200 /* CSUM_STORE_IP_THR63_enhanced_sFlow_fill_remain_IPv6_TO_PKT_enhanced_sflow_rx_ts_shim_header__checksum_PLUS2, offset = 0x0348 */
-   ,0x0001f956 /* COPY_BYTES_THR63_enhanced_sFlow_fill_remain_IPv6_DESC_phal2ppa__pha_metadata_PLUS2_LEN2_TO_PKT_enhanced_sflow_tx_ts_shim_header__ip_low, offset = 0x034c */
-   ,0x080500f2 /* CSUM_LOAD_NEW_THR63_enhanced_sFlow_fill_remain_IPv6_LEN6_FROM_PKT_enhanced_sflow_tx_ts_shim_header__tx_timestamp_47_32, offset = 0x0350 */
-   ,0x080300f8 /* CSUM_LOAD_NEW_THR63_enhanced_sFlow_fill_remain_IPv6_LEN4_FROM_PKT_enhanced_sflow_tx_ts_shim_header__reserved, offset = 0x0354 */
-   ,0xc00ff000 /* CSUM_STORE_IP_THR63_enhanced_sFlow_fill_remain_IPv6_TO_PKT_enhanced_sflow_tx_ts_shim_header__checksum_PLUS2, offset = 0x0358 */
+   ,0x0476d971 /* COPY_BITS_THR62_enhanced_sFlow_fill_remain_IPv4_DESC_phal2ppa__orig_src_eport_PLUS6_LEN7_TO_PKT_enhanced_sflow_rx_ts_shim_header__port_number, offset = 0x033c */
+   ,0x0476e748 /* COPY_BITS_THR62_enhanced_sFlow_fill_remain_IPv4_DESC_phal2ppa__local_dev_trg_phy_port_PLUS3_LEN7_TO_PKT_enhanced_sflow_tx_ts_shim_header__port_number, offset = 0x0340 */
+   ,0x0001eb54 /* COPY_BYTES_THR63_enhanced_sFlow_fill_remain_IPv6_DESC_phal2ppa__pha_metadata_LEN2_TO_PKT_enhanced_sflow_rx_ts_shim_header__ip_high, offset = 0x0344 */
+   ,0x080500e4 /* CSUM_LOAD_NEW_THR63_enhanced_sFlow_fill_remain_IPv6_LEN6_FROM_PKT_enhanced_sflow_rx_ts_shim_header__rx_timestamp_47_32, offset = 0x0348 */
+   ,0x080300ea /* CSUM_LOAD_NEW_THR63_enhanced_sFlow_fill_remain_IPv6_LEN4_FROM_PKT_enhanced_sflow_rx_ts_shim_header__reserved, offset = 0x034c */
+   ,0xc00fe200 /* CSUM_STORE_IP_THR63_enhanced_sFlow_fill_remain_IPv6_TO_PKT_enhanced_sflow_rx_ts_shim_header__checksum_PLUS2, offset = 0x0350 */
+   ,0x0001f956 /* COPY_BYTES_THR63_enhanced_sFlow_fill_remain_IPv6_DESC_phal2ppa__pha_metadata_PLUS2_LEN2_TO_PKT_enhanced_sflow_tx_ts_shim_header__ip_low, offset = 0x0354 */
+   ,0x080500f2 /* CSUM_LOAD_NEW_THR63_enhanced_sFlow_fill_remain_IPv6_LEN6_FROM_PKT_enhanced_sflow_tx_ts_shim_header__tx_timestamp_47_32, offset = 0x0358 */
+   ,0x080300f8 /* CSUM_LOAD_NEW_THR63_enhanced_sFlow_fill_remain_IPv6_LEN4_FROM_PKT_enhanced_sflow_tx_ts_shim_header__reserved, offset = 0x035c */
+   ,0xc00ff000 /* CSUM_STORE_IP_THR63_enhanced_sFlow_fill_remain_IPv6_TO_PKT_enhanced_sflow_tx_ts_shim_header__checksum_PLUS2, offset = 0x0360 */
    /* 44806001 COPY_BITS_THR63_enhanced_sFlow_fill_remain_IPv6_CONST_0x1_LEN1_TO_DESC_phal2ppa__egress_checksum_mode, offset = 0x0320 */
-   ,0x540fcc2c /* ADD_BITS_THR63_enhanced_sFlow_fill_remain_IPv6_CONST_0x2C_LEN16_TO_PKT_udp_header__Length, offset = 0x035c */
-   ,0x540fa42c /* ADD_BITS_THR63_enhanced_sFlow_fill_remain_IPv6_CONST_0x2C_LEN16_TO_PKT_IPv6_Header__payload_length, offset = 0x0360 */
-   ,0x44079a08 /* COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x08_LEN8_TO_PKT_ethertype_header__ethertype, offset = 0x0364 */
-   ,0x4407b010 /* COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x10_LEN8_TO_PKT_GRE_header__C, offset = 0x0368 */
-   ,0x4407b288 /* COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x88_LEN8_TO_PKT_GRE_header__NP, offset = 0x036c */
-   ,0x4407b3be /* COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0xBE_LEN8_TO_PKT_GRE_header__NP_PLUS8, offset = 0x0370 */
-   ,0x0003b474 /* COPY_BYTES_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__lm_counter_LEN4_TO_PKT_GRE_header__Seq_num, offset = 0x0374 */
-   ,0x040fbe12 /* COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_srcTrgPortEntry__targetPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4, offset = 0x0378 */
-   ,0x040fbe10 /* COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_srcTrgPortEntry__srcPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4, offset = 0x037c */
-   ,0x4403b801 /* COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x1_LEN4_TO_PKT_ERSPAN_type_II_header__Ver, offset = 0x0380 */
-   ,0x0442ba52 /* COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__qos_mapped_up_LEN3_TO_PKT_ERSPAN_type_II_header__COS, offset = 0x0384 */
-   ,0x4582ba06 /* COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x6_LEN3_TO_PKT_ERSPAN_type_II_header__En, offset = 0x0388 */
-   ,0x050d9e50 /* COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__egress_byte_count_LEN14_TO_PKT_IPv4_Header__total_length_PLUS2, offset = 0x038c */
-   ,0x540f9e24 /* ADD_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x24_LEN16_TO_PKT_IPv4_Header__total_length, offset = 0x0390 */
-   ,0x0807009c /* CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN8_FROM_PKT_IPv4_Header__version, offset = 0x0394 */
-   ,0x080100a4 /* CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN2_FROM_PKT_IPv4_Header__ttl, offset = 0x0398 */
-   ,0x080700a8 /* CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN8_FROM_PKT_IPv4_Header__sip_high, offset = 0x039c */
-   ,0xc00fa600 /* CSUM_STORE_IP_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_TO_PKT_IPv4_Header__header_checksum, offset = 0x03a0 */
-   ,0x000b8e00 /* COPY_BYTES_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_erspan_template__mac_da_47_32_LEN12_TO_PKT_IPv4_Header__version_MINUS14, offset = 0x03a4 */
-   ,0x540d5032 /* ADD_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x32_LEN14_TO_DESC_phal2ppa__egress_byte_count, offset = 0x03a8 */
-   ,0x000f8a00 /* COPY_BYTES_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_erspan_template__mac_da_47_32_LEN16_TO_PKT_IPv4_Header__version_MINUS18, offset = 0x03ac */
+   ,0x540fcc2c /* ADD_BITS_THR63_enhanced_sFlow_fill_remain_IPv6_CONST_0x2C_LEN16_TO_PKT_udp_header__Length, offset = 0x0364 */
+   ,0x540fa42c /* ADD_BITS_THR63_enhanced_sFlow_fill_remain_IPv6_CONST_0x2C_LEN16_TO_PKT_IPv6_Header__payload_length, offset = 0x0368 */
+   ,0x0476ed71 /* COPY_BITS_THR63_enhanced_sFlow_fill_remain_IPv6_DESC_phal2ppa__orig_src_eport_PLUS6_LEN7_TO_PKT_enhanced_sflow_rx_ts_shim_header__port_number, offset = 0x036c */
+   ,0x0476fb48 /* COPY_BITS_THR63_enhanced_sFlow_fill_remain_IPv6_DESC_phal2ppa__local_dev_trg_phy_port_PLUS3_LEN7_TO_PKT_enhanced_sflow_tx_ts_shim_header__port_number, offset = 0x0370 */
+   ,0x44079a08 /* COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x08_LEN8_TO_PKT_ethertype_header__ethertype, offset = 0x0374 */
+   ,0x4407b010 /* COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x10_LEN8_TO_PKT_GRE_header__C, offset = 0x0378 */
+   ,0x4407b288 /* COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x88_LEN8_TO_PKT_GRE_header__NP, offset = 0x037c */
+   ,0x4407b3be /* COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0xBE_LEN8_TO_PKT_GRE_header__NP_PLUS8, offset = 0x0380 */
+   ,0x0003b474 /* COPY_BYTES_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__lm_counter_LEN4_TO_PKT_GRE_header__Seq_num, offset = 0x0384 */
+   ,0x040fbe12 /* COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_srcTrgPortEntry__targetPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4, offset = 0x0388 */
+   ,0x040fbe10 /* COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_srcTrgPortEntry__srcPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4, offset = 0x038c */
+   ,0x4403b801 /* COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x1_LEN4_TO_PKT_ERSPAN_type_II_header__Ver, offset = 0x0390 */
+   ,0x0442ba52 /* COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__qos_mapped_up_LEN3_TO_PKT_ERSPAN_type_II_header__COS, offset = 0x0394 */
+   ,0x4581ba03 /* COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x3_LEN2_TO_PKT_ERSPAN_type_II_header__En, offset = 0x0398 */
+   ,0x06c0ba40 /* COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__truncated_LEN1_TO_PKT_ERSPAN_type_II_header__T, offset = 0x039c */
+   ,0x050d9e50 /* COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__egress_byte_count_LEN14_TO_PKT_IPv4_Header__total_length_PLUS2, offset = 0x03a0 */
+   ,0x540f9e24 /* ADD_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x24_LEN16_TO_PKT_IPv4_Header__total_length, offset = 0x03a4 */
+   ,0x0807009c /* CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN8_FROM_PKT_IPv4_Header__version, offset = 0x03a8 */
+   ,0x080100a4 /* CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN2_FROM_PKT_IPv4_Header__ttl, offset = 0x03ac */
+   ,0x080700a8 /* CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN8_FROM_PKT_IPv4_Header__sip_high, offset = 0x03b0 */
+   ,0xc00fa600 /* CSUM_STORE_IP_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_TO_PKT_IPv4_Header__header_checksum, offset = 0x03b4 */
+   ,0x000b8e00 /* COPY_BYTES_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_erspan_template__mac_da_47_32_LEN12_TO_PKT_IPv4_Header__version_MINUS14, offset = 0x03b8 */
+   ,0x540d5032 /* ADD_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x32_LEN14_TO_DESC_phal2ppa__egress_byte_count, offset = 0x03bc */
+   ,0x000f8a00 /* COPY_BYTES_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_erspan_template__mac_da_47_32_LEN16_TO_PKT_IPv4_Header__version_MINUS18, offset = 0x03c0 */
    /* 540d5036 ADD_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x36_LEN14_TO_DESC_phal2ppa__egress_byte_count, offset = 0x01bc */
-   ,0x44079286 /* COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x86_LEN8_TO_PKT_ethertype_header__ethertype, offset = 0x03b0 */
-   ,0x440793dd /* COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0xDD_LEN8_TO_PKT_ethertype_header__ethertype_PLUS8, offset = 0x03b4 */
-   ,0x4407bc10 /* COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x10_LEN8_TO_PKT_GRE_header__C, offset = 0x03b8 */
-   ,0x4407be88 /* COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x88_LEN8_TO_PKT_GRE_header__NP, offset = 0x03bc */
-   ,0x4407bfbe /* COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0xBE_LEN8_TO_PKT_GRE_header__NP_PLUS8, offset = 0x03c0 */
-   ,0x0003c074 /* COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__lm_counter_LEN4_TO_PKT_GRE_header__Seq_num, offset = 0x03c4 */
-   ,0x040fca12 /* COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_srcTrgPortEntry__targetPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4, offset = 0x03c8 */
-   ,0x040fca10 /* COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_srcTrgPortEntry__srcPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4, offset = 0x03cc */
-   ,0x4403c401 /* COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x1_LEN4_TO_PKT_ERSPAN_type_II_header__Ver, offset = 0x03d0 */
-   ,0x0442c652 /* COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__qos_mapped_up_LEN3_TO_PKT_ERSPAN_type_II_header__COS, offset = 0x03d4 */
-   ,0x4582c606 /* COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x6_LEN3_TO_PKT_ERSPAN_type_II_header__En, offset = 0x03d8 */
-   ,0x050d9850 /* COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__egress_byte_count_LEN14_TO_PKT_IPv6_Header__payload_length_PLUS2, offset = 0x03dc */
-   ,0x540f9810 /* ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x10_LEN16_TO_PKT_IPv6_Header__payload_length, offset = 0x03e0 */
-   ,0x000b8600 /* COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_erspan_template__mac_da_47_32_LEN12_TO_PKT_IPv6_Header__version_MINUS14, offset = 0x03e4 */
+   ,0x44079286 /* COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x86_LEN8_TO_PKT_ethertype_header__ethertype, offset = 0x03c4 */
+   ,0x440793dd /* COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0xDD_LEN8_TO_PKT_ethertype_header__ethertype_PLUS8, offset = 0x03c8 */
+   ,0x4407bc10 /* COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x10_LEN8_TO_PKT_GRE_header__C, offset = 0x03cc */
+   ,0x4407be88 /* COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x88_LEN8_TO_PKT_GRE_header__NP, offset = 0x03d0 */
+   ,0x4407bfbe /* COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0xBE_LEN8_TO_PKT_GRE_header__NP_PLUS8, offset = 0x03d4 */
+   ,0x0003c074 /* COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__lm_counter_LEN4_TO_PKT_GRE_header__Seq_num, offset = 0x03d8 */
+   ,0x040fca12 /* COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_srcTrgPortEntry__targetPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4, offset = 0x03dc */
+   ,0x040fca10 /* COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_srcTrgPortEntry__srcPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4, offset = 0x03e0 */
+   ,0x4403c401 /* COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x1_LEN4_TO_PKT_ERSPAN_type_II_header__Ver, offset = 0x03e4 */
+   ,0x0442c652 /* COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__qos_mapped_up_LEN3_TO_PKT_ERSPAN_type_II_header__COS, offset = 0x03e8 */
+   ,0x4581c603 /* COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x3_LEN2_TO_PKT_ERSPAN_type_II_header__En, offset = 0x03ec */
+   ,0x06c0c640 /* COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__truncated_LEN1_TO_PKT_ERSPAN_type_II_header__T, offset = 0x03f0 */
+   ,0x050d9850 /* COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__egress_byte_count_LEN14_TO_PKT_IPv6_Header__payload_length_PLUS2, offset = 0x03f4 */
+   ,0x540f9810 /* ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x10_LEN16_TO_PKT_IPv6_Header__payload_length, offset = 0x03f8 */
+   ,0x000b8600 /* COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_erspan_template__mac_da_47_32_LEN12_TO_PKT_IPv6_Header__version_MINUS14, offset = 0x03fc */
    /* 540d503a ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x3A_LEN14_TO_DESC_phal2ppa__egress_byte_count, offset = 0x01c4 */
-   ,0x000f8200 /* COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_erspan_template__mac_da_47_32_LEN16_TO_PKT_IPv6_Header__version_MINUS18, offset = 0x03e8 */
+   ,0x000f8200 /* COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_erspan_template__mac_da_47_32_LEN16_TO_PKT_IPv6_Header__version_MINUS18, offset = 0x0400 */
    /* 540d503e ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x3E_LEN14_TO_DESC_phal2ppa__egress_byte_count, offset = 0x01a4 */
-   ,0x000bccc0 /* SHIFTRIGHT_12_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_LEN12_FROM_PKT_mac_header__mac_da_47_32, offset = 0x03ec */
-   ,0x000b9400 /* COPY_BYTES_THR66_enhanced_sFlow_CFG_enhanced_sflow_template__reserved_0_LEN12_TO_PKT_enhanced_sflow_shim_header__version, offset = 0x03f0 */
-   ,0x46829705 /* COPY_BITS_THR66_enhanced_sFlow_CONST_0x5_LEN3_TO_PKT_enhanced_sflow_shim_header__version_PLUS29, offset = 0x03f4 */
-   ,0x0407980f /* COPY_BITS_THR66_enhanced_sFlow_CFG_enhanced_sflow_template__src_device_id_LEN8_TO_PKT_enhanced_sflow_shim_header__src_modid, offset = 0x03f8 */
-   ,0x04679971 /* COPY_BITS_THR66_enhanced_sFlow_DESC_phal2ppa__orig_src_eport_PLUS5_LEN8_TO_PKT_enhanced_sflow_shim_header__src_port, offset = 0x03fc */
-   ,0x042f9a4c /* COPY_BITS_THR66_enhanced_sFlow_DESC_phal2ppa__copy_reserved_PLUS2_LEN16_TO_PKT_enhanced_sflow_shim_header__dst_modid, offset = 0x0400 */
-   ,0x000ba400 /* COPY_BYTES_THR66_enhanced_sFlow_CFG_enhanced_sflow_template__reserved_0_LEN12_TO_PKT_enhanced_sflow_rx_ts_shim_header__checksum, offset = 0x0404 */
-   ,0x052daa74 /* COPY_BITS_THR66_enhanced_sFlow_DESC_phal2ppa__timestamp_PLUS2_LEN14_TO_PKT_enhanced_sflow_rx_ts_shim_header__rx_timestamp_31_16_PLUS2, offset = 0x0408 */
-   ,0x040fac76 /* COPY_BITS_THR66_enhanced_sFlow_DESC_phal2ppa__timestamp_PLUS16_LEN16_TO_PKT_enhanced_sflow_rx_ts_shim_header__rx_timestamp_15_0, offset = 0x040c */
-   ,0x0476b171 /* COPY_BITS_THR66_enhanced_sFlow_DESC_phal2ppa__orig_src_eport_PLUS6_LEN7_TO_PKT_enhanced_sflow_rx_ts_shim_header__port_number, offset = 0x0410 */
-   ,0x000bb400 /* COPY_BYTES_THR66_enhanced_sFlow_CFG_enhanced_sflow_template__reserved_0_LEN12_TO_PKT_enhanced_sflow_tx_ts_shim_header__checksum_PLUS2, offset = 0x0414 */
-   ,0x0416bf6f /* COPY_BITS_THR66_enhanced_sFlow_DESC_phal2ppa__trg_phy_port_PLUS3_LEN7_TO_PKT_enhanced_sflow_tx_ts_shim_header__port_number, offset = 0x0418 */
-   ,0x4780bf01 /* COPY_BITS_THR66_enhanced_sFlow_CONST_0x1_LEN1_TO_PKT_enhanced_sflow_tx_ts_shim_header__port_direction, offset = 0x041c */
-   ,0x45804801 /* COPY_BITS_THR66_enhanced_sFlow_CONST_0x1_LEN1_TO_DESC_phal2ppa__mac_timestamping_en, offset = 0x0420 */
-   ,0x47824500 /* COPY_BITS_THR66_enhanced_sFlow_CONST_0x0_LEN3_TO_DESC_phal2ppa__ptp_packet_format, offset = 0x0424 */
-   ,0x46035f04 /* COPY_BITS_THR66_enhanced_sFlow_CONST_0x4_LEN4_TO_DESC_phal2ppa__ptp_action, offset = 0x0428 */
-   ,0x45026002 /* COPY_BITS_THR66_enhanced_sFlow_CONST_0x2_LEN3_TO_DESC_phal2ppa__timestamp_mask_profile, offset = 0x042c */
-   ,0x47076122 /* COPY_BITS_THR66_enhanced_sFlow_CONST_0x22_LEN8_TO_DESC_phal2ppa__timestamp_offset, offset = 0x0430 */
-   ,0x00000000 /* offset = 0x0434 */
-   ,0x00000000 /* offset = 0x0438 */
-   ,0x00000000 /* offset = 0x043c */
-   ,0x00000000 /* offset = 0x0440 */
-   ,0x00000000 /* offset = 0x0444 */
+   ,0x000bccc0 /* SHIFTRIGHT_12_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_LEN12_FROM_PKT_mac_header__mac_da_47_32, offset = 0x0404 */
+   ,0x000b9400 /* COPY_BYTES_THR66_enhanced_sFlow_CFG_enhanced_sflow_template__reserved_0_LEN12_TO_PKT_enhanced_sflow_shim_header__version, offset = 0x0408 */
+   ,0x46829705 /* COPY_BITS_THR66_enhanced_sFlow_CONST_0x5_LEN3_TO_PKT_enhanced_sflow_shim_header__version_PLUS29, offset = 0x040c */
+   ,0x0407980f /* COPY_BITS_THR66_enhanced_sFlow_CFG_enhanced_sflow_template__src_device_id_LEN8_TO_PKT_enhanced_sflow_shim_header__src_modid, offset = 0x0410 */
+   ,0x04679971 /* COPY_BITS_THR66_enhanced_sFlow_DESC_phal2ppa__orig_src_eport_PLUS5_LEN8_TO_PKT_enhanced_sflow_shim_header__src_port, offset = 0x0414 */
+   ,0x042f9a4c /* COPY_BITS_THR66_enhanced_sFlow_DESC_phal2ppa__copy_reserved_PLUS2_LEN16_TO_PKT_enhanced_sflow_shim_header__dst_modid, offset = 0x0418 */
+   ,0x000ba400 /* COPY_BYTES_THR66_enhanced_sFlow_CFG_enhanced_sflow_template__reserved_0_LEN12_TO_PKT_enhanced_sflow_rx_ts_shim_header__checksum, offset = 0x041c */
+   ,0x052daa74 /* COPY_BITS_THR66_enhanced_sFlow_DESC_phal2ppa__timestamp_PLUS2_LEN14_TO_PKT_enhanced_sflow_rx_ts_shim_header__rx_timestamp_31_16_PLUS2, offset = 0x0420 */
+   ,0x040fac76 /* COPY_BITS_THR66_enhanced_sFlow_DESC_phal2ppa__timestamp_PLUS16_LEN16_TO_PKT_enhanced_sflow_rx_ts_shim_header__rx_timestamp_15_0, offset = 0x0424 */
+   ,0x000bb400 /* COPY_BYTES_THR66_enhanced_sFlow_CFG_enhanced_sflow_template__reserved_0_LEN12_TO_PKT_enhanced_sflow_tx_ts_shim_header__checksum_PLUS2, offset = 0x0428 */
+   ,0x4780bf01 /* COPY_BITS_THR66_enhanced_sFlow_CONST_0x1_LEN1_TO_PKT_enhanced_sflow_tx_ts_shim_header__port_direction, offset = 0x042c */
+   ,0x45804801 /* COPY_BITS_THR66_enhanced_sFlow_CONST_0x1_LEN1_TO_DESC_phal2ppa__mac_timestamping_en, offset = 0x0430 */
+   ,0x47824500 /* COPY_BITS_THR66_enhanced_sFlow_CONST_0x0_LEN3_TO_DESC_phal2ppa__ptp_packet_format, offset = 0x0434 */
+   ,0x46035f04 /* COPY_BITS_THR66_enhanced_sFlow_CONST_0x4_LEN4_TO_DESC_phal2ppa__ptp_action, offset = 0x0438 */
+   ,0x45026002 /* COPY_BITS_THR66_enhanced_sFlow_CONST_0x2_LEN3_TO_DESC_phal2ppa__timestamp_mask_profile, offset = 0x043c */
+   ,0x47076122 /* COPY_BITS_THR66_enhanced_sFlow_CONST_0x22_LEN8_TO_DESC_phal2ppa__timestamp_offset, offset = 0x0440 */
+   ,0x4780b100 /* COPY_BITS_THR66_enhanced_sFlow_CONST_0x0_LEN1_TO_PKT_enhanced_sflow_rx_ts_shim_header__port_direction, offset = 0x0444 */
    ,0x00000000 /* offset = 0x0448 */
    ,0x00000000 /* offset = 0x044c */
    ,0x00000000 /* offset = 0x0450 */
diff --git a/mainPpDrv/h/cpss/dxCh/dxChxGen/pha/private/prvCpssDxChPpaFwImageInfo_FalconImage02.h b/mainPpDrv/h/cpss/dxCh/dxChxGen/pha/private/prvCpssDxChPpaFwImageInfo_FalconImage02.h
index d836e4039b..3818e82527 100644
--- a/mainPpDrv/h/cpss/dxCh/dxChxGen/pha/private/prvCpssDxChPpaFwImageInfo_FalconImage02.h
+++ b/mainPpDrv/h/cpss/dxCh/dxChxGen/pha/private/prvCpssDxChPpaFwImageInfo_FalconImage02.h
@@ -18,7 +18,7 @@
  *
  *   APPLICABLE DEVICES: Falcon.
  *
- * @version 21_11_00_00
+ * @version 22_02_00_00
  *******************************************************************************
  */
 
@@ -27,12 +27,12 @@
 
 /* PHA fw version information */
 const PRV_CPSS_DXCH_PHA_FW_IMAGE_VERSION_INFO_STC fwImageVersionFalconImage02 = {
-	 0x21110000 /* | year << 24 | month << 16 | in_month << 8 | debug | */
+	 0x22020000 /* | year << 24 | month << 16 | in_month << 8 | debug | */
 	,0x02000000 /* image_id << 24 */
 	,"Image02"}; /* image_name */
 
 /* The number of words of data in prvCpssDxChPpaFwImemFalconImage02*/
-#define PRV_CPSS_DXCH_PPA_FW_IMAGE_SIZE_FALCON_IMAGE02 (1804)
+#define PRV_CPSS_DXCH_PPA_FW_IMAGE_SIZE_FALCON_IMAGE02 (1808)
 
 /* The FW code to load into the PHA unit */
 const GT_U32 prvCpssDxChPpaFwImemFalconImage02[PRV_CPSS_DXCH_PPA_FW_IMAGE_SIZE_FALCON_IMAGE02] = {
@@ -167,15 +167,15 @@ const GT_U32 prvCpssDxChPpaFwImemFalconImage02[PRV_CPSS_DXCH_PPA_FW_IMAGE_SIZE_F
     ,0x211cf090
     ,0x10d00f00
     ,0xc020211c
-    ,0x065c8010
+    ,0x06618010
     ,0x500042c0
-    ,0x3a50024f
+    ,0x3a500253
     ,0x90105000
     ,0x1100eb30
     ,0x82104366
     ,0x0031c040
     ,0x43000050
-    ,0x22432111
+    ,0x22432202
     ,0x00038011
     ,0x50000750
     ,0xa3239343
@@ -217,13 +217,13 @@ const GT_U32 prvCpssDxChPpaFwImemFalconImage02[PRV_CPSS_DXCH_PPA_FW_IMAGE_SIZE_F
     ,0x245d0526
     ,0x0045fe00
     ,0x00254c1c
-    ,0x00014402
+    ,0x00014406
     ,0x7659f244
     ,0xb455b244
     ,0x44464cc0
-    ,0xd00f0000
-    ,0x447549f7
-    ,0x2746b1b4
+    ,0x0f000000
+    ,0x7549f8d0
+    ,0x9741b444
     ,0x0f000000
     ,0x4e9450d0
     ,0x54084443
@@ -236,534 +236,538 @@ const GT_U32 prvCpssDxChPpaFwImemFalconImage02[PRV_CPSS_DXCH_PPA_FW_IMAGE_SIZE_F
     ,0x0d42cafe
     ,0x84304290
     ,0x00430740
-    ,0x0f440003
-    ,0xc0704604
+    ,0x0f434581
+    ,0xc0904a04
     ,0x9230d00f
     ,0x463f8330
-    ,0x4344074b
-    ,0x4242540f
-    ,0x44034904
-    ,0x4a458248
-    ,0xc65248c4
-    ,0x42981049
-    ,0x5043bfbe
-    ,0x050d4b98
-    ,0xfa2476f8
-    ,0xca102676
-    ,0x44c07446
-    ,0x014ac606
-    ,0x76ff2376
-    ,0x2976fc22
-    ,0x652876fb
-    ,0x2a76fdb2
-    ,0x07494407
-    ,0x44074244
-    ,0x4308074b
-    ,0xf72b76fe
-    ,0x46540d44
-    ,0x0744c00f
-    ,0x76f94a44
-    ,0x48000f25
-    ,0x928642be
-    ,0x488a0049
-    ,0xdd45000b
-    ,0xa6004a93
-    ,0xf52276f6
-    ,0x76ee2b76
-    ,0x4300a823
-    ,0x884bbc10
-    ,0x2476ef46
-    ,0x002a76f4
-    ,0x76f2458e
-    ,0x2976f328
-    ,0x76f04845
-    ,0x4a540f25
-    ,0x0f2676f1
-    ,0x50324404
-    ,0x5048ba06
-    ,0x00a4499e
-    ,0x42080142
-    ,0x8249050d
-    ,0x44be1024
-    ,0xf4460442
-    ,0x9e242b3c
-    ,0x4544034a
-    ,0xb8012876
-    ,0x2a76eb45
-    ,0x522b76ec
-    ,0x76e646ba
-    ,0x03484407
-    ,0x44074200
-    ,0x2276ed49
-    ,0xe92976ea
-    ,0xb2432376
-    ,0x072676e8
-    ,0x44074b44
-    ,0x2576e74a
-    ,0x88454407
-    ,0xb3be4ab2
-    ,0x44540f4b
-    ,0xe5464780
-    ,0x2276e428
-    ,0x102976e1
-    ,0xb47449b0
-    ,0x489a0842
-    ,0xb83446ff
-    ,0x2b76e344
-    ,0x202a76e2
-    ,0x76e045df
-    ,0x032576de
-    ,0x07394a00
-    ,0x2476dd4b
-    ,0x002676df
-    ,0x2376dc45
-    ,0xfc48d808
-    ,0x0003226d
-    ,0x234dd848
-    ,0x47802a76
-    ,0x2b76da44
-    ,0x544bf644
-    ,0x00034ae8
-    ,0x802276db
-    ,0x76d74647
-    ,0x43000328
-    ,0xd945cc74
-    ,0x48440743
-    ,0x8246d701
-    ,0x76d84246
-    ,0x29bdf029
-    ,0x76d44b00
-    ,0x44cb0024
-    ,0xd54a001f
-    ,0xc40c2576
-    ,0x202676d6
-    ,0x76d348cb
-    ,0x45c00f23
-    ,0x1f4a8cc0
-    ,0x43080145
-    ,0x0f2876ce
-    ,0x76d24654
-    ,0x42bf0522
-    ,0x76d14a47
-    ,0x4bace02b
-    ,0x202a76d0
-    ,0x9600294d
-    ,0x032976cf
-    ,0x008e4800
-    ,0x2576cc43
-    ,0x80440821
-    ,0x2376ca45
-    ,0x3948d454
-    ,0x76cd4907
-    ,0x46a43426
-    ,0x76c72276
-    ,0x4ae7002a
-    ,0x96226dea
-    ,0x00034400
-    ,0x032876c5
-    ,0xc4084300
-    ,0x2b4cf845
-    ,0xc92476cb
-    ,0x2576c32b
-    ,0x0f43b874
-    ,0x76c64800
-    ,0x49e24429
-    ,0x00034546
-    ,0x269df04b
-    ,0x8022add0
-    ,0x76c84447
-    ,0x01456800
-    ,0x76bc4344
-    ,0x48a8dc28
-    ,0x822376c1
-    ,0x44c30124
-    ,0xc42276c0
-    ,0x46822676
-    ,0x4bb00c49
-    ,0xab052b76
-    ,0x2a4dec49
-    ,0x0746001b
-    ,0x76c24254
-    ,0xb84bc00f
-    ,0x001f2376
-    ,0x43700345
-    ,0xbf2576ba
-    ,0x2276b726
-    ,0xc042a701
-    ,0x76be468c
-    ,0x2976bd2a
-    ,0x04394baa
-    ,0x49080144
-    ,0x21282d01
-    ,0x76bb4a08
-    ,0xa42b76b6
-    ,0x76b1439c
-    ,0x459ca425
-    ,0x00430017
-    ,0x2a76b548
-    ,0xb34a00aa
-    ,0x00a82876
-    ,0x44694449
-    ,0x000f2376
-    ,0x2476b94b
-    ,0xb426acfe
-    ,0x00032976
-    ,0xac430013
-    ,0x9ca445a4
-    ,0x42001342
-    ,0xaf45001b
-    ,0x489ca428
-    ,0xb2490007
-    ,0x001b2676
-    ,0x4b9ca444
-    ,0x9ca42b76
-    ,0x46001f44
-    ,0xa44a000b
-    ,0x76aa499c
-    ,0x0342000f
-    ,0x76ae4500
-    ,0x2576a822
-    ,0xad43a4ac
-    ,0x4a9ca429
-    ,0xb046a4ac
-    ,0x000b2476
-    ,0x2376a64b
-    ,0x76ac2676
-    ,0x48d0cc2a
-    ,0x03490003
-    ,0x76ab4800
-    ,0xac45c8c4
-    ,0x000342a4
-    ,0x4ba4ac43
-    ,0xa9440017
-    ,0x44a4ac46
-    ,0xbc2b76a4
-    ,0x76a543c0
-    ,0x25769f22
-    ,0x76a24800
-    ,0x49a4ac29
-    ,0x072876a1
-    ,0x00034a00
-    ,0x0323769d
-    ,0x76a74b00
-    ,0x46ccc824
-    ,0x034aa4ac
-    ,0x44000326
-    ,0xb84bb8b4
-    ,0x1c0742bc
-    ,0x42000343
-    ,0x76962876
-    ,0x259cf425
-    ,0xa348aca8
-    ,0x76a02a76
-    ,0x9b22769c
-    ,0xc4c02b76
-    ,0x46000344
-    ,0x984a0003
-    ,0x4244074b
-    ,0x99237694
-    ,0x9d0c2976
-    ,0x437bb229
-    ,0x45094500
-    ,0x4ab4b048
-    ,0x9e46a8a4
-    ,0x44002476
-    ,0x97440003
-    ,0x769a2676
-    ,0x48d1072a
-    ,0x1f45acb4
-    ,0x49d20043
-    ,0x17494780
-    ,0x7b304300
-    ,0x4bd00142
-    ,0x44094a04
-    ,0x44a09c46
-    ,0x932b7692
-    ,0xacb42276
-    ,0x004ad15a
-    ,0x00034545
-    ,0x25768d48
-    ,0x4b28768f
-    ,0x23768b29
-    ,0x0f420013
-    ,0x76954b00
-    ,0x46d00024
-    ,0xacb44400
-    ,0x42acb44b
-    ,0x0f490007
-    ,0x76904300
-    ,0xb4287686
-    ,0xd50148ac
-    ,0x2a769145
-    ,0x1b26768e
-    ,0x2b768922
-    ,0x8044acb4
-    ,0x000b4647
-    ,0x2576844a
-    ,0x76874254
-    ,0x23768229
-    ,0xb4438600
-    ,0x768a49ac
-    ,0xb42a7688
-    ,0xd2014aac
-    ,0x24768c46
-    ,0x0d4b000b
-    ,0x2276812b
-    ,0x0042503a
-    ,0x07d24b8a
-    ,0x26768544
-    ,0x3d14282c
-    ,0x292cec26
-    ,0x1444d403
-    ,0x768025bd
-    ,0x25767b26
-    ,0x7e247683
-    ,0xb4232976
-    ,0xe828767d
-    ,0x06b04405
-    ,0x2a767f45
-    ,0xfc460434
-    ,0x767c2a2c
-    ,0x444305d4
-    ,0x76794804
-    ,0x4906d023
-    ,0x0d4b4407
-    ,0x45940e4a
-    ,0x86449c50
-    ,0x8f014b96
-    ,0x488f0e49
-    ,0x76722476
-    ,0x4a920425
-    ,0x07267673
-    ,0x0521468f
-    ,0x05424407
-    ,0x7674438e
-    ,0x29767528
-    ,0x7a2b7677
-    ,0x4406a045
-    ,0x024b064b
-    ,0x07b04904
-    ,0x23767048
-    ,0x8e01458e
-    ,0x4a458046
-    ,0x76464500
-    ,0x44012a76
-    ,0x0e43c00f
-    ,0x900e488f
-    ,0x4b900e49
-    ,0x02449407
-    ,0x29766c2b
-    ,0x0028766b
-    ,0x767843b6
-    ,0x4297dd22
-    ,0x90012a76
-    ,0x26766a4a
-    ,0x71257669
-    ,0x766e2476
-    ,0x0149540f
-    ,0x000b4b08
-    ,0x4505b444
-    ,0x6d46540d
-    ,0x428e0648
-    ,0x63434601
-    ,0x76674206
-    ,0x48050d23
-    ,0xcf004650
-    ,0x44820045
-    ,0x144b00b4
-    ,0xae5049ae
-    ,0x65297663
-    ,0x76682b76
-    ,0x25766024
-    ,0x2a267661
-    ,0x42080748
-    ,0x0223765e
-    ,0x766f43cd
-    ,0x28766222
-    ,0x07f245cd
-    ,0x44061645
-    ,0x344b04c1
-    ,0x057d4905
-    ,0x48ce0942
-    ,0x3649ce00
-    ,0x4bcf06b0
-    ,0x0844ce0f
-    ,0x2cf42676
-    ,0x29765a2a
-    ,0x66287659
-    ,0x00b82276
-    ,0x57444582
-    ,0x765f2576
-    ,0x43040224
-    ,0x582b765c
-    ,0x2a766449
+    ,0x45440746
+    ,0x034406c0
+    ,0x04424b44
+    ,0x47000342
+    ,0xc40142c6
+    ,0x44c6404b
+    ,0xbe45be88
+    ,0x440746bf
+    ,0xfb2396fe
+    ,0xca102a96
+    ,0x43c6034a
+    ,0x5247c074
+    ,0x96ff2596
+    ,0x2b96fc24
+    ,0xf92296fd
+    ,0xb2a82796
+    ,0x074b000f
+    ,0x08074444
+    ,0x45080146
+    ,0xf72696f8
+    ,0x48000b43
+    ,0xfa434407
+    ,0xc00f2896
+    ,0x42440747
+    ,0x8a0044bc
+    ,0x4292864b
+    ,0x0d47a600
+    ,0x93dd4a54
+    ,0xef2496f6
+    ,0x96ee2696
+    ,0x4500a425
+    ,0x104600a8
+    ,0x2396f548
+    ,0xf04a5032
+    ,0x96f42796
+    ,0x2b96f322
+    ,0x44034205
+    ,0x2a96f247
+    ,0xf143540f
+    ,0x8e002896
+    ,0x014a4581
+    ,0x9e5047b8
+    ,0x4bba4042
+    ,0x0d4b06c0
+    ,0x48ba5223
+    ,0x4246040f
+    ,0x6cf44804
+    ,0x439e2424
+    ,0x96ea2496
+    ,0x2296eb2b
+    ,0x032796e7
+    ,0x96ec4aba
+    ,0x072a96e9
+    ,0x44074744
+    ,0x44000342
+    ,0xed4b4407
+    ,0x48478043
+    ,0x102696e6
+    ,0x96e846be
+    ,0x43440728
+    ,0xb474b265
+    ,0x42b28844
+    ,0x0747df20
+    ,0xb3be4a44
+    ,0x2296e227
+    ,0xe52496e4
+    ,0x96e12596
+    ,0x4bb0102b
+    ,0x96df4654
+    ,0x48ff0028
+    ,0x082396e3
+    ,0x96de4a9a
+    ,0x0342e854
+    ,0x00034200
+    ,0x2a96e047
+    ,0x0f430739
+    ,0x46b83426
+    ,0x0343f644
+    ,0xcc744a00
+    ,0x248dfc47
+    ,0x96d54847
+    ,0x256dd827
+    ,0xda4ad808
+    ,0x96dd2396
+    ,0xd842001f
+    ,0x3df02b96
+    ,0x2296d92b
+    ,0x802496db
+    ,0x2a96d743
+    ,0x0f2596dc
+    ,0xd70147c0
+    ,0x44468248
+    ,0x96002896
+    ,0x45000347
+    ,0x804a4407
+    ,0x001f4647
+    ,0xd248540f
+    ,0x96d02496
+    ,0x428cc022
+    ,0xd644bf05
+    ,0x43ace023
+    ,0x2046cb00
+    ,0xc40c4acb
+    ,0x2796cc45
+    ,0x96d34700
+    ,0x2a96ce25
+    ,0xd42b6d20
+    ,0x96d12696
+    ,0x014a0003
+    ,0xc4084508
+    ,0x2896cd47
+    ,0x0348a434
+    ,0x2496c94b
+    ,0x1c2296c7
+    ,0x8dea226d
+    ,0x2b96cf24
+    ,0x08214746
+    ,0x2796c346
+    ,0x5445008e
+    ,0x07394ad4
+    ,0xc64a000f
+    ,0xe2442b96
+    ,0x2a96c54b
+    ,0x822596ca
+    ,0x46009626
+    ,0x03476800
+    ,0x2dd04500
+    ,0x28bdf024
+    ,0x96c02896
+    ,0x236cf824
+    ,0xba45b874
+    ,0x96cb2796
+    ,0x074b4682
+    ,0x001b4454
+    ,0x2a96bc48
+    ,0xc44aa8dc
+    ,0x479ca445
+    ,0x1f464780
+    ,0x96c14700
+    ,0x2396c825
+    ,0x8cc02896
+    ,0x44a70148
+    ,0x034bab05
+    ,0x44014300
+    ,0x0c457003
+    ,0x4d0143b0
+    ,0x2b96bd2a
+    ,0xbb2496b7
+    ,0x47001b25
+    ,0xc2226dec
+    ,0xc3012696
+    ,0x2796b146
+    ,0x00034b00
+    ,0x4b08014a
+    ,0xbf2a96b3
+    ,0x96b82396
+    ,0xbe440013
+    ,0xa4ac2296
+    ,0x45001747
+    ,0xa843c00f
+    ,0x46043943
+    ,0xa8459ca4
+    ,0x9ca42796
+    ,0x42082144
+    ,0x96aa2396
+    ,0x4b00072a
+    ,0xb44a9ca4
+    ,0xaa002b96
+    ,0xae4200aa
+    ,0x00032496
+    ,0x2596af47
+    ,0xb6466944
+    ,0x2696b943
+    ,0xc4450013
+    ,0x000f47c8
+    ,0x2296b544
+    ,0x96ab2896
+    ,0x4b9ca42b
+    ,0x03282cfe
+    ,0x000f4a00
+    ,0xac27969f
+    ,0x001b45a4
+    ,0x439ca446
+    ,0xb24ad0cc
+    ,0x42000b46
+    ,0xa52596a6
+    ,0x00032496
+    ,0x44a4ac47
+    ,0x000348a4
+    ,0x48001f4a
+    ,0xad2a96a1
+    ,0x9ca42396
+    ,0x03440003
+    ,0x9ca44500
+    ,0x2696b042
+    ,0xac43000b
+    ,0x2296ac46
+    ,0xb845c0bc
+    ,0x969644bc
+    ,0x47a4a027
+    ,0xa82a9698
+    ,0xbc7b4aac
+    ,0xac2896a9
+    ,0x001743a4
+    ,0x42000725
+    ,0xa446a4ac
+    ,0x00032396
+    ,0x2b96a248
+    ,0xa4ac2696
+    ,0x44440742
+    ,0x9c451c07
+    ,0x969d2496
+    ,0x1f4a4509
+    ,0xbd0c4700
+    ,0x48ccc82b
+    ,0xa7430003
+    ,0x43b8b446
+    ,0x992896a0
+    ,0xacb42b96
+    ,0x4ad10747
+    ,0x96942496
+    ,0x457bb225
+    ,0xa3447b30
+    ,0x00032296
+    ,0x034b4780
+    ,0x969b4800
+    ,0x46c4c023
+    ,0x93420003
+    ,0x4bd20048
+    ,0x004a0003
+    ,0x968f4745
+    ,0x27968d2a
+    ,0x00134500
+    ,0x42b4b044
+    ,0x0026969e
+    ,0xa8a44344
+    ,0x0343d001
+    ,0x969a4600
+    ,0x44acb422
+    ,0x1745acb4
+    ,0x2796842a
+    ,0xb447d501
+    ,0x96904aac
+    ,0x2896972b
+    ,0xa09c4204
+    ,0x23969246
+    ,0x07484409
+    ,0x96864b00
+    ,0x0f42d15a
+    ,0x540d4500
+    ,0x25968b44
+    ,0x4b24968a
+    ,0x2b968728
+    ,0x004bacb4
+    ,0x000f48d0
+    ,0x26969543
+    ,0x86004450
+    ,0x22969145
+    ,0xb446001b
+    ,0x968e43ac
+    ,0xb42a4ce8
+    ,0x000b46ac
+    ,0x25968242
+    ,0x3a249681
+    ,0x2a967d26
+    ,0x0b48d201
+    ,0x47804300
+    ,0x23968948
+    ,0x967e4607
+    ,0x2296882b
+    ,0xec42acb4
+    ,0x968c2b4c
+    ,0x80285d14
+    ,0x8a002396
+    ,0x28968543
+    ,0xd24a0444
+    ,0x224cfc22
+    ,0x034b06d0
+    ,0x3d1446d4
+    ,0x4a8f0e27
+    ,0x9674b445
+    ,0x27967b2a
+    ,0x01269683
+    ,0x967f4b8f
+    ,0x4706b046
+    ,0x344a07b0
+    ,0x44074804
+    ,0x28967c44
+    ,0x44074396
+    ,0x42052143
+    ,0x75259679
+    ,0x050d2b96
+    ,0x5047940e
+    ,0x0402469c
+    ,0x4505d44b
+    ,0x86429204
+    ,0x2896732a
+    ,0xdd249678
+    ,0x8f074497
+    ,0x4a8f0e48
+    ,0x8e052296
+    ,0x4b900e45
+    ,0x7226967a
+    ,0x966b2796
+    ,0x702b966c
+    ,0x064b2596
+    ,0x42458043
+    ,0x76239677
+    ,0x44066344
+    ,0x0d484500
+    ,0x44014a05
+    ,0x4606a047
+    ,0x94074b54
+    ,0x478e0246
+    ,0x014aae50
+    ,0x8e06488e
+    ,0x6d23966e
+    ,0x90012296
+    ,0x43900e42
+    ,0x0f45c00f
+    ,0x2a966228
+    ,0x71279669
+    ,0xae142696
+    ,0x45b6004b
+    ,0x057d4705
+    ,0x4408074a
+    ,0x6f48540d
+    ,0x966a2496
+    ,0x01454601
+    ,0x96674308
+    ,0x2b966325
+    ,0xb446000b
+    ,0x4ace0944
+    ,0x0047cf00
+    ,0x05344682
+    ,0x4300b44b
+    ,0x96592796
+    ,0x2496662a
+    ,0x2a289661
+    ,0x00b84850
+    ,0x6545cd02
+    ,0xce002396
+    ,0x224cf44b
+    ,0x60269668
+    ,0x46061647
+    ,0x5a229664
+    ,0x04c12b96
+    ,0x25965e43
+    ,0xce0f4204
+    ,0x47cd0846
+    ,0x074ac010
+    ,0x07f24a44
+    ,0x28965844
+    ,0x0584b058
+    ,0x43cf0644
+    ,0x304b4407
+    ,0x04022696
+    ,0x42cf0945
+    ,0x5c4bc288
+    ,0xcf012396
+    ,0x63464582
+    ,0x05214a06
+    ,0x2a965047
+    ,0x5f279657
+    ,0x24965d48
+    ,0x51430003
+    ,0x965b2b96
+    ,0x45ca0222
+    ,0x05d44244
+    ,0x43c4744b
+    ,0x0348aa08
+    ,0x44074444
+    ,0x0427964e
+    ,0xa20647a6
+    ,0x46ca064a
+    ,0x07259655
+    ,0x4ba20523
+    ,0x4442c3be
+    ,0x96564504
+    ,0x2a964726
+    ,0x96544306
+    ,0x48000b24
+    ,0x4f44c801
+    ,0x96532896
+    ,0xd04a000b
+    ,0xa30e4606
+    ,0x22965245
+    ,0xb02b9648
+    ,0x25964c42
+    ,0x0046a301
+    ,0x00cc4a96
+    ,0x47000f47
+    ,0xd0c02896
+    ,0x44043448
+    ,0x0143a80e
+    ,0x06a04b44
+    ,0x07450402
+    ,0xa20242a8
+    ,0x23964a4b
+    ,0x4644a307
+    ,0x47000f46
+    ,0x454a000b
+    ,0x963e2796
+    ,0x26964d2a
+    ,0x45802496
+    ,0x2b963f43
+    ,0x0e229649
+    ,0x064b45a4
+    ,0x014b001f
+    ,0x7be243a4
+    ,0x4407b048
+    ,0x4b484407
+    ,0x4ad8f02a
+    ,0x0e47f8a6
+    ,0x964346a4
+    ,0x42450025
+    ,0xa2014be4
+    ,0x45540f42
+    ,0x3c269644
+    ,0x96352796
+    ,0x4248001f
+    ,0xa30e2496
+    ,0x28963d44
+    ,0xfc239641
+    ,0x25963a42
+    ,0x4045cc28
+    ,0x96362296
+    ,0x43001f2b
+    ,0xb8d04700
+    ,0x267dfc48
+    ,0x0f43d0e8
+    ,0x000f4b54
+    ,0x3842d8f0
+    ,0x96384bcc
+    ,0x28963423
+    ,0x1f26963b
+    ,0x43440745
+    ,0x372b962d
+    ,0x96392296
+    ,0x245dfc24
+    ,0x98b02796
+    ,0x2abdfc47
     ,0x03464407
-    ,0xca024b00
-    ,0x45052143
-    ,0x043046aa
-    ,0x49c2884a
-    ,0x0748c010
-    ,0x44074844
-    ,0x0444ca06
-    ,0x765545a6
-    ,0x42058423
-    ,0x084bc474
-    ,0x2b765326
-    ,0x4442cf01
-    ,0x764e4304
-    ,0x24765625
-    ,0x05d44806
-    ,0x28765049
-    ,0x09297651
-    ,0x764f4acf
-    ,0x5d43a30e
-    ,0x06b02276
-    ,0x46000b4b
-    ,0x632a765b
-    ,0x23764c42
-    ,0x014500cc
-    ,0x06d044a3
-    ,0x45000f44
-    ,0xa20649a2
-    ,0x4a440748
-    ,0x0e46d0c0
-    ,0x44034ba8
-    ,0x462b764a
-    ,0xc3be2676
-    ,0x2876474a
-    ,0x05297648
-    ,0x45000f44
-    ,0x4524764d
-    ,0x04022576
-    ,0x42c80143
-    ,0x44072a76
-    ,0x4b458046
-    ,0x0e227654
-    ,0x064b43a4
-    ,0x004a06a0
-    ,0xa2024896
-    ,0x49440149
-    ,0x5248000b
-    ,0x44a40e45
-    ,0x34237643
-    ,0xa4014204
-    ,0x467be24b
-    ,0xa3072b76
-    ,0x43540f42
-    ,0x3c247644
-    ,0xf8a62576
-    ,0x3f48000b
-    ,0x763e2976
-    ,0x4aa80728
-    ,0x4126763d
-    ,0x22764b43
-    ,0x1f4b001f
-    ,0x76494600
-    ,0x49001f2a
-    ,0xb8d04a45
-    ,0x4bd0e846
-    ,0x3a4207b0
-    ,0xcc282376
-    ,0x3545001f
-    ,0xd8f02876
-    ,0x245dfc48
-    ,0x0049e4fc
-    ,0x2b763842
-    ,0x3b267634
-    ,0xa2012476
-    ,0x2976364a
-    ,0x44072a76
-    ,0x46000344
-    ,0x07227642
-    ,0xa30e4b44
-    ,0x2d289dfc
-    ,0x76332976
-    ,0x4598b025
-    ,0x40293c10
-    ,0x4bce2b2b
-    ,0x92223dfc
-    ,0x7bf246f4
-    ,0x4a000f44
-    ,0x76324ad8
-    ,0x43001f24
-    ,0x3926762b
-    ,0x762f2276
-    ,0x3744001f
-    ,0x45002a76
-    ,0x49001f48
-    ,0xf028762c
-    ,0x44d0f822
-    ,0x31464407
-    ,0xf8962376
-    ,0x256dfc43
-    ,0x88b02976
-    ,0x25762a49
-    ,0xfc48a400
-    ,0x3dfc2abd
-    ,0x302a762e
-    ,0x000b2276
-    ,0x2876234b
-    ,0x2445548f
-    ,0x4a001f43
-    ,0x2244000f
-    ,0x7b102676
-    ,0x24762946
-    ,0xa9012576
-    ,0x48440745
-    ,0x1f4bc8f0
-    ,0x000f4200
-    ,0x43c8f04a
-    ,0x2642d4fc
-    ,0xb8692b76
-    ,0x21488e2b
-    ,0x76282276
-    ,0x2a762523
-    ,0x00247620
-    ,0xa8d044b6
-    ,0x1a490007
-    ,0x761b2876
-    ,0x46540f29
-    ,0x274b001f
-    ,0x43000f4a
-    ,0xc0420005
-    ,0x8c184bb0
-    ,0x48001f46
-    ,0x90a043d6
-    ,0x4444074a
-    ,0xda257618
-    ,0x001f254d
-    ,0xa049a8c0
-    ,0x76194888
-    ,0x2b761d26
-    ,0xb642d0e0
-    ,0x22761e23
-    ,0x0f4b0001
-    ,0x76114600
-    ,0x29761228
-    ,0xccc02476
-    ,0x45000b45
-    ,0x1c44b400
-    ,0x761f2a76
-    ,0x8e4698b0
-    ,0x44074bb0
-    ,0x4346ca42
-    ,0x174a000f
-    ,0x4ab89044
-    ,0x0243b201
-    ,0x761442b1
-    ,0x2676102b
-    ,0x7615232a
-    ,0x23761622
-    ,0x002a7613
-    ,0x000f4482
-    ,0x81223680
-    ,0x36822436
-    ,0x42860025
-    ,0x0042000b
+    ,0x001f4800
+    ,0x9643ce2b
+    ,0xf49245f8
+    ,0x467bf248
+    ,0x332a962c
+    ,0x2696324a
+    ,0x2b4b001f
+    ,0x96312896
+    ,0x23962f25
+    ,0x962e4aa4
+    ,0x24963022
+    ,0xfc245dfc
+    ,0x4500223d
+    ,0x24484407
+    ,0x88b02b96
+    ,0x278dfc4b
+    ,0x0046001f
+    ,0x45000f27
+    ,0x1f44001f
+    ,0x96234200
+    ,0x46d0f82a
+    ,0xc8f044d4
+    ,0x43c8f045
+    ,0x0b47548f
+    ,0x962a4300
+    ,0x10289622
+    ,0x9629487b
+    ,0x4a440726
+    ,0xfc42a8d0
+    ,0x96272596
+    ,0x22962524
+    ,0x8b4a8e2b
+    ,0x46000fb8
+    ,0x1f45000f
+    ,0x96214300
+    ,0x47a90127
+    ,0x28239626
+    ,0x46b60026
+    ,0x1a2b961b
+    ,0x001f2a96
+    ,0x44000542
+    ,0xd0e045d6
+    ,0x4290a044
+    ,0x074a001f
+    ,0x96204b00
+    ,0x1825961f
+    ,0x961d488c
+    ,0x43b0c023
+    ,0xb648540f
+    ,0x4ba8c02b
+    ,0xda4a88a0
+    ,0x961c276d
+    ,0x24961e22
+    ,0x44074546
+    ,0x42000f44
+    ,0x11279618
+    ,0x96122a96
+    ,0x0f43b08e
+    ,0x00014800
+    ,0x28961943
+    ,0xca464407
+    ,0x47000b47
+    ,0x0242b890
+    ,0xb20144b1
+    ,0x46b40045
+    ,0x96172396
+    ,0x25961626
+    ,0x13249615
+    ,0xccc02296
+    ,0x0f45000b
+    ,0x2a004600
+    ,0x28961023
+    ,0x144898b0
+    ,0x45860046
+    ,0x50449810
+    ,0x050d4298
+    ,0x44540f42
+    ,0x36812236
+    ,0x25368224
+    ,0x84263683
+    ,0x82002736
     ,0x00428888
     ,0xc1304400
-    ,0x0f000000
-    ,0x0c0200d0
+    ,0xd00f0000
+    ,0x800c0200
     ,0x00000000
     ,0x9230d00f
     ,0x07809340
@@ -1568,7 +1572,7 @@ const GT_U32 prvCpssDxChPpaFwImemFalconImage02[PRV_CPSS_DXCH_PPA_FW_IMAGE_SIZE_F
     ,0xff7f0104
     ,0x1dcd4364
     ,0x20029543
-    ,0x405000f2
+    ,0x405000f3
     ,0x22004342
     ,0x4d00004d
     ,0x0043000f
@@ -1632,7 +1636,7 @@ const GT_U32 prvCpssDxChPpaFwImemFalconImage02[PRV_CPSS_DXCH_PPA_FW_IMAGE_SIZE_F
     ,0xff7f0104
     ,0x1dcd4364
     ,0x20029543
-    ,0x405000b2
+    ,0x405000b3
     ,0x22004342
     ,0x4d00004d
     ,0x0043000f
@@ -1708,30 +1712,30 @@ const GT_U32 prvCpssDxChPpaFwImemFalconImage02[PRV_CPSS_DXCH_PPA_FW_IMAGE_SIZE_F
     ,0x7711277d
     ,0x02024b0e
     ,0x61264660
-    ,0x466a2546
+    ,0x466b2546
     ,0x26762525
     ,0x4662989e
     ,0x25466325
-    ,0x6e25466d
-    ,0x466b2546
-    ,0x25466725
-    ,0x69254668
-    ,0x29343b25
-    ,0xcc2cc392
-    ,0xb625466f
-    ,0x25466cc3
+    ,0x6c25466f
+    ,0x46672546
+    ,0x25466825
+    ,0x6a254669
+    ,0x2cc39229
+    ,0x254670cc
+    ,0x466dc3b6
+    ,0x25466e25
+    ,0x00002b34
+    ,0x60000e4a
+    ,0x71254672
     ,0x343b2546
-    ,0x4a00002b
-    ,0x7160000e
-    ,0x46702546
-    ,0x00252680
-    ,0x0000423e
-    ,0x25a6ff42
-    ,0x724a0e00
-    ,0x00000000
-    ,0x00d00f00
-    ,0x22810a20
-    ,0x0c020022
+    ,0x00423e00
+    ,0xa6ff4200
+    ,0x4a0e0025
+    ,0x3b254673
+    ,0xd00f0000
+    ,0x810a2000
+    ,0x02002222
+    ,0x2526800c
     ,0x00441200
     ,0x00004bfe
     ,0x4400004b
@@ -1764,102 +1768,102 @@ const GT_U32 prvCpssDxChPpaFwImemFalconImage02[PRV_CPSS_DXCH_PPA_FW_IMAGE_SIZE_F
     ,0x0faa1100
     ,0x9e28828a
     ,0x2b82899b
-    ,0x4b264675
-    ,0x46820202
+    ,0x4b264676
+    ,0x46840202
     ,0x22228325
     ,0x19080849
-    ,0x25467825
+    ,0x25467925
     ,0x11277d13
-    ,0x46730e77
-    ,0x25467425
-    ,0x467e2546
-    ,0x26763925
-    ,0x76289611
-    ,0x46772546
-    ,0xc39a2934
-    ,0x467fcc2b
-    ,0x25467b25
-    ,0x7d25467c
-    ,0x00004a0e
-    ,0x10c3be4a
-    ,0x95416000
-    ,0x3b254680
-    ,0x00423e00
-    ,0xa6f94200
-    ,0x25468125
-    ,0x002b343b
-    ,0xd00f0000
-    ,0x810a2000
-    ,0x02002222
-    ,0x2526800c
-    ,0xfc2553fc
-    ,0x53fbfd53
-    ,0x1053f97a
+    ,0x46740e77
+    ,0x25467525
+    ,0x46802546
+    ,0x26763a25
+    ,0x77289611
+    ,0x46782546
+    ,0x81cc2bc3
+    ,0x467c2546
+    ,0x25467d25
+    ,0x7f25467e
+    ,0xc3be4a00
+    ,0x41600010
+    ,0x25468295
+    ,0x9a29343b
+    ,0xf9420000
+    ,0x468325a6
+    ,0x2b343b25
+    ,0x004a0e00
+    ,0x0a2000d0
+    ,0x00222281
+    ,0x26800c02
+    ,0x423e0025
+    ,0x53fbfc53
+    ,0x1053f975
     ,0x211cf090
-    ,0xf553fd50
-    ,0xfc9e53fc
-    ,0x53fc6e53
-    ,0x3453fc43
-    ,0x53fe2053
-    ,0xfe53fe15
-    ,0xfdf353fd
-    ,0x53fd9f53
-    ,0xfee153fe
-    ,0x53fed153
-    ,0x7353feb2
-    ,0xfe4453fe
-    ,0x7953ffb0
-    ,0xf97253ff
-    ,0x53ff3a53
-    ,0xec53fefb
-    ,0x20056f04
+    ,0x0f000000
+    ,0xfc9d53fc
+    ,0x53fc6d53
+    ,0x3353fc42
+    ,0xfc2453fc
+    ,0xfd53fe14
+    ,0xfdf253fd
+    ,0x53fd9e53
+    ,0xf453fd4f
+    ,0x53fed053
+    ,0x7253feb1
+    ,0xfe4353fe
+    ,0x53fe1f53
+    ,0xf96d53ff
+    ,0x53ff3953
+    ,0xeb53fefa
+    ,0xfee053fe
     ,0x6e3230d6
     ,0x10d00f00
     ,0x8010211c
-    ,0x00331ac0
+    ,0x7853ffaf
     ,0x0c004104
     ,0x5b290544
     ,0x043f0474
-    ,0x031314b0
+    ,0x20056f04
     ,0x220f2211
     ,0x03660cb1
     ,0x20736304
-    ,0xc839d00f
+    ,0x00331ac0
     ,0x22d00f00
     ,0x736301b1
     ,0x44654fec
-    ,0x44495630
+    ,0x031314b0
     ,0x00000000
     ,0x21d00f00
     ,0x73630cc0
-    ,0xb1318316
+    ,0xc839d00f
     ,0x15b33303
     ,0x03b13082
     ,0xc020d00f
-    ,0xffffffff
+    ,0x44495630
     ,0xffffffff
     ,0x01000300
     ,0xc72f211d
+    ,0xb1318316
 };
 
 /* Table to hold thread PC address. Each entry represents different thread. */
 const GT_U32 phaFwThreadsPcAddressFalconImage02[PRV_CPSS_DXCH_PHA_MAX_THREADS_CNS] = {
      0x400160                                            /* 0 THR0_DoNothing */
-    ,0x400b70                                            /* 1 THR1_SRv6_End_Node */
-    ,0x400c10                                            /* 2 THR2_SRv6_Source_Node_1_segment */
-    ,0x400c50                                            /* 3 THR3_SRv6_Source_Node_First_Pass_2_3_segments */
-    ,0x400c90                                            /* 4 THR4_SRv6_Source_Node_Second_Pass_3_segments */
-    ,0x400d40                                            /* 5 THR5_SRv6_Source_Node_Second_Pass_2_segments */
-    ,0x400e00                                            /* 6 THR6_Cc_Erspan_TypeII_TrgDevLcMirroring_Ipv4 */
-    ,0x400f60                                            /* 7 THR7_Cc_Erspan_TypeII_TrgDevLcMirroring_Ipv6 */
-    ,0x4010d0                                            /* 8 THR8_Cc_Erspan_TypeII_TrgDevDirectMirroring_Ipv4 */
-    ,0x401210                                            /* 9 THR9_Cc_Erspan_TypeII_TrgDevDirectMirroring_Ipv6 */
-    ,0x401360                                            /* 10 THR10_Cc_Erspan_TypeII_SrcDevMirroring */
-    ,0x401390                                            /* 11 THR11_VXLAN_GPB_SourceGroupPolicyID */
-    ,0x4013f0                                            /* 12 THR12_MPLS_SR_NO_EL */
-    ,0x401420                                            /* 13 THR13_MPLS_SR_ONE_EL */
-    ,0x4014b0                                            /* 14 THR14_MPLS_SR_TWO_EL */
-    ,0x401570                                            /* 15 THR15_MPLS_SR_THREE_EL */
+    ,0x400b80                                            /* 1 THR1_SRv6_End_Node */
+    ,0x400c20                                            /* 2 THR2_SRv6_Source_Node_1_segment */
+    ,0x400c60                                            /* 3 THR3_SRv6_Source_Node_First_Pass_2_3_segments */
+    ,0x400ca0                                            /* 4 THR4_SRv6_Source_Node_Second_Pass_3_segments */
+    ,0x400d50                                            /* 5 THR5_SRv6_Source_Node_Second_Pass_2_segments */
+    ,0x400e10                                            /* 6 THR6_Cc_Erspan_TypeII_TrgDevLcMirroring_Ipv4 */
+    ,0x400f70                                            /* 7 THR7_Cc_Erspan_TypeII_TrgDevLcMirroring_Ipv6 */
+    ,0x4010e0                                            /* 8 THR8_Cc_Erspan_TypeII_TrgDevDirectMirroring_Ipv4 */
+    ,0x401220                                            /* 9 THR9_Cc_Erspan_TypeII_TrgDevDirectMirroring_Ipv6 */
+    ,0x401370                                            /* 10 THR10_Cc_Erspan_TypeII_SrcDevMirroring */
+    ,0x4013a0                                            /* 11 THR11_VXLAN_GPB_SourceGroupPolicyID */
+    ,0x401400                                            /* 12 THR12_MPLS_SR_NO_EL */
+    ,0x401430                                            /* 13 THR13_MPLS_SR_ONE_EL */
+    ,0x4014c0                                            /* 14 THR14_MPLS_SR_TWO_EL */
+    ,0x401580                                            /* 15 THR15_MPLS_SR_THREE_EL */
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 16 */
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 17 */
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 18 */
@@ -1897,19 +1901,19 @@ const GT_U32 phaFwThreadsPcAddressFalconImage02[PRV_CPSS_DXCH_PHA_MAX_THREADS_CN
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 50 */
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 51 */
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 52 */
-    ,0x401670                                            /* 53 THR53_SRV6_End_Node_GSID_COC32 */
-    ,0x4016f0                                            /* 54 THR54_IPv4_TTL_Increment */
-    ,0x401730                                            /* 55 THR55_IPv6_HopLimit_Increment */
-    ,0x401760                                            /* 56 THR56_Clear_Outgoing_Mtag_Cmd */
-    ,0x4017a0                                            /* 57 THR57_SFLOW_V5_IPv4 */
-    ,0x4018a0                                            /* 58 THR58_SFLOW_V5_IPv6 */
+    ,0x401680                                            /* 53 THR53_SRV6_End_Node_GSID_COC32 */
+    ,0x401700                                            /* 54 THR54_IPv4_TTL_Increment */
+    ,0x401740                                            /* 55 THR55_IPv6_HopLimit_Increment */
+    ,0x401770                                            /* 56 THR56_Clear_Outgoing_Mtag_Cmd */
+    ,0x4017b0                                            /* 57 THR57_SFLOW_V5_IPv4 */
+    ,0x4018b0                                            /* 58 THR58_SFLOW_V5_IPv6 */
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 59 */
     ,0x400180                                            /* 60 THR60_DropAllTraffic */
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 61 */
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 62 */
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 63 */
-    ,0x4019a0                                            /* 64 THR64_Erspan_TypeII_SameDevMirroring_Ipv4 */
-    ,0x401a80                                            /* 65 THR65_Erspan_TypeII_SameDevMirroring_Ipv6 */
+    ,0x4019b0                                            /* 64 THR64_Erspan_TypeII_SameDevMirroring_Ipv4 */
+    ,0x401a90                                            /* 65 THR65_Erspan_TypeII_SameDevMirroring_Ipv6 */
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 66 */
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 67 */
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 68 */
@@ -2292,37 +2296,37 @@ const GT_U32 phaFwAccelCmdsFalconImage02[FW_ACCEL_CMDS_MAX_NUM_CNS] = {
    ,0x040fbe10 /* COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_srcTrgPortEntry__srcPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4, offset = 0x0358 */
    ,0x4403b801 /* COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x1_LEN4_TO_PKT_ERSPAN_type_II_header__Ver, offset = 0x035c */
    ,0x0442ba52 /* COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__qos_mapped_up_LEN3_TO_PKT_ERSPAN_type_II_header__COS, offset = 0x0360 */
-   ,0x4582ba06 /* COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x6_LEN3_TO_PKT_ERSPAN_type_II_header__En, offset = 0x0364 */
-   ,0x050d9e50 /* COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__egress_byte_count_LEN14_TO_PKT_IPv4_Header__total_length_PLUS2, offset = 0x0368 */
-   ,0x540f9e24 /* ADD_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x24_LEN16_TO_PKT_IPv4_Header__total_length, offset = 0x036c */
-   ,0x0807009c /* CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN8_FROM_PKT_IPv4_Header__version, offset = 0x0370 */
-   ,0x080100a4 /* CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN2_FROM_PKT_IPv4_Header__ttl, offset = 0x0374 */
-   ,0x080700a8 /* CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN8_FROM_PKT_IPv4_Header__sip_high, offset = 0x0378 */
-   ,0xc00fa600 /* CSUM_STORE_IP_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_TO_PKT_IPv4_Header__header_checksum, offset = 0x037c */
-   ,0x000b8e00 /* COPY_BYTES_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_erspan_template__mac_da_47_32_LEN12_TO_PKT_IPv4_Header__version_MINUS14, offset = 0x0380 */
-   ,0x540d5032 /* ADD_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x32_LEN14_TO_DESC_phal2ppa__egress_byte_count, offset = 0x0384 */
-   ,0x000f8a00 /* COPY_BYTES_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_erspan_template__mac_da_47_32_LEN16_TO_PKT_IPv4_Header__version_MINUS18, offset = 0x0388 */
+   ,0x4581ba03 /* COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x3_LEN2_TO_PKT_ERSPAN_type_II_header__En, offset = 0x0364 */
+   ,0x06c0ba40 /* COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__truncated_LEN1_TO_PKT_ERSPAN_type_II_header__T, offset = 0x0368 */
+   ,0x050d9e50 /* COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__egress_byte_count_LEN14_TO_PKT_IPv4_Header__total_length_PLUS2, offset = 0x036c */
+   ,0x540f9e24 /* ADD_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x24_LEN16_TO_PKT_IPv4_Header__total_length, offset = 0x0370 */
+   ,0x0807009c /* CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN8_FROM_PKT_IPv4_Header__version, offset = 0x0374 */
+   ,0x080100a4 /* CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN2_FROM_PKT_IPv4_Header__ttl, offset = 0x0378 */
+   ,0x080700a8 /* CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN8_FROM_PKT_IPv4_Header__sip_high, offset = 0x037c */
+   ,0xc00fa600 /* CSUM_STORE_IP_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_TO_PKT_IPv4_Header__header_checksum, offset = 0x0380 */
+   ,0x000b8e00 /* COPY_BYTES_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_erspan_template__mac_da_47_32_LEN12_TO_PKT_IPv4_Header__version_MINUS14, offset = 0x0384 */
+   ,0x540d5032 /* ADD_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x32_LEN14_TO_DESC_phal2ppa__egress_byte_count, offset = 0x0388 */
+   ,0x000f8a00 /* COPY_BYTES_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_erspan_template__mac_da_47_32_LEN16_TO_PKT_IPv4_Header__version_MINUS18, offset = 0x038c */
    /* 540d5036 ADD_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x36_LEN14_TO_DESC_phal2ppa__egress_byte_count, offset = 0x01bc */
-   ,0x44079286 /* COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x86_LEN8_TO_PKT_ethertype_header__ethertype, offset = 0x038c */
-   ,0x440793dd /* COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0xDD_LEN8_TO_PKT_ethertype_header__ethertype_PLUS8, offset = 0x0390 */
-   ,0x4407bc10 /* COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x10_LEN8_TO_PKT_GRE_header__C, offset = 0x0394 */
-   ,0x4407be88 /* COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x88_LEN8_TO_PKT_GRE_header__NP, offset = 0x0398 */
-   ,0x4407bfbe /* COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0xBE_LEN8_TO_PKT_GRE_header__NP_PLUS8, offset = 0x039c */
-   ,0x0003c074 /* COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__lm_counter_LEN4_TO_PKT_GRE_header__Seq_num, offset = 0x03a0 */
-   ,0x040fca12 /* COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_srcTrgPortEntry__targetPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4, offset = 0x03a4 */
-   ,0x040fca10 /* COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_srcTrgPortEntry__srcPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4, offset = 0x03a8 */
-   ,0x4403c401 /* COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x1_LEN4_TO_PKT_ERSPAN_type_II_header__Ver, offset = 0x03ac */
-   ,0x0442c652 /* COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__qos_mapped_up_LEN3_TO_PKT_ERSPAN_type_II_header__COS, offset = 0x03b0 */
-   ,0x4582c606 /* COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x6_LEN3_TO_PKT_ERSPAN_type_II_header__En, offset = 0x03b4 */
-   ,0x050d9850 /* COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__egress_byte_count_LEN14_TO_PKT_IPv6_Header__payload_length_PLUS2, offset = 0x03b8 */
-   ,0x540f9810 /* ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x10_LEN16_TO_PKT_IPv6_Header__payload_length, offset = 0x03bc */
-   ,0x000b8600 /* COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_erspan_template__mac_da_47_32_LEN12_TO_PKT_IPv6_Header__version_MINUS14, offset = 0x03c0 */
+   ,0x44079286 /* COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x86_LEN8_TO_PKT_ethertype_header__ethertype, offset = 0x0390 */
+   ,0x440793dd /* COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0xDD_LEN8_TO_PKT_ethertype_header__ethertype_PLUS8, offset = 0x0394 */
+   ,0x4407bc10 /* COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x10_LEN8_TO_PKT_GRE_header__C, offset = 0x0398 */
+   ,0x4407be88 /* COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x88_LEN8_TO_PKT_GRE_header__NP, offset = 0x039c */
+   ,0x4407bfbe /* COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0xBE_LEN8_TO_PKT_GRE_header__NP_PLUS8, offset = 0x03a0 */
+   ,0x0003c074 /* COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__lm_counter_LEN4_TO_PKT_GRE_header__Seq_num, offset = 0x03a4 */
+   ,0x040fca12 /* COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_srcTrgPortEntry__targetPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4, offset = 0x03a8 */
+   ,0x040fca10 /* COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_srcTrgPortEntry__srcPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4, offset = 0x03ac */
+   ,0x4403c401 /* COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x1_LEN4_TO_PKT_ERSPAN_type_II_header__Ver, offset = 0x03b0 */
+   ,0x0442c652 /* COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__qos_mapped_up_LEN3_TO_PKT_ERSPAN_type_II_header__COS, offset = 0x03b4 */
+   ,0x4581c603 /* COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x3_LEN2_TO_PKT_ERSPAN_type_II_header__En, offset = 0x03b8 */
+   ,0x06c0c640 /* COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__truncated_LEN1_TO_PKT_ERSPAN_type_II_header__T, offset = 0x03bc */
+   ,0x050d9850 /* COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__egress_byte_count_LEN14_TO_PKT_IPv6_Header__payload_length_PLUS2, offset = 0x03c0 */
+   ,0x540f9810 /* ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x10_LEN16_TO_PKT_IPv6_Header__payload_length, offset = 0x03c4 */
+   ,0x000b8600 /* COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_erspan_template__mac_da_47_32_LEN12_TO_PKT_IPv6_Header__version_MINUS14, offset = 0x03c8 */
    /* 540d503a ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x3A_LEN14_TO_DESC_phal2ppa__egress_byte_count, offset = 0x01c4 */
-   ,0x000f8200 /* COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_erspan_template__mac_da_47_32_LEN16_TO_PKT_IPv6_Header__version_MINUS18, offset = 0x03c4 */
+   ,0x000f8200 /* COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_erspan_template__mac_da_47_32_LEN16_TO_PKT_IPv6_Header__version_MINUS18, offset = 0x03cc */
    /* 540d503e ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x3E_LEN14_TO_DESC_phal2ppa__egress_byte_count, offset = 0x01a4 */
-   ,0x000bccc0 /* SHIFTRIGHT_12_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_LEN12_FROM_PKT_mac_header__mac_da_47_32, offset = 0x03c8 */
-   ,0x00000000 /* offset = 0x03cc */
-   ,0x00000000 /* offset = 0x03d0 */
+   ,0x000bccc0 /* SHIFTRIGHT_12_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_LEN12_FROM_PKT_mac_header__mac_da_47_32, offset = 0x03d0 */
    ,0x00000000 /* offset = 0x03d4 */
    ,0x00000000 /* offset = 0x03d8 */
    ,0x00000000 /* offset = 0x03dc */
diff --git a/mainPpDrv/h/cpss/dxCh/dxChxGen/pha/private/prvCpssDxChPpaFwImageInfo_FalconImage02Oldest.h b/mainPpDrv/h/cpss/dxCh/dxChxGen/pha/private/prvCpssDxChPpaFwImageInfo_FalconImage02Oldest.h
index 74d93bbc0d..a2d6447863 100644
--- a/mainPpDrv/h/cpss/dxCh/dxChxGen/pha/private/prvCpssDxChPpaFwImageInfo_FalconImage02Oldest.h
+++ b/mainPpDrv/h/cpss/dxCh/dxChxGen/pha/private/prvCpssDxChPpaFwImageInfo_FalconImage02Oldest.h
@@ -18,7 +18,7 @@
  *
  *   APPLICABLE DEVICES: Falcon.
  *
- * @version 21_10_00_00
+ * @version 21_10_01_00
  *******************************************************************************
  */
 
@@ -27,12 +27,12 @@
 
 /* PHA fw version information */
 const PRV_CPSS_DXCH_PHA_FW_IMAGE_VERSION_INFO_STC fwImageVersionFalconImage02Oldest = {
-	 0x21100000 /* | year << 24 | month << 16 | in_month << 8 | debug | */
+	 0x21100100 /* | year << 24 | month << 16 | in_month << 8 | debug | */
 	,0x02000000 /* image_id << 24 */
-    ,"Image02Oldest"}; /* image_name */
+	,"Image02Oldest"}; /* image_name */
 
 /* The number of words of data in prvCpssDxChPpaFwImemFalconImage02Oldest*/
-#define PRV_CPSS_DXCH_PPA_FW_IMAGE_SIZE_FALCON_IMAGE02OLDEST (1604)
+#define PRV_CPSS_DXCH_PPA_FW_IMAGE_SIZE_FALCON_IMAGE02OLDEST (1800)
 
 /* The FW code to load into the PHA unit */
 const GT_U32 prvCpssDxChPpaFwImemFalconImage02Oldest[PRV_CPSS_DXCH_PPA_FW_IMAGE_SIZE_FALCON_IMAGE02OLDEST] = {
@@ -167,14 +167,14 @@ const GT_U32 prvCpssDxChPpaFwImemFalconImage02Oldest[PRV_CPSS_DXCH_PPA_FW_IMAGE_
     ,0x211cf090
     ,0x10d00f00
     ,0xc020211c
-    ,0x05968010
+    ,0x06578010
     ,0x500042c0
-    ,0x3a500200
+    ,0x3a50024c
     ,0x90105000
     ,0x1100eb30
     ,0x82104366
     ,0x0031c040
-    ,0x43000050
+    ,0x43010050
     ,0x22432110
     ,0x00038011
     ,0x50000750
@@ -236,454 +236,530 @@ const GT_U32 prvCpssDxChPpaFwImemFalconImage02Oldest[PRV_CPSS_DXCH_PPA_FW_IMAGE_
     ,0x0d42cafe
     ,0x84304290
     ,0x00430740
-    ,0x804a540f
-    ,0xc0304247
+    ,0x0f430003
+    ,0xc0604504
     ,0x9230d00f
     ,0x463f8330
-    ,0x46e85444
-    ,0x03460003
-    ,0x44074400
-    ,0x4707394b
-    ,0xff002236
-    ,0x4ab83442
-    ,0x2047f644
-    ,0xd8084bdf
-    ,0xd82b36de
-    ,0x2dfc29ad
-    ,0x2736da28
-    ,0xdf2a36dd
-    ,0x46001f44
-    ,0xf02536d8
-    ,0x36d9257d
-    ,0x2436d726
-    ,0x001f4846
-    ,0x2836db47
-    ,0x032936dc
+    ,0x4244074a
+    ,0x424b540f
+    ,0x44034804
+    ,0x49458247
+    ,0xc65247c4
+    ,0x4b981048
+    ,0x5042bfbe
+    ,0x050d4a98
+    ,0xfa2366f8
+    ,0xca102566
+    ,0x43c07445
+    ,0x0149c606
+    ,0x66ff2266
+    ,0x2866fc2b
+    ,0x542766fb
+    ,0x2966fdb2
+    ,0x07484407
+    ,0x44074b44
+    ,0x4208074a
+    ,0xf72a66fe
+    ,0x45540d43
+    ,0x0743c00f
+    ,0x66f94944
+    ,0x47000f24
+    ,0x92864bbe
+    ,0x478a0048
+    ,0xdd44000b
+    ,0xa6004993
+    ,0xf52b66f6
+    ,0x66ee2a66
+    ,0x4200a822
+    ,0x884abc10
+    ,0x2366ef45
+    ,0x002966f4
+    ,0x66f2448e
+    ,0x2866f327
+    ,0x66f04745
+    ,0x49540f24
+    ,0x0f2566f1
+    ,0x50324304
+    ,0x5047ba06
+    ,0x00a4489e
+    ,0x4b08014b
+    ,0x8248050d
+    ,0x43be1023
+    ,0xf4450442
+    ,0x9e242a2c
+    ,0x44440349
+    ,0xb8012766
+    ,0x2966eb44
+    ,0x522a66ec
+    ,0x66e645ba
+    ,0x03474407
     ,0x44074b00
-    ,0x8044cb20
-    ,0xcc744247
-    ,0x4900034b
-    ,0x824a4780
-    ,0x2b36d549
-    ,0xce42d701
-    ,0x36d02436
-    ,0x468cc026
-    ,0x36d12836
-    ,0x47ace027
-    ,0x0048bf05
-    ,0xc40c4acb
-    ,0x0f2236d6
-    ,0x36d34bc0
-    ,0x25ad2029
-    ,0xd22a36d4
-    ,0x49080125
-    ,0x544b9600
-    ,0x540f44d4
-    ,0x44000342
-    ,0x008e2b36
-    ,0x45073949
-    ,0x1c2636c7
-    ,0x36cf26ad
-    ,0x0f4a0821
-    ,0x36cd4400
-    ,0x42a43422
-    ,0xcc2436c5
-    ,0x2536c649
-    ,0xca45e244
-    ,0x2dea2936
-    ,0x4b000328
-    ,0xa8dc2436
-    ,0x4a009644
-    ,0xc94bc408
-    ,0x00032836
-    ,0x7427acf8
-    ,0x6dd049b8
-    ,0x2b36c328
-    ,0xbc2a36cb
-    ,0x4b468248
-    ,0xc12836c0
-    ,0x36c82936
-    ,0x225df027
-    ,0x00032236
-    ,0x49440147
-    ,0x804b6800
-    ,0x54074a47
-    ,0x0c497003
-    ,0xab0547b0
-    ,0x42001b45
-    ,0xc4454682
-    ,0x2a36c224
-    ,0x012836b7
-    ,0xc30148a7
-    ,0x2b36ba4a
-    ,0x36bf2536
-    ,0x2936b827
-    ,0xec4b001f
-    ,0x8d0126ad
-    ,0x0f490017
-    ,0x080147c0
-    ,0x2236bb45
-    ,0xbd428cc0
-    ,0x4400032b
-    ,0xb3460821
-    ,0x36be2436
-    ,0x4b9ca426
-    ,0x00134500
-    ,0x47aa0048
-    ,0xa44a0439
-    ,0x36b1499c
-    ,0x442936af
-    ,0x36b64a69
-    ,0x489ca427
-    ,0xa82536b4
-    ,0x2436aa4b
-    ,0xaa2636b5
-    ,0x9ca44600
-    ,0x4b001b44
-    ,0x000f2836
-    ,0x2a36b947
-    ,0x13226cfe
-    ,0xa4ac4900
-    ,0xa44a001b
-    ,0x9ca4479c
-    ,0x48000f45
-    ,0xae450007
-    ,0x4b000344
-    ,0xa8440003
-    ,0xa4ac2b36
-    ,0x2236b249
-    ,0x9ca42736
-    ,0x42001f4a
-    ,0xa646000b
-    ,0xd0cc2936
-    ,0xa547000b
-    ,0x00032836
-    ,0x48a4ac45
-    ,0xad2536ab
-    ,0x2436a14b
-    ,0xa4490003
-    ,0xa4ac469c
-    ,0x2a36b042
-    ,0x36ac2236
-    ,0x49c0bc26
-    ,0x9f440003
-    ,0xc8c42b36
-    ,0xac2536a2
-    ,0x000345a4
-    ,0x47a4ac48
-    ,0xa94a0017
-    ,0x46000729
-    ,0xac420003
-    ,0x36a44aa4
-    ,0x48bcb827
-    ,0xa4ac42cc
-    ,0x24369846
-    ,0xa8491c07
-    ,0x369d44ac
-    ,0xf4484407
-    ,0x369c2b5c
-    ,0x47000328
-    ,0xc82a36a7
-    ,0x2636a325
-    ,0x032236a0
-    ,0xb8b44a00
-    ,0x2b369647
-    ,0xd1072536
-    ,0x29369444
-    ,0x09497bb2
-    ,0x5d0c4445
-    ,0x9b4b001f
-    ,0xc4c02736
-    ,0x4200034a
-    ,0x99460003
-    ,0x2a369e42
-    ,0xb4474400
-    ,0x36934bac
-    ,0x487b3028
-    ,0x00174400
-    ,0x24368f49
-    ,0xb0454780
-    ,0xa8a446b4
-    ,0x974a0003
-    ,0x369a2236
-    ,0x45d20026
-    ,0x0349acb4
-    ,0x48acb427
-    ,0x134b4500
-    ,0x368d4800
-    ,0x47d0012b
-    ,0x36902936
-    ,0x46044b25
-    ,0x9c424409
-    ,0x36924aa0
-    ,0x0746d15a
-    ,0x000f4500
-    ,0x24368649
-    ,0x8b44acb4
-    ,0x4bd5012b
-    ,0x0f28368a
-    ,0x36954700
-    ,0x42d0002a
-    ,0x368e2636
-    ,0x4a001b22
-    ,0x0d47acb4
-    ,0x36844854
-    ,0x8746000b
-    ,0x36822536
-    ,0x49860029
-    ,0x9145acb4
-    ,0x28368147
-    ,0x8948503a
-    ,0xacb42736
-    ,0x4247804a
-    ,0xacb42636
-    ,0x42d20146
-    ,0x8c248ce8
-    ,0x000b2a36
-    ,0xd2478a00
-    ,0x8cec4a07
-    ,0x24367d25
-    ,0x88223685
-    ,0x44044422
-    ,0x0325367e
-    ,0x7d144ad4
-    ,0x2736802b
-    ,0x0e4506d0
-    ,0xb489448f
-    ,0xfc26367f
-    ,0x9d14268c
-    ,0x4204344a
-    ,0x7c4b06b0
-    ,0x367b2236
-    ,0x2a36832b
-    ,0x36794605
-    ,0x24367429
-    ,0x01474407
-    ,0x050d458f
-    ,0xb0479686
-    ,0x05d44407
-    ,0x46920449
-    ,0x21484407
-    ,0x2b367222
-    ,0x074b940e
-    ,0x9c50428f
-    ,0x2536754a
-    ,0x8f0e498e
-    ,0x27367744
-    ,0x7a450402
-    ,0x36732a36
-    ,0x78293670
-    ,0x45802836
-    ,0x4897dd46
-    ,0x05263676
-    ,0x4245004b
-    ,0x0e4a06a0
-    ,0x064b4590
-    ,0x24366b47
-    ,0x366c4790
-    ,0x4a940725
-    ,0x02428e01
-    ,0x44014b8e
-    ,0x0126366d
-    ,0x06634690
-    ,0x49c00f48
-    ,0x0e44050d
-    ,0x45540f2a
-    ,0x5027366e
-    ,0xb60044ae
-    ,0x488e0649
-    ,0x05b44a00
-    ,0x42540d4b
-    ,0x6a2b3669
-    ,0x36712236
-    ,0x6728366f
-    ,0x36622936
-    ,0x47080124
-    ,0x0b45ae14
-    ,0x2536634a
-    ,0x7d4700b4
-    ,0x08074405
-    ,0x49460148
-    ,0x36602a36
-    ,0x2236612b
-    ,0x0042502a
-    ,0x82004bcf
-    ,0xb849cd02
-    ,0xce094800
-    ,0x27366544
-    ,0x68450534
-    ,0x4704c145
-    ,0x59268cf4
-    ,0x36662436
-    ,0x29365e28
-    ,0xce0f2536
-    ,0x4bcd084a
-    ,0x164b07f2
-    ,0xce004a06
-    ,0x46043044
-    ,0x64444407
-    ,0xcf062636
-    ,0x5ab09247
-    ,0x05844904
-    ,0x45440748
-    ,0x5c223658
-    ,0xc0102736
-    ,0x2149ca02
-    ,0x45824b05
-    ,0x2b36574a
-    ,0x022a365f
-    ,0x24365046
-    ,0x07470003
-    ,0xc2884244
-    ,0x48cf0145
-    ,0xaa082536
-    ,0x47c47442
-    ,0x6326365b
-    ,0xcf094406
-    ,0x062a3656
-    ,0xa6044aca
-    ,0x2936554b
-    ,0x5128365d
-    ,0x22364f27
-    ,0x034505d4
-    ,0x04444844
-    ,0x2b364e49
-    ,0xc3be4706
-    ,0x24364746
-    ,0x0744a206
-    ,0x36534644
-    ,0x0e4b000f
-    ,0xc80149a3
-    ,0x45a20548
-    ,0xb042000b
-    ,0x28365425
-    ,0xcc29364c
-    ,0xa3014b00
-    ,0x4a06d04a
-    ,0x000b4606
-    ,0x26365244
-    ,0xc047a80e
-    ,0x364842d0
-    ,0x01480434
-    ,0x36464544
-    ,0x27364a22
-    ,0xa0449600
-    ,0x4a064b49
-    ,0x4d4b000f
-    ,0x36452a36
-    ,0x4904022b
-    ,0x45802436
-    ,0x42440747
-    ,0x0745a202
-    ,0xa40e48a3
-    ,0x01427be2
-    ,0x364947a4
-    ,0x44000b26
-    ,0x3e46a807
-    ,0x4bf8a62b
-    ,0x434aa40e
-    ,0x364b2936
-    ,0x25363f28
-    ,0x001f2236
-    ,0x4807b045
-    ,0x4449540f
-    ,0x363c2a36
-    ,0x3546a201
-    ,0xd8f02436
-    ,0x46450044
-    ,0x3d273641
-    ,0x49cc2829
-    ,0xfc48a30e
-    ,0x001f45e4
-    ,0x47001f42
-    ,0xd0e82abd
-    ,0x42b8d047
-    ,0x42253636
-    ,0x363a2836
-    ,0x3b273638
-    ,0x000f2a36
-    ,0x4b001f46
-    ,0xfc263640
-    ,0x259c1046
-    ,0x034a4407
-    ,0x44074200
-    ,0x22363447
-    ,0x36332636
-    ,0x2836392b
-    ,0xb0289dfc
-    ,0xd8f04b98
-    ,0x9247ce2b
-    ,0x5dfc42f4
-    ,0x4a7bf224
-    ,0x3725362d
-    ,0x2a363245
-    ,0x1f24362c
-    ,0x362b4900
-    ,0x27362f22
-    ,0x2dfc49f8
-    ,0x4445002b
-    ,0xfc4a001f
-    ,0x001f267d
-    ,0xf826362e
-    ,0xa4004ad0
-    ,0x42440744
-    ,0x96293631
-    ,0x2536244b
-    ,0x2a4588b0
-    ,0x9dfc2b36
-    ,0x47000b28
-    ,0x36292436
-    ,0x46001f2a
-    ,0x3047c8f0
-    ,0x548f2836
-    ,0x0f46a8d0
-    ,0x44074a00
-    ,0x22362244
-    ,0x23427b10
-    ,0x2b3621b8
-    ,0x1f4ba901
-    ,0x000f4800
-    ,0x27362649
-    ,0x254ab600
-    ,0x001f2636
-    ,0x49c8f047
-    ,0x2548d4fc
-    ,0x47b0c029
-    ,0x2046001f
-    ,0x361a2a36
-    ,0x448e2b24
-    ,0x0007428c
-    ,0x42540f45
-    ,0x2725361b
-    ,0x36282836
-    ,0xa02badda
-    ,0x361d4690
-    ,0x49000f27
-    ,0x18480005
-    ,0x49d6b648
-    ,0x014a4407
-    ,0x361c4700
-    ,0x2b361826
-    ,0x36122436
-    ,0x45a8c025
-    ,0x19246df8
-    ,0xd0e02236
-    ,0x0047b08e
-    ,0x361f4ab4
-    ,0x28361e29
-    ,0x1142000f
-    ,0x48440742
-    ,0x0f4946ca
-    ,0x36174600
-    ,0x2736142a
-    ,0xb8902636
-    ,0x49b20146
-    ,0x1048b102
-    ,0x98b02236
+    ,0x2b66ed48
+    ,0xe92866ea
+    ,0xb2322266
+    ,0x072566e8
+    ,0x44074a44
+    ,0x2466e749
+    ,0x88444407
+    ,0xb3be49b2
+    ,0x43540f4a
+    ,0xe5454780
+    ,0x2b66e427
+    ,0x102866e1
+    ,0xb47448b0
+    ,0x479a084b
+    ,0xb83445ff
+    ,0x2a66e343
+    ,0x202966e2
+    ,0x66e044df
+    ,0x032466de
+    ,0x07394900
+    ,0x2366dd4a
+    ,0x002566df
+    ,0x2266dc44
+    ,0xfc47d808
+    ,0x00032b5d
+    ,0x223dd847
+    ,0x47802966
+    ,0x2a66da43
+    ,0x544af644
+    ,0x000349e8
+    ,0x802b66db
+    ,0x66d74547
+    ,0x42000327
+    ,0xd944cc74
+    ,0x47440742
+    ,0x8245d701
+    ,0x66d84b46
+    ,0x28adf028
+    ,0x66d44a00
+    ,0x43cb0023
+    ,0xd549001f
+    ,0xc40c2466
+    ,0x202566d6
+    ,0x66d347cb
+    ,0x44c00f22
+    ,0x1f498cc0
+    ,0x42080144
+    ,0x0f2766ce
+    ,0x66d24554
+    ,0x4bbf052b
+    ,0x66d14947
+    ,0x4aace02a
+    ,0x202966d0
+    ,0x9600283d
+    ,0x032866cf
+    ,0x008e4700
+    ,0x2466cc42
+    ,0x80430821
+    ,0x2266ca44
+    ,0x3947d454
+    ,0x66cd4807
+    ,0x45a43425
+    ,0x66c72b66
+    ,0x49e70029
+    ,0x962b5dea
+    ,0x00034300
+    ,0x032766c5
+    ,0xc4084200
+    ,0x2a3cf844
+    ,0xc92366cb
+    ,0x2466c32a
+    ,0x0f42b874
+    ,0x66c64700
+    ,0x48e24428
+    ,0x00034446
+    ,0x258df04a
+    ,0x802b9dd0
+    ,0x66c84347
+    ,0x01446800
+    ,0x66bc4244
+    ,0x47a8dc27
+    ,0x822266c1
+    ,0x43c30123
+    ,0xc42b66c0
+    ,0x46822566
+    ,0x4ab00c48
+    ,0xab052a66
+    ,0x293dec48
+    ,0x0745001b
+    ,0x66c24b54
+    ,0xb84ac00f
+    ,0x001f2266
+    ,0x42700344
+    ,0xbf2466ba
+    ,0x2b66b725
+    ,0xc04ba701
+    ,0x66be458c
+    ,0x2866bd29
+    ,0x04394aaa
+    ,0x48080143
+    ,0x2127bd01
+    ,0x66bb4908
+    ,0xa42a66b6
+    ,0x66b1429c
+    ,0x449ca424
+    ,0x00420017
+    ,0x2966b547
+    ,0xb34900aa
+    ,0x00a82766
+    ,0x43694448
+    ,0x000f2266
+    ,0x2366b94a
+    ,0xb4259cfe
+    ,0x00032866
+    ,0xac420013
+    ,0x9ca444a4
+    ,0x4b00134b
+    ,0xaf44001b
+    ,0x479ca427
+    ,0xb2480007
+    ,0x001b2566
+    ,0x4a9ca443
+    ,0x9ca42a66
+    ,0x45001f43
+    ,0xa449000b
+    ,0x66aa489c
+    ,0x034b000f
+    ,0x66ae4400
+    ,0x2466a82b
+    ,0xad42a4ac
+    ,0x499ca428
+    ,0xb045a4ac
+    ,0x000b2366
+    ,0x2266a64a
+    ,0x66ac2566
+    ,0x47d0cc29
+    ,0x03480003
+    ,0x66ab4700
+    ,0xac44c8c4
+    ,0x00034ba4
+    ,0x4aa4ac42
+    ,0xa9430017
+    ,0x43a4ac45
+    ,0xbc2a66a4
+    ,0x66a542c0
+    ,0x24669f2b
+    ,0x66a24700
+    ,0x48a4ac28
+    ,0x072766a1
+    ,0x00034900
+    ,0x0322669d
+    ,0x66a74a00
+    ,0x45ccc823
+    ,0x0349a4ac
+    ,0x43000325
+    ,0xb84ab8b4
+    ,0x1c074bbc
+    ,0x4b000342
+    ,0x66962766
+    ,0x248cf424
+    ,0xa347aca8
+    ,0x66a02966
+    ,0x9b2b669c
+    ,0xc4c02a66
+    ,0x45000343
+    ,0x98490003
+    ,0x4b44074a
+    ,0x99226694
+    ,0x8d0c2866
+    ,0x427bb228
+    ,0x45094400
+    ,0x49b4b047
+    ,0x9e45a8a4
+    ,0x44002366
+    ,0x97430003
+    ,0x669a2566
+    ,0x47d10729
+    ,0x1f44acb4
+    ,0x48d20042
+    ,0x17484780
+    ,0x7b304200
+    ,0x4ad0014b
+    ,0x44094904
+    ,0x43a09c45
+    ,0x932a6692
+    ,0xacb42b66
+    ,0x0049d15a
+    ,0x00034445
+    ,0x24668d47
+    ,0x4b27668f
+    ,0x22668b28
+    ,0x0f4b0013
+    ,0x66954a00
+    ,0x45d00023
+    ,0xacb44300
+    ,0x4bacb44a
+    ,0x0f480007
+    ,0x66904200
+    ,0xb4276686
+    ,0xd50147ac
+    ,0x29669144
+    ,0x1b25668e
+    ,0x2a66892b
+    ,0x8043acb4
+    ,0x000b4547
+    ,0x24668449
+    ,0x66874b54
+    ,0x22668228
+    ,0xb4428600
+    ,0x668a48ac
+    ,0xb4296688
+    ,0xd20149ac
+    ,0x23668c45
+    ,0x0d4a000b
+    ,0x2b66812a
+    ,0x004b503a
+    ,0x07d24a8a
+    ,0x25668543
+    ,0x2d1427bc
+    ,0x28bcec25
+    ,0x1443d403
+    ,0x668024ad
+    ,0x24667b25
+    ,0x7e236683
+    ,0xb4b22866
+    ,0xe827667d
+    ,0x06b04305
+    ,0x29667f44
+    ,0xfc450434
+    ,0x667c29bc
+    ,0x444205d4
+    ,0x66794704
+    ,0x4806d022
+    ,0x0d4a4407
+    ,0x44940e49
+    ,0x86439c50
+    ,0x8f014a96
+    ,0x478f0e48
+    ,0x66722366
+    ,0x49920424
+    ,0x07256673
+    ,0x0521458f
+    ,0x054b4407
+    ,0x6674428e
+    ,0x28667527
+    ,0x7a2a6677
+    ,0x4306a044
+    ,0x024a064b
+    ,0x07b04804
+    ,0x22667047
+    ,0x8e01448e
+    ,0x49458045
+    ,0x76454500
+    ,0x44012966
+    ,0x0e42c00f
+    ,0x900e478f
+    ,0x4a900e48
+    ,0x02439407
+    ,0x28666c2a
+    ,0x0027666b
+    ,0x667842b6
+    ,0x4b97dd2b
+    ,0x90012966
+    ,0x25666a49
+    ,0x71246669
+    ,0x666e2366
+    ,0x0148540f
+    ,0x000b4a08
+    ,0x4405b443
+    ,0x6d45540d
+    ,0x4b8e0647
+    ,0x63424601
+    ,0x66674b06
+    ,0x47050d22
+    ,0xcf004550
+    ,0x43820044
+    ,0x144a00b4
+    ,0xae5048ae
+    ,0x65286663
+    ,0x66682a66
+    ,0x24666023
+    ,0x2a256661
+    ,0x4b080747
+    ,0x0222665e
+    ,0x666f42cd
+    ,0x2766622b
+    ,0x07f244cd
+    ,0x43061644
+    ,0x344a04c1
+    ,0x057d4805
+    ,0x47ce094b
+    ,0x2548ce00
+    ,0x4acf06b0
+    ,0x0843ce0f
+    ,0xbcf42566
+    ,0x28665a29
+    ,0x66276659
+    ,0x00b82b66
+    ,0x57434582
+    ,0x665f2466
+    ,0x42040223
+    ,0x582a665c
+    ,0x29666448
+    ,0x03454407
+    ,0xca024a00
+    ,0x44052142
+    ,0x043045aa
+    ,0x48c28849
+    ,0x0747c010
+    ,0x44074744
+    ,0x0443ca06
+    ,0x665544a6
+    ,0x4b058422
+    ,0x084ac474
+    ,0x2a665325
+    ,0x444bcf01
+    ,0x664e4204
+    ,0x23665624
+    ,0x05d44706
+    ,0x27665048
+    ,0x09286651
+    ,0x664f49cf
+    ,0x5d42a30e
+    ,0x06b02b66
+    ,0x45000b4a
+    ,0x6329665b
+    ,0x22664c4b
+    ,0x014400cc
+    ,0x06d043a3
+    ,0x44000f43
+    ,0xa20648a2
+    ,0x49440747
+    ,0x0e45d0c0
+    ,0x44034aa8
+    ,0x462a664a
+    ,0xc3be2566
+    ,0x27664749
+    ,0x05286648
+    ,0x44000f43
+    ,0x4523664d
+    ,0x04022466
+    ,0x4bc80142
+    ,0x44072966
+    ,0x4a458045
+    ,0x0e2b6654
+    ,0x064b42a4
+    ,0x004906a0
+    ,0xa2024796
+    ,0x48440148
+    ,0x5247000b
+    ,0x43a40e44
+    ,0x34226643
+    ,0xa4014b04
+    ,0x457be24a
+    ,0xa3072a66
+    ,0x42540f4b
+    ,0x3c236644
+    ,0xf8a62466
+    ,0x3f47000b
+    ,0x663e2866
+    ,0x49a80727
+    ,0x4125663d
+    ,0x2b664b42
+    ,0x1f4a001f
+    ,0x66494500
+    ,0x48001f29
+    ,0xb8d04945
+    ,0x4ad0e845
+    ,0x3a4b07b0
+    ,0xcc282266
+    ,0x3544001f
+    ,0xd8f02766
+    ,0x234dfc47
+    ,0x0048e4fc
+    ,0x2a66384b
+    ,0x3b256634
+    ,0xa2012366
+    ,0x28663649
+    ,0x44072966
+    ,0x45000343
+    ,0x072b6642
+    ,0xa30e4a44
+    ,0x2d278dfc
+    ,0x66332866
+    ,0x4498b024
+    ,0x40282c10
+    ,0x4ace2b2a
+    ,0x922b2dfc
+    ,0x7bf245f4
+    ,0x49000f43
+    ,0x663249d8
+    ,0x42001f23
+    ,0x3925662b
+    ,0x662f2b66
+    ,0x3743001f
+    ,0x45002966
+    ,0x48001f47
+    ,0xf027662c
+    ,0x43d0f82b
+    ,0x31454407
+    ,0xf8962266
+    ,0x245dfc42
+    ,0x88b02866
+    ,0x24662a48
+    ,0xfc47a400
+    ,0x2dfc29ad
+    ,0x2e2b6630
+    ,0x000b2966
+    ,0x2766234a
+    ,0x2444548f
+    ,0x4b001f42
+    ,0x2243000f
+    ,0x7b102566
+    ,0x23662945
+    ,0xa9012466
+    ,0x47440744
+    ,0x1f4ac8f0
+    ,0x000f4900
+    ,0x42c8f04b
+    ,0x2649a8d0
+    ,0xb8582a66
+    ,0x21478e2b
+    ,0x66282966
+    ,0x2b662722
+    ,0x00236620
+    ,0xd4fc43b6
+    ,0x1a480007
+    ,0x661b2766
+    ,0x45540f28
+    ,0x254a001f
+    ,0x42000f4b
+    ,0xc049001f
+    ,0x8c184ab0
+    ,0x47001f45
+    ,0xd6b64990
+    ,0x4bd0e042
+    ,0xda246618
+    ,0x0005243d
+    ,0xa048a8c0
+    ,0x66194788
+    ,0x2a661d25
+    ,0xa0434407
+    ,0x43b40029
+    ,0x0f4a0001
+    ,0x66114500
+    ,0x28661227
+    ,0x82004b44
+    ,0x44000f44
+    ,0x1f2b661e
+    ,0x661c2266
+    ,0x8e4598b0
+    ,0x66174ab0
+    ,0x49000f23
+    ,0x074246ca
+    ,0x42b2014b
+    ,0x0049b890
+    ,0x6614232a
+    ,0x2566102a
+    ,0x000b4286
+    ,0x29661342
+    ,0x15226616
+    ,0xb1022b66
     ,0xc1304400
     ,0x0200d00f
-    ,0x2836150c
-    ,0x13293616
+    ,0x2236800c
+    ,0x00243681
     ,0x9230d00f
     ,0x07809340
     ,0x42888844
@@ -1488,7 +1564,7 @@ const GT_U32 prvCpssDxChPpaFwImemFalconImage02Oldest[PRV_CPSS_DXCH_PPA_FW_IMAGE_
     ,0xff7f0104
     ,0x1dcd4364
     ,0x20029543
-    ,0x4050007b
+    ,0x405000f1
     ,0x22004342
     ,0x4d00004d
     ,0x0043000f
@@ -1552,7 +1628,7 @@ const GT_U32 prvCpssDxChPpaFwImemFalconImage02Oldest[PRV_CPSS_DXCH_PPA_FW_IMAGE_
     ,0xff7f0104
     ,0x1dcd4364
     ,0x20029543
-    ,0x4050003b
+    ,0x405000b1
     ,0x22004342
     ,0x4d00004d
     ,0x0043000f
@@ -1592,74 +1668,194 @@ const GT_U32 prvCpssDxChPpaFwImemFalconImage02Oldest[PRV_CPSS_DXCH_PPA_FW_IMAGE_
     ,0x818f1480
     ,0x8e132332
     ,0x8c118d12
-    ,0x1053fa40
-    ,0x211cf090
+    ,0x00000000
+    ,0x00000000
     ,0x0f000000
     ,0x211c20d0
-    ,0x53fce453
-    ,0xaa53fcb9
-    ,0xfc9b53fc
-    ,0x53fc7353
-    ,0xfe6953fe
-    ,0x53fe1553
-    ,0x6b53fdc6
-    ,0xfd1453fd
-    ,0xe953ff28
-    ,0xfeba53fe
-    ,0x53fe9653
-    ,0x7453fe8b
-    ,0x53ffb053
-    ,0x6253ff71
-    ,0xff5753ff
-    ,0x53ff4753
+    ,0x00441200
+    ,0x00004bfe
+    ,0x4400004b
+    ,0xc050c062
+    ,0x0c080842
+    ,0x873c224d
+    ,0x4d0f8835
+    ,0x294d1023
+    ,0x82862b26
+    ,0x11ab882b
+    ,0x7a0a0a88
+    ,0x07074007
+    ,0x822b8289
+    ,0x82882b26
+    ,0x2b26812b
+    ,0x802b8287
+    ,0x982b8282
+    ,0x2b82819b
+    ,0x82809b97
+    ,0x2b26832b
+    ,0x2882850f
+    ,0x82849b9b
+    ,0x839b9a2b
+    ,0x9b992b82
+    ,0x22832646
+    ,0x08084922
+    ,0x04080819
+    ,0xaa1100a0
+    ,0x13254664
+    ,0x7711277d
+    ,0x02024b0e
+    ,0x61264660
+    ,0x466a2546
+    ,0x26762525
+    ,0x4662989e
+    ,0x25466325
+    ,0x6e25466d
+    ,0x466b2546
+    ,0x25466725
+    ,0x69254668
+    ,0x29343b25
+    ,0xcc2cc392
+    ,0xb625466f
+    ,0x25466cc3
+    ,0x343b2546
+    ,0x4a00002b
+    ,0x7160000e
+    ,0x46702546
+    ,0x00252680
+    ,0x0000423e
+    ,0x25a6ff42
+    ,0x724a0e00
+    ,0x00000000
+    ,0x00d00f00
+    ,0x22810a20
+    ,0x0c020022
+    ,0x00441200
+    ,0x00004bfe
+    ,0x4400004b
+    ,0xc050c062
+    ,0x0c080842
+    ,0x873c224d
+    ,0x4d0f8835
+    ,0x294d1023
+    ,0x828b2b26
+    ,0x11ab882b
+    ,0x7a0a0a88
+    ,0x07074007
+    ,0x822b828e
+    ,0x828d2b26
+    ,0x2b26812b
+    ,0x802b828c
+    ,0x962b8282
+    ,0x2b82819b
+    ,0x82809b95
+    ,0x2b26832b
+    ,0x2b82859b
+    ,0x82849b99
+    ,0x839b982b
+    ,0x9b972b82
+    ,0x82889b9d
+    ,0x879b9c2b
+    ,0x9b9b2b82
+    ,0x9a2b8286
+    ,0xa0040808
+    ,0x0faa1100
+    ,0x9e28828a
+    ,0x2b82899b
+    ,0x74254673
+    ,0x46752546
+    ,0x22228326
+    ,0x19080849
+    ,0x25467725
+    ,0x13254678
+    ,0x7711277d
+    ,0x02024b0e
+    ,0x467d2546
+    ,0x25467e25
+    ,0x11267639
+    ,0x46762896
+    ,0x343b2546
+    ,0x2bc39a29
+    ,0x25467fcc
+    ,0x7c25467b
+    ,0x0e002b34
+    ,0x4a00004a
+    ,0x0010c3be
+    ,0x80954160
+    ,0x00252680
+    ,0x0000423e
+    ,0x25a6f942
+    ,0x3b254681
+    ,0x211cf090
+    ,0x00d00f00
+    ,0x22810a20
+    ,0x0c020022
+    ,0x3553fc44
+    ,0xfc2653fc
+    ,0x53fbfe53
+    ,0x1053f97f
+    ,0x53fda053
+    ,0xf653fd51
+    ,0xfc9f53fc
+    ,0x53fc6f53
+    ,0xfe4553fe
+    ,0x53fe2153
+    ,0xff53fe16
+    ,0xfdf453fd
+    ,0xed53fefc
+    ,0xfee253fe
+    ,0x53fed253
+    ,0x7453feb3
+    ,0x8010211c
+    ,0x7a53ffb1
+    ,0xf97753ff
+    ,0x53ff3b53
+    ,0x043f0474
+    ,0x20056f04
     ,0x6e3230d6
-    ,0x0f000000
-    ,0x211c10d0
-    ,0xfa388010
+    ,0x10d00f00
+    ,0x20736304
+    ,0x00331ac0
     ,0x0c004104
     ,0x5b290544
-    ,0x043f0474
-    ,0x20056f04
+    ,0x44654fec
+    ,0x031314b0
     ,0x220f2211
     ,0x03660cb1
-    ,0x20736304
-    ,0x00331ac0
+    ,0x73630cc0
+    ,0xc839d00f
     ,0x22d00f00
     ,0x736301b1
-    ,0x44654fec
-    ,0x031314b0
+    ,0xc020d00f
+    ,0x44495630
     ,0x00000000
     ,0x21d00f00
-    ,0x73630cc0
-    ,0xc839d00f
+    ,0xc72f211d
+    ,0xb1318316
     ,0x15b33303
     ,0x03b13082
-    ,0xc020d00f
-    ,0x44495630
+    ,0xffffffff
+    ,0xffffffff
     ,0xffffffff
     ,0x01000300
-    ,0xc72f211d
-    ,0xb1318316
 };
 
 /* Table to hold thread PC address. Each entry represents different thread. */
 const GT_U32 phaFwThreadsPcAddressFalconImage02Oldest[PRV_CPSS_DXCH_PHA_MAX_THREADS_CNS] = {
      0x400160                                            /* 0 THR0_DoNothing */
-    ,0x400a30                                            /* 1 THR1_SRv6_End_Node */
-    ,0x400ad0                                            /* 2 THR2_SRv6_Source_Node_1_segment */
-    ,0x400b10                                            /* 3 THR3_SRv6_Source_Node_First_Pass_2_3_segments */
-    ,0x400b50                                            /* 4 THR4_SRv6_Source_Node_Second_Pass_3_segments */
-    ,0x400c00                                            /* 5 THR5_SRv6_Source_Node_Second_Pass_2_segments */
-    ,0x400cc0                                            /* 6 THR6_Cc_Erspan_TypeII_TrgDevLcMirroring_Ipv4 */
-    ,0x400e20                                            /* 7 THR7_Cc_Erspan_TypeII_TrgDevLcMirroring_Ipv6 */
-    ,0x400f90                                            /* 8 THR8_Cc_Erspan_TypeII_TrgDevDirectMirroring_Ipv4 */
-    ,0x4010d0                                            /* 9 THR9_Cc_Erspan_TypeII_TrgDevDirectMirroring_Ipv6 */
-    ,0x401220                                            /* 10 THR10_Cc_Erspan_TypeII_SrcDevMirroring */
-    ,0x401250                                            /* 11 THR11_VXLAN_GPB_SourceGroupPolicyID */
-    ,0x4012b0                                            /* 12 THR12_MPLS_SR_NO_EL */
-    ,0x4012e0                                            /* 13 THR13_MPLS_SR_ONE_EL */
-    ,0x401370                                            /* 14 THR14_MPLS_SR_TWO_EL */
-    ,0x401430                                            /* 15 THR15_MPLS_SR_THREE_EL */
+    ,0x400b60                                            /* 1 THR1_SRv6_End_Node */
+    ,0x400c00                                            /* 2 THR2_SRv6_Source_Node_1_segment */
+    ,0x400c40                                            /* 3 THR3_SRv6_Source_Node_First_Pass_2_3_segments */
+    ,0x400c80                                            /* 4 THR4_SRv6_Source_Node_Second_Pass_3_segments */
+    ,0x400d30                                            /* 5 THR5_SRv6_Source_Node_Second_Pass_2_segments */
+    ,0x400df0                                            /* 6 THR6_Cc_Erspan_TypeII_TrgDevLcMirroring_Ipv4 */
+    ,0x400f50                                            /* 7 THR7_Cc_Erspan_TypeII_TrgDevLcMirroring_Ipv6 */
+    ,0x4010c0                                            /* 8 THR8_Cc_Erspan_TypeII_TrgDevDirectMirroring_Ipv4 */
+    ,0x401200                                            /* 9 THR9_Cc_Erspan_TypeII_TrgDevDirectMirroring_Ipv6 */
+    ,0x401350                                            /* 10 THR10_Cc_Erspan_TypeII_SrcDevMirroring */
+    ,0x401380                                            /* 11 THR11_VXLAN_GPB_SourceGroupPolicyID */
+    ,0x4013e0                                            /* 12 THR12_MPLS_SR_NO_EL */
+    ,0x401410                                            /* 13 THR13_MPLS_SR_ONE_EL */
+    ,0x4014a0                                            /* 14 THR14_MPLS_SR_TWO_EL */
+    ,0x401560                                            /* 15 THR15_MPLS_SR_THREE_EL */
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 16 */
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 17 */
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 18 */
@@ -1697,19 +1893,19 @@ const GT_U32 phaFwThreadsPcAddressFalconImage02Oldest[PRV_CPSS_DXCH_PHA_MAX_THRE
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 50 */
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 51 */
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 52 */
-    ,0x401530                                            /* 53 THR53_SRV6_End_Node_GSID_COC32 */
-    ,0x4015b0                                            /* 54 THR54_IPv4_TTL_Increment */
-    ,0x4015f0                                            /* 55 THR55_IPv6_HopLimit_Increment */
-    ,0x401620                                            /* 56 THR56_Clear_Outgoing_Mtag_Cmd */
-    ,0x401660                                            /* 57 THR57_SFLOW_V5_IPv4 */
-    ,0x401760                                            /* 58 THR58_SFLOW_V5_IPv6 */
+    ,0x401660                                            /* 53 THR53_SRV6_End_Node_GSID_COC32 */
+    ,0x4016e0                                            /* 54 THR54_IPv4_TTL_Increment */
+    ,0x401720                                            /* 55 THR55_IPv6_HopLimit_Increment */
+    ,0x401750                                            /* 56 THR56_Clear_Outgoing_Mtag_Cmd */
+    ,0x401790                                            /* 57 THR57_SFLOW_V5_IPv4 */
+    ,0x401890                                            /* 58 THR58_SFLOW_V5_IPv6 */
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 59 */
     ,0x400180                                            /* 60 THR60_DropAllTraffic */
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 61 */
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 62 */
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 63 */
-    ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 64 */
-    ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 65 */
+    ,0x401990                                            /* 64 THR64_Erspan_TypeII_SameDevMirroring_Ipv4 */
+    ,0x401a70                                            /* 65 THR65_Erspan_TypeII_SameDevMirroring_Ipv6 */
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 66 */
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 67 */
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 68 */
@@ -2083,40 +2279,43 @@ const GT_U32 phaFwAccelCmdsFalconImage02Oldest[FW_ACCEL_CMDS_MAX_NUM_CNS] = {
    ,0x540fb834 /* ADD_BITS_THR58_SFLOW_V5_IPv6_CONST_0x34_LEN16_TO_PKT_udp_header__Length, offset = 0x0334 */
    ,0x4407df20 /* COPY_BITS_THR58_SFLOW_V5_IPv6_CONST_0x20_LEN8_TO_PKT_sflow_data_format_header__sample_length_PLUS24, offset = 0x0338 */
    ,0x4780ff00 /* COPY_BITS_THR58_SFLOW_V5_IPv6_CONST_0x0_LEN1_TO_PKT_sflow_flow_sample_header__number_of_records_PLUS31, offset = 0x033c */
-   ,0x00000000 /* offset = 0x0340 */
-   ,0x00000000 /* offset = 0x0344 */
-   ,0x00000000 /* offset = 0x0348 */
-   ,0x00000000 /* offset = 0x034c */
-   ,0x00000000 /* offset = 0x0350 */
-   ,0x00000000 /* offset = 0x0354 */
-   ,0x00000000 /* offset = 0x0358 */
-   ,0x00000000 /* offset = 0x035c */
-   ,0x00000000 /* offset = 0x0360 */
-   ,0x00000000 /* offset = 0x0364 */
-   ,0x00000000 /* offset = 0x0368 */
-   ,0x00000000 /* offset = 0x036c */
-   ,0x00000000 /* offset = 0x0370 */
-   ,0x00000000 /* offset = 0x0374 */
-   ,0x00000000 /* offset = 0x0378 */
-   ,0x00000000 /* offset = 0x037c */
-   ,0x00000000 /* offset = 0x0380 */
-   ,0x00000000 /* offset = 0x0384 */
-   ,0x00000000 /* offset = 0x0388 */
-   ,0x00000000 /* offset = 0x038c */
-   ,0x00000000 /* offset = 0x0390 */
-   ,0x00000000 /* offset = 0x0394 */
-   ,0x00000000 /* offset = 0x0398 */
-   ,0x00000000 /* offset = 0x039c */
-   ,0x00000000 /* offset = 0x03a0 */
-   ,0x00000000 /* offset = 0x03a4 */
-   ,0x00000000 /* offset = 0x03a8 */
-   ,0x00000000 /* offset = 0x03ac */
-   ,0x00000000 /* offset = 0x03b0 */
-   ,0x00000000 /* offset = 0x03b4 */
-   ,0x00000000 /* offset = 0x03b8 */
-   ,0x00000000 /* offset = 0x03bc */
-   ,0x00000000 /* offset = 0x03c0 */
-   ,0x00000000 /* offset = 0x03c4 */
+   ,0x44079a08 /* COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x08_LEN8_TO_PKT_ethertype_header__ethertype, offset = 0x0340 */
+   ,0x4407b010 /* COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x10_LEN8_TO_PKT_GRE_header__C, offset = 0x0344 */
+   ,0x4407b288 /* COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x88_LEN8_TO_PKT_GRE_header__NP, offset = 0x0348 */
+   ,0x4407b3be /* COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0xBE_LEN8_TO_PKT_GRE_header__NP_PLUS8, offset = 0x034c */
+   ,0x0003b474 /* COPY_BYTES_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__lm_counter_LEN4_TO_PKT_GRE_header__Seq_num, offset = 0x0350 */
+   ,0x040fbe12 /* COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_srcTrgPortEntry__targetPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4, offset = 0x0354 */
+   ,0x040fbe10 /* COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_srcTrgPortEntry__srcPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4, offset = 0x0358 */
+   ,0x4403b801 /* COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x1_LEN4_TO_PKT_ERSPAN_type_II_header__Ver, offset = 0x035c */
+   ,0x0442ba52 /* COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__qos_mapped_up_LEN3_TO_PKT_ERSPAN_type_II_header__COS, offset = 0x0360 */
+   ,0x4582ba06 /* COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x6_LEN3_TO_PKT_ERSPAN_type_II_header__En, offset = 0x0364 */
+   ,0x050d9e50 /* COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__egress_byte_count_LEN14_TO_PKT_IPv4_Header__total_length_PLUS2, offset = 0x0368 */
+   ,0x540f9e24 /* ADD_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x24_LEN16_TO_PKT_IPv4_Header__total_length, offset = 0x036c */
+   ,0x0807009c /* CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN8_FROM_PKT_IPv4_Header__version, offset = 0x0370 */
+   ,0x080100a4 /* CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN2_FROM_PKT_IPv4_Header__ttl, offset = 0x0374 */
+   ,0x080700a8 /* CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN8_FROM_PKT_IPv4_Header__sip_high, offset = 0x0378 */
+   ,0xc00fa600 /* CSUM_STORE_IP_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_TO_PKT_IPv4_Header__header_checksum, offset = 0x037c */
+   ,0x000b8e00 /* COPY_BYTES_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_erspan_template__mac_da_47_32_LEN12_TO_PKT_IPv4_Header__version_MINUS14, offset = 0x0380 */
+   ,0x540d5032 /* ADD_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x32_LEN14_TO_DESC_phal2ppa__egress_byte_count, offset = 0x0384 */
+   ,0x000f8a00 /* COPY_BYTES_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_erspan_template__mac_da_47_32_LEN16_TO_PKT_IPv4_Header__version_MINUS18, offset = 0x0388 */
+   /* 540d5036 ADD_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x36_LEN14_TO_DESC_phal2ppa__egress_byte_count, offset = 0x01bc */
+   ,0x44079286 /* COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x86_LEN8_TO_PKT_ethertype_header__ethertype, offset = 0x038c */
+   ,0x440793dd /* COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0xDD_LEN8_TO_PKT_ethertype_header__ethertype_PLUS8, offset = 0x0390 */
+   ,0x4407bc10 /* COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x10_LEN8_TO_PKT_GRE_header__C, offset = 0x0394 */
+   ,0x4407be88 /* COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x88_LEN8_TO_PKT_GRE_header__NP, offset = 0x0398 */
+   ,0x4407bfbe /* COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0xBE_LEN8_TO_PKT_GRE_header__NP_PLUS8, offset = 0x039c */
+   ,0x0003c074 /* COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__lm_counter_LEN4_TO_PKT_GRE_header__Seq_num, offset = 0x03a0 */
+   ,0x040fca12 /* COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_srcTrgPortEntry__targetPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4, offset = 0x03a4 */
+   ,0x040fca10 /* COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_srcTrgPortEntry__srcPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4, offset = 0x03a8 */
+   ,0x4403c401 /* COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x1_LEN4_TO_PKT_ERSPAN_type_II_header__Ver, offset = 0x03ac */
+   ,0x0442c652 /* COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__qos_mapped_up_LEN3_TO_PKT_ERSPAN_type_II_header__COS, offset = 0x03b0 */
+   ,0x4582c606 /* COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x6_LEN3_TO_PKT_ERSPAN_type_II_header__En, offset = 0x03b4 */
+   ,0x050d9850 /* COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__egress_byte_count_LEN14_TO_PKT_IPv6_Header__payload_length_PLUS2, offset = 0x03b8 */
+   ,0x540f9810 /* ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x10_LEN16_TO_PKT_IPv6_Header__payload_length, offset = 0x03bc */
+   ,0x000b8600 /* COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_erspan_template__mac_da_47_32_LEN12_TO_PKT_IPv6_Header__version_MINUS14, offset = 0x03c0 */
+   /* 540d503a ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x3A_LEN14_TO_DESC_phal2ppa__egress_byte_count, offset = 0x01c4 */
+   ,0x000f8200 /* COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_erspan_template__mac_da_47_32_LEN16_TO_PKT_IPv6_Header__version_MINUS18, offset = 0x03c4 */
+   /* 540d503e ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x3E_LEN14_TO_DESC_phal2ppa__egress_byte_count, offset = 0x01a4 */
    ,0x00000000 /* offset = 0x03c8 */
    ,0x00000000 /* offset = 0x03cc */
    ,0x00000000 /* offset = 0x03d0 */
@@ -2277,4 +2476,4 @@ const GT_U32 phaFwAccelCmdsFalconImage02Oldest[FW_ACCEL_CMDS_MAX_NUM_CNS] = {
    ,0x00000000 /* offset = 0x063c */
 };
 
-#endif  /* __prvCpssDxChPpaFwImageInfo_FalconImage02Oldest_h */
+#endif	/* __prvCpssDxChPpaFwImageInfo_FalconImage02Oldest_h */
diff --git a/mainPpDrv/h/cpss/dxCh/dxChxGen/pha/private/prvCpssDxChPpaFwImageInfo_FalconImage02Previous.h b/mainPpDrv/h/cpss/dxCh/dxChxGen/pha/private/prvCpssDxChPpaFwImageInfo_FalconImage02Previous.h
index 508b98bb97..4eaaf039c9 100644
--- a/mainPpDrv/h/cpss/dxCh/dxChxGen/pha/private/prvCpssDxChPpaFwImageInfo_FalconImage02Previous.h
+++ b/mainPpDrv/h/cpss/dxCh/dxChxGen/pha/private/prvCpssDxChPpaFwImageInfo_FalconImage02Previous.h
@@ -18,7 +18,7 @@
  *
  *   APPLICABLE DEVICES: Falcon.
  *
- * @version 21_10_01_00
+ * @version 21_11_00_00
  *******************************************************************************
  */
 
@@ -27,12 +27,12 @@
 
 /* PHA fw version information */
 const PRV_CPSS_DXCH_PHA_FW_IMAGE_VERSION_INFO_STC fwImageVersionFalconImage02Previous = {
-	 0x21100100 /* | year << 24 | month << 16 | in_month << 8 | debug | */
+	 0x21110000 /* | year << 24 | month << 16 | in_month << 8 | debug | */
 	,0x02000000 /* image_id << 24 */
 	,"Image02Previous"}; /* image_name */
 
 /* The number of words of data in prvCpssDxChPpaFwImemFalconImage02Previous*/
-#define PRV_CPSS_DXCH_PPA_FW_IMAGE_SIZE_FALCON_IMAGE02PREVIOUS (1800)
+#define PRV_CPSS_DXCH_PPA_FW_IMAGE_SIZE_FALCON_IMAGE02PREVIOUS (1804)
 
 /* The FW code to load into the PHA unit */
 const GT_U32 prvCpssDxChPpaFwImemFalconImage02Previous[PRV_CPSS_DXCH_PPA_FW_IMAGE_SIZE_FALCON_IMAGE02PREVIOUS] = {
@@ -167,15 +167,15 @@ const GT_U32 prvCpssDxChPpaFwImemFalconImage02Previous[PRV_CPSS_DXCH_PPA_FW_IMAG
     ,0x211cf090
     ,0x10d00f00
     ,0xc020211c
-    ,0x06578010
+    ,0x065c8010
     ,0x500042c0
-    ,0x3a50024c
+    ,0x3a50024f
     ,0x90105000
     ,0x1100eb30
     ,0x82104366
     ,0x0031c040
-    ,0x43010050
-    ,0x22432110
+    ,0x43000050
+    ,0x22432111
     ,0x00038011
     ,0x50000750
     ,0xa3239343
@@ -236,534 +236,538 @@ const GT_U32 prvCpssDxChPpaFwImemFalconImage02Previous[PRV_CPSS_DXCH_PPA_FW_IMAG
     ,0x0d42cafe
     ,0x84304290
     ,0x00430740
-    ,0x0f430003
-    ,0xc0604504
+    ,0x0f440003
+    ,0xc0704604
     ,0x9230d00f
     ,0x463f8330
-    ,0x4244074a
-    ,0x424b540f
-    ,0x44034804
-    ,0x49458247
-    ,0xc65247c4
-    ,0x4b981048
-    ,0x5042bfbe
-    ,0x050d4a98
-    ,0xfa2366f8
-    ,0xca102566
-    ,0x43c07445
-    ,0x0149c606
-    ,0x66ff2266
-    ,0x2866fc2b
-    ,0x542766fb
-    ,0x2966fdb2
-    ,0x07484407
+    ,0x4344074b
+    ,0x4242540f
+    ,0x44034904
+    ,0x4a458248
+    ,0xc65248c4
+    ,0x42981049
+    ,0x5043bfbe
+    ,0x050d4b98
+    ,0xfa2476f8
+    ,0xca102676
+    ,0x44c07446
+    ,0x014ac606
+    ,0x76ff2376
+    ,0x2976fc22
+    ,0x652876fb
+    ,0x2a76fdb2
+    ,0x07494407
+    ,0x44074244
+    ,0x4308074b
+    ,0xf72b76fe
+    ,0x46540d44
+    ,0x0744c00f
+    ,0x76f94a44
+    ,0x48000f25
+    ,0x928642be
+    ,0x488a0049
+    ,0xdd45000b
+    ,0xa6004a93
+    ,0xf52276f6
+    ,0x76ee2b76
+    ,0x4300a823
+    ,0x884bbc10
+    ,0x2476ef46
+    ,0x002a76f4
+    ,0x76f2458e
+    ,0x2976f328
+    ,0x76f04845
+    ,0x4a540f25
+    ,0x0f2676f1
+    ,0x50324404
+    ,0x5048ba06
+    ,0x00a4499e
+    ,0x42080142
+    ,0x8249050d
+    ,0x44be1024
+    ,0xf4460442
+    ,0x9e242b3c
+    ,0x4544034a
+    ,0xb8012876
+    ,0x2a76eb45
+    ,0x522b76ec
+    ,0x76e646ba
+    ,0x03484407
+    ,0x44074200
+    ,0x2276ed49
+    ,0xe92976ea
+    ,0xb2432376
+    ,0x072676e8
     ,0x44074b44
-    ,0x4208074a
-    ,0xf72a66fe
-    ,0x45540d43
-    ,0x0743c00f
-    ,0x66f94944
-    ,0x47000f24
-    ,0x92864bbe
-    ,0x478a0048
-    ,0xdd44000b
-    ,0xa6004993
-    ,0xf52b66f6
-    ,0x66ee2a66
-    ,0x4200a822
-    ,0x884abc10
-    ,0x2366ef45
-    ,0x002966f4
-    ,0x66f2448e
-    ,0x2866f327
-    ,0x66f04745
-    ,0x49540f24
-    ,0x0f2566f1
-    ,0x50324304
-    ,0x5047ba06
-    ,0x00a4489e
-    ,0x4b08014b
-    ,0x8248050d
-    ,0x43be1023
-    ,0xf4450442
-    ,0x9e242a2c
-    ,0x44440349
-    ,0xb8012766
-    ,0x2966eb44
-    ,0x522a66ec
-    ,0x66e645ba
-    ,0x03474407
-    ,0x44074b00
-    ,0x2b66ed48
-    ,0xe92866ea
-    ,0xb2322266
-    ,0x072566e8
-    ,0x44074a44
-    ,0x2466e749
-    ,0x88444407
-    ,0xb3be49b2
-    ,0x43540f4a
-    ,0xe5454780
-    ,0x2b66e427
-    ,0x102866e1
-    ,0xb47448b0
-    ,0x479a084b
-    ,0xb83445ff
-    ,0x2a66e343
-    ,0x202966e2
-    ,0x66e044df
-    ,0x032466de
-    ,0x07394900
-    ,0x2366dd4a
-    ,0x002566df
-    ,0x2266dc44
-    ,0xfc47d808
-    ,0x00032b5d
-    ,0x223dd847
-    ,0x47802966
-    ,0x2a66da43
-    ,0x544af644
-    ,0x000349e8
-    ,0x802b66db
-    ,0x66d74547
-    ,0x42000327
-    ,0xd944cc74
-    ,0x47440742
-    ,0x8245d701
-    ,0x66d84b46
-    ,0x28adf028
-    ,0x66d44a00
-    ,0x43cb0023
-    ,0xd549001f
-    ,0xc40c2466
-    ,0x202566d6
-    ,0x66d347cb
-    ,0x44c00f22
-    ,0x1f498cc0
-    ,0x42080144
-    ,0x0f2766ce
-    ,0x66d24554
-    ,0x4bbf052b
-    ,0x66d14947
-    ,0x4aace02a
-    ,0x202966d0
-    ,0x9600283d
-    ,0x032866cf
-    ,0x008e4700
-    ,0x2466cc42
-    ,0x80430821
-    ,0x2266ca44
-    ,0x3947d454
-    ,0x66cd4807
-    ,0x45a43425
-    ,0x66c72b66
-    ,0x49e70029
-    ,0x962b5dea
-    ,0x00034300
-    ,0x032766c5
-    ,0xc4084200
-    ,0x2a3cf844
-    ,0xc92366cb
-    ,0x2466c32a
-    ,0x0f42b874
-    ,0x66c64700
-    ,0x48e24428
-    ,0x00034446
-    ,0x258df04a
-    ,0x802b9dd0
-    ,0x66c84347
-    ,0x01446800
-    ,0x66bc4244
-    ,0x47a8dc27
-    ,0x822266c1
-    ,0x43c30123
-    ,0xc42b66c0
-    ,0x46822566
-    ,0x4ab00c48
-    ,0xab052a66
-    ,0x293dec48
-    ,0x0745001b
-    ,0x66c24b54
-    ,0xb84ac00f
-    ,0x001f2266
-    ,0x42700344
-    ,0xbf2466ba
-    ,0x2b66b725
-    ,0xc04ba701
-    ,0x66be458c
-    ,0x2866bd29
-    ,0x04394aaa
-    ,0x48080143
-    ,0x2127bd01
-    ,0x66bb4908
-    ,0xa42a66b6
-    ,0x66b1429c
-    ,0x449ca424
-    ,0x00420017
-    ,0x2966b547
-    ,0xb34900aa
-    ,0x00a82766
-    ,0x43694448
-    ,0x000f2266
-    ,0x2366b94a
-    ,0xb4259cfe
-    ,0x00032866
-    ,0xac420013
-    ,0x9ca444a4
-    ,0x4b00134b
-    ,0xaf44001b
-    ,0x479ca427
-    ,0xb2480007
-    ,0x001b2566
-    ,0x4a9ca443
-    ,0x9ca42a66
-    ,0x45001f43
-    ,0xa449000b
-    ,0x66aa489c
-    ,0x034b000f
-    ,0x66ae4400
-    ,0x2466a82b
-    ,0xad42a4ac
-    ,0x499ca428
-    ,0xb045a4ac
-    ,0x000b2366
-    ,0x2266a64a
-    ,0x66ac2566
-    ,0x47d0cc29
-    ,0x03480003
-    ,0x66ab4700
-    ,0xac44c8c4
-    ,0x00034ba4
-    ,0x4aa4ac42
-    ,0xa9430017
-    ,0x43a4ac45
-    ,0xbc2a66a4
-    ,0x66a542c0
-    ,0x24669f2b
-    ,0x66a24700
-    ,0x48a4ac28
-    ,0x072766a1
-    ,0x00034900
-    ,0x0322669d
-    ,0x66a74a00
-    ,0x45ccc823
-    ,0x0349a4ac
-    ,0x43000325
-    ,0xb84ab8b4
-    ,0x1c074bbc
-    ,0x4b000342
-    ,0x66962766
-    ,0x248cf424
-    ,0xa347aca8
-    ,0x66a02966
-    ,0x9b2b669c
-    ,0xc4c02a66
-    ,0x45000343
-    ,0x98490003
-    ,0x4b44074a
-    ,0x99226694
-    ,0x8d0c2866
-    ,0x427bb228
-    ,0x45094400
-    ,0x49b4b047
-    ,0x9e45a8a4
-    ,0x44002366
-    ,0x97430003
-    ,0x669a2566
-    ,0x47d10729
-    ,0x1f44acb4
-    ,0x48d20042
-    ,0x17484780
-    ,0x7b304200
-    ,0x4ad0014b
-    ,0x44094904
-    ,0x43a09c45
-    ,0x932a6692
-    ,0xacb42b66
-    ,0x0049d15a
-    ,0x00034445
-    ,0x24668d47
-    ,0x4b27668f
-    ,0x22668b28
-    ,0x0f4b0013
-    ,0x66954a00
-    ,0x45d00023
-    ,0xacb44300
-    ,0x4bacb44a
-    ,0x0f480007
-    ,0x66904200
-    ,0xb4276686
-    ,0xd50147ac
-    ,0x29669144
-    ,0x1b25668e
-    ,0x2a66892b
-    ,0x8043acb4
-    ,0x000b4547
-    ,0x24668449
-    ,0x66874b54
-    ,0x22668228
-    ,0xb4428600
-    ,0x668a48ac
-    ,0xb4296688
-    ,0xd20149ac
-    ,0x23668c45
-    ,0x0d4a000b
-    ,0x2b66812a
-    ,0x004b503a
-    ,0x07d24a8a
-    ,0x25668543
-    ,0x2d1427bc
-    ,0x28bcec25
-    ,0x1443d403
-    ,0x668024ad
-    ,0x24667b25
-    ,0x7e236683
-    ,0xb4b22866
-    ,0xe827667d
-    ,0x06b04305
-    ,0x29667f44
-    ,0xfc450434
-    ,0x667c29bc
-    ,0x444205d4
-    ,0x66794704
-    ,0x4806d022
-    ,0x0d4a4407
-    ,0x44940e49
-    ,0x86439c50
-    ,0x8f014a96
-    ,0x478f0e48
-    ,0x66722366
-    ,0x49920424
-    ,0x07256673
-    ,0x0521458f
-    ,0x054b4407
-    ,0x6674428e
-    ,0x28667527
-    ,0x7a2a6677
-    ,0x4306a044
-    ,0x024a064b
-    ,0x07b04804
-    ,0x22667047
-    ,0x8e01448e
-    ,0x49458045
-    ,0x76454500
-    ,0x44012966
-    ,0x0e42c00f
-    ,0x900e478f
-    ,0x4a900e48
-    ,0x02439407
-    ,0x28666c2a
-    ,0x0027666b
-    ,0x667842b6
-    ,0x4b97dd2b
-    ,0x90012966
-    ,0x25666a49
-    ,0x71246669
-    ,0x666e2366
-    ,0x0148540f
-    ,0x000b4a08
-    ,0x4405b443
-    ,0x6d45540d
-    ,0x4b8e0647
-    ,0x63424601
-    ,0x66674b06
-    ,0x47050d22
-    ,0xcf004550
-    ,0x43820044
-    ,0x144a00b4
-    ,0xae5048ae
-    ,0x65286663
-    ,0x66682a66
-    ,0x24666023
-    ,0x2a256661
-    ,0x4b080747
-    ,0x0222665e
-    ,0x666f42cd
-    ,0x2766622b
-    ,0x07f244cd
-    ,0x43061644
-    ,0x344a04c1
-    ,0x057d4805
-    ,0x47ce094b
-    ,0x2548ce00
-    ,0x4acf06b0
-    ,0x0843ce0f
-    ,0xbcf42566
-    ,0x28665a29
-    ,0x66276659
-    ,0x00b82b66
-    ,0x57434582
-    ,0x665f2466
-    ,0x42040223
-    ,0x582a665c
-    ,0x29666448
-    ,0x03454407
-    ,0xca024a00
-    ,0x44052142
-    ,0x043045aa
-    ,0x48c28849
-    ,0x0747c010
-    ,0x44074744
-    ,0x0443ca06
-    ,0x665544a6
-    ,0x4b058422
-    ,0x084ac474
-    ,0x2a665325
-    ,0x444bcf01
-    ,0x664e4204
-    ,0x23665624
-    ,0x05d44706
-    ,0x27665048
-    ,0x09286651
-    ,0x664f49cf
-    ,0x5d42a30e
-    ,0x06b02b66
-    ,0x45000b4a
-    ,0x6329665b
-    ,0x22664c4b
-    ,0x014400cc
-    ,0x06d043a3
-    ,0x44000f43
-    ,0xa20648a2
-    ,0x49440747
-    ,0x0e45d0c0
-    ,0x44034aa8
-    ,0x462a664a
-    ,0xc3be2566
-    ,0x27664749
-    ,0x05286648
-    ,0x44000f43
-    ,0x4523664d
-    ,0x04022466
-    ,0x4bc80142
-    ,0x44072966
-    ,0x4a458045
-    ,0x0e2b6654
-    ,0x064b42a4
-    ,0x004906a0
-    ,0xa2024796
-    ,0x48440148
-    ,0x5247000b
-    ,0x43a40e44
-    ,0x34226643
-    ,0xa4014b04
-    ,0x457be24a
-    ,0xa3072a66
-    ,0x42540f4b
-    ,0x3c236644
-    ,0xf8a62466
-    ,0x3f47000b
-    ,0x663e2866
-    ,0x49a80727
-    ,0x4125663d
-    ,0x2b664b42
-    ,0x1f4a001f
-    ,0x66494500
-    ,0x48001f29
-    ,0xb8d04945
-    ,0x4ad0e845
-    ,0x3a4b07b0
-    ,0xcc282266
-    ,0x3544001f
-    ,0xd8f02766
-    ,0x234dfc47
-    ,0x0048e4fc
-    ,0x2a66384b
-    ,0x3b256634
-    ,0xa2012366
-    ,0x28663649
-    ,0x44072966
-    ,0x45000343
-    ,0x072b6642
-    ,0xa30e4a44
-    ,0x2d278dfc
-    ,0x66332866
-    ,0x4498b024
-    ,0x40282c10
-    ,0x4ace2b2a
-    ,0x922b2dfc
-    ,0x7bf245f4
-    ,0x49000f43
-    ,0x663249d8
-    ,0x42001f23
-    ,0x3925662b
-    ,0x662f2b66
-    ,0x3743001f
-    ,0x45002966
-    ,0x48001f47
-    ,0xf027662c
-    ,0x43d0f82b
-    ,0x31454407
-    ,0xf8962266
-    ,0x245dfc42
-    ,0x88b02866
-    ,0x24662a48
-    ,0xfc47a400
-    ,0x2dfc29ad
-    ,0x2e2b6630
-    ,0x000b2966
-    ,0x2766234a
-    ,0x2444548f
-    ,0x4b001f42
-    ,0x2243000f
-    ,0x7b102566
-    ,0x23662945
-    ,0xa9012466
-    ,0x47440744
-    ,0x1f4ac8f0
-    ,0x000f4900
-    ,0x42c8f04b
-    ,0x2649a8d0
-    ,0xb8582a66
-    ,0x21478e2b
-    ,0x66282966
-    ,0x2b662722
-    ,0x00236620
-    ,0xd4fc43b6
-    ,0x1a480007
-    ,0x661b2766
-    ,0x45540f28
-    ,0x254a001f
-    ,0x42000f4b
-    ,0xc049001f
-    ,0x8c184ab0
-    ,0x47001f45
-    ,0xd6b64990
-    ,0x4bd0e042
-    ,0xda246618
-    ,0x0005243d
-    ,0xa048a8c0
-    ,0x66194788
-    ,0x2a661d25
-    ,0xa0434407
-    ,0x43b40029
-    ,0x0f4a0001
-    ,0x66114500
-    ,0x28661227
-    ,0x82004b44
-    ,0x44000f44
-    ,0x1f2b661e
-    ,0x661c2266
-    ,0x8e4598b0
-    ,0x66174ab0
-    ,0x49000f23
-    ,0x074246ca
-    ,0x42b2014b
-    ,0x0049b890
-    ,0x6614232a
-    ,0x2566102a
-    ,0x000b4286
-    ,0x29661342
-    ,0x15226616
-    ,0xb1022b66
+    ,0x2576e74a
+    ,0x88454407
+    ,0xb3be4ab2
+    ,0x44540f4b
+    ,0xe5464780
+    ,0x2276e428
+    ,0x102976e1
+    ,0xb47449b0
+    ,0x489a0842
+    ,0xb83446ff
+    ,0x2b76e344
+    ,0x202a76e2
+    ,0x76e045df
+    ,0x032576de
+    ,0x07394a00
+    ,0x2476dd4b
+    ,0x002676df
+    ,0x2376dc45
+    ,0xfc48d808
+    ,0x0003226d
+    ,0x234dd848
+    ,0x47802a76
+    ,0x2b76da44
+    ,0x544bf644
+    ,0x00034ae8
+    ,0x802276db
+    ,0x76d74647
+    ,0x43000328
+    ,0xd945cc74
+    ,0x48440743
+    ,0x8246d701
+    ,0x76d84246
+    ,0x29bdf029
+    ,0x76d44b00
+    ,0x44cb0024
+    ,0xd54a001f
+    ,0xc40c2576
+    ,0x202676d6
+    ,0x76d348cb
+    ,0x45c00f23
+    ,0x1f4a8cc0
+    ,0x43080145
+    ,0x0f2876ce
+    ,0x76d24654
+    ,0x42bf0522
+    ,0x76d14a47
+    ,0x4bace02b
+    ,0x202a76d0
+    ,0x9600294d
+    ,0x032976cf
+    ,0x008e4800
+    ,0x2576cc43
+    ,0x80440821
+    ,0x2376ca45
+    ,0x3948d454
+    ,0x76cd4907
+    ,0x46a43426
+    ,0x76c72276
+    ,0x4ae7002a
+    ,0x96226dea
+    ,0x00034400
+    ,0x032876c5
+    ,0xc4084300
+    ,0x2b4cf845
+    ,0xc92476cb
+    ,0x2576c32b
+    ,0x0f43b874
+    ,0x76c64800
+    ,0x49e24429
+    ,0x00034546
+    ,0x269df04b
+    ,0x8022add0
+    ,0x76c84447
+    ,0x01456800
+    ,0x76bc4344
+    ,0x48a8dc28
+    ,0x822376c1
+    ,0x44c30124
+    ,0xc42276c0
+    ,0x46822676
+    ,0x4bb00c49
+    ,0xab052b76
+    ,0x2a4dec49
+    ,0x0746001b
+    ,0x76c24254
+    ,0xb84bc00f
+    ,0x001f2376
+    ,0x43700345
+    ,0xbf2576ba
+    ,0x2276b726
+    ,0xc042a701
+    ,0x76be468c
+    ,0x2976bd2a
+    ,0x04394baa
+    ,0x49080144
+    ,0x21282d01
+    ,0x76bb4a08
+    ,0xa42b76b6
+    ,0x76b1439c
+    ,0x459ca425
+    ,0x00430017
+    ,0x2a76b548
+    ,0xb34a00aa
+    ,0x00a82876
+    ,0x44694449
+    ,0x000f2376
+    ,0x2476b94b
+    ,0xb426acfe
+    ,0x00032976
+    ,0xac430013
+    ,0x9ca445a4
+    ,0x42001342
+    ,0xaf45001b
+    ,0x489ca428
+    ,0xb2490007
+    ,0x001b2676
+    ,0x4b9ca444
+    ,0x9ca42b76
+    ,0x46001f44
+    ,0xa44a000b
+    ,0x76aa499c
+    ,0x0342000f
+    ,0x76ae4500
+    ,0x2576a822
+    ,0xad43a4ac
+    ,0x4a9ca429
+    ,0xb046a4ac
+    ,0x000b2476
+    ,0x2376a64b
+    ,0x76ac2676
+    ,0x48d0cc2a
+    ,0x03490003
+    ,0x76ab4800
+    ,0xac45c8c4
+    ,0x000342a4
+    ,0x4ba4ac43
+    ,0xa9440017
+    ,0x44a4ac46
+    ,0xbc2b76a4
+    ,0x76a543c0
+    ,0x25769f22
+    ,0x76a24800
+    ,0x49a4ac29
+    ,0x072876a1
+    ,0x00034a00
+    ,0x0323769d
+    ,0x76a74b00
+    ,0x46ccc824
+    ,0x034aa4ac
+    ,0x44000326
+    ,0xb84bb8b4
+    ,0x1c0742bc
+    ,0x42000343
+    ,0x76962876
+    ,0x259cf425
+    ,0xa348aca8
+    ,0x76a02a76
+    ,0x9b22769c
+    ,0xc4c02b76
+    ,0x46000344
+    ,0x984a0003
+    ,0x4244074b
+    ,0x99237694
+    ,0x9d0c2976
+    ,0x437bb229
+    ,0x45094500
+    ,0x4ab4b048
+    ,0x9e46a8a4
+    ,0x44002476
+    ,0x97440003
+    ,0x769a2676
+    ,0x48d1072a
+    ,0x1f45acb4
+    ,0x49d20043
+    ,0x17494780
+    ,0x7b304300
+    ,0x4bd00142
+    ,0x44094a04
+    ,0x44a09c46
+    ,0x932b7692
+    ,0xacb42276
+    ,0x004ad15a
+    ,0x00034545
+    ,0x25768d48
+    ,0x4b28768f
+    ,0x23768b29
+    ,0x0f420013
+    ,0x76954b00
+    ,0x46d00024
+    ,0xacb44400
+    ,0x42acb44b
+    ,0x0f490007
+    ,0x76904300
+    ,0xb4287686
+    ,0xd50148ac
+    ,0x2a769145
+    ,0x1b26768e
+    ,0x2b768922
+    ,0x8044acb4
+    ,0x000b4647
+    ,0x2576844a
+    ,0x76874254
+    ,0x23768229
+    ,0xb4438600
+    ,0x768a49ac
+    ,0xb42a7688
+    ,0xd2014aac
+    ,0x24768c46
+    ,0x0d4b000b
+    ,0x2276812b
+    ,0x0042503a
+    ,0x07d24b8a
+    ,0x26768544
+    ,0x3d14282c
+    ,0x292cec26
+    ,0x1444d403
+    ,0x768025bd
+    ,0x25767b26
+    ,0x7e247683
+    ,0xb4232976
+    ,0xe828767d
+    ,0x06b04405
+    ,0x2a767f45
+    ,0xfc460434
+    ,0x767c2a2c
+    ,0x444305d4
+    ,0x76794804
+    ,0x4906d023
+    ,0x0d4b4407
+    ,0x45940e4a
+    ,0x86449c50
+    ,0x8f014b96
+    ,0x488f0e49
+    ,0x76722476
+    ,0x4a920425
+    ,0x07267673
+    ,0x0521468f
+    ,0x05424407
+    ,0x7674438e
+    ,0x29767528
+    ,0x7a2b7677
+    ,0x4406a045
+    ,0x024b064b
+    ,0x07b04904
+    ,0x23767048
+    ,0x8e01458e
+    ,0x4a458046
+    ,0x76464500
+    ,0x44012a76
+    ,0x0e43c00f
+    ,0x900e488f
+    ,0x4b900e49
+    ,0x02449407
+    ,0x29766c2b
+    ,0x0028766b
+    ,0x767843b6
+    ,0x4297dd22
+    ,0x90012a76
+    ,0x26766a4a
+    ,0x71257669
+    ,0x766e2476
+    ,0x0149540f
+    ,0x000b4b08
+    ,0x4505b444
+    ,0x6d46540d
+    ,0x428e0648
+    ,0x63434601
+    ,0x76674206
+    ,0x48050d23
+    ,0xcf004650
+    ,0x44820045
+    ,0x144b00b4
+    ,0xae5049ae
+    ,0x65297663
+    ,0x76682b76
+    ,0x25766024
+    ,0x2a267661
+    ,0x42080748
+    ,0x0223765e
+    ,0x766f43cd
+    ,0x28766222
+    ,0x07f245cd
+    ,0x44061645
+    ,0x344b04c1
+    ,0x057d4905
+    ,0x48ce0942
+    ,0x3649ce00
+    ,0x4bcf06b0
+    ,0x0844ce0f
+    ,0x2cf42676
+    ,0x29765a2a
+    ,0x66287659
+    ,0x00b82276
+    ,0x57444582
+    ,0x765f2576
+    ,0x43040224
+    ,0x582b765c
+    ,0x2a766449
+    ,0x03464407
+    ,0xca024b00
+    ,0x45052143
+    ,0x043046aa
+    ,0x49c2884a
+    ,0x0748c010
+    ,0x44074844
+    ,0x0444ca06
+    ,0x765545a6
+    ,0x42058423
+    ,0x084bc474
+    ,0x2b765326
+    ,0x4442cf01
+    ,0x764e4304
+    ,0x24765625
+    ,0x05d44806
+    ,0x28765049
+    ,0x09297651
+    ,0x764f4acf
+    ,0x5d43a30e
+    ,0x06b02276
+    ,0x46000b4b
+    ,0x632a765b
+    ,0x23764c42
+    ,0x014500cc
+    ,0x06d044a3
+    ,0x45000f44
+    ,0xa20649a2
+    ,0x4a440748
+    ,0x0e46d0c0
+    ,0x44034ba8
+    ,0x462b764a
+    ,0xc3be2676
+    ,0x2876474a
+    ,0x05297648
+    ,0x45000f44
+    ,0x4524764d
+    ,0x04022576
+    ,0x42c80143
+    ,0x44072a76
+    ,0x4b458046
+    ,0x0e227654
+    ,0x064b43a4
+    ,0x004a06a0
+    ,0xa2024896
+    ,0x49440149
+    ,0x5248000b
+    ,0x44a40e45
+    ,0x34237643
+    ,0xa4014204
+    ,0x467be24b
+    ,0xa3072b76
+    ,0x43540f42
+    ,0x3c247644
+    ,0xf8a62576
+    ,0x3f48000b
+    ,0x763e2976
+    ,0x4aa80728
+    ,0x4126763d
+    ,0x22764b43
+    ,0x1f4b001f
+    ,0x76494600
+    ,0x49001f2a
+    ,0xb8d04a45
+    ,0x4bd0e846
+    ,0x3a4207b0
+    ,0xcc282376
+    ,0x3545001f
+    ,0xd8f02876
+    ,0x245dfc48
+    ,0x0049e4fc
+    ,0x2b763842
+    ,0x3b267634
+    ,0xa2012476
+    ,0x2976364a
+    ,0x44072a76
+    ,0x46000344
+    ,0x07227642
+    ,0xa30e4b44
+    ,0x2d289dfc
+    ,0x76332976
+    ,0x4598b025
+    ,0x40293c10
+    ,0x4bce2b2b
+    ,0x92223dfc
+    ,0x7bf246f4
+    ,0x4a000f44
+    ,0x76324ad8
+    ,0x43001f24
+    ,0x3926762b
+    ,0x762f2276
+    ,0x3744001f
+    ,0x45002a76
+    ,0x49001f48
+    ,0xf028762c
+    ,0x44d0f822
+    ,0x31464407
+    ,0xf8962376
+    ,0x256dfc43
+    ,0x88b02976
+    ,0x25762a49
+    ,0xfc48a400
+    ,0x3dfc2abd
+    ,0x302a762e
+    ,0x000b2276
+    ,0x2876234b
+    ,0x2445548f
+    ,0x4a001f43
+    ,0x2244000f
+    ,0x7b102676
+    ,0x24762946
+    ,0xa9012576
+    ,0x48440745
+    ,0x1f4bc8f0
+    ,0x000f4200
+    ,0x43c8f04a
+    ,0x2642d4fc
+    ,0xb8692b76
+    ,0x21488e2b
+    ,0x76282276
+    ,0x2a762523
+    ,0x00247620
+    ,0xa8d044b6
+    ,0x1a490007
+    ,0x761b2876
+    ,0x46540f29
+    ,0x274b001f
+    ,0x43000f4a
+    ,0xc0420005
+    ,0x8c184bb0
+    ,0x48001f46
+    ,0x90a043d6
+    ,0x4444074a
+    ,0xda257618
+    ,0x001f254d
+    ,0xa049a8c0
+    ,0x76194888
+    ,0x2b761d26
+    ,0xb642d0e0
+    ,0x22761e23
+    ,0x0f4b0001
+    ,0x76114600
+    ,0x29761228
+    ,0xccc02476
+    ,0x45000b45
+    ,0x1c44b400
+    ,0x761f2a76
+    ,0x8e4698b0
+    ,0x44074bb0
+    ,0x4346ca42
+    ,0x174a000f
+    ,0x4ab89044
+    ,0x0243b201
+    ,0x761442b1
+    ,0x2676102b
+    ,0x7615232a
+    ,0x23761622
+    ,0x002a7613
+    ,0x000f4482
+    ,0x81223680
+    ,0x36822436
+    ,0x42860025
+    ,0x0042000b
+    ,0x00428888
     ,0xc1304400
-    ,0x0200d00f
-    ,0x2236800c
-    ,0x00243681
+    ,0x0f000000
+    ,0x0c0200d0
+    ,0x00000000
     ,0x9230d00f
     ,0x07809340
     ,0x42888844
-    ,0x00428888
     ,0x00004821
     ,0x4afff848
     ,0x9f490003
@@ -1564,7 +1568,7 @@ const GT_U32 prvCpssDxChPpaFwImemFalconImage02Previous[PRV_CPSS_DXCH_PPA_FW_IMAG
     ,0xff7f0104
     ,0x1dcd4364
     ,0x20029543
-    ,0x405000f1
+    ,0x405000f2
     ,0x22004342
     ,0x4d00004d
     ,0x0043000f
@@ -1628,7 +1632,7 @@ const GT_U32 prvCpssDxChPpaFwImemFalconImage02Previous[PRV_CPSS_DXCH_PPA_FW_IMAG
     ,0xff7f0104
     ,0x1dcd4364
     ,0x20029543
-    ,0x405000b1
+    ,0x405000b2
     ,0x22004342
     ,0x4d00004d
     ,0x0043000f
@@ -1760,102 +1764,102 @@ const GT_U32 prvCpssDxChPpaFwImemFalconImage02Previous[PRV_CPSS_DXCH_PPA_FW_IMAG
     ,0x0faa1100
     ,0x9e28828a
     ,0x2b82899b
-    ,0x74254673
-    ,0x46752546
-    ,0x22228326
+    ,0x4b264675
+    ,0x46820202
+    ,0x22228325
     ,0x19080849
-    ,0x25467725
-    ,0x13254678
-    ,0x7711277d
-    ,0x02024b0e
-    ,0x467d2546
-    ,0x25467e25
-    ,0x11267639
-    ,0x46762896
-    ,0x343b2546
-    ,0x2bc39a29
-    ,0x25467fcc
-    ,0x7c25467b
-    ,0x0e002b34
-    ,0x4a00004a
-    ,0x0010c3be
-    ,0x80954160
-    ,0x00252680
-    ,0x0000423e
-    ,0x25a6f942
-    ,0x3b254681
+    ,0x25467825
+    ,0x11277d13
+    ,0x46730e77
+    ,0x25467425
+    ,0x467e2546
+    ,0x26763925
+    ,0x76289611
+    ,0x46772546
+    ,0xc39a2934
+    ,0x467fcc2b
+    ,0x25467b25
+    ,0x7d25467c
+    ,0x00004a0e
+    ,0x10c3be4a
+    ,0x95416000
+    ,0x3b254680
+    ,0x00423e00
+    ,0xa6f94200
+    ,0x25468125
+    ,0x002b343b
+    ,0xd00f0000
+    ,0x810a2000
+    ,0x02002222
+    ,0x2526800c
+    ,0xfc2553fc
+    ,0x53fbfd53
+    ,0x1053f97a
     ,0x211cf090
-    ,0x00d00f00
-    ,0x22810a20
-    ,0x0c020022
-    ,0x3553fc44
-    ,0xfc2653fc
-    ,0x53fbfe53
-    ,0x1053f97f
-    ,0x53fda053
-    ,0xf653fd51
-    ,0xfc9f53fc
-    ,0x53fc6f53
-    ,0xfe4553fe
-    ,0x53fe2153
-    ,0xff53fe16
-    ,0xfdf453fd
-    ,0xed53fefc
-    ,0xfee253fe
-    ,0x53fed253
-    ,0x7453feb3
-    ,0x8010211c
-    ,0x7a53ffb1
-    ,0xf97753ff
-    ,0x53ff3b53
-    ,0x043f0474
+    ,0xf553fd50
+    ,0xfc9e53fc
+    ,0x53fc6e53
+    ,0x3453fc43
+    ,0x53fe2053
+    ,0xfe53fe15
+    ,0xfdf353fd
+    ,0x53fd9f53
+    ,0xfee153fe
+    ,0x53fed153
+    ,0x7353feb2
+    ,0xfe4453fe
+    ,0x7953ffb0
+    ,0xf97253ff
+    ,0x53ff3a53
+    ,0xec53fefb
     ,0x20056f04
     ,0x6e3230d6
     ,0x10d00f00
-    ,0x20736304
+    ,0x8010211c
     ,0x00331ac0
     ,0x0c004104
     ,0x5b290544
-    ,0x44654fec
+    ,0x043f0474
     ,0x031314b0
     ,0x220f2211
     ,0x03660cb1
-    ,0x73630cc0
+    ,0x20736304
     ,0xc839d00f
     ,0x22d00f00
     ,0x736301b1
-    ,0xc020d00f
+    ,0x44654fec
     ,0x44495630
     ,0x00000000
     ,0x21d00f00
-    ,0xc72f211d
+    ,0x73630cc0
     ,0xb1318316
     ,0x15b33303
     ,0x03b13082
-    ,0xffffffff
+    ,0xc020d00f
     ,0xffffffff
     ,0xffffffff
     ,0x01000300
+    ,0xc72f211d
 };
 
 /* Table to hold thread PC address. Each entry represents different thread. */
 const GT_U32 phaFwThreadsPcAddressFalconImage02Previous[PRV_CPSS_DXCH_PHA_MAX_THREADS_CNS] = {
      0x400160                                            /* 0 THR0_DoNothing */
-    ,0x400b60                                            /* 1 THR1_SRv6_End_Node */
-    ,0x400c00                                            /* 2 THR2_SRv6_Source_Node_1_segment */
-    ,0x400c40                                            /* 3 THR3_SRv6_Source_Node_First_Pass_2_3_segments */
-    ,0x400c80                                            /* 4 THR4_SRv6_Source_Node_Second_Pass_3_segments */
-    ,0x400d30                                            /* 5 THR5_SRv6_Source_Node_Second_Pass_2_segments */
-    ,0x400df0                                            /* 6 THR6_Cc_Erspan_TypeII_TrgDevLcMirroring_Ipv4 */
-    ,0x400f50                                            /* 7 THR7_Cc_Erspan_TypeII_TrgDevLcMirroring_Ipv6 */
-    ,0x4010c0                                            /* 8 THR8_Cc_Erspan_TypeII_TrgDevDirectMirroring_Ipv4 */
-    ,0x401200                                            /* 9 THR9_Cc_Erspan_TypeII_TrgDevDirectMirroring_Ipv6 */
-    ,0x401350                                            /* 10 THR10_Cc_Erspan_TypeII_SrcDevMirroring */
-    ,0x401380                                            /* 11 THR11_VXLAN_GPB_SourceGroupPolicyID */
-    ,0x4013e0                                            /* 12 THR12_MPLS_SR_NO_EL */
-    ,0x401410                                            /* 13 THR13_MPLS_SR_ONE_EL */
-    ,0x4014a0                                            /* 14 THR14_MPLS_SR_TWO_EL */
-    ,0x401560                                            /* 15 THR15_MPLS_SR_THREE_EL */
+    ,0x400b70                                            /* 1 THR1_SRv6_End_Node */
+    ,0x400c10                                            /* 2 THR2_SRv6_Source_Node_1_segment */
+    ,0x400c50                                            /* 3 THR3_SRv6_Source_Node_First_Pass_2_3_segments */
+    ,0x400c90                                            /* 4 THR4_SRv6_Source_Node_Second_Pass_3_segments */
+    ,0x400d40                                            /* 5 THR5_SRv6_Source_Node_Second_Pass_2_segments */
+    ,0x400e00                                            /* 6 THR6_Cc_Erspan_TypeII_TrgDevLcMirroring_Ipv4 */
+    ,0x400f60                                            /* 7 THR7_Cc_Erspan_TypeII_TrgDevLcMirroring_Ipv6 */
+    ,0x4010d0                                            /* 8 THR8_Cc_Erspan_TypeII_TrgDevDirectMirroring_Ipv4 */
+    ,0x401210                                            /* 9 THR9_Cc_Erspan_TypeII_TrgDevDirectMirroring_Ipv6 */
+    ,0x401360                                            /* 10 THR10_Cc_Erspan_TypeII_SrcDevMirroring */
+    ,0x401390                                            /* 11 THR11_VXLAN_GPB_SourceGroupPolicyID */
+    ,0x4013f0                                            /* 12 THR12_MPLS_SR_NO_EL */
+    ,0x401420                                            /* 13 THR13_MPLS_SR_ONE_EL */
+    ,0x4014b0                                            /* 14 THR14_MPLS_SR_TWO_EL */
+    ,0x401570                                            /* 15 THR15_MPLS_SR_THREE_EL */
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 16 */
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 17 */
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 18 */
@@ -1893,19 +1897,19 @@ const GT_U32 phaFwThreadsPcAddressFalconImage02Previous[PRV_CPSS_DXCH_PHA_MAX_TH
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 50 */
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 51 */
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 52 */
-    ,0x401660                                            /* 53 THR53_SRV6_End_Node_GSID_COC32 */
-    ,0x4016e0                                            /* 54 THR54_IPv4_TTL_Increment */
-    ,0x401720                                            /* 55 THR55_IPv6_HopLimit_Increment */
-    ,0x401750                                            /* 56 THR56_Clear_Outgoing_Mtag_Cmd */
-    ,0x401790                                            /* 57 THR57_SFLOW_V5_IPv4 */
-    ,0x401890                                            /* 58 THR58_SFLOW_V5_IPv6 */
+    ,0x401670                                            /* 53 THR53_SRV6_End_Node_GSID_COC32 */
+    ,0x4016f0                                            /* 54 THR54_IPv4_TTL_Increment */
+    ,0x401730                                            /* 55 THR55_IPv6_HopLimit_Increment */
+    ,0x401760                                            /* 56 THR56_Clear_Outgoing_Mtag_Cmd */
+    ,0x4017a0                                            /* 57 THR57_SFLOW_V5_IPv4 */
+    ,0x4018a0                                            /* 58 THR58_SFLOW_V5_IPv6 */
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 59 */
     ,0x400180                                            /* 60 THR60_DropAllTraffic */
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 61 */
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 62 */
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 63 */
-    ,0x401990                                            /* 64 THR64_Erspan_TypeII_SameDevMirroring_Ipv4 */
-    ,0x401a70                                            /* 65 THR65_Erspan_TypeII_SameDevMirroring_Ipv6 */
+    ,0x4019a0                                            /* 64 THR64_Erspan_TypeII_SameDevMirroring_Ipv4 */
+    ,0x401a80                                            /* 65 THR65_Erspan_TypeII_SameDevMirroring_Ipv6 */
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 66 */
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 67 */
     ,PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS     /* 68 */
@@ -2316,7 +2320,7 @@ const GT_U32 phaFwAccelCmdsFalconImage02Previous[FW_ACCEL_CMDS_MAX_NUM_CNS] = {
    /* 540d503a ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x3A_LEN14_TO_DESC_phal2ppa__egress_byte_count, offset = 0x01c4 */
    ,0x000f8200 /* COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_erspan_template__mac_da_47_32_LEN16_TO_PKT_IPv6_Header__version_MINUS18, offset = 0x03c4 */
    /* 540d503e ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x3E_LEN14_TO_DESC_phal2ppa__egress_byte_count, offset = 0x01a4 */
-   ,0x00000000 /* offset = 0x03c8 */
+   ,0x000bccc0 /* SHIFTRIGHT_12_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_LEN12_FROM_PKT_mac_header__mac_da_47_32, offset = 0x03c8 */
    ,0x00000000 /* offset = 0x03cc */
    ,0x00000000 /* offset = 0x03d0 */
    ,0x00000000 /* offset = 0x03d4 */
diff --git a/mainPpDrv/src/cpss/dxCh/dxChxGen/pcl/prvCpssDxChPcl.c b/mainPpDrv/src/cpss/dxCh/dxChxGen/pcl/prvCpssDxChPcl.c
index b8d55eb574..ed1b7b35b1 100755
--- a/mainPpDrv/src/cpss/dxCh/dxChxGen/pcl/prvCpssDxChPcl.c
+++ b/mainPpDrv/src/cpss/dxCh/dxChxGen/pcl/prvCpssDxChPcl.c
@@ -7577,6 +7577,17 @@ static GT_STATUS sip5PclTcamRuleEgressActionSw2HwConvert
                 value = 1;
                 value2 = swActionPtr->epclPhaInfo.phaThreadUnion.epclSflowV5Mirror.sflowSamplingRate;
                 break;
+            case CPSS_DXCH_PCL_ACTION_EGRESS_PHA_THREAD_ENHANCED_SFLOW_E:
+                /******************************************/
+                /* check that the PHA LIB was initialized */
+                /******************************************/
+                PRV_CPSS_DXCH_PHA_LIB_INIT_CHECK_MAC(devNum);
+                value = 1;
+                value2 = swActionPtr->epclPhaInfo.phaThreadUnion.epclEnhancedSflow.agentIpAddr.arIP[0] << 24 |
+                         swActionPtr->epclPhaInfo.phaThreadUnion.epclEnhancedSflow.agentIpAddr.arIP[1] << 16 |
+                         swActionPtr->epclPhaInfo.phaThreadUnion.epclEnhancedSflow.agentIpAddr.arIP[2] << 8  |
+                         swActionPtr->epclPhaInfo.phaThreadUnion.epclEnhancedSflow.agentIpAddr.arIP[3]       ;    
+                break;
 
              default:
                 CPSS_LOG_ERROR_AND_RETURN_ON_ENUM_MAC(swActionPtr->epclPhaInfo.phaThreadType);
@@ -10962,6 +10973,12 @@ static GT_STATUS sip5PclTcamRuleEgressActionHw2SwConvert
                 case CPSS_DXCH_PCL_ACTION_EGRESS_PHA_THREAD_SFLOW_V5_MIRROR_E:
                     swActionPtr->epclPhaInfo.phaThreadUnion.epclSflowV5Mirror.sflowSamplingRate = value;
                     break;
+                case CPSS_DXCH_PCL_ACTION_EGRESS_PHA_THREAD_ENHANCED_SFLOW_E:
+                    swActionPtr->epclPhaInfo.phaThreadUnion.epclEnhancedSflow.agentIpAddr.arIP[0] = value >> 24;
+                    swActionPtr->epclPhaInfo.phaThreadUnion.epclEnhancedSflow.agentIpAddr.arIP[1] = (value >> 16) & 0xFF ;
+                    swActionPtr->epclPhaInfo.phaThreadUnion.epclEnhancedSflow.agentIpAddr.arIP[2] = (value >>  8) & 0xFF ;
+                    swActionPtr->epclPhaInfo.phaThreadUnion.epclEnhancedSflow.agentIpAddr.arIP[3] = value & 0xFF ;
+                    break;
 
                 default: /* unknown format */
                     CPSS_LOG_ERROR_MAC("epclPhaInfo.phaThreadType must hold value CPSS_DXCH_PCL_ACTION_EGRESS_PHA_THREAD_TYPE_ENT when SIP6_EPCL_ACTION_TABLE_FIELDS_PHA_METADATA_ASSIGN_ENABLE_E = 'enabled'");
diff --git a/mainPpDrv/src/cpss/dxCh/dxChxGen/pha/cpssDxChPha.c b/mainPpDrv/src/cpss/dxCh/dxChxGen/pha/cpssDxChPha.c
index e0b775c8dd..f1fb965c8e 100755
--- a/mainPpDrv/src/cpss/dxCh/dxChxGen/pha/cpssDxChPha.c
+++ b/mainPpDrv/src/cpss/dxCh/dxChxGen/pha/cpssDxChPha.c
@@ -188,10 +188,10 @@ static const PHA_FW_THREAD_STATIC_INFO_STC  phaFwThreadsInitInformation[PRV_CPSS
    ,{PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS ,      56     ,    Outer_L3_Start       ,     EXPAND_32B  }      /* 59 THR_SLS_Test                                     */
    ,{PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS ,      28     ,    Outer_L2_Start       ,     EXPAND_32B  }      /* 60 THR_DropAllTraffic                               */
    ,{PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS ,      22     ,    Outer_L3_Start       ,     EXPAND_32B  }      /* 61 THR_save_target_port_info                        */
-   ,{PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS ,      34     ,    Outer_L3_Start       ,     EXPAND_32B  }      /* 62 THR62_enhanced_sFlow_fill_remain_IPv4            */
-   ,{PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS ,      30     ,    Outer_L3_Start       ,     EXPAND_32B  }      /* 63 THR63_enhanced_sFlow_fill_remain_IPv6            */
-   ,{PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS ,     132     ,    Outer_L2_Start       ,     EXPAND_64B  }      /* 64 THR_Erspan_TypeII_SameDevMirroring_Ipv4          */
-   ,{PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS ,     168     ,    Outer_L2_Start       ,     EXPAND_64B  }      /* 65 THR_Erspan_TypeII_SameDevMirroring_Ipv6          */
+   ,{PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS ,      36     ,    Outer_L3_Start       ,     EXPAND_32B  }      /* 62 THR62_enhanced_sFlow_fill_remain_IPv4            */
+   ,{PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS ,      32     ,    Outer_L3_Start       ,     EXPAND_32B  }      /* 63 THR63_enhanced_sFlow_fill_remain_IPv6            */
+   ,{PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS ,     134     ,    Outer_L2_Start       ,     EXPAND_64B  }      /* 64 THR_Erspan_TypeII_SameDevMirroring_Ipv4          */
+   ,{PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS ,     170     ,    Outer_L2_Start       ,     EXPAND_64B  }      /* 65 THR_Erspan_TypeII_SameDevMirroring_Ipv6          */
    ,{PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS ,      76     ,    Outer_L2_Start       ,     EXPAND_64B  }      /* 66 THR66_enhanced_sFlow                             */
    ,{PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS ,       0     ,           0             ,         0       }      /* 67 TBD                                              */
    ,{PRV_CPSS_DXCH_PHA_INVALID_FW_THREAD_ADDRESS_CNS ,       0     ,           0             ,         0       }      /* 68 TBD                                              */
@@ -1124,6 +1124,22 @@ static GT_STATUS firmwareThreadTypeToThreadId(
         case CPSS_DXCH_PHA_THREAD_TYPE_ERSPAN_TYPE_II_SAME_DEV_IPV6_E:
             *firmwareThreadIdPtr = THR_ID_65;
             break;
+        
+    case CPSS_DXCH_PHA_THREAD_TYPE_ENHANCED_SFLOW_SAVE_TARGET_PORT_E:
+            *firmwareThreadIdPtr = THR_ID_61;
+            break;
+        
+    case CPSS_DXCH_PHA_THREAD_TYPE_ENHANCED_SFLOW_E:
+            *firmwareThreadIdPtr = THR_ID_66;
+            break;
+
+        case CPSS_DXCH_PHA_THREAD_TYPE_ENHANCED_SFLOW_FILL_REMAIN_IPV4_E:
+            *firmwareThreadIdPtr = THR_ID_62;
+            break;
+
+        case CPSS_DXCH_PHA_THREAD_TYPE_ENHANCED_SFLOW_FILL_REMAIN_IPV6_E:
+            *firmwareThreadIdPtr = THR_ID_63;
+            break;
 
         default:
             CPSS_LOG_ERROR_AND_RETURN_ON_ENUM_MAC(threadType);
@@ -2673,6 +2689,55 @@ static GT_STATUS parseSgtNetworkTemplate
     return GT_OK;
 }
 
+/**
+* @internal parseEnahncedSflowTemplate function
+* @endinternal
+*
+* @brief  build sflow agent ip address's thread template from the user info
+*
+* @note   APPLICABLE DEVICES:      Falcon; AC5P; AC5X; Harrier.
+* @note   NOT APPLICABLE DEVICES:  xCat3; AC5; Lion2; Bobcat2; Caelum; Aldrin; AC3X; Bobcat3; Aldrin2, Ironman.
+*
+* @param[in] dataPtr[0]     -  holds the srcModId (device id of sample port) of the enhanced sflow format
+*
+* @param[out] enhancedSflowPtr   - (pointer to) the enahnced sflow srcModId info.
+*
+* @retval GT_OK              - on success
+*/
+static GT_VOID parseEnahncedSflowTemplate
+(
+    IN   GT_U32 dataPtr[/*4*/],
+    OUT  CPSS_DXCH_PHA_THREAD_INFO_TYPE_ENHANCED_SFLOW_STC  *enhancedSflowPtr
+)
+{
+    /*src mod id <Word1: Bit[31:24]> = Template Data[7:0]*/
+    enhancedSflowPtr->srcModId = (GT_U8)(dataPtr[0] & 0xFF);
+}
+/**
+* @internal buildEnahncedSflowTemplate function
+* @endinternal
+*
+* @brief  build sflow agent ip address's thread template from the user info
+*
+* @note   APPLICABLE DEVICES:      Falcon; AC5P; AC5X; Harrier.
+* @note   NOT APPLICABLE DEVICES:  xCat3; AC5; Lion2; Bobcat2; Caelum; Aldrin; AC3X; Bobcat3; Aldrin2, Ironman.
+*
+* @param[in] sflowV5MirrorPtr - (pointer to) the sflow v5 info.
+*
+* @param[out] dataPtr[0]     -  holds the ip address of the sflow agent header format
+*             dataPtr[1]     -  holds the enterprise data format
+*
+* @retval NONE
+*/
+static GT_VOID buildEnahncedSflowTemplate
+(
+    IN CPSS_DXCH_PHA_THREAD_INFO_TYPE_ENHANCED_SFLOW_STC  *enhancedSflowPtr,
+    OUT GT_U32 dataPtr[/*4*/]
+)
+{
+    /*src mod id <Word1: Bit[31:24]> = Template Data[7:0]*/
+    dataPtr[0] = enhancedSflowPtr->srcModId;
+}
 /**
 * @internal parseSflowV5Template function
 * @endinternal
@@ -3114,6 +3179,9 @@ static GT_STATUS internal_cpssDxChPhaThreadIdEntrySet
         case CPSS_DXCH_PHA_THREAD_TYPE_DROP_ALL_TRAFFIC_E:
         case CPSS_DXCH_PHA_THREAD_TYPE_ERSPAN_TYPE_II_SAME_DEV_IPV4_E:
         case CPSS_DXCH_PHA_THREAD_TYPE_ERSPAN_TYPE_II_SAME_DEV_IPV6_E:
+        case CPSS_DXCH_PHA_THREAD_TYPE_ENHANCED_SFLOW_SAVE_TARGET_PORT_E:
+        case CPSS_DXCH_PHA_THREAD_TYPE_ENHANCED_SFLOW_FILL_REMAIN_IPV4_E:
+        case CPSS_DXCH_PHA_THREAD_TYPE_ENHANCED_SFLOW_FILL_REMAIN_IPV6_E:
             PPAThreadsConf2Words[3] = extInfoPtr->notNeeded;
             break;
 
@@ -3255,6 +3323,10 @@ static GT_STATUS internal_cpssDxChPhaThreadIdEntrySet
 
             PPAThreadsConf2Words[0] = templateArr[0];
             break;
+        case CPSS_DXCH_PHA_THREAD_TYPE_ENHANCED_SFLOW_E:
+            buildEnahncedSflowTemplate(&extInfoPtr->enhancedSflow, &templateArr[0]);
+            PPAThreadsConf2Words[0] = templateArr[0];
+            break;
 
         case CPSS_DXCH_PHA_THREAD_TYPE_SFLOW_V5_IPV4_E:
         case CPSS_DXCH_PHA_THREAD_TYPE_SFLOW_V5_IPV6_E:
@@ -3580,6 +3652,9 @@ static GT_STATUS internal_cpssDxChPhaThreadIdEntryGet
         case CPSS_DXCH_PHA_THREAD_TYPE_DROP_ALL_TRAFFIC_E:
         case CPSS_DXCH_PHA_THREAD_TYPE_ERSPAN_TYPE_II_SAME_DEV_IPV4_E:
         case CPSS_DXCH_PHA_THREAD_TYPE_ERSPAN_TYPE_II_SAME_DEV_IPV6_E:
+        case CPSS_DXCH_PHA_THREAD_TYPE_ENHANCED_SFLOW_SAVE_TARGET_PORT_E:
+        case CPSS_DXCH_PHA_THREAD_TYPE_ENHANCED_SFLOW_FILL_REMAIN_IPV4_E:
+        case CPSS_DXCH_PHA_THREAD_TYPE_ENHANCED_SFLOW_FILL_REMAIN_IPV6_E:
             extInfoPtr->notNeeded = PPAThreadsConf2Words[3];
             break;
 
@@ -3745,6 +3820,10 @@ static GT_STATUS internal_cpssDxChPhaThreadIdEntryGet
             }
             break;
 
+        case CPSS_DXCH_PHA_THREAD_TYPE_ENHANCED_SFLOW_E:
+            parseEnahncedSflowTemplate(&PPAThreadsConf2Words[0], &extInfoPtr->enhancedSflow);
+            break;
+
         default:
             CPSS_LOG_ERROR_AND_RETURN_ON_ENUM_MAC(extType);
     }
@@ -5528,8 +5607,8 @@ static GT_STATUS buildErspanIpv4Template
 *
 * @brief   Set the ERSPAN entry in the PHA shared memory table.
 *
-* @note   APPLICABLE DEVICES:      Falcon.
-* @note   NOT APPLICABLE DEVICES:  xCat3; AC5; Lion2; Bobcat2; Caelum; Aldrin; AC3X; Bobcat3; Aldrin2; AC5P; AC5X; Harrier; Ironman.
+* @note   APPLICABLE DEVICES:      Falcon; AC5P; AC5X; Harrier.
+* @note   NOT APPLICABLE DEVICES:  xCat3; AC5; Lion2; Bobcat2; Caelum; Aldrin; AC3X; Bobcat3; Aldrin2; Ironman.
 *
 * @param[in] devNum                - device number.
 * @param[in] analyzerIndex         - analyzer index.
@@ -5560,7 +5639,7 @@ static GT_STATUS internal_cpssDxChPhaSharedMemoryErspanIpTemplateEntrySet
     GT_U32                                                              iter;
 
     PRV_CPSS_DXCH_DEV_CHECK_MAC(devNum);
-    PRV_CPSS_NOT_APPLICABLE_DEV_CHECK_MAC(devNum, CPSS_XCAT3_E | CPSS_AC5_E | CPSS_LION2_E | CPSS_BOBCAT2_E | CPSS_CAELUM_E | CPSS_ALDRIN_E | CPSS_AC3X_E | CPSS_BOBCAT3_E | CPSS_ALDRIN2_E | CPSS_AC5P_E | CPSS_AC5X_E | CPSS_HARRIER_E | CPSS_IRONMAN_E);
+    PRV_CPSS_NOT_APPLICABLE_DEV_CHECK_MAC(devNum, CPSS_XCAT3_E | CPSS_AC5_E | CPSS_LION2_E | CPSS_BOBCAT2_E | CPSS_CAELUM_E | CPSS_ALDRIN_E | CPSS_AC3X_E | CPSS_BOBCAT3_E | CPSS_ALDRIN2_E | CPSS_IRONMAN_E);
     PHA_UNIT_CHECK(devNum);
 
     /**************************************/
@@ -5635,8 +5714,8 @@ static GT_STATUS internal_cpssDxChPhaSharedMemoryErspanIpTemplateEntrySet
 *
 * @brief   Set the ERSPAN entry in the PHA shared memory table.
 *
-* @note   APPLICABLE DEVICES:      Falcon.
-* @note   NOT APPLICABLE DEVICES:  xCat3; AC5; Lion2; Bobcat2; Caelum; Aldrin; AC3X; Bobcat3; Aldrin2; AC5P; AC5X; Harrier; Ironman.
+* @note   APPLICABLE DEVICES:      Falcon; AC5P; AC5X; Harrier.
+* @note   NOT APPLICABLE DEVICES:  xCat3; AC5; Lion2; Bobcat2; Caelum; Aldrin; AC3X; Bobcat3; Aldrin2; Ironman.
 *
 * @param[in] devNum                   - device number.
 * @param[in] analyzerIndex            - analyzer index.
@@ -5681,8 +5760,8 @@ GT_STATUS cpssDxChPhaSharedMemoryErspanIpTemplateEntrySet
 *
 * @brief   Get the ERSPAN entry from the PHA shared memory table.
 *
-* @note   APPLICABLE DEVICES:      Falcon.
-* @note   NOT APPLICABLE DEVICES:  xCat3; AC5; Lion2; Bobcat2; Caelum; Aldrin; AC3X; Bobcat3; Aldrin2; AC5P; AC5X; Harrier; Ironman.
+* @note   APPLICABLE DEVICES:      Falcon; AC5P; AC5X; Harrier.
+* @note   NOT APPLICABLE DEVICES:  xCat3; AC5; Lion2; Bobcat2; Caelum; Aldrin; AC3X; Bobcat3; Aldrin2; Ironman.
 *
 * @param[in] devNum                - device number.
 * @param[in] analyzerIndex         - analyzer index.
@@ -5714,7 +5793,7 @@ static GT_STATUS internal_cpssDxChPhaSharedMemoryErspanIpTemplateEntryGet
     GT_U32                                                           protocol;
 
     PRV_CPSS_DXCH_DEV_CHECK_MAC(devNum);
-    PRV_CPSS_NOT_APPLICABLE_DEV_CHECK_MAC(devNum, CPSS_XCAT3_E | CPSS_AC5_E | CPSS_LION2_E | CPSS_BOBCAT2_E | CPSS_CAELUM_E | CPSS_ALDRIN_E | CPSS_AC3X_E | CPSS_BOBCAT3_E | CPSS_ALDRIN2_E | CPSS_AC5P_E | CPSS_AC5X_E | CPSS_HARRIER_E | CPSS_IRONMAN_E);
+    PRV_CPSS_NOT_APPLICABLE_DEV_CHECK_MAC(devNum, CPSS_XCAT3_E | CPSS_AC5_E | CPSS_LION2_E | CPSS_BOBCAT2_E | CPSS_CAELUM_E | CPSS_ALDRIN_E | CPSS_AC3X_E | CPSS_BOBCAT3_E | CPSS_ALDRIN2_E | CPSS_IRONMAN_E);
     PHA_UNIT_CHECK(devNum);
 
     /**************************************/
@@ -5771,8 +5850,8 @@ static GT_STATUS internal_cpssDxChPhaSharedMemoryErspanIpTemplateEntryGet
 *
 * @brief   Get the ERSPAN entry from the PHA shared memory table.
 *
-* @note   APPLICABLE DEVICES:      Falcon.
-* @note   NOT APPLICABLE DEVICES:  xCat3; AC5; Lion2; Bobcat2; Caelum; Aldrin; AC3X; Bobcat3; Aldrin2; AC5P; AC5X; Harrier; Ironman.
+* @note   APPLICABLE DEVICES:      Falcon; AC5P; AC5X; Harrier.
+* @note   NOT APPLICABLE DEVICES:  xCat3; AC5; Lion2; Bobcat2; Caelum; Aldrin; AC3X; Bobcat3; Aldrin2; Ironman.
 *
 * @param[in] devNum                    - device number.
 * @param[in] analyzerIndex             - analyzer index.
diff --git a/mainUT/mainPpDrv/src/cpss/dxCh/dxChxGen/pcl/cpssDxChPclUT.c b/mainUT/mainPpDrv/src/cpss/dxCh/dxChxGen/pcl/cpssDxChPclUT.c
index 45f3531972..064a43c6e3 100755
--- a/mainUT/mainPpDrv/src/cpss/dxCh/dxChxGen/pcl/cpssDxChPclUT.c
+++ b/mainUT/mainPpDrv/src/cpss/dxCh/dxChxGen/pcl/cpssDxChPclUT.c
@@ -6174,6 +6174,22 @@ UTF_TEST_CASE_MAC(cpssDxChPclRuleSet)
 
                         break;
 
+                    case CPSS_DXCH_PCL_ACTION_EGRESS_PHA_THREAD_ENHANCED_SFLOW_E:
+                        action.epclPhaInfo.phaThreadUnion.epclEnhancedSflow.agentIpAddr.arIP[0] = 1 ;
+                        action.epclPhaInfo.phaThreadUnion.epclEnhancedSflow.agentIpAddr.arIP[1] = 2 ;
+                        action.epclPhaInfo.phaThreadUnion.epclEnhancedSflow.agentIpAddr.arIP[2] = 3 ;
+                        action.epclPhaInfo.phaThreadUnion.epclEnhancedSflow.agentIpAddr.arIP[3] = 4 ;
+
+                        st = cpssDxChPclRuleSet(dev, mainUtCpssDxChPclTcamIndex, ruleFormat, ruleIndex, ruleOptionsBmp, &mask, &pattern, &action);
+                        UTF_VERIFY_EQUAL4_STRING_MAC(GT_OK, st,"%d, %d, %d, phaThreadType = %d",
+                                dev, ruleFormat, ruleIndex, action.epclPhaInfo.phaThreadType);
+                        st = cpssDxChPclRuleActionGet(dev, mainUtCpssDxChPclTcamIndex, ruleSize, ruleIndex, CPSS_PCL_DIRECTION_EGRESS_E, &actionGet);
+                        UTF_VERIFY_EQUAL4_STRING_MAC(GT_OK, st, "%d, %d, %d phaThrType %d",dev, ruleSize, ruleIndex, action.epclPhaInfo.phaThreadType);
+                        st = cpssOsMemCmp(&action.epclPhaInfo.phaThreadUnion, &actionGet.epclPhaInfo.phaThreadUnion, sizeof (actionGet.epclPhaInfo.phaThreadUnion)) ;
+                        UTF_VERIFY_EQUAL1_STRING_MAC(0, st, "phaThrType %d data mismatch ", phaThrType);
+
+                        break;
+
                     default:
                         UTF_VERIFY_EQUAL4_STRING_MAC(GT_NOT_IMPLEMENTED, st,"%d, %d, %d, PHA pcl action Not implemented for phaThreadType = %d",
                                 dev, ruleFormat, ruleIndex, action.epclPhaInfo.phaThreadType);
diff --git a/mainUT/mainPpDrv/src/cpss/dxCh/dxChxGen/pha/cpssDxChPhaUT.c b/mainUT/mainPpDrv/src/cpss/dxCh/dxChxGen/pha/cpssDxChPhaUT.c
index a93f5c8e7c..1ce1cb8824 100644
--- a/mainUT/mainPpDrv/src/cpss/dxCh/dxChxGen/pha/cpssDxChPhaUT.c
+++ b/mainUT/mainPpDrv/src/cpss/dxCh/dxChxGen/pha/cpssDxChPhaUT.c
@@ -372,7 +372,7 @@ extern GT_U32 utfFamilyTypeGet(IN GT_U8 devNum);
         PRV_TGF_NOT_APPLIC_DEV_RESET_MAC(&dev,utfFamilyTypeGet(prvTgfDevNum));         \
     }
 
-/*
+/**
 GT_STATUS cpssDxChPhaThreadIdEntrySet
 (
     IN GT_U8                devNum,
@@ -740,6 +740,30 @@ UTF_TEST_CASE_MAC(cpssDxChPhaThreadIdEntrySet)
             check_cpssDxChPhaThreadIdEntrySet_andGet(dev, phaThreadId, &commonInfo,
                     extType , &extInfo , GT_OK , GT_FALSE);
         }
+        /* check type : enhanced Sflow IPv4(run it only if thread is supported) */
+        if(GT_OK == prvCpssDxChPhaThreadValidityCheck(dev, CPSS_DXCH_PHA_THREAD_TYPE_ENHANCED_SFLOW_FILL_REMAIN_IPV4_E, &phaThreadId))
+        {
+            extType = CPSS_DXCH_PHA_THREAD_TYPE_ENHANCED_SFLOW_FILL_REMAIN_IPV4_E;
+            cpssOsMemSet(&extInfo,0,sizeof(extInfo));
+
+            /* source dev id = 0*/
+            extInfo.enhancedSflow.srcModId = 0;
+
+            check_cpssDxChPhaThreadIdEntrySet_andGet(dev, phaThreadId, &commonInfo,
+                    extType , &extInfo , GT_OK , GT_FALSE);
+        }
+        /* check type : enhanced Sflow IPv4(run it only if thread is supported) */
+        if(GT_OK == prvCpssDxChPhaThreadValidityCheck(dev, CPSS_DXCH_PHA_THREAD_TYPE_ENHANCED_SFLOW_FILL_REMAIN_IPV6_E, &phaThreadId))
+        {
+            extType = CPSS_DXCH_PHA_THREAD_TYPE_ENHANCED_SFLOW_FILL_REMAIN_IPV6_E;
+            cpssOsMemSet(&extInfo,0,sizeof(extInfo));
+
+            /* source dev id = 255*/
+            extInfo.enhancedSflow.srcModId = 255;
+
+            check_cpssDxChPhaThreadIdEntrySet_andGet(dev, phaThreadId, &commonInfo,
+                    extType , &extInfo , GT_OK , GT_FALSE);
+        }
     }
 
     phaThreadId = 1;
@@ -769,7 +793,7 @@ UTF_TEST_CASE_MAC(cpssDxChPhaThreadIdEntrySet)
 
 }
 
-/*
+/**
 GT_STATUS cpssDxChPhaThreadIdEntryGet
 (
     IN GT_U8                devNum,
@@ -2060,7 +2084,7 @@ UTF_TEST_CASE_MAC(cpssDxChPhaSharedMemoryErspanIpTemplateEntrySet)
     GT_U8 ipv6DipAddr[16] = {16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1};
 
     /* prepare device iterator */
-    PRV_TGF_APPLIC_DEV_RESET_MAC(&dev, UTF_FALCON_E);
+    PRV_TGF_APPLIC_DEV_RESET_MAC(&dev, (UTF_FALCON_E | UTF_AC5P_E | UTF_AC5X_E | UTF_HARRIER_E) );
     PRV_TGF_NON_PHA_APPLIC_DEV_RESET_MAC;
 
     /* 1. Go over all active devices. */
@@ -2195,7 +2219,7 @@ UTF_TEST_CASE_MAC(cpssDxChPhaSharedMemoryErspanIpTemplateEntrySet)
     cpssOsMemSet(&entryInfo,0,sizeof(entryInfo));
 
     /* prepare device iterator */
-    PRV_TGF_APPLIC_DEV_RESET_MAC(&dev, UTF_FALCON_E);
+    PRV_TGF_APPLIC_DEV_RESET_MAC(&dev, (UTF_FALCON_E | UTF_AC5P_E | UTF_AC5X_E | UTF_HARRIER_E));
     PRV_TGF_NON_PHA_APPLIC_DEV_RESET_MAC;
 
     /* go over all non active devices */
@@ -2230,7 +2254,7 @@ UTF_TEST_CASE_MAC(cpssDxChPhaSharedMemoryErspanIpTemplateEntryGet)
     CPSS_DXCH_PHA_THREAD_SHARED_INFO_TYPE_ERSPAN_STC entryInfoGet;
 
     /* prepare device iterator */
-    PRV_TGF_APPLIC_DEV_RESET_MAC(&dev, UTF_FALCON_E);
+    PRV_TGF_APPLIC_DEV_RESET_MAC(&dev, (UTF_FALCON_E | UTF_AC5P_E | UTF_AC5X_E | UTF_HARRIER_E));
     PRV_TGF_NON_PHA_APPLIC_DEV_RESET_MAC;
 
     /* 1. Go over all active devices. */
@@ -2253,7 +2277,7 @@ UTF_TEST_CASE_MAC(cpssDxChPhaSharedMemoryErspanIpTemplateEntryGet)
     analyzerIndex = 0;
 
     /* prepare device iterator */
-    PRV_TGF_APPLIC_DEV_RESET_MAC(&dev, UTF_FALCON_E);
+    PRV_TGF_APPLIC_DEV_RESET_MAC(&dev, (UTF_FALCON_E | UTF_AC5P_E | UTF_AC5X_E | UTF_HARRIER_E));
     PRV_TGF_NON_PHA_APPLIC_DEV_RESET_MAC;
 
     /* go over all non active devices */
diff --git a/mainUT/utfTraffic/src/mirror/tgfCommonMirrorUT.c b/mainUT/utfTraffic/src/mirror/tgfCommonMirrorUT.c
index 5ae573c344..529d05e022 100755
--- a/mainUT/utfTraffic/src/mirror/tgfCommonMirrorUT.c
+++ b/mainUT/utfTraffic/src/mirror/tgfCommonMirrorUT.c
@@ -1493,7 +1493,7 @@ UTF_TEST_CASE_MAC (prvTgfFalconMirrorIngressSflowMultiTarget)
 **/
 UTF_TEST_CASE_MAC (prvTgfFalconErspanSameDevMirrorIpv4Ingress)
 {
-    PRV_TGF_NOT_SUPPORTED_DEV_CHECK_MAC(prvTgfDevNum, ~UTF_FALCON_E);
+    PRV_TGF_NOT_SUPPORTED_DEV_CHECK_MAC(prvTgfDevNum, ~(UTF_FALCON_E | UTF_AC5P_E | UTF_AC5X_E | UTF_HARRIER_E) );
     /*config set*/
     prvTgfFalconErspanSameDevMirrorIpv4ConfigurationSet(CPSS_DIRECTION_INGRESS_E);
     /*Test with traffic*/
@@ -1509,7 +1509,7 @@ UTF_TEST_CASE_MAC (prvTgfFalconErspanSameDevMirrorIpv4Ingress)
 **/
 UTF_TEST_CASE_MAC (prvTgfFalconErspanSameDevMirrorIpv6Ingress)
 {
-    PRV_TGF_NOT_SUPPORTED_DEV_CHECK_MAC(prvTgfDevNum, ~UTF_FALCON_E);
+    PRV_TGF_NOT_SUPPORTED_DEV_CHECK_MAC(prvTgfDevNum, ~(UTF_FALCON_E | UTF_AC5P_E | UTF_AC5X_E | UTF_HARRIER_E) );
     /*config set*/
     prvTgfFalconErspanSameDevMirrorIpv6ConfigurationSet(CPSS_DIRECTION_INGRESS_E);
     /*Test with traffic*/
@@ -1525,7 +1525,7 @@ UTF_TEST_CASE_MAC (prvTgfFalconErspanSameDevMirrorIpv6Ingress)
 **/
 UTF_TEST_CASE_MAC (prvTgfFalconErspanSameDevMirrorIpv4Egress)
 {
-    PRV_TGF_NOT_SUPPORTED_DEV_CHECK_MAC(prvTgfDevNum, ~UTF_FALCON_E);
+    PRV_TGF_NOT_SUPPORTED_DEV_CHECK_MAC(prvTgfDevNum, ~(UTF_FALCON_E | UTF_AC5P_E | UTF_AC5X_E | UTF_HARRIER_E) );
     /*config set*/
     prvTgfFalconErspanSameDevMirrorIpv4ConfigurationSet(CPSS_DIRECTION_EGRESS_E);
     /*Test with traffic*/
@@ -1541,7 +1541,7 @@ UTF_TEST_CASE_MAC (prvTgfFalconErspanSameDevMirrorIpv4Egress)
 **/
 UTF_TEST_CASE_MAC (prvTgfFalconErspanSameDevMirrorIpv6Egress)
 {
-    PRV_TGF_NOT_SUPPORTED_DEV_CHECK_MAC(prvTgfDevNum, ~UTF_FALCON_E);
+    PRV_TGF_NOT_SUPPORTED_DEV_CHECK_MAC(prvTgfDevNum, ~(UTF_FALCON_E | UTF_AC5P_E | UTF_AC5X_E | UTF_HARRIER_E) );
     /*config set*/
     prvTgfFalconErspanSameDevMirrorIpv6ConfigurationSet(CPSS_DIRECTION_EGRESS_E);
     /*Test with traffic*/
diff --git a/simulation/simDevices/h/asicSimulation/SKernel/sEmbeddedCpu/firmware/ac5p_pha/Default/ppa_fw_accelerator_commands.h b/simulation/simDevices/h/asicSimulation/SKernel/sEmbeddedCpu/firmware/ac5p_pha/Default/ppa_fw_accelerator_commands.h
index 52f9f4a8eb..9ea52cc39e 100644
--- a/simulation/simDevices/h/asicSimulation/SKernel/sEmbeddedCpu/firmware/ac5p_pha/Default/ppa_fw_accelerator_commands.h
+++ b/simulation/simDevices/h/asicSimulation/SKernel/sEmbeddedCpu/firmware/ac5p_pha/Default/ppa_fw_accelerator_commands.h
@@ -305,6 +305,50 @@ void PPA_FW(load_accelerator_commands)();
 #define CSUM_LOAD_NEW_THR59_SLS_Test_LEN8_FROM_PKT_IPv4_Header__version_PLUS12_VALUE                                             (ACCEL_CMD_CSUM_LOAD|ACCEL_CMD_CSUM_LOAD_IS_OLD(0)|ACCEL_CMD_LEN_BYTE(8)|ACCEL_CMD_SRC_BYTE_TYPE(PKT)|ACCEL_CMD_SRC_BYTE(44)) /* 0x080700ac */
 #define CSUM_STORE_IP_THR59_SLS_Test_TO_PKT_IPv4_Header__header_checksum_VALUE                                                   (ACCEL_CMD_CSUM_STORE|ACCEL_CMD_CSUM_STORE_IS_UDP(0)|ACCEL_CMD_LEN_BIT(16)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(42)) /* 0xc00faa00 */
 
+/*************** THR64_Erspan_TypeII_SameDevMirroring_Ipv4 *******************/
+#define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x08_LEN8_TO_PKT_ethertype_header__ethertype_VALUE             (ACCEL_CMD_SRC_CONST(1)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(8)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(26)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(8)) /* 0x44079a08 */
+#define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x10_LEN8_TO_PKT_GRE_header__C_VALUE                           (ACCEL_CMD_SRC_CONST(1)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(8)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(48)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(16)) /* 0x4407b010 */
+#define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x88_LEN8_TO_PKT_GRE_header__NP_VALUE                          (ACCEL_CMD_SRC_CONST(1)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(8)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(50)|ACCEL_CMD_SRC_BYTE_TYPE(PKT)|ACCEL_CMD_SRC_BYTE(8)) /* 0x4407b288 */
+#define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0xBE_LEN8_TO_PKT_GRE_header__NP_PLUS8_VALUE                    (ACCEL_CMD_SRC_CONST(1)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(8)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(51)|ACCEL_CMD_SRC_BYTE_TYPE(PKT)|ACCEL_CMD_SRC_BYTE(62)) /* 0x4407b3be */
+#define COPY_BYTES_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__lm_counter_LEN4_TO_PKT_GRE_header__Seq_num_VALUE     (ACCEL_CMD_BYTE_COPY|ACCEL_CMD_LEN_BYTE(4)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(52)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(116)) /* 0x0003b474 */
+#define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_srcTrgPortEntry__targetPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4_VALUE (ACCEL_CMD_SRC_CONST(0)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(16)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(62)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(18)) /* 0x040fbe12 */
+#define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_srcTrgPortEntry__srcPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4_VALUE (ACCEL_CMD_SRC_CONST(0)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(16)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(62)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(16)) /* 0x040fbe10 */
+#define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x1_LEN4_TO_PKT_ERSPAN_type_II_header__Ver_VALUE               (ACCEL_CMD_SRC_CONST(1)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(4)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(56)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(1)) /* 0x4403b801 */
+#define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__qos_mapped_up_LEN3_TO_PKT_ERSPAN_type_II_header__COS_VALUE (ACCEL_CMD_SRC_CONST(0)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(4)|ACCEL_CMD_LEN_BIT(3)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(58)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(74)) /* 0x0442ba4a */
+#define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x3_LEN2_TO_PKT_ERSPAN_type_II_header__En_VALUE                (ACCEL_CMD_SRC_CONST(1)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(3)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(2)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(58)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(3)) /* 0x4581ba03 */
+#define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__truncated_LEN1_TO_PKT_ERSPAN_type_II_header__T_VALUE  (ACCEL_CMD_SRC_CONST(0)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(5)|ACCEL_CMD_SRC_BIT(4)|ACCEL_CMD_LEN_BIT(1)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(58)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(64)) /* 0x06c0ba40 */
+#define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__egress_byte_count_LEN14_TO_PKT_IPv4_Header__total_length_PLUS2_VALUE (ACCEL_CMD_SRC_CONST(0)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(2)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(14)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(30)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(80)) /* 0x050d9e50 */
+#define ADD_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x24_LEN16_TO_PKT_IPv4_Header__total_length_VALUE               (ACCEL_CMD_SRC_CONST(1)|ACCEL_CMD_BIT_ADD|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(16)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(30)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(36)) /* 0x540f9e24 */
+#define CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN8_FROM_PKT_IPv4_Header__version_VALUE                         (ACCEL_CMD_CSUM_LOAD|ACCEL_CMD_CSUM_LOAD_IS_OLD(0)|ACCEL_CMD_LEN_BYTE(8)|ACCEL_CMD_SRC_BYTE_TYPE(PKT)|ACCEL_CMD_SRC_BYTE(28)) /* 0x0807009c */
+#define CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN2_FROM_PKT_IPv4_Header__ttl_VALUE                             (ACCEL_CMD_CSUM_LOAD|ACCEL_CMD_CSUM_LOAD_IS_OLD(0)|ACCEL_CMD_LEN_BYTE(2)|ACCEL_CMD_SRC_BYTE_TYPE(PKT)|ACCEL_CMD_SRC_BYTE(36)) /* 0x080100a4 */
+#define CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN8_FROM_PKT_IPv4_Header__sip_high_VALUE                        (ACCEL_CMD_CSUM_LOAD|ACCEL_CMD_CSUM_LOAD_IS_OLD(0)|ACCEL_CMD_LEN_BYTE(8)|ACCEL_CMD_SRC_BYTE_TYPE(PKT)|ACCEL_CMD_SRC_BYTE(40)) /* 0x080700a8 */
+#define CSUM_STORE_IP_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_TO_PKT_IPv4_Header__header_checksum_VALUE                        (ACCEL_CMD_CSUM_STORE|ACCEL_CMD_CSUM_STORE_IS_UDP(0)|ACCEL_CMD_LEN_BIT(16)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(38)) /* 0xc00fa600 */
+#define COPY_BYTES_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_erspan_template__mac_da_47_32_LEN12_TO_PKT_IPv4_Header__version_MINUS14_VALUE (ACCEL_CMD_BYTE_COPY|ACCEL_CMD_LEN_BYTE(12)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(14)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(0)) /* 0x000b8e00 */
+#define ADD_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x32_LEN14_TO_DESC_phal2ppa__egress_byte_count_VALUE            (ACCEL_CMD_SRC_CONST(1)|ACCEL_CMD_BIT_ADD|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(14)|ACCEL_CMD_DST_BYTE_TYPE(NO_PKT)|ACCEL_CMD_DST_BYTE(80)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(50)) /* 0x540d5032 */
+#define COPY_BYTES_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_erspan_template__mac_da_47_32_LEN16_TO_PKT_IPv4_Header__version_MINUS18_VALUE (ACCEL_CMD_BYTE_COPY|ACCEL_CMD_LEN_BYTE(16)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(10)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(0)) /* 0x000f8a00 */
+#define ADD_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x36_LEN14_TO_DESC_phal2ppa__egress_byte_count_VALUE            (ACCEL_CMD_SRC_CONST(1)|ACCEL_CMD_BIT_ADD|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(14)|ACCEL_CMD_DST_BYTE_TYPE(NO_PKT)|ACCEL_CMD_DST_BYTE(80)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(54)) /* 0x540d5036 */
+
+/*************** THR65_Erspan_TypeII_SameDevMirroring_Ipv6 *******************/
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x86_LEN8_TO_PKT_ethertype_header__ethertype_VALUE             (ACCEL_CMD_SRC_CONST(1)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(8)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(18)|ACCEL_CMD_SRC_BYTE_TYPE(PKT)|ACCEL_CMD_SRC_BYTE(6)) /* 0x44079286 */
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0xDD_LEN8_TO_PKT_ethertype_header__ethertype_PLUS8_VALUE       (ACCEL_CMD_SRC_CONST(1)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(8)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(19)|ACCEL_CMD_SRC_BYTE_TYPE(PKT)|ACCEL_CMD_SRC_BYTE(93)) /* 0x440793dd */
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x10_LEN8_TO_PKT_GRE_header__C_VALUE                           (ACCEL_CMD_SRC_CONST(1)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(8)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(60)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(16)) /* 0x4407bc10 */
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x88_LEN8_TO_PKT_GRE_header__NP_VALUE                          (ACCEL_CMD_SRC_CONST(1)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(8)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(62)|ACCEL_CMD_SRC_BYTE_TYPE(PKT)|ACCEL_CMD_SRC_BYTE(8)) /* 0x4407be88 */
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0xBE_LEN8_TO_PKT_GRE_header__NP_PLUS8_VALUE                    (ACCEL_CMD_SRC_CONST(1)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(8)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(63)|ACCEL_CMD_SRC_BYTE_TYPE(PKT)|ACCEL_CMD_SRC_BYTE(62)) /* 0x4407bfbe */
+#define COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__lm_counter_LEN4_TO_PKT_GRE_header__Seq_num_VALUE     (ACCEL_CMD_BYTE_COPY|ACCEL_CMD_LEN_BYTE(4)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(64)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(116)) /* 0x0003c074 */
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_srcTrgPortEntry__targetPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4_VALUE (ACCEL_CMD_SRC_CONST(0)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(16)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(74)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(18)) /* 0x040fca12 */
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_srcTrgPortEntry__srcPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4_VALUE (ACCEL_CMD_SRC_CONST(0)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(16)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(74)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(16)) /* 0x040fca10 */
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x1_LEN4_TO_PKT_ERSPAN_type_II_header__Ver_VALUE               (ACCEL_CMD_SRC_CONST(1)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(4)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(68)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(1)) /* 0x4403c401 */
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__qos_mapped_up_LEN3_TO_PKT_ERSPAN_type_II_header__COS_VALUE (ACCEL_CMD_SRC_CONST(0)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(4)|ACCEL_CMD_LEN_BIT(3)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(70)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(74)) /* 0x0442c64a */
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x3_LEN2_TO_PKT_ERSPAN_type_II_header__En_VALUE                (ACCEL_CMD_SRC_CONST(1)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(3)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(2)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(70)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(3)) /* 0x4581c603 */
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__truncated_LEN1_TO_PKT_ERSPAN_type_II_header__T_VALUE  (ACCEL_CMD_SRC_CONST(0)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(5)|ACCEL_CMD_SRC_BIT(4)|ACCEL_CMD_LEN_BIT(1)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(70)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(64)) /* 0x06c0c640 */
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__egress_byte_count_LEN14_TO_PKT_IPv6_Header__payload_length_PLUS2_VALUE (ACCEL_CMD_SRC_CONST(0)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(2)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(14)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(24)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(80)) /* 0x050d9850 */
+#define ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x10_LEN16_TO_PKT_IPv6_Header__payload_length_VALUE             (ACCEL_CMD_SRC_CONST(1)|ACCEL_CMD_BIT_ADD|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(16)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(24)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(16)) /* 0x540f9810 */
+#define COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_erspan_template__mac_da_47_32_LEN12_TO_PKT_IPv6_Header__version_MINUS14_VALUE (ACCEL_CMD_BYTE_COPY|ACCEL_CMD_LEN_BYTE(12)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(6)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(0)) /* 0x000b8600 */
+#define ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x3A_LEN14_TO_DESC_phal2ppa__egress_byte_count_VALUE            (ACCEL_CMD_SRC_CONST(1)|ACCEL_CMD_BIT_ADD|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(14)|ACCEL_CMD_DST_BYTE_TYPE(NO_PKT)|ACCEL_CMD_DST_BYTE(80)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(58)) /* 0x540d503a */
+#define COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_erspan_template__mac_da_47_32_LEN16_TO_PKT_IPv6_Header__version_MINUS18_VALUE (ACCEL_CMD_BYTE_COPY|ACCEL_CMD_LEN_BYTE(16)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(2)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(0)) /* 0x000f8200 */
+#define ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x3E_LEN14_TO_DESC_phal2ppa__egress_byte_count_VALUE            (ACCEL_CMD_SRC_CONST(1)|ACCEL_CMD_BIT_ADD|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(14)|ACCEL_CMD_DST_BYTE_TYPE(NO_PKT)|ACCEL_CMD_DST_BYTE(80)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(62)) /* 0x540d503e */
+#define SHIFTRIGHT_12_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_LEN12_FROM_PKT_mac_header__mac_da_47_32_VALUE              (ACCEL_CMD_BYTE_COPY|ACCEL_CMD_LEN_BYTE(12)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(76)|ACCEL_CMD_SRC_BYTE_TYPE(PKT)|ACCEL_CMD_SRC_BYTE(64)) /* 0x000bccc0 */
+
 /**************************************************************************
  * Accelerator commands offsets
  **************************************************************************/
@@ -567,8 +611,52 @@ void PPA_FW(load_accelerator_commands)();
 #define CSUM_LOAD_NEW_THR59_SLS_Test_LEN8_FROM_PKT_IPv4_Header__version_PLUS12_OFFSET                                            (0x224)
 #define CSUM_STORE_IP_THR59_SLS_Test_TO_PKT_IPv4_Header__header_checksum_OFFSET                                                  (0x228)
 
+/*************** THR64_Erspan_TypeII_SameDevMirroring_Ipv4 *******************/
+#define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x08_LEN8_TO_PKT_ethertype_header__ethertype_OFFSET            (0x22c)
+#define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x10_LEN8_TO_PKT_GRE_header__C_OFFSET                          (0x230)
+#define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x88_LEN8_TO_PKT_GRE_header__NP_OFFSET                         (0x234)
+#define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0xBE_LEN8_TO_PKT_GRE_header__NP_PLUS8_OFFSET                   (0x238)
+#define COPY_BYTES_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__lm_counter_LEN4_TO_PKT_GRE_header__Seq_num_OFFSET    (0x23c)
+#define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_srcTrgPortEntry__targetPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4_OFFSET (0x240)
+#define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_srcTrgPortEntry__srcPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4_OFFSET (0x244)
+#define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x1_LEN4_TO_PKT_ERSPAN_type_II_header__Ver_OFFSET              (0x248)
+#define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__qos_mapped_up_LEN3_TO_PKT_ERSPAN_type_II_header__COS_OFFSET (0x24c)
+#define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x3_LEN2_TO_PKT_ERSPAN_type_II_header__En_OFFSET               (0x250)
+#define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__truncated_LEN1_TO_PKT_ERSPAN_type_II_header__T_OFFSET (0x254)
+#define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__egress_byte_count_LEN14_TO_PKT_IPv4_Header__total_length_PLUS2_OFFSET (0x258)
+#define ADD_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x24_LEN16_TO_PKT_IPv4_Header__total_length_OFFSET              (0x25c)
+#define CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN8_FROM_PKT_IPv4_Header__version_OFFSET                        (0x260)
+#define CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN2_FROM_PKT_IPv4_Header__ttl_OFFSET                            (0x264)
+#define CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN8_FROM_PKT_IPv4_Header__sip_high_OFFSET                       (0x268)
+#define CSUM_STORE_IP_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_TO_PKT_IPv4_Header__header_checksum_OFFSET                       (0x26c)
+#define COPY_BYTES_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_erspan_template__mac_da_47_32_LEN12_TO_PKT_IPv4_Header__version_MINUS14_OFFSET (0x270)
+#define ADD_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x32_LEN14_TO_DESC_phal2ppa__egress_byte_count_OFFSET           (0x274)
+#define COPY_BYTES_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_erspan_template__mac_da_47_32_LEN16_TO_PKT_IPv4_Header__version_MINUS18_OFFSET (0x278)
+#define ADD_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x36_LEN14_TO_DESC_phal2ppa__egress_byte_count_OFFSET           (0x27c)
+
+/*************** THR65_Erspan_TypeII_SameDevMirroring_Ipv6 *******************/
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x86_LEN8_TO_PKT_ethertype_header__ethertype_OFFSET            (0x280)
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0xDD_LEN8_TO_PKT_ethertype_header__ethertype_PLUS8_OFFSET      (0x284)
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x10_LEN8_TO_PKT_GRE_header__C_OFFSET                          (0x288)
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x88_LEN8_TO_PKT_GRE_header__NP_OFFSET                         (0x28c)
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0xBE_LEN8_TO_PKT_GRE_header__NP_PLUS8_OFFSET                   (0x290)
+#define COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__lm_counter_LEN4_TO_PKT_GRE_header__Seq_num_OFFSET    (0x294)
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_srcTrgPortEntry__targetPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4_OFFSET (0x298)
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_srcTrgPortEntry__srcPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4_OFFSET (0x29c)
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x1_LEN4_TO_PKT_ERSPAN_type_II_header__Ver_OFFSET              (0x2a0)
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__qos_mapped_up_LEN3_TO_PKT_ERSPAN_type_II_header__COS_OFFSET (0x2a4)
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x3_LEN2_TO_PKT_ERSPAN_type_II_header__En_OFFSET               (0x2a8)
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__truncated_LEN1_TO_PKT_ERSPAN_type_II_header__T_OFFSET (0x2ac)
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__egress_byte_count_LEN14_TO_PKT_IPv6_Header__payload_length_PLUS2_OFFSET (0x2b0)
+#define ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x10_LEN16_TO_PKT_IPv6_Header__payload_length_OFFSET            (0x2b4)
+#define COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_erspan_template__mac_da_47_32_LEN12_TO_PKT_IPv6_Header__version_MINUS14_OFFSET (0x2b8)
+#define ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x3A_LEN14_TO_DESC_phal2ppa__egress_byte_count_OFFSET           (0x2bc)
+#define COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_erspan_template__mac_da_47_32_LEN16_TO_PKT_IPv6_Header__version_MINUS18_OFFSET (0x2c0)
+#define ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x3E_LEN14_TO_DESC_phal2ppa__egress_byte_count_OFFSET           (0x2c4)
+#define SHIFTRIGHT_12_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_LEN12_FROM_PKT_mac_header__mac_da_47_32_OFFSET             (0x2c8)
+
 /*************** Last Entry *******************/
-#define ACCELERATOR_COMMAND_OFFSET_LAST_ENTRY                                                                                    (0x228)
+#define ACCELERATOR_COMMAND_OFFSET_LAST_ENTRY                                                                                    (0x2c8)
 
 /**************************************************************************
  * Accelerator command Trigger and load macros
diff --git a/simulation/simDevices/h/asicSimulation/SKernel/sEmbeddedCpu/firmware/ac5p_pha/Default/ppa_fw_image_info.h b/simulation/simDevices/h/asicSimulation/SKernel/sEmbeddedCpu/firmware/ac5p_pha/Default/ppa_fw_image_info.h
index b0fce9cb15..0c82e1e69d 100644
--- a/simulation/simDevices/h/asicSimulation/SKernel/sEmbeddedCpu/firmware/ac5p_pha/Default/ppa_fw_image_info.h
+++ b/simulation/simDevices/h/asicSimulation/SKernel/sEmbeddedCpu/firmware/ac5p_pha/Default/ppa_fw_image_info.h
@@ -32,13 +32,15 @@
 #define ENABLE_THR53_SRV6_End_Node_GSID_COC32
 #define ENABLE_THR59_SLS_Test
 #define ENABLE_THR60_DropAllTraffic
+#define ENABLE_THR64_Erspan_TypeII_SameDevMirroring_Ipv4
+#define ENABLE_THR65_Erspan_TypeII_SameDevMirroring_Ipv6
 
 #define TARGET_DEVICE Ac5p
 #define FW_IMAGE_NAME Default
 #define FW_IMAGE_ID   0
 
-#define VER_YEAR      (0x21) /* Year */
-#define VER_MONTH     (0x06) /* Month */
+#define VER_YEAR      (0x22) /* Year */
+#define VER_MONTH     (0x02) /* Month */
 #define VER_IN_MONTH  (0x00) /* Number of version within a month */
 #define VER_DEBUG     (0x00) /* Used for private or debug versions, should be zero for official version */
 
diff --git a/simulation/simDevices/h/asicSimulation/SKernel/sEmbeddedCpu/firmware/ac5p_pha/Default/ppa_fw_threads_defs.h b/simulation/simDevices/h/asicSimulation/SKernel/sEmbeddedCpu/firmware/ac5p_pha/Default/ppa_fw_threads_defs.h
index ce5fb80ff9..f28efff794 100644
--- a/simulation/simDevices/h/asicSimulation/SKernel/sEmbeddedCpu/firmware/ac5p_pha/Default/ppa_fw_threads_defs.h
+++ b/simulation/simDevices/h/asicSimulation/SKernel/sEmbeddedCpu/firmware/ac5p_pha/Default/ppa_fw_threads_defs.h
@@ -51,6 +51,8 @@ void PPA_FW(THR25_PTP_Phy_1_Step)();
 void PPA_FW(THR53_SRV6_End_Node_GSID_COC32)();
 void PPA_FW(THR59_SLS_Test)();
 void PPA_FW(THR60_DropAllTraffic)();
+void PPA_FW(THR64_Erspan_TypeII_SameDevMirroring_Ipv4)();
+void PPA_FW(THR65_Erspan_TypeII_SameDevMirroring_Ipv6)();
 
 #if RECOVER_FROM_EXCEPTION
 INLINE void ac5pRecoveFromException();
diff --git a/simulation/simDevices/h/asicSimulation/SKernel/sEmbeddedCpu/firmware/ac5p_pha/Default/ppa_fw_threads_strc_defs_little_endian.h b/simulation/simDevices/h/asicSimulation/SKernel/sEmbeddedCpu/firmware/ac5p_pha/Default/ppa_fw_threads_strc_defs_little_endian.h
index 029e8347d2..8fc20ba70a 100644
--- a/simulation/simDevices/h/asicSimulation/SKernel/sEmbeddedCpu/firmware/ac5p_pha/Default/ppa_fw_threads_strc_defs_little_endian.h
+++ b/simulation/simDevices/h/asicSimulation/SKernel/sEmbeddedCpu/firmware/ac5p_pha/Default/ppa_fw_threads_strc_defs_little_endian.h
@@ -4161,4 +4161,322 @@ struct thr60_DropAllTraffic_hdr {
     } mac_header; /* 12B */
 }; /* 44B */
 
+
+/**************************************************************************
+ * Thread THR64_Erspan_TypeII_SameDevMirroring_Ipv4 structures
+ **************************************************************************/
+
+struct thr64_Erspan_TypeII_SameDevMirroring_Ipv4_cfg {
+    struct {
+        uint32_t mac_da_31_16:16;        /* offset:16 */
+        uint32_t mac_da_47_32:16;        /* offset:0 */
+        uint32_t mac_sa_47_32:16;        /* offset:48 */
+        uint32_t mac_da_15_0:16;         /* offset:32 */
+        uint32_t mac_sa_15_0:16;         /* offset:80 */
+        uint32_t mac_sa_31_16:16;        /* offset:64 */
+        uint32_t vlan_vid:12;            /* offset:116 */
+        uint32_t vlan_cfi:1;             /* offset:115 */
+        uint32_t vlan_up:3;              /* offset:112 */
+        uint32_t vlan_tpid:16;           /* offset:96 */
+    } erspan_template; /* 16B */
+    struct {
+        uint32_t targetPortEntry:16;     /* offset:144 */
+        uint32_t srcPortEntry:16;        /* offset:128 */
+    } srcTrgPortEntry; /* 4B */
+}; /* 20B */
+
+
+struct thr64_Erspan_TypeII_SameDevMirroring_Ipv4_in_hdr {
+    struct {
+        uint32_t reserved_0:32;          /* offset:0 */
+        uint32_t reserved_1:32;          /* offset:32 */
+        uint32_t reserved_2:32;          /* offset:64 */
+        uint32_t reserved_3:32;          /* offset:96 */
+        uint32_t reserved_4:32;          /* offset:128 */
+        uint32_t reserved_5:32;          /* offset:160 */
+        uint32_t reserved_6:32;          /* offset:192 */
+        uint32_t reserved_7:32;          /* offset:224 */
+        uint32_t reserved_8:32;          /* offset:256 */
+        uint32_t reserved_9:32;          /* offset:288 */
+        uint32_t reserved_10:32;         /* offset:320 */
+        uint32_t reserved_11:32;         /* offset:352 */
+        uint32_t reserved_12:32;         /* offset:384 */
+        uint32_t reserved_13:32;         /* offset:416 */
+        uint32_t reserved_14:32;         /* offset:448 */
+        uint32_t reserved_15:32;         /* offset:480 */
+    } expansion_space; /* 64B */
+    struct {
+        uint32_t mac_da_31_16:16;        /* offset:528 */
+        uint32_t mac_da_47_32:16;        /* offset:512 */
+        uint32_t mac_sa_47_32:16;        /* offset:560 */
+        uint32_t mac_da_15_0:16;         /* offset:544 */
+        uint32_t mac_sa_15_0:16;         /* offset:592 */
+        uint32_t mac_sa_31_16:16;        /* offset:576 */
+    } mac_header; /* 12B */
+    struct {
+        uint32_t data0:32;               /* offset:608 */
+        uint32_t data1:32;               /* offset:640 */
+        uint32_t data2:32;               /* offset:672 */
+        uint32_t data3:32;               /* offset:704 */
+        uint32_t data4:32;               /* offset:736 */
+        uint32_t data5:32;               /* offset:768 */
+        uint32_t data6:32;               /* offset:800 */
+    } payload; /* 28B */
+}; /* 104B */
+
+
+struct thr64_Erspan_TypeII_SameDevMirroring_Ipv4_out_hdr {
+    struct {
+        uint32_t reserved_0:32;          /* offset:0 */
+        uint32_t reserved_1:32;          /* offset:32 */
+        uint32_t dummy:16;                     /* added to align to 32 bits words */
+        uint32_t reserved_2:16;          /* offset:64 */
+    } expansion_space; /* 10B */
+    struct {
+        uint32_t mac_da_31_16:16;        /* offset:96 */
+        uint32_t mac_da_47_32:16;        /* offset:80 */
+        uint32_t mac_sa_47_32:16;        /* offset:128 */
+        uint32_t mac_da_15_0:16;         /* offset:112 */
+        uint32_t mac_sa_15_0:16;         /* offset:160 */
+        uint32_t mac_sa_31_16:16;        /* offset:144 */
+    } mac_header_outer; /* 12B */
+    struct {
+        uint32_t vid:12;                 /* offset:196 */
+        uint32_t cfi:1;                  /* offset:195 */
+        uint32_t up:3;                   /* offset:192 */
+        uint32_t TPID:16;                /* offset:176 */
+    } vlan; /* 4B */
+    struct {
+        uint32_t dummy:16;                     /* added to align to 32 bits words */
+        uint32_t ethertype:16;           /* offset:208 */
+    } ethertype_header; /* 2B */
+    struct {
+        uint32_t total_length:16;        /* offset:240 */
+        uint32_t ecn:2;                  /* offset:238 */
+        uint32_t dscp:6;                 /* offset:232 */
+        uint32_t ihl:4;                  /* offset:228 */
+        uint32_t version:4;              /* offset:224 */
+        uint32_t fragment_offset:13;     /* offset:275 */
+        uint32_t flag_more_fragment:1;   /* offset:274 */
+        uint32_t flag_dont_fragment:1;   /* offset:273 */
+        uint32_t flag_reserved:1;        /* offset:272 */
+        uint32_t identification:16;      /* offset:256 */
+        uint32_t header_checksum:16;     /* offset:304 */
+        uint32_t protocol:8;             /* offset:296 */
+        uint32_t ttl:8;                  /* offset:288 */
+        uint32_t sip_low:16;             /* offset:336 */
+        uint32_t sip_high:16;            /* offset:320 */
+        uint32_t dip_low:16;             /* offset:368 */
+        uint32_t dip_high:16;            /* offset:352 */
+    } IPv4_Header; /* 20B */
+    struct {
+        uint32_t NP:16;                  /* offset:400 */
+        uint32_t Version:3;              /* offset:397 */
+        uint32_t Flags:5;                /* offset:392 */
+        uint32_t Recur:3;                /* offset:389 */
+        uint32_t s:1;                    /* offset:388 */
+        uint32_t S:1;                    /* offset:387 */
+        uint32_t K:1;                    /* offset:386 */
+        uint32_t R:1;                    /* offset:385 */
+        uint32_t C:1;                    /* offset:384 */
+        uint32_t Seq_num:32;             /* offset:416 */
+    } GRE_header; /* 8B */
+    struct {
+        uint32_t Session_id:10;          /* offset:470 */
+        uint32_t T:1;                    /* offset:469 */
+        uint32_t En:2;                   /* offset:467 */
+        uint32_t COS:3;                  /* offset:464 */
+        uint32_t VLAN:12;                /* offset:452 */
+        uint32_t Ver:4;                  /* offset:448 */
+        uint32_t Index:20;               /* offset:492 */
+        uint32_t Reserved:12;            /* offset:480 */
+    } ERSPAN_type_II_header; /* 8B */
+    struct {
+        uint32_t mac_da_31_16:16;        /* offset:528 */
+        uint32_t mac_da_47_32:16;        /* offset:512 */
+        uint32_t mac_sa_47_32:16;        /* offset:560 */
+        uint32_t mac_da_15_0:16;         /* offset:544 */
+        uint32_t mac_sa_15_0:16;         /* offset:592 */
+        uint32_t mac_sa_31_16:16;        /* offset:576 */
+    } mac_header; /* 12B */
+    struct {
+        uint32_t data0:32;               /* offset:608 */
+        uint32_t data1:32;               /* offset:640 */
+        uint32_t data2:32;               /* offset:672 */
+        uint32_t data3:32;               /* offset:704 */
+        uint32_t data4:32;               /* offset:736 */
+        uint32_t data5:32;               /* offset:768 */
+        uint32_t data6:32;               /* offset:800 */
+    } payload; /* 28B */
+}; /* 104B */
+
+
+/**************************************************************************
+ * Thread THR65_Erspan_TypeII_SameDevMirroring_Ipv6 structures
+ **************************************************************************/
+
+struct thr65_Erspan_TypeII_SameDevMirroring_Ipv6_cfg {
+    struct {
+        uint32_t mac_da_31_16:16;        /* offset:16 */
+        uint32_t mac_da_47_32:16;        /* offset:0 */
+        uint32_t mac_sa_47_32:16;        /* offset:48 */
+        uint32_t mac_da_15_0:16;         /* offset:32 */
+        uint32_t mac_sa_15_0:16;         /* offset:80 */
+        uint32_t mac_sa_31_16:16;        /* offset:64 */
+        uint32_t vlan_vid:12;            /* offset:116 */
+        uint32_t vlan_cfi:1;             /* offset:115 */
+        uint32_t vlan_up:3;              /* offset:112 */
+        uint32_t vlan_tpid:16;           /* offset:96 */
+    } erspan_template; /* 16B */
+    struct {
+        uint32_t targetPortEntry:16;     /* offset:144 */
+        uint32_t srcPortEntry:16;        /* offset:128 */
+    } srcTrgPortEntry; /* 4B */
+}; /* 20B */
+
+
+struct thr65_Erspan_TypeII_SameDevMirroring_Ipv6_in_hdr {
+    struct {
+        uint32_t reserved_0:32;          /* offset:0 */
+        uint32_t reserved_1:32;          /* offset:32 */
+        uint32_t reserved_2:32;          /* offset:64 */
+        uint32_t reserved_3:32;          /* offset:96 */
+        uint32_t reserved_4:32;          /* offset:128 */
+        uint32_t reserved_5:32;          /* offset:160 */
+        uint32_t reserved_6:32;          /* offset:192 */
+        uint32_t reserved_7:32;          /* offset:224 */
+        uint32_t reserved_8:32;          /* offset:256 */
+        uint32_t reserved_9:32;          /* offset:288 */
+        uint32_t reserved_10:32;         /* offset:320 */
+        uint32_t reserved_11:32;         /* offset:352 */
+        uint32_t reserved_12:32;         /* offset:384 */
+        uint32_t reserved_13:32;         /* offset:416 */
+        uint32_t reserved_14:32;         /* offset:448 */
+        uint32_t reserved_15:32;         /* offset:480 */
+    } expansion_space; /* 64B */
+    struct {
+        uint32_t mac_da_31_16:16;        /* offset:528 */
+        uint32_t mac_da_47_32:16;        /* offset:512 */
+        uint32_t mac_sa_47_32:16;        /* offset:560 */
+        uint32_t mac_da_15_0:16;         /* offset:544 */
+        uint32_t mac_sa_15_0:16;         /* offset:592 */
+        uint32_t mac_sa_31_16:16;        /* offset:576 */
+    } mac_header; /* 12B */
+    struct {
+        uint32_t dummy:32;               /* offset:608 */
+    } RSPAN_tag_dummy; /* 4B */
+    struct {
+        uint32_t Ingress_E_CID_base:12;  /* offset:660 */
+        uint32_t E_DEI:1;                /* offset:659 */
+        uint32_t E_PCP:3;                /* offset:656 */
+        uint32_t TPID:16;                /* offset:640 */
+        uint32_t E_CID_ext:8;            /* offset:696 */
+        uint32_t Ingress_E_CID_ext:8;    /* offset:688 */
+        uint32_t E_CID_base:12;          /* offset:676 */
+        uint32_t GRP:2;                  /* offset:674 */
+        uint32_t Reserved:1;             /* offset:673 */
+        uint32_t Direction:1;            /* offset:672 */
+    } etag; /* 8B */
+    struct {
+        uint32_t data0:32;               /* offset:704 */
+        uint32_t data1:32;               /* offset:736 */
+        uint32_t data2:32;               /* offset:768 */
+        uint32_t data3:32;               /* offset:800 */
+        uint32_t data4:32;               /* offset:832 */
+        uint32_t data5:32;               /* offset:864 */
+        uint32_t data6:32;               /* offset:896 */
+    } payload; /* 28B */
+}; /* 116B */
+
+
+struct thr65_Erspan_TypeII_SameDevMirroring_Ipv6_out_hdr {
+    struct {
+        uint32_t dummy:16;                     /* added to align to 32 bits words */
+        uint32_t reserved_0:16;          /* offset:0 */
+    } expansion_space; /* 2B */
+    struct {
+        uint32_t mac_da_31_16:16;        /* offset:32 */
+        uint32_t mac_da_47_32:16;        /* offset:16 */
+        uint32_t mac_sa_47_32:16;        /* offset:64 */
+        uint32_t mac_da_15_0:16;         /* offset:48 */
+        uint32_t mac_sa_15_0:16;         /* offset:96 */
+        uint32_t mac_sa_31_16:16;        /* offset:80 */
+    } mac_header_outer; /* 12B */
+    struct {
+        uint32_t vid:12;                 /* offset:132 */
+        uint32_t cfi:1;                  /* offset:131 */
+        uint32_t up:3;                   /* offset:128 */
+        uint32_t TPID:16;                /* offset:112 */
+    } vlan; /* 4B */
+    struct {
+        uint32_t dummy:16;                     /* added to align to 32 bits words */
+        uint32_t ethertype:16;           /* offset:144 */
+    } ethertype_header; /* 2B */
+    struct {
+        uint32_t flow_label_15_0:16;     /* offset:176 */
+        uint32_t flow_label_19_16:4;     /* offset:172 */
+        uint32_t ecn:2;                  /* offset:170 */
+        uint32_t dscp:6;                 /* offset:164 */
+        uint32_t version:4;              /* offset:160 */
+        uint32_t hop_limit:8;            /* offset:216 */
+        uint32_t next_header:8;          /* offset:208 */
+        uint32_t payload_length:16;      /* offset:192 */
+        uint32_t sip0_low:16;            /* offset:240 */
+        uint32_t sip0_high:16;           /* offset:224 */
+        uint32_t sip1_low:16;            /* offset:272 */
+        uint32_t sip1_high:16;           /* offset:256 */
+        uint32_t sip2_low:16;            /* offset:304 */
+        uint32_t sip2_high:16;           /* offset:288 */
+        uint32_t sip3_low:16;            /* offset:336 */
+        uint32_t sip3_high:16;           /* offset:320 */
+        uint32_t dip0_low:16;            /* offset:368 */
+        uint32_t dip0_high:16;           /* offset:352 */
+        uint32_t dip1_low:16;            /* offset:400 */
+        uint32_t dip1_high:16;           /* offset:384 */
+        uint32_t dip2_low:16;            /* offset:432 */
+        uint32_t dip2_high:16;           /* offset:416 */
+        uint32_t dip3_low:16;            /* offset:464 */
+        uint32_t dip3_high:16;           /* offset:448 */
+    } IPv6_Header; /* 40B */
+    struct {
+        uint32_t NP:16;                  /* offset:496 */
+        uint32_t Version:3;              /* offset:493 */
+        uint32_t Flags:5;                /* offset:488 */
+        uint32_t Recur:3;                /* offset:485 */
+        uint32_t s:1;                    /* offset:484 */
+        uint32_t S:1;                    /* offset:483 */
+        uint32_t K:1;                    /* offset:482 */
+        uint32_t R:1;                    /* offset:481 */
+        uint32_t C:1;                    /* offset:480 */
+        uint32_t Seq_num:32;             /* offset:512 */
+    } GRE_header; /* 8B */
+    struct {
+        uint32_t Session_id:10;          /* offset:566 */
+        uint32_t T:1;                    /* offset:565 */
+        uint32_t En:2;                   /* offset:563 */
+        uint32_t COS:3;                  /* offset:560 */
+        uint32_t VLAN:12;                /* offset:548 */
+        uint32_t Ver:4;                  /* offset:544 */
+        uint32_t Index:20;               /* offset:588 */
+        uint32_t Reserved:12;            /* offset:576 */
+    } ERSPAN_type_II_header; /* 8B */
+    struct {
+        uint32_t mac_da_31_16:16;        /* offset:624 */
+        uint32_t mac_da_47_32:16;        /* offset:608 */
+        uint32_t mac_sa_47_32:16;        /* offset:656 */
+        uint32_t mac_da_15_0:16;         /* offset:640 */
+        uint32_t mac_sa_15_0:16;         /* offset:688 */
+        uint32_t mac_sa_31_16:16;        /* offset:672 */
+    } mac_header; /* 12B */
+    struct {
+        uint32_t data0:32;               /* offset:704 */
+        uint32_t data1:32;               /* offset:736 */
+        uint32_t data2:32;               /* offset:768 */
+        uint32_t data3:32;               /* offset:800 */
+        uint32_t data4:32;               /* offset:832 */
+        uint32_t data5:32;               /* offset:864 */
+        uint32_t data6:32;               /* offset:896 */
+    } payload; /* 28B */
+}; /* 116B */
+
 #endif /* __ppa_fw_threads_strc_defs_h */
diff --git a/simulation/simDevices/h/asicSimulation/SKernel/sEmbeddedCpu/firmware/ac5p_pha/Image01/ppa_fw_accelerator_commands.h b/simulation/simDevices/h/asicSimulation/SKernel/sEmbeddedCpu/firmware/ac5p_pha/Image01/ppa_fw_accelerator_commands.h
index 0569ae0fd2..d5b410107c 100644
--- a/simulation/simDevices/h/asicSimulation/SKernel/sEmbeddedCpu/firmware/ac5p_pha/Image01/ppa_fw_accelerator_commands.h
+++ b/simulation/simDevices/h/asicSimulation/SKernel/sEmbeddedCpu/firmware/ac5p_pha/Image01/ppa_fw_accelerator_commands.h
@@ -410,6 +410,8 @@ void PPA_FW(load_accelerator_commands)();
 #define CSUM_LOAD_NEW_THR62_enhanced_sFlow_fill_remain_IPv4_LEN2_FROM_PKT_IPv4_Header__total_length_VALUE                        (ACCEL_CMD_CSUM_LOAD|ACCEL_CMD_CSUM_LOAD_IS_OLD(0)|ACCEL_CMD_LEN_BYTE(2)|ACCEL_CMD_SRC_BYTE_TYPE(PKT)|ACCEL_CMD_SRC_BYTE(34)) /* 0x080100a2 */
 #define CSUM_LOAD_OLD_THR62_enhanced_sFlow_fill_remain_IPv4_LEN2_FROM_PKT_IPv4_Header__header_checksum_VALUE                     (ACCEL_CMD_CSUM_LOAD|ACCEL_CMD_CSUM_LOAD_IS_OLD(1)|ACCEL_CMD_LEN_BYTE(2)|ACCEL_CMD_SRC_BYTE_TYPE(PKT)|ACCEL_CMD_SRC_BYTE(42)) /* 0x082100aa */
 #define CSUM_STORE_IP_THR62_enhanced_sFlow_fill_remain_IPv4_TO_PKT_IPv4_Header__header_checksum_VALUE                            (ACCEL_CMD_CSUM_STORE|ACCEL_CMD_CSUM_STORE_IS_UDP(0)|ACCEL_CMD_LEN_BIT(16)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(42)) /* 0xc00faa00 */
+#define COPY_BITS_THR62_enhanced_sFlow_fill_remain_IPv4_DESC_phal2ppa__orig_src_eport_PLUS6_LEN7_TO_PKT_enhanced_sflow_rx_ts_shim_header__port_number_VALUE (ACCEL_CMD_SRC_CONST(0)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(7)|ACCEL_CMD_LEN_BIT(7)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(89)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(113)) /* 0x0476d971 */
+#define COPY_BITS_THR62_enhanced_sFlow_fill_remain_IPv4_DESC_phal2ppa__local_dev_trg_phy_port_PLUS3_LEN7_TO_PKT_enhanced_sflow_tx_ts_shim_header__port_number_VALUE (ACCEL_CMD_SRC_CONST(0)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(7)|ACCEL_CMD_LEN_BIT(7)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(103)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(72)) /* 0x0476e748 */
 
 /*************** THR63_enhanced_sFlow_fill_remain_IPv6 *******************/
 #define COPY_BYTES_THR63_enhanced_sFlow_fill_remain_IPv6_DESC_phal2ppa__pha_metadata3_LEN2_TO_PKT_enhanced_sflow_rx_ts_shim_header__ip_high_VALUE (ACCEL_CMD_BYTE_COPY|ACCEL_CMD_LEN_BYTE(2)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(107)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(84)) /* 0x0001eb54 */
@@ -423,6 +425,52 @@ void PPA_FW(load_accelerator_commands)();
 #define COPY_BITS_THR63_enhanced_sFlow_fill_remain_IPv6_CONST_0x1_LEN1_TO_DESC_phal2ppa__egress_checksum_mode_VALUE              (ACCEL_CMD_SRC_CONST(1)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(1)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(1)|ACCEL_CMD_DST_BYTE_TYPE(NO_PKT)|ACCEL_CMD_DST_BYTE(96)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(1)) /* 0x44806001 */
 #define ADD_BITS_THR63_enhanced_sFlow_fill_remain_IPv6_CONST_0x2C_LEN16_TO_PKT_udp_header__Length_VALUE                          (ACCEL_CMD_SRC_CONST(1)|ACCEL_CMD_BIT_ADD|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(16)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(76)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(44)) /* 0x540fcc2c */
 #define ADD_BITS_THR63_enhanced_sFlow_fill_remain_IPv6_CONST_0x2C_LEN16_TO_PKT_IPv6_Header__payload_length_VALUE                 (ACCEL_CMD_SRC_CONST(1)|ACCEL_CMD_BIT_ADD|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(16)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(36)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(44)) /* 0x540fa42c */
+#define COPY_BITS_THR63_enhanced_sFlow_fill_remain_IPv6_DESC_phal2ppa__orig_src_eport_PLUS6_LEN7_TO_PKT_enhanced_sflow_rx_ts_shim_header__port_number_VALUE (ACCEL_CMD_SRC_CONST(0)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(7)|ACCEL_CMD_LEN_BIT(7)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(109)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(113)) /* 0x0476ed71 */
+#define COPY_BITS_THR63_enhanced_sFlow_fill_remain_IPv6_DESC_phal2ppa__local_dev_trg_phy_port_PLUS3_LEN7_TO_PKT_enhanced_sflow_tx_ts_shim_header__port_number_VALUE (ACCEL_CMD_SRC_CONST(0)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(7)|ACCEL_CMD_LEN_BIT(7)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(123)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(72)) /* 0x0476fb48 */
+
+/*************** THR64_Erspan_TypeII_SameDevMirroring_Ipv4 *******************/
+#define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x08_LEN8_TO_PKT_ethertype_header__ethertype_VALUE             (ACCEL_CMD_SRC_CONST(1)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(8)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(26)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(8)) /* 0x44079a08 */
+#define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x10_LEN8_TO_PKT_GRE_header__C_VALUE                           (ACCEL_CMD_SRC_CONST(1)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(8)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(48)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(16)) /* 0x4407b010 */
+#define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x88_LEN8_TO_PKT_GRE_header__NP_VALUE                          (ACCEL_CMD_SRC_CONST(1)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(8)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(50)|ACCEL_CMD_SRC_BYTE_TYPE(PKT)|ACCEL_CMD_SRC_BYTE(8)) /* 0x4407b288 */
+#define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0xBE_LEN8_TO_PKT_GRE_header__NP_PLUS8_VALUE                    (ACCEL_CMD_SRC_CONST(1)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(8)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(51)|ACCEL_CMD_SRC_BYTE_TYPE(PKT)|ACCEL_CMD_SRC_BYTE(62)) /* 0x4407b3be */
+#define COPY_BYTES_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__lm_counter_LEN4_TO_PKT_GRE_header__Seq_num_VALUE     (ACCEL_CMD_BYTE_COPY|ACCEL_CMD_LEN_BYTE(4)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(52)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(116)) /* 0x0003b474 */
+#define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_srcTrgPortEntry__targetPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4_VALUE (ACCEL_CMD_SRC_CONST(0)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(16)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(62)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(18)) /* 0x040fbe12 */
+#define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_srcTrgPortEntry__srcPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4_VALUE (ACCEL_CMD_SRC_CONST(0)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(16)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(62)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(16)) /* 0x040fbe10 */
+#define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x1_LEN4_TO_PKT_ERSPAN_type_II_header__Ver_VALUE               (ACCEL_CMD_SRC_CONST(1)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(4)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(56)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(1)) /* 0x4403b801 */
+#define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__qos_mapped_up_LEN3_TO_PKT_ERSPAN_type_II_header__COS_VALUE (ACCEL_CMD_SRC_CONST(0)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(4)|ACCEL_CMD_LEN_BIT(3)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(58)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(74)) /* 0x0442ba4a */
+#define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x3_LEN2_TO_PKT_ERSPAN_type_II_header__En_VALUE                (ACCEL_CMD_SRC_CONST(1)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(3)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(2)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(58)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(3)) /* 0x4581ba03 */
+#define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__truncated_LEN1_TO_PKT_ERSPAN_type_II_header__T_VALUE  (ACCEL_CMD_SRC_CONST(0)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(5)|ACCEL_CMD_SRC_BIT(4)|ACCEL_CMD_LEN_BIT(1)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(58)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(64)) /* 0x06c0ba40 */
+#define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__egress_byte_count_LEN14_TO_PKT_IPv4_Header__total_length_PLUS2_VALUE (ACCEL_CMD_SRC_CONST(0)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(2)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(14)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(30)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(80)) /* 0x050d9e50 */
+#define ADD_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x24_LEN16_TO_PKT_IPv4_Header__total_length_VALUE               (ACCEL_CMD_SRC_CONST(1)|ACCEL_CMD_BIT_ADD|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(16)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(30)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(36)) /* 0x540f9e24 */
+#define CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN8_FROM_PKT_IPv4_Header__version_VALUE                         (ACCEL_CMD_CSUM_LOAD|ACCEL_CMD_CSUM_LOAD_IS_OLD(0)|ACCEL_CMD_LEN_BYTE(8)|ACCEL_CMD_SRC_BYTE_TYPE(PKT)|ACCEL_CMD_SRC_BYTE(28)) /* 0x0807009c */
+#define CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN2_FROM_PKT_IPv4_Header__ttl_VALUE                             (ACCEL_CMD_CSUM_LOAD|ACCEL_CMD_CSUM_LOAD_IS_OLD(0)|ACCEL_CMD_LEN_BYTE(2)|ACCEL_CMD_SRC_BYTE_TYPE(PKT)|ACCEL_CMD_SRC_BYTE(36)) /* 0x080100a4 */
+#define CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN8_FROM_PKT_IPv4_Header__sip_high_VALUE                        (ACCEL_CMD_CSUM_LOAD|ACCEL_CMD_CSUM_LOAD_IS_OLD(0)|ACCEL_CMD_LEN_BYTE(8)|ACCEL_CMD_SRC_BYTE_TYPE(PKT)|ACCEL_CMD_SRC_BYTE(40)) /* 0x080700a8 */
+#define CSUM_STORE_IP_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_TO_PKT_IPv4_Header__header_checksum_VALUE                        (ACCEL_CMD_CSUM_STORE|ACCEL_CMD_CSUM_STORE_IS_UDP(0)|ACCEL_CMD_LEN_BIT(16)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(38)) /* 0xc00fa600 */
+#define COPY_BYTES_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_erspan_template__mac_da_47_32_LEN12_TO_PKT_IPv4_Header__version_MINUS14_VALUE (ACCEL_CMD_BYTE_COPY|ACCEL_CMD_LEN_BYTE(12)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(14)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(0)) /* 0x000b8e00 */
+#define ADD_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x32_LEN14_TO_DESC_phal2ppa__egress_byte_count_VALUE            (ACCEL_CMD_SRC_CONST(1)|ACCEL_CMD_BIT_ADD|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(14)|ACCEL_CMD_DST_BYTE_TYPE(NO_PKT)|ACCEL_CMD_DST_BYTE(80)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(50)) /* 0x540d5032 */
+#define COPY_BYTES_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_erspan_template__mac_da_47_32_LEN16_TO_PKT_IPv4_Header__version_MINUS18_VALUE (ACCEL_CMD_BYTE_COPY|ACCEL_CMD_LEN_BYTE(16)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(10)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(0)) /* 0x000f8a00 */
+#define ADD_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x36_LEN14_TO_DESC_phal2ppa__egress_byte_count_VALUE            (ACCEL_CMD_SRC_CONST(1)|ACCEL_CMD_BIT_ADD|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(14)|ACCEL_CMD_DST_BYTE_TYPE(NO_PKT)|ACCEL_CMD_DST_BYTE(80)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(54)) /* 0x540d5036 */
+
+/*************** THR65_Erspan_TypeII_SameDevMirroring_Ipv6 *******************/
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x86_LEN8_TO_PKT_ethertype_header__ethertype_VALUE             (ACCEL_CMD_SRC_CONST(1)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(8)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(18)|ACCEL_CMD_SRC_BYTE_TYPE(PKT)|ACCEL_CMD_SRC_BYTE(6)) /* 0x44079286 */
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0xDD_LEN8_TO_PKT_ethertype_header__ethertype_PLUS8_VALUE       (ACCEL_CMD_SRC_CONST(1)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(8)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(19)|ACCEL_CMD_SRC_BYTE_TYPE(PKT)|ACCEL_CMD_SRC_BYTE(93)) /* 0x440793dd */
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x10_LEN8_TO_PKT_GRE_header__C_VALUE                           (ACCEL_CMD_SRC_CONST(1)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(8)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(60)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(16)) /* 0x4407bc10 */
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x88_LEN8_TO_PKT_GRE_header__NP_VALUE                          (ACCEL_CMD_SRC_CONST(1)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(8)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(62)|ACCEL_CMD_SRC_BYTE_TYPE(PKT)|ACCEL_CMD_SRC_BYTE(8)) /* 0x4407be88 */
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0xBE_LEN8_TO_PKT_GRE_header__NP_PLUS8_VALUE                    (ACCEL_CMD_SRC_CONST(1)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(8)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(63)|ACCEL_CMD_SRC_BYTE_TYPE(PKT)|ACCEL_CMD_SRC_BYTE(62)) /* 0x4407bfbe */
+#define COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__lm_counter_LEN4_TO_PKT_GRE_header__Seq_num_VALUE     (ACCEL_CMD_BYTE_COPY|ACCEL_CMD_LEN_BYTE(4)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(64)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(116)) /* 0x0003c074 */
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_srcTrgPortEntry__targetPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4_VALUE (ACCEL_CMD_SRC_CONST(0)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(16)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(74)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(18)) /* 0x040fca12 */
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_srcTrgPortEntry__srcPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4_VALUE (ACCEL_CMD_SRC_CONST(0)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(16)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(74)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(16)) /* 0x040fca10 */
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x1_LEN4_TO_PKT_ERSPAN_type_II_header__Ver_VALUE               (ACCEL_CMD_SRC_CONST(1)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(4)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(68)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(1)) /* 0x4403c401 */
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__qos_mapped_up_LEN3_TO_PKT_ERSPAN_type_II_header__COS_VALUE (ACCEL_CMD_SRC_CONST(0)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(4)|ACCEL_CMD_LEN_BIT(3)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(70)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(74)) /* 0x0442c64a */
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x3_LEN2_TO_PKT_ERSPAN_type_II_header__En_VALUE                (ACCEL_CMD_SRC_CONST(1)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(3)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(2)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(70)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(3)) /* 0x4581c603 */
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__truncated_LEN1_TO_PKT_ERSPAN_type_II_header__T_VALUE  (ACCEL_CMD_SRC_CONST(0)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(5)|ACCEL_CMD_SRC_BIT(4)|ACCEL_CMD_LEN_BIT(1)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(70)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(64)) /* 0x06c0c640 */
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__egress_byte_count_LEN14_TO_PKT_IPv6_Header__payload_length_PLUS2_VALUE (ACCEL_CMD_SRC_CONST(0)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(2)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(14)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(24)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(80)) /* 0x050d9850 */
+#define ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x10_LEN16_TO_PKT_IPv6_Header__payload_length_VALUE             (ACCEL_CMD_SRC_CONST(1)|ACCEL_CMD_BIT_ADD|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(16)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(24)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(16)) /* 0x540f9810 */
+#define COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_erspan_template__mac_da_47_32_LEN12_TO_PKT_IPv6_Header__version_MINUS14_VALUE (ACCEL_CMD_BYTE_COPY|ACCEL_CMD_LEN_BYTE(12)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(6)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(0)) /* 0x000b8600 */
+#define ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x3A_LEN14_TO_DESC_phal2ppa__egress_byte_count_VALUE            (ACCEL_CMD_SRC_CONST(1)|ACCEL_CMD_BIT_ADD|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(14)|ACCEL_CMD_DST_BYTE_TYPE(NO_PKT)|ACCEL_CMD_DST_BYTE(80)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(58)) /* 0x540d503a */
+#define COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_erspan_template__mac_da_47_32_LEN16_TO_PKT_IPv6_Header__version_MINUS18_VALUE (ACCEL_CMD_BYTE_COPY|ACCEL_CMD_LEN_BYTE(16)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(2)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(0)) /* 0x000f8200 */
+#define ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x3E_LEN14_TO_DESC_phal2ppa__egress_byte_count_VALUE            (ACCEL_CMD_SRC_CONST(1)|ACCEL_CMD_BIT_ADD|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(14)|ACCEL_CMD_DST_BYTE_TYPE(NO_PKT)|ACCEL_CMD_DST_BYTE(80)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(62)) /* 0x540d503e */
+#define SHIFTRIGHT_12_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_LEN12_FROM_PKT_mac_header__mac_da_47_32_VALUE              (ACCEL_CMD_BYTE_COPY|ACCEL_CMD_LEN_BYTE(12)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(76)|ACCEL_CMD_SRC_BYTE_TYPE(PKT)|ACCEL_CMD_SRC_BYTE(64)) /* 0x000bccc0 */
 
 /*************** THR66_enhanced_sFlow *******************/
 #define COPY_BYTES_THR66_enhanced_sFlow_CFG_enhanced_sflow_template__reserved_0_LEN12_TO_PKT_enhanced_sflow_shim_header__version_VALUE (ACCEL_CMD_BYTE_COPY|ACCEL_CMD_LEN_BYTE(12)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(20)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(0)) /* 0x000b9400 */
@@ -433,15 +481,14 @@ void PPA_FW(load_accelerator_commands)();
 #define COPY_BYTES_THR66_enhanced_sFlow_CFG_enhanced_sflow_template__reserved_0_LEN12_TO_PKT_enhanced_sflow_rx_ts_shim_header__checksum_VALUE (ACCEL_CMD_BYTE_COPY|ACCEL_CMD_LEN_BYTE(12)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(36)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(0)) /* 0x000ba400 */
 #define COPY_BITS_THR66_enhanced_sFlow_DESC_phal2ppa__timestamp_PLUS2_LEN14_TO_PKT_enhanced_sflow_rx_ts_shim_header__rx_timestamp_31_16_PLUS2_VALUE (ACCEL_CMD_SRC_CONST(0)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(2)|ACCEL_CMD_SRC_BIT(2)|ACCEL_CMD_LEN_BIT(14)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(42)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(116)) /* 0x052daa74 */
 #define COPY_BITS_THR66_enhanced_sFlow_DESC_phal2ppa__timestamp_PLUS16_LEN16_TO_PKT_enhanced_sflow_rx_ts_shim_header__rx_timestamp_15_0_VALUE (ACCEL_CMD_SRC_CONST(0)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(16)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(44)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(118)) /* 0x040fac76 */
-#define COPY_BITS_THR66_enhanced_sFlow_DESC_phal2ppa__orig_src_eport_PLUS6_LEN7_TO_PKT_enhanced_sflow_rx_ts_shim_header__port_number_VALUE (ACCEL_CMD_SRC_CONST(0)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(7)|ACCEL_CMD_LEN_BIT(7)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(49)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(113)) /* 0x0476b171 */
 #define COPY_BYTES_THR66_enhanced_sFlow_CFG_enhanced_sflow_template__reserved_0_LEN12_TO_PKT_enhanced_sflow_tx_ts_shim_header__checksum_PLUS2_VALUE (ACCEL_CMD_BYTE_COPY|ACCEL_CMD_LEN_BYTE(12)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(52)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(0)) /* 0x000bb400 */
-#define COPY_BITS_THR66_enhanced_sFlow_DESC_phal2ppa__trg_phy_port_PLUS3_LEN7_TO_PKT_enhanced_sflow_tx_ts_shim_header__port_number_VALUE (ACCEL_CMD_SRC_CONST(0)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(1)|ACCEL_CMD_LEN_BIT(7)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(63)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(111)) /* 0x0416bf6f */
 #define COPY_BITS_THR66_enhanced_sFlow_CONST_0x1_LEN1_TO_PKT_enhanced_sflow_tx_ts_shim_header__port_direction_VALUE              (ACCEL_CMD_SRC_CONST(1)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(7)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(1)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(63)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(1)) /* 0x4780bf01 */
 #define COPY_BITS_THR66_enhanced_sFlow_CONST_0x1_LEN1_TO_DESC_phal2ppa__mac_timestamping_en_VALUE                                (ACCEL_CMD_SRC_CONST(1)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(3)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(1)|ACCEL_CMD_DST_BYTE_TYPE(NO_PKT)|ACCEL_CMD_DST_BYTE(72)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(1)) /* 0x45804801 */
 #define COPY_BITS_THR66_enhanced_sFlow_CONST_0x0_LEN3_TO_DESC_phal2ppa__ptp_packet_format_VALUE                                  (ACCEL_CMD_SRC_CONST(1)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(7)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(3)|ACCEL_CMD_DST_BYTE_TYPE(NO_PKT)|ACCEL_CMD_DST_BYTE(69)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(0)) /* 0x47824500 */
 #define COPY_BITS_THR66_enhanced_sFlow_CONST_0x4_LEN4_TO_DESC_phal2ppa__ptp_action_VALUE                                         (ACCEL_CMD_SRC_CONST(1)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(4)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(4)|ACCEL_CMD_DST_BYTE_TYPE(NO_PKT)|ACCEL_CMD_DST_BYTE(95)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(4)) /* 0x46035f04 */
 #define COPY_BITS_THR66_enhanced_sFlow_CONST_0x2_LEN3_TO_DESC_phal2ppa__timestamp_mask_profile_VALUE                             (ACCEL_CMD_SRC_CONST(1)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(2)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(3)|ACCEL_CMD_DST_BYTE_TYPE(NO_PKT)|ACCEL_CMD_DST_BYTE(96)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(2)) /* 0x45026002 */
 #define COPY_BITS_THR66_enhanced_sFlow_CONST_0x22_LEN8_TO_DESC_phal2ppa__timestamp_offset_VALUE                                  (ACCEL_CMD_SRC_CONST(1)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(6)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(8)|ACCEL_CMD_DST_BYTE_TYPE(NO_PKT)|ACCEL_CMD_DST_BYTE(97)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(34)) /* 0x47076122 */
+#define COPY_BITS_THR66_enhanced_sFlow_CONST_0x0_LEN1_TO_PKT_enhanced_sflow_rx_ts_shim_header__port_direction_VALUE              (ACCEL_CMD_SRC_CONST(1)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(7)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(1)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(49)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(0)) /* 0x4780b100 */
 
 /**************************************************************************
  * Accelerator commands offsets
@@ -810,41 +857,88 @@ void PPA_FW(load_accelerator_commands)();
 #define CSUM_LOAD_NEW_THR62_enhanced_sFlow_fill_remain_IPv4_LEN2_FROM_PKT_IPv4_Header__total_length_OFFSET                       (0x2ac)
 #define CSUM_LOAD_OLD_THR62_enhanced_sFlow_fill_remain_IPv4_LEN2_FROM_PKT_IPv4_Header__header_checksum_OFFSET                    (0x2b0)
 #define CSUM_STORE_IP_THR62_enhanced_sFlow_fill_remain_IPv4_TO_PKT_IPv4_Header__header_checksum_OFFSET                           (0x2b4)
+#define COPY_BITS_THR62_enhanced_sFlow_fill_remain_IPv4_DESC_phal2ppa__orig_src_eport_PLUS6_LEN7_TO_PKT_enhanced_sflow_rx_ts_shim_header__port_number_OFFSET (0x2b8)
+#define COPY_BITS_THR62_enhanced_sFlow_fill_remain_IPv4_DESC_phal2ppa__local_dev_trg_phy_port_PLUS3_LEN7_TO_PKT_enhanced_sflow_tx_ts_shim_header__port_number_OFFSET (0x2bc)
 
 /*************** THR63_enhanced_sFlow_fill_remain_IPv6 *******************/
-#define COPY_BYTES_THR63_enhanced_sFlow_fill_remain_IPv6_DESC_phal2ppa__pha_metadata3_LEN2_TO_PKT_enhanced_sflow_rx_ts_shim_header__ip_high_OFFSET (0x2b8)
-#define CSUM_LOAD_NEW_THR63_enhanced_sFlow_fill_remain_IPv6_LEN6_FROM_PKT_enhanced_sflow_rx_ts_shim_header__rx_timestamp_47_32_OFFSET (0x2bc)
-#define CSUM_LOAD_NEW_THR63_enhanced_sFlow_fill_remain_IPv6_LEN4_FROM_PKT_enhanced_sflow_rx_ts_shim_header__reserved_OFFSET      (0x2c0)
-#define CSUM_STORE_IP_THR63_enhanced_sFlow_fill_remain_IPv6_TO_PKT_enhanced_sflow_rx_ts_shim_header__checksum_PLUS2_OFFSET       (0x2c4)
-#define COPY_BYTES_THR63_enhanced_sFlow_fill_remain_IPv6_DESC_phal2ppa__pha_metadata1_LEN2_TO_PKT_enhanced_sflow_tx_ts_shim_header__ip_low_OFFSET (0x2c8)
-#define CSUM_LOAD_NEW_THR63_enhanced_sFlow_fill_remain_IPv6_LEN6_FROM_PKT_enhanced_sflow_tx_ts_shim_header__tx_timestamp_47_32_OFFSET (0x2cc)
-#define CSUM_LOAD_NEW_THR63_enhanced_sFlow_fill_remain_IPv6_LEN4_FROM_PKT_enhanced_sflow_tx_ts_shim_header__reserved_OFFSET      (0x2d0)
-#define CSUM_STORE_IP_THR63_enhanced_sFlow_fill_remain_IPv6_TO_PKT_enhanced_sflow_tx_ts_shim_header__checksum_PLUS2_OFFSET       (0x2d4)
+#define COPY_BYTES_THR63_enhanced_sFlow_fill_remain_IPv6_DESC_phal2ppa__pha_metadata3_LEN2_TO_PKT_enhanced_sflow_rx_ts_shim_header__ip_high_OFFSET (0x2c0)
+#define CSUM_LOAD_NEW_THR63_enhanced_sFlow_fill_remain_IPv6_LEN6_FROM_PKT_enhanced_sflow_rx_ts_shim_header__rx_timestamp_47_32_OFFSET (0x2c4)
+#define CSUM_LOAD_NEW_THR63_enhanced_sFlow_fill_remain_IPv6_LEN4_FROM_PKT_enhanced_sflow_rx_ts_shim_header__reserved_OFFSET      (0x2c8)
+#define CSUM_STORE_IP_THR63_enhanced_sFlow_fill_remain_IPv6_TO_PKT_enhanced_sflow_rx_ts_shim_header__checksum_PLUS2_OFFSET       (0x2cc)
+#define COPY_BYTES_THR63_enhanced_sFlow_fill_remain_IPv6_DESC_phal2ppa__pha_metadata1_LEN2_TO_PKT_enhanced_sflow_tx_ts_shim_header__ip_low_OFFSET (0x2d0)
+#define CSUM_LOAD_NEW_THR63_enhanced_sFlow_fill_remain_IPv6_LEN6_FROM_PKT_enhanced_sflow_tx_ts_shim_header__tx_timestamp_47_32_OFFSET (0x2d4)
+#define CSUM_LOAD_NEW_THR63_enhanced_sFlow_fill_remain_IPv6_LEN4_FROM_PKT_enhanced_sflow_tx_ts_shim_header__reserved_OFFSET      (0x2d8)
+#define CSUM_STORE_IP_THR63_enhanced_sFlow_fill_remain_IPv6_TO_PKT_enhanced_sflow_tx_ts_shim_header__checksum_PLUS2_OFFSET       (0x2dc)
 #define COPY_BITS_THR63_enhanced_sFlow_fill_remain_IPv6_CONST_0x1_LEN1_TO_DESC_phal2ppa__egress_checksum_mode_OFFSET             (0x29c)
-#define ADD_BITS_THR63_enhanced_sFlow_fill_remain_IPv6_CONST_0x2C_LEN16_TO_PKT_udp_header__Length_OFFSET                         (0x2d8)
-#define ADD_BITS_THR63_enhanced_sFlow_fill_remain_IPv6_CONST_0x2C_LEN16_TO_PKT_IPv6_Header__payload_length_OFFSET                (0x2dc)
+#define ADD_BITS_THR63_enhanced_sFlow_fill_remain_IPv6_CONST_0x2C_LEN16_TO_PKT_udp_header__Length_OFFSET                         (0x2e0)
+#define ADD_BITS_THR63_enhanced_sFlow_fill_remain_IPv6_CONST_0x2C_LEN16_TO_PKT_IPv6_Header__payload_length_OFFSET                (0x2e4)
+#define COPY_BITS_THR63_enhanced_sFlow_fill_remain_IPv6_DESC_phal2ppa__orig_src_eport_PLUS6_LEN7_TO_PKT_enhanced_sflow_rx_ts_shim_header__port_number_OFFSET (0x2e8)
+#define COPY_BITS_THR63_enhanced_sFlow_fill_remain_IPv6_DESC_phal2ppa__local_dev_trg_phy_port_PLUS3_LEN7_TO_PKT_enhanced_sflow_tx_ts_shim_header__port_number_OFFSET (0x2ec)
+
+/*************** THR64_Erspan_TypeII_SameDevMirroring_Ipv4 *******************/
+#define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x08_LEN8_TO_PKT_ethertype_header__ethertype_OFFSET            (0x2f0)
+#define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x10_LEN8_TO_PKT_GRE_header__C_OFFSET                          (0x2f4)
+#define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x88_LEN8_TO_PKT_GRE_header__NP_OFFSET                         (0x2f8)
+#define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0xBE_LEN8_TO_PKT_GRE_header__NP_PLUS8_OFFSET                   (0x2fc)
+#define COPY_BYTES_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__lm_counter_LEN4_TO_PKT_GRE_header__Seq_num_OFFSET    (0x300)
+#define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_srcTrgPortEntry__targetPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4_OFFSET (0x304)
+#define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_srcTrgPortEntry__srcPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4_OFFSET (0x308)
+#define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x1_LEN4_TO_PKT_ERSPAN_type_II_header__Ver_OFFSET              (0x30c)
+#define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__qos_mapped_up_LEN3_TO_PKT_ERSPAN_type_II_header__COS_OFFSET (0x310)
+#define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x3_LEN2_TO_PKT_ERSPAN_type_II_header__En_OFFSET               (0x314)
+#define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__truncated_LEN1_TO_PKT_ERSPAN_type_II_header__T_OFFSET (0x318)
+#define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__egress_byte_count_LEN14_TO_PKT_IPv4_Header__total_length_PLUS2_OFFSET (0x31c)
+#define ADD_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x24_LEN16_TO_PKT_IPv4_Header__total_length_OFFSET              (0x320)
+#define CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN8_FROM_PKT_IPv4_Header__version_OFFSET                        (0x324)
+#define CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN2_FROM_PKT_IPv4_Header__ttl_OFFSET                            (0x328)
+#define CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN8_FROM_PKT_IPv4_Header__sip_high_OFFSET                       (0x32c)
+#define CSUM_STORE_IP_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_TO_PKT_IPv4_Header__header_checksum_OFFSET                       (0x330)
+#define COPY_BYTES_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_erspan_template__mac_da_47_32_LEN12_TO_PKT_IPv4_Header__version_MINUS14_OFFSET (0x334)
+#define ADD_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x32_LEN14_TO_DESC_phal2ppa__egress_byte_count_OFFSET           (0x338)
+#define COPY_BYTES_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_erspan_template__mac_da_47_32_LEN16_TO_PKT_IPv4_Header__version_MINUS18_OFFSET (0x33c)
+#define ADD_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x36_LEN14_TO_DESC_phal2ppa__egress_byte_count_OFFSET           (0x340)
+
+/*************** THR65_Erspan_TypeII_SameDevMirroring_Ipv6 *******************/
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x86_LEN8_TO_PKT_ethertype_header__ethertype_OFFSET            (0x344)
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0xDD_LEN8_TO_PKT_ethertype_header__ethertype_PLUS8_OFFSET      (0x348)
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x10_LEN8_TO_PKT_GRE_header__C_OFFSET                          (0x34c)
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x88_LEN8_TO_PKT_GRE_header__NP_OFFSET                         (0x350)
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0xBE_LEN8_TO_PKT_GRE_header__NP_PLUS8_OFFSET                   (0x354)
+#define COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__lm_counter_LEN4_TO_PKT_GRE_header__Seq_num_OFFSET    (0x358)
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_srcTrgPortEntry__targetPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4_OFFSET (0x35c)
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_srcTrgPortEntry__srcPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4_OFFSET (0x360)
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x1_LEN4_TO_PKT_ERSPAN_type_II_header__Ver_OFFSET              (0x364)
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__qos_mapped_up_LEN3_TO_PKT_ERSPAN_type_II_header__COS_OFFSET (0x368)
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x3_LEN2_TO_PKT_ERSPAN_type_II_header__En_OFFSET               (0x36c)
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__truncated_LEN1_TO_PKT_ERSPAN_type_II_header__T_OFFSET (0x370)
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__egress_byte_count_LEN14_TO_PKT_IPv6_Header__payload_length_PLUS2_OFFSET (0x374)
+#define ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x10_LEN16_TO_PKT_IPv6_Header__payload_length_OFFSET            (0x378)
+#define COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_erspan_template__mac_da_47_32_LEN12_TO_PKT_IPv6_Header__version_MINUS14_OFFSET (0x37c)
+#define ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x3A_LEN14_TO_DESC_phal2ppa__egress_byte_count_OFFSET           (0x380)
+#define COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_erspan_template__mac_da_47_32_LEN16_TO_PKT_IPv6_Header__version_MINUS18_OFFSET (0x384)
+#define ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x3E_LEN14_TO_DESC_phal2ppa__egress_byte_count_OFFSET           (0x388)
+#define SHIFTRIGHT_12_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_LEN12_FROM_PKT_mac_header__mac_da_47_32_OFFSET             (0x38c)
 
 /*************** THR66_enhanced_sFlow *******************/
-#define COPY_BYTES_THR66_enhanced_sFlow_CFG_enhanced_sflow_template__reserved_0_LEN12_TO_PKT_enhanced_sflow_shim_header__version_OFFSET (0x2e0)
-#define COPY_BITS_THR66_enhanced_sFlow_CONST_0x5_LEN3_TO_PKT_enhanced_sflow_shim_header__version_PLUS29_OFFSET                   (0x2e4)
-#define COPY_BITS_THR66_enhanced_sFlow_CFG_enhanced_sflow_template__src_device_id_LEN8_TO_PKT_enhanced_sflow_shim_header__src_modid_OFFSET (0x2e8)
-#define COPY_BITS_THR66_enhanced_sFlow_DESC_phal2ppa__orig_src_eport_PLUS5_LEN8_TO_PKT_enhanced_sflow_shim_header__src_port_OFFSET (0x2ec)
-#define COPY_BITS_THR66_enhanced_sFlow_DESC_phal2ppa__copy_reserved_PLUS2_LEN16_TO_PKT_enhanced_sflow_shim_header__dst_modid_OFFSET (0x2f0)
-#define COPY_BYTES_THR66_enhanced_sFlow_CFG_enhanced_sflow_template__reserved_0_LEN12_TO_PKT_enhanced_sflow_rx_ts_shim_header__checksum_OFFSET (0x2f4)
-#define COPY_BITS_THR66_enhanced_sFlow_DESC_phal2ppa__timestamp_PLUS2_LEN14_TO_PKT_enhanced_sflow_rx_ts_shim_header__rx_timestamp_31_16_PLUS2_OFFSET (0x2f8)
-#define COPY_BITS_THR66_enhanced_sFlow_DESC_phal2ppa__timestamp_PLUS16_LEN16_TO_PKT_enhanced_sflow_rx_ts_shim_header__rx_timestamp_15_0_OFFSET (0x2fc)
-#define COPY_BITS_THR66_enhanced_sFlow_DESC_phal2ppa__orig_src_eport_PLUS6_LEN7_TO_PKT_enhanced_sflow_rx_ts_shim_header__port_number_OFFSET (0x300)
-#define COPY_BYTES_THR66_enhanced_sFlow_CFG_enhanced_sflow_template__reserved_0_LEN12_TO_PKT_enhanced_sflow_tx_ts_shim_header__checksum_PLUS2_OFFSET (0x304)
-#define COPY_BITS_THR66_enhanced_sFlow_DESC_phal2ppa__trg_phy_port_PLUS3_LEN7_TO_PKT_enhanced_sflow_tx_ts_shim_header__port_number_OFFSET (0x308)
-#define COPY_BITS_THR66_enhanced_sFlow_CONST_0x1_LEN1_TO_PKT_enhanced_sflow_tx_ts_shim_header__port_direction_OFFSET             (0x30c)
-#define COPY_BITS_THR66_enhanced_sFlow_CONST_0x1_LEN1_TO_DESC_phal2ppa__mac_timestamping_en_OFFSET                               (0x310)
-#define COPY_BITS_THR66_enhanced_sFlow_CONST_0x0_LEN3_TO_DESC_phal2ppa__ptp_packet_format_OFFSET                                 (0x314)
-#define COPY_BITS_THR66_enhanced_sFlow_CONST_0x4_LEN4_TO_DESC_phal2ppa__ptp_action_OFFSET                                        (0x318)
-#define COPY_BITS_THR66_enhanced_sFlow_CONST_0x2_LEN3_TO_DESC_phal2ppa__timestamp_mask_profile_OFFSET                            (0x31c)
-#define COPY_BITS_THR66_enhanced_sFlow_CONST_0x22_LEN8_TO_DESC_phal2ppa__timestamp_offset_OFFSET                                 (0x320)
+#define COPY_BYTES_THR66_enhanced_sFlow_CFG_enhanced_sflow_template__reserved_0_LEN12_TO_PKT_enhanced_sflow_shim_header__version_OFFSET (0x390)
+#define COPY_BITS_THR66_enhanced_sFlow_CONST_0x5_LEN3_TO_PKT_enhanced_sflow_shim_header__version_PLUS29_OFFSET                   (0x394)
+#define COPY_BITS_THR66_enhanced_sFlow_CFG_enhanced_sflow_template__src_device_id_LEN8_TO_PKT_enhanced_sflow_shim_header__src_modid_OFFSET (0x398)
+#define COPY_BITS_THR66_enhanced_sFlow_DESC_phal2ppa__orig_src_eport_PLUS5_LEN8_TO_PKT_enhanced_sflow_shim_header__src_port_OFFSET (0x39c)
+#define COPY_BITS_THR66_enhanced_sFlow_DESC_phal2ppa__copy_reserved_PLUS2_LEN16_TO_PKT_enhanced_sflow_shim_header__dst_modid_OFFSET (0x3a0)
+#define COPY_BYTES_THR66_enhanced_sFlow_CFG_enhanced_sflow_template__reserved_0_LEN12_TO_PKT_enhanced_sflow_rx_ts_shim_header__checksum_OFFSET (0x3a4)
+#define COPY_BITS_THR66_enhanced_sFlow_DESC_phal2ppa__timestamp_PLUS2_LEN14_TO_PKT_enhanced_sflow_rx_ts_shim_header__rx_timestamp_31_16_PLUS2_OFFSET (0x3a8)
+#define COPY_BITS_THR66_enhanced_sFlow_DESC_phal2ppa__timestamp_PLUS16_LEN16_TO_PKT_enhanced_sflow_rx_ts_shim_header__rx_timestamp_15_0_OFFSET (0x3ac)
+#define COPY_BYTES_THR66_enhanced_sFlow_CFG_enhanced_sflow_template__reserved_0_LEN12_TO_PKT_enhanced_sflow_tx_ts_shim_header__checksum_PLUS2_OFFSET (0x3b0)
+#define COPY_BITS_THR66_enhanced_sFlow_CONST_0x1_LEN1_TO_PKT_enhanced_sflow_tx_ts_shim_header__port_direction_OFFSET             (0x3b4)
+#define COPY_BITS_THR66_enhanced_sFlow_CONST_0x1_LEN1_TO_DESC_phal2ppa__mac_timestamping_en_OFFSET                               (0x3b8)
+#define COPY_BITS_THR66_enhanced_sFlow_CONST_0x0_LEN3_TO_DESC_phal2ppa__ptp_packet_format_OFFSET                                 (0x3bc)
+#define COPY_BITS_THR66_enhanced_sFlow_CONST_0x4_LEN4_TO_DESC_phal2ppa__ptp_action_OFFSET                                        (0x3c0)
+#define COPY_BITS_THR66_enhanced_sFlow_CONST_0x2_LEN3_TO_DESC_phal2ppa__timestamp_mask_profile_OFFSET                            (0x3c4)
+#define COPY_BITS_THR66_enhanced_sFlow_CONST_0x22_LEN8_TO_DESC_phal2ppa__timestamp_offset_OFFSET                                 (0x3c8)
+#define COPY_BITS_THR66_enhanced_sFlow_CONST_0x0_LEN1_TO_PKT_enhanced_sflow_rx_ts_shim_header__port_direction_OFFSET             (0x3cc)
 
 /*************** Last Entry *******************/
-#define ACCELERATOR_COMMAND_OFFSET_LAST_ENTRY                                                                                    (0x320)
+#define ACCELERATOR_COMMAND_OFFSET_LAST_ENTRY                                                                                    (0x3cc)
 
 /**************************************************************************
  * Accelerator command Trigger and load macros
diff --git a/simulation/simDevices/h/asicSimulation/SKernel/sEmbeddedCpu/firmware/ac5p_pha/Image01/ppa_fw_image_info.h b/simulation/simDevices/h/asicSimulation/SKernel/sEmbeddedCpu/firmware/ac5p_pha/Image01/ppa_fw_image_info.h
index 11d516ebfd..af0d215878 100644
--- a/simulation/simDevices/h/asicSimulation/SKernel/sEmbeddedCpu/firmware/ac5p_pha/Image01/ppa_fw_image_info.h
+++ b/simulation/simDevices/h/asicSimulation/SKernel/sEmbeddedCpu/firmware/ac5p_pha/Image01/ppa_fw_image_info.h
@@ -41,14 +41,16 @@
 #define ENABLE_THR61_save_target_port_info
 #define ENABLE_THR62_enhanced_sFlow_fill_remain_IPv4
 #define ENABLE_THR63_enhanced_sFlow_fill_remain_IPv6
+#define ENABLE_THR64_Erspan_TypeII_SameDevMirroring_Ipv4
+#define ENABLE_THR65_Erspan_TypeII_SameDevMirroring_Ipv6
 #define ENABLE_THR66_enhanced_sFlow
 
 #define TARGET_DEVICE Ac5p
 #define FW_IMAGE_NAME Image01
 #define FW_IMAGE_ID   1
 
-#define VER_YEAR      (0x21) /* Year */
-#define VER_MONTH     (0x10) /* Month */
+#define VER_YEAR      (0x22) /* Year */
+#define VER_MONTH     (0x02) /* Month */
 #define VER_IN_MONTH  (0x00) /* Number of version within a month */
 #define VER_DEBUG     (0x00) /* Used for private or debug versions, should be zero for official version */
 
diff --git a/simulation/simDevices/h/asicSimulation/SKernel/sEmbeddedCpu/firmware/ac5p_pha/Image01/ppa_fw_threads_defs.h b/simulation/simDevices/h/asicSimulation/SKernel/sEmbeddedCpu/firmware/ac5p_pha/Image01/ppa_fw_threads_defs.h
index b9ae7bcf2b..77a6c4d62e 100644
--- a/simulation/simDevices/h/asicSimulation/SKernel/sEmbeddedCpu/firmware/ac5p_pha/Image01/ppa_fw_threads_defs.h
+++ b/simulation/simDevices/h/asicSimulation/SKernel/sEmbeddedCpu/firmware/ac5p_pha/Image01/ppa_fw_threads_defs.h
@@ -60,6 +60,8 @@ void PPA_FW(THR60_DropAllTraffic)();
 void PPA_FW(THR61_save_target_port_info)();
 void PPA_FW(THR62_enhanced_sFlow_fill_remain_IPv4)();
 void PPA_FW(THR63_enhanced_sFlow_fill_remain_IPv6)();
+void PPA_FW(THR64_Erspan_TypeII_SameDevMirroring_Ipv4)();
+void PPA_FW(THR65_Erspan_TypeII_SameDevMirroring_Ipv6)();
 void PPA_FW(THR66_enhanced_sFlow)();
 
 #if RECOVER_FROM_EXCEPTION
diff --git a/simulation/simDevices/h/asicSimulation/SKernel/sEmbeddedCpu/firmware/ac5p_pha/Image01/ppa_fw_threads_strc_defs_little_endian.h b/simulation/simDevices/h/asicSimulation/SKernel/sEmbeddedCpu/firmware/ac5p_pha/Image01/ppa_fw_threads_strc_defs_little_endian.h
index c7dbaa64e5..6a3db63ef5 100644
--- a/simulation/simDevices/h/asicSimulation/SKernel/sEmbeddedCpu/firmware/ac5p_pha/Image01/ppa_fw_threads_strc_defs_little_endian.h
+++ b/simulation/simDevices/h/asicSimulation/SKernel/sEmbeddedCpu/firmware/ac5p_pha/Image01/ppa_fw_threads_strc_defs_little_endian.h
@@ -5867,6 +5867,324 @@ struct thr63_enhanced_sFlow_fill_remain_IPv6_out_hdr {
 }; /* 124B */
 
 
+/**************************************************************************
+ * Thread THR64_Erspan_TypeII_SameDevMirroring_Ipv4 structures
+ **************************************************************************/
+
+struct thr64_Erspan_TypeII_SameDevMirroring_Ipv4_cfg {
+    struct {
+        uint32_t mac_da_31_16:16;        /* offset:16 */
+        uint32_t mac_da_47_32:16;        /* offset:0 */
+        uint32_t mac_sa_47_32:16;        /* offset:48 */
+        uint32_t mac_da_15_0:16;         /* offset:32 */
+        uint32_t mac_sa_15_0:16;         /* offset:80 */
+        uint32_t mac_sa_31_16:16;        /* offset:64 */
+        uint32_t vlan_vid:12;            /* offset:116 */
+        uint32_t vlan_cfi:1;             /* offset:115 */
+        uint32_t vlan_up:3;              /* offset:112 */
+        uint32_t vlan_tpid:16;           /* offset:96 */
+    } erspan_template; /* 16B */
+    struct {
+        uint32_t targetPortEntry:16;     /* offset:144 */
+        uint32_t srcPortEntry:16;        /* offset:128 */
+    } srcTrgPortEntry; /* 4B */
+}; /* 20B */
+
+
+struct thr64_Erspan_TypeII_SameDevMirroring_Ipv4_in_hdr {
+    struct {
+        uint32_t reserved_0:32;          /* offset:0 */
+        uint32_t reserved_1:32;          /* offset:32 */
+        uint32_t reserved_2:32;          /* offset:64 */
+        uint32_t reserved_3:32;          /* offset:96 */
+        uint32_t reserved_4:32;          /* offset:128 */
+        uint32_t reserved_5:32;          /* offset:160 */
+        uint32_t reserved_6:32;          /* offset:192 */
+        uint32_t reserved_7:32;          /* offset:224 */
+        uint32_t reserved_8:32;          /* offset:256 */
+        uint32_t reserved_9:32;          /* offset:288 */
+        uint32_t reserved_10:32;         /* offset:320 */
+        uint32_t reserved_11:32;         /* offset:352 */
+        uint32_t reserved_12:32;         /* offset:384 */
+        uint32_t reserved_13:32;         /* offset:416 */
+        uint32_t reserved_14:32;         /* offset:448 */
+        uint32_t reserved_15:32;         /* offset:480 */
+    } expansion_space; /* 64B */
+    struct {
+        uint32_t mac_da_31_16:16;        /* offset:528 */
+        uint32_t mac_da_47_32:16;        /* offset:512 */
+        uint32_t mac_sa_47_32:16;        /* offset:560 */
+        uint32_t mac_da_15_0:16;         /* offset:544 */
+        uint32_t mac_sa_15_0:16;         /* offset:592 */
+        uint32_t mac_sa_31_16:16;        /* offset:576 */
+    } mac_header; /* 12B */
+    struct {
+        uint32_t data0:32;               /* offset:608 */
+        uint32_t data1:32;               /* offset:640 */
+        uint32_t data2:32;               /* offset:672 */
+        uint32_t data3:32;               /* offset:704 */
+        uint32_t data4:32;               /* offset:736 */
+        uint32_t data5:32;               /* offset:768 */
+        uint32_t data6:32;               /* offset:800 */
+    } payload; /* 28B */
+}; /* 104B */
+
+
+struct thr64_Erspan_TypeII_SameDevMirroring_Ipv4_out_hdr {
+    struct {
+        uint32_t reserved_0:32;          /* offset:0 */
+        uint32_t reserved_1:32;          /* offset:32 */
+        uint32_t dummy:16;                     /* added to align to 32 bits words */
+        uint32_t reserved_2:16;          /* offset:64 */
+    } expansion_space; /* 10B */
+    struct {
+        uint32_t mac_da_31_16:16;        /* offset:96 */
+        uint32_t mac_da_47_32:16;        /* offset:80 */
+        uint32_t mac_sa_47_32:16;        /* offset:128 */
+        uint32_t mac_da_15_0:16;         /* offset:112 */
+        uint32_t mac_sa_15_0:16;         /* offset:160 */
+        uint32_t mac_sa_31_16:16;        /* offset:144 */
+    } mac_header_outer; /* 12B */
+    struct {
+        uint32_t vid:12;                 /* offset:196 */
+        uint32_t cfi:1;                  /* offset:195 */
+        uint32_t up:3;                   /* offset:192 */
+        uint32_t TPID:16;                /* offset:176 */
+    } vlan; /* 4B */
+    struct {
+        uint32_t dummy:16;                     /* added to align to 32 bits words */
+        uint32_t ethertype:16;           /* offset:208 */
+    } ethertype_header; /* 2B */
+    struct {
+        uint32_t total_length:16;        /* offset:240 */
+        uint32_t ecn:2;                  /* offset:238 */
+        uint32_t dscp:6;                 /* offset:232 */
+        uint32_t ihl:4;                  /* offset:228 */
+        uint32_t version:4;              /* offset:224 */
+        uint32_t fragment_offset:13;     /* offset:275 */
+        uint32_t flag_more_fragment:1;   /* offset:274 */
+        uint32_t flag_dont_fragment:1;   /* offset:273 */
+        uint32_t flag_reserved:1;        /* offset:272 */
+        uint32_t identification:16;      /* offset:256 */
+        uint32_t header_checksum:16;     /* offset:304 */
+        uint32_t protocol:8;             /* offset:296 */
+        uint32_t ttl:8;                  /* offset:288 */
+        uint32_t sip_low:16;             /* offset:336 */
+        uint32_t sip_high:16;            /* offset:320 */
+        uint32_t dip_low:16;             /* offset:368 */
+        uint32_t dip_high:16;            /* offset:352 */
+    } IPv4_Header; /* 20B */
+    struct {
+        uint32_t NP:16;                  /* offset:400 */
+        uint32_t Version:3;              /* offset:397 */
+        uint32_t Flags:5;                /* offset:392 */
+        uint32_t Recur:3;                /* offset:389 */
+        uint32_t s:1;                    /* offset:388 */
+        uint32_t S:1;                    /* offset:387 */
+        uint32_t K:1;                    /* offset:386 */
+        uint32_t R:1;                    /* offset:385 */
+        uint32_t C:1;                    /* offset:384 */
+        uint32_t Seq_num:32;             /* offset:416 */
+    } GRE_header; /* 8B */
+    struct {
+        uint32_t Session_id:10;          /* offset:470 */
+        uint32_t T:1;                    /* offset:469 */
+        uint32_t En:2;                   /* offset:467 */
+        uint32_t COS:3;                  /* offset:464 */
+        uint32_t VLAN:12;                /* offset:452 */
+        uint32_t Ver:4;                  /* offset:448 */
+        uint32_t Index:20;               /* offset:492 */
+        uint32_t Reserved:12;            /* offset:480 */
+    } ERSPAN_type_II_header; /* 8B */
+    struct {
+        uint32_t mac_da_31_16:16;        /* offset:528 */
+        uint32_t mac_da_47_32:16;        /* offset:512 */
+        uint32_t mac_sa_47_32:16;        /* offset:560 */
+        uint32_t mac_da_15_0:16;         /* offset:544 */
+        uint32_t mac_sa_15_0:16;         /* offset:592 */
+        uint32_t mac_sa_31_16:16;        /* offset:576 */
+    } mac_header; /* 12B */
+    struct {
+        uint32_t data0:32;               /* offset:608 */
+        uint32_t data1:32;               /* offset:640 */
+        uint32_t data2:32;               /* offset:672 */
+        uint32_t data3:32;               /* offset:704 */
+        uint32_t data4:32;               /* offset:736 */
+        uint32_t data5:32;               /* offset:768 */
+        uint32_t data6:32;               /* offset:800 */
+    } payload; /* 28B */
+}; /* 104B */
+
+
+/**************************************************************************
+ * Thread THR65_Erspan_TypeII_SameDevMirroring_Ipv6 structures
+ **************************************************************************/
+
+struct thr65_Erspan_TypeII_SameDevMirroring_Ipv6_cfg {
+    struct {
+        uint32_t mac_da_31_16:16;        /* offset:16 */
+        uint32_t mac_da_47_32:16;        /* offset:0 */
+        uint32_t mac_sa_47_32:16;        /* offset:48 */
+        uint32_t mac_da_15_0:16;         /* offset:32 */
+        uint32_t mac_sa_15_0:16;         /* offset:80 */
+        uint32_t mac_sa_31_16:16;        /* offset:64 */
+        uint32_t vlan_vid:12;            /* offset:116 */
+        uint32_t vlan_cfi:1;             /* offset:115 */
+        uint32_t vlan_up:3;              /* offset:112 */
+        uint32_t vlan_tpid:16;           /* offset:96 */
+    } erspan_template; /* 16B */
+    struct {
+        uint32_t targetPortEntry:16;     /* offset:144 */
+        uint32_t srcPortEntry:16;        /* offset:128 */
+    } srcTrgPortEntry; /* 4B */
+}; /* 20B */
+
+
+struct thr65_Erspan_TypeII_SameDevMirroring_Ipv6_in_hdr {
+    struct {
+        uint32_t reserved_0:32;          /* offset:0 */
+        uint32_t reserved_1:32;          /* offset:32 */
+        uint32_t reserved_2:32;          /* offset:64 */
+        uint32_t reserved_3:32;          /* offset:96 */
+        uint32_t reserved_4:32;          /* offset:128 */
+        uint32_t reserved_5:32;          /* offset:160 */
+        uint32_t reserved_6:32;          /* offset:192 */
+        uint32_t reserved_7:32;          /* offset:224 */
+        uint32_t reserved_8:32;          /* offset:256 */
+        uint32_t reserved_9:32;          /* offset:288 */
+        uint32_t reserved_10:32;         /* offset:320 */
+        uint32_t reserved_11:32;         /* offset:352 */
+        uint32_t reserved_12:32;         /* offset:384 */
+        uint32_t reserved_13:32;         /* offset:416 */
+        uint32_t reserved_14:32;         /* offset:448 */
+        uint32_t reserved_15:32;         /* offset:480 */
+    } expansion_space; /* 64B */
+    struct {
+        uint32_t mac_da_31_16:16;        /* offset:528 */
+        uint32_t mac_da_47_32:16;        /* offset:512 */
+        uint32_t mac_sa_47_32:16;        /* offset:560 */
+        uint32_t mac_da_15_0:16;         /* offset:544 */
+        uint32_t mac_sa_15_0:16;         /* offset:592 */
+        uint32_t mac_sa_31_16:16;        /* offset:576 */
+    } mac_header; /* 12B */
+    struct {
+        uint32_t dummy:32;               /* offset:608 */
+    } RSPAN_tag_dummy; /* 4B */
+    struct {
+        uint32_t Ingress_E_CID_base:12;  /* offset:660 */
+        uint32_t E_DEI:1;                /* offset:659 */
+        uint32_t E_PCP:3;                /* offset:656 */
+        uint32_t TPID:16;                /* offset:640 */
+        uint32_t E_CID_ext:8;            /* offset:696 */
+        uint32_t Ingress_E_CID_ext:8;    /* offset:688 */
+        uint32_t E_CID_base:12;          /* offset:676 */
+        uint32_t GRP:2;                  /* offset:674 */
+        uint32_t Reserved:1;             /* offset:673 */
+        uint32_t Direction:1;            /* offset:672 */
+    } etag; /* 8B */
+    struct {
+        uint32_t data0:32;               /* offset:704 */
+        uint32_t data1:32;               /* offset:736 */
+        uint32_t data2:32;               /* offset:768 */
+        uint32_t data3:32;               /* offset:800 */
+        uint32_t data4:32;               /* offset:832 */
+        uint32_t data5:32;               /* offset:864 */
+        uint32_t data6:32;               /* offset:896 */
+    } payload; /* 28B */
+}; /* 116B */
+
+
+struct thr65_Erspan_TypeII_SameDevMirroring_Ipv6_out_hdr {
+    struct {
+        uint32_t dummy:16;                     /* added to align to 32 bits words */
+        uint32_t reserved_0:16;          /* offset:0 */
+    } expansion_space; /* 2B */
+    struct {
+        uint32_t mac_da_31_16:16;        /* offset:32 */
+        uint32_t mac_da_47_32:16;        /* offset:16 */
+        uint32_t mac_sa_47_32:16;        /* offset:64 */
+        uint32_t mac_da_15_0:16;         /* offset:48 */
+        uint32_t mac_sa_15_0:16;         /* offset:96 */
+        uint32_t mac_sa_31_16:16;        /* offset:80 */
+    } mac_header_outer; /* 12B */
+    struct {
+        uint32_t vid:12;                 /* offset:132 */
+        uint32_t cfi:1;                  /* offset:131 */
+        uint32_t up:3;                   /* offset:128 */
+        uint32_t TPID:16;                /* offset:112 */
+    } vlan; /* 4B */
+    struct {
+        uint32_t dummy:16;                     /* added to align to 32 bits words */
+        uint32_t ethertype:16;           /* offset:144 */
+    } ethertype_header; /* 2B */
+    struct {
+        uint32_t flow_label_15_0:16;     /* offset:176 */
+        uint32_t flow_label_19_16:4;     /* offset:172 */
+        uint32_t ecn:2;                  /* offset:170 */
+        uint32_t dscp:6;                 /* offset:164 */
+        uint32_t version:4;              /* offset:160 */
+        uint32_t hop_limit:8;            /* offset:216 */
+        uint32_t next_header:8;          /* offset:208 */
+        uint32_t payload_length:16;      /* offset:192 */
+        uint32_t sip0_low:16;            /* offset:240 */
+        uint32_t sip0_high:16;           /* offset:224 */
+        uint32_t sip1_low:16;            /* offset:272 */
+        uint32_t sip1_high:16;           /* offset:256 */
+        uint32_t sip2_low:16;            /* offset:304 */
+        uint32_t sip2_high:16;           /* offset:288 */
+        uint32_t sip3_low:16;            /* offset:336 */
+        uint32_t sip3_high:16;           /* offset:320 */
+        uint32_t dip0_low:16;            /* offset:368 */
+        uint32_t dip0_high:16;           /* offset:352 */
+        uint32_t dip1_low:16;            /* offset:400 */
+        uint32_t dip1_high:16;           /* offset:384 */
+        uint32_t dip2_low:16;            /* offset:432 */
+        uint32_t dip2_high:16;           /* offset:416 */
+        uint32_t dip3_low:16;            /* offset:464 */
+        uint32_t dip3_high:16;           /* offset:448 */
+    } IPv6_Header; /* 40B */
+    struct {
+        uint32_t NP:16;                  /* offset:496 */
+        uint32_t Version:3;              /* offset:493 */
+        uint32_t Flags:5;                /* offset:488 */
+        uint32_t Recur:3;                /* offset:485 */
+        uint32_t s:1;                    /* offset:484 */
+        uint32_t S:1;                    /* offset:483 */
+        uint32_t K:1;                    /* offset:482 */
+        uint32_t R:1;                    /* offset:481 */
+        uint32_t C:1;                    /* offset:480 */
+        uint32_t Seq_num:32;             /* offset:512 */
+    } GRE_header; /* 8B */
+    struct {
+        uint32_t Session_id:10;          /* offset:566 */
+        uint32_t T:1;                    /* offset:565 */
+        uint32_t En:2;                   /* offset:563 */
+        uint32_t COS:3;                  /* offset:560 */
+        uint32_t VLAN:12;                /* offset:548 */
+        uint32_t Ver:4;                  /* offset:544 */
+        uint32_t Index:20;               /* offset:588 */
+        uint32_t Reserved:12;            /* offset:576 */
+    } ERSPAN_type_II_header; /* 8B */
+    struct {
+        uint32_t mac_da_31_16:16;        /* offset:624 */
+        uint32_t mac_da_47_32:16;        /* offset:608 */
+        uint32_t mac_sa_47_32:16;        /* offset:656 */
+        uint32_t mac_da_15_0:16;         /* offset:640 */
+        uint32_t mac_sa_15_0:16;         /* offset:688 */
+        uint32_t mac_sa_31_16:16;        /* offset:672 */
+    } mac_header; /* 12B */
+    struct {
+        uint32_t data0:32;               /* offset:704 */
+        uint32_t data1:32;               /* offset:736 */
+        uint32_t data2:32;               /* offset:768 */
+        uint32_t data3:32;               /* offset:800 */
+        uint32_t data4:32;               /* offset:832 */
+        uint32_t data5:32;               /* offset:864 */
+        uint32_t data6:32;               /* offset:896 */
+    } payload; /* 28B */
+}; /* 116B */
+
+
 /**************************************************************************
  * Thread THR66_enhanced_sFlow structures
  **************************************************************************/
diff --git a/simulation/simDevices/h/asicSimulation/SKernel/sEmbeddedCpu/firmware/ac5p_pha/ppa_fw_common_strc_defs_little_endian.h b/simulation/simDevices/h/asicSimulation/SKernel/sEmbeddedCpu/firmware/ac5p_pha/ppa_fw_common_strc_defs_little_endian.h
index 39db4c44b9..e727083c23 100644
--- a/simulation/simDevices/h/asicSimulation/SKernel/sEmbeddedCpu/firmware/ac5p_pha/ppa_fw_common_strc_defs_little_endian.h
+++ b/simulation/simDevices/h/asicSimulation/SKernel/sEmbeddedCpu/firmware/ac5p_pha/ppa_fw_common_strc_defs_little_endian.h
@@ -168,7 +168,8 @@ struct ppa_in_desc {
         uint32_t trg_dev:10;                          /* offset:364 */
         uint32_t ttl:8;                                /* offset:356 */
         uint32_t sr_eh_offset:4;                      /* offset:352 */
-        uint32_t qos_profile:10;                      /* offset:406 */
+        uint32_t rx_sniff:1;                          /* offset:415 */
+        uint32_t reserved_9_1:9;                      /* offset:406 */
         uint32_t orig_src_eport:13;                   /* offset:393 */ 
         uint32_t egress_packet_cmd:3;                 /* offset:390 */
         uint32_t use_vidx:1;                           /* offset:389 */
diff --git a/simulation/simDevices/h/asicSimulation/SKernel/sEmbeddedCpu/firmware/falcon_pha/Default/ppa_fw_accelerator_commands.h b/simulation/simDevices/h/asicSimulation/SKernel/sEmbeddedCpu/firmware/falcon_pha/Default/ppa_fw_accelerator_commands.h
index 76c1387683..e53fc4da45 100644
--- a/simulation/simDevices/h/asicSimulation/SKernel/sEmbeddedCpu/firmware/falcon_pha/Default/ppa_fw_accelerator_commands.h
+++ b/simulation/simDevices/h/asicSimulation/SKernel/sEmbeddedCpu/firmware/falcon_pha/Default/ppa_fw_accelerator_commands.h
@@ -401,7 +401,8 @@ void PPA_FW(load_accelerator_commands)();
 #define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_srcTrgPortEntry__srcPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4_VALUE (ACCEL_CMD_SRC_CONST(0)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(16)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(62)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(16)) /* 0x040fbe10 */
 #define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x1_LEN4_TO_PKT_ERSPAN_type_II_header__Ver_VALUE               (ACCEL_CMD_SRC_CONST(1)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(4)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(56)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(1)) /* 0x4403b801 */
 #define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__qos_mapped_up_LEN3_TO_PKT_ERSPAN_type_II_header__COS_VALUE (ACCEL_CMD_SRC_CONST(0)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(4)|ACCEL_CMD_LEN_BIT(3)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(58)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(82)) /* 0x0442ba52 */
-#define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x6_LEN3_TO_PKT_ERSPAN_type_II_header__En_VALUE                (ACCEL_CMD_SRC_CONST(1)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(3)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(3)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(58)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(6)) /* 0x4582ba06 */
+#define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x3_LEN2_TO_PKT_ERSPAN_type_II_header__En_VALUE                (ACCEL_CMD_SRC_CONST(1)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(3)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(2)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(58)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(3)) /* 0x4581ba03 */
+#define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__truncated_LEN1_TO_PKT_ERSPAN_type_II_header__T_VALUE  (ACCEL_CMD_SRC_CONST(0)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(5)|ACCEL_CMD_SRC_BIT(4)|ACCEL_CMD_LEN_BIT(1)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(58)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(64)) /* 0x06c0ba40 */
 #define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__egress_byte_count_LEN14_TO_PKT_IPv4_Header__total_length_PLUS2_VALUE (ACCEL_CMD_SRC_CONST(0)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(2)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(14)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(30)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(80)) /* 0x050d9e50 */
 #define ADD_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x24_LEN16_TO_PKT_IPv4_Header__total_length_VALUE               (ACCEL_CMD_SRC_CONST(1)|ACCEL_CMD_BIT_ADD|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(16)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(30)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(36)) /* 0x540f9e24 */
 #define CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN8_FROM_PKT_IPv4_Header__version_VALUE                         (ACCEL_CMD_CSUM_LOAD|ACCEL_CMD_CSUM_LOAD_IS_OLD(0)|ACCEL_CMD_LEN_BYTE(8)|ACCEL_CMD_SRC_BYTE_TYPE(PKT)|ACCEL_CMD_SRC_BYTE(28)) /* 0x0807009c */
@@ -424,7 +425,8 @@ void PPA_FW(load_accelerator_commands)();
 #define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_srcTrgPortEntry__srcPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4_VALUE (ACCEL_CMD_SRC_CONST(0)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(16)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(74)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(16)) /* 0x040fca10 */
 #define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x1_LEN4_TO_PKT_ERSPAN_type_II_header__Ver_VALUE               (ACCEL_CMD_SRC_CONST(1)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(4)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(68)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(1)) /* 0x4403c401 */
 #define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__qos_mapped_up_LEN3_TO_PKT_ERSPAN_type_II_header__COS_VALUE (ACCEL_CMD_SRC_CONST(0)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(4)|ACCEL_CMD_LEN_BIT(3)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(70)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(82)) /* 0x0442c652 */
-#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x6_LEN3_TO_PKT_ERSPAN_type_II_header__En_VALUE                (ACCEL_CMD_SRC_CONST(1)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(3)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(3)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(70)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(6)) /* 0x4582c606 */
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x3_LEN2_TO_PKT_ERSPAN_type_II_header__En_VALUE                (ACCEL_CMD_SRC_CONST(1)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(3)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(2)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(70)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(3)) /* 0x4581c603 */
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__truncated_LEN1_TO_PKT_ERSPAN_type_II_header__T_VALUE  (ACCEL_CMD_SRC_CONST(0)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(5)|ACCEL_CMD_SRC_BIT(4)|ACCEL_CMD_LEN_BIT(1)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(70)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(64)) /* 0x06c0c640 */
 #define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__egress_byte_count_LEN14_TO_PKT_IPv6_Header__payload_length_PLUS2_VALUE (ACCEL_CMD_SRC_CONST(0)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(2)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(14)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(24)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(80)) /* 0x050d9850 */
 #define ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x10_LEN16_TO_PKT_IPv6_Header__payload_length_VALUE             (ACCEL_CMD_SRC_CONST(1)|ACCEL_CMD_BIT_ADD|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(16)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(24)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(16)) /* 0x540f9810 */
 #define COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_erspan_template__mac_da_47_32_LEN12_TO_PKT_IPv6_Header__version_MINUS14_VALUE (ACCEL_CMD_BYTE_COPY|ACCEL_CMD_LEN_BYTE(12)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(6)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(0)) /* 0x000b8600 */
@@ -791,40 +793,42 @@ void PPA_FW(load_accelerator_commands)();
 #define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_srcTrgPortEntry__srcPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4_OFFSET (0x2b4)
 #define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x1_LEN4_TO_PKT_ERSPAN_type_II_header__Ver_OFFSET              (0x2b8)
 #define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__qos_mapped_up_LEN3_TO_PKT_ERSPAN_type_II_header__COS_OFFSET (0x2bc)
-#define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x6_LEN3_TO_PKT_ERSPAN_type_II_header__En_OFFSET               (0x2c0)
-#define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__egress_byte_count_LEN14_TO_PKT_IPv4_Header__total_length_PLUS2_OFFSET (0x2c4)
-#define ADD_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x24_LEN16_TO_PKT_IPv4_Header__total_length_OFFSET              (0x2c8)
-#define CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN8_FROM_PKT_IPv4_Header__version_OFFSET                        (0x2cc)
-#define CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN2_FROM_PKT_IPv4_Header__ttl_OFFSET                            (0x2d0)
-#define CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN8_FROM_PKT_IPv4_Header__sip_high_OFFSET                       (0x2d4)
-#define CSUM_STORE_IP_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_TO_PKT_IPv4_Header__header_checksum_OFFSET                       (0x2d8)
-#define COPY_BYTES_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_erspan_template__mac_da_47_32_LEN12_TO_PKT_IPv4_Header__version_MINUS14_OFFSET (0x2dc)
-#define ADD_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x32_LEN14_TO_DESC_phal2ppa__egress_byte_count_OFFSET           (0x2e0)
-#define COPY_BYTES_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_erspan_template__mac_da_47_32_LEN16_TO_PKT_IPv4_Header__version_MINUS18_OFFSET (0x2e4)
+#define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x3_LEN2_TO_PKT_ERSPAN_type_II_header__En_OFFSET               (0x2c0)
+#define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__truncated_LEN1_TO_PKT_ERSPAN_type_II_header__T_OFFSET (0x2c4)
+#define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__egress_byte_count_LEN14_TO_PKT_IPv4_Header__total_length_PLUS2_OFFSET (0x2c8)
+#define ADD_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x24_LEN16_TO_PKT_IPv4_Header__total_length_OFFSET              (0x2cc)
+#define CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN8_FROM_PKT_IPv4_Header__version_OFFSET                        (0x2d0)
+#define CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN2_FROM_PKT_IPv4_Header__ttl_OFFSET                            (0x2d4)
+#define CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN8_FROM_PKT_IPv4_Header__sip_high_OFFSET                       (0x2d8)
+#define CSUM_STORE_IP_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_TO_PKT_IPv4_Header__header_checksum_OFFSET                       (0x2dc)
+#define COPY_BYTES_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_erspan_template__mac_da_47_32_LEN12_TO_PKT_IPv4_Header__version_MINUS14_OFFSET (0x2e0)
+#define ADD_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x32_LEN14_TO_DESC_phal2ppa__egress_byte_count_OFFSET           (0x2e4)
+#define COPY_BYTES_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_erspan_template__mac_da_47_32_LEN16_TO_PKT_IPv4_Header__version_MINUS18_OFFSET (0x2e8)
 #define ADD_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x36_LEN14_TO_DESC_phal2ppa__egress_byte_count_OFFSET           (0x1bc)
 
 /*************** THR65_Erspan_TypeII_SameDevMirroring_Ipv6 *******************/
-#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x86_LEN8_TO_PKT_ethertype_header__ethertype_OFFSET            (0x2e8)
-#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0xDD_LEN8_TO_PKT_ethertype_header__ethertype_PLUS8_OFFSET      (0x2ec)
-#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x10_LEN8_TO_PKT_GRE_header__C_OFFSET                          (0x2f0)
-#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x88_LEN8_TO_PKT_GRE_header__NP_OFFSET                         (0x2f4)
-#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0xBE_LEN8_TO_PKT_GRE_header__NP_PLUS8_OFFSET                   (0x2f8)
-#define COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__lm_counter_LEN4_TO_PKT_GRE_header__Seq_num_OFFSET    (0x2fc)
-#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_srcTrgPortEntry__targetPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4_OFFSET (0x300)
-#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_srcTrgPortEntry__srcPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4_OFFSET (0x304)
-#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x1_LEN4_TO_PKT_ERSPAN_type_II_header__Ver_OFFSET              (0x308)
-#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__qos_mapped_up_LEN3_TO_PKT_ERSPAN_type_II_header__COS_OFFSET (0x30c)
-#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x6_LEN3_TO_PKT_ERSPAN_type_II_header__En_OFFSET               (0x310)
-#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__egress_byte_count_LEN14_TO_PKT_IPv6_Header__payload_length_PLUS2_OFFSET (0x314)
-#define ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x10_LEN16_TO_PKT_IPv6_Header__payload_length_OFFSET            (0x318)
-#define COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_erspan_template__mac_da_47_32_LEN12_TO_PKT_IPv6_Header__version_MINUS14_OFFSET (0x31c)
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x86_LEN8_TO_PKT_ethertype_header__ethertype_OFFSET            (0x2ec)
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0xDD_LEN8_TO_PKT_ethertype_header__ethertype_PLUS8_OFFSET      (0x2f0)
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x10_LEN8_TO_PKT_GRE_header__C_OFFSET                          (0x2f4)
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x88_LEN8_TO_PKT_GRE_header__NP_OFFSET                         (0x2f8)
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0xBE_LEN8_TO_PKT_GRE_header__NP_PLUS8_OFFSET                   (0x2fc)
+#define COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__lm_counter_LEN4_TO_PKT_GRE_header__Seq_num_OFFSET    (0x300)
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_srcTrgPortEntry__targetPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4_OFFSET (0x304)
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_srcTrgPortEntry__srcPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4_OFFSET (0x308)
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x1_LEN4_TO_PKT_ERSPAN_type_II_header__Ver_OFFSET              (0x30c)
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__qos_mapped_up_LEN3_TO_PKT_ERSPAN_type_II_header__COS_OFFSET (0x310)
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x3_LEN2_TO_PKT_ERSPAN_type_II_header__En_OFFSET               (0x314)
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__truncated_LEN1_TO_PKT_ERSPAN_type_II_header__T_OFFSET (0x318)
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__egress_byte_count_LEN14_TO_PKT_IPv6_Header__payload_length_PLUS2_OFFSET (0x31c)
+#define ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x10_LEN16_TO_PKT_IPv6_Header__payload_length_OFFSET            (0x320)
+#define COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_erspan_template__mac_da_47_32_LEN12_TO_PKT_IPv6_Header__version_MINUS14_OFFSET (0x324)
 #define ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x3A_LEN14_TO_DESC_phal2ppa__egress_byte_count_OFFSET           (0x1c4)
-#define COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_erspan_template__mac_da_47_32_LEN16_TO_PKT_IPv6_Header__version_MINUS18_OFFSET (0x320)
+#define COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_erspan_template__mac_da_47_32_LEN16_TO_PKT_IPv6_Header__version_MINUS18_OFFSET (0x328)
 #define ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x3E_LEN14_TO_DESC_phal2ppa__egress_byte_count_OFFSET           (0x1a4)
-#define SHIFTRIGHT_12_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_LEN12_FROM_PKT_mac_header__mac_da_47_32_OFFSET             (0x324)
+#define SHIFTRIGHT_12_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_LEN12_FROM_PKT_mac_header__mac_da_47_32_OFFSET             (0x32c)
 
 /*************** Last Entry *******************/
-#define ACCELERATOR_COMMAND_OFFSET_LAST_ENTRY                                                                                    (0x324)
+#define ACCELERATOR_COMMAND_OFFSET_LAST_ENTRY                                                                                    (0x32c)
 
 /**************************************************************************
  * Accelerator command Trigger and load macros
diff --git a/simulation/simDevices/h/asicSimulation/SKernel/sEmbeddedCpu/firmware/falcon_pha/Default/ppa_fw_image_info.h b/simulation/simDevices/h/asicSimulation/SKernel/sEmbeddedCpu/firmware/falcon_pha/Default/ppa_fw_image_info.h
index 048af56848..472de1c335 100644
--- a/simulation/simDevices/h/asicSimulation/SKernel/sEmbeddedCpu/firmware/falcon_pha/Default/ppa_fw_image_info.h
+++ b/simulation/simDevices/h/asicSimulation/SKernel/sEmbeddedCpu/firmware/falcon_pha/Default/ppa_fw_image_info.h
@@ -34,8 +34,8 @@
 #define FW_IMAGE_NAME Default
 #define FW_IMAGE_ID   0
 
-#define VER_YEAR      (0x21) /* Year */
-#define VER_MONTH     (0x11) /* Month */
+#define VER_YEAR      (0x22) /* Year */
+#define VER_MONTH     (0x02) /* Month */
 #define VER_IN_MONTH  (0x00) /* Number of version within a month */
 #define VER_DEBUG     (0x00) /* Used for private or debug versions, should be zero for official version */
 
diff --git a/simulation/simDevices/h/asicSimulation/SKernel/sEmbeddedCpu/firmware/falcon_pha/Image01/ppa_fw_accelerator_commands.h b/simulation/simDevices/h/asicSimulation/SKernel/sEmbeddedCpu/firmware/falcon_pha/Image01/ppa_fw_accelerator_commands.h
index 00fb7046c7..d7d3a3aa1c 100644
--- a/simulation/simDevices/h/asicSimulation/SKernel/sEmbeddedCpu/firmware/falcon_pha/Image01/ppa_fw_accelerator_commands.h
+++ b/simulation/simDevices/h/asicSimulation/SKernel/sEmbeddedCpu/firmware/falcon_pha/Image01/ppa_fw_accelerator_commands.h
@@ -496,6 +496,8 @@ void PPA_FW(load_accelerator_commands)();
 #define CSUM_LOAD_NEW_THR62_enhanced_sFlow_fill_remain_IPv4_LEN2_FROM_PKT_IPv4_Header__total_length_VALUE                        (ACCEL_CMD_CSUM_LOAD|ACCEL_CMD_CSUM_LOAD_IS_OLD(0)|ACCEL_CMD_LEN_BYTE(2)|ACCEL_CMD_SRC_BYTE_TYPE(PKT)|ACCEL_CMD_SRC_BYTE(34)) /* 0x080100a2 */
 #define CSUM_LOAD_OLD_THR62_enhanced_sFlow_fill_remain_IPv4_LEN2_FROM_PKT_IPv4_Header__header_checksum_VALUE                     (ACCEL_CMD_CSUM_LOAD|ACCEL_CMD_CSUM_LOAD_IS_OLD(1)|ACCEL_CMD_LEN_BYTE(2)|ACCEL_CMD_SRC_BYTE_TYPE(PKT)|ACCEL_CMD_SRC_BYTE(42)) /* 0x082100aa */
 #define CSUM_STORE_IP_THR62_enhanced_sFlow_fill_remain_IPv4_TO_PKT_IPv4_Header__header_checksum_VALUE                            (ACCEL_CMD_CSUM_STORE|ACCEL_CMD_CSUM_STORE_IS_UDP(0)|ACCEL_CMD_LEN_BIT(16)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(42)) /* 0xc00faa00 */
+#define COPY_BITS_THR62_enhanced_sFlow_fill_remain_IPv4_DESC_phal2ppa__orig_src_eport_PLUS6_LEN7_TO_PKT_enhanced_sflow_rx_ts_shim_header__port_number_VALUE (ACCEL_CMD_SRC_CONST(0)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(7)|ACCEL_CMD_LEN_BIT(7)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(89)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(113)) /* 0x0476d971 */
+#define COPY_BITS_THR62_enhanced_sFlow_fill_remain_IPv4_DESC_phal2ppa__local_dev_trg_phy_port_PLUS3_LEN7_TO_PKT_enhanced_sflow_tx_ts_shim_header__port_number_VALUE (ACCEL_CMD_SRC_CONST(0)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(7)|ACCEL_CMD_LEN_BIT(7)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(103)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(72)) /* 0x0476e748 */
 
 /*************** THR63_enhanced_sFlow_fill_remain_IPv6 *******************/
 #define COPY_BYTES_THR63_enhanced_sFlow_fill_remain_IPv6_DESC_phal2ppa__pha_metadata_LEN2_TO_PKT_enhanced_sflow_rx_ts_shim_header__ip_high_VALUE (ACCEL_CMD_BYTE_COPY|ACCEL_CMD_LEN_BYTE(2)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(107)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(84)) /* 0x0001eb54 */
@@ -509,6 +511,8 @@ void PPA_FW(load_accelerator_commands)();
 #define COPY_BITS_THR63_enhanced_sFlow_fill_remain_IPv6_CONST_0x1_LEN1_TO_DESC_phal2ppa__egress_checksum_mode_VALUE              (ACCEL_CMD_SRC_CONST(1)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(1)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(1)|ACCEL_CMD_DST_BYTE_TYPE(NO_PKT)|ACCEL_CMD_DST_BYTE(96)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(1)) /* 0x44806001 */
 #define ADD_BITS_THR63_enhanced_sFlow_fill_remain_IPv6_CONST_0x2C_LEN16_TO_PKT_udp_header__Length_VALUE                          (ACCEL_CMD_SRC_CONST(1)|ACCEL_CMD_BIT_ADD|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(16)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(76)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(44)) /* 0x540fcc2c */
 #define ADD_BITS_THR63_enhanced_sFlow_fill_remain_IPv6_CONST_0x2C_LEN16_TO_PKT_IPv6_Header__payload_length_VALUE                 (ACCEL_CMD_SRC_CONST(1)|ACCEL_CMD_BIT_ADD|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(16)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(36)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(44)) /* 0x540fa42c */
+#define COPY_BITS_THR63_enhanced_sFlow_fill_remain_IPv6_DESC_phal2ppa__orig_src_eport_PLUS6_LEN7_TO_PKT_enhanced_sflow_rx_ts_shim_header__port_number_VALUE (ACCEL_CMD_SRC_CONST(0)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(7)|ACCEL_CMD_LEN_BIT(7)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(109)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(113)) /* 0x0476ed71 */
+#define COPY_BITS_THR63_enhanced_sFlow_fill_remain_IPv6_DESC_phal2ppa__local_dev_trg_phy_port_PLUS3_LEN7_TO_PKT_enhanced_sflow_tx_ts_shim_header__port_number_VALUE (ACCEL_CMD_SRC_CONST(0)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(7)|ACCEL_CMD_LEN_BIT(7)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(123)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(72)) /* 0x0476fb48 */
 
 /*************** THR64_Erspan_TypeII_SameDevMirroring_Ipv4 *******************/
 #define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x08_LEN8_TO_PKT_ethertype_header__ethertype_VALUE             (ACCEL_CMD_SRC_CONST(1)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(8)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(26)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(8)) /* 0x44079a08 */
@@ -520,7 +524,8 @@ void PPA_FW(load_accelerator_commands)();
 #define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_srcTrgPortEntry__srcPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4_VALUE (ACCEL_CMD_SRC_CONST(0)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(16)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(62)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(16)) /* 0x040fbe10 */
 #define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x1_LEN4_TO_PKT_ERSPAN_type_II_header__Ver_VALUE               (ACCEL_CMD_SRC_CONST(1)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(4)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(56)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(1)) /* 0x4403b801 */
 #define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__qos_mapped_up_LEN3_TO_PKT_ERSPAN_type_II_header__COS_VALUE (ACCEL_CMD_SRC_CONST(0)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(4)|ACCEL_CMD_LEN_BIT(3)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(58)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(82)) /* 0x0442ba52 */
-#define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x6_LEN3_TO_PKT_ERSPAN_type_II_header__En_VALUE                (ACCEL_CMD_SRC_CONST(1)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(3)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(3)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(58)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(6)) /* 0x4582ba06 */
+#define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x3_LEN2_TO_PKT_ERSPAN_type_II_header__En_VALUE                (ACCEL_CMD_SRC_CONST(1)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(3)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(2)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(58)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(3)) /* 0x4581ba03 */
+#define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__truncated_LEN1_TO_PKT_ERSPAN_type_II_header__T_VALUE  (ACCEL_CMD_SRC_CONST(0)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(5)|ACCEL_CMD_SRC_BIT(4)|ACCEL_CMD_LEN_BIT(1)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(58)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(64)) /* 0x06c0ba40 */
 #define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__egress_byte_count_LEN14_TO_PKT_IPv4_Header__total_length_PLUS2_VALUE (ACCEL_CMD_SRC_CONST(0)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(2)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(14)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(30)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(80)) /* 0x050d9e50 */
 #define ADD_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x24_LEN16_TO_PKT_IPv4_Header__total_length_VALUE               (ACCEL_CMD_SRC_CONST(1)|ACCEL_CMD_BIT_ADD|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(16)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(30)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(36)) /* 0x540f9e24 */
 #define CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN8_FROM_PKT_IPv4_Header__version_VALUE                         (ACCEL_CMD_CSUM_LOAD|ACCEL_CMD_CSUM_LOAD_IS_OLD(0)|ACCEL_CMD_LEN_BYTE(8)|ACCEL_CMD_SRC_BYTE_TYPE(PKT)|ACCEL_CMD_SRC_BYTE(28)) /* 0x0807009c */
@@ -543,7 +548,8 @@ void PPA_FW(load_accelerator_commands)();
 #define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_srcTrgPortEntry__srcPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4_VALUE (ACCEL_CMD_SRC_CONST(0)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(16)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(74)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(16)) /* 0x040fca10 */
 #define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x1_LEN4_TO_PKT_ERSPAN_type_II_header__Ver_VALUE               (ACCEL_CMD_SRC_CONST(1)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(4)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(68)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(1)) /* 0x4403c401 */
 #define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__qos_mapped_up_LEN3_TO_PKT_ERSPAN_type_II_header__COS_VALUE (ACCEL_CMD_SRC_CONST(0)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(4)|ACCEL_CMD_LEN_BIT(3)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(70)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(82)) /* 0x0442c652 */
-#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x6_LEN3_TO_PKT_ERSPAN_type_II_header__En_VALUE                (ACCEL_CMD_SRC_CONST(1)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(3)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(3)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(70)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(6)) /* 0x4582c606 */
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x3_LEN2_TO_PKT_ERSPAN_type_II_header__En_VALUE                (ACCEL_CMD_SRC_CONST(1)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(3)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(2)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(70)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(3)) /* 0x4581c603 */
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__truncated_LEN1_TO_PKT_ERSPAN_type_II_header__T_VALUE  (ACCEL_CMD_SRC_CONST(0)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(5)|ACCEL_CMD_SRC_BIT(4)|ACCEL_CMD_LEN_BIT(1)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(70)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(64)) /* 0x06c0c640 */
 #define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__egress_byte_count_LEN14_TO_PKT_IPv6_Header__payload_length_PLUS2_VALUE (ACCEL_CMD_SRC_CONST(0)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(2)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(14)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(24)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(80)) /* 0x050d9850 */
 #define ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x10_LEN16_TO_PKT_IPv6_Header__payload_length_VALUE             (ACCEL_CMD_SRC_CONST(1)|ACCEL_CMD_BIT_ADD|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(16)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(24)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(16)) /* 0x540f9810 */
 #define COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_erspan_template__mac_da_47_32_LEN12_TO_PKT_IPv6_Header__version_MINUS14_VALUE (ACCEL_CMD_BYTE_COPY|ACCEL_CMD_LEN_BYTE(12)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(6)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(0)) /* 0x000b8600 */
@@ -561,15 +567,14 @@ void PPA_FW(load_accelerator_commands)();
 #define COPY_BYTES_THR66_enhanced_sFlow_CFG_enhanced_sflow_template__reserved_0_LEN12_TO_PKT_enhanced_sflow_rx_ts_shim_header__checksum_VALUE (ACCEL_CMD_BYTE_COPY|ACCEL_CMD_LEN_BYTE(12)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(36)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(0)) /* 0x000ba400 */
 #define COPY_BITS_THR66_enhanced_sFlow_DESC_phal2ppa__timestamp_PLUS2_LEN14_TO_PKT_enhanced_sflow_rx_ts_shim_header__rx_timestamp_31_16_PLUS2_VALUE (ACCEL_CMD_SRC_CONST(0)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(2)|ACCEL_CMD_SRC_BIT(2)|ACCEL_CMD_LEN_BIT(14)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(42)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(116)) /* 0x052daa74 */
 #define COPY_BITS_THR66_enhanced_sFlow_DESC_phal2ppa__timestamp_PLUS16_LEN16_TO_PKT_enhanced_sflow_rx_ts_shim_header__rx_timestamp_15_0_VALUE (ACCEL_CMD_SRC_CONST(0)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(16)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(44)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(118)) /* 0x040fac76 */
-#define COPY_BITS_THR66_enhanced_sFlow_DESC_phal2ppa__orig_src_eport_PLUS6_LEN7_TO_PKT_enhanced_sflow_rx_ts_shim_header__port_number_VALUE (ACCEL_CMD_SRC_CONST(0)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(7)|ACCEL_CMD_LEN_BIT(7)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(49)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(113)) /* 0x0476b171 */
 #define COPY_BYTES_THR66_enhanced_sFlow_CFG_enhanced_sflow_template__reserved_0_LEN12_TO_PKT_enhanced_sflow_tx_ts_shim_header__checksum_PLUS2_VALUE (ACCEL_CMD_BYTE_COPY|ACCEL_CMD_LEN_BYTE(12)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(52)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(0)) /* 0x000bb400 */
-#define COPY_BITS_THR66_enhanced_sFlow_DESC_phal2ppa__trg_phy_port_PLUS3_LEN7_TO_PKT_enhanced_sflow_tx_ts_shim_header__port_number_VALUE (ACCEL_CMD_SRC_CONST(0)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(1)|ACCEL_CMD_LEN_BIT(7)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(63)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(111)) /* 0x0416bf6f */
 #define COPY_BITS_THR66_enhanced_sFlow_CONST_0x1_LEN1_TO_PKT_enhanced_sflow_tx_ts_shim_header__port_direction_VALUE              (ACCEL_CMD_SRC_CONST(1)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(7)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(1)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(63)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(1)) /* 0x4780bf01 */
 #define COPY_BITS_THR66_enhanced_sFlow_CONST_0x1_LEN1_TO_DESC_phal2ppa__mac_timestamping_en_VALUE                                (ACCEL_CMD_SRC_CONST(1)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(3)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(1)|ACCEL_CMD_DST_BYTE_TYPE(NO_PKT)|ACCEL_CMD_DST_BYTE(72)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(1)) /* 0x45804801 */
 #define COPY_BITS_THR66_enhanced_sFlow_CONST_0x0_LEN3_TO_DESC_phal2ppa__ptp_packet_format_VALUE                                  (ACCEL_CMD_SRC_CONST(1)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(7)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(3)|ACCEL_CMD_DST_BYTE_TYPE(NO_PKT)|ACCEL_CMD_DST_BYTE(69)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(0)) /* 0x47824500 */
 #define COPY_BITS_THR66_enhanced_sFlow_CONST_0x4_LEN4_TO_DESC_phal2ppa__ptp_action_VALUE                                         (ACCEL_CMD_SRC_CONST(1)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(4)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(4)|ACCEL_CMD_DST_BYTE_TYPE(NO_PKT)|ACCEL_CMD_DST_BYTE(95)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(4)) /* 0x46035f04 */
 #define COPY_BITS_THR66_enhanced_sFlow_CONST_0x2_LEN3_TO_DESC_phal2ppa__timestamp_mask_profile_VALUE                             (ACCEL_CMD_SRC_CONST(1)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(2)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(3)|ACCEL_CMD_DST_BYTE_TYPE(NO_PKT)|ACCEL_CMD_DST_BYTE(96)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(2)) /* 0x45026002 */
 #define COPY_BITS_THR66_enhanced_sFlow_CONST_0x22_LEN8_TO_DESC_phal2ppa__timestamp_offset_VALUE                                  (ACCEL_CMD_SRC_CONST(1)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(6)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(8)|ACCEL_CMD_DST_BYTE_TYPE(NO_PKT)|ACCEL_CMD_DST_BYTE(97)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(34)) /* 0x47076122 */
+#define COPY_BITS_THR66_enhanced_sFlow_CONST_0x0_LEN1_TO_PKT_enhanced_sflow_rx_ts_shim_header__port_direction_VALUE              (ACCEL_CMD_SRC_CONST(1)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(7)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(1)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(49)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(0)) /* 0x4780b100 */
 
 /**************************************************************************
  * Accelerator commands offsets
@@ -1024,83 +1029,88 @@ void PPA_FW(load_accelerator_commands)();
 #define CSUM_LOAD_NEW_THR62_enhanced_sFlow_fill_remain_IPv4_LEN2_FROM_PKT_IPv4_Header__total_length_OFFSET                       (0x330)
 #define CSUM_LOAD_OLD_THR62_enhanced_sFlow_fill_remain_IPv4_LEN2_FROM_PKT_IPv4_Header__header_checksum_OFFSET                    (0x334)
 #define CSUM_STORE_IP_THR62_enhanced_sFlow_fill_remain_IPv4_TO_PKT_IPv4_Header__header_checksum_OFFSET                           (0x338)
+#define COPY_BITS_THR62_enhanced_sFlow_fill_remain_IPv4_DESC_phal2ppa__orig_src_eport_PLUS6_LEN7_TO_PKT_enhanced_sflow_rx_ts_shim_header__port_number_OFFSET (0x33c)
+#define COPY_BITS_THR62_enhanced_sFlow_fill_remain_IPv4_DESC_phal2ppa__local_dev_trg_phy_port_PLUS3_LEN7_TO_PKT_enhanced_sflow_tx_ts_shim_header__port_number_OFFSET (0x340)
 
 /*************** THR63_enhanced_sFlow_fill_remain_IPv6 *******************/
-#define COPY_BYTES_THR63_enhanced_sFlow_fill_remain_IPv6_DESC_phal2ppa__pha_metadata_LEN2_TO_PKT_enhanced_sflow_rx_ts_shim_header__ip_high_OFFSET (0x33c)
-#define CSUM_LOAD_NEW_THR63_enhanced_sFlow_fill_remain_IPv6_LEN6_FROM_PKT_enhanced_sflow_rx_ts_shim_header__rx_timestamp_47_32_OFFSET (0x340)
-#define CSUM_LOAD_NEW_THR63_enhanced_sFlow_fill_remain_IPv6_LEN4_FROM_PKT_enhanced_sflow_rx_ts_shim_header__reserved_OFFSET      (0x344)
-#define CSUM_STORE_IP_THR63_enhanced_sFlow_fill_remain_IPv6_TO_PKT_enhanced_sflow_rx_ts_shim_header__checksum_PLUS2_OFFSET       (0x348)
-#define COPY_BYTES_THR63_enhanced_sFlow_fill_remain_IPv6_DESC_phal2ppa__pha_metadata_PLUS2_LEN2_TO_PKT_enhanced_sflow_tx_ts_shim_header__ip_low_OFFSET (0x34c)
-#define CSUM_LOAD_NEW_THR63_enhanced_sFlow_fill_remain_IPv6_LEN6_FROM_PKT_enhanced_sflow_tx_ts_shim_header__tx_timestamp_47_32_OFFSET (0x350)
-#define CSUM_LOAD_NEW_THR63_enhanced_sFlow_fill_remain_IPv6_LEN4_FROM_PKT_enhanced_sflow_tx_ts_shim_header__reserved_OFFSET      (0x354)
-#define CSUM_STORE_IP_THR63_enhanced_sFlow_fill_remain_IPv6_TO_PKT_enhanced_sflow_tx_ts_shim_header__checksum_PLUS2_OFFSET       (0x358)
+#define COPY_BYTES_THR63_enhanced_sFlow_fill_remain_IPv6_DESC_phal2ppa__pha_metadata_LEN2_TO_PKT_enhanced_sflow_rx_ts_shim_header__ip_high_OFFSET (0x344)
+#define CSUM_LOAD_NEW_THR63_enhanced_sFlow_fill_remain_IPv6_LEN6_FROM_PKT_enhanced_sflow_rx_ts_shim_header__rx_timestamp_47_32_OFFSET (0x348)
+#define CSUM_LOAD_NEW_THR63_enhanced_sFlow_fill_remain_IPv6_LEN4_FROM_PKT_enhanced_sflow_rx_ts_shim_header__reserved_OFFSET      (0x34c)
+#define CSUM_STORE_IP_THR63_enhanced_sFlow_fill_remain_IPv6_TO_PKT_enhanced_sflow_rx_ts_shim_header__checksum_PLUS2_OFFSET       (0x350)
+#define COPY_BYTES_THR63_enhanced_sFlow_fill_remain_IPv6_DESC_phal2ppa__pha_metadata_PLUS2_LEN2_TO_PKT_enhanced_sflow_tx_ts_shim_header__ip_low_OFFSET (0x354)
+#define CSUM_LOAD_NEW_THR63_enhanced_sFlow_fill_remain_IPv6_LEN6_FROM_PKT_enhanced_sflow_tx_ts_shim_header__tx_timestamp_47_32_OFFSET (0x358)
+#define CSUM_LOAD_NEW_THR63_enhanced_sFlow_fill_remain_IPv6_LEN4_FROM_PKT_enhanced_sflow_tx_ts_shim_header__reserved_OFFSET      (0x35c)
+#define CSUM_STORE_IP_THR63_enhanced_sFlow_fill_remain_IPv6_TO_PKT_enhanced_sflow_tx_ts_shim_header__checksum_PLUS2_OFFSET       (0x360)
 #define COPY_BITS_THR63_enhanced_sFlow_fill_remain_IPv6_CONST_0x1_LEN1_TO_DESC_phal2ppa__egress_checksum_mode_OFFSET             (0x320)
-#define ADD_BITS_THR63_enhanced_sFlow_fill_remain_IPv6_CONST_0x2C_LEN16_TO_PKT_udp_header__Length_OFFSET                         (0x35c)
-#define ADD_BITS_THR63_enhanced_sFlow_fill_remain_IPv6_CONST_0x2C_LEN16_TO_PKT_IPv6_Header__payload_length_OFFSET                (0x360)
+#define ADD_BITS_THR63_enhanced_sFlow_fill_remain_IPv6_CONST_0x2C_LEN16_TO_PKT_udp_header__Length_OFFSET                         (0x364)
+#define ADD_BITS_THR63_enhanced_sFlow_fill_remain_IPv6_CONST_0x2C_LEN16_TO_PKT_IPv6_Header__payload_length_OFFSET                (0x368)
+#define COPY_BITS_THR63_enhanced_sFlow_fill_remain_IPv6_DESC_phal2ppa__orig_src_eport_PLUS6_LEN7_TO_PKT_enhanced_sflow_rx_ts_shim_header__port_number_OFFSET (0x36c)
+#define COPY_BITS_THR63_enhanced_sFlow_fill_remain_IPv6_DESC_phal2ppa__local_dev_trg_phy_port_PLUS3_LEN7_TO_PKT_enhanced_sflow_tx_ts_shim_header__port_number_OFFSET (0x370)
 
 /*************** THR64_Erspan_TypeII_SameDevMirroring_Ipv4 *******************/
-#define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x08_LEN8_TO_PKT_ethertype_header__ethertype_OFFSET            (0x364)
-#define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x10_LEN8_TO_PKT_GRE_header__C_OFFSET                          (0x368)
-#define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x88_LEN8_TO_PKT_GRE_header__NP_OFFSET                         (0x36c)
-#define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0xBE_LEN8_TO_PKT_GRE_header__NP_PLUS8_OFFSET                   (0x370)
-#define COPY_BYTES_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__lm_counter_LEN4_TO_PKT_GRE_header__Seq_num_OFFSET    (0x374)
-#define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_srcTrgPortEntry__targetPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4_OFFSET (0x378)
-#define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_srcTrgPortEntry__srcPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4_OFFSET (0x37c)
-#define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x1_LEN4_TO_PKT_ERSPAN_type_II_header__Ver_OFFSET              (0x380)
-#define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__qos_mapped_up_LEN3_TO_PKT_ERSPAN_type_II_header__COS_OFFSET (0x384)
-#define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x6_LEN3_TO_PKT_ERSPAN_type_II_header__En_OFFSET               (0x388)
-#define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__egress_byte_count_LEN14_TO_PKT_IPv4_Header__total_length_PLUS2_OFFSET (0x38c)
-#define ADD_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x24_LEN16_TO_PKT_IPv4_Header__total_length_OFFSET              (0x390)
-#define CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN8_FROM_PKT_IPv4_Header__version_OFFSET                        (0x394)
-#define CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN2_FROM_PKT_IPv4_Header__ttl_OFFSET                            (0x398)
-#define CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN8_FROM_PKT_IPv4_Header__sip_high_OFFSET                       (0x39c)
-#define CSUM_STORE_IP_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_TO_PKT_IPv4_Header__header_checksum_OFFSET                       (0x3a0)
-#define COPY_BYTES_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_erspan_template__mac_da_47_32_LEN12_TO_PKT_IPv4_Header__version_MINUS14_OFFSET (0x3a4)
-#define ADD_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x32_LEN14_TO_DESC_phal2ppa__egress_byte_count_OFFSET           (0x3a8)
-#define COPY_BYTES_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_erspan_template__mac_da_47_32_LEN16_TO_PKT_IPv4_Header__version_MINUS18_OFFSET (0x3ac)
+#define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x08_LEN8_TO_PKT_ethertype_header__ethertype_OFFSET            (0x374)
+#define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x10_LEN8_TO_PKT_GRE_header__C_OFFSET                          (0x378)
+#define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x88_LEN8_TO_PKT_GRE_header__NP_OFFSET                         (0x37c)
+#define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0xBE_LEN8_TO_PKT_GRE_header__NP_PLUS8_OFFSET                   (0x380)
+#define COPY_BYTES_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__lm_counter_LEN4_TO_PKT_GRE_header__Seq_num_OFFSET    (0x384)
+#define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_srcTrgPortEntry__targetPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4_OFFSET (0x388)
+#define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_srcTrgPortEntry__srcPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4_OFFSET (0x38c)
+#define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x1_LEN4_TO_PKT_ERSPAN_type_II_header__Ver_OFFSET              (0x390)
+#define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__qos_mapped_up_LEN3_TO_PKT_ERSPAN_type_II_header__COS_OFFSET (0x394)
+#define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x3_LEN2_TO_PKT_ERSPAN_type_II_header__En_OFFSET               (0x398)
+#define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__truncated_LEN1_TO_PKT_ERSPAN_type_II_header__T_OFFSET (0x39c)
+#define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__egress_byte_count_LEN14_TO_PKT_IPv4_Header__total_length_PLUS2_OFFSET (0x3a0)
+#define ADD_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x24_LEN16_TO_PKT_IPv4_Header__total_length_OFFSET              (0x3a4)
+#define CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN8_FROM_PKT_IPv4_Header__version_OFFSET                        (0x3a8)
+#define CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN2_FROM_PKT_IPv4_Header__ttl_OFFSET                            (0x3ac)
+#define CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN8_FROM_PKT_IPv4_Header__sip_high_OFFSET                       (0x3b0)
+#define CSUM_STORE_IP_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_TO_PKT_IPv4_Header__header_checksum_OFFSET                       (0x3b4)
+#define COPY_BYTES_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_erspan_template__mac_da_47_32_LEN12_TO_PKT_IPv4_Header__version_MINUS14_OFFSET (0x3b8)
+#define ADD_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x32_LEN14_TO_DESC_phal2ppa__egress_byte_count_OFFSET           (0x3bc)
+#define COPY_BYTES_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_erspan_template__mac_da_47_32_LEN16_TO_PKT_IPv4_Header__version_MINUS18_OFFSET (0x3c0)
 #define ADD_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x36_LEN14_TO_DESC_phal2ppa__egress_byte_count_OFFSET           (0x1bc)
 
 /*************** THR65_Erspan_TypeII_SameDevMirroring_Ipv6 *******************/
-#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x86_LEN8_TO_PKT_ethertype_header__ethertype_OFFSET            (0x3b0)
-#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0xDD_LEN8_TO_PKT_ethertype_header__ethertype_PLUS8_OFFSET      (0x3b4)
-#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x10_LEN8_TO_PKT_GRE_header__C_OFFSET                          (0x3b8)
-#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x88_LEN8_TO_PKT_GRE_header__NP_OFFSET                         (0x3bc)
-#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0xBE_LEN8_TO_PKT_GRE_header__NP_PLUS8_OFFSET                   (0x3c0)
-#define COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__lm_counter_LEN4_TO_PKT_GRE_header__Seq_num_OFFSET    (0x3c4)
-#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_srcTrgPortEntry__targetPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4_OFFSET (0x3c8)
-#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_srcTrgPortEntry__srcPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4_OFFSET (0x3cc)
-#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x1_LEN4_TO_PKT_ERSPAN_type_II_header__Ver_OFFSET              (0x3d0)
-#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__qos_mapped_up_LEN3_TO_PKT_ERSPAN_type_II_header__COS_OFFSET (0x3d4)
-#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x6_LEN3_TO_PKT_ERSPAN_type_II_header__En_OFFSET               (0x3d8)
-#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__egress_byte_count_LEN14_TO_PKT_IPv6_Header__payload_length_PLUS2_OFFSET (0x3dc)
-#define ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x10_LEN16_TO_PKT_IPv6_Header__payload_length_OFFSET            (0x3e0)
-#define COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_erspan_template__mac_da_47_32_LEN12_TO_PKT_IPv6_Header__version_MINUS14_OFFSET (0x3e4)
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x86_LEN8_TO_PKT_ethertype_header__ethertype_OFFSET            (0x3c4)
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0xDD_LEN8_TO_PKT_ethertype_header__ethertype_PLUS8_OFFSET      (0x3c8)
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x10_LEN8_TO_PKT_GRE_header__C_OFFSET                          (0x3cc)
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x88_LEN8_TO_PKT_GRE_header__NP_OFFSET                         (0x3d0)
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0xBE_LEN8_TO_PKT_GRE_header__NP_PLUS8_OFFSET                   (0x3d4)
+#define COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__lm_counter_LEN4_TO_PKT_GRE_header__Seq_num_OFFSET    (0x3d8)
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_srcTrgPortEntry__targetPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4_OFFSET (0x3dc)
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_srcTrgPortEntry__srcPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4_OFFSET (0x3e0)
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x1_LEN4_TO_PKT_ERSPAN_type_II_header__Ver_OFFSET              (0x3e4)
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__qos_mapped_up_LEN3_TO_PKT_ERSPAN_type_II_header__COS_OFFSET (0x3e8)
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x3_LEN2_TO_PKT_ERSPAN_type_II_header__En_OFFSET               (0x3ec)
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__truncated_LEN1_TO_PKT_ERSPAN_type_II_header__T_OFFSET (0x3f0)
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__egress_byte_count_LEN14_TO_PKT_IPv6_Header__payload_length_PLUS2_OFFSET (0x3f4)
+#define ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x10_LEN16_TO_PKT_IPv6_Header__payload_length_OFFSET            (0x3f8)
+#define COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_erspan_template__mac_da_47_32_LEN12_TO_PKT_IPv6_Header__version_MINUS14_OFFSET (0x3fc)
 #define ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x3A_LEN14_TO_DESC_phal2ppa__egress_byte_count_OFFSET           (0x1c4)
-#define COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_erspan_template__mac_da_47_32_LEN16_TO_PKT_IPv6_Header__version_MINUS18_OFFSET (0x3e8)
+#define COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_erspan_template__mac_da_47_32_LEN16_TO_PKT_IPv6_Header__version_MINUS18_OFFSET (0x400)
 #define ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x3E_LEN14_TO_DESC_phal2ppa__egress_byte_count_OFFSET           (0x1a4)
-#define SHIFTRIGHT_12_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_LEN12_FROM_PKT_mac_header__mac_da_47_32_OFFSET             (0x3ec)
+#define SHIFTRIGHT_12_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_LEN12_FROM_PKT_mac_header__mac_da_47_32_OFFSET             (0x404)
 
 /*************** THR66_enhanced_sFlow *******************/
-#define COPY_BYTES_THR66_enhanced_sFlow_CFG_enhanced_sflow_template__reserved_0_LEN12_TO_PKT_enhanced_sflow_shim_header__version_OFFSET (0x3f0)
-#define COPY_BITS_THR66_enhanced_sFlow_CONST_0x5_LEN3_TO_PKT_enhanced_sflow_shim_header__version_PLUS29_OFFSET                   (0x3f4)
-#define COPY_BITS_THR66_enhanced_sFlow_CFG_enhanced_sflow_template__src_device_id_LEN8_TO_PKT_enhanced_sflow_shim_header__src_modid_OFFSET (0x3f8)
-#define COPY_BITS_THR66_enhanced_sFlow_DESC_phal2ppa__orig_src_eport_PLUS5_LEN8_TO_PKT_enhanced_sflow_shim_header__src_port_OFFSET (0x3fc)
-#define COPY_BITS_THR66_enhanced_sFlow_DESC_phal2ppa__copy_reserved_PLUS2_LEN16_TO_PKT_enhanced_sflow_shim_header__dst_modid_OFFSET (0x400)
-#define COPY_BYTES_THR66_enhanced_sFlow_CFG_enhanced_sflow_template__reserved_0_LEN12_TO_PKT_enhanced_sflow_rx_ts_shim_header__checksum_OFFSET (0x404)
-#define COPY_BITS_THR66_enhanced_sFlow_DESC_phal2ppa__timestamp_PLUS2_LEN14_TO_PKT_enhanced_sflow_rx_ts_shim_header__rx_timestamp_31_16_PLUS2_OFFSET (0x408)
-#define COPY_BITS_THR66_enhanced_sFlow_DESC_phal2ppa__timestamp_PLUS16_LEN16_TO_PKT_enhanced_sflow_rx_ts_shim_header__rx_timestamp_15_0_OFFSET (0x40c)
-#define COPY_BITS_THR66_enhanced_sFlow_DESC_phal2ppa__orig_src_eport_PLUS6_LEN7_TO_PKT_enhanced_sflow_rx_ts_shim_header__port_number_OFFSET (0x410)
-#define COPY_BYTES_THR66_enhanced_sFlow_CFG_enhanced_sflow_template__reserved_0_LEN12_TO_PKT_enhanced_sflow_tx_ts_shim_header__checksum_PLUS2_OFFSET (0x414)
-#define COPY_BITS_THR66_enhanced_sFlow_DESC_phal2ppa__trg_phy_port_PLUS3_LEN7_TO_PKT_enhanced_sflow_tx_ts_shim_header__port_number_OFFSET (0x418)
-#define COPY_BITS_THR66_enhanced_sFlow_CONST_0x1_LEN1_TO_PKT_enhanced_sflow_tx_ts_shim_header__port_direction_OFFSET             (0x41c)
-#define COPY_BITS_THR66_enhanced_sFlow_CONST_0x1_LEN1_TO_DESC_phal2ppa__mac_timestamping_en_OFFSET                               (0x420)
-#define COPY_BITS_THR66_enhanced_sFlow_CONST_0x0_LEN3_TO_DESC_phal2ppa__ptp_packet_format_OFFSET                                 (0x424)
-#define COPY_BITS_THR66_enhanced_sFlow_CONST_0x4_LEN4_TO_DESC_phal2ppa__ptp_action_OFFSET                                        (0x428)
-#define COPY_BITS_THR66_enhanced_sFlow_CONST_0x2_LEN3_TO_DESC_phal2ppa__timestamp_mask_profile_OFFSET                            (0x42c)
-#define COPY_BITS_THR66_enhanced_sFlow_CONST_0x22_LEN8_TO_DESC_phal2ppa__timestamp_offset_OFFSET                                 (0x430)
+#define COPY_BYTES_THR66_enhanced_sFlow_CFG_enhanced_sflow_template__reserved_0_LEN12_TO_PKT_enhanced_sflow_shim_header__version_OFFSET (0x408)
+#define COPY_BITS_THR66_enhanced_sFlow_CONST_0x5_LEN3_TO_PKT_enhanced_sflow_shim_header__version_PLUS29_OFFSET                   (0x40c)
+#define COPY_BITS_THR66_enhanced_sFlow_CFG_enhanced_sflow_template__src_device_id_LEN8_TO_PKT_enhanced_sflow_shim_header__src_modid_OFFSET (0x410)
+#define COPY_BITS_THR66_enhanced_sFlow_DESC_phal2ppa__orig_src_eport_PLUS5_LEN8_TO_PKT_enhanced_sflow_shim_header__src_port_OFFSET (0x414)
+#define COPY_BITS_THR66_enhanced_sFlow_DESC_phal2ppa__copy_reserved_PLUS2_LEN16_TO_PKT_enhanced_sflow_shim_header__dst_modid_OFFSET (0x418)
+#define COPY_BYTES_THR66_enhanced_sFlow_CFG_enhanced_sflow_template__reserved_0_LEN12_TO_PKT_enhanced_sflow_rx_ts_shim_header__checksum_OFFSET (0x41c)
+#define COPY_BITS_THR66_enhanced_sFlow_DESC_phal2ppa__timestamp_PLUS2_LEN14_TO_PKT_enhanced_sflow_rx_ts_shim_header__rx_timestamp_31_16_PLUS2_OFFSET (0x420)
+#define COPY_BITS_THR66_enhanced_sFlow_DESC_phal2ppa__timestamp_PLUS16_LEN16_TO_PKT_enhanced_sflow_rx_ts_shim_header__rx_timestamp_15_0_OFFSET (0x424)
+#define COPY_BYTES_THR66_enhanced_sFlow_CFG_enhanced_sflow_template__reserved_0_LEN12_TO_PKT_enhanced_sflow_tx_ts_shim_header__checksum_PLUS2_OFFSET (0x428)
+#define COPY_BITS_THR66_enhanced_sFlow_CONST_0x1_LEN1_TO_PKT_enhanced_sflow_tx_ts_shim_header__port_direction_OFFSET             (0x42c)
+#define COPY_BITS_THR66_enhanced_sFlow_CONST_0x1_LEN1_TO_DESC_phal2ppa__mac_timestamping_en_OFFSET                               (0x430)
+#define COPY_BITS_THR66_enhanced_sFlow_CONST_0x0_LEN3_TO_DESC_phal2ppa__ptp_packet_format_OFFSET                                 (0x434)
+#define COPY_BITS_THR66_enhanced_sFlow_CONST_0x4_LEN4_TO_DESC_phal2ppa__ptp_action_OFFSET                                        (0x438)
+#define COPY_BITS_THR66_enhanced_sFlow_CONST_0x2_LEN3_TO_DESC_phal2ppa__timestamp_mask_profile_OFFSET                            (0x43c)
+#define COPY_BITS_THR66_enhanced_sFlow_CONST_0x22_LEN8_TO_DESC_phal2ppa__timestamp_offset_OFFSET                                 (0x440)
+#define COPY_BITS_THR66_enhanced_sFlow_CONST_0x0_LEN1_TO_PKT_enhanced_sflow_rx_ts_shim_header__port_direction_OFFSET             (0x444)
 
 /*************** Last Entry *******************/
-#define ACCELERATOR_COMMAND_OFFSET_LAST_ENTRY                                                                                    (0x430)
+#define ACCELERATOR_COMMAND_OFFSET_LAST_ENTRY                                                                                    (0x444)
 
 /**************************************************************************
  * Accelerator command Trigger and load macros
diff --git a/simulation/simDevices/h/asicSimulation/SKernel/sEmbeddedCpu/firmware/falcon_pha/Image01/ppa_fw_image_info.h b/simulation/simDevices/h/asicSimulation/SKernel/sEmbeddedCpu/firmware/falcon_pha/Image01/ppa_fw_image_info.h
index d616e44454..b471499a43 100644
--- a/simulation/simDevices/h/asicSimulation/SKernel/sEmbeddedCpu/firmware/falcon_pha/Image01/ppa_fw_image_info.h
+++ b/simulation/simDevices/h/asicSimulation/SKernel/sEmbeddedCpu/firmware/falcon_pha/Image01/ppa_fw_image_info.h
@@ -44,8 +44,8 @@
 #define FW_IMAGE_NAME Image01
 #define FW_IMAGE_ID   1
 
-#define VER_YEAR      (0x21) /* Year */
-#define VER_MONTH     (0x11) /* Month */
+#define VER_YEAR      (0x22) /* Year */
+#define VER_MONTH     (0x02) /* Month */
 #define VER_IN_MONTH  (0x00) /* Number of version within a month */
 #define VER_DEBUG     (0x00) /* Used for private or debug versions, should be zero for official version */
 
diff --git a/simulation/simDevices/h/asicSimulation/SKernel/sEmbeddedCpu/firmware/falcon_pha/Image02/ppa_fw_accelerator_commands.h b/simulation/simDevices/h/asicSimulation/SKernel/sEmbeddedCpu/firmware/falcon_pha/Image02/ppa_fw_accelerator_commands.h
index 1e1c0c125c..3b8e95b202 100644
--- a/simulation/simDevices/h/asicSimulation/SKernel/sEmbeddedCpu/firmware/falcon_pha/Image02/ppa_fw_accelerator_commands.h
+++ b/simulation/simDevices/h/asicSimulation/SKernel/sEmbeddedCpu/firmware/falcon_pha/Image02/ppa_fw_accelerator_commands.h
@@ -450,7 +450,8 @@ void PPA_FW(load_accelerator_commands)();
 #define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_srcTrgPortEntry__srcPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4_VALUE (ACCEL_CMD_SRC_CONST(0)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(16)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(62)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(16)) /* 0x040fbe10 */
 #define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x1_LEN4_TO_PKT_ERSPAN_type_II_header__Ver_VALUE               (ACCEL_CMD_SRC_CONST(1)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(4)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(56)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(1)) /* 0x4403b801 */
 #define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__qos_mapped_up_LEN3_TO_PKT_ERSPAN_type_II_header__COS_VALUE (ACCEL_CMD_SRC_CONST(0)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(4)|ACCEL_CMD_LEN_BIT(3)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(58)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(82)) /* 0x0442ba52 */
-#define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x6_LEN3_TO_PKT_ERSPAN_type_II_header__En_VALUE                (ACCEL_CMD_SRC_CONST(1)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(3)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(3)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(58)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(6)) /* 0x4582ba06 */
+#define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x3_LEN2_TO_PKT_ERSPAN_type_II_header__En_VALUE                (ACCEL_CMD_SRC_CONST(1)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(3)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(2)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(58)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(3)) /* 0x4581ba03 */
+#define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__truncated_LEN1_TO_PKT_ERSPAN_type_II_header__T_VALUE  (ACCEL_CMD_SRC_CONST(0)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(5)|ACCEL_CMD_SRC_BIT(4)|ACCEL_CMD_LEN_BIT(1)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(58)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(64)) /* 0x06c0ba40 */
 #define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__egress_byte_count_LEN14_TO_PKT_IPv4_Header__total_length_PLUS2_VALUE (ACCEL_CMD_SRC_CONST(0)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(2)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(14)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(30)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(80)) /* 0x050d9e50 */
 #define ADD_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x24_LEN16_TO_PKT_IPv4_Header__total_length_VALUE               (ACCEL_CMD_SRC_CONST(1)|ACCEL_CMD_BIT_ADD|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(16)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(30)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(36)) /* 0x540f9e24 */
 #define CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN8_FROM_PKT_IPv4_Header__version_VALUE                         (ACCEL_CMD_CSUM_LOAD|ACCEL_CMD_CSUM_LOAD_IS_OLD(0)|ACCEL_CMD_LEN_BYTE(8)|ACCEL_CMD_SRC_BYTE_TYPE(PKT)|ACCEL_CMD_SRC_BYTE(28)) /* 0x0807009c */
@@ -473,7 +474,8 @@ void PPA_FW(load_accelerator_commands)();
 #define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_srcTrgPortEntry__srcPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4_VALUE (ACCEL_CMD_SRC_CONST(0)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(16)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(74)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(16)) /* 0x040fca10 */
 #define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x1_LEN4_TO_PKT_ERSPAN_type_II_header__Ver_VALUE               (ACCEL_CMD_SRC_CONST(1)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(4)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(68)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(1)) /* 0x4403c401 */
 #define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__qos_mapped_up_LEN3_TO_PKT_ERSPAN_type_II_header__COS_VALUE (ACCEL_CMD_SRC_CONST(0)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(4)|ACCEL_CMD_LEN_BIT(3)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(70)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(82)) /* 0x0442c652 */
-#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x6_LEN3_TO_PKT_ERSPAN_type_II_header__En_VALUE                (ACCEL_CMD_SRC_CONST(1)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(3)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(3)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(70)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(6)) /* 0x4582c606 */
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x3_LEN2_TO_PKT_ERSPAN_type_II_header__En_VALUE                (ACCEL_CMD_SRC_CONST(1)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(3)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(2)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(70)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(3)) /* 0x4581c603 */
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__truncated_LEN1_TO_PKT_ERSPAN_type_II_header__T_VALUE  (ACCEL_CMD_SRC_CONST(0)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(5)|ACCEL_CMD_SRC_BIT(4)|ACCEL_CMD_LEN_BIT(1)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(70)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(64)) /* 0x06c0c640 */
 #define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__egress_byte_count_LEN14_TO_PKT_IPv6_Header__payload_length_PLUS2_VALUE (ACCEL_CMD_SRC_CONST(0)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(2)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(14)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(24)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(80)) /* 0x050d9850 */
 #define ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x10_LEN16_TO_PKT_IPv6_Header__payload_length_VALUE             (ACCEL_CMD_SRC_CONST(1)|ACCEL_CMD_BIT_ADD|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(16)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(24)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(16)) /* 0x540f9810 */
 #define COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_erspan_template__mac_da_47_32_LEN12_TO_PKT_IPv6_Header__version_MINUS14_VALUE (ACCEL_CMD_BYTE_COPY|ACCEL_CMD_LEN_BYTE(12)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(6)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(0)) /* 0x000b8600 */
@@ -889,40 +891,42 @@ void PPA_FW(load_accelerator_commands)();
 #define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_srcTrgPortEntry__srcPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4_OFFSET (0x358)
 #define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x1_LEN4_TO_PKT_ERSPAN_type_II_header__Ver_OFFSET              (0x35c)
 #define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__qos_mapped_up_LEN3_TO_PKT_ERSPAN_type_II_header__COS_OFFSET (0x360)
-#define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x6_LEN3_TO_PKT_ERSPAN_type_II_header__En_OFFSET               (0x364)
-#define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__egress_byte_count_LEN14_TO_PKT_IPv4_Header__total_length_PLUS2_OFFSET (0x368)
-#define ADD_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x24_LEN16_TO_PKT_IPv4_Header__total_length_OFFSET              (0x36c)
-#define CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN8_FROM_PKT_IPv4_Header__version_OFFSET                        (0x370)
-#define CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN2_FROM_PKT_IPv4_Header__ttl_OFFSET                            (0x374)
-#define CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN8_FROM_PKT_IPv4_Header__sip_high_OFFSET                       (0x378)
-#define CSUM_STORE_IP_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_TO_PKT_IPv4_Header__header_checksum_OFFSET                       (0x37c)
-#define COPY_BYTES_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_erspan_template__mac_da_47_32_LEN12_TO_PKT_IPv4_Header__version_MINUS14_OFFSET (0x380)
-#define ADD_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x32_LEN14_TO_DESC_phal2ppa__egress_byte_count_OFFSET           (0x384)
-#define COPY_BYTES_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_erspan_template__mac_da_47_32_LEN16_TO_PKT_IPv4_Header__version_MINUS18_OFFSET (0x388)
+#define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x3_LEN2_TO_PKT_ERSPAN_type_II_header__En_OFFSET               (0x364)
+#define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__truncated_LEN1_TO_PKT_ERSPAN_type_II_header__T_OFFSET (0x368)
+#define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__egress_byte_count_LEN14_TO_PKT_IPv4_Header__total_length_PLUS2_OFFSET (0x36c)
+#define ADD_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x24_LEN16_TO_PKT_IPv4_Header__total_length_OFFSET              (0x370)
+#define CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN8_FROM_PKT_IPv4_Header__version_OFFSET                        (0x374)
+#define CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN2_FROM_PKT_IPv4_Header__ttl_OFFSET                            (0x378)
+#define CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN8_FROM_PKT_IPv4_Header__sip_high_OFFSET                       (0x37c)
+#define CSUM_STORE_IP_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_TO_PKT_IPv4_Header__header_checksum_OFFSET                       (0x380)
+#define COPY_BYTES_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_erspan_template__mac_da_47_32_LEN12_TO_PKT_IPv4_Header__version_MINUS14_OFFSET (0x384)
+#define ADD_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x32_LEN14_TO_DESC_phal2ppa__egress_byte_count_OFFSET           (0x388)
+#define COPY_BYTES_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_erspan_template__mac_da_47_32_LEN16_TO_PKT_IPv4_Header__version_MINUS18_OFFSET (0x38c)
 #define ADD_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x36_LEN14_TO_DESC_phal2ppa__egress_byte_count_OFFSET           (0x1bc)
 
 /*************** THR65_Erspan_TypeII_SameDevMirroring_Ipv6 *******************/
-#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x86_LEN8_TO_PKT_ethertype_header__ethertype_OFFSET            (0x38c)
-#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0xDD_LEN8_TO_PKT_ethertype_header__ethertype_PLUS8_OFFSET      (0x390)
-#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x10_LEN8_TO_PKT_GRE_header__C_OFFSET                          (0x394)
-#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x88_LEN8_TO_PKT_GRE_header__NP_OFFSET                         (0x398)
-#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0xBE_LEN8_TO_PKT_GRE_header__NP_PLUS8_OFFSET                   (0x39c)
-#define COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__lm_counter_LEN4_TO_PKT_GRE_header__Seq_num_OFFSET    (0x3a0)
-#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_srcTrgPortEntry__targetPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4_OFFSET (0x3a4)
-#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_srcTrgPortEntry__srcPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4_OFFSET (0x3a8)
-#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x1_LEN4_TO_PKT_ERSPAN_type_II_header__Ver_OFFSET              (0x3ac)
-#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__qos_mapped_up_LEN3_TO_PKT_ERSPAN_type_II_header__COS_OFFSET (0x3b0)
-#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x6_LEN3_TO_PKT_ERSPAN_type_II_header__En_OFFSET               (0x3b4)
-#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__egress_byte_count_LEN14_TO_PKT_IPv6_Header__payload_length_PLUS2_OFFSET (0x3b8)
-#define ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x10_LEN16_TO_PKT_IPv6_Header__payload_length_OFFSET            (0x3bc)
-#define COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_erspan_template__mac_da_47_32_LEN12_TO_PKT_IPv6_Header__version_MINUS14_OFFSET (0x3c0)
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x86_LEN8_TO_PKT_ethertype_header__ethertype_OFFSET            (0x390)
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0xDD_LEN8_TO_PKT_ethertype_header__ethertype_PLUS8_OFFSET      (0x394)
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x10_LEN8_TO_PKT_GRE_header__C_OFFSET                          (0x398)
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x88_LEN8_TO_PKT_GRE_header__NP_OFFSET                         (0x39c)
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0xBE_LEN8_TO_PKT_GRE_header__NP_PLUS8_OFFSET                   (0x3a0)
+#define COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__lm_counter_LEN4_TO_PKT_GRE_header__Seq_num_OFFSET    (0x3a4)
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_srcTrgPortEntry__targetPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4_OFFSET (0x3a8)
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_srcTrgPortEntry__srcPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4_OFFSET (0x3ac)
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x1_LEN4_TO_PKT_ERSPAN_type_II_header__Ver_OFFSET              (0x3b0)
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__qos_mapped_up_LEN3_TO_PKT_ERSPAN_type_II_header__COS_OFFSET (0x3b4)
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x3_LEN2_TO_PKT_ERSPAN_type_II_header__En_OFFSET               (0x3b8)
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__truncated_LEN1_TO_PKT_ERSPAN_type_II_header__T_OFFSET (0x3bc)
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__egress_byte_count_LEN14_TO_PKT_IPv6_Header__payload_length_PLUS2_OFFSET (0x3c0)
+#define ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x10_LEN16_TO_PKT_IPv6_Header__payload_length_OFFSET            (0x3c4)
+#define COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_erspan_template__mac_da_47_32_LEN12_TO_PKT_IPv6_Header__version_MINUS14_OFFSET (0x3c8)
 #define ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x3A_LEN14_TO_DESC_phal2ppa__egress_byte_count_OFFSET           (0x1c4)
-#define COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_erspan_template__mac_da_47_32_LEN16_TO_PKT_IPv6_Header__version_MINUS18_OFFSET (0x3c4)
+#define COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_erspan_template__mac_da_47_32_LEN16_TO_PKT_IPv6_Header__version_MINUS18_OFFSET (0x3cc)
 #define ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x3E_LEN14_TO_DESC_phal2ppa__egress_byte_count_OFFSET           (0x1a4)
-#define SHIFTRIGHT_12_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_LEN12_FROM_PKT_mac_header__mac_da_47_32_OFFSET             (0x3c8)
+#define SHIFTRIGHT_12_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_LEN12_FROM_PKT_mac_header__mac_da_47_32_OFFSET             (0x3d0)
 
 /*************** Last Entry *******************/
-#define ACCELERATOR_COMMAND_OFFSET_LAST_ENTRY                                                                                    (0x3c8)
+#define ACCELERATOR_COMMAND_OFFSET_LAST_ENTRY                                                                                    (0x3d0)
 
 /**************************************************************************
  * Accelerator command Trigger and load macros
diff --git a/simulation/simDevices/h/asicSimulation/SKernel/sEmbeddedCpu/firmware/falcon_pha/Image02/ppa_fw_image_info.h b/simulation/simDevices/h/asicSimulation/SKernel/sEmbeddedCpu/firmware/falcon_pha/Image02/ppa_fw_image_info.h
index c750bfa663..cee5311f31 100644
--- a/simulation/simDevices/h/asicSimulation/SKernel/sEmbeddedCpu/firmware/falcon_pha/Image02/ppa_fw_image_info.h
+++ b/simulation/simDevices/h/asicSimulation/SKernel/sEmbeddedCpu/firmware/falcon_pha/Image02/ppa_fw_image_info.h
@@ -38,8 +38,8 @@
 #define FW_IMAGE_NAME Image02
 #define FW_IMAGE_ID   2
 
-#define VER_YEAR      (0x21) /* Year */
-#define VER_MONTH     (0x11) /* Month */
+#define VER_YEAR      (0x22) /* Year */
+#define VER_MONTH     (0x02) /* Month */
 #define VER_IN_MONTH  (0x00) /* Number of version within a month */
 #define VER_DEBUG     (0x00) /* Used for private or debug versions, should be zero for official version */
 
diff --git a/simulation/simDevices/h/asicSimulation/SKernel/sEmbeddedCpu/firmware/falcon_pha/Image02Oldest/ppa_fw_accelerator_commands.h b/simulation/simDevices/h/asicSimulation/SKernel/sEmbeddedCpu/firmware/falcon_pha/Image02Oldest/ppa_fw_accelerator_commands.h
index e71442432e..76c7201a2b 100644
--- a/simulation/simDevices/h/asicSimulation/SKernel/sEmbeddedCpu/firmware/falcon_pha/Image02Oldest/ppa_fw_accelerator_commands.h
+++ b/simulation/simDevices/h/asicSimulation/SKernel/sEmbeddedCpu/firmware/falcon_pha/Image02Oldest/ppa_fw_accelerator_commands.h
@@ -440,6 +440,47 @@ void PPA_FW(load_accelerator_commands)();
 #define COPY_BITS_THR58_SFLOW_V5_IPv6_CONST_0x20_LEN8_TO_PKT_sflow_data_format_header__sample_length_PLUS24_VALUE                (ACCEL_CMD_SRC_CONST(1)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(8)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(95)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(32)) /* 0x4407df20 */
 #define COPY_BITS_THR58_SFLOW_V5_IPv6_CONST_0x0_LEN1_TO_PKT_sflow_flow_sample_header__number_of_records_PLUS31_VALUE             (ACCEL_CMD_SRC_CONST(1)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(7)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(1)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(127)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(0)) /* 0x4780ff00 */
 
+/*************** THR64_Erspan_TypeII_SameDevMirroring_Ipv4 *******************/
+#define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x08_LEN8_TO_PKT_ethertype_header__ethertype_VALUE             (ACCEL_CMD_SRC_CONST(1)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(8)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(26)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(8)) /* 0x44079a08 */
+#define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x10_LEN8_TO_PKT_GRE_header__C_VALUE                           (ACCEL_CMD_SRC_CONST(1)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(8)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(48)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(16)) /* 0x4407b010 */
+#define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x88_LEN8_TO_PKT_GRE_header__NP_VALUE                          (ACCEL_CMD_SRC_CONST(1)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(8)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(50)|ACCEL_CMD_SRC_BYTE_TYPE(PKT)|ACCEL_CMD_SRC_BYTE(8)) /* 0x4407b288 */
+#define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0xBE_LEN8_TO_PKT_GRE_header__NP_PLUS8_VALUE                    (ACCEL_CMD_SRC_CONST(1)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(8)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(51)|ACCEL_CMD_SRC_BYTE_TYPE(PKT)|ACCEL_CMD_SRC_BYTE(62)) /* 0x4407b3be */
+#define COPY_BYTES_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__lm_counter_LEN4_TO_PKT_GRE_header__Seq_num_VALUE     (ACCEL_CMD_BYTE_COPY|ACCEL_CMD_LEN_BYTE(4)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(52)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(116)) /* 0x0003b474 */
+#define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_srcTrgPortEntry__targetPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4_VALUE (ACCEL_CMD_SRC_CONST(0)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(16)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(62)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(18)) /* 0x040fbe12 */
+#define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_srcTrgPortEntry__srcPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4_VALUE (ACCEL_CMD_SRC_CONST(0)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(16)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(62)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(16)) /* 0x040fbe10 */
+#define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x1_LEN4_TO_PKT_ERSPAN_type_II_header__Ver_VALUE               (ACCEL_CMD_SRC_CONST(1)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(4)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(56)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(1)) /* 0x4403b801 */
+#define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__qos_mapped_up_LEN3_TO_PKT_ERSPAN_type_II_header__COS_VALUE (ACCEL_CMD_SRC_CONST(0)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(4)|ACCEL_CMD_LEN_BIT(3)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(58)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(82)) /* 0x0442ba52 */
+#define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x6_LEN3_TO_PKT_ERSPAN_type_II_header__En_VALUE                (ACCEL_CMD_SRC_CONST(1)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(3)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(3)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(58)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(6)) /* 0x4582ba06 */
+#define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__egress_byte_count_LEN14_TO_PKT_IPv4_Header__total_length_PLUS2_VALUE (ACCEL_CMD_SRC_CONST(0)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(2)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(14)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(30)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(80)) /* 0x050d9e50 */
+#define ADD_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x24_LEN16_TO_PKT_IPv4_Header__total_length_VALUE               (ACCEL_CMD_SRC_CONST(1)|ACCEL_CMD_BIT_ADD|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(16)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(30)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(36)) /* 0x540f9e24 */
+#define CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN8_FROM_PKT_IPv4_Header__version_VALUE                         (ACCEL_CMD_CSUM_LOAD|ACCEL_CMD_CSUM_LOAD_IS_OLD(0)|ACCEL_CMD_LEN_BYTE(8)|ACCEL_CMD_SRC_BYTE_TYPE(PKT)|ACCEL_CMD_SRC_BYTE(28)) /* 0x0807009c */
+#define CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN2_FROM_PKT_IPv4_Header__ttl_VALUE                             (ACCEL_CMD_CSUM_LOAD|ACCEL_CMD_CSUM_LOAD_IS_OLD(0)|ACCEL_CMD_LEN_BYTE(2)|ACCEL_CMD_SRC_BYTE_TYPE(PKT)|ACCEL_CMD_SRC_BYTE(36)) /* 0x080100a4 */
+#define CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN8_FROM_PKT_IPv4_Header__sip_high_VALUE                        (ACCEL_CMD_CSUM_LOAD|ACCEL_CMD_CSUM_LOAD_IS_OLD(0)|ACCEL_CMD_LEN_BYTE(8)|ACCEL_CMD_SRC_BYTE_TYPE(PKT)|ACCEL_CMD_SRC_BYTE(40)) /* 0x080700a8 */
+#define CSUM_STORE_IP_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_TO_PKT_IPv4_Header__header_checksum_VALUE                        (ACCEL_CMD_CSUM_STORE|ACCEL_CMD_CSUM_STORE_IS_UDP(0)|ACCEL_CMD_LEN_BIT(16)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(38)) /* 0xc00fa600 */
+#define COPY_BYTES_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_erspan_template__mac_da_47_32_LEN12_TO_PKT_IPv4_Header__version_MINUS14_VALUE (ACCEL_CMD_BYTE_COPY|ACCEL_CMD_LEN_BYTE(12)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(14)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(0)) /* 0x000b8e00 */
+#define ADD_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x32_LEN14_TO_DESC_phal2ppa__egress_byte_count_VALUE            (ACCEL_CMD_SRC_CONST(1)|ACCEL_CMD_BIT_ADD|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(14)|ACCEL_CMD_DST_BYTE_TYPE(NO_PKT)|ACCEL_CMD_DST_BYTE(80)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(50)) /* 0x540d5032 */
+#define COPY_BYTES_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_erspan_template__mac_da_47_32_LEN16_TO_PKT_IPv4_Header__version_MINUS18_VALUE (ACCEL_CMD_BYTE_COPY|ACCEL_CMD_LEN_BYTE(16)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(10)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(0)) /* 0x000f8a00 */
+#define ADD_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x36_LEN14_TO_DESC_phal2ppa__egress_byte_count_VALUE            (ACCEL_CMD_SRC_CONST(1)|ACCEL_CMD_BIT_ADD|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(14)|ACCEL_CMD_DST_BYTE_TYPE(NO_PKT)|ACCEL_CMD_DST_BYTE(80)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(54)) /* 0x540d5036 */
+
+/*************** THR65_Erspan_TypeII_SameDevMirroring_Ipv6 *******************/
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x86_LEN8_TO_PKT_ethertype_header__ethertype_VALUE             (ACCEL_CMD_SRC_CONST(1)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(8)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(18)|ACCEL_CMD_SRC_BYTE_TYPE(PKT)|ACCEL_CMD_SRC_BYTE(6)) /* 0x44079286 */
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0xDD_LEN8_TO_PKT_ethertype_header__ethertype_PLUS8_VALUE       (ACCEL_CMD_SRC_CONST(1)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(8)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(19)|ACCEL_CMD_SRC_BYTE_TYPE(PKT)|ACCEL_CMD_SRC_BYTE(93)) /* 0x440793dd */
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x10_LEN8_TO_PKT_GRE_header__C_VALUE                           (ACCEL_CMD_SRC_CONST(1)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(8)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(60)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(16)) /* 0x4407bc10 */
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x88_LEN8_TO_PKT_GRE_header__NP_VALUE                          (ACCEL_CMD_SRC_CONST(1)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(8)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(62)|ACCEL_CMD_SRC_BYTE_TYPE(PKT)|ACCEL_CMD_SRC_BYTE(8)) /* 0x4407be88 */
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0xBE_LEN8_TO_PKT_GRE_header__NP_PLUS8_VALUE                    (ACCEL_CMD_SRC_CONST(1)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(8)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(63)|ACCEL_CMD_SRC_BYTE_TYPE(PKT)|ACCEL_CMD_SRC_BYTE(62)) /* 0x4407bfbe */
+#define COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__lm_counter_LEN4_TO_PKT_GRE_header__Seq_num_VALUE     (ACCEL_CMD_BYTE_COPY|ACCEL_CMD_LEN_BYTE(4)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(64)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(116)) /* 0x0003c074 */
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_srcTrgPortEntry__targetPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4_VALUE (ACCEL_CMD_SRC_CONST(0)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(16)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(74)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(18)) /* 0x040fca12 */
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_srcTrgPortEntry__srcPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4_VALUE (ACCEL_CMD_SRC_CONST(0)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(16)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(74)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(16)) /* 0x040fca10 */
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x1_LEN4_TO_PKT_ERSPAN_type_II_header__Ver_VALUE               (ACCEL_CMD_SRC_CONST(1)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(4)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(68)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(1)) /* 0x4403c401 */
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__qos_mapped_up_LEN3_TO_PKT_ERSPAN_type_II_header__COS_VALUE (ACCEL_CMD_SRC_CONST(0)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(4)|ACCEL_CMD_LEN_BIT(3)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(70)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(82)) /* 0x0442c652 */
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x6_LEN3_TO_PKT_ERSPAN_type_II_header__En_VALUE                (ACCEL_CMD_SRC_CONST(1)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(3)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(3)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(70)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(6)) /* 0x4582c606 */
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__egress_byte_count_LEN14_TO_PKT_IPv6_Header__payload_length_PLUS2_VALUE (ACCEL_CMD_SRC_CONST(0)|ACCEL_CMD_BIT_COPY|ACCEL_CMD_DST_BIT(2)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(14)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(24)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(80)) /* 0x050d9850 */
+#define ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x10_LEN16_TO_PKT_IPv6_Header__payload_length_VALUE             (ACCEL_CMD_SRC_CONST(1)|ACCEL_CMD_BIT_ADD|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(16)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(24)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(16)) /* 0x540f9810 */
+#define COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_erspan_template__mac_da_47_32_LEN12_TO_PKT_IPv6_Header__version_MINUS14_VALUE (ACCEL_CMD_BYTE_COPY|ACCEL_CMD_LEN_BYTE(12)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(6)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(0)) /* 0x000b8600 */
+#define ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x3A_LEN14_TO_DESC_phal2ppa__egress_byte_count_VALUE            (ACCEL_CMD_SRC_CONST(1)|ACCEL_CMD_BIT_ADD|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(14)|ACCEL_CMD_DST_BYTE_TYPE(NO_PKT)|ACCEL_CMD_DST_BYTE(80)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(58)) /* 0x540d503a */
+#define COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_erspan_template__mac_da_47_32_LEN16_TO_PKT_IPv6_Header__version_MINUS18_VALUE (ACCEL_CMD_BYTE_COPY|ACCEL_CMD_LEN_BYTE(16)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(2)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(0)) /* 0x000f8200 */
+#define ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x3E_LEN14_TO_DESC_phal2ppa__egress_byte_count_VALUE            (ACCEL_CMD_SRC_CONST(1)|ACCEL_CMD_BIT_ADD|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(14)|ACCEL_CMD_DST_BYTE_TYPE(NO_PKT)|ACCEL_CMD_DST_BYTE(80)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(62)) /* 0x540d503e */
+
 /**************************************************************************
  * Accelerator commands offsets
  **************************************************************************/
@@ -837,8 +878,49 @@ void PPA_FW(load_accelerator_commands)();
 #define COPY_BITS_THR58_SFLOW_V5_IPv6_CONST_0x20_LEN8_TO_PKT_sflow_data_format_header__sample_length_PLUS24_OFFSET               (0x338)
 #define COPY_BITS_THR58_SFLOW_V5_IPv6_CONST_0x0_LEN1_TO_PKT_sflow_flow_sample_header__number_of_records_PLUS31_OFFSET            (0x33c)
 
+/*************** THR64_Erspan_TypeII_SameDevMirroring_Ipv4 *******************/
+#define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x08_LEN8_TO_PKT_ethertype_header__ethertype_OFFSET            (0x340)
+#define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x10_LEN8_TO_PKT_GRE_header__C_OFFSET                          (0x344)
+#define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x88_LEN8_TO_PKT_GRE_header__NP_OFFSET                         (0x348)
+#define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0xBE_LEN8_TO_PKT_GRE_header__NP_PLUS8_OFFSET                   (0x34c)
+#define COPY_BYTES_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__lm_counter_LEN4_TO_PKT_GRE_header__Seq_num_OFFSET    (0x350)
+#define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_srcTrgPortEntry__targetPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4_OFFSET (0x354)
+#define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_srcTrgPortEntry__srcPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4_OFFSET (0x358)
+#define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x1_LEN4_TO_PKT_ERSPAN_type_II_header__Ver_OFFSET              (0x35c)
+#define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__qos_mapped_up_LEN3_TO_PKT_ERSPAN_type_II_header__COS_OFFSET (0x360)
+#define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x6_LEN3_TO_PKT_ERSPAN_type_II_header__En_OFFSET               (0x364)
+#define COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__egress_byte_count_LEN14_TO_PKT_IPv4_Header__total_length_PLUS2_OFFSET (0x368)
+#define ADD_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x24_LEN16_TO_PKT_IPv4_Header__total_length_OFFSET              (0x36c)
+#define CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN8_FROM_PKT_IPv4_Header__version_OFFSET                        (0x370)
+#define CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN2_FROM_PKT_IPv4_Header__ttl_OFFSET                            (0x374)
+#define CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN8_FROM_PKT_IPv4_Header__sip_high_OFFSET                       (0x378)
+#define CSUM_STORE_IP_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_TO_PKT_IPv4_Header__header_checksum_OFFSET                       (0x37c)
+#define COPY_BYTES_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_erspan_template__mac_da_47_32_LEN12_TO_PKT_IPv4_Header__version_MINUS14_OFFSET (0x380)
+#define ADD_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x32_LEN14_TO_DESC_phal2ppa__egress_byte_count_OFFSET           (0x384)
+#define COPY_BYTES_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_erspan_template__mac_da_47_32_LEN16_TO_PKT_IPv4_Header__version_MINUS18_OFFSET (0x388)
+#define ADD_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x36_LEN14_TO_DESC_phal2ppa__egress_byte_count_OFFSET           (0x1bc)
+
+/*************** THR65_Erspan_TypeII_SameDevMirroring_Ipv6 *******************/
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x86_LEN8_TO_PKT_ethertype_header__ethertype_OFFSET            (0x38c)
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0xDD_LEN8_TO_PKT_ethertype_header__ethertype_PLUS8_OFFSET      (0x390)
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x10_LEN8_TO_PKT_GRE_header__C_OFFSET                          (0x394)
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x88_LEN8_TO_PKT_GRE_header__NP_OFFSET                         (0x398)
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0xBE_LEN8_TO_PKT_GRE_header__NP_PLUS8_OFFSET                   (0x39c)
+#define COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__lm_counter_LEN4_TO_PKT_GRE_header__Seq_num_OFFSET    (0x3a0)
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_srcTrgPortEntry__targetPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4_OFFSET (0x3a4)
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_srcTrgPortEntry__srcPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4_OFFSET (0x3a8)
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x1_LEN4_TO_PKT_ERSPAN_type_II_header__Ver_OFFSET              (0x3ac)
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__qos_mapped_up_LEN3_TO_PKT_ERSPAN_type_II_header__COS_OFFSET (0x3b0)
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x6_LEN3_TO_PKT_ERSPAN_type_II_header__En_OFFSET               (0x3b4)
+#define COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__egress_byte_count_LEN14_TO_PKT_IPv6_Header__payload_length_PLUS2_OFFSET (0x3b8)
+#define ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x10_LEN16_TO_PKT_IPv6_Header__payload_length_OFFSET            (0x3bc)
+#define COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_erspan_template__mac_da_47_32_LEN12_TO_PKT_IPv6_Header__version_MINUS14_OFFSET (0x3c0)
+#define ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x3A_LEN14_TO_DESC_phal2ppa__egress_byte_count_OFFSET           (0x1c4)
+#define COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_erspan_template__mac_da_47_32_LEN16_TO_PKT_IPv6_Header__version_MINUS18_OFFSET (0x3c4)
+#define ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x3E_LEN14_TO_DESC_phal2ppa__egress_byte_count_OFFSET           (0x1a4)
+
 /*************** Last Entry *******************/
-#define ACCELERATOR_COMMAND_OFFSET_LAST_ENTRY                                                                                    (0x33c)
+#define ACCELERATOR_COMMAND_OFFSET_LAST_ENTRY                                                                                    (0x3c4)
 
 /**************************************************************************
  * Accelerator command Trigger and load macros
diff --git a/simulation/simDevices/h/asicSimulation/SKernel/sEmbeddedCpu/firmware/falcon_pha/Image02Oldest/ppa_fw_image_info.h b/simulation/simDevices/h/asicSimulation/SKernel/sEmbeddedCpu/firmware/falcon_pha/Image02Oldest/ppa_fw_image_info.h
index 97c5743917..ee21289d98 100644
--- a/simulation/simDevices/h/asicSimulation/SKernel/sEmbeddedCpu/firmware/falcon_pha/Image02Oldest/ppa_fw_image_info.h
+++ b/simulation/simDevices/h/asicSimulation/SKernel/sEmbeddedCpu/firmware/falcon_pha/Image02Oldest/ppa_fw_image_info.h
@@ -31,6 +31,8 @@
 #define ENABLE_THR57_SFLOW_V5_IPv4
 #define ENABLE_THR58_SFLOW_V5_IPv6
 #define ENABLE_THR60_DropAllTraffic
+#define ENABLE_THR64_Erspan_TypeII_SameDevMirroring_Ipv4
+#define ENABLE_THR65_Erspan_TypeII_SameDevMirroring_Ipv6
 
 #define TARGET_DEVICE Falcon
 #define FW_IMAGE_NAME Image02Oldest
@@ -38,7 +40,7 @@
 
 #define VER_YEAR      (0x21) /* Year */
 #define VER_MONTH     (0x10) /* Month */
-#define VER_IN_MONTH  (0x00) /* Number of version within a month */
+#define VER_IN_MONTH  (0x01) /* Number of version within a month */
 #define VER_DEBUG     (0x00) /* Used for private or debug versions, should be zero for official version */
 
-#endif /* __ppa_fw_image_info_h */
+#endif /* __ppa_fw_image_info_h */ 
diff --git a/simulation/simDevices/h/asicSimulation/SKernel/sEmbeddedCpu/firmware/falcon_pha/Image02Previous/ppa_fw_accelerator_commands.h b/simulation/simDevices/h/asicSimulation/SKernel/sEmbeddedCpu/firmware/falcon_pha/Image02Previous/ppa_fw_accelerator_commands.h
index 76c7201a2b..1e1c0c125c 100644
--- a/simulation/simDevices/h/asicSimulation/SKernel/sEmbeddedCpu/firmware/falcon_pha/Image02Previous/ppa_fw_accelerator_commands.h
+++ b/simulation/simDevices/h/asicSimulation/SKernel/sEmbeddedCpu/firmware/falcon_pha/Image02Previous/ppa_fw_accelerator_commands.h
@@ -480,6 +480,7 @@ void PPA_FW(load_accelerator_commands)();
 #define ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x3A_LEN14_TO_DESC_phal2ppa__egress_byte_count_VALUE            (ACCEL_CMD_SRC_CONST(1)|ACCEL_CMD_BIT_ADD|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(14)|ACCEL_CMD_DST_BYTE_TYPE(NO_PKT)|ACCEL_CMD_DST_BYTE(80)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(58)) /* 0x540d503a */
 #define COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_erspan_template__mac_da_47_32_LEN16_TO_PKT_IPv6_Header__version_MINUS18_VALUE (ACCEL_CMD_BYTE_COPY|ACCEL_CMD_LEN_BYTE(16)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(2)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(0)) /* 0x000f8200 */
 #define ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x3E_LEN14_TO_DESC_phal2ppa__egress_byte_count_VALUE            (ACCEL_CMD_SRC_CONST(1)|ACCEL_CMD_BIT_ADD|ACCEL_CMD_DST_BIT(0)|ACCEL_CMD_SRC_BIT(0)|ACCEL_CMD_LEN_BIT(14)|ACCEL_CMD_DST_BYTE_TYPE(NO_PKT)|ACCEL_CMD_DST_BYTE(80)|ACCEL_CMD_SRC_BYTE_TYPE(NO_PKT)|ACCEL_CMD_SRC_BYTE(62)) /* 0x540d503e */
+#define SHIFTRIGHT_12_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_LEN12_FROM_PKT_mac_header__mac_da_47_32_VALUE              (ACCEL_CMD_BYTE_COPY|ACCEL_CMD_LEN_BYTE(12)|ACCEL_CMD_DST_BYTE_TYPE(PKT)|ACCEL_CMD_DST_BYTE(76)|ACCEL_CMD_SRC_BYTE_TYPE(PKT)|ACCEL_CMD_SRC_BYTE(64)) /* 0x000bccc0 */
 
 /**************************************************************************
  * Accelerator commands offsets
@@ -918,9 +919,10 @@ void PPA_FW(load_accelerator_commands)();
 #define ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x3A_LEN14_TO_DESC_phal2ppa__egress_byte_count_OFFSET           (0x1c4)
 #define COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_erspan_template__mac_da_47_32_LEN16_TO_PKT_IPv6_Header__version_MINUS18_OFFSET (0x3c4)
 #define ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x3E_LEN14_TO_DESC_phal2ppa__egress_byte_count_OFFSET           (0x1a4)
+#define SHIFTRIGHT_12_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_LEN12_FROM_PKT_mac_header__mac_da_47_32_OFFSET             (0x3c8)
 
 /*************** Last Entry *******************/
-#define ACCELERATOR_COMMAND_OFFSET_LAST_ENTRY                                                                                    (0x3c4)
+#define ACCELERATOR_COMMAND_OFFSET_LAST_ENTRY                                                                                    (0x3c8)
 
 /**************************************************************************
  * Accelerator command Trigger and load macros
diff --git a/simulation/simDevices/h/asicSimulation/SKernel/sEmbeddedCpu/firmware/falcon_pha/Image02Previous/ppa_fw_image_info.h b/simulation/simDevices/h/asicSimulation/SKernel/sEmbeddedCpu/firmware/falcon_pha/Image02Previous/ppa_fw_image_info.h
index ef75dc038f..56d414db43 100644
--- a/simulation/simDevices/h/asicSimulation/SKernel/sEmbeddedCpu/firmware/falcon_pha/Image02Previous/ppa_fw_image_info.h
+++ b/simulation/simDevices/h/asicSimulation/SKernel/sEmbeddedCpu/firmware/falcon_pha/Image02Previous/ppa_fw_image_info.h
@@ -39,8 +39,8 @@
 #define FW_IMAGE_ID   2
 
 #define VER_YEAR      (0x21) /* Year */
-#define VER_MONTH     (0x10) /* Month */
-#define VER_IN_MONTH  (0x01) /* Number of version within a month */
+#define VER_MONTH     (0x11) /* Month */
+#define VER_IN_MONTH  (0x00) /* Number of version within a month */
 #define VER_DEBUG     (0x00) /* Used for private or debug versions, should be zero for official version */
 
 #endif /* __ppa_fw_image_info_h */ 
diff --git a/simulation/simDevices/h/asicSimulation/SKernel/sEmbeddedCpu/firmware/falcon_pha/ppa_fw_defs.h b/simulation/simDevices/h/asicSimulation/SKernel/sEmbeddedCpu/firmware/falcon_pha/ppa_fw_defs.h
index c6a4b23045..4db3bcd58c 100644
--- a/simulation/simDevices/h/asicSimulation/SKernel/sEmbeddedCpu/firmware/falcon_pha/ppa_fw_defs.h
+++ b/simulation/simDevices/h/asicSimulation/SKernel/sEmbeddedCpu/firmware/falcon_pha/ppa_fw_defs.h
@@ -177,20 +177,27 @@ void falcon_stack_overflow_checker();
 #define DRAM_SFLOW_SOURCE_PORT_SAMPLE_SEQ_NUM_TABLE_ADDR  (DRAM_CC_ERSPAN_GLOBAL_ADDR + 4) /* 0x000101C4 */
 #define DRAM_SFLOW_SOURCE_PORT_SAMPLE_SEQ_NUM_TABLE_SIZE  (128*4) /*128 entries * 4 bytes*/                         
 
-/* Table of 128 entries 2B each. Entry per source port.
+/* Table of 128 entries 4B each. Entry per source port.
    Contains the sFlow packet drops number for the associated source port.
    The drops number is incremented by the PHA firmware for every sFlow packet Hard/Soft drop from this source port.
 */
 #define DRAM_SFLOW_SOURCE_PORT_DROPS_TABLE_ADDR  (DRAM_SFLOW_SOURCE_PORT_SAMPLE_SEQ_NUM_TABLE_ADDR + DRAM_SFLOW_SOURCE_PORT_SAMPLE_SEQ_NUM_TABLE_SIZE) /* 0x000103C4 */
-#define DRAM_SFLOW_SOURCE_PORT_DROPS_TABLE_SIZE  (128*2) /*128 entries * 2 bytes*/
+#define DRAM_SFLOW_SOURCE_PORT_DROPS_TABLE_SIZE  (128*4) /*128 entries * 4 bytes*/
+
+/* Table of 16 entries 4B each. Entry per target collector.
+   Contains the sFlow datagram header sequence number for the associated target collector.
+   The sequence number is incremented by the PHA firmware for every sFlow packet sent for this target collector.
+*/
+#define DRAM_SFLOW_DATAGRAM_HEADER_SEQ_NUM_TABLE_ADDR  (DRAM_SFLOW_SOURCE_PORT_DROPS_TABLE_ADDR + DRAM_SFLOW_SOURCE_PORT_DROPS_TABLE_SIZE) /* 0x000105C4 */
+#define DRAM_SFLOW_DATAGRAM_HEADER_SEQ_NUM_TABLE_SIZE  (16*4) /*16 entries * 4 bytes*/
 
 /* Table of 6 entries 4B each. Entry per target analyzer ID.
    Contains sequence number counters for sFlow packets.
    The counter is incremented by PHA firmware for every sFlow packet goes through certain sFlow threads.
 */
-#define DRAM_ENHANCED_SFLOW_SEQ_NUM_TABLE_ADDR  (DRAM_SFLOW_SOURCE_PORT_DROPS_TABLE_ADDR + DRAM_SFLOW_SOURCE_PORT_DROPS_TABLE_SIZE) /* 0x000104C4 */
+#define DRAM_ENHANCED_SFLOW_SEQ_NUM_TABLE_ADDR  (DRAM_SFLOW_DATAGRAM_HEADER_SEQ_NUM_TABLE_ADDR + DRAM_SFLOW_DATAGRAM_HEADER_SEQ_NUM_TABLE_SIZE) /* 0x00010604 */
 #define DRAM_ENHANCED_SFLOW_SEQ_NUM_TABLE_SIZE  (6*4) /*6 entries * 4 bytes*/
-        
+
 
 /**************************************************************************
  * Packet Register File: Base addresses
diff --git a/simulation/simDevices/src/asicSimulation/SKernel/sEmbeddedCpu/firmware/ac5p_pha/Default/ppa_fw_accelerator_commands_Ac5pDefault.c b/simulation/simDevices/src/asicSimulation/SKernel/sEmbeddedCpu/firmware/ac5p_pha/Default/ppa_fw_accelerator_commands_Ac5pDefault.c
index 2c8c4d2e62..b487ec0acf 100644
--- a/simulation/simDevices/src/asicSimulation/SKernel/sEmbeddedCpu/firmware/ac5p_pha/Default/ppa_fw_accelerator_commands_Ac5pDefault.c
+++ b/simulation/simDevices/src/asicSimulation/SKernel/sEmbeddedCpu/firmware/ac5p_pha/Default/ppa_fw_accelerator_commands_Ac5pDefault.c
@@ -270,6 +270,46 @@ void PPA_FW(load_accelerator_commands)() {
     ACCEL_CMD_LOAD(CSUM_LOAD_NEW_THR59_SLS_Test_LEN2_FROM_PKT_IPv4_Header__version_PLUS8_OFFSET,                                            CSUM_LOAD_NEW_THR59_SLS_Test_LEN2_FROM_PKT_IPv4_Header__version_PLUS8_VALUE);
     ACCEL_CMD_LOAD(CSUM_LOAD_NEW_THR59_SLS_Test_LEN8_FROM_PKT_IPv4_Header__version_PLUS12_OFFSET,                                           CSUM_LOAD_NEW_THR59_SLS_Test_LEN8_FROM_PKT_IPv4_Header__version_PLUS12_VALUE);
     ACCEL_CMD_LOAD(CSUM_STORE_IP_THR59_SLS_Test_TO_PKT_IPv4_Header__header_checksum_OFFSET,                                                 CSUM_STORE_IP_THR59_SLS_Test_TO_PKT_IPv4_Header__header_checksum_VALUE);
+    ACCEL_CMD_LOAD(COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x08_LEN8_TO_PKT_ethertype_header__ethertype_OFFSET,           COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x08_LEN8_TO_PKT_ethertype_header__ethertype_VALUE);
+    ACCEL_CMD_LOAD(COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x10_LEN8_TO_PKT_GRE_header__C_OFFSET,                         COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x10_LEN8_TO_PKT_GRE_header__C_VALUE);
+    ACCEL_CMD_LOAD(COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x88_LEN8_TO_PKT_GRE_header__NP_OFFSET,                        COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x88_LEN8_TO_PKT_GRE_header__NP_VALUE);
+    ACCEL_CMD_LOAD(COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0xBE_LEN8_TO_PKT_GRE_header__NP_PLUS8_OFFSET,                  COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0xBE_LEN8_TO_PKT_GRE_header__NP_PLUS8_VALUE);
+    ACCEL_CMD_LOAD(COPY_BYTES_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__lm_counter_LEN4_TO_PKT_GRE_header__Seq_num_OFFSET,   COPY_BYTES_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__lm_counter_LEN4_TO_PKT_GRE_header__Seq_num_VALUE);
+    ACCEL_CMD_LOAD(COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_srcTrgPortEntry__targetPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4_OFFSET, COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_srcTrgPortEntry__targetPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4_VALUE);
+    ACCEL_CMD_LOAD(COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_srcTrgPortEntry__srcPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4_OFFSET, COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_srcTrgPortEntry__srcPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4_VALUE);
+    ACCEL_CMD_LOAD(COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x1_LEN4_TO_PKT_ERSPAN_type_II_header__Ver_OFFSET,             COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x1_LEN4_TO_PKT_ERSPAN_type_II_header__Ver_VALUE);
+    ACCEL_CMD_LOAD(COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__qos_mapped_up_LEN3_TO_PKT_ERSPAN_type_II_header__COS_OFFSET, COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__qos_mapped_up_LEN3_TO_PKT_ERSPAN_type_II_header__COS_VALUE);
+    ACCEL_CMD_LOAD(COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x3_LEN2_TO_PKT_ERSPAN_type_II_header__En_OFFSET,              COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x3_LEN2_TO_PKT_ERSPAN_type_II_header__En_VALUE);
+    ACCEL_CMD_LOAD(COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__truncated_LEN1_TO_PKT_ERSPAN_type_II_header__T_OFFSET, COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__truncated_LEN1_TO_PKT_ERSPAN_type_II_header__T_VALUE);
+    ACCEL_CMD_LOAD(COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__egress_byte_count_LEN14_TO_PKT_IPv4_Header__total_length_PLUS2_OFFSET, COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__egress_byte_count_LEN14_TO_PKT_IPv4_Header__total_length_PLUS2_VALUE);
+    ACCEL_CMD_LOAD(ADD_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x24_LEN16_TO_PKT_IPv4_Header__total_length_OFFSET,             ADD_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x24_LEN16_TO_PKT_IPv4_Header__total_length_VALUE);
+    ACCEL_CMD_LOAD(CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN8_FROM_PKT_IPv4_Header__version_OFFSET,                       CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN8_FROM_PKT_IPv4_Header__version_VALUE);
+    ACCEL_CMD_LOAD(CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN2_FROM_PKT_IPv4_Header__ttl_OFFSET,                           CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN2_FROM_PKT_IPv4_Header__ttl_VALUE);
+    ACCEL_CMD_LOAD(CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN8_FROM_PKT_IPv4_Header__sip_high_OFFSET,                      CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN8_FROM_PKT_IPv4_Header__sip_high_VALUE);
+    ACCEL_CMD_LOAD(CSUM_STORE_IP_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_TO_PKT_IPv4_Header__header_checksum_OFFSET,                      CSUM_STORE_IP_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_TO_PKT_IPv4_Header__header_checksum_VALUE);
+    ACCEL_CMD_LOAD(COPY_BYTES_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_erspan_template__mac_da_47_32_LEN12_TO_PKT_IPv4_Header__version_MINUS14_OFFSET, COPY_BYTES_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_erspan_template__mac_da_47_32_LEN12_TO_PKT_IPv4_Header__version_MINUS14_VALUE);
+    ACCEL_CMD_LOAD(ADD_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x32_LEN14_TO_DESC_phal2ppa__egress_byte_count_OFFSET,          ADD_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x32_LEN14_TO_DESC_phal2ppa__egress_byte_count_VALUE);
+    ACCEL_CMD_LOAD(COPY_BYTES_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_erspan_template__mac_da_47_32_LEN16_TO_PKT_IPv4_Header__version_MINUS18_OFFSET, COPY_BYTES_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_erspan_template__mac_da_47_32_LEN16_TO_PKT_IPv4_Header__version_MINUS18_VALUE);
+    ACCEL_CMD_LOAD(ADD_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x36_LEN14_TO_DESC_phal2ppa__egress_byte_count_OFFSET,          ADD_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x36_LEN14_TO_DESC_phal2ppa__egress_byte_count_VALUE);
+    ACCEL_CMD_LOAD(COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x86_LEN8_TO_PKT_ethertype_header__ethertype_OFFSET,           COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x86_LEN8_TO_PKT_ethertype_header__ethertype_VALUE);
+    ACCEL_CMD_LOAD(COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0xDD_LEN8_TO_PKT_ethertype_header__ethertype_PLUS8_OFFSET,     COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0xDD_LEN8_TO_PKT_ethertype_header__ethertype_PLUS8_VALUE);
+    ACCEL_CMD_LOAD(COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x10_LEN8_TO_PKT_GRE_header__C_OFFSET,                         COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x10_LEN8_TO_PKT_GRE_header__C_VALUE);
+    ACCEL_CMD_LOAD(COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x88_LEN8_TO_PKT_GRE_header__NP_OFFSET,                        COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x88_LEN8_TO_PKT_GRE_header__NP_VALUE);
+    ACCEL_CMD_LOAD(COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0xBE_LEN8_TO_PKT_GRE_header__NP_PLUS8_OFFSET,                  COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0xBE_LEN8_TO_PKT_GRE_header__NP_PLUS8_VALUE);
+    ACCEL_CMD_LOAD(COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__lm_counter_LEN4_TO_PKT_GRE_header__Seq_num_OFFSET,   COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__lm_counter_LEN4_TO_PKT_GRE_header__Seq_num_VALUE);
+    ACCEL_CMD_LOAD(COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_srcTrgPortEntry__targetPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4_OFFSET, COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_srcTrgPortEntry__targetPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4_VALUE);
+    ACCEL_CMD_LOAD(COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_srcTrgPortEntry__srcPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4_OFFSET, COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_srcTrgPortEntry__srcPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4_VALUE);
+    ACCEL_CMD_LOAD(COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x1_LEN4_TO_PKT_ERSPAN_type_II_header__Ver_OFFSET,             COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x1_LEN4_TO_PKT_ERSPAN_type_II_header__Ver_VALUE);
+    ACCEL_CMD_LOAD(COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__qos_mapped_up_LEN3_TO_PKT_ERSPAN_type_II_header__COS_OFFSET, COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__qos_mapped_up_LEN3_TO_PKT_ERSPAN_type_II_header__COS_VALUE);
+    ACCEL_CMD_LOAD(COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x3_LEN2_TO_PKT_ERSPAN_type_II_header__En_OFFSET,              COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x3_LEN2_TO_PKT_ERSPAN_type_II_header__En_VALUE);
+    ACCEL_CMD_LOAD(COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__truncated_LEN1_TO_PKT_ERSPAN_type_II_header__T_OFFSET, COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__truncated_LEN1_TO_PKT_ERSPAN_type_II_header__T_VALUE);
+    ACCEL_CMD_LOAD(COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__egress_byte_count_LEN14_TO_PKT_IPv6_Header__payload_length_PLUS2_OFFSET, COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__egress_byte_count_LEN14_TO_PKT_IPv6_Header__payload_length_PLUS2_VALUE);
+    ACCEL_CMD_LOAD(ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x10_LEN16_TO_PKT_IPv6_Header__payload_length_OFFSET,           ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x10_LEN16_TO_PKT_IPv6_Header__payload_length_VALUE);
+    ACCEL_CMD_LOAD(COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_erspan_template__mac_da_47_32_LEN12_TO_PKT_IPv6_Header__version_MINUS14_OFFSET, COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_erspan_template__mac_da_47_32_LEN12_TO_PKT_IPv6_Header__version_MINUS14_VALUE);
+    ACCEL_CMD_LOAD(ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x3A_LEN14_TO_DESC_phal2ppa__egress_byte_count_OFFSET,          ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x3A_LEN14_TO_DESC_phal2ppa__egress_byte_count_VALUE);
+    ACCEL_CMD_LOAD(COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_erspan_template__mac_da_47_32_LEN16_TO_PKT_IPv6_Header__version_MINUS18_OFFSET, COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_erspan_template__mac_da_47_32_LEN16_TO_PKT_IPv6_Header__version_MINUS18_VALUE);
+    ACCEL_CMD_LOAD(ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x3E_LEN14_TO_DESC_phal2ppa__egress_byte_count_OFFSET,          ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x3E_LEN14_TO_DESC_phal2ppa__egress_byte_count_VALUE);
+    ACCEL_CMD_LOAD(SHIFTRIGHT_12_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_LEN12_FROM_PKT_mac_header__mac_da_47_32_OFFSET,            SHIFTRIGHT_12_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_LEN12_FROM_PKT_mac_header__mac_da_47_32_VALUE);
 __PRAGMA_FLUSH_MEMORY
 
 }
@@ -542,6 +582,50 @@ ACCEL_INFO_STC accelInfoArrAc5pDefault[] =
     ,{ AC5P_ENUM_NAME_AND_VALUE( CSUM_LOAD_NEW_THR59_SLS_Test_LEN2_FROM_PKT_IPv4_Header__version_PLUS8_OFFSET),                                           59}
     ,{ AC5P_ENUM_NAME_AND_VALUE( CSUM_LOAD_NEW_THR59_SLS_Test_LEN8_FROM_PKT_IPv4_Header__version_PLUS12_OFFSET),                                          59}
     ,{ AC5P_ENUM_NAME_AND_VALUE( CSUM_STORE_IP_THR59_SLS_Test_TO_PKT_IPv4_Header__header_checksum_OFFSET),                                                59}
+
+/*************** THR64_Erspan_TypeII_SameDevMirroring_Ipv4 *******************/
+    ,{ AC5P_ENUM_NAME_AND_VALUE( COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x08_LEN8_TO_PKT_ethertype_header__ethertype_OFFSET),          64}
+    ,{ AC5P_ENUM_NAME_AND_VALUE( COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x10_LEN8_TO_PKT_GRE_header__C_OFFSET),                        64}
+    ,{ AC5P_ENUM_NAME_AND_VALUE( COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x88_LEN8_TO_PKT_GRE_header__NP_OFFSET),                       64}
+    ,{ AC5P_ENUM_NAME_AND_VALUE( COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0xBE_LEN8_TO_PKT_GRE_header__NP_PLUS8_OFFSET),                 64}
+    ,{ AC5P_ENUM_NAME_AND_VALUE( COPY_BYTES_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__lm_counter_LEN4_TO_PKT_GRE_header__Seq_num_OFFSET),  64}
+    ,{ AC5P_ENUM_NAME_AND_VALUE( COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_srcTrgPortEntry__targetPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4_OFFSET), 64}
+    ,{ AC5P_ENUM_NAME_AND_VALUE( COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_srcTrgPortEntry__srcPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4_OFFSET), 64}
+    ,{ AC5P_ENUM_NAME_AND_VALUE( COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x1_LEN4_TO_PKT_ERSPAN_type_II_header__Ver_OFFSET),            64}
+    ,{ AC5P_ENUM_NAME_AND_VALUE( COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__qos_mapped_up_LEN3_TO_PKT_ERSPAN_type_II_header__COS_OFFSET), 64}
+    ,{ AC5P_ENUM_NAME_AND_VALUE( COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x3_LEN2_TO_PKT_ERSPAN_type_II_header__En_OFFSET),             64}
+    ,{ AC5P_ENUM_NAME_AND_VALUE( COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__truncated_LEN1_TO_PKT_ERSPAN_type_II_header__T_OFFSET), 64}
+    ,{ AC5P_ENUM_NAME_AND_VALUE( COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__egress_byte_count_LEN14_TO_PKT_IPv4_Header__total_length_PLUS2_OFFSET), 64}
+    ,{ AC5P_ENUM_NAME_AND_VALUE( ADD_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x24_LEN16_TO_PKT_IPv4_Header__total_length_OFFSET),            64}
+    ,{ AC5P_ENUM_NAME_AND_VALUE( CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN8_FROM_PKT_IPv4_Header__version_OFFSET),                      64}
+    ,{ AC5P_ENUM_NAME_AND_VALUE( CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN2_FROM_PKT_IPv4_Header__ttl_OFFSET),                          64}
+    ,{ AC5P_ENUM_NAME_AND_VALUE( CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN8_FROM_PKT_IPv4_Header__sip_high_OFFSET),                     64}
+    ,{ AC5P_ENUM_NAME_AND_VALUE( CSUM_STORE_IP_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_TO_PKT_IPv4_Header__header_checksum_OFFSET),                     64}
+    ,{ AC5P_ENUM_NAME_AND_VALUE( COPY_BYTES_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_erspan_template__mac_da_47_32_LEN12_TO_PKT_IPv4_Header__version_MINUS14_OFFSET), 64}
+    ,{ AC5P_ENUM_NAME_AND_VALUE( ADD_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x32_LEN14_TO_DESC_phal2ppa__egress_byte_count_OFFSET),         64}
+    ,{ AC5P_ENUM_NAME_AND_VALUE( COPY_BYTES_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_erspan_template__mac_da_47_32_LEN16_TO_PKT_IPv4_Header__version_MINUS18_OFFSET), 64}
+    ,{ AC5P_ENUM_NAME_AND_VALUE( ADD_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x36_LEN14_TO_DESC_phal2ppa__egress_byte_count_OFFSET),         64}
+
+/*************** THR65_Erspan_TypeII_SameDevMirroring_Ipv6 *******************/
+    ,{ AC5P_ENUM_NAME_AND_VALUE( COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x86_LEN8_TO_PKT_ethertype_header__ethertype_OFFSET),          65}
+    ,{ AC5P_ENUM_NAME_AND_VALUE( COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0xDD_LEN8_TO_PKT_ethertype_header__ethertype_PLUS8_OFFSET),    65}
+    ,{ AC5P_ENUM_NAME_AND_VALUE( COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x10_LEN8_TO_PKT_GRE_header__C_OFFSET),                        65}
+    ,{ AC5P_ENUM_NAME_AND_VALUE( COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x88_LEN8_TO_PKT_GRE_header__NP_OFFSET),                       65}
+    ,{ AC5P_ENUM_NAME_AND_VALUE( COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0xBE_LEN8_TO_PKT_GRE_header__NP_PLUS8_OFFSET),                 65}
+    ,{ AC5P_ENUM_NAME_AND_VALUE( COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__lm_counter_LEN4_TO_PKT_GRE_header__Seq_num_OFFSET),  65}
+    ,{ AC5P_ENUM_NAME_AND_VALUE( COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_srcTrgPortEntry__targetPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4_OFFSET), 65}
+    ,{ AC5P_ENUM_NAME_AND_VALUE( COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_srcTrgPortEntry__srcPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4_OFFSET), 65}
+    ,{ AC5P_ENUM_NAME_AND_VALUE( COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x1_LEN4_TO_PKT_ERSPAN_type_II_header__Ver_OFFSET),            65}
+    ,{ AC5P_ENUM_NAME_AND_VALUE( COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__qos_mapped_up_LEN3_TO_PKT_ERSPAN_type_II_header__COS_OFFSET), 65}
+    ,{ AC5P_ENUM_NAME_AND_VALUE( COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x3_LEN2_TO_PKT_ERSPAN_type_II_header__En_OFFSET),             65}
+    ,{ AC5P_ENUM_NAME_AND_VALUE( COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__truncated_LEN1_TO_PKT_ERSPAN_type_II_header__T_OFFSET), 65}
+    ,{ AC5P_ENUM_NAME_AND_VALUE( COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__egress_byte_count_LEN14_TO_PKT_IPv6_Header__payload_length_PLUS2_OFFSET), 65}
+    ,{ AC5P_ENUM_NAME_AND_VALUE( ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x10_LEN16_TO_PKT_IPv6_Header__payload_length_OFFSET),          65}
+    ,{ AC5P_ENUM_NAME_AND_VALUE( COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_erspan_template__mac_da_47_32_LEN12_TO_PKT_IPv6_Header__version_MINUS14_OFFSET), 65}
+    ,{ AC5P_ENUM_NAME_AND_VALUE( ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x3A_LEN14_TO_DESC_phal2ppa__egress_byte_count_OFFSET),         65}
+    ,{ AC5P_ENUM_NAME_AND_VALUE( COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_erspan_template__mac_da_47_32_LEN16_TO_PKT_IPv6_Header__version_MINUS18_OFFSET), 65}
+    ,{ AC5P_ENUM_NAME_AND_VALUE( ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x3E_LEN14_TO_DESC_phal2ppa__egress_byte_count_OFFSET),         65}
+    ,{ AC5P_ENUM_NAME_AND_VALUE( SHIFTRIGHT_12_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_LEN12_FROM_PKT_mac_header__mac_da_47_32_OFFSET),           65}
 /*************** Last Entry *******************/
     /*must be last*/
     ,{NULL , 0 , 0}
diff --git a/simulation/simDevices/src/asicSimulation/SKernel/sEmbeddedCpu/firmware/ac5p_pha/Default/ppa_fw_threads_Ac5pDefault.c b/simulation/simDevices/src/asicSimulation/SKernel/sEmbeddedCpu/firmware/ac5p_pha/Default/ppa_fw_threads_Ac5pDefault.c
index 8168280b21..18b4f06728 100644
--- a/simulation/simDevices/src/asicSimulation/SKernel/sEmbeddedCpu/firmware/ac5p_pha/Default/ppa_fw_threads_Ac5pDefault.c
+++ b/simulation/simDevices/src/asicSimulation/SKernel/sEmbeddedCpu/firmware/ac5p_pha/Default/ppa_fw_threads_Ac5pDefault.c
@@ -3007,6 +3007,586 @@ void PPA_FW(THR60_DropAllTraffic)() {
 }
 
 
+/*************************************************************************************************************************************//**
+ * funcname     THR64_Erspan_TypeII_SameDevMirroring_Ipv4
+ * inparam      None
+ * return       None
+ * description  ERSPAN over IPv4 tunnel. Encapsulated Remote Switch Port Analyzer (ERSPAN) 
+ *              allows packets to be mirrored to a remote analyzer over a tunnel encapsulation. 
+ *              - ERSPAN Type II is used
+ *              - ERSPAN is sent over an IPv4 GRE tunnel
+ *              - Support handling of Ingress and Egress mirroring   
+ *              - Support handling vlan tagged or untagged
+ * 
+ *              cfg template:    Not in use (16B). It is used by fw to hold L2 parameters copied from shared memory.
+ *              src & trg entries: PHA Target port table holds original packet target physical port for Egress mirroring (2B)  
+ *                                 PHA Source port table holds original packet source physical port for Ingress mirroring (2B)
+ *
+ *              hdr in:  | Extension space (64B) | payload |
+ *              hdr out: | Extension space (14B or 10B) | MAC addresses(12B) | VLAN(4B) or not | ET(2B) | IPv4(20B) | GRE(8B) | ERSPAN Type II(8B) | payload |
+ *              Header Window anchor= Outer Layer 2
+ *              Header Window size= 96 bytes + 64 bytes Header increment space
+ *
+ *              Firmware adds the tunnel and sets the values according to architect's definitions.
+ *              - Add IPv4 and L2 headers which are copied from shared memory 
+ *              - Add GRE & ERSPAN Type II and set them according to Architect's definitions
+ *              - Set IPv4 length and calculate IPv4 cs. 
+ *              - Update Desc<egress_byte_count> +=54(with vlan) or 50(without vlan) 
+ *              - Update Desc<fw_bc_modification> +=54(with vlan) or 50(without vlan)  
+ *****************************************************************************************************************************************/
+__attribute__ ((aligned (16))) 
+void PPA_FW(THR64_Erspan_TypeII_SameDevMirroring_Ipv4)() {
+    /* xt_iss_client_command("profile","enable");             */
+    /* xt_iss_client_command("profile","disable"); _exit(0);  */
+
+    uint32_t    sessionId;                      /* holds Ingress or Egress session ID (10 bits)                   */ 
+    uint32_t    smemAnalyzerTemplateBaseAddr;   /* holds base address of sFlow templates in shared memory         */
+    uint32_t    smemAnalayzerTemplateOfst;      /* holds base address of specific sFlow template in shared memory */
+    uint32_t    descRxSniff;                    /* holds value of Desc<rx_sniff> field                            */
+    uint32_t    vlanVid;                        /* holds value of vlan vid taken from shared memory template      */
+
+
+    /* Get pointer to descriptor */
+    struct ppa_in_desc* thr64_desc_ptr = AC5P_MEM_CAST(AC5P_DESC_REGs_lo,ppa_in_desc);
+
+    /* Get Rx Sniff value from descriptor to tell us if Ingress mirroring or Egress mirroring */
+    __LOG_FW(("Get Rx Sniff value from descriptor to tell us if Ingress mirroring or Egress mirroring"));
+    descRxSniff = thr64_desc_ptr->phal2ppa.rx_sniff;
+    __LOG_PARAM_FW(descRxSniff);
+
+
+    /*-----------------------------------------------------------------------------------------------------------------------------------------------
+      - Calculate offset to the right Analyzer ePort template in shared memory according to shared memory index 
+      ------------------------------------------------------------------------------------------------------------------------------------------------*/
+     __LOG_FW(("Calculate offset to the right Analyzer ePort template in shared memory according to shared memory index"));
+
+    /* Desc.pha_metadata[0:2] contains shared memory index. Applicable values are 0:6. */
+    __LOG_FW(("Desc.pha_metadata[0:2] contains shared memory index. Applicable values are 0:6."));
+    smemAnalayzerTemplateOfst = (thr64_desc_ptr->phal2ppa.pha_metadata0 & 0x7)*64;
+    __LOG_PARAM_FW(thr64_desc_ptr->phal2ppa.pha_metadata0);
+    __LOG_PARAM_FW(smemAnalayzerTemplateOfst);
+
+    /* Get base address of the required Analyzer ePort template in shared memory */
+    __LOG_FW(("Get base address of the required Analyzer ePort template in shared memory"));
+    smemAnalyzerTemplateBaseAddr = DRAM_CC_ERSPAN_ANALYZER_EPORT_1_TEMPLATE_ADDR + smemAnalayzerTemplateOfst;
+    __LOG_PARAM_FW(smemAnalyzerTemplateBaseAddr);
+
+
+    /*-----------------------------------------------------------------------------------------------------------------------------------------------
+      - Get 16B of L2 parameters from shared memory: | mac da sa(12B) | vlan tag(4B) | and placed them in thread's template
+      - To avoid 32 bits alignment issues (packet starts after 10 bytes since Ethertype included), copy it first to CFG template and then to packet
+      ------------------------------------------------------------------------------------------------------------------------------------------------*/
+     __LOG_FW(("Get 16B of L2 parameters from shared memory: | mac da sa(12B) | vlan tag(4B) | and placed them in thread's template"));
+
+    PPA_FW_SP_WRITE( (AC5P_CFG_REGs_lo + 0) , PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr +  IPV4_BASIC_HEADER_SIZE + 4)  );
+    PPA_FW_SP_WRITE( (AC5P_CFG_REGs_lo + 4) , PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr +  IPV4_BASIC_HEADER_SIZE + 8)  );
+    PPA_FW_SP_WRITE( (AC5P_CFG_REGs_lo + 8) , PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr +  IPV4_BASIC_HEADER_SIZE + 12)  );
+    PPA_FW_SP_WRITE( (AC5P_CFG_REGs_lo + 12) , PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr +  IPV4_BASIC_HEADER_SIZE + 16)  );
+    __LOG_PARAM_FW(PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr + IPV4_BASIC_HEADER_SIZE + 4));
+    __LOG_PARAM_FW(PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr + IPV4_BASIC_HEADER_SIZE + 8));
+    __LOG_PARAM_FW(PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr + IPV4_BASIC_HEADER_SIZE + 12));
+    __LOG_PARAM_FW(PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr + IPV4_BASIC_HEADER_SIZE + 16));
+
+
+    /*-----------------------------------------------------------------------------------------------------------------------------------------------
+      - Get 20B of IPv4 header from shared memory and place them in output packet
+      ------------------------------------------------------------------------------------------------------------------------------------------------*/
+     __LOG_FW(("Get 20B of IPv4 header from shared memory and place them in output packet"));
+
+    PPA_FW_SP_WRITE( (AC5P_PKT_REGs_lo + 28) , PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr +  0)  );
+    PPA_FW_SP_WRITE( (AC5P_PKT_REGs_lo + 32) , PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr +  4)  );
+    PPA_FW_SP_WRITE( (AC5P_PKT_REGs_lo + 36) , PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr +  8)  );
+    PPA_FW_SP_WRITE( (AC5P_PKT_REGs_lo + 40) , PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr + 12)  );
+    PPA_FW_SP_WRITE( (AC5P_PKT_REGs_lo + 44) , PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr + 16)  );
+    __LOG_PARAM_FW(PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr + 0));
+    __LOG_PARAM_FW(PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr + 4));
+    __LOG_PARAM_FW(PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr + 8));
+    __LOG_PARAM_FW(PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr + 12));
+    __LOG_PARAM_FW(PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr + 16));
+
+
+    /*-----------------------------------------------------------------------------------------------------------------------------------------------
+      - Get session ID from shared memory. This address contains  | reserved(12b) | Ingress session ID(10b) | Egress session ID(10b) |
+      ------------------------------------------------------------------------------------------------------------------------------------------------*/
+    __LOG_FW(("Get session ID from shared memory. This address contains  | reserved(12b) | Ingress session ID(10b) | Egress session ID(10b) |"));
+
+     sessionId = PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr +  IPV4_BASIC_HEADER_SIZE) ;
+     __LOG_PARAM_FW(sessionId);
+
+     /* Extract 10 bits of Ingress or Egress session ID according to Desc<rx_sniff> field */
+     __LOG_FW(("Extract 10 bits of Ingress or Egress session ID according to Desc<rx_sniff> field"));
+     sessionId = (sessionId >>(10*descRxSniff)) & 0x3FF;
+     __LOG_PARAM_FW(sessionId);
+     __PRAGMA_NO_REORDER
+
+
+    /*-----------------------------------------------------------------------------------------------------------------------------------------------
+     - Get VLAN vid
+     ------------------------------------------------------------------------------------------------------------------------------------------------*/
+
+    /* Get vlan vid from template */
+    __LOG_FW(("Get vlan vid from template"));
+    vlanVid = PPA_FW_SP_READ(AC5P_CFG_REGs_lo + 12) & 0xFFF;
+    __LOG_PARAM_FW(vlanVid);
+
+
+    /*-----------------------------------------------------------------------------------------------------------------------------------------------
+     - Set Ether Type to 0x0800 (IPv4)
+     ------------------------------------------------------------------------------------------------------------------------------------------------*/
+     __LOG_FW(("Set Ether Type to 0x0800 (IPv4)"));
+
+    ACCEL_CMD_TRIG(COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x08_LEN8_TO_PKT_ethertype_header__ethertype_OFFSET, SET_REMAIN_FIELDS_TO_ZERO);
+
+
+    /*-----------------------------------------------------------------------------------------------------------------------------------------------
+     - Set packet GRE header (8B)
+     ------------------------------------------------------------------------------------------------------------------------------------------------*/
+     __LOG_FW(("Set packet GRE header (8B)"));
+
+    /* Set GRE.flags to 0x1000. Clear all other bits in range of 32 bits to zero to get 0x1000 value */
+    __LOG_FW(("Set GRE.flags to 0x1000. Clear all other bits in range of 32 bits to zero to get 0x1000 value"));
+    ACCEL_CMD_TRIG(COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x10_LEN8_TO_PKT_GRE_header__C_OFFSET, SET_REMAIN_FIELDS_TO_ZERO);
+   	__PRAGMA_NO_REORDER
+
+    /* Set GRE.Protocol to 0x88BE */
+    __LOG_FW(("Set GRE.Protocol to 0x88BE"));
+    ACCEL_CMD_TRIG(COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x88_LEN8_TO_PKT_GRE_header__NP_OFFSET, 0);
+    ACCEL_CMD_TRIG(COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0xBE_LEN8_TO_PKT_GRE_header__NP_PLUS8_OFFSET, 0);
+
+    /* Set GRE.Sequence Number to Desc<LM Counter> */
+    __LOG_FW(("Set GRE.Sequence Number to Desc<LM Counter>"));
+	ACCEL_CMD_TRIG(COPY_BYTES_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__lm_counter_LEN4_TO_PKT_GRE_header__Seq_num_OFFSET, 0);
+
+
+    /*-----------------------------------------------------------------------------------------------------------------------------------------------
+     - Set packet ERSPAN header (8B)
+     ------------------------------------------------------------------------------------------------------------------------------------------------*/
+     __LOG_FW(("Set packet ERSPAN header (8B)"));
+
+    /* Set Ingress or Egress ERSPAN header.sessionID (extracted earlier according to Desc<rx_sniff>).
+       Write it as 4B so rest fields (Ver,VLAN,COS,En,T) are cleared to zero */
+    __LOG_FW(("Set Ingress or Egress ERSPAN header.sessionID (extracted earlier according to Desc<rx_sniff>)."
+              "Write it as 4B so rest fields (Ver,VLAN,COS,En,T) are cleared to zero"));
+    PPA_FW_SP_WRITE( (AC5P_PKT_REGs_lo + 56) , sessionId ); 
+
+    /* Set 20  bits of ERSPAN.index with PHA target/Source Physical Port bits [15:0], rest 4 bits are cleared to zero.
+       if descRxSniff = 0 trigger target port accelerator if 1 trigger source port accelerator (next command 4B offset) */
+    __LOG_FW(("Set 20  bits of ERSPAN.index with PHA target/Source Physical Port bits [15:0], rest 4 bits are cleared to zero."
+              "if descRxSniff = 0 trigger target port accelerator if 1 trigger source port accelerator (next command 4B offset)"));
+    ACCEL_CMD_TRIG(COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_srcTrgPortEntry__targetPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4_OFFSET + 4*descRxSniff, SET_REMAIN_FIELDS_TO_ZERO);
+   	__PRAGMA_NO_REORDER
+
+    /* Set ERSPAN.Ver to 1(4b) and ERSPAN.VLAN(12b) to 0 (cleared already when sessionID field was set) */
+    __LOG_FW(("Set ERSPAN.Ver to 1(4b) and ERSPAN.VLAN(12b) to 0 (cleared already when sessionID field was set) "));
+    ACCEL_CMD_TRIG(COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x1_LEN4_TO_PKT_ERSPAN_type_II_header__Ver_OFFSET, 0);
+
+    /* Set ERSPAN.COS to Desc<QoS Mapped UP> */
+    __LOG_FW(("Set ERSPAN.COS to Desc<QoS Mapped UP>"));
+    ACCEL_CMD_TRIG(COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__qos_mapped_up_LEN3_TO_PKT_ERSPAN_type_II_header__COS_OFFSET, 0);
+
+    /* Set ERSPAN.En to 3(2b) */
+    __LOG_FW(("Assign ERSPAN.En to 3(2b)"));
+    ACCEL_CMD_TRIG(COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x3_LEN2_TO_PKT_ERSPAN_type_II_header__En_OFFSET, 0);
+    
+    /* Set ERSPAN.T(1b) to Desc<truncated> */
+    __LOG_FW(("Assign ERSPAN.T(1b) to Desc<truncated>"));
+    ACCEL_CMD_TRIG(COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__truncated_LEN1_TO_PKT_ERSPAN_type_II_header__T_OFFSET, 0);
+
+
+    /*-----------------------------------------------------------------------------------------------------------------------------------------------
+     - Update packet IPv4 length field 
+     - Calculate IPv4 checksum 
+     ------------------------------------------------------------------------------------------------------------------------------------------------*/
+    __LOG_FW(("Update IPv4 length field + calculate IPv4 checksum"));
+
+
+    /* Set IPv4 Header<Total Length>= Desc<Egress Byte Count>+36 */
+    __LOG_FW(("Set IPv4 Header<Total Length>= Desc<Egress Byte Count>+36"));
+
+    /* First copy Desc.Egress Byte Count(14b) to IPv4.Total Length(16b).
+       Assumption 2 MS bits were already cleared by application when setting IPv4<Total length> field in shared memory */
+    __LOG_FW(("First copy Desc.Egress Byte Count(14b) to IPv4.Total Length(16b)"));
+	ACCEL_CMD_TRIG(COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__egress_byte_count_LEN14_TO_PKT_IPv4_Header__total_length_PLUS2_OFFSET, 0);
+    __PRAGMA_NO_REORDER
+
+    /* IPv4 total Length +=36 */
+    __LOG_FW(("IPv4 total Length +=36"));
+    ACCEL_CMD_TRIG(ADD_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x24_LEN16_TO_PKT_IPv4_Header__total_length_OFFSET, 0);
+	__PRAGMA_NO_REORDER
+
+    /* Compute IPv4 CS */
+    __LOG_FW(("Compute IPv4 CS"));
+
+    /* Sum first 8 bytes of IPv4 */
+    __LOG_FW(("Sum new Total Length"));
+    ACCEL_CMD_TRIG(CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN8_FROM_PKT_IPv4_Header__version_OFFSET, 0);
+
+    /* Skip cs field and add to sum 2B of ttl and protocol */
+    __LOG_FW(("Sum new Total Length"));
+    ACCEL_CMD_TRIG(CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN2_FROM_PKT_IPv4_Header__ttl_OFFSET, 0);
+
+    /* Sum the last 8 bytes of IPv4 (src and dest IP addresses fields) */
+    __LOG_FW(("Sum new Total Length"));
+    ACCEL_CMD_TRIG(CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN8_FROM_PKT_IPv4_Header__sip_high_OFFSET, 0);
+	__PRAGMA_NO_REORDER
+
+    /* Store the new IPv4 CS */
+    __LOG_FW(("Store the new IPv4 CS"));
+    ACCEL_CMD_TRIG(CSUM_STORE_IP_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_TO_PKT_IPv4_Header__header_checksum_OFFSET, 0);
+
+
+    /*-----------------------------------------------------------------------------------------------------------------------------------------------
+     - Set L2 header: MAC DA SA + vlan tag or no vlan tag
+     - Update Desc<Egress Byte Count> +=50 or 54(with vlan)                         
+     - Update Desc<fw_bc_modification> +=50 or 54(with vlan)
+     ------------------------------------------------------------------------------------------------------------------------------------------------*/
+    __LOG_FW(("Set L2 header with or without vlan tag, Update Desc<Egress Byte Count> +=50, Update Desc<fw_bc_modification> +=50"));
+
+    /* Check if there is vlan or not. If thread's template<vlanVid>=0 then there is no vlan */
+    __LOG_FW(("Check if there is vlan or not. If thread's template<vlanVid>=0 then there is no vlan"));    
+    if (vlanVid == 0)
+    { /* No vlan */
+
+        /* Indicates HW about the new starting point of the packet header (+50 bytes) */
+        __LOG_FW(("Indicates HW about the new starting point of the packet header (+50 bytes)"));
+        thr64_desc_ptr->ppa_internal_desc.fw_bc_modification = 50;
+
+        /* No vlan, just copy MAC 12 bytes from thread's template */
+        __LOG_FW(("No vlan, just copy MAC 12 bytes from thread's template"));
+        ACCEL_CMD_TRIG(COPY_BYTES_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_erspan_template__mac_da_47_32_LEN12_TO_PKT_IPv4_Header__version_MINUS14_OFFSET, 0);
+
+        /* Desc<Egress Byte Count> +=50 */
+        __LOG_FW(("Desc<Egress Byte Count> +=50"));
+        ACCEL_CMD_TRIG(ADD_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x32_LEN14_TO_DESC_phal2ppa__egress_byte_count_OFFSET, 0);
+    }
+    else
+    {/* With vlan */
+
+        /* Indicates HW about the new starting point of the packet header (+54 bytes) */
+        __LOG_FW(("Indicates HW about the new starting point of the packet header (+54 bytes)"));
+        thr64_desc_ptr->ppa_internal_desc.fw_bc_modification = 54;
+
+        /* With vlan, copy MAC(12B) + vlan tag(4B) from thread's template */
+        __LOG_FW(("With vlan, copy MAC(12B) + vlan tag(4B) from thread's template"));
+        ACCEL_CMD_TRIG(COPY_BYTES_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_erspan_template__mac_da_47_32_LEN16_TO_PKT_IPv4_Header__version_MINUS18_OFFSET, 0);
+ 
+        /* Desc<Egress Byte Count> +=54 */
+        __LOG_FW(("Desc<Egress Byte Count> +=54"));
+        ACCEL_CMD_TRIG(ADD_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x36_LEN14_TO_DESC_phal2ppa__egress_byte_count_OFFSET, 0);
+    }
+
+
+#if (CHECK_STACK)
+    /* Check if stack was overflowed */
+    __LOG_FW(("Check if stack was overflowed"));
+    ac5p_stack_overflow_checker(64);
+#endif
+
+    /* Execute the packet swap sequence to jump to the next Thread */
+    __LOG_FW(("Execute the packet swap sequence to jump to the next Thread"));
+    packet_swap_sequence();
+}
+
+
+/*************************************************************************************************************************************//**
+ * funcname     THR65_Erspan_TypeII_SameDevMirroring_Ipv6
+ * inparam      None
+ * return       None
+ * description  ERSPAN over IPv6 tunnel. Encapsulated Remote Switch Port Analyzer (ERSPAN) 
+ *              allows packets to be mirrored to a remote analyzer over a tunnel encapsulation. 
+ *              - ERSPAN Type II is used
+ *              - ERSPAN is sent over an IPv6 GRE tunnel
+ *              - Support handling of Ingress and Egress mirroring   
+ *              - Support handling vlan tagged or untagged
+ *              NOTE: since in case of IPv6 tunneling need to add 74 bytes and PHA fw can only add maximum 64 bytes 
+ *                    HA adds dummy RSPAN (4B) and dummy E-Tag(8B) to be used as place holder when packet arrives to PHA fw.
+ *                    PHA fw will then overrun this area with GRE(4LSB) & ERSPAN II headers.    
+ * 
+ *              cfg template:    Not in use (16B). It is used by fw to hold L2 parameters copied from shared memory.
+ *              src & trg entries: PHA Target port table holds original packet target physical port for Egress mirroring (2B)  
+ *                                 PHA Source port table holds original packet source physical port for Ingress mirroring (2B)
+ *
+ *              hdr in:  | Extension space (64B) | origin MAC(12B) | dummy RSPAN tag(4B) | dummy E-Tag (8B) | payload |
+ *              hdr out: | Extension space (6B or 2B) | MAC(12B) | VLAN(4B) or not | ET(2B) | IPv6(40B) | GRE(8B) | ERSPAN Type II(8B) | origin MAC(12B) | payload |
+ *              Header Window anchor= Outer Layer 2
+ *              Header Window size= 96 bytes + 64 bytes Header increment space
+ *
+ *              Firmware adds the tunnel and sets the values according to architect's definitions.
+ *              - Copy origin MAC into dummy E-tag & RSPAN  
+ *              - Add IPv6 and L2 headers which are copied from shared memory 
+ *              - Add GRE & ERSPAN Type II and set them according to Architect's definitions
+ *              - Set IPv6 payload length  
+ *              - Update Desc<egress_byte_count> +=62(with vlan) or 58(without vlan) 
+ *              - Update Desc<fw_bc_modification> +=62(with vlan) or 58(without vlan)  
+ *****************************************************************************************************************************************/
+__attribute__ ((aligned (16))) 
+void PPA_FW(THR65_Erspan_TypeII_SameDevMirroring_Ipv6)() {
+    /* xt_iss_client_command("profile","enable");             */
+    /* xt_iss_client_command("profile","disable"); _exit(0);  */
+
+    uint32_t    sessionId;                     /* holds Ingress or Egress session ID (10 bits)                   */
+    uint32_t    smemAnalyzerTemplateBaseAddr;  /* holds base address of sFlow templates in shared memory         */
+    uint32_t    smemAnalayzerTemplateOfst;     /* holds base address of specific sFlow template in shared memory */
+    uint32_t    descRxSniff;                   /* holds value of Desc<rx_sniff> field                            */
+    uint32_t    vlanVid;                       /* holds value of vlan vid taken from shared memory template      */
+
+
+    /* Get pointer to descriptor */
+    struct ppa_in_desc* thr65_desc_ptr = AC5P_MEM_CAST(AC5P_DESC_REGs_lo,ppa_in_desc);
+
+#ifdef ASIC_SIMULATION
+    /* Print out the input packet */
+    __LOG_FW(("Print out the input packet"));
+    __LOG_PARAM_FW( PPA_FW_SP_READ(AC5P_PKT_REGs_lo + 64) );
+    __LOG_PARAM_FW( PPA_FW_SP_READ(AC5P_PKT_REGs_lo + 64 + 4) );
+    __LOG_PARAM_FW( PPA_FW_SP_READ(AC5P_PKT_REGs_lo + 64 + 8) );
+    __LOG_PARAM_FW( PPA_FW_SP_READ(AC5P_PKT_REGs_lo + 64 + 12) );
+    __LOG_PARAM_FW( PPA_FW_SP_READ(AC5P_PKT_REGs_lo + 64 + 16) );
+    __LOG_PARAM_FW( PPA_FW_SP_READ(AC5P_PKT_REGs_lo + 64 + 20) );
+    __LOG_PARAM_FW( PPA_FW_SP_READ(AC5P_PKT_REGs_lo + 64 + 24) );
+    __LOG_PARAM_FW( PPA_FW_SP_READ(AC5P_PKT_REGs_lo + 64 + 28) );
+    __LOG_PARAM_FW( PPA_FW_SP_READ(AC5P_PKT_REGs_lo + 64 + 32) );
+#endif /* ASIC_SIMULATION */
+
+    /* Get Rx Sniff value from descriptor to tell us if Ingress mirroring or Egress mirroring */
+    __LOG_FW(("Get Rx Sniff value from descriptor to tell us if Ingress mirroring or Egress mirroring"));
+    descRxSniff = thr65_desc_ptr->phal2ppa.rx_sniff;
+    __LOG_PARAM_FW(descRxSniff);
+
+
+    /*-----------------------------------------------------------------------------------------------------------------------------------------------
+      - Calculate offset to the right Analyzer ePort template in shared memory according to shared memory index 
+      ------------------------------------------------------------------------------------------------------------------------------------------------*/
+     __LOG_FW(("Calculate offset to the right Analyzer ePort template in shared memory according to shared memory index"));
+
+    /* Desc.pha_metadata[0:2] contains shared memory index. Applicable values are 0:6. */
+    __LOG_FW(("Desc.pha_metadata[0:2] contains shared memory index. Applicable values are 0:6."));
+    smemAnalayzerTemplateOfst = (thr65_desc_ptr->phal2ppa.pha_metadata0 & 0x7)*64;
+    __LOG_PARAM_FW(thr65_desc_ptr->phal2ppa.pha_metadata0);
+    __LOG_PARAM_FW(smemAnalayzerTemplateOfst);
+
+    /* Get base address of the required Analyzer ePort template in shared memory */
+    __LOG_FW(("Get base address of the required Analyzer ePort template in shared memory"));
+    smemAnalyzerTemplateBaseAddr = DRAM_CC_ERSPAN_ANALYZER_EPORT_1_TEMPLATE_ADDR + smemAnalayzerTemplateOfst;
+    __LOG_PARAM_FW(smemAnalyzerTemplateBaseAddr);
+
+
+    /*-----------------------------------------------------------------------------------------------------------------------------------------------
+      - Get 16B of L2 parameters from shared memory: | mac da sa(12B) | vlan tag(4B) | and placed them in thread's template
+      - To avoid 32 bits alignment issues (packet starts after 2 bytes since Ethertype included), copy it first to CFG template and then to packet
+      ------------------------------------------------------------------------------------------------------------------------------------------------*/
+     __LOG_FW(("Get 16B of L2 parameters from shared memory: | mac da sa(12B) | vlan tag(4B) | and placed them in thread's template"));
+
+    PPA_FW_SP_WRITE( (AC5P_CFG_REGs_lo + 0) , PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr +  IPV6_BASIC_HEADER_SIZE + 4)  );
+    PPA_FW_SP_WRITE( (AC5P_CFG_REGs_lo + 4) , PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr +  IPV6_BASIC_HEADER_SIZE + 8)  );
+    PPA_FW_SP_WRITE( (AC5P_CFG_REGs_lo + 8) , PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr +  IPV6_BASIC_HEADER_SIZE + 12)  );
+    PPA_FW_SP_WRITE( (AC5P_CFG_REGs_lo + 12) , PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr +  IPV6_BASIC_HEADER_SIZE + 16)  );
+    __LOG_PARAM_FW(PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr + IPV6_BASIC_HEADER_SIZE + 4));
+    __LOG_PARAM_FW(PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr + IPV6_BASIC_HEADER_SIZE + 8));
+    __LOG_PARAM_FW(PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr + IPV6_BASIC_HEADER_SIZE + 12));
+    __LOG_PARAM_FW(PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr + IPV6_BASIC_HEADER_SIZE + 16));
+
+
+    /*-----------------------------------------------------------------------------------------------------------------------------------------------
+      - Get 40B of IPv6 header from shared memory and place them in output packet
+      ------------------------------------------------------------------------------------------------------------------------------------------------*/
+     __LOG_FW(("Get 40B of IPv6 header from shared memory and place them in output packet"));
+
+    PPA_FW_SP_WRITE( (AC5P_PKT_REGs_lo + 20) , PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr +  0)  );
+    PPA_FW_SP_WRITE( (AC5P_PKT_REGs_lo + 24) , PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr +  4)  );
+    PPA_FW_SP_WRITE( (AC5P_PKT_REGs_lo + 28) , PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr +  8)  );
+    PPA_FW_SP_WRITE( (AC5P_PKT_REGs_lo + 32) , PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr + 12)  );
+    PPA_FW_SP_WRITE( (AC5P_PKT_REGs_lo + 36) , PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr + 16)  );
+    PPA_FW_SP_WRITE( (AC5P_PKT_REGs_lo + 40) , PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr + 20)  );
+    PPA_FW_SP_WRITE( (AC5P_PKT_REGs_lo + 44) , PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr + 24)  );
+    PPA_FW_SP_WRITE( (AC5P_PKT_REGs_lo + 48) , PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr + 28)  );
+    PPA_FW_SP_WRITE( (AC5P_PKT_REGs_lo + 52) , PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr + 32)  );
+    PPA_FW_SP_WRITE( (AC5P_PKT_REGs_lo + 56) , PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr + 36)  );
+    __LOG_PARAM_FW(PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr + 0));
+    __LOG_PARAM_FW(PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr + 4));
+    __LOG_PARAM_FW(PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr + 8));
+    __LOG_PARAM_FW(PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr + 12));
+    __LOG_PARAM_FW(PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr + 16));
+    __LOG_PARAM_FW(PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr + 20));
+    __LOG_PARAM_FW(PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr + 24));
+    __LOG_PARAM_FW(PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr + 28));
+    __LOG_PARAM_FW(PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr + 32));
+    __LOG_PARAM_FW(PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr + 36));
+
+
+    /*-----------------------------------------------------------------------------------------------------------------------------------------------
+      - Get session ID from shared memory. This address contains  | reserved(12b) | Ingress session ID(10b) | Egress session ID(10b) |
+      ------------------------------------------------------------------------------------------------------------------------------------------------*/
+    __LOG_FW(("Get session ID from shared memory. This address contains  | reserved(12b) | Ingress session ID(10b) | Egress session ID(10b) |"));
+
+     sessionId = PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr +  IPV6_BASIC_HEADER_SIZE) ;
+     __LOG_PARAM_FW(sessionId);
+
+     /* Extract 10 bits of Ingress or Egress session ID according to Desc<rx_sniff> field */
+     __LOG_FW(("Extract 10 bits of Ingress or Egress session ID according to Desc<rx_sniff> field"));
+     sessionId = (sessionId >>(10*descRxSniff)) & 0x3FF;
+     __LOG_PARAM_FW(sessionId);
+     __PRAGMA_NO_REORDER
+
+
+    /*-----------------------------------------------------------------------------------------------------------------------------------------------
+     - Get VLAN vid
+     ------------------------------------------------------------------------------------------------------------------------------------------------*/
+
+    /* Get vlan vid from template */
+    __LOG_FW(("Get vlan vid from template"));
+    vlanVid = PPA_FW_SP_READ(AC5P_CFG_REGs_lo + 12) & 0xFFF;
+    __LOG_PARAM_FW(vlanVid);
+
+
+    /*-----------------------------------------------------------------------------------------------------------------------------------------------
+     - Move origin MAC addresses into dummy RSPAN & E-Tag section
+     ------------------------------------------------------------------------------------------------------------------------------------------------*/
+
+    /* Move right origin MAC addresses by 12 bytes and overrun dummy RSPAN & E-tag */
+    __LOG_FW(("Move right origin MAC addresses by 12 bytes and overrun dummy RSPAN & E-tag"));
+    ACCEL_CMD_TRIG(SHIFTRIGHT_12_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_LEN12_FROM_PKT_mac_header__mac_da_47_32_OFFSET, 0);
+   	__PRAGMA_NO_REORDER
+
+
+    /*-----------------------------------------------------------------------------------------------------------------------------------------------
+     - Set Ether Type to 0x86dd (IPv6)
+     ------------------------------------------------------------------------------------------------------------------------------------------------*/
+     __LOG_FW(("Set Ether Type to 0x86dd (IPv6)"));
+
+    ACCEL_CMD_TRIG(COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x86_LEN8_TO_PKT_ethertype_header__ethertype_OFFSET, 0);
+    ACCEL_CMD_TRIG(COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0xDD_LEN8_TO_PKT_ethertype_header__ethertype_PLUS8_OFFSET, 0);
+
+
+    /*-----------------------------------------------------------------------------------------------------------------------------------------------
+     - Set packet GRE header (8B)
+     ------------------------------------------------------------------------------------------------------------------------------------------------*/
+     __LOG_FW(("Set packet GRE header (8B)"));
+
+    /* Set GRE.flags to 0x1000. Clear all other bits in range of 32 bits to zero to get 0x1000 value */
+    __LOG_FW(("Set GRE.flags to 0x1000. Clear all other bits in range of 32 bits to zero to get 0x1000 value"));
+    ACCEL_CMD_TRIG(COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x10_LEN8_TO_PKT_GRE_header__C_OFFSET, SET_REMAIN_FIELDS_TO_ZERO);
+   	__PRAGMA_NO_REORDER
+
+    /* Set GRE.Protocol to 0x88BE */
+    __LOG_FW(("Set GRE.Protocol to 0x88BE"));
+    ACCEL_CMD_TRIG(COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x88_LEN8_TO_PKT_GRE_header__NP_OFFSET, 0);
+    ACCEL_CMD_TRIG(COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0xBE_LEN8_TO_PKT_GRE_header__NP_PLUS8_OFFSET, 0);
+
+    /* Set GRE.Sequence Number to Desc<LM Counter> */
+    __LOG_FW(("Set GRE.Sequence Number to Desc<LM Counter>"));
+	ACCEL_CMD_TRIG(COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__lm_counter_LEN4_TO_PKT_GRE_header__Seq_num_OFFSET, 0);
+
+
+    /*-----------------------------------------------------------------------------------------------------------------------------------------------
+     - Set packet ERSPAN header (8B)
+     ------------------------------------------------------------------------------------------------------------------------------------------------*/
+     __LOG_FW(("Set packet ERSPAN header (8B)"));
+
+    /* Set Ingress or Egress ERSPAN header.sessionID (extracted earlier according to Desc<rx_sniff>).
+       Write it as 4B so rest fields (Ver,VLAN,COS,En,T) are cleared to zero */
+    __LOG_FW(("Set Ingress or Egress ERSPAN header.sessionID (extracted earlier according to Desc<rx_sniff>)."
+              "Write it as 4B so rest fields (Ver,VLAN,COS,En,T) are cleared to zero"));
+    PPA_FW_SP_WRITE( (AC5P_PKT_REGs_lo + 68) , sessionId ); 
+
+    /* Set 20  bits of ERSPAN.index with PHA target/Source Physical Port bits [15:0], rest 4 bits are cleared to zero.
+       if descRxSniff = 0 trigger target port accelerator if 1 trigger source port accelerator (next command 4B offset) */
+    __LOG_FW(("Set 20  bits of ERSPAN.index with PHA target/Source Physical Port bits [15:0], rest 4 bits are cleared to zero."
+              "if descRxSniff = 0 trigger target port accelerator if 1 trigger source port accelerator (next command 4B offset)"));
+    ACCEL_CMD_TRIG(COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_srcTrgPortEntry__targetPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4_OFFSET + 4*descRxSniff, SET_REMAIN_FIELDS_TO_ZERO);
+   	__PRAGMA_NO_REORDER
+
+    /* Set ERSPAN.Ver to 1(4b) and ERSPAN.VLAN(12b) to 0 (cleared already when sessionID field was set) */
+    __LOG_FW(("Set ERSPAN.Ver to 1(4b) and ERSPAN.VLAN(12b) to 0 (cleared already when sessionID field was set) "));
+    ACCEL_CMD_TRIG(COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x1_LEN4_TO_PKT_ERSPAN_type_II_header__Ver_OFFSET, 0);
+
+    /* Set ERSPAN.COS to Desc<QoS Mapped UP> */
+    __LOG_FW(("Set ERSPAN.COS to Desc<QoS Mapped UP>"));
+    ACCEL_CMD_TRIG(COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__qos_mapped_up_LEN3_TO_PKT_ERSPAN_type_II_header__COS_OFFSET, 0);
+
+    /* Set ERSPAN.En to 3(2b) */
+    __LOG_FW(("Assign ERSPAN.En to 3(2b)"));
+    ACCEL_CMD_TRIG(COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x3_LEN2_TO_PKT_ERSPAN_type_II_header__En_OFFSET, 0);
+    
+    /* Set ERSPAN.T(1b) to Desc<truncated> */
+    __LOG_FW(("Assign ERSPAN.T(1b) to Desc<truncated>"));
+    ACCEL_CMD_TRIG(COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__truncated_LEN1_TO_PKT_ERSPAN_type_II_header__T_OFFSET, 0);
+
+
+    /*-----------------------------------------------------------------------------------------------------------------------------------------------
+     - Update packet IPv6 payload length field                         
+     ------------------------------------------------------------------------------------------------------------------------------------------------*/
+    __LOG_FW(("Update IPv6 payload length field"));
+
+
+    /* Set IPv6 Header<Payload Length> = Desc<Egress Byte Count>+16 */
+    __LOG_FW(("Set IPv6 Header<Payload Length>= Desc<Egress Byte Count>+16"));
+
+    /* First copy Desc.Egress Byte Count(14b) to IPv6.Payload Length(16b).
+       Assumption 2 MS bits were already cleared by application when setting IPv6<Payload length> field in shared memory */
+    __LOG_FW(("First copy Desc.Egress Byte Count(14b) to IPv6.Payload Length(16b)"));
+	ACCEL_CMD_TRIG(COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__egress_byte_count_LEN14_TO_PKT_IPv6_Header__payload_length_PLUS2_OFFSET, 0);
+    __PRAGMA_NO_REORDER
+
+    /* IPv6 payload Length +=16 */
+    __LOG_FW(("IPv6 payload Length +=16"));
+    ACCEL_CMD_TRIG(ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x10_LEN16_TO_PKT_IPv6_Header__payload_length_OFFSET, 0);
+	__PRAGMA_NO_REORDER
+
+
+    /*-----------------------------------------------------------------------------------------------------------------------------------------------
+     - Set L2 header: MAC DA SA + vlan tag or no vlan tag
+     - Update Desc<Egress Byte Count> +=58 or 62(with vlan)                         
+     - Update Desc<fw_bc_modification> +=58 or 62(with vlan)
+     ------------------------------------------------------------------------------------------------------------------------------------------------*/
+    __LOG_FW(("Set L2 header with or without vlan tag, Update Desc<Egress Byte Count> +=58 or 62(with vlan), Update Desc<fw_bc_modification> +=58 or 62(with vlan)"));
+
+    /* Check if there is vlan or not. If thread's template<vlanVid>=0 then there is no vlan */
+    __LOG_FW(("Check if there is vlan or not. If thread's template<vlanVid>=0 then there is no vlan"));    
+    if (vlanVid == 0)
+    { /* No vlan */
+
+        /* Indicates HW about the new starting point of the packet header (+58 bytes) */
+        __LOG_FW(("Indicates HW about the new starting point of the packet header (+58 bytes)"));
+        thr65_desc_ptr->ppa_internal_desc.fw_bc_modification = 58;
+
+        /* No vlan, just copy MAC 12 bytes from thread's template */
+        __LOG_FW(("No vlan, just copy MAC 12 bytes from thread's template"));
+        ACCEL_CMD_TRIG(COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_erspan_template__mac_da_47_32_LEN12_TO_PKT_IPv6_Header__version_MINUS14_OFFSET, 0);
+
+        /* Desc<Egress Byte Count> +=58 */
+        __LOG_FW(("Desc<Egress Byte Count> +=58"));
+        ACCEL_CMD_TRIG(ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x3A_LEN14_TO_DESC_phal2ppa__egress_byte_count_OFFSET, 0);
+    }
+    else
+    {/* With vlan */
+
+        /* Indicates HW about the new starting point of the packet header (+62 bytes) */
+        __LOG_FW(("Indicates HW about the new starting point of the packet header (+62 bytes)"));
+        thr65_desc_ptr->ppa_internal_desc.fw_bc_modification = 62;
+
+        /* With vlan, copy MAC(12B) + vlan tag(4B) from thread's template */
+        __LOG_FW(("With vlan, copy MAC(12B) + vlan tag(4B) from thread's template"));
+        ACCEL_CMD_TRIG(COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_erspan_template__mac_da_47_32_LEN16_TO_PKT_IPv6_Header__version_MINUS18_OFFSET, 0);
+ 
+        /* Desc<Egress Byte Count> +=62 */
+        __LOG_FW(("Desc<Egress Byte Count> +=62"));
+        ACCEL_CMD_TRIG(ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x3E_LEN14_TO_DESC_phal2ppa__egress_byte_count_OFFSET, 0);
+    }
+
+
+#if (CHECK_STACK)
+    /* Check if stack was overflowed */
+    __LOG_FW(("Check if stack was overflowed"));
+    ac5p_stack_overflow_checker(65);
+#endif
+
+    /* Execute the packet swap sequence to jump to the next Thread */
+    __LOG_FW(("Execute the packet swap sequence to jump to the next Thread"));
+    packet_swap_sequence();
+}
+
+
 #if RECOVER_FROM_EXCEPTION
 /********************************************************************************************************************//**
  * funcname        ac5pRecoveFromException
@@ -3105,8 +3685,8 @@ THREAD_TYPE phaThreadsTypeAc5pDefault[] = {
     /*61*/ ,invalidFirmwareThread
     /*62*/ ,invalidFirmwareThread
     /*63*/ ,invalidFirmwareThread
-    /*64*/ ,invalidFirmwareThread
-    /*65*/ ,invalidFirmwareThread
+    /*64*/ ,PPA_FW(THR64_Erspan_TypeII_SameDevMirroring_Ipv4)
+    /*65*/ ,PPA_FW(THR65_Erspan_TypeII_SameDevMirroring_Ipv6)
     /*66*/ ,invalidFirmwareThread
     /*67*/ ,invalidFirmwareThread
     /*68*/ ,invalidFirmwareThread
diff --git a/simulation/simDevices/src/asicSimulation/SKernel/sEmbeddedCpu/firmware/ac5p_pha/Image01/ppa_fw_accelerator_commands_Ac5pImage01.c b/simulation/simDevices/src/asicSimulation/SKernel/sEmbeddedCpu/firmware/ac5p_pha/Image01/ppa_fw_accelerator_commands_Ac5pImage01.c
index 18b95e9cb3..1e3c990ace 100644
--- a/simulation/simDevices/src/asicSimulation/SKernel/sEmbeddedCpu/firmware/ac5p_pha/Image01/ppa_fw_accelerator_commands_Ac5pImage01.c
+++ b/simulation/simDevices/src/asicSimulation/SKernel/sEmbeddedCpu/firmware/ac5p_pha/Image01/ppa_fw_accelerator_commands_Ac5pImage01.c
@@ -360,6 +360,8 @@ void PPA_FW(load_accelerator_commands)() {
     ACCEL_CMD_LOAD(CSUM_LOAD_NEW_THR62_enhanced_sFlow_fill_remain_IPv4_LEN2_FROM_PKT_IPv4_Header__total_length_OFFSET,                      CSUM_LOAD_NEW_THR62_enhanced_sFlow_fill_remain_IPv4_LEN2_FROM_PKT_IPv4_Header__total_length_VALUE);
     ACCEL_CMD_LOAD(CSUM_LOAD_OLD_THR62_enhanced_sFlow_fill_remain_IPv4_LEN2_FROM_PKT_IPv4_Header__header_checksum_OFFSET,                   CSUM_LOAD_OLD_THR62_enhanced_sFlow_fill_remain_IPv4_LEN2_FROM_PKT_IPv4_Header__header_checksum_VALUE);
     ACCEL_CMD_LOAD(CSUM_STORE_IP_THR62_enhanced_sFlow_fill_remain_IPv4_TO_PKT_IPv4_Header__header_checksum_OFFSET,                          CSUM_STORE_IP_THR62_enhanced_sFlow_fill_remain_IPv4_TO_PKT_IPv4_Header__header_checksum_VALUE);
+    ACCEL_CMD_LOAD(COPY_BITS_THR62_enhanced_sFlow_fill_remain_IPv4_DESC_phal2ppa__orig_src_eport_PLUS6_LEN7_TO_PKT_enhanced_sflow_rx_ts_shim_header__port_number_OFFSET, COPY_BITS_THR62_enhanced_sFlow_fill_remain_IPv4_DESC_phal2ppa__orig_src_eport_PLUS6_LEN7_TO_PKT_enhanced_sflow_rx_ts_shim_header__port_number_VALUE);
+    ACCEL_CMD_LOAD(COPY_BITS_THR62_enhanced_sFlow_fill_remain_IPv4_DESC_phal2ppa__local_dev_trg_phy_port_PLUS3_LEN7_TO_PKT_enhanced_sflow_tx_ts_shim_header__port_number_OFFSET, COPY_BITS_THR62_enhanced_sFlow_fill_remain_IPv4_DESC_phal2ppa__local_dev_trg_phy_port_PLUS3_LEN7_TO_PKT_enhanced_sflow_tx_ts_shim_header__port_number_VALUE);
     ACCEL_CMD_LOAD(COPY_BYTES_THR63_enhanced_sFlow_fill_remain_IPv6_DESC_phal2ppa__pha_metadata3_LEN2_TO_PKT_enhanced_sflow_rx_ts_shim_header__ip_high_OFFSET, COPY_BYTES_THR63_enhanced_sFlow_fill_remain_IPv6_DESC_phal2ppa__pha_metadata3_LEN2_TO_PKT_enhanced_sflow_rx_ts_shim_header__ip_high_VALUE);
     ACCEL_CMD_LOAD(CSUM_LOAD_NEW_THR63_enhanced_sFlow_fill_remain_IPv6_LEN6_FROM_PKT_enhanced_sflow_rx_ts_shim_header__rx_timestamp_47_32_OFFSET, CSUM_LOAD_NEW_THR63_enhanced_sFlow_fill_remain_IPv6_LEN6_FROM_PKT_enhanced_sflow_rx_ts_shim_header__rx_timestamp_47_32_VALUE);
     ACCEL_CMD_LOAD(CSUM_LOAD_NEW_THR63_enhanced_sFlow_fill_remain_IPv6_LEN4_FROM_PKT_enhanced_sflow_rx_ts_shim_header__reserved_OFFSET,     CSUM_LOAD_NEW_THR63_enhanced_sFlow_fill_remain_IPv6_LEN4_FROM_PKT_enhanced_sflow_rx_ts_shim_header__reserved_VALUE);
@@ -371,6 +373,48 @@ void PPA_FW(load_accelerator_commands)() {
     ACCEL_CMD_LOAD(COPY_BITS_THR63_enhanced_sFlow_fill_remain_IPv6_CONST_0x1_LEN1_TO_DESC_phal2ppa__egress_checksum_mode_OFFSET,            COPY_BITS_THR63_enhanced_sFlow_fill_remain_IPv6_CONST_0x1_LEN1_TO_DESC_phal2ppa__egress_checksum_mode_VALUE);
     ACCEL_CMD_LOAD(ADD_BITS_THR63_enhanced_sFlow_fill_remain_IPv6_CONST_0x2C_LEN16_TO_PKT_udp_header__Length_OFFSET,                        ADD_BITS_THR63_enhanced_sFlow_fill_remain_IPv6_CONST_0x2C_LEN16_TO_PKT_udp_header__Length_VALUE);
     ACCEL_CMD_LOAD(ADD_BITS_THR63_enhanced_sFlow_fill_remain_IPv6_CONST_0x2C_LEN16_TO_PKT_IPv6_Header__payload_length_OFFSET,               ADD_BITS_THR63_enhanced_sFlow_fill_remain_IPv6_CONST_0x2C_LEN16_TO_PKT_IPv6_Header__payload_length_VALUE);
+    ACCEL_CMD_LOAD(COPY_BITS_THR63_enhanced_sFlow_fill_remain_IPv6_DESC_phal2ppa__orig_src_eport_PLUS6_LEN7_TO_PKT_enhanced_sflow_rx_ts_shim_header__port_number_OFFSET, COPY_BITS_THR63_enhanced_sFlow_fill_remain_IPv6_DESC_phal2ppa__orig_src_eport_PLUS6_LEN7_TO_PKT_enhanced_sflow_rx_ts_shim_header__port_number_VALUE);
+    ACCEL_CMD_LOAD(COPY_BITS_THR63_enhanced_sFlow_fill_remain_IPv6_DESC_phal2ppa__local_dev_trg_phy_port_PLUS3_LEN7_TO_PKT_enhanced_sflow_tx_ts_shim_header__port_number_OFFSET, COPY_BITS_THR63_enhanced_sFlow_fill_remain_IPv6_DESC_phal2ppa__local_dev_trg_phy_port_PLUS3_LEN7_TO_PKT_enhanced_sflow_tx_ts_shim_header__port_number_VALUE);
+    ACCEL_CMD_LOAD(COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x08_LEN8_TO_PKT_ethertype_header__ethertype_OFFSET,           COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x08_LEN8_TO_PKT_ethertype_header__ethertype_VALUE);
+    ACCEL_CMD_LOAD(COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x10_LEN8_TO_PKT_GRE_header__C_OFFSET,                         COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x10_LEN8_TO_PKT_GRE_header__C_VALUE);
+    ACCEL_CMD_LOAD(COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x88_LEN8_TO_PKT_GRE_header__NP_OFFSET,                        COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x88_LEN8_TO_PKT_GRE_header__NP_VALUE);
+    ACCEL_CMD_LOAD(COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0xBE_LEN8_TO_PKT_GRE_header__NP_PLUS8_OFFSET,                  COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0xBE_LEN8_TO_PKT_GRE_header__NP_PLUS8_VALUE);
+    ACCEL_CMD_LOAD(COPY_BYTES_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__lm_counter_LEN4_TO_PKT_GRE_header__Seq_num_OFFSET,   COPY_BYTES_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__lm_counter_LEN4_TO_PKT_GRE_header__Seq_num_VALUE);
+    ACCEL_CMD_LOAD(COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_srcTrgPortEntry__targetPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4_OFFSET, COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_srcTrgPortEntry__targetPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4_VALUE);
+    ACCEL_CMD_LOAD(COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_srcTrgPortEntry__srcPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4_OFFSET, COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_srcTrgPortEntry__srcPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4_VALUE);
+    ACCEL_CMD_LOAD(COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x1_LEN4_TO_PKT_ERSPAN_type_II_header__Ver_OFFSET,             COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x1_LEN4_TO_PKT_ERSPAN_type_II_header__Ver_VALUE);
+    ACCEL_CMD_LOAD(COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__qos_mapped_up_LEN3_TO_PKT_ERSPAN_type_II_header__COS_OFFSET, COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__qos_mapped_up_LEN3_TO_PKT_ERSPAN_type_II_header__COS_VALUE);
+    ACCEL_CMD_LOAD(COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x3_LEN2_TO_PKT_ERSPAN_type_II_header__En_OFFSET,              COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x3_LEN2_TO_PKT_ERSPAN_type_II_header__En_VALUE);
+    ACCEL_CMD_LOAD(COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__truncated_LEN1_TO_PKT_ERSPAN_type_II_header__T_OFFSET, COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__truncated_LEN1_TO_PKT_ERSPAN_type_II_header__T_VALUE);
+    ACCEL_CMD_LOAD(COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__egress_byte_count_LEN14_TO_PKT_IPv4_Header__total_length_PLUS2_OFFSET, COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__egress_byte_count_LEN14_TO_PKT_IPv4_Header__total_length_PLUS2_VALUE);
+    ACCEL_CMD_LOAD(ADD_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x24_LEN16_TO_PKT_IPv4_Header__total_length_OFFSET,             ADD_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x24_LEN16_TO_PKT_IPv4_Header__total_length_VALUE);
+    ACCEL_CMD_LOAD(CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN8_FROM_PKT_IPv4_Header__version_OFFSET,                       CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN8_FROM_PKT_IPv4_Header__version_VALUE);
+    ACCEL_CMD_LOAD(CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN2_FROM_PKT_IPv4_Header__ttl_OFFSET,                           CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN2_FROM_PKT_IPv4_Header__ttl_VALUE);
+    ACCEL_CMD_LOAD(CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN8_FROM_PKT_IPv4_Header__sip_high_OFFSET,                      CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN8_FROM_PKT_IPv4_Header__sip_high_VALUE);
+    ACCEL_CMD_LOAD(CSUM_STORE_IP_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_TO_PKT_IPv4_Header__header_checksum_OFFSET,                      CSUM_STORE_IP_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_TO_PKT_IPv4_Header__header_checksum_VALUE);
+    ACCEL_CMD_LOAD(COPY_BYTES_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_erspan_template__mac_da_47_32_LEN12_TO_PKT_IPv4_Header__version_MINUS14_OFFSET, COPY_BYTES_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_erspan_template__mac_da_47_32_LEN12_TO_PKT_IPv4_Header__version_MINUS14_VALUE);
+    ACCEL_CMD_LOAD(ADD_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x32_LEN14_TO_DESC_phal2ppa__egress_byte_count_OFFSET,          ADD_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x32_LEN14_TO_DESC_phal2ppa__egress_byte_count_VALUE);
+    ACCEL_CMD_LOAD(COPY_BYTES_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_erspan_template__mac_da_47_32_LEN16_TO_PKT_IPv4_Header__version_MINUS18_OFFSET, COPY_BYTES_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_erspan_template__mac_da_47_32_LEN16_TO_PKT_IPv4_Header__version_MINUS18_VALUE);
+    ACCEL_CMD_LOAD(ADD_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x36_LEN14_TO_DESC_phal2ppa__egress_byte_count_OFFSET,          ADD_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x36_LEN14_TO_DESC_phal2ppa__egress_byte_count_VALUE);
+    ACCEL_CMD_LOAD(COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x86_LEN8_TO_PKT_ethertype_header__ethertype_OFFSET,           COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x86_LEN8_TO_PKT_ethertype_header__ethertype_VALUE);
+    ACCEL_CMD_LOAD(COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0xDD_LEN8_TO_PKT_ethertype_header__ethertype_PLUS8_OFFSET,     COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0xDD_LEN8_TO_PKT_ethertype_header__ethertype_PLUS8_VALUE);
+    ACCEL_CMD_LOAD(COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x10_LEN8_TO_PKT_GRE_header__C_OFFSET,                         COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x10_LEN8_TO_PKT_GRE_header__C_VALUE);
+    ACCEL_CMD_LOAD(COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x88_LEN8_TO_PKT_GRE_header__NP_OFFSET,                        COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x88_LEN8_TO_PKT_GRE_header__NP_VALUE);
+    ACCEL_CMD_LOAD(COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0xBE_LEN8_TO_PKT_GRE_header__NP_PLUS8_OFFSET,                  COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0xBE_LEN8_TO_PKT_GRE_header__NP_PLUS8_VALUE);
+    ACCEL_CMD_LOAD(COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__lm_counter_LEN4_TO_PKT_GRE_header__Seq_num_OFFSET,   COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__lm_counter_LEN4_TO_PKT_GRE_header__Seq_num_VALUE);
+    ACCEL_CMD_LOAD(COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_srcTrgPortEntry__targetPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4_OFFSET, COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_srcTrgPortEntry__targetPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4_VALUE);
+    ACCEL_CMD_LOAD(COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_srcTrgPortEntry__srcPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4_OFFSET, COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_srcTrgPortEntry__srcPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4_VALUE);
+    ACCEL_CMD_LOAD(COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x1_LEN4_TO_PKT_ERSPAN_type_II_header__Ver_OFFSET,             COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x1_LEN4_TO_PKT_ERSPAN_type_II_header__Ver_VALUE);
+    ACCEL_CMD_LOAD(COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__qos_mapped_up_LEN3_TO_PKT_ERSPAN_type_II_header__COS_OFFSET, COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__qos_mapped_up_LEN3_TO_PKT_ERSPAN_type_II_header__COS_VALUE);
+    ACCEL_CMD_LOAD(COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x3_LEN2_TO_PKT_ERSPAN_type_II_header__En_OFFSET,              COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x3_LEN2_TO_PKT_ERSPAN_type_II_header__En_VALUE);
+    ACCEL_CMD_LOAD(COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__truncated_LEN1_TO_PKT_ERSPAN_type_II_header__T_OFFSET, COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__truncated_LEN1_TO_PKT_ERSPAN_type_II_header__T_VALUE);
+    ACCEL_CMD_LOAD(COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__egress_byte_count_LEN14_TO_PKT_IPv6_Header__payload_length_PLUS2_OFFSET, COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__egress_byte_count_LEN14_TO_PKT_IPv6_Header__payload_length_PLUS2_VALUE);
+    ACCEL_CMD_LOAD(ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x10_LEN16_TO_PKT_IPv6_Header__payload_length_OFFSET,           ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x10_LEN16_TO_PKT_IPv6_Header__payload_length_VALUE);
+    ACCEL_CMD_LOAD(COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_erspan_template__mac_da_47_32_LEN12_TO_PKT_IPv6_Header__version_MINUS14_OFFSET, COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_erspan_template__mac_da_47_32_LEN12_TO_PKT_IPv6_Header__version_MINUS14_VALUE);
+    ACCEL_CMD_LOAD(ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x3A_LEN14_TO_DESC_phal2ppa__egress_byte_count_OFFSET,          ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x3A_LEN14_TO_DESC_phal2ppa__egress_byte_count_VALUE);
+    ACCEL_CMD_LOAD(COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_erspan_template__mac_da_47_32_LEN16_TO_PKT_IPv6_Header__version_MINUS18_OFFSET, COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_erspan_template__mac_da_47_32_LEN16_TO_PKT_IPv6_Header__version_MINUS18_VALUE);
+    ACCEL_CMD_LOAD(ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x3E_LEN14_TO_DESC_phal2ppa__egress_byte_count_OFFSET,          ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x3E_LEN14_TO_DESC_phal2ppa__egress_byte_count_VALUE);
+    ACCEL_CMD_LOAD(SHIFTRIGHT_12_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_LEN12_FROM_PKT_mac_header__mac_da_47_32_OFFSET,            SHIFTRIGHT_12_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_LEN12_FROM_PKT_mac_header__mac_da_47_32_VALUE);
     ACCEL_CMD_LOAD(COPY_BYTES_THR66_enhanced_sFlow_CFG_enhanced_sflow_template__reserved_0_LEN12_TO_PKT_enhanced_sflow_shim_header__version_OFFSET, COPY_BYTES_THR66_enhanced_sFlow_CFG_enhanced_sflow_template__reserved_0_LEN12_TO_PKT_enhanced_sflow_shim_header__version_VALUE);
     ACCEL_CMD_LOAD(COPY_BITS_THR66_enhanced_sFlow_CONST_0x5_LEN3_TO_PKT_enhanced_sflow_shim_header__version_PLUS29_OFFSET,                  COPY_BITS_THR66_enhanced_sFlow_CONST_0x5_LEN3_TO_PKT_enhanced_sflow_shim_header__version_PLUS29_VALUE);
     ACCEL_CMD_LOAD(COPY_BITS_THR66_enhanced_sFlow_CFG_enhanced_sflow_template__src_device_id_LEN8_TO_PKT_enhanced_sflow_shim_header__src_modid_OFFSET, COPY_BITS_THR66_enhanced_sFlow_CFG_enhanced_sflow_template__src_device_id_LEN8_TO_PKT_enhanced_sflow_shim_header__src_modid_VALUE);
@@ -379,15 +423,14 @@ void PPA_FW(load_accelerator_commands)() {
     ACCEL_CMD_LOAD(COPY_BYTES_THR66_enhanced_sFlow_CFG_enhanced_sflow_template__reserved_0_LEN12_TO_PKT_enhanced_sflow_rx_ts_shim_header__checksum_OFFSET, COPY_BYTES_THR66_enhanced_sFlow_CFG_enhanced_sflow_template__reserved_0_LEN12_TO_PKT_enhanced_sflow_rx_ts_shim_header__checksum_VALUE);
     ACCEL_CMD_LOAD(COPY_BITS_THR66_enhanced_sFlow_DESC_phal2ppa__timestamp_PLUS2_LEN14_TO_PKT_enhanced_sflow_rx_ts_shim_header__rx_timestamp_31_16_PLUS2_OFFSET, COPY_BITS_THR66_enhanced_sFlow_DESC_phal2ppa__timestamp_PLUS2_LEN14_TO_PKT_enhanced_sflow_rx_ts_shim_header__rx_timestamp_31_16_PLUS2_VALUE);
     ACCEL_CMD_LOAD(COPY_BITS_THR66_enhanced_sFlow_DESC_phal2ppa__timestamp_PLUS16_LEN16_TO_PKT_enhanced_sflow_rx_ts_shim_header__rx_timestamp_15_0_OFFSET, COPY_BITS_THR66_enhanced_sFlow_DESC_phal2ppa__timestamp_PLUS16_LEN16_TO_PKT_enhanced_sflow_rx_ts_shim_header__rx_timestamp_15_0_VALUE);
-    ACCEL_CMD_LOAD(COPY_BITS_THR66_enhanced_sFlow_DESC_phal2ppa__orig_src_eport_PLUS6_LEN7_TO_PKT_enhanced_sflow_rx_ts_shim_header__port_number_OFFSET, COPY_BITS_THR66_enhanced_sFlow_DESC_phal2ppa__orig_src_eport_PLUS6_LEN7_TO_PKT_enhanced_sflow_rx_ts_shim_header__port_number_VALUE);
     ACCEL_CMD_LOAD(COPY_BYTES_THR66_enhanced_sFlow_CFG_enhanced_sflow_template__reserved_0_LEN12_TO_PKT_enhanced_sflow_tx_ts_shim_header__checksum_PLUS2_OFFSET, COPY_BYTES_THR66_enhanced_sFlow_CFG_enhanced_sflow_template__reserved_0_LEN12_TO_PKT_enhanced_sflow_tx_ts_shim_header__checksum_PLUS2_VALUE);
-    ACCEL_CMD_LOAD(COPY_BITS_THR66_enhanced_sFlow_DESC_phal2ppa__trg_phy_port_PLUS3_LEN7_TO_PKT_enhanced_sflow_tx_ts_shim_header__port_number_OFFSET, COPY_BITS_THR66_enhanced_sFlow_DESC_phal2ppa__trg_phy_port_PLUS3_LEN7_TO_PKT_enhanced_sflow_tx_ts_shim_header__port_number_VALUE);
     ACCEL_CMD_LOAD(COPY_BITS_THR66_enhanced_sFlow_CONST_0x1_LEN1_TO_PKT_enhanced_sflow_tx_ts_shim_header__port_direction_OFFSET,            COPY_BITS_THR66_enhanced_sFlow_CONST_0x1_LEN1_TO_PKT_enhanced_sflow_tx_ts_shim_header__port_direction_VALUE);
     ACCEL_CMD_LOAD(COPY_BITS_THR66_enhanced_sFlow_CONST_0x1_LEN1_TO_DESC_phal2ppa__mac_timestamping_en_OFFSET,                              COPY_BITS_THR66_enhanced_sFlow_CONST_0x1_LEN1_TO_DESC_phal2ppa__mac_timestamping_en_VALUE);
     ACCEL_CMD_LOAD(COPY_BITS_THR66_enhanced_sFlow_CONST_0x0_LEN3_TO_DESC_phal2ppa__ptp_packet_format_OFFSET,                                COPY_BITS_THR66_enhanced_sFlow_CONST_0x0_LEN3_TO_DESC_phal2ppa__ptp_packet_format_VALUE);
     ACCEL_CMD_LOAD(COPY_BITS_THR66_enhanced_sFlow_CONST_0x4_LEN4_TO_DESC_phal2ppa__ptp_action_OFFSET,                                       COPY_BITS_THR66_enhanced_sFlow_CONST_0x4_LEN4_TO_DESC_phal2ppa__ptp_action_VALUE);
     ACCEL_CMD_LOAD(COPY_BITS_THR66_enhanced_sFlow_CONST_0x2_LEN3_TO_DESC_phal2ppa__timestamp_mask_profile_OFFSET,                           COPY_BITS_THR66_enhanced_sFlow_CONST_0x2_LEN3_TO_DESC_phal2ppa__timestamp_mask_profile_VALUE);
     ACCEL_CMD_LOAD(COPY_BITS_THR66_enhanced_sFlow_CONST_0x22_LEN8_TO_DESC_phal2ppa__timestamp_offset_OFFSET,                                COPY_BITS_THR66_enhanced_sFlow_CONST_0x22_LEN8_TO_DESC_phal2ppa__timestamp_offset_VALUE);
+    ACCEL_CMD_LOAD(COPY_BITS_THR66_enhanced_sFlow_CONST_0x0_LEN1_TO_PKT_enhanced_sflow_rx_ts_shim_header__port_direction_OFFSET,            COPY_BITS_THR66_enhanced_sFlow_CONST_0x0_LEN1_TO_PKT_enhanced_sflow_rx_ts_shim_header__port_direction_VALUE);
 __PRAGMA_FLUSH_MEMORY
 
 }
@@ -766,6 +809,8 @@ ACCEL_INFO_STC accelInfoArrAc5pImage01[] =
     ,{ AC5P_ENUM_NAME_AND_VALUE( CSUM_LOAD_NEW_THR62_enhanced_sFlow_fill_remain_IPv4_LEN2_FROM_PKT_IPv4_Header__total_length_OFFSET),                     62}
     ,{ AC5P_ENUM_NAME_AND_VALUE( CSUM_LOAD_OLD_THR62_enhanced_sFlow_fill_remain_IPv4_LEN2_FROM_PKT_IPv4_Header__header_checksum_OFFSET),                  62}
     ,{ AC5P_ENUM_NAME_AND_VALUE( CSUM_STORE_IP_THR62_enhanced_sFlow_fill_remain_IPv4_TO_PKT_IPv4_Header__header_checksum_OFFSET),                         62}
+    ,{ AC5P_ENUM_NAME_AND_VALUE( COPY_BITS_THR62_enhanced_sFlow_fill_remain_IPv4_DESC_phal2ppa__orig_src_eport_PLUS6_LEN7_TO_PKT_enhanced_sflow_rx_ts_shim_header__port_number_OFFSET), 62}
+    ,{ AC5P_ENUM_NAME_AND_VALUE( COPY_BITS_THR62_enhanced_sFlow_fill_remain_IPv4_DESC_phal2ppa__local_dev_trg_phy_port_PLUS3_LEN7_TO_PKT_enhanced_sflow_tx_ts_shim_header__port_number_OFFSET), 62}
 
 /*************** THR63_enhanced_sFlow_fill_remain_IPv6 *******************/
     ,{ AC5P_ENUM_NAME_AND_VALUE( COPY_BYTES_THR63_enhanced_sFlow_fill_remain_IPv6_DESC_phal2ppa__pha_metadata3_LEN2_TO_PKT_enhanced_sflow_rx_ts_shim_header__ip_high_OFFSET), 63}
@@ -779,6 +824,52 @@ ACCEL_INFO_STC accelInfoArrAc5pImage01[] =
     ,{ AC5P_ENUM_NAME_AND_VALUE( COPY_BITS_THR63_enhanced_sFlow_fill_remain_IPv6_CONST_0x1_LEN1_TO_DESC_phal2ppa__egress_checksum_mode_OFFSET),           63}
     ,{ AC5P_ENUM_NAME_AND_VALUE( ADD_BITS_THR63_enhanced_sFlow_fill_remain_IPv6_CONST_0x2C_LEN16_TO_PKT_udp_header__Length_OFFSET),                       63}
     ,{ AC5P_ENUM_NAME_AND_VALUE( ADD_BITS_THR63_enhanced_sFlow_fill_remain_IPv6_CONST_0x2C_LEN16_TO_PKT_IPv6_Header__payload_length_OFFSET),              63}
+    ,{ AC5P_ENUM_NAME_AND_VALUE( COPY_BITS_THR63_enhanced_sFlow_fill_remain_IPv6_DESC_phal2ppa__orig_src_eport_PLUS6_LEN7_TO_PKT_enhanced_sflow_rx_ts_shim_header__port_number_OFFSET), 63}
+    ,{ AC5P_ENUM_NAME_AND_VALUE( COPY_BITS_THR63_enhanced_sFlow_fill_remain_IPv6_DESC_phal2ppa__local_dev_trg_phy_port_PLUS3_LEN7_TO_PKT_enhanced_sflow_tx_ts_shim_header__port_number_OFFSET), 63}
+
+/*************** THR64_Erspan_TypeII_SameDevMirroring_Ipv4 *******************/
+    ,{ AC5P_ENUM_NAME_AND_VALUE( COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x08_LEN8_TO_PKT_ethertype_header__ethertype_OFFSET),          64}
+    ,{ AC5P_ENUM_NAME_AND_VALUE( COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x10_LEN8_TO_PKT_GRE_header__C_OFFSET),                        64}
+    ,{ AC5P_ENUM_NAME_AND_VALUE( COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x88_LEN8_TO_PKT_GRE_header__NP_OFFSET),                       64}
+    ,{ AC5P_ENUM_NAME_AND_VALUE( COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0xBE_LEN8_TO_PKT_GRE_header__NP_PLUS8_OFFSET),                 64}
+    ,{ AC5P_ENUM_NAME_AND_VALUE( COPY_BYTES_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__lm_counter_LEN4_TO_PKT_GRE_header__Seq_num_OFFSET),  64}
+    ,{ AC5P_ENUM_NAME_AND_VALUE( COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_srcTrgPortEntry__targetPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4_OFFSET), 64}
+    ,{ AC5P_ENUM_NAME_AND_VALUE( COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_srcTrgPortEntry__srcPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4_OFFSET), 64}
+    ,{ AC5P_ENUM_NAME_AND_VALUE( COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x1_LEN4_TO_PKT_ERSPAN_type_II_header__Ver_OFFSET),            64}
+    ,{ AC5P_ENUM_NAME_AND_VALUE( COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__qos_mapped_up_LEN3_TO_PKT_ERSPAN_type_II_header__COS_OFFSET), 64}
+    ,{ AC5P_ENUM_NAME_AND_VALUE( COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x3_LEN2_TO_PKT_ERSPAN_type_II_header__En_OFFSET),             64}
+    ,{ AC5P_ENUM_NAME_AND_VALUE( COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__truncated_LEN1_TO_PKT_ERSPAN_type_II_header__T_OFFSET), 64}
+    ,{ AC5P_ENUM_NAME_AND_VALUE( COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__egress_byte_count_LEN14_TO_PKT_IPv4_Header__total_length_PLUS2_OFFSET), 64}
+    ,{ AC5P_ENUM_NAME_AND_VALUE( ADD_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x24_LEN16_TO_PKT_IPv4_Header__total_length_OFFSET),            64}
+    ,{ AC5P_ENUM_NAME_AND_VALUE( CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN8_FROM_PKT_IPv4_Header__version_OFFSET),                      64}
+    ,{ AC5P_ENUM_NAME_AND_VALUE( CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN2_FROM_PKT_IPv4_Header__ttl_OFFSET),                          64}
+    ,{ AC5P_ENUM_NAME_AND_VALUE( CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN8_FROM_PKT_IPv4_Header__sip_high_OFFSET),                     64}
+    ,{ AC5P_ENUM_NAME_AND_VALUE( CSUM_STORE_IP_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_TO_PKT_IPv4_Header__header_checksum_OFFSET),                     64}
+    ,{ AC5P_ENUM_NAME_AND_VALUE( COPY_BYTES_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_erspan_template__mac_da_47_32_LEN12_TO_PKT_IPv4_Header__version_MINUS14_OFFSET), 64}
+    ,{ AC5P_ENUM_NAME_AND_VALUE( ADD_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x32_LEN14_TO_DESC_phal2ppa__egress_byte_count_OFFSET),         64}
+    ,{ AC5P_ENUM_NAME_AND_VALUE( COPY_BYTES_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_erspan_template__mac_da_47_32_LEN16_TO_PKT_IPv4_Header__version_MINUS18_OFFSET), 64}
+    ,{ AC5P_ENUM_NAME_AND_VALUE( ADD_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x36_LEN14_TO_DESC_phal2ppa__egress_byte_count_OFFSET),         64}
+
+/*************** THR65_Erspan_TypeII_SameDevMirroring_Ipv6 *******************/
+    ,{ AC5P_ENUM_NAME_AND_VALUE( COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x86_LEN8_TO_PKT_ethertype_header__ethertype_OFFSET),          65}
+    ,{ AC5P_ENUM_NAME_AND_VALUE( COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0xDD_LEN8_TO_PKT_ethertype_header__ethertype_PLUS8_OFFSET),    65}
+    ,{ AC5P_ENUM_NAME_AND_VALUE( COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x10_LEN8_TO_PKT_GRE_header__C_OFFSET),                        65}
+    ,{ AC5P_ENUM_NAME_AND_VALUE( COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x88_LEN8_TO_PKT_GRE_header__NP_OFFSET),                       65}
+    ,{ AC5P_ENUM_NAME_AND_VALUE( COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0xBE_LEN8_TO_PKT_GRE_header__NP_PLUS8_OFFSET),                 65}
+    ,{ AC5P_ENUM_NAME_AND_VALUE( COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__lm_counter_LEN4_TO_PKT_GRE_header__Seq_num_OFFSET),  65}
+    ,{ AC5P_ENUM_NAME_AND_VALUE( COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_srcTrgPortEntry__targetPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4_OFFSET), 65}
+    ,{ AC5P_ENUM_NAME_AND_VALUE( COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_srcTrgPortEntry__srcPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4_OFFSET), 65}
+    ,{ AC5P_ENUM_NAME_AND_VALUE( COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x1_LEN4_TO_PKT_ERSPAN_type_II_header__Ver_OFFSET),            65}
+    ,{ AC5P_ENUM_NAME_AND_VALUE( COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__qos_mapped_up_LEN3_TO_PKT_ERSPAN_type_II_header__COS_OFFSET), 65}
+    ,{ AC5P_ENUM_NAME_AND_VALUE( COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x3_LEN2_TO_PKT_ERSPAN_type_II_header__En_OFFSET),             65}
+    ,{ AC5P_ENUM_NAME_AND_VALUE( COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__truncated_LEN1_TO_PKT_ERSPAN_type_II_header__T_OFFSET), 65}
+    ,{ AC5P_ENUM_NAME_AND_VALUE( COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__egress_byte_count_LEN14_TO_PKT_IPv6_Header__payload_length_PLUS2_OFFSET), 65}
+    ,{ AC5P_ENUM_NAME_AND_VALUE( ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x10_LEN16_TO_PKT_IPv6_Header__payload_length_OFFSET),          65}
+    ,{ AC5P_ENUM_NAME_AND_VALUE( COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_erspan_template__mac_da_47_32_LEN12_TO_PKT_IPv6_Header__version_MINUS14_OFFSET), 65}
+    ,{ AC5P_ENUM_NAME_AND_VALUE( ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x3A_LEN14_TO_DESC_phal2ppa__egress_byte_count_OFFSET),         65}
+    ,{ AC5P_ENUM_NAME_AND_VALUE( COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_erspan_template__mac_da_47_32_LEN16_TO_PKT_IPv6_Header__version_MINUS18_OFFSET), 65}
+    ,{ AC5P_ENUM_NAME_AND_VALUE( ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x3E_LEN14_TO_DESC_phal2ppa__egress_byte_count_OFFSET),         65}
+    ,{ AC5P_ENUM_NAME_AND_VALUE( SHIFTRIGHT_12_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_LEN12_FROM_PKT_mac_header__mac_da_47_32_OFFSET),           65}
 
 /*************** THR66_enhanced_sFlow *******************/
     ,{ AC5P_ENUM_NAME_AND_VALUE( COPY_BYTES_THR66_enhanced_sFlow_CFG_enhanced_sflow_template__reserved_0_LEN12_TO_PKT_enhanced_sflow_shim_header__version_OFFSET), 66}
@@ -789,15 +880,14 @@ ACCEL_INFO_STC accelInfoArrAc5pImage01[] =
     ,{ AC5P_ENUM_NAME_AND_VALUE( COPY_BYTES_THR66_enhanced_sFlow_CFG_enhanced_sflow_template__reserved_0_LEN12_TO_PKT_enhanced_sflow_rx_ts_shim_header__checksum_OFFSET), 66}
     ,{ AC5P_ENUM_NAME_AND_VALUE( COPY_BITS_THR66_enhanced_sFlow_DESC_phal2ppa__timestamp_PLUS2_LEN14_TO_PKT_enhanced_sflow_rx_ts_shim_header__rx_timestamp_31_16_PLUS2_OFFSET), 66}
     ,{ AC5P_ENUM_NAME_AND_VALUE( COPY_BITS_THR66_enhanced_sFlow_DESC_phal2ppa__timestamp_PLUS16_LEN16_TO_PKT_enhanced_sflow_rx_ts_shim_header__rx_timestamp_15_0_OFFSET), 66}
-    ,{ AC5P_ENUM_NAME_AND_VALUE( COPY_BITS_THR66_enhanced_sFlow_DESC_phal2ppa__orig_src_eport_PLUS6_LEN7_TO_PKT_enhanced_sflow_rx_ts_shim_header__port_number_OFFSET), 66}
     ,{ AC5P_ENUM_NAME_AND_VALUE( COPY_BYTES_THR66_enhanced_sFlow_CFG_enhanced_sflow_template__reserved_0_LEN12_TO_PKT_enhanced_sflow_tx_ts_shim_header__checksum_PLUS2_OFFSET), 66}
-    ,{ AC5P_ENUM_NAME_AND_VALUE( COPY_BITS_THR66_enhanced_sFlow_DESC_phal2ppa__trg_phy_port_PLUS3_LEN7_TO_PKT_enhanced_sflow_tx_ts_shim_header__port_number_OFFSET), 66}
     ,{ AC5P_ENUM_NAME_AND_VALUE( COPY_BITS_THR66_enhanced_sFlow_CONST_0x1_LEN1_TO_PKT_enhanced_sflow_tx_ts_shim_header__port_direction_OFFSET),           66}
     ,{ AC5P_ENUM_NAME_AND_VALUE( COPY_BITS_THR66_enhanced_sFlow_CONST_0x1_LEN1_TO_DESC_phal2ppa__mac_timestamping_en_OFFSET),                             66}
     ,{ AC5P_ENUM_NAME_AND_VALUE( COPY_BITS_THR66_enhanced_sFlow_CONST_0x0_LEN3_TO_DESC_phal2ppa__ptp_packet_format_OFFSET),                               66}
     ,{ AC5P_ENUM_NAME_AND_VALUE( COPY_BITS_THR66_enhanced_sFlow_CONST_0x4_LEN4_TO_DESC_phal2ppa__ptp_action_OFFSET),                                      66}
     ,{ AC5P_ENUM_NAME_AND_VALUE( COPY_BITS_THR66_enhanced_sFlow_CONST_0x2_LEN3_TO_DESC_phal2ppa__timestamp_mask_profile_OFFSET),                          66}
     ,{ AC5P_ENUM_NAME_AND_VALUE( COPY_BITS_THR66_enhanced_sFlow_CONST_0x22_LEN8_TO_DESC_phal2ppa__timestamp_offset_OFFSET),                               66}
+    ,{ AC5P_ENUM_NAME_AND_VALUE( COPY_BITS_THR66_enhanced_sFlow_CONST_0x0_LEN1_TO_PKT_enhanced_sflow_rx_ts_shim_header__port_direction_OFFSET),           66}
 /*************** Last Entry *******************/
     /*must be last*/
     ,{NULL , 0 , 0}
diff --git a/simulation/simDevices/src/asicSimulation/SKernel/sEmbeddedCpu/firmware/ac5p_pha/Image01/ppa_fw_threads_Ac5pImage01.c b/simulation/simDevices/src/asicSimulation/SKernel/sEmbeddedCpu/firmware/ac5p_pha/Image01/ppa_fw_threads_Ac5pImage01.c
index 08022d52ec..ebee339f11 100644
--- a/simulation/simDevices/src/asicSimulation/SKernel/sEmbeddedCpu/firmware/ac5p_pha/Image01/ppa_fw_threads_Ac5pImage01.c
+++ b/simulation/simDevices/src/asicSimulation/SKernel/sEmbeddedCpu/firmware/ac5p_pha/Image01/ppa_fw_threads_Ac5pImage01.c
@@ -194,20 +194,20 @@ void PPA_FW(THR1_SRv6_End_Node)() {
     __LOG_FW(("Check that SRH<Segment left> is in the range of PPA buffer (160B = Exp space:32B + input packet:128B) otherwise drop"));
     if ( segments_left_ofst < (IPV6_SR_EXPANSION_SPACE_SIZE+IPv6_SR_PKT_MAX_LENGTH) )
     {
-		/* Read SRH<Segment left> index. Decrement by 1 to point to the right Segment list */
+        /* Read SRH<Segment left> index. Decrement by 1 to point to the right Segment list */
         __LOG_FW(("Read SRH<Segment left> index. Decrement by 1 to point to the right Segment list"));
         segments_left = PPA_FW_SP_BYTE_READ(AC5P_PKT_REGs_lo + segments_left_ofst) - 1;
         __LOG_PARAM_FW(segments_left);
 
-		/* Calculates the offset to the start of the required Segment list */
+        /* Calculates the offset to the start of the required Segment list */
         __LOG_FW(("Calculates the offset to the start of the required Segment list"));
         selected_segment_list_ofst = IPV6_SR_EXPANSION_SPACE_SIZE + IPV6_BASIC_HEADER_SIZE + ipv6_eh_size + SR_BASIC_HEADER_SIZE + (SEGMENT_LIST_SIZE*segments_left);
         __LOG_PARAM_FW(selected_segment_list_ofst);
 
         /* Check Segment list is in the range of PPA buffer. Since it's 16B long max valid offset is 144B (160-16) otherwise drop */  
         __LOG_FW(("Check Segment list is in the range of PPA buffer. Since it's 16B long max valid offset is 144B (160-16) otherwise drop"));
-		if (selected_segment_list_ofst <= (IPV6_SR_EXPANSION_SPACE_SIZE+IPv6_SR_PKT_MAX_LENGTH-SEGMENT_LIST_SIZE))
-		{
+        if (selected_segment_list_ofst <= (IPV6_SR_EXPANSION_SPACE_SIZE+IPv6_SR_PKT_MAX_LENGTH-SEGMENT_LIST_SIZE))
+        {
             /* Pkt dst field in accelerator command is only 7 bits which means can hold packet offset up to 127 bytes. 
                Since in this use case might be a case in which Segment list location exceeds 127 bytes need to use PPN offset register.
                By default this register is used all the time and the default value is zero. 
@@ -217,31 +217,31 @@ void PPA_FW(THR1_SRv6_End_Node)() {
             PPA_FW_SP_WRITE(PPN_IO_REG_PKT_HDR_OFST_ADDR, 32); 
             __PRAGMA_NO_REORDER
 
-			/* Update IPv6 destination address from the segment list */
-			__LOG_FW(("Update IPv6 destination address from the segment list"));
-			ACCEL_CMD_LOAD_PKT_SRC(COPY_BYTES_THR1_SRv6_End_Node_OFFSET32_PKT_srv6_seg0__dip0_high_LEN16_TO_PKT_IPv6_Header__dip0_high_OFFSET, ( (PKT<<7) | (selected_segment_list_ofst-32) ));
-			__PRAGMA_NO_REORDER
-			ACCEL_CMD_TRIG(COPY_BYTES_THR1_SRv6_End_Node_OFFSET32_PKT_srv6_seg0__dip0_high_LEN16_TO_PKT_IPv6_Header__dip0_high_OFFSET, 0);
+            /* Update IPv6 destination address from the segment list */
+            __LOG_FW(("Update IPv6 destination address from the segment list"));
+            ACCEL_CMD_LOAD_PKT_SRC(COPY_BYTES_THR1_SRv6_End_Node_OFFSET32_PKT_srv6_seg0__dip0_high_LEN16_TO_PKT_IPv6_Header__dip0_high_OFFSET, ( (PKT<<7) | (selected_segment_list_ofst-32) ));
+            __PRAGMA_NO_REORDER
+            ACCEL_CMD_TRIG(COPY_BYTES_THR1_SRv6_End_Node_OFFSET32_PKT_srv6_seg0__dip0_high_LEN16_TO_PKT_IPv6_Header__dip0_high_OFFSET, 0);
 
-			/* Update SRH<Segment left> field after decrement it by 1 */
-			__LOG_FW(("Update SRH<Segment left> field after decrement it by 1"));
+            /* Update SRH<Segment left> field after decrement it by 1 */
+            __LOG_FW(("Update SRH<Segment left> field after decrement it by 1"));
             PPA_FW_SP_BYTE_WRITE(AC5P_PKT_REGs_lo + segments_left_ofst,segments_left);
-			__LOG_PARAM_FW(segments_left);
+            __LOG_PARAM_FW(segments_left);
 
             /* Set offset register back to zero (default value)  */
             __LOG_FW(("Set offset register back to zero (default value)"));
             PPA_FW_SP_WRITE(PPN_IO_REG_PKT_HDR_OFST_ADDR, 0); 
-		}
-		else
-		{   /* Drop the packet */
-			__LOG_FW(("Drop the packet use case"));
+        }
+        else
+        {   /* Drop the packet */
+            __LOG_FW(("Drop the packet use case"));
             __PRAGMA_FREQUENCY_HINT_NEVER
 
-			/* Packet command allocated by FW set to Hard drop  */
-			__LOG_FW(("Packet command allocated by FW set to Hard drop "));
-			thr1_desc_ptr->ppa_internal_desc.fw_packet_command = HARD_DROP;
-			__LOG_PARAM_FW(thr1_desc_ptr->ppa_internal_desc.fw_packet_command);
-		}
+            /* Packet command allocated by FW set to Hard drop  */
+            __LOG_FW(("Packet command allocated by FW set to Hard drop "));
+            thr1_desc_ptr->ppa_internal_desc.fw_packet_command = HARD_DROP;
+            __LOG_PARAM_FW(thr1_desc_ptr->ppa_internal_desc.fw_packet_command);
+        }
     }
     else
     {   /* Drop the packet */
@@ -298,10 +298,10 @@ void PPA_FW(THR2_SRv6_Source_Node_1_segment)() {
     /* Move left the first 32 bytes of IPv6 */
     __LOG_FW(("Move left the first 32 bytes using accelerator cmd"));
     ACCEL_CMD_TRIG(SHIFTLEFT_24_BYTES_THR2_SRv6_Source_Node_1_segment_LEN32_FROM_PKT_IPv6_Header__version_OFFSET, 0);
-	__PRAGMA_NO_REORDER
+    __PRAGMA_NO_REORDER
     /* Move left the last 8 bytes of IPv6 */
     ACCEL_CMD_TRIG(SHIFTLEFT_24_BYTES_THR2_SRv6_Source_Node_1_segment_LEN8_FROM_PKT_IPv6_Header__version_PLUS32_OFFSET, 0);
-	__PRAGMA_NO_REORDER
+    __PRAGMA_NO_REORDER
 
 
     /*------------------------------------------------------------------------------------------------------------------------------------------------
@@ -406,15 +406,15 @@ void PPA_FW(THR3_SRv6_Source_Node_First_Pass_2_3_segments)() {
     /* Move left the first 32 bytes */
     __LOG_FW(("Move left the first 32 bytes"));
     ACCEL_CMD_TRIG(SHIFTLEFT_16_BYTES_THR3_SRv6_Source_Node_First_Pass_2_3_segments_LEN32_FROM_PKT_mac_header__mac_da_47_32_OFFSET, 0);
-	__PRAGMA_NO_REORDER
+    __PRAGMA_NO_REORDER
     /* Move the next 32 bytes */
     __LOG_FW(("Move left the next 32 bytes"));
     ACCEL_CMD_TRIG(SHIFTLEFT_16_BYTES_THR3_SRv6_Source_Node_First_Pass_2_3_segments_LEN32_FROM_PKT_mac_header__mac_da_47_32_PLUS32_OFFSET, 0);
-	__PRAGMA_NO_REORDER
+    __PRAGMA_NO_REORDER
     /* Move the last 6 bytes */
     __LOG_FW(("Move left the last 6 bytes"));
     ACCEL_CMD_TRIG(SHIFTLEFT_16_BYTES_THR3_SRv6_Source_Node_First_Pass_2_3_segments_LEN6_FROM_PKT_mac_header__mac_da_47_32_PLUS64_OFFSET, 0);
-	__PRAGMA_NO_REORDER
+    __PRAGMA_NO_REORDER
 
 
     /*------------------------------------------------------------------------------------------------------------------------------------------------
@@ -423,7 +423,7 @@ void PPA_FW(THR3_SRv6_Source_Node_First_Pass_2_3_segments)() {
     /* Copy IPv6 SIP to Segment2 (MINUS16 in command since we already moved the packet left) */
     __LOG_FW(("Copy IPv6 SIP to Segment2 (MINUS16 in command since we already moved the packet left)."));
     ACCEL_CMD_TRIG(COPY_BYTES_THR3_SRv6_Source_Node_First_Pass_2_3_segments_PKT_IPv6_Header__sip0_high_MINUS16_LEN16_TO_PKT_SRv6_Segment2_Header__dip0_high_OFFSET, 0);
-	__PRAGMA_NO_REORDER
+    __PRAGMA_NO_REORDER
 
     /*------------------------------------------------------------------------------------------------------------------------------------------------
       - Update origin IPv6 header 
@@ -528,14 +528,14 @@ void PPA_FW(THR4_SRv6_Source_Node_Second_Pass_3_segments)() {
         __LOG_PARAM_FW(ipv6NextHeader);
 
         /*------------------------------------------------------------------------------------------------------------------------------------------------
-	      - Update Desc<fw_bc_modification> field
+          - Update Desc<fw_bc_modification> field
           ------------------------------------------------------------------------------------------------------------------------------------------------*/
        /* Indicates HW about the new starting point of the packet header. In this case we add 40B but remove 54B so total minus 14B (0xF2) */
         __LOG_FW(("Indicates HW about the new starting point of the packet header. In this case we add 40B but remove 54B so total minus 14B (0xF2)"));
         ACCEL_CMD_TRIG(COPY_BITS_THR4_SRv6_Source_Node_Second_Pass_3_segments_CONST_0xF2_LEN8_TO_DESC_ppa_internal_desc__fw_bc_modification_OFFSET, 0);
 
-	    /*------------------------------------------------------------------------------------------------------------------------------------------------
-	      - Move Generic TS(54B),L2(14B) and IPv6(40B) headers left by 40 bytes to make room for SRH(8B) + Container0(16B) + Container1(16B)
+        /*------------------------------------------------------------------------------------------------------------------------------------------------
+          - Move Generic TS(54B),L2(14B) and IPv6(40B) headers left by 40 bytes to make room for SRH(8B) + Container0(16B) + Container1(16B)
           - Need to do it in 4 commands since need to move more than 32B (108B)  
           ------------------------------------------------------------------------------------------------------------------------------------------------*/
         /* Move left the first 32 bytes */
@@ -565,7 +565,7 @@ void PPA_FW(THR4_SRv6_Source_Node_Second_Pass_3_segments)() {
            HW accelerator will add the offset to the current pkt src and dst values and so will point to the exact location */
         __LOG_FW(("Set offset register to point to L2"));
         PPA_FW_SP_WRITE(PPN_IO_REG_PKT_HDR_OFST_ADDR, 8); 
-		__PRAGMA_NO_REORDER
+        __PRAGMA_NO_REORDER
 
         /*------------------------------------------------------------------------------------------------------------------------------------------------
           - Set SRH
@@ -588,8 +588,8 @@ void PPA_FW(THR4_SRv6_Source_Node_Second_Pass_3_segments)() {
         __LOG_FW(("Copy Generic TS< Data Bytes [35:32]> to SRH Bytes [3:0]"));
         ACCEL_CMD_TRIG(COPY_BYTES_THR4_SRv6_Source_Node_Second_Pass_3_segments_OFFSET8_PKT_no_vlan__Generic_TS_Data__data_35_32_MINUS40_LEN4_TO_PKT_no_vlan__SRv6_Header__last_entry_OFFSET, 0);
 
-	    /*------------------------------------------------------------------------------------------------------------------------------------------------
-	      - Update IPv6 
+        /*------------------------------------------------------------------------------------------------------------------------------------------------
+          - Update IPv6 
           ------------------------------------------------------------------------------------------------------------------------------------------------*/
         /* IPv6.Payload Length += 56 (16B in pass1 and 40B in pass2) */           
         __LOG_FW(("IPv6.Payload Length += 56 (16B in pass1 and 40B in pass2)"));
@@ -606,7 +606,7 @@ void PPA_FW(THR4_SRv6_Source_Node_Second_Pass_3_segments)() {
            Copy Generic TS< Data Bytes [15:0]> to Container 1 */
         __LOG_FW(("Copy Generic TS< Data Bytes [31:16]> to Container 0. Copy Generic TS< Data Bytes [15:0]> to Container 1"));
         ACCEL_CMD_TRIG(COPY_BYTES_THR4_SRv6_Source_Node_Second_Pass_3_segments_OFFSET8_PKT_no_vlan__Generic_TS_Data__data_31_28_MINUS40_LEN32_TO_PKT_no_vlan__SRv6_Segment0_Header__dip0_high_OFFSET, 0);
-		__PRAGMA_NO_REORDER
+        __PRAGMA_NO_REORDER
      }
      else if(egressTagState == 1)
      {  /* with vlan */
@@ -618,14 +618,14 @@ void PPA_FW(THR4_SRv6_Source_Node_Second_Pass_3_segments)() {
         __LOG_PARAM_FW(ipv6NextHeader);
 
         /*------------------------------------------------------------------------------------------------------------------------------------------------
-	      - Update Desc<fw_bc_modification> field
+          - Update Desc<fw_bc_modification> field
           ------------------------------------------------------------------------------------------------------------------------------------------------*/
         /* Indicates HW about the new starting point of the packet header. In this case we add 40B but remove 54B so total minus 14B (0xF2) */
         __LOG_FW(("Indicates HW about the new starting point of the packet header. In this case we add 40B but remove 54B so total minus 14B (0xF2)"));
         ACCEL_CMD_TRIG(COPY_BITS_THR4_SRv6_Source_Node_Second_Pass_3_segments_CONST_0xF2_LEN8_TO_DESC_ppa_internal_desc__fw_bc_modification_OFFSET, 0);
 
-	    /*------------------------------------------------------------------------------------------------------------------------------------------------
-	      - Move Generic TS(54B),L2(14B or 18B) and IPv6(40B) headers left by 40 bytes to make room for SRH(8B) + Container0(16B) + Container1(16B)
+        /*------------------------------------------------------------------------------------------------------------------------------------------------
+          - Move Generic TS(54B),L2(14B or 18B) and IPv6(40B) headers left by 40 bytes to make room for SRH(8B) + Container0(16B) + Container1(16B)
           - Need to do it in 4 commands since need to move more than 32B (108B or 112B)  
           ------------------------------------------------------------------------------------------------------------------------------------------------*/
         /* Move left the first 32 bytes */
@@ -650,7 +650,7 @@ void PPA_FW(THR4_SRv6_Source_Node_Second_Pass_3_segments)() {
            HW accelerator will add the offset to the current pkt src and dst values and so will point to the exact location */
         __LOG_FW(("Set offset register to point to L2"));
         PPA_FW_SP_WRITE(PPN_IO_REG_PKT_HDR_OFST_ADDR, 8); 
-		__PRAGMA_NO_REORDER
+        __PRAGMA_NO_REORDER
 
         /* Move the last 32 bytes */
         __LOG_FW(("Move the last 32 bytes"));
@@ -678,8 +678,8 @@ void PPA_FW(THR4_SRv6_Source_Node_Second_Pass_3_segments)() {
         __LOG_FW(("Copy Generic TS< Data Bytes [35:32]> to SRH Bytes [3:0]"));
         ACCEL_CMD_TRIG(COPY_BYTES_THR4_SRv6_Source_Node_Second_Pass_3_segments_OFFSET8_PKT_with_vlan__Generic_TS_Data__data_35_32_MINUS40_LEN4_TO_PKT_with_vlan__SRv6_Header__last_entry_OFFSET, 0);
 
-	    /*------------------------------------------------------------------------------------------------------------------------------------------------
-	      - Update IPv6 
+        /*------------------------------------------------------------------------------------------------------------------------------------------------
+          - Update IPv6 
           ------------------------------------------------------------------------------------------------------------------------------------------------*/
        /* IPv6.Payload Length += 56 (16B in pass1 and 40B in pass2) */           
         __LOG_FW(("IPv6.Payload Length += 56 (16B in pass1 and 40B in pass2)"));
@@ -696,7 +696,7 @@ void PPA_FW(THR4_SRv6_Source_Node_Second_Pass_3_segments)() {
            Copy Generic TS< Data Bytes [15:0]> to Container 1 */
         __LOG_FW(("Copy Generic TS< Data Bytes [31:16]> to Container 0. Copy Generic TS< Data Bytes [15:0]> to Container 1"));
         ACCEL_CMD_TRIG(COPY_BYTES_THR4_SRv6_Source_Node_Second_Pass_3_segments_OFFSET8_PKT_with_vlan__Generic_TS_Data__data_31_28_MINUS40_LEN32_TO_PKT_with_vlan__SRv6_Segment0_Header__dip0_high_OFFSET, 0);
-		__PRAGMA_NO_REORDER
+        __PRAGMA_NO_REORDER
      }
      else
      {  /* not valid: packet should not be changed */
@@ -786,14 +786,14 @@ void PPA_FW(THR5_SRv6_Source_Node_Second_Pass_2_segments)() {
         __LOG_PARAM_FW(ipv6NextHeader);
 
         /*------------------------------------------------------------------------------------------------------------------------------------------------
-	      - Update Desc<fw_bc_modification> field
+          - Update Desc<fw_bc_modification> field
           ------------------------------------------------------------------------------------------------------------------------------------------------*/
        /* Indicates HW about the new starting point of the packet header. In this case we add 24B but remove 54B so total minus 30B (0xE2) */
         __LOG_FW(("Indicates HW about the new starting point of the packet header. In this case we add 24B but remove 54B so total minus 30B (0xE2)"));
         ACCEL_CMD_TRIG(COPY_BITS_THR5_SRv6_Source_Node_Second_Pass_2_segments_CONST_0xE2_LEN8_TO_DESC_ppa_internal_desc__fw_bc_modification_OFFSET, 0);
 
-	    /*------------------------------------------------------------------------------------------------------------------------------------------------
-	      - Move Generic TS(54B),L2(14B) and IPv6(40B) headers left by 24 bytes to make room for SRH(8B) + Container0(16B)
+        /*------------------------------------------------------------------------------------------------------------------------------------------------
+          - Move Generic TS(54B),L2(14B) and IPv6(40B) headers left by 24 bytes to make room for SRH(8B) + Container0(16B)
           - Need to do it in 4 commands since need to move more than 32B (108B)  
           ------------------------------------------------------------------------------------------------------------------------------------------------*/
         /* Move left the first 32 bytes */
@@ -823,7 +823,7 @@ void PPA_FW(THR5_SRv6_Source_Node_Second_Pass_2_segments)() {
            HW accelerator will add the offset to the current pkt src and dst values and so will point to the exact location */
         __LOG_FW(("Set offset register to point to L2"));
         PPA_FW_SP_WRITE(PPN_IO_REG_PKT_HDR_OFST_ADDR, 24); 
-		__PRAGMA_NO_REORDER
+        __PRAGMA_NO_REORDER
 
         /*------------------------------------------------------------------------------------------------------------------------------------------------
           - Set SRH
@@ -846,8 +846,8 @@ void PPA_FW(THR5_SRv6_Source_Node_Second_Pass_2_segments)() {
         __LOG_FW(("Copy Generic TS< Data Bytes [35:32]> to SRH Bytes [3:0]"));
         ACCEL_CMD_TRIG(COPY_BYTES_THR5_SRv6_Source_Node_Second_Pass_2_segments_OFFSET24_PKT_no_vlan__Generic_TS_Data__data_35_32_MINUS24_LEN4_TO_PKT_no_vlan__SRv6_Header__last_entry_OFFSET, 0);
 
-	    /*------------------------------------------------------------------------------------------------------------------------------------------------
-	      - Update IPv6 
+        /*------------------------------------------------------------------------------------------------------------------------------------------------
+          - Update IPv6 
           ------------------------------------------------------------------------------------------------------------------------------------------------*/
         /* IPv6.Payload Length += 40 (16B in pass1 and 24B in pass2) */           
         __LOG_FW(("IPv6.Payload Length += 40 (16B in pass1 and 24B in pass2)"));
@@ -863,7 +863,7 @@ void PPA_FW(THR5_SRv6_Source_Node_Second_Pass_2_segments)() {
         /* Copy Generic TS< Data Bytes [15:0]> to Container 0 */
         __LOG_FW(("Copy Generic TS< Data Bytes [15:0]> to Container 0"));
         ACCEL_CMD_TRIG(COPY_BYTES_THR5_SRv6_Source_Node_Second_Pass_2_segments_OFFSET24_PKT_no_vlan__Generic_TS_Data__data_15_12_MINUS24_LEN16_TO_PKT_no_vlan__SRv6_Segment0_Header__dip0_high_OFFSET, 0);
-		__PRAGMA_NO_REORDER
+        __PRAGMA_NO_REORDER
      }
      else if(egressTagState == 1)
      {  /* with vlan */
@@ -875,14 +875,14 @@ void PPA_FW(THR5_SRv6_Source_Node_Second_Pass_2_segments)() {
         __LOG_PARAM_FW(ipv6NextHeader);
 
         /*------------------------------------------------------------------------------------------------------------------------------------------------
-	      - Update Desc<fw_bc_modification> field
+          - Update Desc<fw_bc_modification> field
           ------------------------------------------------------------------------------------------------------------------------------------------------*/
         /* Indicates HW about the new starting point of the packet header. In this case we add 24B but remove 54B so total minus 30B (0xE2) */
         __LOG_FW(("Indicates HW about the new starting point of the packet header. In this case we add 24B but remove 54B so total minus 30B (0xE2)"));
         ACCEL_CMD_TRIG(COPY_BITS_THR5_SRv6_Source_Node_Second_Pass_2_segments_CONST_0xE2_LEN8_TO_DESC_ppa_internal_desc__fw_bc_modification_OFFSET, 0);
 
-	    /*------------------------------------------------------------------------------------------------------------------------------------------------
-	      - Move Generic TS(54B),L2(18B) and IPv6(40B) headers left by 24 bytes to make room for SRH(8B) + Container0(16B)
+        /*------------------------------------------------------------------------------------------------------------------------------------------------
+          - Move Generic TS(54B),L2(18B) and IPv6(40B) headers left by 24 bytes to make room for SRH(8B) + Container0(16B)
           - Need to do it in 4 commands since need to move more than 32B (112B)  
           ------------------------------------------------------------------------------------------------------------------------------------------------*/
         /* Move left the first 32 bytes */
@@ -907,7 +907,7 @@ void PPA_FW(THR5_SRv6_Source_Node_Second_Pass_2_segments)() {
            HW accelerator will add the offset to the current pkt src and dst values and so will point to the exact location */
         __LOG_FW(("Set offset register to point to L2"));
         PPA_FW_SP_WRITE(PPN_IO_REG_PKT_HDR_OFST_ADDR, 24); 
-		__PRAGMA_NO_REORDER
+        __PRAGMA_NO_REORDER
 
         /* Move the last 32 bytes */
         __LOG_FW(("Move the last 32 bytes"));
@@ -935,8 +935,8 @@ void PPA_FW(THR5_SRv6_Source_Node_Second_Pass_2_segments)() {
         __LOG_FW(("Copy Generic TS< Data Bytes [35:32]> to SRH Bytes [3:0]"));
         ACCEL_CMD_TRIG(COPY_BYTES_THR5_SRv6_Source_Node_Second_Pass_2_segments_OFFSET24_PKT_with_vlan__Generic_TS_Data__data_35_32_MINUS24_LEN4_TO_PKT_with_vlan__SRv6_Header__last_entry_OFFSET, 0);
 
-	    /*------------------------------------------------------------------------------------------------------------------------------------------------
-	      - Update IPv6 
+        /*------------------------------------------------------------------------------------------------------------------------------------------------
+          - Update IPv6 
           ------------------------------------------------------------------------------------------------------------------------------------------------*/
        /* IPv6.Payload Length += 40 (16B in pass1 and 24B in pass2) */           
         __LOG_FW(("IPv6.Payload Length += 40 (16B in pass1 and 24B in pass2)"));
@@ -952,7 +952,7 @@ void PPA_FW(THR5_SRv6_Source_Node_Second_Pass_2_segments)() {
        /* Copy Generic TS< Data Bytes [15:0]> to Container 0 */
         __LOG_FW(("Copy Generic TS< Data Bytes [15:0]> to Container 0"));
         ACCEL_CMD_TRIG(COPY_BYTES_THR5_SRv6_Source_Node_Second_Pass_2_segments_OFFSET24_PKT_with_vlan__Generic_TS_Data__data_15_12_MINUS24_LEN16_TO_PKT_with_vlan__SRv6_Segment0_Header__dip0_high_OFFSET, 0);
-		__PRAGMA_NO_REORDER
+        __PRAGMA_NO_REORDER
      }
      else
      {  /* not valid: packet should not be changed */
@@ -1190,7 +1190,7 @@ void PPA_FW(THR13_MPLS_SR_ONE_EL)() {
              but each option with different size from 4B (1 label) till 32B (all 8 labels).  Minimum offset to add the new labels
              is after first label and maximum should be after origin label 8 */
     ACCEL_CMD_TRIG(SHIFTLEFT_8_BYTES_THR13_MPLS_SR_ONE_EL_LEN4_FROM_PKT_MPLS_label_1__label_val_OFFSET + (thr13_in_hdr_ptr->MPLS_data.EL1_ofst-48), 0);
-	__PRAGMA_NO_REORDER
+    __PRAGMA_NO_REORDER
 
     /*--------------------------------------------------------------------------------------------------------------------------------
       -  Update ELI label. Since TC and TTL values should be taken from preceding label
@@ -1202,22 +1202,22 @@ void PPA_FW(THR13_MPLS_SR_ONE_EL)() {
     __LOG_FW(("Trigger the command: Copy 4B of preceding label into ELI label"));
     ACCEL_CMD_LOAD_PKT_DEST_AND_PKT_SRC(COPY_BYTES_THR13_MPLS_SR_ONE_EL_PKT_expansion_space__reserved_7_PLUS16_LEN4_TO_PKT_expansion_space__reserved_8_PLUS16_OFFSET, \
                                            eli1_cmd_byte_position,(eli1_cmd_byte_position-4) ) ;
-	__PRAGMA_NO_REORDER
+    __PRAGMA_NO_REORDER
     ACCEL_CMD_TRIG(COPY_BYTES_THR13_MPLS_SR_ONE_EL_PKT_expansion_space__reserved_7_PLUS16_LEN4_TO_PKT_expansion_space__reserved_8_PLUS16_OFFSET, 0);
-	__PRAGMA_NO_REORDER
+    __PRAGMA_NO_REORDER
 
     /* Set ELI label value to 7 (since label value is 20 bits long and set constant cmd can supports no more than 11 bits I need to split it to 2 cmds)*/
     __LOG_FW(("Set ELI label value to 7 (since label value is 20 bits long and set constant cmd can supports no more than 11 bits I need to split it to 2 cmds)"));
     ACCEL_CMD_LOAD_PKT_DEST(COPY_BITS_THR13_MPLS_SR_ONE_EL_CONST_0x0_LEN10_TO_PKT_MPLS_label_8__label_val_OFFSET, eli1_cmd_byte_position );
     ACCEL_CMD_LOAD_PKT_DEST(COPY_BITS_THR13_MPLS_SR_ONE_EL_CONST_0x7_LEN10_TO_PKT_MPLS_label_8__label_val_PLUS10_OFFSET, (eli1_cmd_byte_position+1) );
-	__PRAGMA_NO_REORDER
+    __PRAGMA_NO_REORDER
     ACCEL_CMD_TRIG(COPY_BITS_THR13_MPLS_SR_ONE_EL_CONST_0x0_LEN10_TO_PKT_MPLS_label_8__label_val_OFFSET, 0);
     ACCEL_CMD_TRIG(COPY_BITS_THR13_MPLS_SR_ONE_EL_CONST_0x7_LEN10_TO_PKT_MPLS_label_8__label_val_PLUS10_OFFSET, 0);
 
     /* Clear BoS bit to zero */
     __LOG_FW(("Clear BoS bit to zero"));
     ACCEL_CMD_LOAD_PKT_DEST(COPY_BITS_THR13_MPLS_SR_ONE_EL_CONST_0x0_LEN1_TO_PKT_MPLS_label_8__BoS_OFFSET, (eli1_cmd_byte_position+2) );
-	__PRAGMA_NO_REORDER
+    __PRAGMA_NO_REORDER
     ACCEL_CMD_TRIG(COPY_BITS_THR13_MPLS_SR_ONE_EL_CONST_0x0_LEN1_TO_PKT_MPLS_label_8__BoS_OFFSET, 0);
 
     /*--------------------------------------------------------------------------------------------------------------------------------
@@ -1228,14 +1228,14 @@ void PPA_FW(THR13_MPLS_SR_ONE_EL)() {
     /* Label value[19]=1 + clear all bits within 32bits window to zero therefore clear TC, TTL and BoS fields as well */
     __LOG_FW(("Label value[19]=1 + clear all bits within 32bits window to zero therefore clear TC, TTL and BoS fields as well"));
     ACCEL_CMD_LOAD_PKT_DEST(COPY_BITS_THR13_MPLS_SR_ONE_EL_CONST_0x1_LEN1_TO_PKT_MPLS_label_8__label_val_OFFSET, eli1_cmd_byte_position+4 );
-	__PRAGMA_NO_REORDER
+    __PRAGMA_NO_REORDER
     ACCEL_CMD_TRIG(COPY_BITS_THR13_MPLS_SR_ONE_EL_CONST_0x1_LEN1_TO_PKT_MPLS_label_8__label_val_OFFSET, SET_REMAIN_FIELDS_TO_ZERO);
-	__PRAGMA_NO_REORDER
+    __PRAGMA_NO_REORDER
 
     /* Label value[18:0] = Desc<Hash[11:0]> Zero padding */
     __LOG_FW(("Label value[18:0] = Desc<Hash[11:0]> Zero padding"));
     ACCEL_CMD_LOAD_PKT_DEST(COPY_BITS_THR13_MPLS_SR_ONE_EL_DESC_phal2ppa__packet_hash_LEN12_TO_PKT_MPLS_label_8__label_val_PLUS8_OFFSET, (eli1_cmd_byte_position+1) + 4);
-	__PRAGMA_NO_REORDER
+    __PRAGMA_NO_REORDER
     ACCEL_CMD_TRIG(COPY_BITS_THR13_MPLS_SR_ONE_EL_DESC_phal2ppa__packet_hash_LEN12_TO_PKT_MPLS_label_8__label_val_PLUS8_OFFSET, 0);
 
     /*--------------------------------------------------------------------------------------------------------------------------------
@@ -1330,7 +1330,7 @@ void PPA_FW(THR14_MPLS_SR_TWO_EL)() {
              after first label and maximum should be after origin label 8 */
     __LOG_FW(("Move 8B left size of 4,8,12,16,20,24,28 or 32B (pending offset) to make room for EL & ELI labels"));
     ACCEL_CMD_TRIG( SHIFTLEFT_8_BYTES_THR14_MPLS_SR_TWO_EL_LEN4_FROM_PKT_MPLS_label_1__label_val_OFFSET + (eli1_ofst-48), 0);
-	__PRAGMA_NO_REORDER
+    __PRAGMA_NO_REORDER
 
     /*------------------------------------------------------------------------------------------------------------------
       -  Update ELI label. Since TC and TTL values should be taken from preceding label
@@ -1341,20 +1341,20 @@ void PPA_FW(THR14_MPLS_SR_TWO_EL)() {
     /* Copy 4B of preceding label into ELI label. cpy_preceding_lbl1_cmd_ofst points to the compatible command */
     __LOG_FW(("Copy 4B of preceding label into ELI label"));
     ACCEL_CMD_TRIG(COPY_BYTES_THR14_MPLS_SR_TWO_EL_PKT_expansion_space__reserved_7_LEN4_TO_PKT_expansion_space__reserved_8_OFFSET + cpy_preceding_lbl1_cmd_ofst, 0);
-	__PRAGMA_NO_REORDER
+    __PRAGMA_NO_REORDER
 
     /* Set ELI label value to 7 (since label value is 20 bits long and set constant cmd can supports no more than 11 bits I need to split it to 2 cmds)*/
     __LOG_FW(("Set ELI label value to 7 (since label value is 20 bits long and set constant cmd can supports no more than 11 bits I need to split it to 2 cmds)"));
     ACCEL_CMD_LOAD_PKT_DEST(COPY_BITS_THR14_MPLS_SR_TWO_EL_CONST_0x0_LEN10_TO_PKT_MPLS_label_8__label_val_OFFSET, eli1_cmd_byte_position );
     ACCEL_CMD_LOAD_PKT_DEST(COPY_BITS_THR14_MPLS_SR_TWO_EL_CONST_0x7_LEN10_TO_PKT_MPLS_label_8__label_val_PLUS10_OFFSET, (eli1_cmd_byte_position+1) );
-	__PRAGMA_NO_REORDER
+    __PRAGMA_NO_REORDER
     ACCEL_CMD_TRIG(COPY_BITS_THR14_MPLS_SR_TWO_EL_CONST_0x0_LEN10_TO_PKT_MPLS_label_8__label_val_OFFSET, 0);
     ACCEL_CMD_TRIG(COPY_BITS_THR14_MPLS_SR_TWO_EL_CONST_0x7_LEN10_TO_PKT_MPLS_label_8__label_val_PLUS10_OFFSET, 0);
 
     /* Clear BoS bit to zero */
     __LOG_FW(("Clear BoS bit to zero "));
     ACCEL_CMD_LOAD_PKT_DEST(COPY_BITS_THR14_MPLS_SR_TWO_EL_CONST_0x0_LEN1_TO_PKT_MPLS_label_8__BoS_OFFSET, (eli1_cmd_byte_position+2) );
-	__PRAGMA_NO_REORDER
+    __PRAGMA_NO_REORDER
     ACCEL_CMD_TRIG(COPY_BITS_THR14_MPLS_SR_TWO_EL_CONST_0x0_LEN1_TO_PKT_MPLS_label_8__BoS_OFFSET, 0);
 
     /*------------------------------------------------------------------------------------------------------------------
@@ -1365,14 +1365,14 @@ void PPA_FW(THR14_MPLS_SR_TWO_EL)() {
     /* Label value[19]=1 + clear all bits within 32bits window to zero therefore clear TC, TTL and BoS fields as well */
     __LOG_FW(("Label value[19]=1 + clear all bits within 32bits window to zero therefore clear TC, TTL and BoS fields as well"));
     ACCEL_CMD_LOAD_PKT_DEST(COPY_BITS_THR14_MPLS_SR_TWO_EL_CONST_0x1_LEN1_TO_PKT_MPLS_label_8__label_val_OFFSET, eli1_cmd_byte_position+4 );
-	__PRAGMA_NO_REORDER
+    __PRAGMA_NO_REORDER
     ACCEL_CMD_TRIG(COPY_BITS_THR14_MPLS_SR_TWO_EL_CONST_0x1_LEN1_TO_PKT_MPLS_label_8__label_val_OFFSET, SET_REMAIN_FIELDS_TO_ZERO);
-	__PRAGMA_NO_REORDER
+    __PRAGMA_NO_REORDER
 
     /* Label value[18:0] = Desc<Hash[11:0]> Zero padding */
     __LOG_FW(("Label value[18:0] = Desc<Hash[11:0]> Zero padding"));
     ACCEL_CMD_LOAD_PKT_DEST(COPY_BITS_THR14_MPLS_SR_TWO_EL_DESC_phal2ppa__packet_hash_LEN12_TO_PKT_MPLS_label_8__label_val_PLUS8_OFFSET, (eli1_cmd_byte_position+1) + 4);
-	__PRAGMA_NO_REORDER
+    __PRAGMA_NO_REORDER
     ACCEL_CMD_TRIG(COPY_BITS_THR14_MPLS_SR_TWO_EL_DESC_phal2ppa__packet_hash_LEN12_TO_PKT_MPLS_label_8__label_val_PLUS8_OFFSET, 0);
 
 
@@ -1384,7 +1384,7 @@ void PPA_FW(THR14_MPLS_SR_TWO_EL)() {
     /* Move 8B left size of 4,8,12,16,20,24,28 or 32B (pending offset) to make room for EL & ELI labels */
     __LOG_FW(("Move 8B left size of 4,8,12,16,20,24,28 or 32B (pending offset) to make room for EL & ELI labels"));
     ACCEL_CMD_TRIG(SHIFTLEFT_8_BYTES_THR14_MPLS_SR_TWO_EL_LEN4_FROM_PKT_MPLS_label_1__label_val_MINUS8_OFFSET + (eli2_ofst-40), 0);
-	__PRAGMA_NO_REORDER
+    __PRAGMA_NO_REORDER
 
     /*------------------------------------------------------------------------------------------------------------------
       -  Update ELI label. Since TC and TTL values should be taken from preceding label
@@ -1395,20 +1395,20 @@ void PPA_FW(THR14_MPLS_SR_TWO_EL)() {
     /* Copy 4B of preceding label into ELI label. cpy_preceding_lbl2_cmd_ofst points to the compatible command */
     __LOG_FW(("Copy 4B of preceding label into ELI label"));
     ACCEL_CMD_TRIG(COPY_BYTES_THR14_MPLS_SR_TWO_EL_PKT_expansion_space__reserved_7_LEN4_TO_PKT_expansion_space__reserved_8_OFFSET + cpy_preceding_lbl2_cmd_ofst, 0);
-	__PRAGMA_NO_REORDER
+    __PRAGMA_NO_REORDER
 
     /* Set ELI label value to 7 (since label value is 20 bits long and set constant cmd can supports no more than 11 bits I need to split it to 2 cmds)*/
     __LOG_FW(("Set ELI label value to 7 (since label value is 20 bits long and set constant cmd can supports no more than 11 bits I need to split it to 2 cmds)"));
     ACCEL_CMD_LOAD_PKT_DEST(COPY_BITS_THR14_MPLS_SR_TWO_EL_CONST_0x0_LEN10_TO_PKT_MPLS_label_8__label_val_OFFSET, eli2_cmd_byte_position );
     ACCEL_CMD_LOAD_PKT_DEST(COPY_BITS_THR14_MPLS_SR_TWO_EL_CONST_0x7_LEN10_TO_PKT_MPLS_label_8__label_val_PLUS10_OFFSET, (eli2_cmd_byte_position+1) );
-	__PRAGMA_NO_REORDER
+    __PRAGMA_NO_REORDER
     ACCEL_CMD_TRIG(COPY_BITS_THR14_MPLS_SR_TWO_EL_CONST_0x0_LEN10_TO_PKT_MPLS_label_8__label_val_OFFSET, 0);
     ACCEL_CMD_TRIG(COPY_BITS_THR14_MPLS_SR_TWO_EL_CONST_0x7_LEN10_TO_PKT_MPLS_label_8__label_val_PLUS10_OFFSET, 0);
 
     /* Clear BoS bit to zero */
     __LOG_FW(("Clear BoS bit to zero "));
     ACCEL_CMD_LOAD_PKT_DEST(COPY_BITS_THR14_MPLS_SR_TWO_EL_CONST_0x0_LEN1_TO_PKT_MPLS_label_8__BoS_OFFSET, (eli2_cmd_byte_position+2) );
-	__PRAGMA_NO_REORDER
+    __PRAGMA_NO_REORDER
     ACCEL_CMD_TRIG(COPY_BITS_THR14_MPLS_SR_TWO_EL_CONST_0x0_LEN1_TO_PKT_MPLS_label_8__BoS_OFFSET, 0);
 
     /*------------------------------------------------------------------------------------------------------------------
@@ -1419,14 +1419,14 @@ void PPA_FW(THR14_MPLS_SR_TWO_EL)() {
     /* Label value[19]=1 + clear all bits within 32bits window to zero therefore clear TC, TTL and BoS fields as well */
     __LOG_FW(("Label value[19]=1 + clear all bits within 32bits window to zero therefore clear TC, TTL and BoS fields as well"));
     ACCEL_CMD_LOAD_PKT_DEST(COPY_BITS_THR14_MPLS_SR_TWO_EL_CONST_0x1_LEN1_TO_PKT_MPLS_label_8__label_val_OFFSET, eli2_cmd_byte_position+4 );
-	__PRAGMA_NO_REORDER
+    __PRAGMA_NO_REORDER
     ACCEL_CMD_TRIG(COPY_BITS_THR14_MPLS_SR_TWO_EL_CONST_0x1_LEN1_TO_PKT_MPLS_label_8__label_val_OFFSET, SET_REMAIN_FIELDS_TO_ZERO);
-	__PRAGMA_NO_REORDER
+    __PRAGMA_NO_REORDER
 
     /* Label value[18:0] = Desc<Hash[11:0]> Zero padding */
     __LOG_FW(("Label value[18:0] = Desc<Hash[11:0]> Zero padding"));
     ACCEL_CMD_LOAD_PKT_DEST(COPY_BITS_THR14_MPLS_SR_TWO_EL_DESC_phal2ppa__packet_hash_LEN12_TO_PKT_MPLS_label_8__label_val_PLUS8_OFFSET, (eli2_cmd_byte_position+1) + 4);
-	__PRAGMA_NO_REORDER
+    __PRAGMA_NO_REORDER
     ACCEL_CMD_TRIG(COPY_BITS_THR14_MPLS_SR_TWO_EL_DESC_phal2ppa__packet_hash_LEN12_TO_PKT_MPLS_label_8__label_val_PLUS8_OFFSET, 0);
 
     /*------------------------------------------------------------------------------------------------------------------
@@ -1529,7 +1529,7 @@ void PPA_FW(THR15_MPLS_SR_THREE_EL)() {
              after first label and maximum should be after origin label 8 */
     __LOG_FW(("Move 8B left size of 4,8,12,16,20,24,28 or 32B (pending offset) to make room for EL & ELI labels"));
     ACCEL_CMD_TRIG(SHIFTLEFT_8_BYTES_THR15_MPLS_SR_THREE_EL_LEN4_FROM_PKT_MPLS_label_1__label_val_OFFSET + (eli1_ofst-48), 0);
-	__PRAGMA_NO_REORDER
+    __PRAGMA_NO_REORDER
 
     /*------------------------------------------------------------------------------------------------------------------
       -  Update ELI label. Since TC and TTL values should be taken from preceding label
@@ -1540,20 +1540,20 @@ void PPA_FW(THR15_MPLS_SR_THREE_EL)() {
     /* Copy 4B of preceding label into ELI label. cpy_preceding_lbl1_cmd_ofst points to the compatible command */
     __LOG_FW(("Copy 4B of preceding label into ELI label"));
     ACCEL_CMD_TRIG(COPY_BYTES_THR15_MPLS_SR_THREE_EL_PKT_expansion_space__reserved_7_LEN4_TO_PKT_MPLS_label_2__label_val_OFFSET + cpy_preceding_lbl1_cmd_ofst, 0);
-	__PRAGMA_NO_REORDER
+    __PRAGMA_NO_REORDER
 
     /* Set ELI label value to 7 (since label value is 20 bits long and set constant cmd can supports no more than 11 bits I need to split it to 2 cmds)*/
     __LOG_FW(("Set ELI label value to 7 (since label value is 20 bits long and set constant cmd can supports no more than 11 bits I need to split it to 2 cmds)"));
     ACCEL_CMD_LOAD_PKT_DEST(COPY_BITS_THR15_MPLS_SR_THREE_EL_CONST_0x0_LEN10_TO_PKT_MPLS_label_8__label_val_OFFSET, eli1_cmd_byte_position );
     ACCEL_CMD_LOAD_PKT_DEST(COPY_BITS_THR15_MPLS_SR_THREE_EL_CONST_0x7_LEN10_TO_PKT_MPLS_label_8__label_val_PLUS10_OFFSET, (eli1_cmd_byte_position+1) );
-	__PRAGMA_NO_REORDER
+    __PRAGMA_NO_REORDER
     ACCEL_CMD_TRIG(COPY_BITS_THR15_MPLS_SR_THREE_EL_CONST_0x0_LEN10_TO_PKT_MPLS_label_8__label_val_OFFSET, 0);
     ACCEL_CMD_TRIG(COPY_BITS_THR15_MPLS_SR_THREE_EL_CONST_0x7_LEN10_TO_PKT_MPLS_label_8__label_val_PLUS10_OFFSET, 0);
 
     /* Clear BoS bit to zero */
     __LOG_FW(("Clear BoS bit to zero "));
     ACCEL_CMD_LOAD_PKT_DEST(COPY_BITS_THR15_MPLS_SR_THREE_EL_CONST_0x0_LEN1_TO_PKT_MPLS_label_8__BoS_OFFSET, (eli1_cmd_byte_position+2) );
-	__PRAGMA_NO_REORDER
+    __PRAGMA_NO_REORDER
     ACCEL_CMD_TRIG(COPY_BITS_THR15_MPLS_SR_THREE_EL_CONST_0x0_LEN1_TO_PKT_MPLS_label_8__BoS_OFFSET, 0);
 
     /*------------------------------------------------------------------------------------------------------------------
@@ -1564,14 +1564,14 @@ void PPA_FW(THR15_MPLS_SR_THREE_EL)() {
     /* Label value[19]=1 + clear all bits within 32bits window to zero therefore clear TC, TTL and BoS fields as well */
     __LOG_FW(("Label value[19]=1 + clear all bits within 32bits window to zero therefore clear TC, TTL and BoS fields as well"));
     ACCEL_CMD_LOAD_PKT_DEST(COPY_BITS_THR15_MPLS_SR_THREE_EL_CONST_0x1_LEN1_TO_PKT_MPLS_label_8__label_val_OFFSET, eli1_cmd_byte_position+4 );
-	__PRAGMA_NO_REORDER
+    __PRAGMA_NO_REORDER
     ACCEL_CMD_TRIG(COPY_BITS_THR15_MPLS_SR_THREE_EL_CONST_0x1_LEN1_TO_PKT_MPLS_label_8__label_val_OFFSET, SET_REMAIN_FIELDS_TO_ZERO);
-	__PRAGMA_NO_REORDER
+    __PRAGMA_NO_REORDER
 
     /* Label value[18:0] = Desc<Hash[11:0]> Zero padding */
     __LOG_FW(("Label value[18:0] = Desc<Hash[11:0]> Zero padding"));
     ACCEL_CMD_LOAD_PKT_DEST(COPY_BITS_THR15_MPLS_SR_THREE_EL_DESC_phal2ppa__packet_hash_LEN12_TO_PKT_MPLS_label_8__label_val_PLUS8_OFFSET, (eli1_cmd_byte_position+1) + 4);
-	__PRAGMA_NO_REORDER
+    __PRAGMA_NO_REORDER
     ACCEL_CMD_TRIG(COPY_BITS_THR15_MPLS_SR_THREE_EL_DESC_phal2ppa__packet_hash_LEN12_TO_PKT_MPLS_label_8__label_val_PLUS8_OFFSET, 0);
 
     /*------------------------------------------------------------------------------------------------------------------
@@ -1582,7 +1582,7 @@ void PPA_FW(THR15_MPLS_SR_THREE_EL)() {
     /* Move 8B left size of 4,8,12,16,20,24,28 or 32B (pending offset) to make room for EL & ELI labels */
     __LOG_FW(("Move 8B left size of 4,8,12,16,20,24,28 or 32B (pending offset) to make room for EL & ELI labels"));
     ACCEL_CMD_TRIG(SHIFTLEFT_8_BYTES_THR15_MPLS_SR_THREE_EL_LEN4_FROM_PKT_MPLS_label_1__label_val_MINUS8_OFFSET + (eli2_ofst-40), 0);
-	__PRAGMA_NO_REORDER
+    __PRAGMA_NO_REORDER
 
     /*------------------------------------------------------------------------------------------------------------------
       -  Update ELI label. Since TC and TTL values should be taken from preceding label
@@ -1593,20 +1593,20 @@ void PPA_FW(THR15_MPLS_SR_THREE_EL)() {
     /* Copy 4B of preceding label into ELI label. cpy_preceding_lbl2_cmd_ofst points to the compatible command */
     __LOG_FW(("Copy 4B of preceding label into ELI label"));
     ACCEL_CMD_TRIG(COPY_BYTES_THR15_MPLS_SR_THREE_EL_PKT_expansion_space__reserved_7_LEN4_TO_PKT_MPLS_label_2__label_val_OFFSET + cpy_preceding_lbl2_cmd_ofst, 0);
-	__PRAGMA_NO_REORDER
+    __PRAGMA_NO_REORDER
 
     /* Set ELI label value to 7 (since label value is 20 bits long and set constant cmd can supports no more than 11 bits I need to split it to 2 cmds)*/
     __LOG_FW(("Set ELI label value to 7 (since label value is 20 bits long and set constant cmd can supports no more than 11 bits I need to split it to 2 cmds)"));
     ACCEL_CMD_LOAD_PKT_DEST(COPY_BITS_THR15_MPLS_SR_THREE_EL_CONST_0x0_LEN10_TO_PKT_MPLS_label_8__label_val_OFFSET, eli2_cmd_byte_position );
     ACCEL_CMD_LOAD_PKT_DEST(COPY_BITS_THR15_MPLS_SR_THREE_EL_CONST_0x7_LEN10_TO_PKT_MPLS_label_8__label_val_PLUS10_OFFSET, (eli2_cmd_byte_position+1) );
-	__PRAGMA_NO_REORDER
+    __PRAGMA_NO_REORDER
     ACCEL_CMD_TRIG(COPY_BITS_THR15_MPLS_SR_THREE_EL_CONST_0x0_LEN10_TO_PKT_MPLS_label_8__label_val_OFFSET, 0);
     ACCEL_CMD_TRIG(COPY_BITS_THR15_MPLS_SR_THREE_EL_CONST_0x7_LEN10_TO_PKT_MPLS_label_8__label_val_PLUS10_OFFSET, 0);
 
     /* Clear BoS bit to zero */
     __LOG_FW(("Clear BoS bit to zero "));
     ACCEL_CMD_LOAD_PKT_DEST(COPY_BITS_THR15_MPLS_SR_THREE_EL_CONST_0x0_LEN1_TO_PKT_MPLS_label_8__BoS_OFFSET, (eli2_cmd_byte_position+2) );
-	__PRAGMA_NO_REORDER
+    __PRAGMA_NO_REORDER
     ACCEL_CMD_TRIG(COPY_BITS_THR15_MPLS_SR_THREE_EL_CONST_0x0_LEN1_TO_PKT_MPLS_label_8__BoS_OFFSET, 0);
 
     /*------------------------------------------------------------------------------------------------------------------
@@ -1617,14 +1617,14 @@ void PPA_FW(THR15_MPLS_SR_THREE_EL)() {
     /* Label value[19]=1 + clear all bits within 32bits window to zero therefore clear TC, TTL and BoS fields as well */
     __LOG_FW(("Label value[19]=1 + clear all bits within 32bits window to zero therefore clear TC, TTL and BoS fields as well"));
     ACCEL_CMD_LOAD_PKT_DEST(COPY_BITS_THR15_MPLS_SR_THREE_EL_CONST_0x1_LEN1_TO_PKT_MPLS_label_8__label_val_OFFSET, eli2_cmd_byte_position+4 );
-	__PRAGMA_NO_REORDER
+    __PRAGMA_NO_REORDER
     ACCEL_CMD_TRIG(COPY_BITS_THR15_MPLS_SR_THREE_EL_CONST_0x1_LEN1_TO_PKT_MPLS_label_8__label_val_OFFSET, SET_REMAIN_FIELDS_TO_ZERO);
-	__PRAGMA_NO_REORDER
+    __PRAGMA_NO_REORDER
 
     /* Label value[18:0] = Desc<Hash[11:0]> Zero padding */
     __LOG_FW(("Label value[18:0] = Desc<Hash[11:0]> Zero padding"));
     ACCEL_CMD_LOAD_PKT_DEST(COPY_BITS_THR15_MPLS_SR_THREE_EL_DESC_phal2ppa__packet_hash_LEN12_TO_PKT_MPLS_label_8__label_val_PLUS8_OFFSET, (eli2_cmd_byte_position+1) + 4);
-	__PRAGMA_NO_REORDER
+    __PRAGMA_NO_REORDER
     ACCEL_CMD_TRIG(COPY_BITS_THR15_MPLS_SR_THREE_EL_DESC_phal2ppa__packet_hash_LEN12_TO_PKT_MPLS_label_8__label_val_PLUS8_OFFSET, 0);
 
     /*------------------------------------------------------------------------------------------------------------------
@@ -1635,7 +1635,7 @@ void PPA_FW(THR15_MPLS_SR_THREE_EL)() {
     /* Move 8B left size of 4,8,12,16,20,24,28 or 32B (pending offset) to make room for EL & ELI labels */
     __LOG_FW(("Move 8B left size of 4,8,12,16,20,24,28 or 32B (pending offset) to make room for EL & ELI labels"));
     ACCEL_CMD_TRIG(SHIFTLEFT_8_BYTES_THR15_MPLS_SR_THREE_EL_LEN4_FROM_PKT_MPLS_label_1__label_val_MINUS16_OFFSET + (eli3_ofst-32), 0);
-	__PRAGMA_NO_REORDER
+    __PRAGMA_NO_REORDER
 
     /*------------------------------------------------------------------------------------------------------------------
       -  Update ELI label. Since TC and TTL values should be taken from preceding label
@@ -1646,20 +1646,20 @@ void PPA_FW(THR15_MPLS_SR_THREE_EL)() {
     /* Copy 4B of preceding label into ELI label. cpy_preceding_lbl2_cmd_ofst points to the compatible command */
     __LOG_FW(("Copy 4B of preceding label into ELI label"));
     ACCEL_CMD_TRIG(COPY_BYTES_THR15_MPLS_SR_THREE_EL_PKT_expansion_space__reserved_7_LEN4_TO_PKT_MPLS_label_2__label_val_OFFSET + cpy_preceding_lbl3_cmd_ofst, 0);
-	__PRAGMA_NO_REORDER
+    __PRAGMA_NO_REORDER
 
     /* Set ELI label value to 7 (since label value is 20 bits long and set constant cmd can supports no more than 11 bits I need to split it to 2 cmds)*/
     __LOG_FW(("Set ELI label value to 7 (since label value is 20 bits long and set constant cmd can supports no more than 11 bits I need to split it to 2 cmds)"));
     ACCEL_CMD_LOAD_PKT_DEST(COPY_BITS_THR15_MPLS_SR_THREE_EL_CONST_0x0_LEN10_TO_PKT_MPLS_label_8__label_val_OFFSET, eli3_cmd_byte_position );
     ACCEL_CMD_LOAD_PKT_DEST(COPY_BITS_THR15_MPLS_SR_THREE_EL_CONST_0x7_LEN10_TO_PKT_MPLS_label_8__label_val_PLUS10_OFFSET, (eli3_cmd_byte_position+1) );
-	__PRAGMA_NO_REORDER
+    __PRAGMA_NO_REORDER
     ACCEL_CMD_TRIG(COPY_BITS_THR15_MPLS_SR_THREE_EL_CONST_0x0_LEN10_TO_PKT_MPLS_label_8__label_val_OFFSET, 0);
     ACCEL_CMD_TRIG(COPY_BITS_THR15_MPLS_SR_THREE_EL_CONST_0x7_LEN10_TO_PKT_MPLS_label_8__label_val_PLUS10_OFFSET, 0);
 
     /* Clear BoS bit to zero */
     __LOG_FW(("Clear BoS bit to zero "));
     ACCEL_CMD_LOAD_PKT_DEST(COPY_BITS_THR15_MPLS_SR_THREE_EL_CONST_0x0_LEN1_TO_PKT_MPLS_label_8__BoS_OFFSET, (eli3_cmd_byte_position+2) );
-	__PRAGMA_NO_REORDER
+    __PRAGMA_NO_REORDER
     ACCEL_CMD_TRIG(COPY_BITS_THR15_MPLS_SR_THREE_EL_CONST_0x0_LEN1_TO_PKT_MPLS_label_8__BoS_OFFSET, 0);
 
     /*------------------------------------------------------------------------------------------------------------------
@@ -1670,14 +1670,14 @@ void PPA_FW(THR15_MPLS_SR_THREE_EL)() {
     /* Label value[19]=1 + clear all bits within 32bits window to zero therefore clear TC, TTL and BoS fields as well */
     __LOG_FW(("Label value[19]=1 + clear all bits within 32bits window to zero therefore clear TC, TTL and BoS fields as well"));
     ACCEL_CMD_LOAD_PKT_DEST(COPY_BITS_THR15_MPLS_SR_THREE_EL_CONST_0x1_LEN1_TO_PKT_MPLS_label_8__label_val_OFFSET, eli3_cmd_byte_position+4 );
-	__PRAGMA_NO_REORDER
+    __PRAGMA_NO_REORDER
     ACCEL_CMD_TRIG(COPY_BITS_THR15_MPLS_SR_THREE_EL_CONST_0x1_LEN1_TO_PKT_MPLS_label_8__label_val_OFFSET, SET_REMAIN_FIELDS_TO_ZERO);
-	__PRAGMA_NO_REORDER
+    __PRAGMA_NO_REORDER
 
     /* Label value[18:0] = Desc<Hash[11:0]> Zero padding */
     __LOG_FW(("Label value[18:0] = Desc<Hash[11:0]> Zero padding"));
     ACCEL_CMD_LOAD_PKT_DEST(COPY_BITS_THR15_MPLS_SR_THREE_EL_DESC_phal2ppa__packet_hash_LEN12_TO_PKT_MPLS_label_8__label_val_PLUS8_OFFSET, (eli3_cmd_byte_position+1) + 4);
-	__PRAGMA_NO_REORDER
+    __PRAGMA_NO_REORDER
     ACCEL_CMD_TRIG(COPY_BITS_THR15_MPLS_SR_THREE_EL_DESC_phal2ppa__packet_hash_LEN12_TO_PKT_MPLS_label_8__label_val_PLUS8_OFFSET, 0);
 
     /*------------------------------------------------------------------------------------------------------------------
@@ -1729,9 +1729,9 @@ void PPA_FW(THR16_SGT_NetAddMSB)() {
     /*xt_iss_client_command("profile","disable");  _exit(0); */
 
 
-    uint8_t	vlans_size,timestamp_size,pkt_size_to_move ;
-    uint8_t	egress_tag0_exists,egress_inner_special_tag,egress_timestamp_tagged_0,egress_timestamp_tagged_1;
-    uint8_t	out_sgt_tag_ofst, out_sgt_tag_position ;  
+    uint8_t vlans_size,timestamp_size,pkt_size_to_move ;
+    uint8_t egress_tag0_exists,egress_inner_special_tag,egress_timestamp_tagged_0,egress_timestamp_tagged_1;
+    uint8_t out_sgt_tag_ofst, out_sgt_tag_position ;  
 
     /* Get pointer to descriptor */
     struct ppa_in_desc* thr16_desc_ptr = AC5P_MEM_CAST(AC5P_DESC_REGs_lo,ppa_in_desc);
@@ -1802,21 +1802,21 @@ void PPA_FW(THR16_SGT_NetAddMSB)() {
     /* Move left 4B packet size of 12B+timestamp_size(0,8,16B)+VLANs_size(0,4,8,12,16B)  */
     __LOG_FW(("Move left 4B packet size of 12B+timestamp_size(0,8,16B)+VLANs_size(0,4,8,12,16B) "));
     if (pkt_size_to_move <= 32)
-	{   /* Packet size to move is less than 32B, move the packet in one command */
+    {   /* Packet size to move is less than 32B, move the packet in one command */
         __LOG_FW(("Packet size to move is less than 32B, move the packet in one command "));
-		ACCEL_CMD_LOAD_LENGTH(SHIFTLEFT_4_BYTES_THR16_SGT_NetAddMSB_LEN12_FROM_PKT_mac_da_47_32_OFFSET, (pkt_size_to_move-1));
+        ACCEL_CMD_LOAD_LENGTH(SHIFTLEFT_4_BYTES_THR16_SGT_NetAddMSB_LEN12_FROM_PKT_mac_da_47_32_OFFSET, (pkt_size_to_move-1));
         __PRAGMA_NO_REORDER
-		ACCEL_CMD_TRIG(SHIFTLEFT_4_BYTES_THR16_SGT_NetAddMSB_LEN12_FROM_PKT_mac_da_47_32_OFFSET, 0);
+        ACCEL_CMD_TRIG(SHIFTLEFT_4_BYTES_THR16_SGT_NetAddMSB_LEN12_FROM_PKT_mac_da_47_32_OFFSET, 0);
         __PRAGMA_NO_REORDER
-	}
+    }
     else
     {   /* Packet size to move is more than 32B, move the packet in two commands */
         __LOG_FW(("Packet size to move is more than 32B, move the packet in two commands"));
-		ACCEL_CMD_LOAD_LENGTH(SHIFTLEFT_4_BYTES_THR16_SGT_NetAddMSB_LEN12_FROM_PKT_mac_da_47_32_PLUS32_OFFSET, ((pkt_size_to_move-32)-1) );
+        ACCEL_CMD_LOAD_LENGTH(SHIFTLEFT_4_BYTES_THR16_SGT_NetAddMSB_LEN12_FROM_PKT_mac_da_47_32_PLUS32_OFFSET, ((pkt_size_to_move-32)-1) );
         __PRAGMA_NO_REORDER
         ACCEL_CMD_TRIG(SHIFTLEFT_4_BYTES_THR16_SGT_NetAddMSB_LEN32_FROM_PKT_mac_da_47_32_OFFSET, 0);
         __PRAGMA_NO_REORDER
-		ACCEL_CMD_TRIG(SHIFTLEFT_4_BYTES_THR16_SGT_NetAddMSB_LEN12_FROM_PKT_mac_da_47_32_PLUS32_OFFSET, 0);
+        ACCEL_CMD_TRIG(SHIFTLEFT_4_BYTES_THR16_SGT_NetAddMSB_LEN12_FROM_PKT_mac_da_47_32_PLUS32_OFFSET, 0);
         __PRAGMA_NO_REORDER
     }
 
@@ -1871,9 +1871,9 @@ void PPA_FW(THR17_SGT_NetFix)() {
     /*xt_iss_client_command("profile","disable");  _exit(0); */
 
 
-    uint8_t	vlans_size,timestamp_size,pkt_size_to_move ;
-    uint8_t	egress_tag0_exists,egress_inner_special_tag,egress_timestamp_tagged_0,egress_timestamp_tagged_1;
-    uint8_t	out_sgt_tag_ofst, out_sgt_tag_position ;  
+    uint8_t vlans_size,timestamp_size,pkt_size_to_move ;
+    uint8_t egress_tag0_exists,egress_inner_special_tag,egress_timestamp_tagged_0,egress_timestamp_tagged_1;
+    uint8_t out_sgt_tag_ofst, out_sgt_tag_position ;  
 
     /* Get pointer to descriptor */
     struct ppa_in_desc* thr17_desc_ptr = AC5P_MEM_CAST(AC5P_DESC_REGs_lo,ppa_in_desc);
@@ -1982,8 +1982,8 @@ void PPA_FW(THR18_SGT_NetRemove)() {
     /*xt_iss_client_command("profile","disable");  _exit(0); */
 
 
-    uint8_t	vlans_size,timestamp_size,pkt_size_to_move ;
-    uint8_t	egress_tag0_exists,egress_inner_special_tag,egress_timestamp_tagged_0,egress_timestamp_tagged_1;
+    uint8_t vlans_size,timestamp_size,pkt_size_to_move ;
+    uint8_t egress_tag0_exists,egress_inner_special_tag,egress_timestamp_tagged_0,egress_timestamp_tagged_1;
 
     /* Get pointer to descriptor */
     struct ppa_in_desc* thr18_desc_ptr = AC5P_MEM_CAST(AC5P_DESC_REGs_lo,ppa_in_desc);
@@ -2048,19 +2048,19 @@ void PPA_FW(THR18_SGT_NetRemove)() {
     /* Move right 4B packet size of 12B+timestamp_size(0,8,16B)+VLANs_size(0,4,8,12,16B)  */
     __LOG_FW(("Move right 4B packet size of 12B+timestamp_size(0,8,16B)+VLANs_size(0,4,8,12,16B) "));
     if (pkt_size_to_move <= 32)
-	{   /* Packet size to move is less than 32B, move the packet in one command */
+    {   /* Packet size to move is less than 32B, move the packet in one command */
         __LOG_FW(("Packet size to move is less than 32B, move the packet in one command "));
-		ACCEL_CMD_LOAD_LENGTH(SHIFTRIGHT_4_BYTES_THR18_SGT_NetRemove_LEN12_FROM_PKT_mac_da_47_32_OFFSET, (pkt_size_to_move-1));
+        ACCEL_CMD_LOAD_LENGTH(SHIFTRIGHT_4_BYTES_THR18_SGT_NetRemove_LEN12_FROM_PKT_mac_da_47_32_OFFSET, (pkt_size_to_move-1));
         __PRAGMA_NO_REORDER
-		ACCEL_CMD_TRIG(SHIFTRIGHT_4_BYTES_THR18_SGT_NetRemove_LEN12_FROM_PKT_mac_da_47_32_OFFSET, 0);
+        ACCEL_CMD_TRIG(SHIFTRIGHT_4_BYTES_THR18_SGT_NetRemove_LEN12_FROM_PKT_mac_da_47_32_OFFSET, 0);
         __PRAGMA_NO_REORDER
-	}
+    }
     else
     {   /* Packet size to move is more than 32B, move the packet in two commands */
         __LOG_FW(("Packet size to move is more than 32B, move the packet in two commands"));
-		ACCEL_CMD_LOAD_LENGTH(SHIFTRIGHT_4_BYTES_THR18_SGT_NetRemove_LEN12_FROM_PKT_mac_da_47_32_PLUS32_OFFSET, ((pkt_size_to_move-32)-1) );
+        ACCEL_CMD_LOAD_LENGTH(SHIFTRIGHT_4_BYTES_THR18_SGT_NetRemove_LEN12_FROM_PKT_mac_da_47_32_PLUS32_OFFSET, ((pkt_size_to_move-32)-1) );
         __PRAGMA_NO_REORDER
-		ACCEL_CMD_TRIG(SHIFTRIGHT_4_BYTES_THR18_SGT_NetRemove_LEN12_FROM_PKT_mac_da_47_32_PLUS32_OFFSET, 0);
+        ACCEL_CMD_TRIG(SHIFTRIGHT_4_BYTES_THR18_SGT_NetRemove_LEN12_FROM_PKT_mac_da_47_32_PLUS32_OFFSET, 0);
         __PRAGMA_NO_REORDER
         ACCEL_CMD_TRIG(SHIFTRIGHT_4_BYTES_THR18_SGT_NetRemove_LEN32_FROM_PKT_mac_da_47_32_OFFSET, 0);
         __PRAGMA_NO_REORDER
@@ -2147,8 +2147,8 @@ void PPA_FW(THR20_SGT_eDSARemove)() {
     /*xt_iss_client_command("profile","disable");  _exit(0); */
 
 
-    uint8_t	timestamp_size ;
-    uint8_t	egress_timestamp_tagged_0,egress_timestamp_tagged_1;
+    uint8_t timestamp_size ;
+    uint8_t egress_timestamp_tagged_0,egress_timestamp_tagged_1;
 
     /* Get pointer to descriptor */
     struct ppa_in_desc* thr20_desc_ptr = AC5P_MEM_CAST(AC5P_DESC_REGs_lo,ppa_in_desc);
@@ -2183,24 +2183,24 @@ void PPA_FW(THR20_SGT_eDSARemove)() {
     {   /* There is no Timestamp therefore packet size is 32 bytes */
         __LOG_FW(("There is no Timestamp therefore packet size is 32 bytes"));
 
-		/* Move right the packet by 4 bytes to remove SGT tag */
+        /* Move right the packet by 4 bytes to remove SGT tag */
         __LOG_FW(("Move right the packet by 4 bytes to remove SGT tag"));
-		ACCEL_CMD_TRIG(SHIFTRIGHT_4_BYTES_THR20_SGT_eDSARemove_LEN32_FROM_PKT_mac_da_47_32_OFFSET, 0);
+        ACCEL_CMD_TRIG(SHIFTRIGHT_4_BYTES_THR20_SGT_eDSARemove_LEN32_FROM_PKT_mac_da_47_32_OFFSET, 0);
         __PRAGMA_NO_REORDER
     }
     else
     {   /* Timestamp exists therefore packet size is bigger than 32 bytes which means we need to shift the packet by 2 accelerator commands */
         __LOG_FW(("Timestamp exists therefore packet size is bigger than 32 bytes which means we need to shift the packet by 2 accelerator commands"));
 
-		ACCEL_CMD_LOAD_LENGTH(SHIFTRIGHT_4_BYTES_THR20_SGT_eDSARemove_LEN4_FROM_PKT_mac_da_47_32_PLUS32_OFFSET, (timestamp_size-1) );
+        ACCEL_CMD_LOAD_LENGTH(SHIFTRIGHT_4_BYTES_THR20_SGT_eDSARemove_LEN4_FROM_PKT_mac_da_47_32_PLUS32_OFFSET, (timestamp_size-1) );
         __PRAGMA_NO_REORDER
-		/* First move right the last bytes (Timestamp bytes) */
+        /* First move right the last bytes (Timestamp bytes) */
         __LOG_FW(("First move right the last bytes (Timestamp bytes)"));
-		ACCEL_CMD_TRIG(SHIFTRIGHT_4_BYTES_THR20_SGT_eDSARemove_LEN4_FROM_PKT_mac_da_47_32_PLUS32_OFFSET, 0);
+        ACCEL_CMD_TRIG(SHIFTRIGHT_4_BYTES_THR20_SGT_eDSARemove_LEN4_FROM_PKT_mac_da_47_32_PLUS32_OFFSET, 0);
         __PRAGMA_NO_REORDER
-		/* Then move right the first 32 bytes */
+        /* Then move right the first 32 bytes */
         __LOG_FW(("Then move right the first 32 bytes"));
-		ACCEL_CMD_TRIG(SHIFTRIGHT_4_BYTES_THR20_SGT_eDSARemove_LEN32_FROM_PKT_mac_da_47_32_OFFSET, 0);
+        ACCEL_CMD_TRIG(SHIFTRIGHT_4_BYTES_THR20_SGT_eDSARemove_LEN32_FROM_PKT_mac_da_47_32_OFFSET, 0);
         __PRAGMA_NO_REORDER
     }
 
@@ -2369,34 +2369,34 @@ void PPA_FW(THR23_SGT_GBPRemoveIPv4)() {
     /*xt_iss_client_command("profile","enable");             */
     /*xt_iss_client_command("profile","disable");  _exit(0); */
     
-    uint32_t	vlan_tag_offset;
+    uint32_t    vlan_tag_offset;
 
     /* Get pointer to descriptor */
     struct ppa_in_desc* thr23_desc_ptr = AC5P_MEM_CAST(AC5P_DESC_REGs_lo,ppa_in_desc);
 
-	 
+     
     /*------------------------------------------------------------------------------------------------------------------------------------------------
       - Check if packet includes VLAN tag
       - Remove 4 bytes of SGT LSB TAG by right shift taking into consideration existence or nonexistence of VLAN TAG  
         NOTE: Since accelerator command can shift maximum 32B and size of packet till SGT tag is more than 32B need to do it using 2 accelerators
       ------------------------------------------------------------------------------------------------------------------------------------------------*/
 
-	/* Get Desc<pha metadata>[Egress Tag0 Exists] field. 1 bit size placed in PHA metadata[2] (byte 0 bit 2) 
+    /* Get Desc<pha metadata>[Egress Tag0 Exists] field. 1 bit size placed in PHA metadata[2] (byte 0 bit 2) 
        Calculate vlan tag offset: 0 if there is no vlan, 4 if vlan exists */ 
     __LOG_FW(("Get Desc<pha metadata>[Egress Tag0 Exists] field and calculates vlan offset"));
     vlan_tag_offset = thr23_desc_ptr->phal2ppa.pha_metadata0 & 0x4 ;
     __LOG_PARAM_FW(thr23_desc_ptr->phal2ppa.pha_metadata0);
     __LOG_PARAM_FW(vlan_tag_offset);
                         
-	/* First move right the last 16 bytes(no vlan) or 20 bytes(with vlan) 
+    /* First move right the last 16 bytes(no vlan) or 20 bytes(with vlan) 
        SHIFTRIGHT LEN16 & LEN20 commands are placed in memory one after the other and are triggered pending vlan_tag_offset  */
     __LOG_FW(("First move right the last 16(no vlan) or 20(with vlan) bytes"));
-	ACCEL_CMD_TRIG(SHIFTRIGHT_4_BYTES_THR23_SGT_GBPRemoveIPv4_LEN16_FROM_PKT_version_PLUS32_OFFSET + vlan_tag_offset, 0);
+    ACCEL_CMD_TRIG(SHIFTRIGHT_4_BYTES_THR23_SGT_GBPRemoveIPv4_LEN16_FROM_PKT_version_PLUS32_OFFSET + vlan_tag_offset, 0);
     __PRAGMA_NO_REORDER
 
-	/* Then move right the first 32 bytes */
+    /* Then move right the first 32 bytes */
     __LOG_FW(("Then move right the first 32 bytes"));
-	ACCEL_CMD_TRIG(SHIFTRIGHT_4_BYTES_THR23_SGT_GBPRemoveIPv4_LEN32_FROM_PKT_version_OFFSET, 0);
+    ACCEL_CMD_TRIG(SHIFTRIGHT_4_BYTES_THR23_SGT_GBPRemoveIPv4_LEN32_FROM_PKT_version_OFFSET, 0);
     __PRAGMA_NO_REORDER
 
 
@@ -2508,38 +2508,38 @@ void PPA_FW(THR24_SGT_GBPRemoveIPv6)() {
     /*xt_iss_client_command("profile","enable");             */
     /*xt_iss_client_command("profile","disable");  _exit(0); */
     
-    uint32_t	vlan_tag_offset;
+    uint32_t    vlan_tag_offset;
 
     /* Get pointer to descriptor */
     struct ppa_in_desc* thr24_desc_ptr = AC5P_MEM_CAST(AC5P_DESC_REGs_lo,ppa_in_desc);
 
-	 
+     
     /*------------------------------------------------------------------------------------------------------------------------------------------------
       - Check if packet includes VLAN tag
       - Remove 4 bytes of SGT LSB TAG by right shift taking into consideration existence or nonexistence of VLAN TAG  
         NOTE: Since accelerator command can shift maximum 32B and size of packet till SGT tag is more than 32B need to do it using 3 accelerators
       ------------------------------------------------------------------------------------------------------------------------------------------------*/
 
-	/* Get Desc<pha metadata>[Egress Tag0 Exists] field. 1 bit size placed in PHA metadata[2] (byte 0 bit 2) 
+    /* Get Desc<pha metadata>[Egress Tag0 Exists] field. 1 bit size placed in PHA metadata[2] (byte 0 bit 2) 
        Calculate vlan tag offset: 0 if there is no vlan, 4 if vlan exists */ 
     __LOG_FW(("Get Desc<pha metadata>[Egress Tag0 Exists] field and calculates vlan offset"));
     vlan_tag_offset = thr24_desc_ptr->phal2ppa.pha_metadata0 & 0x4 ;
     __LOG_PARAM_FW(vlan_tag_offset);
                         
-	/* First move right the last 4 bytes(no vlan) or 8 bytes(with vlan) 
+    /* First move right the last 4 bytes(no vlan) or 8 bytes(with vlan) 
        SHIFTRIGHT LEN4 & LEN8 commands are placed in memory one after the other and are triggered pending vlan_tag_offset  */
     __LOG_FW(("First move right the last 4(no vlan) or 8(with vlan) bytes"));
-	ACCEL_CMD_TRIG(SHIFTRIGHT_4_BYTES_THR24_SGT_GBPRemoveIPv6_LEN4_FROM_PKT_version_PLUS64_OFFSET + vlan_tag_offset, 0);
+    ACCEL_CMD_TRIG(SHIFTRIGHT_4_BYTES_THR24_SGT_GBPRemoveIPv6_LEN4_FROM_PKT_version_PLUS64_OFFSET + vlan_tag_offset, 0);
     __PRAGMA_NO_REORDER
 
-	/* Then move right the second 32 bytes */
+    /* Then move right the second 32 bytes */
     __LOG_FW(("Then move right the second 32 bytes"));
-	ACCEL_CMD_TRIG(SHIFTRIGHT_4_BYTES_THR24_SGT_GBPRemoveIPv6_LEN32_FROM_PKT_version_PLUS32_OFFSET, 0);
+    ACCEL_CMD_TRIG(SHIFTRIGHT_4_BYTES_THR24_SGT_GBPRemoveIPv6_LEN32_FROM_PKT_version_PLUS32_OFFSET, 0);
     __PRAGMA_NO_REORDER
 
-	/* Then move right the first 32 bytes */
+    /* Then move right the first 32 bytes */
     __LOG_FW(("Then move right the first 32 bytes"));
-	ACCEL_CMD_TRIG(SHIFTRIGHT_4_BYTES_THR24_SGT_GBPRemoveIPv6_LEN32_FROM_PKT_version_OFFSET, 0);
+    ACCEL_CMD_TRIG(SHIFTRIGHT_4_BYTES_THR24_SGT_GBPRemoveIPv6_LEN32_FROM_PKT_version_OFFSET, 0);
     __PRAGMA_NO_REORDER
 
 
@@ -2777,7 +2777,7 @@ void PPA_FW(THR46_SFLOW_IPv4)() {
     /* Move left IPv4(20B) + UDP(8B) by 28 bytes to make room for sFlow header */
     __LOG_FW(("Move left IPv4(20B) + UDP(8B) by 28 bytes to make room for sFlow header"));
     ACCEL_CMD_TRIG(SHIFTLEFT_28_BYTES_THR46_SFLOW_IPv4_LEN28_FROM_PKT_IPv4_Header__version_OFFSET, 0);
-	__PRAGMA_NO_REORDER
+    __PRAGMA_NO_REORDER
 
 
     /*------------------------------------------------------------------------------------------------------------------------------------------------
@@ -2823,18 +2823,18 @@ void PPA_FW(THR46_SFLOW_IPv4)() {
     /* Sum old IP Total Length */
     __LOG_FW(("Sum old IP Total Length using accelerator cmd"));
     ACCEL_CMD_TRIG(CSUM_LOAD_OLD_THR46_SFLOW_IPv4_LEN2_FROM_PKT_IPv4_Header__total_length_OFFSET, 0);
-	__PRAGMA_NO_REORDER
+    __PRAGMA_NO_REORDER
     /* Update new IP header total length: IPv4<Total Length> + 28 */
     __LOG_FW(("Update new IP header total length: IPv4<Total Length> + 28"));
     ACCEL_CMD_TRIG(ADD_BITS_THR46_SFLOW_IPv4_CONST_0x1C_LEN16_TO_PKT_IPv4_Header__total_length_OFFSET, 0);
-	__PRAGMA_NO_REORDER
+    __PRAGMA_NO_REORDER
     /* Sum new Total Length */
     __LOG_FW(("Sum new Total Length"));
     ACCEL_CMD_TRIG(CSUM_LOAD_NEW_THR46_SFLOW_IPv4_LEN2_FROM_PKT_IPv4_Header__total_length_OFFSET, 0);
     /* Sum old IPv4 CS */
     __LOG_FW(("Sum old IPv4 CS"));
     ACCEL_CMD_TRIG(CSUM_LOAD_OLD_THR46_SFLOW_IPv4_LEN2_FROM_PKT_IPv4_Header__header_checksum_OFFSET, 0);
-	__PRAGMA_NO_REORDER
+    __PRAGMA_NO_REORDER
     /* Store the new IPv4 CS */
     __LOG_FW(("Store the new IPv4 CS"));
     ACCEL_CMD_TRIG(CSUM_STORE_IP_THR46_SFLOW_IPv4_TO_PKT_IPv4_Header__header_checksum_OFFSET, 0);
@@ -2864,7 +2864,7 @@ void PPA_FW(THR46_SFLOW_IPv4)() {
     __LOG_FW(("Read TOD word 0 which represents nano seconds field"));
     ts_nano_sec = READ_TOD_IF_REG(TOD_WORD_0, tai_sel);
     __LOG_PARAM_FW(ts_nano_sec);
-	__PRAGMA_NO_REORDER
+    __PRAGMA_NO_REORDER
 
     /* Check for wraparound */
     __LOG_FW(("Read again seconds (TOD word 1) to check for wraparound"));
@@ -2960,12 +2960,12 @@ void PPA_FW(THR47_SFLOW_IPv6)() {
     /* First, move left 32 bytes of IPv6 by 40 bytes */
     __LOG_FW(("First, move left 32 bytes of IPv6 by 40 bytes"));
     ACCEL_CMD_TRIG(SHIFTLEFT_40_BYTES_THR47_SFLOW_IPv6_LEN32_FROM_PKT_IPv6_Header__version_OFFSET, 0);
-	__PRAGMA_NO_REORDER
+    __PRAGMA_NO_REORDER
 
     /* Now, move left the last 8 bytes of IPv6 + 8 bytes of UDP header by 40 bytes */
     __LOG_FW(("Now, move left the last 8 bytes of IPv6 + 8 bytes of UDP header by 40 bytes"));
     ACCEL_CMD_TRIG(SHIFTLEFT_40_BYTES_THR47_SFLOW_IPv6_LEN16_FROM_PKT_IPv6_Header__version_PLUS32_OFFSET, 0);
-	__PRAGMA_NO_REORDER
+    __PRAGMA_NO_REORDER
 
 
     /*------------------------------------------------------------------------------------------------------------------------------------------------
@@ -3037,7 +3037,7 @@ void PPA_FW(THR47_SFLOW_IPv6)() {
     __LOG_FW(("Read TOD word 0 which represents nano seconds field"));
     ts_nano_sec = READ_TOD_IF_REG(TOD_WORD_0, tai_sel);
     __LOG_PARAM_FW(ts_nano_sec);
-	__PRAGMA_NO_REORDER
+    __PRAGMA_NO_REORDER
 
     /* Check for wraparound */
     __LOG_FW(("Read again seconds (TOD word 1) to check for wraparound"));
@@ -3157,7 +3157,7 @@ void PPA_FW(THR48_SRV6_Best_Effort)() {
     /* Copy the service-ID from IPv6.DIP[15:0] to Function location in IPv6.DIP[47:32] */
     __LOG_FW(("Copy the service-ID from IPv6.DIP[15:0] to Function location in IPv6.DIP[47:32]"));
     ACCEL_CMD_TRIG(COPY_BYTES_THR48_SRV6_Best_Effort_PKT_IPv6_Header__dip3_low_LEN2_TO_PKT_IPv6_Header__dip2_low_OFFSET, 0);
-	__PRAGMA_NO_REORDER
+    __PRAGMA_NO_REORDER
 
 
     /*------------------------------------------------------------------------------------------------------------------------------------------------
@@ -3168,7 +3168,7 @@ void PPA_FW(THR48_SRV6_Best_Effort)() {
     /* Copy Desc<Copy-Reserved[11:2]> to APP-ID location in IPv6.DIP[15:6] */
     __LOG_FW(("Copy Desc<Copy-Reserved[11:2]> to APP-ID location in IPv6.DIP[15:6]"));
     ACCEL_CMD_TRIG(COPY_BITS_THR48_SRV6_Best_Effort_DESC_phal2ppa__copy_reserved_PLUS8_LEN10_TO_PKT_IPv6_Header__dip3_low_OFFSET, SET_REMAIN_FIELDS_TO_ZERO);
-	__PRAGMA_NO_REORDER
+    __PRAGMA_NO_REORDER
 
 
     /*------------------------------------------------------------------------------------------------------------------------------------------------
@@ -3268,7 +3268,7 @@ void PPA_FW(THR49_SRV6_Source_Node_1_CONTAINER)() {
        SGT ID location in packet: 32B (extension space) + 36B(IPv6 till DIP 24B + Locator 80b + Function 16b) */
     __LOG_FW(("Copy Source ID value to SGT-ID location in IPv6.DIP[31:16] (was used to store the FirstBit and LastBit)"));
     PPA_FW_SP_SHORT_WRITE( (AC5P_PKT_REGs_lo + 32 + 36) , sourceIdValue );
-	__PRAGMA_NO_REORDER
+    __PRAGMA_NO_REORDER
 
 
     /*------------------------------------------------------------------------------------------------------------------------------------------------
@@ -3278,11 +3278,11 @@ void PPA_FW(THR49_SRV6_Source_Node_1_CONTAINER)() {
     /* Move left the first 32 bytes of IPv6 */
     __LOG_FW(("Move left the first 32 bytes"));
     ACCEL_CMD_TRIG(SHIFTLEFT_24_BYTES_THR49_SRV6_Source_Node_1_CONTAINER_LEN32_FROM_PKT_IPv6_Header__version_OFFSET, 0);
-	__PRAGMA_NO_REORDER
+    __PRAGMA_NO_REORDER
     /* Move left the last 8 bytes of IPv6 */
     __LOG_FW(("Move left the last 8 bytes of IPv6"));
     ACCEL_CMD_TRIG(SHIFTLEFT_24_BYTES_THR49_SRV6_Source_Node_1_CONTAINER_LEN8_FROM_PKT_IPv6_Header__version_PLUS32_OFFSET, 0);
-	__PRAGMA_NO_REORDER
+    __PRAGMA_NO_REORDER
 
 
     /*------------------------------------------------------------------------------------------------------------------------------------------------
@@ -3401,15 +3401,15 @@ void PPA_FW(THR50_SRV6_Source_Node_First_Pass_1_CONTAINER)() {
     /* Move left the first 32 bytes */
     __LOG_FW(("Move left the first 32 bytes"));
     ACCEL_CMD_TRIG(SHIFTLEFT_16_BYTES_THR50_SRV6_Source_Node_First_Pass_1_CONTAINER_LEN32_FROM_PKT_mac_header__mac_da_47_32_OFFSET, 0);
-	__PRAGMA_NO_REORDER
+    __PRAGMA_NO_REORDER
     /* Move the next 32 bytes */
     __LOG_FW(("Move left the next 32 bytes"));
     ACCEL_CMD_TRIG(SHIFTLEFT_16_BYTES_THR50_SRV6_Source_Node_First_Pass_1_CONTAINER_LEN32_FROM_PKT_mac_header__mac_da_47_32_PLUS32_OFFSET, 0);
-	__PRAGMA_NO_REORDER
+    __PRAGMA_NO_REORDER
     /* Move the last 6 bytes */
     __LOG_FW(("Move left the last 6 bytes"));
     ACCEL_CMD_TRIG(SHIFTLEFT_16_BYTES_THR50_SRV6_Source_Node_First_Pass_1_CONTAINER_LEN6_FROM_PKT_mac_header__mac_da_47_32_PLUS64_OFFSET, 0);
-	__PRAGMA_NO_REORDER
+    __PRAGMA_NO_REORDER
 
 
     /*------------------------------------------------------------------------------------------------------------------------------------------------
@@ -3418,7 +3418,7 @@ void PPA_FW(THR50_SRV6_Source_Node_First_Pass_1_CONTAINER)() {
     /* Copy IPv6 SIP to Container2 (MINUS16 in command since we already moved the packet left) */
     __LOG_FW(("Copy IPv6 SIP to Container2 (MINUS16 in command since we already moved the packet left)"));
     ACCEL_CMD_TRIG(COPY_BYTES_THR50_SRV6_Source_Node_First_Pass_1_CONTAINER_PKT_IPv6_Header__sip0_high_MINUS16_LEN16_TO_PKT_SRv6_Segment2_Header__dip0_high_OFFSET, 0);
-	__PRAGMA_NO_REORDER
+    __PRAGMA_NO_REORDER
 
 
     /*------------------------------------------------------------------------------------------------------------------------------------------------
@@ -3563,15 +3563,15 @@ void PPA_FW(THR51_SRV6_Source_Node_Second_Pass_3_CONTAINER)() {
         __LOG_FW(("no vlan"));
 
         /*------------------------------------------------------------------------------------------------------------------------------------------------
-	      - Update Desc<fw_bc_modification> field
+          - Update Desc<fw_bc_modification> field
           ------------------------------------------------------------------------------------------------------------------------------------------------*/
  
        /* Indicates HW about the new starting point of the packet header. In this case we add 40B but remove 54B so total minus 14B (0xF2) */
         __LOG_FW(("Indicates HW about the new starting point of the packet header. In this case we add 40B but remove 54B so total minus 14B (0xF2)"));
         ACCEL_CMD_TRIG(COPY_BITS_THR51_SRV6_Source_Node_Second_Pass_3_CONTAINER_CONST_0xF2_LEN8_TO_DESC_ppa_internal_desc__fw_bc_modification_OFFSET, 0);
 
-	    /*------------------------------------------------------------------------------------------------------------------------------------------------
-	      - Move Generic TS(54B),L2(14B) and IPv6(40B) headers left by 40 bytes to make room for SRH(8B) + Container0(16B) + Container1(16B)
+        /*------------------------------------------------------------------------------------------------------------------------------------------------
+          - Move Generic TS(54B),L2(14B) and IPv6(40B) headers left by 40 bytes to make room for SRH(8B) + Container0(16B) + Container1(16B)
           - Need to do it in 4 commands since need to move more than 32B (108B)  
           ------------------------------------------------------------------------------------------------------------------------------------------------*/
 
@@ -3602,7 +3602,7 @@ void PPA_FW(THR51_SRV6_Source_Node_Second_Pass_3_CONTAINER)() {
            HW accelerator will add the offset to the current pkt src and dst values and so will point to the exact location */
         __LOG_FW(("Set offset register to point to L2"));
         PPA_FW_SP_WRITE(PPN_IO_REG_PKT_HDR_OFST_ADDR, 8); 
-		__PRAGMA_NO_REORDER
+        __PRAGMA_NO_REORDER
 
 
         /*------------------------------------------------------------------------------------------------------------------------------------------------
@@ -3628,8 +3628,8 @@ void PPA_FW(THR51_SRV6_Source_Node_Second_Pass_3_CONTAINER)() {
         ACCEL_CMD_TRIG(COPY_BYTES_THR51_SRV6_Source_Node_Second_Pass_3_CONTAINER_OFFSET8_PKT_no_vlan__Generic_TS_Data__data_35_32_MINUS40_LEN4_TO_PKT_no_vlan__SRv6_Header__last_entry_OFFSET, 0);
  
 
-	    /*------------------------------------------------------------------------------------------------------------------------------------------------
-	      - Update IPv6 
+        /*------------------------------------------------------------------------------------------------------------------------------------------------
+          - Update IPv6 
           ------------------------------------------------------------------------------------------------------------------------------------------------*/
 
         /* IPv6.Payload Length += 56 (16B in pass1 and 40B in pass2) */           
@@ -3658,22 +3658,22 @@ void PPA_FW(THR51_SRV6_Source_Node_Second_Pass_3_CONTAINER)() {
            Copy Generic TS< Data Bytes [15:0]> to Container 1 */
         __LOG_FW(("Copy Generic TS< Data Bytes [31:16]> to Container 0. Copy Generic TS< Data Bytes [15:0]> to Container 1"));
         ACCEL_CMD_TRIG(COPY_BYTES_THR51_SRV6_Source_Node_Second_Pass_3_CONTAINER_OFFSET8_PKT_no_vlan__Generic_TS_Data__data_31_28_MINUS40_LEN32_TO_PKT_no_vlan__SRv6_Segment0_Header__dip0_high_OFFSET, 0);
-		__PRAGMA_NO_REORDER
+        __PRAGMA_NO_REORDER
      }
      else if(ofstToVlanAcc == 4)
      {  /* with vlan */
         __LOG_FW(("with vlan"));
 
         /*------------------------------------------------------------------------------------------------------------------------------------------------
-	      - Update Desc<fw_bc_modification> field
+          - Update Desc<fw_bc_modification> field
           ------------------------------------------------------------------------------------------------------------------------------------------------*/
         /* Indicates HW about the new starting point of the packet header. In this case we add 40B but remove 54B so total minus 14B (0xF2) */
         __LOG_FW(("Indicates HW about the new starting point of the packet header. In this case we add 40B but remove 54B so total minus 14B (0xF2)"));
         ACCEL_CMD_TRIG(COPY_BITS_THR51_SRV6_Source_Node_Second_Pass_3_CONTAINER_CONST_0xF2_LEN8_TO_DESC_ppa_internal_desc__fw_bc_modification_OFFSET, 0);
 
 
-	    /*------------------------------------------------------------------------------------------------------------------------------------------------
-	      - Move Generic TS(54B),L2(14B or 18B) and IPv6(40B) headers left by 40 bytes to make room for SRH(8B) + Container0(16B) + Container1(16B)
+        /*------------------------------------------------------------------------------------------------------------------------------------------------
+          - Move Generic TS(54B),L2(14B or 18B) and IPv6(40B) headers left by 40 bytes to make room for SRH(8B) + Container0(16B) + Container1(16B)
           - Need to do it in 4 commands since need to move more than 32B (108B or 112B)  
           ------------------------------------------------------------------------------------------------------------------------------------------------*/
 
@@ -3699,7 +3699,7 @@ void PPA_FW(THR51_SRV6_Source_Node_Second_Pass_3_CONTAINER)() {
            HW accelerator will add the offset to the current pkt src and dst values and so will point to the exact location */
         __LOG_FW(("Set offset register to point to L2"));
         PPA_FW_SP_WRITE(PPN_IO_REG_PKT_HDR_OFST_ADDR, 8); 
-		__PRAGMA_NO_REORDER
+        __PRAGMA_NO_REORDER
 
         /* Move the last 32 bytes */
         __LOG_FW(("Move the last 32 bytes"));
@@ -3730,8 +3730,8 @@ void PPA_FW(THR51_SRV6_Source_Node_Second_Pass_3_CONTAINER)() {
         ACCEL_CMD_TRIG(COPY_BYTES_THR51_SRV6_Source_Node_Second_Pass_3_CONTAINER_OFFSET8_PKT_with_vlan__Generic_TS_Data__data_35_32_MINUS40_LEN4_TO_PKT_with_vlan__SRv6_Header__last_entry_OFFSET, 0);
  
 
-	    /*------------------------------------------------------------------------------------------------------------------------------------------------
-	      - Update IPv6 
+        /*------------------------------------------------------------------------------------------------------------------------------------------------
+          - Update IPv6 
           ------------------------------------------------------------------------------------------------------------------------------------------------*/
  
        /* IPv6.Payload Length += 56 (16B in pass1 and 40B in pass2) */           
@@ -3761,7 +3761,7 @@ void PPA_FW(THR51_SRV6_Source_Node_Second_Pass_3_CONTAINER)() {
            Copy Generic TS< Data Bytes [15:0]> to Container 1 */
         __LOG_FW(("Copy Generic TS< Data Bytes [31:16]> to Container 0. Copy Generic TS< Data Bytes [15:0]> to Container 1"));
         ACCEL_CMD_TRIG(COPY_BYTES_THR51_SRV6_Source_Node_Second_Pass_3_CONTAINER_OFFSET8_PKT_with_vlan__Generic_TS_Data__data_31_28_MINUS40_LEN32_TO_PKT_with_vlan__SRv6_Segment0_Header__dip0_high_OFFSET, 0);
-		__PRAGMA_NO_REORDER
+        __PRAGMA_NO_REORDER
      }
      else
      {  /* not valid: packet should not be changed */
@@ -3892,15 +3892,15 @@ void PPA_FW(THR52_SRV6_Source_Node_Second_Pass_2_CONTAINER)() {
         __LOG_FW(("no vlan"));
 
         /*------------------------------------------------------------------------------------------------------------------------------------------------
-	      - Update Desc<fw_bc_modification> field
+          - Update Desc<fw_bc_modification> field
           ------------------------------------------------------------------------------------------------------------------------------------------------*/
  
        /* Indicates HW about the new starting point of the packet header. In this case we add 24B but remove 54B so total minus 30B (0xE2) */
         __LOG_FW(("Indicates HW about the new starting point of the packet header. In this case we add 24B but remove 54B so total minus 30B (0xE2)"));
         ACCEL_CMD_TRIG(COPY_BITS_THR52_SRV6_Source_Node_Second_Pass_2_CONTAINER_CONST_0xE2_LEN8_TO_DESC_ppa_internal_desc__fw_bc_modification_OFFSET, 0);
 
-	    /*------------------------------------------------------------------------------------------------------------------------------------------------
-	      - Move Generic TS(54B),L2(14B) and IPv6(40B) headers left by 24 bytes to make room for SRH(8B) + Container0(16B)
+        /*------------------------------------------------------------------------------------------------------------------------------------------------
+          - Move Generic TS(54B),L2(14B) and IPv6(40B) headers left by 24 bytes to make room for SRH(8B) + Container0(16B)
           - Need to do it in 4 commands since need to move more than 32B (108B)  
           ------------------------------------------------------------------------------------------------------------------------------------------------*/
 
@@ -3931,7 +3931,7 @@ void PPA_FW(THR52_SRV6_Source_Node_Second_Pass_2_CONTAINER)() {
            HW accelerator will add the offset to the current pkt src and dst values and so will point to the exact location */
         __LOG_FW(("Set offset register to point to L2"));
         PPA_FW_SP_WRITE(PPN_IO_REG_PKT_HDR_OFST_ADDR, 24); 
-		__PRAGMA_NO_REORDER
+        __PRAGMA_NO_REORDER
 
 
         /*------------------------------------------------------------------------------------------------------------------------------------------------
@@ -3957,8 +3957,8 @@ void PPA_FW(THR52_SRV6_Source_Node_Second_Pass_2_CONTAINER)() {
         ACCEL_CMD_TRIG(COPY_BYTES_THR52_SRV6_Source_Node_Second_Pass_2_CONTAINER_OFFSET24_PKT_no_vlan__Generic_TS_Data__data_35_32_MINUS24_LEN4_TO_PKT_no_vlan__SRv6_Header__last_entry_OFFSET, 0);
  
 
-	    /*------------------------------------------------------------------------------------------------------------------------------------------------
-	      - Update IPv6 
+        /*------------------------------------------------------------------------------------------------------------------------------------------------
+          - Update IPv6 
           ------------------------------------------------------------------------------------------------------------------------------------------------*/
 
         /* IPv6.Payload Length += 40 (16B in pass1 and 24B in pass2) */           
@@ -3986,22 +3986,22 @@ void PPA_FW(THR52_SRV6_Source_Node_Second_Pass_2_CONTAINER)() {
         /* Copy Generic TS< Data Bytes [15:0]> to Container 0 */
         __LOG_FW(("Copy Generic TS< Data Bytes [15:0]> to Container 0"));
         ACCEL_CMD_TRIG(COPY_BYTES_THR52_SRV6_Source_Node_Second_Pass_2_CONTAINER_OFFSET24_PKT_no_vlan__Generic_TS_Data__data_15_12_MINUS24_LEN16_TO_PKT_no_vlan__SRv6_Segment0_Header__dip0_high_OFFSET, 0);
-		__PRAGMA_NO_REORDER
+        __PRAGMA_NO_REORDER
      }
      else if(ofstToVlanAcc == 4)
      {  /* with vlan */
         __LOG_FW(("with vlan"));
 
         /*------------------------------------------------------------------------------------------------------------------------------------------------
-	      - Update Desc<fw_bc_modification> field
+          - Update Desc<fw_bc_modification> field
           ------------------------------------------------------------------------------------------------------------------------------------------------*/
         /* Indicates HW about the new starting point of the packet header. In this case we add 24B but remove 54B so total minus 30B (0xE2) */
         __LOG_FW(("Indicates HW about the new starting point of the packet header. In this case we add 24B but remove 54B so total minus 30B (0xE2)"));
         ACCEL_CMD_TRIG(COPY_BITS_THR52_SRV6_Source_Node_Second_Pass_2_CONTAINER_CONST_0xE2_LEN8_TO_DESC_ppa_internal_desc__fw_bc_modification_OFFSET, 0);
 
 
-	    /*------------------------------------------------------------------------------------------------------------------------------------------------
-	      - Move Generic TS(54B),L2(18B) and IPv6(40B) headers left by 24 bytes to make room for SRH(8B) + Container0(16B)
+        /*------------------------------------------------------------------------------------------------------------------------------------------------
+          - Move Generic TS(54B),L2(18B) and IPv6(40B) headers left by 24 bytes to make room for SRH(8B) + Container0(16B)
           - Need to do it in 4 commands since need to move more than 32B (112B)  
           ------------------------------------------------------------------------------------------------------------------------------------------------*/
 
@@ -4027,7 +4027,7 @@ void PPA_FW(THR52_SRV6_Source_Node_Second_Pass_2_CONTAINER)() {
            HW accelerator will add the offset to the current pkt src and dst values and so will point to the exact location */
         __LOG_FW(("Set offset register to point to L2"));
         PPA_FW_SP_WRITE(PPN_IO_REG_PKT_HDR_OFST_ADDR, 24); 
-		__PRAGMA_NO_REORDER
+        __PRAGMA_NO_REORDER
 
         /* Move the last 32 bytes */
         __LOG_FW(("Move the last 32 bytes"));
@@ -4058,8 +4058,8 @@ void PPA_FW(THR52_SRV6_Source_Node_Second_Pass_2_CONTAINER)() {
         ACCEL_CMD_TRIG(COPY_BYTES_THR52_SRV6_Source_Node_Second_Pass_2_CONTAINER_OFFSET24_PKT_with_vlan__Generic_TS_Data__data_35_32_MINUS24_LEN4_TO_PKT_with_vlan__SRv6_Header__last_entry_OFFSET, 0);
  
 
-	    /*------------------------------------------------------------------------------------------------------------------------------------------------
-	      - Update IPv6 
+        /*------------------------------------------------------------------------------------------------------------------------------------------------
+          - Update IPv6 
           ------------------------------------------------------------------------------------------------------------------------------------------------*/
  
        /* IPv6.Payload Length += 40 (16B in pass1 and 24B in pass2) */           
@@ -4088,7 +4088,7 @@ void PPA_FW(THR52_SRV6_Source_Node_Second_Pass_2_CONTAINER)() {
        /* Copy Generic TS< Data Bytes [15:0]> to Container 0 */
         __LOG_FW(("Copy Generic TS< Data Bytes [15:0]> to Container 0"));
         ACCEL_CMD_TRIG(COPY_BYTES_THR52_SRV6_Source_Node_Second_Pass_2_CONTAINER_OFFSET24_PKT_with_vlan__Generic_TS_Data__data_15_12_MINUS24_LEN16_TO_PKT_with_vlan__SRv6_Segment0_Header__dip0_high_OFFSET, 0);
-		__PRAGMA_NO_REORDER
+        __PRAGMA_NO_REORDER
      }
      else
      {  /* not valid: packet should not be changed */
@@ -4378,8 +4378,10 @@ void PPA_FW(THR61_save_target_port_info)() {
  *              Header Window size= 128 bytes + 32 bytes Header increment space
  *
  *              Firmwares actions: no change in packet size. Sets specific fields in packet and descriptor. 
+ *              - Sets RX_TS_SHIM<port_number> 
  *              - Sets RX_TS_SHIM<IP_high>
- *              - Calculates RX_TS_SHIM<checksum> 
+ *              - Calculates RX_TS_SHIM<checksum>
+ *              - Sets TX_TS_SHIM<port_number> 
  *              - Sets TX_TS_SHIM<IP_low>
  *              - Calculates TX_TS_SHIM<checksum> 
  *              - Sets Desc<Egress Checksum Mode>
@@ -4392,16 +4394,44 @@ void PPA_FW(THR62_enhanced_sFlow_fill_remain_IPv4)() {
     /* xt_iss_client_command("profile","enable");             */
     /* xt_iss_client_command("profile","disable"); _exit(0);  */
 
+#ifdef ASIC_SIMULATION
+    /* Print out the input packet */
+    __LOG_FW(("Print out the input packet"));
+    __LOG_PARAM_FW( PPA_FW_SP_READ(AC5P_PKT_REGs_lo + 32) );
+    __LOG_PARAM_FW( PPA_FW_SP_READ(AC5P_PKT_REGs_lo + 32 + 4) );
+    __LOG_PARAM_FW( PPA_FW_SP_READ(AC5P_PKT_REGs_lo + 32 + 8) );
+    __LOG_PARAM_FW( PPA_FW_SP_READ(AC5P_PKT_REGs_lo + 32 + 12) );
+    __LOG_PARAM_FW( PPA_FW_SP_READ(AC5P_PKT_REGs_lo + 32 + 16) );
+    __LOG_PARAM_FW( PPA_FW_SP_READ(AC5P_PKT_REGs_lo + 32 + 20) );
+    __LOG_PARAM_FW( PPA_FW_SP_READ(AC5P_PKT_REGs_lo + 32 + 24) );
+    __LOG_PARAM_FW( PPA_FW_SP_READ(AC5P_PKT_REGs_lo + 32 + 28) );
+    __LOG_PARAM_FW( PPA_FW_SP_READ(AC5P_PKT_REGs_lo + 32 + 32) );
+    __LOG_PARAM_FW( PPA_FW_SP_READ(AC5P_PKT_REGs_lo + 32 + 36) );
+    __LOG_PARAM_FW( PPA_FW_SP_READ(AC5P_PKT_REGs_lo + 32 + 40) );
+    __LOG_PARAM_FW( PPA_FW_SP_READ(AC5P_PKT_REGs_lo + 32 + 44) );
+    __LOG_PARAM_FW( PPA_FW_SP_READ(AC5P_PKT_REGs_lo + 32 + 48) );
+    __LOG_PARAM_FW( PPA_FW_SP_READ(AC5P_PKT_REGs_lo + 32 + 52) );
+    __LOG_PARAM_FW( PPA_FW_SP_READ(AC5P_PKT_REGs_lo + 32 + 56) );
+    __LOG_PARAM_FW( PPA_FW_SP_READ(AC5P_PKT_REGs_lo + 32 + 60) );
+    __LOG_PARAM_FW( PPA_FW_SP_READ(AC5P_PKT_REGs_lo + 32 + 64) );
+    __LOG_PARAM_FW( PPA_FW_SP_READ(AC5P_PKT_REGs_lo + 32 + 68) );
+#endif /* ASIC_SIMULATION */
+
 
     /*------------------------------------------------------------------------------------------------------------------------------------------------
+      - Update RX_TS_SHIM<port_number> field
       - Update RX_TS_SHIM<IP_high> field
       - Calculate checksum of RX_TS_SHIM          
       ------------------------------------------------------------------------------------------------------------------------------------------------*/
+    /* Set RX port number (7 bits): If Desc<Orig is Trunk> copy it from Desc<Orig Src Trunk ID> else copy it from Desc<orig_src_eport>
+       Since these 2 fields are muxed, start from same position and required only 7 LS bits, no need to check condition of Desc<Orig is Trunk> */
+    __LOG_FW(("Set RX port number (7 bits): If Desc<Orig is Trunk> copy it from Desc<Orig Src Trunk ID> else copy it from Desc<orig_src_eport>"));
+    ACCEL_CMD_TRIG(COPY_BITS_THR62_enhanced_sFlow_fill_remain_IPv4_DESC_phal2ppa__orig_src_eport_PLUS6_LEN7_TO_PKT_enhanced_sflow_rx_ts_shim_header__port_number_OFFSET, 0);
 
     /* Set IP_high(2B). Copy it from Desc<pha_metadata[31:16]> */
     __LOG_FW(("Set IP_high(2B). Copy it from Desc<pha_metadata[31:16]>"));
     ACCEL_CMD_TRIG(COPY_BYTES_THR62_enhanced_sFlow_fill_remain_IPv4_DESC_phal2ppa__pha_metadata3_LEN2_TO_PKT_enhanced_sflow_rx_ts_shim_header__ip_high_OFFSET, 0);
-	__PRAGMA_NO_REORDER
+    __PRAGMA_NO_REORDER
 
     /* Calculate checksum of RX_TS_SHIM (14B) */
     __LOG_FW(("Calculate checksum of RX_TS_SHIM (14B)"));
@@ -4413,23 +4443,27 @@ void PPA_FW(THR62_enhanced_sFlow_fill_remain_IPv4)() {
     /* Sum last 4 bytes of RX_TS_SHIM (includes reserved,ip_high,port_number and port direction) */
     __LOG_FW(("Sum last 4 bytes of RX_TS_SHIM (includes reserved,ip_high,port_number and port direction)"));
     ACCEL_CMD_TRIG(CSUM_LOAD_NEW_THR62_enhanced_sFlow_fill_remain_IPv4_LEN4_FROM_PKT_enhanced_sflow_rx_ts_shim_header__reserved_OFFSET, 0);
-	__PRAGMA_NO_REORDER
+    __PRAGMA_NO_REORDER
 
     /* Store checksum result in checksum field of RX_TS_SHIM header */
     __LOG_FW(("Store checksum result in checksum field of RX_TS_SHIM header"));
     ACCEL_CMD_TRIG(CSUM_STORE_IP_THR62_enhanced_sFlow_fill_remain_IPv4_TO_PKT_enhanced_sflow_rx_ts_shim_header__checksum_PLUS2_OFFSET, 0);
-	__PRAGMA_NO_REORDER
+    __PRAGMA_NO_REORDER
 
 
     /*------------------------------------------------------------------------------------------------------------------------------------------------
+      - Update TX_TS_SHIM<port_number> field
       - Update TX_TS_SHIM<IP_low> field
       - Calculate checksum of TX_TS_SHIM          
       ------------------------------------------------------------------------------------------------------------------------------------------------*/
+    /* Set TX port number (7 bits): copy from Desc<Local Dev target phy port [6:0]> */
+    __LOG_FW(("Set TX port number (7 bits): copy from Desc<Local Dev target phy port [6:0]>"));
+    ACCEL_CMD_TRIG(COPY_BITS_THR62_enhanced_sFlow_fill_remain_IPv4_DESC_phal2ppa__local_dev_trg_phy_port_PLUS3_LEN7_TO_PKT_enhanced_sflow_tx_ts_shim_header__port_number_OFFSET, 0);
 
     /* Set IP_low. Copy it from Desc<pha_metadata[15:0] */
     __LOG_FW(("Set IP_low. Copy it from Desc<pha_metadata[15:0]"));
     ACCEL_CMD_TRIG(COPY_BYTES_THR62_enhanced_sFlow_fill_remain_IPv4_DESC_phal2ppa__pha_metadata1_LEN2_TO_PKT_enhanced_sflow_tx_ts_shim_header__ip_low_OFFSET, 0);
-	__PRAGMA_NO_REORDER
+    __PRAGMA_NO_REORDER
 
     /* Calculate checksum of TX_TS_SHIM (14B) */
     __LOG_FW(("Calculate checksum of TX_TS_SHIM (14B)"));
@@ -4441,12 +4475,12 @@ void PPA_FW(THR62_enhanced_sFlow_fill_remain_IPv4)() {
     /* Sum last 4 bytes of TX_TS_SHIM (includes reserved,ip_high,port_number and port direction) */
     __LOG_FW(("Sum last 4 bytes of TX_TS_SHIM (includes reserved,ip_high,port_number and port direction)"));
     ACCEL_CMD_TRIG(CSUM_LOAD_NEW_THR62_enhanced_sFlow_fill_remain_IPv4_LEN4_FROM_PKT_enhanced_sflow_tx_ts_shim_header__reserved_OFFSET, 0);
-	__PRAGMA_NO_REORDER
+    __PRAGMA_NO_REORDER
 
     /* Store checksum result in checksum field of TX_TS_SHIM header */
     __LOG_FW(("Store checksum result in checksum field of TX_TS_SHIM header"));
     ACCEL_CMD_TRIG(CSUM_STORE_IP_THR62_enhanced_sFlow_fill_remain_IPv4_TO_PKT_enhanced_sflow_tx_ts_shim_header__checksum_PLUS2_OFFSET, 0);
-	__PRAGMA_NO_REORDER
+    __PRAGMA_NO_REORDER
 
 
     /*------------------------------------------------------------------------------------------------------------------------------------------------
@@ -4467,12 +4501,12 @@ void PPA_FW(THR62_enhanced_sFlow_fill_remain_IPv4)() {
     /* Sum old IP Total Length */
     __LOG_FW(("Sum old IP Total Length"));
     ACCEL_CMD_TRIG(CSUM_LOAD_OLD_THR62_enhanced_sFlow_fill_remain_IPv4_LEN2_FROM_PKT_IPv4_Header__total_length_OFFSET, 0);
-	__PRAGMA_NO_REORDER
+    __PRAGMA_NO_REORDER
 
     /* Update new IP header total length: IPv4<Total Length> + 44 */
     __LOG_FW(("Update new IP header total length: IPv4<Total Length> + 44"));
     ACCEL_CMD_TRIG(ADD_BITS_THR62_enhanced_sFlow_fill_remain_IPv4_CONST_0x2C_LEN16_TO_PKT_IPv4_Header__total_length_OFFSET, 0);
-	__PRAGMA_NO_REORDER
+    __PRAGMA_NO_REORDER
 
     /* Sum new Total Length */
     __LOG_FW(("Sum new Total Length"));
@@ -4481,7 +4515,7 @@ void PPA_FW(THR62_enhanced_sFlow_fill_remain_IPv4)() {
     /* Sum old IPv4 CS */
     __LOG_FW(("Sum old IPv4 CS"));
     ACCEL_CMD_TRIG(CSUM_LOAD_OLD_THR62_enhanced_sFlow_fill_remain_IPv4_LEN2_FROM_PKT_IPv4_Header__header_checksum_OFFSET, 0);
-	__PRAGMA_NO_REORDER
+    __PRAGMA_NO_REORDER
 
     /* Store the new IPv4 CS */
     __LOG_FW(("Store the new IPv4 CS"));
@@ -4523,8 +4557,10 @@ void PPA_FW(THR62_enhanced_sFlow_fill_remain_IPv4)() {
  *              Header Window size= 128 bytes + 32 bytes Header increment space
  *
  *              Firmwares actions: no change in packet size. Sets specific fields in packet and descriptor. 
+ *              - Sets RX_TS_SHIM<port_number> 
  *              - Sets RX_TS_SHIM<IP_high>
  *              - Calculates RX_TS_SHIM<checksum> 
+ *              - Sets TX_TS_SHIM<port_number> 
  *              - Sets TX_TS_SHIM<IP_low>
  *              - Calculates TX_TS_SHIM<checksum> 
  *              - Sets Desc<Egress Checksum Mode>
@@ -4536,16 +4572,49 @@ void PPA_FW(THR63_enhanced_sFlow_fill_remain_IPv6)() {
     /* xt_iss_client_command("profile","enable");             */
     /* xt_iss_client_command("profile","disable"); _exit(0);  */
 
+#ifdef ASIC_SIMULATION
+    /* Print out the input packet */
+    __LOG_FW(("Print out the input packet"));
+    __LOG_PARAM_FW( PPA_FW_SP_READ(AC5P_PKT_REGs_lo + 32) );
+    __LOG_PARAM_FW( PPA_FW_SP_READ(AC5P_PKT_REGs_lo + 32 + 4) );
+    __LOG_PARAM_FW( PPA_FW_SP_READ(AC5P_PKT_REGs_lo + 32 + 8) );
+    __LOG_PARAM_FW( PPA_FW_SP_READ(AC5P_PKT_REGs_lo + 32 + 12) );
+    __LOG_PARAM_FW( PPA_FW_SP_READ(AC5P_PKT_REGs_lo + 32 + 16) );
+    __LOG_PARAM_FW( PPA_FW_SP_READ(AC5P_PKT_REGs_lo + 32 + 20) );
+    __LOG_PARAM_FW( PPA_FW_SP_READ(AC5P_PKT_REGs_lo + 32 + 24) );
+    __LOG_PARAM_FW( PPA_FW_SP_READ(AC5P_PKT_REGs_lo + 32 + 28) );
+    __LOG_PARAM_FW( PPA_FW_SP_READ(AC5P_PKT_REGs_lo + 32 + 32) );
+    __LOG_PARAM_FW( PPA_FW_SP_READ(AC5P_PKT_REGs_lo + 32 + 36) );
+    __LOG_PARAM_FW( PPA_FW_SP_READ(AC5P_PKT_REGs_lo + 32 + 40) );
+    __LOG_PARAM_FW( PPA_FW_SP_READ(AC5P_PKT_REGs_lo + 32 + 44) );
+    __LOG_PARAM_FW( PPA_FW_SP_READ(AC5P_PKT_REGs_lo + 32 + 48) );
+    __LOG_PARAM_FW( PPA_FW_SP_READ(AC5P_PKT_REGs_lo + 32 + 52) );
+    __LOG_PARAM_FW( PPA_FW_SP_READ(AC5P_PKT_REGs_lo + 32 + 56) );
+    __LOG_PARAM_FW( PPA_FW_SP_READ(AC5P_PKT_REGs_lo + 32 + 60) );
+    __LOG_PARAM_FW( PPA_FW_SP_READ(AC5P_PKT_REGs_lo + 32 + 64) );
+    __LOG_PARAM_FW( PPA_FW_SP_READ(AC5P_PKT_REGs_lo + 32 + 68) );
+    __LOG_PARAM_FW( PPA_FW_SP_READ(AC5P_PKT_REGs_lo + 32 + 72) );
+    __LOG_PARAM_FW( PPA_FW_SP_READ(AC5P_PKT_REGs_lo + 32 + 76) );
+    __LOG_PARAM_FW( PPA_FW_SP_READ(AC5P_PKT_REGs_lo + 32 + 80) );
+    __LOG_PARAM_FW( PPA_FW_SP_READ(AC5P_PKT_REGs_lo + 32 + 84) );
+    __LOG_PARAM_FW( PPA_FW_SP_READ(AC5P_PKT_REGs_lo + 32 + 88) );
+#endif /* ASIC_SIMULATION */
 
     /*------------------------------------------------------------------------------------------------------------------------------------------------
+      - Update RX_TS_SHIM<port_number> field
       - Update RX_TS_SHIM<IP_high> field
       - Calculate checksum of RX_TS_SHIM          
       ------------------------------------------------------------------------------------------------------------------------------------------------*/
 
+    /* Set RX port number (7 bits): If Desc<Orig is Trunk> copy it from Desc<Orig Src Trunk ID> else copy it from Desc<orig_src_eport>
+       Since these 2 fields are muxed, start from same position and required only 7 LS bits, no need to check condition of Desc<Orig is Trunk> */
+    __LOG_FW(("Set RX port number (7 bits): If Desc<Orig is Trunk> copy it from Desc<Orig Src Trunk ID> else copy it from Desc<orig_src_eport>"));
+    ACCEL_CMD_TRIG(COPY_BITS_THR63_enhanced_sFlow_fill_remain_IPv6_DESC_phal2ppa__orig_src_eport_PLUS6_LEN7_TO_PKT_enhanced_sflow_rx_ts_shim_header__port_number_OFFSET, 0);
+
     /* Set IP_high(2B). Copy it from Desc<pha_metadata[31:16]> */
     __LOG_FW(("Set IP_high(2B). Copy it from Desc<pha_metadata[31:16]>"));
     ACCEL_CMD_TRIG(COPY_BYTES_THR63_enhanced_sFlow_fill_remain_IPv6_DESC_phal2ppa__pha_metadata3_LEN2_TO_PKT_enhanced_sflow_rx_ts_shim_header__ip_high_OFFSET, 0);
-	__PRAGMA_NO_REORDER
+    __PRAGMA_NO_REORDER
 
     /* Calculate checksum of RX_TS_SHIM (14B) */
     __LOG_FW(("Calculate checksum of RX_TS_SHIM (14B)"));
@@ -4557,23 +4626,28 @@ void PPA_FW(THR63_enhanced_sFlow_fill_remain_IPv6)() {
     /* Sum last 4 bytes of RX_TS_SHIM (includes reserved,ip_high,port_number and port direction) */
     __LOG_FW(("Sum last 4 bytes of RX_TS_SHIM (includes reserved,ip_high,port_number and port direction)"));
     ACCEL_CMD_TRIG(CSUM_LOAD_NEW_THR63_enhanced_sFlow_fill_remain_IPv6_LEN4_FROM_PKT_enhanced_sflow_rx_ts_shim_header__reserved_OFFSET, 0);
-	__PRAGMA_NO_REORDER
+    __PRAGMA_NO_REORDER
 
     /* Store checksum result in checksum field of RX_TS_SHIM header */
     __LOG_FW(("Store checksum result in checksum field of RX_TS_SHIM header"));
     ACCEL_CMD_TRIG(CSUM_STORE_IP_THR63_enhanced_sFlow_fill_remain_IPv6_TO_PKT_enhanced_sflow_rx_ts_shim_header__checksum_PLUS2_OFFSET, 0);
-	__PRAGMA_NO_REORDER
+    __PRAGMA_NO_REORDER
 
 
     /*------------------------------------------------------------------------------------------------------------------------------------------------
+      - Update TX_TS_SHIM<port_number> field
       - Update TX_TS_SHIM<IP_low> field
       - Calculate checksum of TX_TS_SHIM          
       ------------------------------------------------------------------------------------------------------------------------------------------------*/
 
+    /* Set TX port number (7 bits): copy from Desc<Local Dev target phy port [6:0]> */
+    __LOG_FW(("Set TX port number (7 bits): copy from Desc<Local Dev target phy port [6:0]>"));
+    ACCEL_CMD_TRIG(COPY_BITS_THR63_enhanced_sFlow_fill_remain_IPv6_DESC_phal2ppa__local_dev_trg_phy_port_PLUS3_LEN7_TO_PKT_enhanced_sflow_tx_ts_shim_header__port_number_OFFSET, 0);
+
     /* Set IP_low. Copy it from Desc<pha_metadata[15:0] */
     __LOG_FW(("Set IP_low. Copy it from Desc<pha_metadata[15:0]"));
     ACCEL_CMD_TRIG(COPY_BYTES_THR63_enhanced_sFlow_fill_remain_IPv6_DESC_phal2ppa__pha_metadata1_LEN2_TO_PKT_enhanced_sflow_tx_ts_shim_header__ip_low_OFFSET, 0);
-	__PRAGMA_NO_REORDER
+    __PRAGMA_NO_REORDER
 
     /* Calculate checksum of TX_TS_SHIM (14B) */
     __LOG_FW(("Calculate checksum of TX_TS_SHIM (14B)"));
@@ -4585,12 +4659,12 @@ void PPA_FW(THR63_enhanced_sFlow_fill_remain_IPv6)() {
     /* Sum last 4 bytes of TX_TS_SHIM (includes reserved,ip_high,port_number and port direction) */
     __LOG_FW(("Sum last 4 bytes of TX_TS_SHIM (includes reserved,ip_high,port_number and port direction)"));
     ACCEL_CMD_TRIG(CSUM_LOAD_NEW_THR63_enhanced_sFlow_fill_remain_IPv6_LEN4_FROM_PKT_enhanced_sflow_tx_ts_shim_header__reserved_OFFSET, 0);
-	__PRAGMA_NO_REORDER
+    __PRAGMA_NO_REORDER
 
     /* Store checksum result in checksum field of TX_TS_SHIM header */
     __LOG_FW(("Store checksum result in checksum field of TX_TS_SHIM header"));
     ACCEL_CMD_TRIG(CSUM_STORE_IP_THR63_enhanced_sFlow_fill_remain_IPv6_TO_PKT_enhanced_sflow_tx_ts_shim_header__checksum_PLUS2_OFFSET, 0);
-	__PRAGMA_NO_REORDER
+    __PRAGMA_NO_REORDER
 
 
     /*------------------------------------------------------------------------------------------------------------------------------------------------
@@ -4624,6 +4698,586 @@ void PPA_FW(THR63_enhanced_sFlow_fill_remain_IPv6)() {
 }
 
 
+/*************************************************************************************************************************************//**
+ * funcname     THR64_Erspan_TypeII_SameDevMirroring_Ipv4
+ * inparam      None
+ * return       None
+ * description  ERSPAN over IPv4 tunnel. Encapsulated Remote Switch Port Analyzer (ERSPAN) 
+ *              allows packets to be mirrored to a remote analyzer over a tunnel encapsulation. 
+ *              - ERSPAN Type II is used
+ *              - ERSPAN is sent over an IPv4 GRE tunnel
+ *              - Support handling of Ingress and Egress mirroring   
+ *              - Support handling vlan tagged or untagged
+ * 
+ *              cfg template:    Not in use (16B). It is used by fw to hold L2 parameters copied from shared memory.
+ *              src & trg entries: PHA Target port table holds original packet target physical port for Egress mirroring (2B)  
+ *                                 PHA Source port table holds original packet source physical port for Ingress mirroring (2B)
+ *
+ *              hdr in:  | Extension space (64B) | payload |
+ *              hdr out: | Extension space (14B or 10B) | MAC addresses(12B) | VLAN(4B) or not | ET(2B) | IPv4(20B) | GRE(8B) | ERSPAN Type II(8B) | payload |
+ *              Header Window anchor= Outer Layer 2
+ *              Header Window size= 96 bytes + 64 bytes Header increment space
+ *
+ *              Firmware adds the tunnel and sets the values according to architect's definitions.
+ *              - Add IPv4 and L2 headers which are copied from shared memory 
+ *              - Add GRE & ERSPAN Type II and set them according to Architect's definitions
+ *              - Set IPv4 length and calculate IPv4 cs. 
+ *              - Update Desc<egress_byte_count> +=54(with vlan) or 50(without vlan) 
+ *              - Update Desc<fw_bc_modification> +=54(with vlan) or 50(without vlan)  
+ *****************************************************************************************************************************************/
+__attribute__ ((aligned (16))) 
+void PPA_FW(THR64_Erspan_TypeII_SameDevMirroring_Ipv4)() {
+    /* xt_iss_client_command("profile","enable");             */
+    /* xt_iss_client_command("profile","disable"); _exit(0);  */
+
+    uint32_t    sessionId;                      /* holds Ingress or Egress session ID (10 bits)                   */ 
+    uint32_t    smemAnalyzerTemplateBaseAddr;   /* holds base address of sFlow templates in shared memory         */
+    uint32_t    smemAnalayzerTemplateOfst;      /* holds base address of specific sFlow template in shared memory */
+    uint32_t    descRxSniff;                    /* holds value of Desc<rx_sniff> field                            */
+    uint32_t    vlanVid;                        /* holds value of vlan vid taken from shared memory template      */
+
+
+    /* Get pointer to descriptor */
+    struct ppa_in_desc* thr64_desc_ptr = AC5P_MEM_CAST(AC5P_DESC_REGs_lo,ppa_in_desc);
+
+    /* Get Rx Sniff value from descriptor to tell us if Ingress mirroring or Egress mirroring */
+    __LOG_FW(("Get Rx Sniff value from descriptor to tell us if Ingress mirroring or Egress mirroring"));
+    descRxSniff = thr64_desc_ptr->phal2ppa.rx_sniff;
+    __LOG_PARAM_FW(descRxSniff);
+
+
+    /*-----------------------------------------------------------------------------------------------------------------------------------------------
+      - Calculate offset to the right Analyzer ePort template in shared memory according to shared memory index 
+      ------------------------------------------------------------------------------------------------------------------------------------------------*/
+     __LOG_FW(("Calculate offset to the right Analyzer ePort template in shared memory according to shared memory index"));
+
+    /* Desc.pha_metadata[0:2] contains shared memory index. Applicable values are 0:6. */
+    __LOG_FW(("Desc.pha_metadata[0:2] contains shared memory index. Applicable values are 0:6."));
+    smemAnalayzerTemplateOfst = (thr64_desc_ptr->phal2ppa.pha_metadata0 & 0x7)*64;
+    __LOG_PARAM_FW(thr64_desc_ptr->phal2ppa.pha_metadata0);
+    __LOG_PARAM_FW(smemAnalayzerTemplateOfst);
+
+    /* Get base address of the required Analyzer ePort template in shared memory */
+    __LOG_FW(("Get base address of the required Analyzer ePort template in shared memory"));
+    smemAnalyzerTemplateBaseAddr = DRAM_CC_ERSPAN_ANALYZER_EPORT_1_TEMPLATE_ADDR + smemAnalayzerTemplateOfst;
+    __LOG_PARAM_FW(smemAnalyzerTemplateBaseAddr);
+
+
+    /*-----------------------------------------------------------------------------------------------------------------------------------------------
+      - Get 16B of L2 parameters from shared memory: | mac da sa(12B) | vlan tag(4B) | and placed them in thread's template
+      - To avoid 32 bits alignment issues (packet starts after 10 bytes since Ethertype included), copy it first to CFG template and then to packet
+      ------------------------------------------------------------------------------------------------------------------------------------------------*/
+     __LOG_FW(("Get 16B of L2 parameters from shared memory: | mac da sa(12B) | vlan tag(4B) | and placed them in thread's template"));
+
+    PPA_FW_SP_WRITE( (AC5P_CFG_REGs_lo + 0) , PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr +  IPV4_BASIC_HEADER_SIZE + 4)  );
+    PPA_FW_SP_WRITE( (AC5P_CFG_REGs_lo + 4) , PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr +  IPV4_BASIC_HEADER_SIZE + 8)  );
+    PPA_FW_SP_WRITE( (AC5P_CFG_REGs_lo + 8) , PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr +  IPV4_BASIC_HEADER_SIZE + 12)  );
+    PPA_FW_SP_WRITE( (AC5P_CFG_REGs_lo + 12) , PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr +  IPV4_BASIC_HEADER_SIZE + 16)  );
+    __LOG_PARAM_FW(PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr + IPV4_BASIC_HEADER_SIZE + 4));
+    __LOG_PARAM_FW(PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr + IPV4_BASIC_HEADER_SIZE + 8));
+    __LOG_PARAM_FW(PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr + IPV4_BASIC_HEADER_SIZE + 12));
+    __LOG_PARAM_FW(PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr + IPV4_BASIC_HEADER_SIZE + 16));
+
+
+    /*-----------------------------------------------------------------------------------------------------------------------------------------------
+      - Get 20B of IPv4 header from shared memory and place them in output packet
+      ------------------------------------------------------------------------------------------------------------------------------------------------*/
+     __LOG_FW(("Get 20B of IPv4 header from shared memory and place them in output packet"));
+
+    PPA_FW_SP_WRITE( (AC5P_PKT_REGs_lo + 28) , PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr +  0)  );
+    PPA_FW_SP_WRITE( (AC5P_PKT_REGs_lo + 32) , PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr +  4)  );
+    PPA_FW_SP_WRITE( (AC5P_PKT_REGs_lo + 36) , PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr +  8)  );
+    PPA_FW_SP_WRITE( (AC5P_PKT_REGs_lo + 40) , PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr + 12)  );
+    PPA_FW_SP_WRITE( (AC5P_PKT_REGs_lo + 44) , PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr + 16)  );
+    __LOG_PARAM_FW(PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr + 0));
+    __LOG_PARAM_FW(PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr + 4));
+    __LOG_PARAM_FW(PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr + 8));
+    __LOG_PARAM_FW(PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr + 12));
+    __LOG_PARAM_FW(PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr + 16));
+
+
+    /*-----------------------------------------------------------------------------------------------------------------------------------------------
+      - Get session ID from shared memory. This address contains  | reserved(12b) | Ingress session ID(10b) | Egress session ID(10b) |
+      ------------------------------------------------------------------------------------------------------------------------------------------------*/
+    __LOG_FW(("Get session ID from shared memory. This address contains  | reserved(12b) | Ingress session ID(10b) | Egress session ID(10b) |"));
+
+     sessionId = PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr +  IPV4_BASIC_HEADER_SIZE) ;
+     __LOG_PARAM_FW(sessionId);
+
+     /* Extract 10 bits of Ingress or Egress session ID according to Desc<rx_sniff> field */
+     __LOG_FW(("Extract 10 bits of Ingress or Egress session ID according to Desc<rx_sniff> field"));
+     sessionId = (sessionId >>(10*descRxSniff)) & 0x3FF;
+     __LOG_PARAM_FW(sessionId);
+     __PRAGMA_NO_REORDER
+
+
+    /*-----------------------------------------------------------------------------------------------------------------------------------------------
+     - Get VLAN vid
+     ------------------------------------------------------------------------------------------------------------------------------------------------*/
+
+    /* Get vlan vid from template */
+    __LOG_FW(("Get vlan vid from template"));
+    vlanVid = PPA_FW_SP_READ(AC5P_CFG_REGs_lo + 12) & 0xFFF;
+    __LOG_PARAM_FW(vlanVid);
+
+
+    /*-----------------------------------------------------------------------------------------------------------------------------------------------
+     - Set Ether Type to 0x0800 (IPv4)
+     ------------------------------------------------------------------------------------------------------------------------------------------------*/
+     __LOG_FW(("Set Ether Type to 0x0800 (IPv4)"));
+
+    ACCEL_CMD_TRIG(COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x08_LEN8_TO_PKT_ethertype_header__ethertype_OFFSET, SET_REMAIN_FIELDS_TO_ZERO);
+
+
+    /*-----------------------------------------------------------------------------------------------------------------------------------------------
+     - Set packet GRE header (8B)
+     ------------------------------------------------------------------------------------------------------------------------------------------------*/
+     __LOG_FW(("Set packet GRE header (8B)"));
+
+    /* Set GRE.flags to 0x1000. Clear all other bits in range of 32 bits to zero to get 0x1000 value */
+    __LOG_FW(("Set GRE.flags to 0x1000. Clear all other bits in range of 32 bits to zero to get 0x1000 value"));
+    ACCEL_CMD_TRIG(COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x10_LEN8_TO_PKT_GRE_header__C_OFFSET, SET_REMAIN_FIELDS_TO_ZERO);
+   	__PRAGMA_NO_REORDER
+
+    /* Set GRE.Protocol to 0x88BE */
+    __LOG_FW(("Set GRE.Protocol to 0x88BE"));
+    ACCEL_CMD_TRIG(COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x88_LEN8_TO_PKT_GRE_header__NP_OFFSET, 0);
+    ACCEL_CMD_TRIG(COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0xBE_LEN8_TO_PKT_GRE_header__NP_PLUS8_OFFSET, 0);
+
+    /* Set GRE.Sequence Number to Desc<LM Counter> */
+    __LOG_FW(("Set GRE.Sequence Number to Desc<LM Counter>"));
+	ACCEL_CMD_TRIG(COPY_BYTES_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__lm_counter_LEN4_TO_PKT_GRE_header__Seq_num_OFFSET, 0);
+
+
+    /*-----------------------------------------------------------------------------------------------------------------------------------------------
+     - Set packet ERSPAN header (8B)
+     ------------------------------------------------------------------------------------------------------------------------------------------------*/
+     __LOG_FW(("Set packet ERSPAN header (8B)"));
+
+    /* Set Ingress or Egress ERSPAN header.sessionID (extracted earlier according to Desc<rx_sniff>).
+       Write it as 4B so rest fields (Ver,VLAN,COS,En,T) are cleared to zero */
+    __LOG_FW(("Set Ingress or Egress ERSPAN header.sessionID (extracted earlier according to Desc<rx_sniff>)."
+              "Write it as 4B so rest fields (Ver,VLAN,COS,En,T) are cleared to zero"));
+    PPA_FW_SP_WRITE( (AC5P_PKT_REGs_lo + 56) , sessionId ); 
+
+    /* Set 20  bits of ERSPAN.index with PHA target/Source Physical Port bits [15:0], rest 4 bits are cleared to zero.
+       if descRxSniff = 0 trigger target port accelerator if 1 trigger source port accelerator (next command 4B offset) */
+    __LOG_FW(("Set 20  bits of ERSPAN.index with PHA target/Source Physical Port bits [15:0], rest 4 bits are cleared to zero."
+              "if descRxSniff = 0 trigger target port accelerator if 1 trigger source port accelerator (next command 4B offset)"));
+    ACCEL_CMD_TRIG(COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_srcTrgPortEntry__targetPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4_OFFSET + 4*descRxSniff, SET_REMAIN_FIELDS_TO_ZERO);
+   	__PRAGMA_NO_REORDER
+
+    /* Set ERSPAN.Ver to 1(4b) and ERSPAN.VLAN(12b) to 0 (cleared already when sessionID field was set) */
+    __LOG_FW(("Set ERSPAN.Ver to 1(4b) and ERSPAN.VLAN(12b) to 0 (cleared already when sessionID field was set) "));
+    ACCEL_CMD_TRIG(COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x1_LEN4_TO_PKT_ERSPAN_type_II_header__Ver_OFFSET, 0);
+
+    /* Set ERSPAN.COS to Desc<QoS Mapped UP> */
+    __LOG_FW(("Set ERSPAN.COS to Desc<QoS Mapped UP>"));
+    ACCEL_CMD_TRIG(COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__qos_mapped_up_LEN3_TO_PKT_ERSPAN_type_II_header__COS_OFFSET, 0);
+
+    /* Set ERSPAN.En to 3(2b) */
+    __LOG_FW(("Assign ERSPAN.En to 3(2b)"));
+    ACCEL_CMD_TRIG(COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x3_LEN2_TO_PKT_ERSPAN_type_II_header__En_OFFSET, 0);
+    
+    /* Set ERSPAN.T(1b) to Desc<truncated> */
+    __LOG_FW(("Assign ERSPAN.T(1b) to Desc<truncated>"));
+    ACCEL_CMD_TRIG(COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__truncated_LEN1_TO_PKT_ERSPAN_type_II_header__T_OFFSET, 0);
+
+
+    /*-----------------------------------------------------------------------------------------------------------------------------------------------
+     - Update packet IPv4 length field 
+     - Calculate IPv4 checksum 
+     ------------------------------------------------------------------------------------------------------------------------------------------------*/
+    __LOG_FW(("Update IPv4 length field + calculate IPv4 checksum"));
+
+
+    /* Set IPv4 Header<Total Length>= Desc<Egress Byte Count>+36 */
+    __LOG_FW(("Set IPv4 Header<Total Length>= Desc<Egress Byte Count>+36"));
+
+    /* First copy Desc.Egress Byte Count(14b) to IPv4.Total Length(16b).
+       Assumption 2 MS bits were already cleared by application when setting IPv4<Total length> field in shared memory */
+    __LOG_FW(("First copy Desc.Egress Byte Count(14b) to IPv4.Total Length(16b)"));
+	ACCEL_CMD_TRIG(COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__egress_byte_count_LEN14_TO_PKT_IPv4_Header__total_length_PLUS2_OFFSET, 0);
+    __PRAGMA_NO_REORDER
+
+    /* IPv4 total Length +=36 */
+    __LOG_FW(("IPv4 total Length +=36"));
+    ACCEL_CMD_TRIG(ADD_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x24_LEN16_TO_PKT_IPv4_Header__total_length_OFFSET, 0);
+	__PRAGMA_NO_REORDER
+
+    /* Compute IPv4 CS */
+    __LOG_FW(("Compute IPv4 CS"));
+
+    /* Sum first 8 bytes of IPv4 */
+    __LOG_FW(("Sum new Total Length"));
+    ACCEL_CMD_TRIG(CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN8_FROM_PKT_IPv4_Header__version_OFFSET, 0);
+
+    /* Skip cs field and add to sum 2B of ttl and protocol */
+    __LOG_FW(("Sum new Total Length"));
+    ACCEL_CMD_TRIG(CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN2_FROM_PKT_IPv4_Header__ttl_OFFSET, 0);
+
+    /* Sum the last 8 bytes of IPv4 (src and dest IP addresses fields) */
+    __LOG_FW(("Sum new Total Length"));
+    ACCEL_CMD_TRIG(CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN8_FROM_PKT_IPv4_Header__sip_high_OFFSET, 0);
+	__PRAGMA_NO_REORDER
+
+    /* Store the new IPv4 CS */
+    __LOG_FW(("Store the new IPv4 CS"));
+    ACCEL_CMD_TRIG(CSUM_STORE_IP_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_TO_PKT_IPv4_Header__header_checksum_OFFSET, 0);
+
+
+    /*-----------------------------------------------------------------------------------------------------------------------------------------------
+     - Set L2 header: MAC DA SA + vlan tag or no vlan tag
+     - Update Desc<Egress Byte Count> +=50 or 54(with vlan)                         
+     - Update Desc<fw_bc_modification> +=50 or 54(with vlan)
+     ------------------------------------------------------------------------------------------------------------------------------------------------*/
+    __LOG_FW(("Set L2 header with or without vlan tag, Update Desc<Egress Byte Count> +=50, Update Desc<fw_bc_modification> +=50"));
+
+    /* Check if there is vlan or not. If thread's template<vlanVid>=0 then there is no vlan */
+    __LOG_FW(("Check if there is vlan or not. If thread's template<vlanVid>=0 then there is no vlan"));    
+    if (vlanVid == 0)
+    { /* No vlan */
+
+        /* Indicates HW about the new starting point of the packet header (+50 bytes) */
+        __LOG_FW(("Indicates HW about the new starting point of the packet header (+50 bytes)"));
+        thr64_desc_ptr->ppa_internal_desc.fw_bc_modification = 50;
+
+        /* No vlan, just copy MAC 12 bytes from thread's template */
+        __LOG_FW(("No vlan, just copy MAC 12 bytes from thread's template"));
+        ACCEL_CMD_TRIG(COPY_BYTES_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_erspan_template__mac_da_47_32_LEN12_TO_PKT_IPv4_Header__version_MINUS14_OFFSET, 0);
+
+        /* Desc<Egress Byte Count> +=50 */
+        __LOG_FW(("Desc<Egress Byte Count> +=50"));
+        ACCEL_CMD_TRIG(ADD_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x32_LEN14_TO_DESC_phal2ppa__egress_byte_count_OFFSET, 0);
+    }
+    else
+    {/* With vlan */
+
+        /* Indicates HW about the new starting point of the packet header (+54 bytes) */
+        __LOG_FW(("Indicates HW about the new starting point of the packet header (+54 bytes)"));
+        thr64_desc_ptr->ppa_internal_desc.fw_bc_modification = 54;
+
+        /* With vlan, copy MAC(12B) + vlan tag(4B) from thread's template */
+        __LOG_FW(("With vlan, copy MAC(12B) + vlan tag(4B) from thread's template"));
+        ACCEL_CMD_TRIG(COPY_BYTES_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_erspan_template__mac_da_47_32_LEN16_TO_PKT_IPv4_Header__version_MINUS18_OFFSET, 0);
+ 
+        /* Desc<Egress Byte Count> +=54 */
+        __LOG_FW(("Desc<Egress Byte Count> +=54"));
+        ACCEL_CMD_TRIG(ADD_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x36_LEN14_TO_DESC_phal2ppa__egress_byte_count_OFFSET, 0);
+    }
+
+
+#if (CHECK_STACK)
+    /* Check if stack was overflowed */
+    __LOG_FW(("Check if stack was overflowed"));
+    ac5p_stack_overflow_checker(64);
+#endif
+
+    /* Execute the packet swap sequence to jump to the next Thread */
+    __LOG_FW(("Execute the packet swap sequence to jump to the next Thread"));
+    packet_swap_sequence();
+}
+
+
+/*************************************************************************************************************************************//**
+ * funcname     THR65_Erspan_TypeII_SameDevMirroring_Ipv6
+ * inparam      None
+ * return       None
+ * description  ERSPAN over IPv6 tunnel. Encapsulated Remote Switch Port Analyzer (ERSPAN) 
+ *              allows packets to be mirrored to a remote analyzer over a tunnel encapsulation. 
+ *              - ERSPAN Type II is used
+ *              - ERSPAN is sent over an IPv6 GRE tunnel
+ *              - Support handling of Ingress and Egress mirroring   
+ *              - Support handling vlan tagged or untagged
+ *              NOTE: since in case of IPv6 tunneling need to add 74 bytes and PHA fw can only add maximum 64 bytes 
+ *                    HA adds dummy RSPAN (4B) and dummy E-Tag(8B) to be used as place holder when packet arrives to PHA fw.
+ *                    PHA fw will then overrun this area with GRE(4LSB) & ERSPAN II headers.    
+ * 
+ *              cfg template:    Not in use (16B). It is used by fw to hold L2 parameters copied from shared memory.
+ *              src & trg entries: PHA Target port table holds original packet target physical port for Egress mirroring (2B)  
+ *                                 PHA Source port table holds original packet source physical port for Ingress mirroring (2B)
+ *
+ *              hdr in:  | Extension space (64B) | origin MAC(12B) | dummy RSPAN tag(4B) | dummy E-Tag (8B) | payload |
+ *              hdr out: | Extension space (6B or 2B) | MAC(12B) | VLAN(4B) or not | ET(2B) | IPv6(40B) | GRE(8B) | ERSPAN Type II(8B) | origin MAC(12B) | payload |
+ *              Header Window anchor= Outer Layer 2
+ *              Header Window size= 96 bytes + 64 bytes Header increment space
+ *
+ *              Firmware adds the tunnel and sets the values according to architect's definitions.
+ *              - Copy origin MAC into dummy E-tag & RSPAN  
+ *              - Add IPv6 and L2 headers which are copied from shared memory 
+ *              - Add GRE & ERSPAN Type II and set them according to Architect's definitions
+ *              - Set IPv6 payload length  
+ *              - Update Desc<egress_byte_count> +=62(with vlan) or 58(without vlan) 
+ *              - Update Desc<fw_bc_modification> +=62(with vlan) or 58(without vlan)  
+ *****************************************************************************************************************************************/
+__attribute__ ((aligned (16))) 
+void PPA_FW(THR65_Erspan_TypeII_SameDevMirroring_Ipv6)() {
+    /* xt_iss_client_command("profile","enable");             */
+    /* xt_iss_client_command("profile","disable"); _exit(0);  */
+
+    uint32_t    sessionId;                     /* holds Ingress or Egress session ID (10 bits)                   */
+    uint32_t    smemAnalyzerTemplateBaseAddr;  /* holds base address of sFlow templates in shared memory         */
+    uint32_t    smemAnalayzerTemplateOfst;     /* holds base address of specific sFlow template in shared memory */
+    uint32_t    descRxSniff;                   /* holds value of Desc<rx_sniff> field                            */
+    uint32_t    vlanVid;                       /* holds value of vlan vid taken from shared memory template      */
+
+
+    /* Get pointer to descriptor */
+    struct ppa_in_desc* thr65_desc_ptr = AC5P_MEM_CAST(AC5P_DESC_REGs_lo,ppa_in_desc);
+
+#ifdef ASIC_SIMULATION
+    /* Print out the input packet */
+    __LOG_FW(("Print out the input packet"));
+    __LOG_PARAM_FW( PPA_FW_SP_READ(AC5P_PKT_REGs_lo + 64) );
+    __LOG_PARAM_FW( PPA_FW_SP_READ(AC5P_PKT_REGs_lo + 64 + 4) );
+    __LOG_PARAM_FW( PPA_FW_SP_READ(AC5P_PKT_REGs_lo + 64 + 8) );
+    __LOG_PARAM_FW( PPA_FW_SP_READ(AC5P_PKT_REGs_lo + 64 + 12) );
+    __LOG_PARAM_FW( PPA_FW_SP_READ(AC5P_PKT_REGs_lo + 64 + 16) );
+    __LOG_PARAM_FW( PPA_FW_SP_READ(AC5P_PKT_REGs_lo + 64 + 20) );
+    __LOG_PARAM_FW( PPA_FW_SP_READ(AC5P_PKT_REGs_lo + 64 + 24) );
+    __LOG_PARAM_FW( PPA_FW_SP_READ(AC5P_PKT_REGs_lo + 64 + 28) );
+    __LOG_PARAM_FW( PPA_FW_SP_READ(AC5P_PKT_REGs_lo + 64 + 32) );
+#endif /* ASIC_SIMULATION */
+
+    /* Get Rx Sniff value from descriptor to tell us if Ingress mirroring or Egress mirroring */
+    __LOG_FW(("Get Rx Sniff value from descriptor to tell us if Ingress mirroring or Egress mirroring"));
+    descRxSniff = thr65_desc_ptr->phal2ppa.rx_sniff;
+    __LOG_PARAM_FW(descRxSniff);
+
+
+    /*-----------------------------------------------------------------------------------------------------------------------------------------------
+      - Calculate offset to the right Analyzer ePort template in shared memory according to shared memory index 
+      ------------------------------------------------------------------------------------------------------------------------------------------------*/
+     __LOG_FW(("Calculate offset to the right Analyzer ePort template in shared memory according to shared memory index"));
+
+    /* Desc.pha_metadata[0:2] contains shared memory index. Applicable values are 0:6. */
+    __LOG_FW(("Desc.pha_metadata[0:2] contains shared memory index. Applicable values are 0:6."));
+    smemAnalayzerTemplateOfst = (thr65_desc_ptr->phal2ppa.pha_metadata0 & 0x7)*64;
+    __LOG_PARAM_FW(thr65_desc_ptr->phal2ppa.pha_metadata0);
+    __LOG_PARAM_FW(smemAnalayzerTemplateOfst);
+
+    /* Get base address of the required Analyzer ePort template in shared memory */
+    __LOG_FW(("Get base address of the required Analyzer ePort template in shared memory"));
+    smemAnalyzerTemplateBaseAddr = DRAM_CC_ERSPAN_ANALYZER_EPORT_1_TEMPLATE_ADDR + smemAnalayzerTemplateOfst;
+    __LOG_PARAM_FW(smemAnalyzerTemplateBaseAddr);
+
+
+    /*-----------------------------------------------------------------------------------------------------------------------------------------------
+      - Get 16B of L2 parameters from shared memory: | mac da sa(12B) | vlan tag(4B) | and placed them in thread's template
+      - To avoid 32 bits alignment issues (packet starts after 2 bytes since Ethertype included), copy it first to CFG template and then to packet
+      ------------------------------------------------------------------------------------------------------------------------------------------------*/
+     __LOG_FW(("Get 16B of L2 parameters from shared memory: | mac da sa(12B) | vlan tag(4B) | and placed them in thread's template"));
+
+    PPA_FW_SP_WRITE( (AC5P_CFG_REGs_lo + 0) , PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr +  IPV6_BASIC_HEADER_SIZE + 4)  );
+    PPA_FW_SP_WRITE( (AC5P_CFG_REGs_lo + 4) , PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr +  IPV6_BASIC_HEADER_SIZE + 8)  );
+    PPA_FW_SP_WRITE( (AC5P_CFG_REGs_lo + 8) , PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr +  IPV6_BASIC_HEADER_SIZE + 12)  );
+    PPA_FW_SP_WRITE( (AC5P_CFG_REGs_lo + 12) , PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr +  IPV6_BASIC_HEADER_SIZE + 16)  );
+    __LOG_PARAM_FW(PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr + IPV6_BASIC_HEADER_SIZE + 4));
+    __LOG_PARAM_FW(PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr + IPV6_BASIC_HEADER_SIZE + 8));
+    __LOG_PARAM_FW(PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr + IPV6_BASIC_HEADER_SIZE + 12));
+    __LOG_PARAM_FW(PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr + IPV6_BASIC_HEADER_SIZE + 16));
+
+
+    /*-----------------------------------------------------------------------------------------------------------------------------------------------
+      - Get 40B of IPv6 header from shared memory and place them in output packet
+      ------------------------------------------------------------------------------------------------------------------------------------------------*/
+     __LOG_FW(("Get 40B of IPv6 header from shared memory and place them in output packet"));
+
+    PPA_FW_SP_WRITE( (AC5P_PKT_REGs_lo + 20) , PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr +  0)  );
+    PPA_FW_SP_WRITE( (AC5P_PKT_REGs_lo + 24) , PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr +  4)  );
+    PPA_FW_SP_WRITE( (AC5P_PKT_REGs_lo + 28) , PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr +  8)  );
+    PPA_FW_SP_WRITE( (AC5P_PKT_REGs_lo + 32) , PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr + 12)  );
+    PPA_FW_SP_WRITE( (AC5P_PKT_REGs_lo + 36) , PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr + 16)  );
+    PPA_FW_SP_WRITE( (AC5P_PKT_REGs_lo + 40) , PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr + 20)  );
+    PPA_FW_SP_WRITE( (AC5P_PKT_REGs_lo + 44) , PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr + 24)  );
+    PPA_FW_SP_WRITE( (AC5P_PKT_REGs_lo + 48) , PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr + 28)  );
+    PPA_FW_SP_WRITE( (AC5P_PKT_REGs_lo + 52) , PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr + 32)  );
+    PPA_FW_SP_WRITE( (AC5P_PKT_REGs_lo + 56) , PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr + 36)  );
+    __LOG_PARAM_FW(PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr + 0));
+    __LOG_PARAM_FW(PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr + 4));
+    __LOG_PARAM_FW(PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr + 8));
+    __LOG_PARAM_FW(PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr + 12));
+    __LOG_PARAM_FW(PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr + 16));
+    __LOG_PARAM_FW(PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr + 20));
+    __LOG_PARAM_FW(PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr + 24));
+    __LOG_PARAM_FW(PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr + 28));
+    __LOG_PARAM_FW(PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr + 32));
+    __LOG_PARAM_FW(PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr + 36));
+
+
+    /*-----------------------------------------------------------------------------------------------------------------------------------------------
+      - Get session ID from shared memory. This address contains  | reserved(12b) | Ingress session ID(10b) | Egress session ID(10b) |
+      ------------------------------------------------------------------------------------------------------------------------------------------------*/
+    __LOG_FW(("Get session ID from shared memory. This address contains  | reserved(12b) | Ingress session ID(10b) | Egress session ID(10b) |"));
+
+     sessionId = PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr +  IPV6_BASIC_HEADER_SIZE) ;
+     __LOG_PARAM_FW(sessionId);
+
+     /* Extract 10 bits of Ingress or Egress session ID according to Desc<rx_sniff> field */
+     __LOG_FW(("Extract 10 bits of Ingress or Egress session ID according to Desc<rx_sniff> field"));
+     sessionId = (sessionId >>(10*descRxSniff)) & 0x3FF;
+     __LOG_PARAM_FW(sessionId);
+     __PRAGMA_NO_REORDER
+
+
+    /*-----------------------------------------------------------------------------------------------------------------------------------------------
+     - Get VLAN vid
+     ------------------------------------------------------------------------------------------------------------------------------------------------*/
+
+    /* Get vlan vid from template */
+    __LOG_FW(("Get vlan vid from template"));
+    vlanVid = PPA_FW_SP_READ(AC5P_CFG_REGs_lo + 12) & 0xFFF;
+    __LOG_PARAM_FW(vlanVid);
+
+
+    /*-----------------------------------------------------------------------------------------------------------------------------------------------
+     - Move origin MAC addresses into dummy RSPAN & E-Tag section
+     ------------------------------------------------------------------------------------------------------------------------------------------------*/
+
+    /* Move right origin MAC addresses by 12 bytes and overrun dummy RSPAN & E-tag */
+    __LOG_FW(("Move right origin MAC addresses by 12 bytes and overrun dummy RSPAN & E-tag"));
+    ACCEL_CMD_TRIG(SHIFTRIGHT_12_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_LEN12_FROM_PKT_mac_header__mac_da_47_32_OFFSET, 0);
+   	__PRAGMA_NO_REORDER
+
+
+    /*-----------------------------------------------------------------------------------------------------------------------------------------------
+     - Set Ether Type to 0x86dd (IPv6)
+     ------------------------------------------------------------------------------------------------------------------------------------------------*/
+     __LOG_FW(("Set Ether Type to 0x86dd (IPv6)"));
+
+    ACCEL_CMD_TRIG(COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x86_LEN8_TO_PKT_ethertype_header__ethertype_OFFSET, 0);
+    ACCEL_CMD_TRIG(COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0xDD_LEN8_TO_PKT_ethertype_header__ethertype_PLUS8_OFFSET, 0);
+
+
+    /*-----------------------------------------------------------------------------------------------------------------------------------------------
+     - Set packet GRE header (8B)
+     ------------------------------------------------------------------------------------------------------------------------------------------------*/
+     __LOG_FW(("Set packet GRE header (8B)"));
+
+    /* Set GRE.flags to 0x1000. Clear all other bits in range of 32 bits to zero to get 0x1000 value */
+    __LOG_FW(("Set GRE.flags to 0x1000. Clear all other bits in range of 32 bits to zero to get 0x1000 value"));
+    ACCEL_CMD_TRIG(COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x10_LEN8_TO_PKT_GRE_header__C_OFFSET, SET_REMAIN_FIELDS_TO_ZERO);
+   	__PRAGMA_NO_REORDER
+
+    /* Set GRE.Protocol to 0x88BE */
+    __LOG_FW(("Set GRE.Protocol to 0x88BE"));
+    ACCEL_CMD_TRIG(COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x88_LEN8_TO_PKT_GRE_header__NP_OFFSET, 0);
+    ACCEL_CMD_TRIG(COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0xBE_LEN8_TO_PKT_GRE_header__NP_PLUS8_OFFSET, 0);
+
+    /* Set GRE.Sequence Number to Desc<LM Counter> */
+    __LOG_FW(("Set GRE.Sequence Number to Desc<LM Counter>"));
+	ACCEL_CMD_TRIG(COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__lm_counter_LEN4_TO_PKT_GRE_header__Seq_num_OFFSET, 0);
+
+
+    /*-----------------------------------------------------------------------------------------------------------------------------------------------
+     - Set packet ERSPAN header (8B)
+     ------------------------------------------------------------------------------------------------------------------------------------------------*/
+     __LOG_FW(("Set packet ERSPAN header (8B)"));
+
+    /* Set Ingress or Egress ERSPAN header.sessionID (extracted earlier according to Desc<rx_sniff>).
+       Write it as 4B so rest fields (Ver,VLAN,COS,En,T) are cleared to zero */
+    __LOG_FW(("Set Ingress or Egress ERSPAN header.sessionID (extracted earlier according to Desc<rx_sniff>)."
+              "Write it as 4B so rest fields (Ver,VLAN,COS,En,T) are cleared to zero"));
+    PPA_FW_SP_WRITE( (AC5P_PKT_REGs_lo + 68) , sessionId ); 
+
+    /* Set 20  bits of ERSPAN.index with PHA target/Source Physical Port bits [15:0], rest 4 bits are cleared to zero.
+       if descRxSniff = 0 trigger target port accelerator if 1 trigger source port accelerator (next command 4B offset) */
+    __LOG_FW(("Set 20  bits of ERSPAN.index with PHA target/Source Physical Port bits [15:0], rest 4 bits are cleared to zero."
+              "if descRxSniff = 0 trigger target port accelerator if 1 trigger source port accelerator (next command 4B offset)"));
+    ACCEL_CMD_TRIG(COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_srcTrgPortEntry__targetPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4_OFFSET + 4*descRxSniff, SET_REMAIN_FIELDS_TO_ZERO);
+   	__PRAGMA_NO_REORDER
+
+    /* Set ERSPAN.Ver to 1(4b) and ERSPAN.VLAN(12b) to 0 (cleared already when sessionID field was set) */
+    __LOG_FW(("Set ERSPAN.Ver to 1(4b) and ERSPAN.VLAN(12b) to 0 (cleared already when sessionID field was set) "));
+    ACCEL_CMD_TRIG(COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x1_LEN4_TO_PKT_ERSPAN_type_II_header__Ver_OFFSET, 0);
+
+    /* Set ERSPAN.COS to Desc<QoS Mapped UP> */
+    __LOG_FW(("Set ERSPAN.COS to Desc<QoS Mapped UP>"));
+    ACCEL_CMD_TRIG(COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__qos_mapped_up_LEN3_TO_PKT_ERSPAN_type_II_header__COS_OFFSET, 0);
+
+    /* Set ERSPAN.En to 3(2b) */
+    __LOG_FW(("Assign ERSPAN.En to 3(2b)"));
+    ACCEL_CMD_TRIG(COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x3_LEN2_TO_PKT_ERSPAN_type_II_header__En_OFFSET, 0);
+    
+    /* Set ERSPAN.T(1b) to Desc<truncated> */
+    __LOG_FW(("Assign ERSPAN.T(1b) to Desc<truncated>"));
+    ACCEL_CMD_TRIG(COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__truncated_LEN1_TO_PKT_ERSPAN_type_II_header__T_OFFSET, 0);
+
+
+    /*-----------------------------------------------------------------------------------------------------------------------------------------------
+     - Update packet IPv6 payload length field                         
+     ------------------------------------------------------------------------------------------------------------------------------------------------*/
+    __LOG_FW(("Update IPv6 payload length field"));
+
+
+    /* Set IPv6 Header<Payload Length> = Desc<Egress Byte Count>+16 */
+    __LOG_FW(("Set IPv6 Header<Payload Length>= Desc<Egress Byte Count>+16"));
+
+    /* First copy Desc.Egress Byte Count(14b) to IPv6.Payload Length(16b).
+       Assumption 2 MS bits were already cleared by application when setting IPv6<Payload length> field in shared memory */
+    __LOG_FW(("First copy Desc.Egress Byte Count(14b) to IPv6.Payload Length(16b)"));
+	ACCEL_CMD_TRIG(COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__egress_byte_count_LEN14_TO_PKT_IPv6_Header__payload_length_PLUS2_OFFSET, 0);
+    __PRAGMA_NO_REORDER
+
+    /* IPv6 payload Length +=16 */
+    __LOG_FW(("IPv6 payload Length +=16"));
+    ACCEL_CMD_TRIG(ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x10_LEN16_TO_PKT_IPv6_Header__payload_length_OFFSET, 0);
+	__PRAGMA_NO_REORDER
+
+
+    /*-----------------------------------------------------------------------------------------------------------------------------------------------
+     - Set L2 header: MAC DA SA + vlan tag or no vlan tag
+     - Update Desc<Egress Byte Count> +=58 or 62(with vlan)                         
+     - Update Desc<fw_bc_modification> +=58 or 62(with vlan)
+     ------------------------------------------------------------------------------------------------------------------------------------------------*/
+    __LOG_FW(("Set L2 header with or without vlan tag, Update Desc<Egress Byte Count> +=58 or 62(with vlan), Update Desc<fw_bc_modification> +=58 or 62(with vlan)"));
+
+    /* Check if there is vlan or not. If thread's template<vlanVid>=0 then there is no vlan */
+    __LOG_FW(("Check if there is vlan or not. If thread's template<vlanVid>=0 then there is no vlan"));    
+    if (vlanVid == 0)
+    { /* No vlan */
+
+        /* Indicates HW about the new starting point of the packet header (+58 bytes) */
+        __LOG_FW(("Indicates HW about the new starting point of the packet header (+58 bytes)"));
+        thr65_desc_ptr->ppa_internal_desc.fw_bc_modification = 58;
+
+        /* No vlan, just copy MAC 12 bytes from thread's template */
+        __LOG_FW(("No vlan, just copy MAC 12 bytes from thread's template"));
+        ACCEL_CMD_TRIG(COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_erspan_template__mac_da_47_32_LEN12_TO_PKT_IPv6_Header__version_MINUS14_OFFSET, 0);
+
+        /* Desc<Egress Byte Count> +=58 */
+        __LOG_FW(("Desc<Egress Byte Count> +=58"));
+        ACCEL_CMD_TRIG(ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x3A_LEN14_TO_DESC_phal2ppa__egress_byte_count_OFFSET, 0);
+    }
+    else
+    {/* With vlan */
+
+        /* Indicates HW about the new starting point of the packet header (+62 bytes) */
+        __LOG_FW(("Indicates HW about the new starting point of the packet header (+62 bytes)"));
+        thr65_desc_ptr->ppa_internal_desc.fw_bc_modification = 62;
+
+        /* With vlan, copy MAC(12B) + vlan tag(4B) from thread's template */
+        __LOG_FW(("With vlan, copy MAC(12B) + vlan tag(4B) from thread's template"));
+        ACCEL_CMD_TRIG(COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_erspan_template__mac_da_47_32_LEN16_TO_PKT_IPv6_Header__version_MINUS18_OFFSET, 0);
+ 
+        /* Desc<Egress Byte Count> +=62 */
+        __LOG_FW(("Desc<Egress Byte Count> +=62"));
+        ACCEL_CMD_TRIG(ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x3E_LEN14_TO_DESC_phal2ppa__egress_byte_count_OFFSET, 0);
+    }
+
+
+#if (CHECK_STACK)
+    /* Check if stack was overflowed */
+    __LOG_FW(("Check if stack was overflowed"));
+    ac5p_stack_overflow_checker(65);
+#endif
+
+    /* Execute the packet swap sequence to jump to the next Thread */
+    __LOG_FW(("Execute the packet swap sequence to jump to the next Thread"));
+    packet_swap_sequence();
+}
+
+
 /*************************************************************************************************************************************//**
  * funcname     THR66_enhanced_sFlow
  * inparam      None
@@ -4689,7 +5343,7 @@ void PPA_FW(THR66_enhanced_sFlow)() {
     __LOG_FW(("Read sequence number from shared memory"));
     seqNumVal = PPA_FW_SP_READ(smemSeqNumTableEntryAddr);
     __LOG_PARAM_FW(seqNumVal);
-	__PRAGMA_NO_REORDER
+    __PRAGMA_NO_REORDER
 
     /* Increment sequence number by 1 */
     __LOG_FW(("Increment sequence number by 1"));
@@ -4709,7 +5363,7 @@ void PPA_FW(THR66_enhanced_sFlow)() {
     /* Clear Word0, Word1 & word2 */
     __LOG_FW(("Clear Word0, Word1 & word2"));
     ACCEL_CMD_TRIG(COPY_BYTES_THR66_enhanced_sFlow_CFG_enhanced_sflow_template__reserved_0_LEN12_TO_PKT_enhanced_sflow_shim_header__version_OFFSET, 0);
-	__PRAGMA_NO_REORDER
+    __PRAGMA_NO_REORDER
 
     /* Word0: sFlow Version. Set to fixed value 0x5 */
     __LOG_FW(("Word0: sFlow Version. Set to fixed value 0x5"));
@@ -4752,7 +5406,7 @@ void PPA_FW(THR66_enhanced_sFlow)() {
     /* Clear word4,word5 and word6 */
     __LOG_FW(("Clear word4,word5 and word6"));
     ACCEL_CMD_TRIG(COPY_BYTES_THR66_enhanced_sFlow_CFG_enhanced_sflow_template__reserved_0_LEN12_TO_PKT_enhanced_sflow_rx_ts_shim_header__checksum_OFFSET, 0);
-	__PRAGMA_NO_REORDER
+    __PRAGMA_NO_REORDER
 
     /* Word5 (bits[31:16]): Set rx timestamp[47:32] (16 bits of seconds part) */
     __LOG_FW(("Word5 (bits[31:16]): Set rx timestamp[47:32] (16 bits of seconds part)"));
@@ -4766,7 +5420,7 @@ void PPA_FW(THR66_enhanced_sFlow)() {
     __LOG_FW(("Read TOD word 0 which represents nano seconds field"));
     ts_nano_sec = READ_TOD_IF_REG(TOD_WORD_0, tai_sel);
     __LOG_PARAM_FW(ts_nano_sec);
-	__PRAGMA_NO_REORDER
+    __PRAGMA_NO_REORDER
 
     /* Check for wraparound */
     __LOG_FW(("Read again seconds (TOD word 1) to check for wraparound"));
@@ -4810,15 +5464,10 @@ void PPA_FW(THR66_enhanced_sFlow)() {
     /* Word6 (bits[7:0]) & Clear MS byte of IP_high. Was already cleared */
     __LOG_FW(("Word6 (bits[7:0]) & Clear MS byte of IP_high. Was already cleared"));
 
-    /* Word7 (bits[31:24] & bits[23:17]): Clear LS byte of IP high plus Set port number (7 bits)
-       If Desc<Orig is Trunk> copy it from Desc<Orig Src Trunk ID> else copy it from Desc<orig_src_eport>
-       Since these 2 fields are muxed, start from same position and required only 7 LS bits, no need to check condition of Desc<Orig is Trunk> */
-     __LOG_FW(("Word7 (bits[31:24] & bits[23:17]): Clear LS byte of IP high plus Set port number (7 bits). If Desc<Orig is Trunk> copy it from Desc<Orig Src Trunk ID> else copy it from Desc<orig_src_eport>"));
-    ACCEL_CMD_TRIG(COPY_BITS_THR66_enhanced_sFlow_DESC_phal2ppa__orig_src_eport_PLUS6_LEN7_TO_PKT_enhanced_sflow_rx_ts_shim_header__port_number_OFFSET, SET_REMAIN_FIELDS_TO_ZERO);
-	__PRAGMA_NO_REORDER
-
-    /* Word7 (bit[16]): Set port direction (1 bit) to '0' (already done) */
-     __LOG_FW(("Word7 (bit[16]): Set port direction (1 bit) to '0' (already done)"));
+    /* Word7: Clear |ip_high | port(num,dir) | TX TS CS(2MSB) | and set port direction (1 bit) to '0' */
+    __LOG_FW(("Word7: Clear |ip_high | port(num,dir) | TX TS CS(2MSB) | and set port direction (1 bit) to '0'"));
+    ACCEL_CMD_TRIG(COPY_BITS_THR66_enhanced_sFlow_CONST_0x0_LEN1_TO_PKT_enhanced_sflow_rx_ts_shim_header__port_direction_OFFSET, SET_REMAIN_FIELDS_TO_ZERO);
+    __PRAGMA_NO_REORDER
 
 
     /*------------------------------------------------------------------------------------------------------------------------------------------------
@@ -4833,11 +5482,7 @@ void PPA_FW(THR66_enhanced_sFlow)() {
     /* Clear Word8,Word9 & Word10 (TX_TS_CS, tx_timestamp,reserved,ip_low & port info)*/
     __LOG_FW(("Clear Word8,Word9 & Word10 (TX_TS_CS, tx_timestamp,reserved,ip_low & port info)"));
     ACCEL_CMD_TRIG(COPY_BYTES_THR66_enhanced_sFlow_CFG_enhanced_sflow_template__reserved_0_LEN12_TO_PKT_enhanced_sflow_tx_ts_shim_header__checksum_PLUS2_OFFSET, 0);
-	__PRAGMA_NO_REORDER
-
-    /* Word10 (bits[7:1]): Set target port number */
-    __LOG_FW(("Word10 (bits[7:1]): Set target port number"));
-    ACCEL_CMD_TRIG(COPY_BITS_THR66_enhanced_sFlow_DESC_phal2ppa__trg_phy_port_PLUS3_LEN7_TO_PKT_enhanced_sflow_tx_ts_shim_header__port_number_OFFSET, 0);
+    __PRAGMA_NO_REORDER
 
     /* Word10 (bit[0]): Set target port direction to '1' */
     __LOG_FW(("Word10 (bit[0]): Set target port direction to '1'"));
@@ -4920,7 +5565,7 @@ void ac5pRecoveFromException ()
     /* Execute the packet swap sequence to jump to the next Thread */
     packet_swap_sequence();
 }
-#endif	/* RECOVER_FROM_EXCEPTION */
+#endif  /* RECOVER_FROM_EXCEPTION */
 
 
 
@@ -4991,8 +5636,8 @@ THREAD_TYPE phaThreadsTypeAc5pImage01[] = {
     /*61*/ ,PPA_FW(THR61_save_target_port_info)
     /*62*/ ,PPA_FW(THR62_enhanced_sFlow_fill_remain_IPv4)
     /*63*/ ,PPA_FW(THR63_enhanced_sFlow_fill_remain_IPv6)
-    /*64*/ ,invalidFirmwareThread
-    /*65*/ ,invalidFirmwareThread
+    /*64*/ ,PPA_FW(THR64_Erspan_TypeII_SameDevMirroring_Ipv4)
+    /*65*/ ,PPA_FW(THR65_Erspan_TypeII_SameDevMirroring_Ipv6)
     /*66*/ ,PPA_FW(THR66_enhanced_sFlow)
     /*67*/ ,invalidFirmwareThread
     /*68*/ ,invalidFirmwareThread
diff --git a/simulation/simDevices/src/asicSimulation/SKernel/sEmbeddedCpu/firmware/ac5p_pha/ac5p_main.c b/simulation/simDevices/src/asicSimulation/SKernel/sEmbeddedCpu/firmware/ac5p_pha/ac5p_main.c
index 1eff75607c..998e6c2c78 100644
--- a/simulation/simDevices/src/asicSimulation/SKernel/sEmbeddedCpu/firmware/ac5p_pha/ac5p_main.c
+++ b/simulation/simDevices/src/asicSimulation/SKernel/sEmbeddedCpu/firmware/ac5p_pha/ac5p_main.c
@@ -169,6 +169,57 @@ void ac5p_init_shared_data_memory(uint32_t ppn_num)
         /* Initialize QL encoding table */
         ac5p_queue_length_encoder_init();
         #endif /* ENABLE_THR37_Tunnel_Terminated_Data_Traffic */
+
+#ifdef CC_ERSPAN_CHECK
+
+        #if 1
+        /* Set IPv4 header 20 bytes to Shared memory */
+        PPA_FW_SP_WRITE( DRAM_CC_ERSPAN_ANALYZER_EPORT_2_TEMPLATE_ADDR + 0  , 0x42220100 );
+        PPA_FW_SP_WRITE( DRAM_CC_ERSPAN_ANALYZER_EPORT_2_TEMPLATE_ADDR + 4  , 0x33332222 );
+        PPA_FW_SP_WRITE( DRAM_CC_ERSPAN_ANALYZER_EPORT_2_TEMPLATE_ADDR + 8  , 0x05432000 );
+        PPA_FW_SP_WRITE( DRAM_CC_ERSPAN_ANALYZER_EPORT_2_TEMPLATE_ADDR + 12 , 0x10000001 );
+        PPA_FW_SP_WRITE( DRAM_CC_ERSPAN_ANALYZER_EPORT_2_TEMPLATE_ADDR + 16 , 0x20000002 );
+
+        /* Set Ingress session ID and Egress session ID */
+        PPA_FW_SP_WRITE( DRAM_CC_ERSPAN_ANALYZER_EPORT_2_TEMPLATE_ADDR + 20 , 0xcc755 );
+
+        /* Set L2 MAC DA and MAC SA */
+        PPA_FW_SP_WRITE( DRAM_CC_ERSPAN_ANALYZER_EPORT_2_TEMPLATE_ADDR + 24 , 0xaaaaaaaa );
+        PPA_FW_SP_WRITE( DRAM_CC_ERSPAN_ANALYZER_EPORT_2_TEMPLATE_ADDR + 28 , 0xaaaabbbb );
+        PPA_FW_SP_WRITE( DRAM_CC_ERSPAN_ANALYZER_EPORT_2_TEMPLATE_ADDR + 32 , 0xbbbbbbbb );
+        /* Set TPID,up,cfi and vid */
+        PPA_FW_SP_WRITE( DRAM_CC_ERSPAN_ANALYZER_EPORT_2_TEMPLATE_ADDR + 36 , 0x8100F987/*0x8100F000*/ );
+
+        /* Set Falcon device ID */
+        PPA_FW_SP_WRITE( DRAM_CC_ERSPAN_GLOBAL_ADDR , 0x000b0100 );
+        #else
+        /* Set IPv6 header 40 bytes to Shared memory */
+        PPA_FW_SP_WRITE( DRAM_CC_ERSPAN_ANALYZER_EPORT_2_TEMPLATE_ADDR + 0  , 0x62220100 );
+        PPA_FW_SP_WRITE( DRAM_CC_ERSPAN_ANALYZER_EPORT_2_TEMPLATE_ADDR + 4  , 0x33332222 );
+        PPA_FW_SP_WRITE( DRAM_CC_ERSPAN_ANALYZER_EPORT_2_TEMPLATE_ADDR + 8  , 0x10000001 );
+        PPA_FW_SP_WRITE( DRAM_CC_ERSPAN_ANALYZER_EPORT_2_TEMPLATE_ADDR + 12 , 0x20000002 );
+        PPA_FW_SP_WRITE( DRAM_CC_ERSPAN_ANALYZER_EPORT_2_TEMPLATE_ADDR + 16 , 0x30000003 );
+        PPA_FW_SP_WRITE( DRAM_CC_ERSPAN_ANALYZER_EPORT_2_TEMPLATE_ADDR + 20 , 0x40000004 );
+        PPA_FW_SP_WRITE( DRAM_CC_ERSPAN_ANALYZER_EPORT_2_TEMPLATE_ADDR + 24 , 0x50000005 );
+        PPA_FW_SP_WRITE( DRAM_CC_ERSPAN_ANALYZER_EPORT_2_TEMPLATE_ADDR + 28 , 0x60000006 );
+        PPA_FW_SP_WRITE( DRAM_CC_ERSPAN_ANALYZER_EPORT_2_TEMPLATE_ADDR + 32 , 0x70000007 );
+        PPA_FW_SP_WRITE( DRAM_CC_ERSPAN_ANALYZER_EPORT_2_TEMPLATE_ADDR + 36 , 0x80000008 );
+
+        /* Set Ingress session ID and Egress session ID */
+        PPA_FW_SP_WRITE( DRAM_CC_ERSPAN_ANALYZER_EPORT_2_TEMPLATE_ADDR + 40 , 0xcc755 );
+
+        /* Set L2 MAC DA and MAC SA */
+        PPA_FW_SP_WRITE( DRAM_CC_ERSPAN_ANALYZER_EPORT_2_TEMPLATE_ADDR + 44 , 0xaaaaaaaa );
+        PPA_FW_SP_WRITE( DRAM_CC_ERSPAN_ANALYZER_EPORT_2_TEMPLATE_ADDR + 48 , 0xaaaabbbb );
+        PPA_FW_SP_WRITE( DRAM_CC_ERSPAN_ANALYZER_EPORT_2_TEMPLATE_ADDR + 52 , 0xbbbbbbbb );
+        /* Set TPID,up,cfi and vid */
+        PPA_FW_SP_WRITE( DRAM_CC_ERSPAN_ANALYZER_EPORT_2_TEMPLATE_ADDR + 56 , 0x8100F987/*0x8100F000*/);
+
+        /* Set Falcon device ID */
+        PPA_FW_SP_WRITE( DRAM_CC_ERSPAN_GLOBAL_ADDR , 0x000b0100 );
+        #endif
+
+#endif
         /* Initialize sFlow tables in shared memory. 
            Firmware is the one to maintain these counters and so clear all tables at power up.   
             - Enhanced sFlow Sequence number table
diff --git a/simulation/simDevices/src/asicSimulation/SKernel/sEmbeddedCpu/firmware/ac5p_pha/simEnv/simAc5pPhaFirmwareUtil.c b/simulation/simDevices/src/asicSimulation/SKernel/sEmbeddedCpu/firmware/ac5p_pha/simEnv/simAc5pPhaFirmwareUtil.c
index 8bea250beb..eb3dc85df2 100644
--- a/simulation/simDevices/src/asicSimulation/SKernel/sEmbeddedCpu/firmware/ac5p_pha/simEnv/simAc5pPhaFirmwareUtil.c
+++ b/simulation/simDevices/src/asicSimulation/SKernel/sEmbeddedCpu/firmware/ac5p_pha/simEnv/simAc5pPhaFirmwareUtil.c
@@ -546,7 +546,7 @@ static void ac5p_convertSimulationDescToPHaDesc
     ppa_in_desc_Ptr->phal2ppa.use_vidx                              = descrPtr->useVidx;
     ppa_in_desc_Ptr->phal2ppa.egress_packet_cmd                     = descrPtr->packetCmd;
     ppa_in_desc_Ptr->phal2ppa.orig_src_eport                        = descrPtr->origSrcEPortOrTrnk;
-    ppa_in_desc_Ptr->phal2ppa.qos_profile                           = TBD;
+    ppa_in_desc_Ptr->phal2ppa.rx_sniff                              = descrPtr->rxSniff;
     if (descrPtr->oamInfo.lmCounterInsertEnable)
     {
         ppa_in_desc_Ptr->phal2ppa.timestamp                         = descrPtr->oamInfo.lmCounter;
@@ -686,6 +686,7 @@ static void ac5p_convertPHaDescToSimulationDesc
     descrPtr->useVidx                        = ppa_in_desc_Ptr->phal2ppa.use_vidx                           ;
     descrPtr->packetCmd                      = ppa_in_desc_Ptr->phal2ppa.egress_packet_cmd                  ;
     descrPtr->origSrcEPortOrTrnk             = ppa_in_desc_Ptr->phal2ppa.orig_src_eport                     ;
+    descrPtr->rxSniff                        = ppa_in_desc_Ptr->phal2ppa.rx_sniff                           ;
     descrPtr->packetTimestamp                = ppa_in_desc_Ptr->phal2ppa.timestamp                          ;
 
     TBD                                      = ppa_in_desc_Ptr->ppa_internal_desc.accessible_header_start   ;
diff --git a/simulation/simDevices/src/asicSimulation/SKernel/sEmbeddedCpu/firmware/falcon_pha/Default/ppa_fw_accelerator_commands_FalconDefault.c b/simulation/simDevices/src/asicSimulation/SKernel/sEmbeddedCpu/firmware/falcon_pha/Default/ppa_fw_accelerator_commands_FalconDefault.c
index bf60b9789a..d32848352a 100644
--- a/simulation/simDevices/src/asicSimulation/SKernel/sEmbeddedCpu/firmware/falcon_pha/Default/ppa_fw_accelerator_commands_FalconDefault.c
+++ b/simulation/simDevices/src/asicSimulation/SKernel/sEmbeddedCpu/firmware/falcon_pha/Default/ppa_fw_accelerator_commands_FalconDefault.c
@@ -375,7 +375,8 @@ void PPA_FW(load_accelerator_commands)() {
     ACCEL_CMD_LOAD(COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_srcTrgPortEntry__srcPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4_OFFSET, COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_srcTrgPortEntry__srcPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4_VALUE);
     ACCEL_CMD_LOAD(COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x1_LEN4_TO_PKT_ERSPAN_type_II_header__Ver_OFFSET,             COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x1_LEN4_TO_PKT_ERSPAN_type_II_header__Ver_VALUE);
     ACCEL_CMD_LOAD(COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__qos_mapped_up_LEN3_TO_PKT_ERSPAN_type_II_header__COS_OFFSET, COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__qos_mapped_up_LEN3_TO_PKT_ERSPAN_type_II_header__COS_VALUE);
-    ACCEL_CMD_LOAD(COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x6_LEN3_TO_PKT_ERSPAN_type_II_header__En_OFFSET,              COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x6_LEN3_TO_PKT_ERSPAN_type_II_header__En_VALUE);
+    ACCEL_CMD_LOAD(COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x3_LEN2_TO_PKT_ERSPAN_type_II_header__En_OFFSET,              COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x3_LEN2_TO_PKT_ERSPAN_type_II_header__En_VALUE);
+    ACCEL_CMD_LOAD(COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__truncated_LEN1_TO_PKT_ERSPAN_type_II_header__T_OFFSET, COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__truncated_LEN1_TO_PKT_ERSPAN_type_II_header__T_VALUE);
     ACCEL_CMD_LOAD(COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__egress_byte_count_LEN14_TO_PKT_IPv4_Header__total_length_PLUS2_OFFSET, COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__egress_byte_count_LEN14_TO_PKT_IPv4_Header__total_length_PLUS2_VALUE);
     ACCEL_CMD_LOAD(ADD_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x24_LEN16_TO_PKT_IPv4_Header__total_length_OFFSET,             ADD_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x24_LEN16_TO_PKT_IPv4_Header__total_length_VALUE);
     ACCEL_CMD_LOAD(CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN8_FROM_PKT_IPv4_Header__version_OFFSET,                       CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN8_FROM_PKT_IPv4_Header__version_VALUE);
@@ -396,7 +397,8 @@ void PPA_FW(load_accelerator_commands)() {
     ACCEL_CMD_LOAD(COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_srcTrgPortEntry__srcPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4_OFFSET, COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_srcTrgPortEntry__srcPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4_VALUE);
     ACCEL_CMD_LOAD(COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x1_LEN4_TO_PKT_ERSPAN_type_II_header__Ver_OFFSET,             COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x1_LEN4_TO_PKT_ERSPAN_type_II_header__Ver_VALUE);
     ACCEL_CMD_LOAD(COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__qos_mapped_up_LEN3_TO_PKT_ERSPAN_type_II_header__COS_OFFSET, COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__qos_mapped_up_LEN3_TO_PKT_ERSPAN_type_II_header__COS_VALUE);
-    ACCEL_CMD_LOAD(COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x6_LEN3_TO_PKT_ERSPAN_type_II_header__En_OFFSET,              COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x6_LEN3_TO_PKT_ERSPAN_type_II_header__En_VALUE);
+    ACCEL_CMD_LOAD(COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x3_LEN2_TO_PKT_ERSPAN_type_II_header__En_OFFSET,              COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x3_LEN2_TO_PKT_ERSPAN_type_II_header__En_VALUE);
+    ACCEL_CMD_LOAD(COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__truncated_LEN1_TO_PKT_ERSPAN_type_II_header__T_OFFSET, COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__truncated_LEN1_TO_PKT_ERSPAN_type_II_header__T_VALUE);
     ACCEL_CMD_LOAD(COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__egress_byte_count_LEN14_TO_PKT_IPv6_Header__payload_length_PLUS2_OFFSET, COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__egress_byte_count_LEN14_TO_PKT_IPv6_Header__payload_length_PLUS2_VALUE);
     ACCEL_CMD_LOAD(ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x10_LEN16_TO_PKT_IPv6_Header__payload_length_OFFSET,           ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x10_LEN16_TO_PKT_IPv6_Header__payload_length_VALUE);
     ACCEL_CMD_LOAD(COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_erspan_template__mac_da_47_32_LEN12_TO_PKT_IPv6_Header__version_MINUS14_OFFSET, COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_erspan_template__mac_da_47_32_LEN12_TO_PKT_IPv6_Header__version_MINUS14_VALUE);
@@ -773,7 +775,8 @@ ACCEL_INFO_STC accelInfoArrFalconDefault[] =
     ,{ FALCON_ENUM_NAME_AND_VALUE( COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_srcTrgPortEntry__srcPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4_OFFSET), 64}
     ,{ FALCON_ENUM_NAME_AND_VALUE( COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x1_LEN4_TO_PKT_ERSPAN_type_II_header__Ver_OFFSET),            64}
     ,{ FALCON_ENUM_NAME_AND_VALUE( COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__qos_mapped_up_LEN3_TO_PKT_ERSPAN_type_II_header__COS_OFFSET), 64}
-    ,{ FALCON_ENUM_NAME_AND_VALUE( COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x6_LEN3_TO_PKT_ERSPAN_type_II_header__En_OFFSET),             64}
+    ,{ FALCON_ENUM_NAME_AND_VALUE( COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x3_LEN2_TO_PKT_ERSPAN_type_II_header__En_OFFSET),             64}
+    ,{ FALCON_ENUM_NAME_AND_VALUE( COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__truncated_LEN1_TO_PKT_ERSPAN_type_II_header__T_OFFSET), 64}
     ,{ FALCON_ENUM_NAME_AND_VALUE( COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__egress_byte_count_LEN14_TO_PKT_IPv4_Header__total_length_PLUS2_OFFSET), 64}
     ,{ FALCON_ENUM_NAME_AND_VALUE( ADD_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x24_LEN16_TO_PKT_IPv4_Header__total_length_OFFSET),            64}
     ,{ FALCON_ENUM_NAME_AND_VALUE( CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN8_FROM_PKT_IPv4_Header__version_OFFSET),                      64}
@@ -796,7 +799,8 @@ ACCEL_INFO_STC accelInfoArrFalconDefault[] =
     ,{ FALCON_ENUM_NAME_AND_VALUE( COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_srcTrgPortEntry__srcPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4_OFFSET), 65}
     ,{ FALCON_ENUM_NAME_AND_VALUE( COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x1_LEN4_TO_PKT_ERSPAN_type_II_header__Ver_OFFSET),            65}
     ,{ FALCON_ENUM_NAME_AND_VALUE( COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__qos_mapped_up_LEN3_TO_PKT_ERSPAN_type_II_header__COS_OFFSET), 65}
-    ,{ FALCON_ENUM_NAME_AND_VALUE( COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x6_LEN3_TO_PKT_ERSPAN_type_II_header__En_OFFSET),             65}
+    ,{ FALCON_ENUM_NAME_AND_VALUE( COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x3_LEN2_TO_PKT_ERSPAN_type_II_header__En_OFFSET),             65}
+    ,{ FALCON_ENUM_NAME_AND_VALUE( COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__truncated_LEN1_TO_PKT_ERSPAN_type_II_header__T_OFFSET), 65}
     ,{ FALCON_ENUM_NAME_AND_VALUE( COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__egress_byte_count_LEN14_TO_PKT_IPv6_Header__payload_length_PLUS2_OFFSET), 65}
     ,{ FALCON_ENUM_NAME_AND_VALUE( ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x10_LEN16_TO_PKT_IPv6_Header__payload_length_OFFSET),          65}
     ,{ FALCON_ENUM_NAME_AND_VALUE( COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_erspan_template__mac_da_47_32_LEN12_TO_PKT_IPv6_Header__version_MINUS14_OFFSET), 65}
diff --git a/simulation/simDevices/src/asicSimulation/SKernel/sEmbeddedCpu/firmware/falcon_pha/Default/ppa_fw_threads_FalconDefault.c b/simulation/simDevices/src/asicSimulation/SKernel/sEmbeddedCpu/firmware/falcon_pha/Default/ppa_fw_threads_FalconDefault.c
index f591fe755f..fa1eda2a35 100644
--- a/simulation/simDevices/src/asicSimulation/SKernel/sEmbeddedCpu/firmware/falcon_pha/Default/ppa_fw_threads_FalconDefault.c
+++ b/simulation/simDevices/src/asicSimulation/SKernel/sEmbeddedCpu/firmware/falcon_pha/Default/ppa_fw_threads_FalconDefault.c
@@ -3978,9 +3978,13 @@ void PPA_FW(THR64_Erspan_TypeII_SameDevMirroring_Ipv4)() {
     __LOG_FW(("Set ERSPAN.COS to Desc<QoS Mapped UP>"));
     ACCEL_CMD_TRIG(COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__qos_mapped_up_LEN3_TO_PKT_ERSPAN_type_II_header__COS_OFFSET, 0);
 
-    /* Set ERSPAN.En to 3(2b) and ERSPAN.T(1b) to 0 */
-    __LOG_FW(("Assign ERSPAN.En to 3(2b) and ERSPAN.T(1b) to 0"));
-    ACCEL_CMD_TRIG(COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x6_LEN3_TO_PKT_ERSPAN_type_II_header__En_OFFSET, 0);
+    /* Set ERSPAN.En to 3(2b) */
+    __LOG_FW(("Assign ERSPAN.En to 3(2b)"));
+    ACCEL_CMD_TRIG(COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x3_LEN2_TO_PKT_ERSPAN_type_II_header__En_OFFSET, 0);
+    
+    /* Set ERSPAN.T(1b) to Desc<truncated> */
+    __LOG_FW(("Assign ERSPAN.T(1b) to Desc<truncated>"));
+    ACCEL_CMD_TRIG(COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__truncated_LEN1_TO_PKT_ERSPAN_type_II_header__T_OFFSET, 0);
 
 
     /*-----------------------------------------------------------------------------------------------------------------------------------------------
@@ -4294,9 +4298,13 @@ void PPA_FW(THR65_Erspan_TypeII_SameDevMirroring_Ipv6)() {
     __LOG_FW(("Set ERSPAN.COS to Desc<QoS Mapped UP>"));
     ACCEL_CMD_TRIG(COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__qos_mapped_up_LEN3_TO_PKT_ERSPAN_type_II_header__COS_OFFSET, 0);
 
-    /* Set ERSPAN.En to 3(2b) and ERSPAN.T(1b) to 0 */
-    __LOG_FW(("Assign ERSPAN.En to 3(2b) and ERSPAN.T(1b) to 0"));
-    ACCEL_CMD_TRIG(COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x6_LEN3_TO_PKT_ERSPAN_type_II_header__En_OFFSET, 0);
+    /* Set ERSPAN.En to 3(2b) */
+    __LOG_FW(("Assign ERSPAN.En to 3(2b)"));
+    ACCEL_CMD_TRIG(COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x3_LEN2_TO_PKT_ERSPAN_type_II_header__En_OFFSET, 0);
+    
+    /* Set ERSPAN.T(1b) to Desc<truncated> */
+    __LOG_FW(("Assign ERSPAN.T(1b) to Desc<truncated>"));
+    ACCEL_CMD_TRIG(COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__truncated_LEN1_TO_PKT_ERSPAN_type_II_header__T_OFFSET, 0);
 
 
     /*-----------------------------------------------------------------------------------------------------------------------------------------------
diff --git a/simulation/simDevices/src/asicSimulation/SKernel/sEmbeddedCpu/firmware/falcon_pha/Image01/ppa_fw_accelerator_commands_FalconImage01.c b/simulation/simDevices/src/asicSimulation/SKernel/sEmbeddedCpu/firmware/falcon_pha/Image01/ppa_fw_accelerator_commands_FalconImage01.c
index ca52ca411f..87afea10e9 100644
--- a/simulation/simDevices/src/asicSimulation/SKernel/sEmbeddedCpu/firmware/falcon_pha/Image01/ppa_fw_accelerator_commands_FalconImage01.c
+++ b/simulation/simDevices/src/asicSimulation/SKernel/sEmbeddedCpu/firmware/falcon_pha/Image01/ppa_fw_accelerator_commands_FalconImage01.c
@@ -456,6 +456,8 @@ void PPA_FW(load_accelerator_commands)() {
     ACCEL_CMD_LOAD(CSUM_LOAD_NEW_THR62_enhanced_sFlow_fill_remain_IPv4_LEN2_FROM_PKT_IPv4_Header__total_length_OFFSET,                      CSUM_LOAD_NEW_THR62_enhanced_sFlow_fill_remain_IPv4_LEN2_FROM_PKT_IPv4_Header__total_length_VALUE);
     ACCEL_CMD_LOAD(CSUM_LOAD_OLD_THR62_enhanced_sFlow_fill_remain_IPv4_LEN2_FROM_PKT_IPv4_Header__header_checksum_OFFSET,                   CSUM_LOAD_OLD_THR62_enhanced_sFlow_fill_remain_IPv4_LEN2_FROM_PKT_IPv4_Header__header_checksum_VALUE);
     ACCEL_CMD_LOAD(CSUM_STORE_IP_THR62_enhanced_sFlow_fill_remain_IPv4_TO_PKT_IPv4_Header__header_checksum_OFFSET,                          CSUM_STORE_IP_THR62_enhanced_sFlow_fill_remain_IPv4_TO_PKT_IPv4_Header__header_checksum_VALUE);
+    ACCEL_CMD_LOAD(COPY_BITS_THR62_enhanced_sFlow_fill_remain_IPv4_DESC_phal2ppa__orig_src_eport_PLUS6_LEN7_TO_PKT_enhanced_sflow_rx_ts_shim_header__port_number_OFFSET, COPY_BITS_THR62_enhanced_sFlow_fill_remain_IPv4_DESC_phal2ppa__orig_src_eport_PLUS6_LEN7_TO_PKT_enhanced_sflow_rx_ts_shim_header__port_number_VALUE);
+    ACCEL_CMD_LOAD(COPY_BITS_THR62_enhanced_sFlow_fill_remain_IPv4_DESC_phal2ppa__local_dev_trg_phy_port_PLUS3_LEN7_TO_PKT_enhanced_sflow_tx_ts_shim_header__port_number_OFFSET, COPY_BITS_THR62_enhanced_sFlow_fill_remain_IPv4_DESC_phal2ppa__local_dev_trg_phy_port_PLUS3_LEN7_TO_PKT_enhanced_sflow_tx_ts_shim_header__port_number_VALUE);
     ACCEL_CMD_LOAD(COPY_BYTES_THR63_enhanced_sFlow_fill_remain_IPv6_DESC_phal2ppa__pha_metadata_LEN2_TO_PKT_enhanced_sflow_rx_ts_shim_header__ip_high_OFFSET, COPY_BYTES_THR63_enhanced_sFlow_fill_remain_IPv6_DESC_phal2ppa__pha_metadata_LEN2_TO_PKT_enhanced_sflow_rx_ts_shim_header__ip_high_VALUE);
     ACCEL_CMD_LOAD(CSUM_LOAD_NEW_THR63_enhanced_sFlow_fill_remain_IPv6_LEN6_FROM_PKT_enhanced_sflow_rx_ts_shim_header__rx_timestamp_47_32_OFFSET, CSUM_LOAD_NEW_THR63_enhanced_sFlow_fill_remain_IPv6_LEN6_FROM_PKT_enhanced_sflow_rx_ts_shim_header__rx_timestamp_47_32_VALUE);
     ACCEL_CMD_LOAD(CSUM_LOAD_NEW_THR63_enhanced_sFlow_fill_remain_IPv6_LEN4_FROM_PKT_enhanced_sflow_rx_ts_shim_header__reserved_OFFSET,     CSUM_LOAD_NEW_THR63_enhanced_sFlow_fill_remain_IPv6_LEN4_FROM_PKT_enhanced_sflow_rx_ts_shim_header__reserved_VALUE);
@@ -467,6 +469,8 @@ void PPA_FW(load_accelerator_commands)() {
     ACCEL_CMD_LOAD(COPY_BITS_THR63_enhanced_sFlow_fill_remain_IPv6_CONST_0x1_LEN1_TO_DESC_phal2ppa__egress_checksum_mode_OFFSET,            COPY_BITS_THR63_enhanced_sFlow_fill_remain_IPv6_CONST_0x1_LEN1_TO_DESC_phal2ppa__egress_checksum_mode_VALUE);
     ACCEL_CMD_LOAD(ADD_BITS_THR63_enhanced_sFlow_fill_remain_IPv6_CONST_0x2C_LEN16_TO_PKT_udp_header__Length_OFFSET,                        ADD_BITS_THR63_enhanced_sFlow_fill_remain_IPv6_CONST_0x2C_LEN16_TO_PKT_udp_header__Length_VALUE);
     ACCEL_CMD_LOAD(ADD_BITS_THR63_enhanced_sFlow_fill_remain_IPv6_CONST_0x2C_LEN16_TO_PKT_IPv6_Header__payload_length_OFFSET,               ADD_BITS_THR63_enhanced_sFlow_fill_remain_IPv6_CONST_0x2C_LEN16_TO_PKT_IPv6_Header__payload_length_VALUE);
+    ACCEL_CMD_LOAD(COPY_BITS_THR63_enhanced_sFlow_fill_remain_IPv6_DESC_phal2ppa__orig_src_eport_PLUS6_LEN7_TO_PKT_enhanced_sflow_rx_ts_shim_header__port_number_OFFSET, COPY_BITS_THR63_enhanced_sFlow_fill_remain_IPv6_DESC_phal2ppa__orig_src_eport_PLUS6_LEN7_TO_PKT_enhanced_sflow_rx_ts_shim_header__port_number_VALUE);
+    ACCEL_CMD_LOAD(COPY_BITS_THR63_enhanced_sFlow_fill_remain_IPv6_DESC_phal2ppa__local_dev_trg_phy_port_PLUS3_LEN7_TO_PKT_enhanced_sflow_tx_ts_shim_header__port_number_OFFSET, COPY_BITS_THR63_enhanced_sFlow_fill_remain_IPv6_DESC_phal2ppa__local_dev_trg_phy_port_PLUS3_LEN7_TO_PKT_enhanced_sflow_tx_ts_shim_header__port_number_VALUE);
     ACCEL_CMD_LOAD(COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x08_LEN8_TO_PKT_ethertype_header__ethertype_OFFSET,           COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x08_LEN8_TO_PKT_ethertype_header__ethertype_VALUE);
     ACCEL_CMD_LOAD(COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x10_LEN8_TO_PKT_GRE_header__C_OFFSET,                         COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x10_LEN8_TO_PKT_GRE_header__C_VALUE);
     ACCEL_CMD_LOAD(COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x88_LEN8_TO_PKT_GRE_header__NP_OFFSET,                        COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x88_LEN8_TO_PKT_GRE_header__NP_VALUE);
@@ -476,7 +480,8 @@ void PPA_FW(load_accelerator_commands)() {
     ACCEL_CMD_LOAD(COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_srcTrgPortEntry__srcPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4_OFFSET, COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_srcTrgPortEntry__srcPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4_VALUE);
     ACCEL_CMD_LOAD(COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x1_LEN4_TO_PKT_ERSPAN_type_II_header__Ver_OFFSET,             COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x1_LEN4_TO_PKT_ERSPAN_type_II_header__Ver_VALUE);
     ACCEL_CMD_LOAD(COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__qos_mapped_up_LEN3_TO_PKT_ERSPAN_type_II_header__COS_OFFSET, COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__qos_mapped_up_LEN3_TO_PKT_ERSPAN_type_II_header__COS_VALUE);
-    ACCEL_CMD_LOAD(COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x6_LEN3_TO_PKT_ERSPAN_type_II_header__En_OFFSET,              COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x6_LEN3_TO_PKT_ERSPAN_type_II_header__En_VALUE);
+    ACCEL_CMD_LOAD(COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x3_LEN2_TO_PKT_ERSPAN_type_II_header__En_OFFSET,              COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x3_LEN2_TO_PKT_ERSPAN_type_II_header__En_VALUE);
+    ACCEL_CMD_LOAD(COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__truncated_LEN1_TO_PKT_ERSPAN_type_II_header__T_OFFSET, COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__truncated_LEN1_TO_PKT_ERSPAN_type_II_header__T_VALUE);
     ACCEL_CMD_LOAD(COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__egress_byte_count_LEN14_TO_PKT_IPv4_Header__total_length_PLUS2_OFFSET, COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__egress_byte_count_LEN14_TO_PKT_IPv4_Header__total_length_PLUS2_VALUE);
     ACCEL_CMD_LOAD(ADD_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x24_LEN16_TO_PKT_IPv4_Header__total_length_OFFSET,             ADD_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x24_LEN16_TO_PKT_IPv4_Header__total_length_VALUE);
     ACCEL_CMD_LOAD(CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN8_FROM_PKT_IPv4_Header__version_OFFSET,                       CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN8_FROM_PKT_IPv4_Header__version_VALUE);
@@ -497,7 +502,8 @@ void PPA_FW(load_accelerator_commands)() {
     ACCEL_CMD_LOAD(COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_srcTrgPortEntry__srcPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4_OFFSET, COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_srcTrgPortEntry__srcPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4_VALUE);
     ACCEL_CMD_LOAD(COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x1_LEN4_TO_PKT_ERSPAN_type_II_header__Ver_OFFSET,             COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x1_LEN4_TO_PKT_ERSPAN_type_II_header__Ver_VALUE);
     ACCEL_CMD_LOAD(COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__qos_mapped_up_LEN3_TO_PKT_ERSPAN_type_II_header__COS_OFFSET, COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__qos_mapped_up_LEN3_TO_PKT_ERSPAN_type_II_header__COS_VALUE);
-    ACCEL_CMD_LOAD(COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x6_LEN3_TO_PKT_ERSPAN_type_II_header__En_OFFSET,              COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x6_LEN3_TO_PKT_ERSPAN_type_II_header__En_VALUE);
+    ACCEL_CMD_LOAD(COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x3_LEN2_TO_PKT_ERSPAN_type_II_header__En_OFFSET,              COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x3_LEN2_TO_PKT_ERSPAN_type_II_header__En_VALUE);
+    ACCEL_CMD_LOAD(COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__truncated_LEN1_TO_PKT_ERSPAN_type_II_header__T_OFFSET, COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__truncated_LEN1_TO_PKT_ERSPAN_type_II_header__T_VALUE);
     ACCEL_CMD_LOAD(COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__egress_byte_count_LEN14_TO_PKT_IPv6_Header__payload_length_PLUS2_OFFSET, COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__egress_byte_count_LEN14_TO_PKT_IPv6_Header__payload_length_PLUS2_VALUE);
     ACCEL_CMD_LOAD(ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x10_LEN16_TO_PKT_IPv6_Header__payload_length_OFFSET,           ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x10_LEN16_TO_PKT_IPv6_Header__payload_length_VALUE);
     ACCEL_CMD_LOAD(COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_erspan_template__mac_da_47_32_LEN12_TO_PKT_IPv6_Header__version_MINUS14_OFFSET, COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_erspan_template__mac_da_47_32_LEN12_TO_PKT_IPv6_Header__version_MINUS14_VALUE);
@@ -513,15 +519,14 @@ void PPA_FW(load_accelerator_commands)() {
     ACCEL_CMD_LOAD(COPY_BYTES_THR66_enhanced_sFlow_CFG_enhanced_sflow_template__reserved_0_LEN12_TO_PKT_enhanced_sflow_rx_ts_shim_header__checksum_OFFSET, COPY_BYTES_THR66_enhanced_sFlow_CFG_enhanced_sflow_template__reserved_0_LEN12_TO_PKT_enhanced_sflow_rx_ts_shim_header__checksum_VALUE);
     ACCEL_CMD_LOAD(COPY_BITS_THR66_enhanced_sFlow_DESC_phal2ppa__timestamp_PLUS2_LEN14_TO_PKT_enhanced_sflow_rx_ts_shim_header__rx_timestamp_31_16_PLUS2_OFFSET, COPY_BITS_THR66_enhanced_sFlow_DESC_phal2ppa__timestamp_PLUS2_LEN14_TO_PKT_enhanced_sflow_rx_ts_shim_header__rx_timestamp_31_16_PLUS2_VALUE);
     ACCEL_CMD_LOAD(COPY_BITS_THR66_enhanced_sFlow_DESC_phal2ppa__timestamp_PLUS16_LEN16_TO_PKT_enhanced_sflow_rx_ts_shim_header__rx_timestamp_15_0_OFFSET, COPY_BITS_THR66_enhanced_sFlow_DESC_phal2ppa__timestamp_PLUS16_LEN16_TO_PKT_enhanced_sflow_rx_ts_shim_header__rx_timestamp_15_0_VALUE);
-    ACCEL_CMD_LOAD(COPY_BITS_THR66_enhanced_sFlow_DESC_phal2ppa__orig_src_eport_PLUS6_LEN7_TO_PKT_enhanced_sflow_rx_ts_shim_header__port_number_OFFSET, COPY_BITS_THR66_enhanced_sFlow_DESC_phal2ppa__orig_src_eport_PLUS6_LEN7_TO_PKT_enhanced_sflow_rx_ts_shim_header__port_number_VALUE);
     ACCEL_CMD_LOAD(COPY_BYTES_THR66_enhanced_sFlow_CFG_enhanced_sflow_template__reserved_0_LEN12_TO_PKT_enhanced_sflow_tx_ts_shim_header__checksum_PLUS2_OFFSET, COPY_BYTES_THR66_enhanced_sFlow_CFG_enhanced_sflow_template__reserved_0_LEN12_TO_PKT_enhanced_sflow_tx_ts_shim_header__checksum_PLUS2_VALUE);
-    ACCEL_CMD_LOAD(COPY_BITS_THR66_enhanced_sFlow_DESC_phal2ppa__trg_phy_port_PLUS3_LEN7_TO_PKT_enhanced_sflow_tx_ts_shim_header__port_number_OFFSET, COPY_BITS_THR66_enhanced_sFlow_DESC_phal2ppa__trg_phy_port_PLUS3_LEN7_TO_PKT_enhanced_sflow_tx_ts_shim_header__port_number_VALUE);
     ACCEL_CMD_LOAD(COPY_BITS_THR66_enhanced_sFlow_CONST_0x1_LEN1_TO_PKT_enhanced_sflow_tx_ts_shim_header__port_direction_OFFSET,            COPY_BITS_THR66_enhanced_sFlow_CONST_0x1_LEN1_TO_PKT_enhanced_sflow_tx_ts_shim_header__port_direction_VALUE);
     ACCEL_CMD_LOAD(COPY_BITS_THR66_enhanced_sFlow_CONST_0x1_LEN1_TO_DESC_phal2ppa__mac_timestamping_en_OFFSET,                              COPY_BITS_THR66_enhanced_sFlow_CONST_0x1_LEN1_TO_DESC_phal2ppa__mac_timestamping_en_VALUE);
     ACCEL_CMD_LOAD(COPY_BITS_THR66_enhanced_sFlow_CONST_0x0_LEN3_TO_DESC_phal2ppa__ptp_packet_format_OFFSET,                                COPY_BITS_THR66_enhanced_sFlow_CONST_0x0_LEN3_TO_DESC_phal2ppa__ptp_packet_format_VALUE);
     ACCEL_CMD_LOAD(COPY_BITS_THR66_enhanced_sFlow_CONST_0x4_LEN4_TO_DESC_phal2ppa__ptp_action_OFFSET,                                       COPY_BITS_THR66_enhanced_sFlow_CONST_0x4_LEN4_TO_DESC_phal2ppa__ptp_action_VALUE);
     ACCEL_CMD_LOAD(COPY_BITS_THR66_enhanced_sFlow_CONST_0x2_LEN3_TO_DESC_phal2ppa__timestamp_mask_profile_OFFSET,                           COPY_BITS_THR66_enhanced_sFlow_CONST_0x2_LEN3_TO_DESC_phal2ppa__timestamp_mask_profile_VALUE);
     ACCEL_CMD_LOAD(COPY_BITS_THR66_enhanced_sFlow_CONST_0x22_LEN8_TO_DESC_phal2ppa__timestamp_offset_OFFSET,                                COPY_BITS_THR66_enhanced_sFlow_CONST_0x22_LEN8_TO_DESC_phal2ppa__timestamp_offset_VALUE);
+    ACCEL_CMD_LOAD(COPY_BITS_THR66_enhanced_sFlow_CONST_0x0_LEN1_TO_PKT_enhanced_sflow_rx_ts_shim_header__port_direction_OFFSET,            COPY_BITS_THR66_enhanced_sFlow_CONST_0x0_LEN1_TO_PKT_enhanced_sflow_rx_ts_shim_header__port_direction_VALUE);
 __PRAGMA_FLUSH_MEMORY
 
 }
@@ -986,6 +991,8 @@ ACCEL_INFO_STC accelInfoArrFalconImage01[] =
     ,{ FALCON_ENUM_NAME_AND_VALUE( CSUM_LOAD_NEW_THR62_enhanced_sFlow_fill_remain_IPv4_LEN2_FROM_PKT_IPv4_Header__total_length_OFFSET),                     62}
     ,{ FALCON_ENUM_NAME_AND_VALUE( CSUM_LOAD_OLD_THR62_enhanced_sFlow_fill_remain_IPv4_LEN2_FROM_PKT_IPv4_Header__header_checksum_OFFSET),                  62}
     ,{ FALCON_ENUM_NAME_AND_VALUE( CSUM_STORE_IP_THR62_enhanced_sFlow_fill_remain_IPv4_TO_PKT_IPv4_Header__header_checksum_OFFSET),                         62}
+    ,{ FALCON_ENUM_NAME_AND_VALUE( COPY_BITS_THR62_enhanced_sFlow_fill_remain_IPv4_DESC_phal2ppa__orig_src_eport_PLUS6_LEN7_TO_PKT_enhanced_sflow_rx_ts_shim_header__port_number_OFFSET), 62}
+    ,{ FALCON_ENUM_NAME_AND_VALUE( COPY_BITS_THR62_enhanced_sFlow_fill_remain_IPv4_DESC_phal2ppa__local_dev_trg_phy_port_PLUS3_LEN7_TO_PKT_enhanced_sflow_tx_ts_shim_header__port_number_OFFSET), 62}
 
 /*************** THR63_enhanced_sFlow_fill_remain_IPv6 *******************/
     ,{ FALCON_ENUM_NAME_AND_VALUE( COPY_BYTES_THR63_enhanced_sFlow_fill_remain_IPv6_DESC_phal2ppa__pha_metadata_LEN2_TO_PKT_enhanced_sflow_rx_ts_shim_header__ip_high_OFFSET), 63}
@@ -999,6 +1006,8 @@ ACCEL_INFO_STC accelInfoArrFalconImage01[] =
     ,{ FALCON_ENUM_NAME_AND_VALUE( COPY_BITS_THR63_enhanced_sFlow_fill_remain_IPv6_CONST_0x1_LEN1_TO_DESC_phal2ppa__egress_checksum_mode_OFFSET),           63}
     ,{ FALCON_ENUM_NAME_AND_VALUE( ADD_BITS_THR63_enhanced_sFlow_fill_remain_IPv6_CONST_0x2C_LEN16_TO_PKT_udp_header__Length_OFFSET),                       63}
     ,{ FALCON_ENUM_NAME_AND_VALUE( ADD_BITS_THR63_enhanced_sFlow_fill_remain_IPv6_CONST_0x2C_LEN16_TO_PKT_IPv6_Header__payload_length_OFFSET),              63}
+    ,{ FALCON_ENUM_NAME_AND_VALUE( COPY_BITS_THR63_enhanced_sFlow_fill_remain_IPv6_DESC_phal2ppa__orig_src_eport_PLUS6_LEN7_TO_PKT_enhanced_sflow_rx_ts_shim_header__port_number_OFFSET), 63}
+    ,{ FALCON_ENUM_NAME_AND_VALUE( COPY_BITS_THR63_enhanced_sFlow_fill_remain_IPv6_DESC_phal2ppa__local_dev_trg_phy_port_PLUS3_LEN7_TO_PKT_enhanced_sflow_tx_ts_shim_header__port_number_OFFSET), 63}
 
 /*************** THR64_Erspan_TypeII_SameDevMirroring_Ipv4 *******************/
     ,{ FALCON_ENUM_NAME_AND_VALUE( COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x08_LEN8_TO_PKT_ethertype_header__ethertype_OFFSET),          64}
@@ -1010,7 +1019,8 @@ ACCEL_INFO_STC accelInfoArrFalconImage01[] =
     ,{ FALCON_ENUM_NAME_AND_VALUE( COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_srcTrgPortEntry__srcPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4_OFFSET), 64}
     ,{ FALCON_ENUM_NAME_AND_VALUE( COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x1_LEN4_TO_PKT_ERSPAN_type_II_header__Ver_OFFSET),            64}
     ,{ FALCON_ENUM_NAME_AND_VALUE( COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__qos_mapped_up_LEN3_TO_PKT_ERSPAN_type_II_header__COS_OFFSET), 64}
-    ,{ FALCON_ENUM_NAME_AND_VALUE( COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x6_LEN3_TO_PKT_ERSPAN_type_II_header__En_OFFSET),             64}
+    ,{ FALCON_ENUM_NAME_AND_VALUE( COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x3_LEN2_TO_PKT_ERSPAN_type_II_header__En_OFFSET),             64}
+    ,{ FALCON_ENUM_NAME_AND_VALUE( COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__truncated_LEN1_TO_PKT_ERSPAN_type_II_header__T_OFFSET), 64}
     ,{ FALCON_ENUM_NAME_AND_VALUE( COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__egress_byte_count_LEN14_TO_PKT_IPv4_Header__total_length_PLUS2_OFFSET), 64}
     ,{ FALCON_ENUM_NAME_AND_VALUE( ADD_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x24_LEN16_TO_PKT_IPv4_Header__total_length_OFFSET),            64}
     ,{ FALCON_ENUM_NAME_AND_VALUE( CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN8_FROM_PKT_IPv4_Header__version_OFFSET),                      64}
@@ -1033,7 +1043,8 @@ ACCEL_INFO_STC accelInfoArrFalconImage01[] =
     ,{ FALCON_ENUM_NAME_AND_VALUE( COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_srcTrgPortEntry__srcPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4_OFFSET), 65}
     ,{ FALCON_ENUM_NAME_AND_VALUE( COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x1_LEN4_TO_PKT_ERSPAN_type_II_header__Ver_OFFSET),            65}
     ,{ FALCON_ENUM_NAME_AND_VALUE( COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__qos_mapped_up_LEN3_TO_PKT_ERSPAN_type_II_header__COS_OFFSET), 65}
-    ,{ FALCON_ENUM_NAME_AND_VALUE( COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x6_LEN3_TO_PKT_ERSPAN_type_II_header__En_OFFSET),             65}
+    ,{ FALCON_ENUM_NAME_AND_VALUE( COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x3_LEN2_TO_PKT_ERSPAN_type_II_header__En_OFFSET),             65}
+    ,{ FALCON_ENUM_NAME_AND_VALUE( COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__truncated_LEN1_TO_PKT_ERSPAN_type_II_header__T_OFFSET), 65}
     ,{ FALCON_ENUM_NAME_AND_VALUE( COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__egress_byte_count_LEN14_TO_PKT_IPv6_Header__payload_length_PLUS2_OFFSET), 65}
     ,{ FALCON_ENUM_NAME_AND_VALUE( ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x10_LEN16_TO_PKT_IPv6_Header__payload_length_OFFSET),          65}
     ,{ FALCON_ENUM_NAME_AND_VALUE( COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_erspan_template__mac_da_47_32_LEN12_TO_PKT_IPv6_Header__version_MINUS14_OFFSET), 65}
@@ -1051,15 +1062,14 @@ ACCEL_INFO_STC accelInfoArrFalconImage01[] =
     ,{ FALCON_ENUM_NAME_AND_VALUE( COPY_BYTES_THR66_enhanced_sFlow_CFG_enhanced_sflow_template__reserved_0_LEN12_TO_PKT_enhanced_sflow_rx_ts_shim_header__checksum_OFFSET), 66}
     ,{ FALCON_ENUM_NAME_AND_VALUE( COPY_BITS_THR66_enhanced_sFlow_DESC_phal2ppa__timestamp_PLUS2_LEN14_TO_PKT_enhanced_sflow_rx_ts_shim_header__rx_timestamp_31_16_PLUS2_OFFSET), 66}
     ,{ FALCON_ENUM_NAME_AND_VALUE( COPY_BITS_THR66_enhanced_sFlow_DESC_phal2ppa__timestamp_PLUS16_LEN16_TO_PKT_enhanced_sflow_rx_ts_shim_header__rx_timestamp_15_0_OFFSET), 66}
-    ,{ FALCON_ENUM_NAME_AND_VALUE( COPY_BITS_THR66_enhanced_sFlow_DESC_phal2ppa__orig_src_eport_PLUS6_LEN7_TO_PKT_enhanced_sflow_rx_ts_shim_header__port_number_OFFSET), 66}
     ,{ FALCON_ENUM_NAME_AND_VALUE( COPY_BYTES_THR66_enhanced_sFlow_CFG_enhanced_sflow_template__reserved_0_LEN12_TO_PKT_enhanced_sflow_tx_ts_shim_header__checksum_PLUS2_OFFSET), 66}
-    ,{ FALCON_ENUM_NAME_AND_VALUE( COPY_BITS_THR66_enhanced_sFlow_DESC_phal2ppa__trg_phy_port_PLUS3_LEN7_TO_PKT_enhanced_sflow_tx_ts_shim_header__port_number_OFFSET), 66}
     ,{ FALCON_ENUM_NAME_AND_VALUE( COPY_BITS_THR66_enhanced_sFlow_CONST_0x1_LEN1_TO_PKT_enhanced_sflow_tx_ts_shim_header__port_direction_OFFSET),           66}
     ,{ FALCON_ENUM_NAME_AND_VALUE( COPY_BITS_THR66_enhanced_sFlow_CONST_0x1_LEN1_TO_DESC_phal2ppa__mac_timestamping_en_OFFSET),                             66}
     ,{ FALCON_ENUM_NAME_AND_VALUE( COPY_BITS_THR66_enhanced_sFlow_CONST_0x0_LEN3_TO_DESC_phal2ppa__ptp_packet_format_OFFSET),                               66}
     ,{ FALCON_ENUM_NAME_AND_VALUE( COPY_BITS_THR66_enhanced_sFlow_CONST_0x4_LEN4_TO_DESC_phal2ppa__ptp_action_OFFSET),                                      66}
     ,{ FALCON_ENUM_NAME_AND_VALUE( COPY_BITS_THR66_enhanced_sFlow_CONST_0x2_LEN3_TO_DESC_phal2ppa__timestamp_mask_profile_OFFSET),                          66}
     ,{ FALCON_ENUM_NAME_AND_VALUE( COPY_BITS_THR66_enhanced_sFlow_CONST_0x22_LEN8_TO_DESC_phal2ppa__timestamp_offset_OFFSET),                               66}
+    ,{ FALCON_ENUM_NAME_AND_VALUE( COPY_BITS_THR66_enhanced_sFlow_CONST_0x0_LEN1_TO_PKT_enhanced_sflow_rx_ts_shim_header__port_direction_OFFSET),           66}
 /*************** Last Entry *******************/
     /*must be last*/
     ,{NULL , 0 , 0}
diff --git a/simulation/simDevices/src/asicSimulation/SKernel/sEmbeddedCpu/firmware/falcon_pha/Image01/ppa_fw_threads_FalconImage01.c b/simulation/simDevices/src/asicSimulation/SKernel/sEmbeddedCpu/firmware/falcon_pha/Image01/ppa_fw_threads_FalconImage01.c
index 8ee91348d9..3f6c8a887e 100644
--- a/simulation/simDevices/src/asicSimulation/SKernel/sEmbeddedCpu/firmware/falcon_pha/Image01/ppa_fw_threads_FalconImage01.c
+++ b/simulation/simDevices/src/asicSimulation/SKernel/sEmbeddedCpu/firmware/falcon_pha/Image01/ppa_fw_threads_FalconImage01.c
@@ -5170,15 +5170,17 @@ void PPA_FW(THR61_save_target_port_info)() {
  *              Header Window anchor= Outer Layer 3
  *              Header Window size= 128 bytes + 32 bytes Header increment space
  *
- *              Firmwares actions: no change in packet size. Sets specific fields in packet and descriptor. 
+ *              Firmwares actions: no change in packet size. Sets specific fields in packet and descriptor.
+ *              - Sets RX_TS_SHIM<port_number> 
  *              - Sets RX_TS_SHIM<IP_high>
- *              - Calculates RX_TS_SHIM<checksum> 
+ *              - Calculates RX_TS_SHIM<checksum>
+ *              - Sets TX_TS_SHIM<port_number> 
  *              - Sets TX_TS_SHIM<IP_low>
- *              - Calculates TX_TS_SHIM<checksum> 
+ *              - Calculates TX_TS_SHIM<checksum>
  *              - Sets Desc<Egress Checksum Mode>
  *              - Updates IPv4 length to +44 bytes
- *              - Updates UDP length to +44 bytes  
- *              - Calculates IPv4 CS  
+ *              - Updates UDP length to +44 bytes
+ *              - Calculates IPv4 CS
  *****************************************************************************************************************************************/
 __attribute__ ((aligned (16)))
 void PPA_FW(THR62_enhanced_sFlow_fill_remain_IPv4)() {
@@ -5186,11 +5188,41 @@ void PPA_FW(THR62_enhanced_sFlow_fill_remain_IPv4)() {
     /* xt_iss_client_command("profile","disable"); _exit(0);  */
 
 
+#ifdef ASIC_SIMULATION
+    /* Print out the input packet */
+    __LOG_FW(("Print out the input packet"));
+    __LOG_PARAM_FW( PPA_FW_SP_READ(FALCON_PKT_REGs_lo + 32) );
+    __LOG_PARAM_FW( PPA_FW_SP_READ(FALCON_PKT_REGs_lo + 32 + 4) );
+    __LOG_PARAM_FW( PPA_FW_SP_READ(FALCON_PKT_REGs_lo + 32 + 8) );
+    __LOG_PARAM_FW( PPA_FW_SP_READ(FALCON_PKT_REGs_lo + 32 + 12) );
+    __LOG_PARAM_FW( PPA_FW_SP_READ(FALCON_PKT_REGs_lo + 32 + 16) );
+    __LOG_PARAM_FW( PPA_FW_SP_READ(FALCON_PKT_REGs_lo + 32 + 20) );
+    __LOG_PARAM_FW( PPA_FW_SP_READ(FALCON_PKT_REGs_lo + 32 + 24) );
+    __LOG_PARAM_FW( PPA_FW_SP_READ(FALCON_PKT_REGs_lo + 32 + 28) );
+    __LOG_PARAM_FW( PPA_FW_SP_READ(FALCON_PKT_REGs_lo + 32 + 32) );
+    __LOG_PARAM_FW( PPA_FW_SP_READ(FALCON_PKT_REGs_lo + 32 + 36) );
+    __LOG_PARAM_FW( PPA_FW_SP_READ(FALCON_PKT_REGs_lo + 32 + 40) );
+    __LOG_PARAM_FW( PPA_FW_SP_READ(FALCON_PKT_REGs_lo + 32 + 44) );
+    __LOG_PARAM_FW( PPA_FW_SP_READ(FALCON_PKT_REGs_lo + 32 + 48) );
+    __LOG_PARAM_FW( PPA_FW_SP_READ(FALCON_PKT_REGs_lo + 32 + 52) );
+    __LOG_PARAM_FW( PPA_FW_SP_READ(FALCON_PKT_REGs_lo + 32 + 56) );
+    __LOG_PARAM_FW( PPA_FW_SP_READ(FALCON_PKT_REGs_lo + 32 + 60) );
+    __LOG_PARAM_FW( PPA_FW_SP_READ(FALCON_PKT_REGs_lo + 32 + 64) );
+    __LOG_PARAM_FW( PPA_FW_SP_READ(FALCON_PKT_REGs_lo + 32 + 68) );
+#endif /* ASIC_SIMULATION */
+
+
     /*------------------------------------------------------------------------------------------------------------------------------------------------
+      - Update RX_TS_SHIM<port_number> field
       - Update RX_TS_SHIM<IP_high> field
-      - Calculate checksum of RX_TS_SHIM          
+      - Calculate checksum of RX_TS_SHIM
       ------------------------------------------------------------------------------------------------------------------------------------------------*/
 
+    /* Set RX port number (7 bits): If Desc<Orig is Trunk> copy it from Desc<Orig Src Trunk ID> else copy it from Desc<orig_src_eport>
+       Since these 2 fields are muxed, start from same position and required only 7 LS bits, no need to check condition of Desc<Orig is Trunk> */
+    __LOG_FW(("Set RX port number (7 bits): If Desc<Orig is Trunk> copy it from Desc<Orig Src Trunk ID> else copy it from Desc<orig_src_eport>"));
+    ACCEL_CMD_TRIG(COPY_BITS_THR62_enhanced_sFlow_fill_remain_IPv4_DESC_phal2ppa__orig_src_eport_PLUS6_LEN7_TO_PKT_enhanced_sflow_rx_ts_shim_header__port_number_OFFSET, 0);
+
     /* Set IP_high(2B). Copy it from Desc<pha_metadata[31:16]> */
     __LOG_FW(("Set IP_high(2B). Copy it from Desc<pha_metadata[31:16]>"));
     ACCEL_CMD_TRIG(COPY_BYTES_THR62_enhanced_sFlow_fill_remain_IPv4_DESC_phal2ppa__pha_metadata_LEN2_TO_PKT_enhanced_sflow_rx_ts_shim_header__ip_high_OFFSET, 0);
@@ -5215,10 +5247,15 @@ void PPA_FW(THR62_enhanced_sFlow_fill_remain_IPv4)() {
 
 
     /*------------------------------------------------------------------------------------------------------------------------------------------------
+      - Update TX_TS_SHIM<port_number> field
       - Update TX_TS_SHIM<IP_low> field
-      - Calculate checksum of TX_TS_SHIM          
+      - Calculate checksum of TX_TS_SHIM
       ------------------------------------------------------------------------------------------------------------------------------------------------*/
 
+    /* Set TX port number (7 bits): copy from Desc<Local Dev target phy port [6:0]> */
+    __LOG_FW(("Set TX port number (7 bits): copy from Desc<Local Dev target phy port [6:0]>"));
+    ACCEL_CMD_TRIG(COPY_BITS_THR62_enhanced_sFlow_fill_remain_IPv4_DESC_phal2ppa__local_dev_trg_phy_port_PLUS3_LEN7_TO_PKT_enhanced_sflow_tx_ts_shim_header__port_number_OFFSET, 0);
+
     /* Set IP_low. Copy it from Desc<pha_metadata[15:0] */
     __LOG_FW(("Set IP_low. Copy it from Desc<pha_metadata[15:0]"));
     ACCEL_CMD_TRIG(COPY_BYTES_THR62_enhanced_sFlow_fill_remain_IPv4_DESC_phal2ppa__pha_metadata_PLUS2_LEN2_TO_PKT_enhanced_sflow_tx_ts_shim_header__ip_low_OFFSET, 0);
@@ -5315,14 +5352,16 @@ void PPA_FW(THR62_enhanced_sFlow_fill_remain_IPv4)() {
  *              Header Window anchor= Outer Layer 3
  *              Header Window size= 128 bytes + 32 bytes Header increment space
  *
- *              Firmwares actions: no change in packet size. Sets specific fields in packet and descriptor. 
+ *              Firmwares actions: no change in packet size. Sets specific fields in packet and descriptor.
+ *              - Sets RX_TS_SHIM<port_number> 
  *              - Sets RX_TS_SHIM<IP_high>
- *              - Calculates RX_TS_SHIM<checksum> 
+ *              - Calculates RX_TS_SHIM<checksum>
+ *              - Sets TX_TS_SHIM<port_number> 
  *              - Sets TX_TS_SHIM<IP_low>
- *              - Calculates TX_TS_SHIM<checksum> 
+ *              - Calculates TX_TS_SHIM<checksum>
  *              - Sets Desc<Egress Checksum Mode>
  *              - Updates IPv6 length to +44 bytes
- *              - Updates UDP length to +44 bytes  
+ *              - Updates UDP length to +44 bytes
  *****************************************************************************************************************************************/
 __attribute__ ((aligned (16)))
 void PPA_FW(THR63_enhanced_sFlow_fill_remain_IPv6)() {
@@ -5330,11 +5369,47 @@ void PPA_FW(THR63_enhanced_sFlow_fill_remain_IPv6)() {
     /* xt_iss_client_command("profile","disable"); _exit(0);  */
 
 
+#ifdef ASIC_SIMULATION
+    /* Print out the input packet */
+    __LOG_FW(("Print out the input packet"));
+    __LOG_PARAM_FW( PPA_FW_SP_READ(FALCON_PKT_REGs_lo + 32) );
+    __LOG_PARAM_FW( PPA_FW_SP_READ(FALCON_PKT_REGs_lo + 32 + 4) );
+    __LOG_PARAM_FW( PPA_FW_SP_READ(FALCON_PKT_REGs_lo + 32 + 8) );
+    __LOG_PARAM_FW( PPA_FW_SP_READ(FALCON_PKT_REGs_lo + 32 + 12) );
+    __LOG_PARAM_FW( PPA_FW_SP_READ(FALCON_PKT_REGs_lo + 32 + 16) );
+    __LOG_PARAM_FW( PPA_FW_SP_READ(FALCON_PKT_REGs_lo + 32 + 20) );
+    __LOG_PARAM_FW( PPA_FW_SP_READ(FALCON_PKT_REGs_lo + 32 + 24) );
+    __LOG_PARAM_FW( PPA_FW_SP_READ(FALCON_PKT_REGs_lo + 32 + 28) );
+    __LOG_PARAM_FW( PPA_FW_SP_READ(FALCON_PKT_REGs_lo + 32 + 32) );
+    __LOG_PARAM_FW( PPA_FW_SP_READ(FALCON_PKT_REGs_lo + 32 + 36) );
+    __LOG_PARAM_FW( PPA_FW_SP_READ(FALCON_PKT_REGs_lo + 32 + 40) );
+    __LOG_PARAM_FW( PPA_FW_SP_READ(FALCON_PKT_REGs_lo + 32 + 44) );
+    __LOG_PARAM_FW( PPA_FW_SP_READ(FALCON_PKT_REGs_lo + 32 + 48) );
+    __LOG_PARAM_FW( PPA_FW_SP_READ(FALCON_PKT_REGs_lo + 32 + 52) );
+    __LOG_PARAM_FW( PPA_FW_SP_READ(FALCON_PKT_REGs_lo + 32 + 56) );
+    __LOG_PARAM_FW( PPA_FW_SP_READ(FALCON_PKT_REGs_lo + 32 + 60) );
+    __LOG_PARAM_FW( PPA_FW_SP_READ(FALCON_PKT_REGs_lo + 32 + 64) );
+    __LOG_PARAM_FW( PPA_FW_SP_READ(FALCON_PKT_REGs_lo + 32 + 68) );
+    __LOG_PARAM_FW( PPA_FW_SP_READ(FALCON_PKT_REGs_lo + 32 + 72) );
+    __LOG_PARAM_FW( PPA_FW_SP_READ(FALCON_PKT_REGs_lo + 32 + 76) );
+    __LOG_PARAM_FW( PPA_FW_SP_READ(FALCON_PKT_REGs_lo + 32 + 80) );
+    __LOG_PARAM_FW( PPA_FW_SP_READ(FALCON_PKT_REGs_lo + 32 + 84) );
+    __LOG_PARAM_FW( PPA_FW_SP_READ(FALCON_PKT_REGs_lo + 32 + 88) );
+#endif /* ASIC_SIMULATION */
+
+
     /*------------------------------------------------------------------------------------------------------------------------------------------------
+      - Update RX_TS_SHIM<port_number> field
       - Update RX_TS_SHIM<IP_high> field
-      - Calculate checksum of RX_TS_SHIM          
+      - Calculate checksum of RX_TS_SHIM
       ------------------------------------------------------------------------------------------------------------------------------------------------*/
 
+    /* Set RX port number (7 bits): If Desc<Orig is Trunk> copy it from Desc<Orig Src Trunk ID> else copy it from Desc<orig_src_eport>
+       Since these 2 fields are muxed, start from same position and required only 7 LS bits, no need to check condition of Desc<Orig is Trunk> */
+    __LOG_FW(("Set RX port number (7 bits): If Desc<Orig is Trunk> copy it from Desc<Orig Src Trunk ID> else copy it from Desc<orig_src_eport>"));
+    ACCEL_CMD_TRIG(COPY_BITS_THR63_enhanced_sFlow_fill_remain_IPv6_DESC_phal2ppa__orig_src_eport_PLUS6_LEN7_TO_PKT_enhanced_sflow_rx_ts_shim_header__port_number_OFFSET, 0);
+
+
     /* Set IP_high(2B). Copy it from Desc<pha_metadata[31:16]> */
     __LOG_FW(("Set IP_high(2B). Copy it from Desc<pha_metadata[31:16]>"));
     ACCEL_CMD_TRIG(COPY_BYTES_THR63_enhanced_sFlow_fill_remain_IPv6_DESC_phal2ppa__pha_metadata_LEN2_TO_PKT_enhanced_sflow_rx_ts_shim_header__ip_high_OFFSET, 0);
@@ -5359,10 +5434,15 @@ void PPA_FW(THR63_enhanced_sFlow_fill_remain_IPv6)() {
 
 
     /*------------------------------------------------------------------------------------------------------------------------------------------------
+      - Update TX_TS_SHIM<port_number> field
       - Update TX_TS_SHIM<IP_low> field
-      - Calculate checksum of TX_TS_SHIM          
+      - Calculate checksum of TX_TS_SHIM
       ------------------------------------------------------------------------------------------------------------------------------------------------*/
 
+    /* Set TX port number (7 bits): copy from Desc<Local Dev target phy port [6:0]> */
+    __LOG_FW(("Set TX port number (7 bits): copy from Desc<Local Dev target phy port [6:0]>"));
+    ACCEL_CMD_TRIG(COPY_BITS_THR63_enhanced_sFlow_fill_remain_IPv6_DESC_phal2ppa__local_dev_trg_phy_port_PLUS3_LEN7_TO_PKT_enhanced_sflow_tx_ts_shim_header__port_number_OFFSET, 0);
+
     /* Set IP_low. Copy it from Desc<pha_metadata[15:0] */
     __LOG_FW(("Set IP_low. Copy it from Desc<pha_metadata[15:0]"));
     ACCEL_CMD_TRIG(COPY_BYTES_THR63_enhanced_sFlow_fill_remain_IPv6_DESC_phal2ppa__pha_metadata_PLUS2_LEN2_TO_PKT_enhanced_sflow_tx_ts_shim_header__ip_low_OFFSET, 0);
@@ -5595,9 +5675,13 @@ void PPA_FW(THR64_Erspan_TypeII_SameDevMirroring_Ipv4)() {
     __LOG_FW(("Set ERSPAN.COS to Desc<QoS Mapped UP>"));
     ACCEL_CMD_TRIG(COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__qos_mapped_up_LEN3_TO_PKT_ERSPAN_type_II_header__COS_OFFSET, 0);
 
-    /* Set ERSPAN.En to 3(2b) and ERSPAN.T(1b) to 0 */
-    __LOG_FW(("Assign ERSPAN.En to 3(2b) and ERSPAN.T(1b) to 0"));
-    ACCEL_CMD_TRIG(COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x6_LEN3_TO_PKT_ERSPAN_type_II_header__En_OFFSET, 0);
+    /* Set ERSPAN.En to 3(2b) */
+    __LOG_FW(("Assign ERSPAN.En to 3(2b)"));
+    ACCEL_CMD_TRIG(COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x3_LEN2_TO_PKT_ERSPAN_type_II_header__En_OFFSET, 0);
+    
+    /* Set ERSPAN.T(1b) to Desc<truncated> */
+    __LOG_FW(("Assign ERSPAN.T(1b) to Desc<truncated>"));
+    ACCEL_CMD_TRIG(COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__truncated_LEN1_TO_PKT_ERSPAN_type_II_header__T_OFFSET, 0);
 
 
     /*-----------------------------------------------------------------------------------------------------------------------------------------------
@@ -5911,9 +5995,13 @@ void PPA_FW(THR65_Erspan_TypeII_SameDevMirroring_Ipv6)() {
     __LOG_FW(("Set ERSPAN.COS to Desc<QoS Mapped UP>"));
     ACCEL_CMD_TRIG(COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__qos_mapped_up_LEN3_TO_PKT_ERSPAN_type_II_header__COS_OFFSET, 0);
 
-    /* Set ERSPAN.En to 3(2b) and ERSPAN.T(1b) to 0 */
-    __LOG_FW(("Assign ERSPAN.En to 3(2b) and ERSPAN.T(1b) to 0"));
-    ACCEL_CMD_TRIG(COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x6_LEN3_TO_PKT_ERSPAN_type_II_header__En_OFFSET, 0);
+    /* Set ERSPAN.En to 3(2b) */
+    __LOG_FW(("Assign ERSPAN.En to 3(2b)"));
+    ACCEL_CMD_TRIG(COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x3_LEN2_TO_PKT_ERSPAN_type_II_header__En_OFFSET, 0);
+    
+    /* Set ERSPAN.T(1b) to Desc<truncated> */
+    __LOG_FW(("Assign ERSPAN.T(1b) to Desc<truncated>"));
+    ACCEL_CMD_TRIG(COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__truncated_LEN1_TO_PKT_ERSPAN_type_II_header__T_OFFSET, 0);
 
 
     /*-----------------------------------------------------------------------------------------------------------------------------------------------
@@ -6176,16 +6264,11 @@ void PPA_FW(THR66_enhanced_sFlow)() {
     /* Word6 (bits[7:0]) & Clear MS byte of IP_high. Was already cleared */
     __LOG_FW(("Word6 (bits[7:0]) & Clear MS byte of IP_high. Was already cleared"));
 
-    /* Word7 (bits[31:24] & bits[23:17]): Clear LS byte of IP high plus Set port number (7 bits)
-       If Desc<Orig is Trunk> copy it from Desc<Orig Src Trunk ID> else copy it from Desc<orig_src_eport>
-       Since these 2 fields are muxed, start from same position and required only 7 LS bits, no need to check condition of Desc<Orig is Trunk> */
-     __LOG_FW(("Word7 (bits[31:24] & bits[23:17]): Clear LS byte of IP high plus Set port number (7 bits). If Desc<Orig is Trunk> copy it from Desc<Orig Src Trunk ID> else copy it from Desc<orig_src_eport>"));
-    ACCEL_CMD_TRIG(COPY_BITS_THR66_enhanced_sFlow_DESC_phal2ppa__orig_src_eport_PLUS6_LEN7_TO_PKT_enhanced_sflow_rx_ts_shim_header__port_number_OFFSET, SET_REMAIN_FIELDS_TO_ZERO);
+    /* Word7: Clear |ip_high | port(num,dir) | TX TS CS(2MSB) | and set port direction (1 bit) to '0' */
+    __LOG_FW(("Word7: Clear |ip_high | port(num,dir) | TX TS CS(2MSB) | and set port direction (1 bit) to '0'"));
+    ACCEL_CMD_TRIG(COPY_BITS_THR66_enhanced_sFlow_CONST_0x0_LEN1_TO_PKT_enhanced_sflow_rx_ts_shim_header__port_direction_OFFSET, SET_REMAIN_FIELDS_TO_ZERO);
     __PRAGMA_NO_REORDER
 
-    /* Word7 (bit[16]): Set port direction (1 bit) to '0' (already done) */
-     __LOG_FW(("Word7 (bit[16]): Set port direction (1 bit) to '0' (already done)"));
-
 
     /*------------------------------------------------------------------------------------------------------------------------------------------------
       - Set sFlow TX timestamp shim header (14B)
@@ -6201,10 +6284,6 @@ void PPA_FW(THR66_enhanced_sFlow)() {
     ACCEL_CMD_TRIG(COPY_BYTES_THR66_enhanced_sFlow_CFG_enhanced_sflow_template__reserved_0_LEN12_TO_PKT_enhanced_sflow_tx_ts_shim_header__checksum_PLUS2_OFFSET, 0);
     __PRAGMA_NO_REORDER
 
-    /* Word10 (bits[7:1]): Set target port number */
-    __LOG_FW(("Word10 (bits[7:1]): Set target port number"));
-    ACCEL_CMD_TRIG(COPY_BITS_THR66_enhanced_sFlow_DESC_phal2ppa__trg_phy_port_PLUS3_LEN7_TO_PKT_enhanced_sflow_tx_ts_shim_header__port_number_OFFSET, 0);
-
     /* Word10 (bit[0]): Set target port direction to '1' */
     __LOG_FW(("Word10 (bit[0]): Set target port direction to '1'"));
     ACCEL_CMD_TRIG(COPY_BITS_THR66_enhanced_sFlow_CONST_0x1_LEN1_TO_PKT_enhanced_sflow_tx_ts_shim_header__port_direction_OFFSET, 0);
diff --git a/simulation/simDevices/src/asicSimulation/SKernel/sEmbeddedCpu/firmware/falcon_pha/Image02/ppa_fw_accelerator_commands_FalconImage02.c b/simulation/simDevices/src/asicSimulation/SKernel/sEmbeddedCpu/firmware/falcon_pha/Image02/ppa_fw_accelerator_commands_FalconImage02.c
index 82cfc9f6e5..4033291e1d 100644
--- a/simulation/simDevices/src/asicSimulation/SKernel/sEmbeddedCpu/firmware/falcon_pha/Image02/ppa_fw_accelerator_commands_FalconImage02.c
+++ b/simulation/simDevices/src/asicSimulation/SKernel/sEmbeddedCpu/firmware/falcon_pha/Image02/ppa_fw_accelerator_commands_FalconImage02.c
@@ -416,7 +416,8 @@ void PPA_FW(load_accelerator_commands)() {
     ACCEL_CMD_LOAD(COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_srcTrgPortEntry__srcPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4_OFFSET, COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_srcTrgPortEntry__srcPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4_VALUE);
     ACCEL_CMD_LOAD(COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x1_LEN4_TO_PKT_ERSPAN_type_II_header__Ver_OFFSET,             COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x1_LEN4_TO_PKT_ERSPAN_type_II_header__Ver_VALUE);
     ACCEL_CMD_LOAD(COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__qos_mapped_up_LEN3_TO_PKT_ERSPAN_type_II_header__COS_OFFSET, COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__qos_mapped_up_LEN3_TO_PKT_ERSPAN_type_II_header__COS_VALUE);
-    ACCEL_CMD_LOAD(COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x6_LEN3_TO_PKT_ERSPAN_type_II_header__En_OFFSET,              COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x6_LEN3_TO_PKT_ERSPAN_type_II_header__En_VALUE);
+    ACCEL_CMD_LOAD(COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x3_LEN2_TO_PKT_ERSPAN_type_II_header__En_OFFSET,              COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x3_LEN2_TO_PKT_ERSPAN_type_II_header__En_VALUE);
+    ACCEL_CMD_LOAD(COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__truncated_LEN1_TO_PKT_ERSPAN_type_II_header__T_OFFSET, COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__truncated_LEN1_TO_PKT_ERSPAN_type_II_header__T_VALUE);
     ACCEL_CMD_LOAD(COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__egress_byte_count_LEN14_TO_PKT_IPv4_Header__total_length_PLUS2_OFFSET, COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__egress_byte_count_LEN14_TO_PKT_IPv4_Header__total_length_PLUS2_VALUE);
     ACCEL_CMD_LOAD(ADD_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x24_LEN16_TO_PKT_IPv4_Header__total_length_OFFSET,             ADD_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x24_LEN16_TO_PKT_IPv4_Header__total_length_VALUE);
     ACCEL_CMD_LOAD(CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN8_FROM_PKT_IPv4_Header__version_OFFSET,                       CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN8_FROM_PKT_IPv4_Header__version_VALUE);
@@ -437,7 +438,8 @@ void PPA_FW(load_accelerator_commands)() {
     ACCEL_CMD_LOAD(COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_srcTrgPortEntry__srcPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4_OFFSET, COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_srcTrgPortEntry__srcPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4_VALUE);
     ACCEL_CMD_LOAD(COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x1_LEN4_TO_PKT_ERSPAN_type_II_header__Ver_OFFSET,             COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x1_LEN4_TO_PKT_ERSPAN_type_II_header__Ver_VALUE);
     ACCEL_CMD_LOAD(COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__qos_mapped_up_LEN3_TO_PKT_ERSPAN_type_II_header__COS_OFFSET, COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__qos_mapped_up_LEN3_TO_PKT_ERSPAN_type_II_header__COS_VALUE);
-    ACCEL_CMD_LOAD(COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x6_LEN3_TO_PKT_ERSPAN_type_II_header__En_OFFSET,              COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x6_LEN3_TO_PKT_ERSPAN_type_II_header__En_VALUE);
+    ACCEL_CMD_LOAD(COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x3_LEN2_TO_PKT_ERSPAN_type_II_header__En_OFFSET,              COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x3_LEN2_TO_PKT_ERSPAN_type_II_header__En_VALUE);
+    ACCEL_CMD_LOAD(COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__truncated_LEN1_TO_PKT_ERSPAN_type_II_header__T_OFFSET, COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__truncated_LEN1_TO_PKT_ERSPAN_type_II_header__T_VALUE);
     ACCEL_CMD_LOAD(COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__egress_byte_count_LEN14_TO_PKT_IPv6_Header__payload_length_PLUS2_OFFSET, COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__egress_byte_count_LEN14_TO_PKT_IPv6_Header__payload_length_PLUS2_VALUE);
     ACCEL_CMD_LOAD(ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x10_LEN16_TO_PKT_IPv6_Header__payload_length_OFFSET,           ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x10_LEN16_TO_PKT_IPv6_Header__payload_length_VALUE);
     ACCEL_CMD_LOAD(COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_erspan_template__mac_da_47_32_LEN12_TO_PKT_IPv6_Header__version_MINUS14_OFFSET, COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_erspan_template__mac_da_47_32_LEN12_TO_PKT_IPv6_Header__version_MINUS14_VALUE);
@@ -863,7 +865,8 @@ ACCEL_INFO_STC accelInfoArrFalconImage02[] =
     ,{ FALCON_ENUM_NAME_AND_VALUE( COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_srcTrgPortEntry__srcPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4_OFFSET), 64}
     ,{ FALCON_ENUM_NAME_AND_VALUE( COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x1_LEN4_TO_PKT_ERSPAN_type_II_header__Ver_OFFSET),            64}
     ,{ FALCON_ENUM_NAME_AND_VALUE( COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__qos_mapped_up_LEN3_TO_PKT_ERSPAN_type_II_header__COS_OFFSET), 64}
-    ,{ FALCON_ENUM_NAME_AND_VALUE( COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x6_LEN3_TO_PKT_ERSPAN_type_II_header__En_OFFSET),             64}
+    ,{ FALCON_ENUM_NAME_AND_VALUE( COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x3_LEN2_TO_PKT_ERSPAN_type_II_header__En_OFFSET),             64}
+    ,{ FALCON_ENUM_NAME_AND_VALUE( COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__truncated_LEN1_TO_PKT_ERSPAN_type_II_header__T_OFFSET), 64}
     ,{ FALCON_ENUM_NAME_AND_VALUE( COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__egress_byte_count_LEN14_TO_PKT_IPv4_Header__total_length_PLUS2_OFFSET), 64}
     ,{ FALCON_ENUM_NAME_AND_VALUE( ADD_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x24_LEN16_TO_PKT_IPv4_Header__total_length_OFFSET),            64}
     ,{ FALCON_ENUM_NAME_AND_VALUE( CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN8_FROM_PKT_IPv4_Header__version_OFFSET),                      64}
@@ -886,7 +889,8 @@ ACCEL_INFO_STC accelInfoArrFalconImage02[] =
     ,{ FALCON_ENUM_NAME_AND_VALUE( COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_srcTrgPortEntry__srcPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4_OFFSET), 65}
     ,{ FALCON_ENUM_NAME_AND_VALUE( COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x1_LEN4_TO_PKT_ERSPAN_type_II_header__Ver_OFFSET),            65}
     ,{ FALCON_ENUM_NAME_AND_VALUE( COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__qos_mapped_up_LEN3_TO_PKT_ERSPAN_type_II_header__COS_OFFSET), 65}
-    ,{ FALCON_ENUM_NAME_AND_VALUE( COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x6_LEN3_TO_PKT_ERSPAN_type_II_header__En_OFFSET),             65}
+    ,{ FALCON_ENUM_NAME_AND_VALUE( COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x3_LEN2_TO_PKT_ERSPAN_type_II_header__En_OFFSET),             65}
+    ,{ FALCON_ENUM_NAME_AND_VALUE( COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__truncated_LEN1_TO_PKT_ERSPAN_type_II_header__T_OFFSET), 65}
     ,{ FALCON_ENUM_NAME_AND_VALUE( COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__egress_byte_count_LEN14_TO_PKT_IPv6_Header__payload_length_PLUS2_OFFSET), 65}
     ,{ FALCON_ENUM_NAME_AND_VALUE( ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x10_LEN16_TO_PKT_IPv6_Header__payload_length_OFFSET),          65}
     ,{ FALCON_ENUM_NAME_AND_VALUE( COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_erspan_template__mac_da_47_32_LEN12_TO_PKT_IPv6_Header__version_MINUS14_OFFSET), 65}
diff --git a/simulation/simDevices/src/asicSimulation/SKernel/sEmbeddedCpu/firmware/falcon_pha/Image02/ppa_fw_threads_FalconImage02.c b/simulation/simDevices/src/asicSimulation/SKernel/sEmbeddedCpu/firmware/falcon_pha/Image02/ppa_fw_threads_FalconImage02.c
index d1cd3eb43a..b87c1d42e9 100644
--- a/simulation/simDevices/src/asicSimulation/SKernel/sEmbeddedCpu/firmware/falcon_pha/Image02/ppa_fw_threads_FalconImage02.c
+++ b/simulation/simDevices/src/asicSimulation/SKernel/sEmbeddedCpu/firmware/falcon_pha/Image02/ppa_fw_threads_FalconImage02.c
@@ -4668,9 +4668,13 @@ void PPA_FW(THR64_Erspan_TypeII_SameDevMirroring_Ipv4)() {
     __LOG_FW(("Set ERSPAN.COS to Desc<QoS Mapped UP>"));
     ACCEL_CMD_TRIG(COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__qos_mapped_up_LEN3_TO_PKT_ERSPAN_type_II_header__COS_OFFSET, 0);
 
-    /* Set ERSPAN.En to 3(2b) and ERSPAN.T(1b) to 0 */
-    __LOG_FW(("Assign ERSPAN.En to 3(2b) and ERSPAN.T(1b) to 0"));
-    ACCEL_CMD_TRIG(COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x6_LEN3_TO_PKT_ERSPAN_type_II_header__En_OFFSET, 0);
+    /* Set ERSPAN.En to 3(2b) */
+    __LOG_FW(("Assign ERSPAN.En to 3(2b)"));
+    ACCEL_CMD_TRIG(COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x3_LEN2_TO_PKT_ERSPAN_type_II_header__En_OFFSET, 0);
+    
+    /* Set ERSPAN.T(1b) to Desc<truncated> */
+    __LOG_FW(("Assign ERSPAN.T(1b) to Desc<truncated>"));
+    ACCEL_CMD_TRIG(COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__truncated_LEN1_TO_PKT_ERSPAN_type_II_header__T_OFFSET, 0);
 
 
     /*-----------------------------------------------------------------------------------------------------------------------------------------------
@@ -4984,9 +4988,13 @@ void PPA_FW(THR65_Erspan_TypeII_SameDevMirroring_Ipv6)() {
     __LOG_FW(("Set ERSPAN.COS to Desc<QoS Mapped UP>"));
     ACCEL_CMD_TRIG(COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__qos_mapped_up_LEN3_TO_PKT_ERSPAN_type_II_header__COS_OFFSET, 0);
 
-    /* Set ERSPAN.En to 3(2b) and ERSPAN.T(1b) to 0 */
-    __LOG_FW(("Assign ERSPAN.En to 3(2b) and ERSPAN.T(1b) to 0"));
-    ACCEL_CMD_TRIG(COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x6_LEN3_TO_PKT_ERSPAN_type_II_header__En_OFFSET, 0);
+    /* Set ERSPAN.En to 3(2b) */
+    __LOG_FW(("Assign ERSPAN.En to 3(2b)"));
+    ACCEL_CMD_TRIG(COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x3_LEN2_TO_PKT_ERSPAN_type_II_header__En_OFFSET, 0);
+    
+    /* Set ERSPAN.T(1b) to Desc<truncated> */
+    __LOG_FW(("Assign ERSPAN.T(1b) to Desc<truncated>"));
+    ACCEL_CMD_TRIG(COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__truncated_LEN1_TO_PKT_ERSPAN_type_II_header__T_OFFSET, 0);
 
 
     /*-----------------------------------------------------------------------------------------------------------------------------------------------
diff --git a/simulation/simDevices/src/asicSimulation/SKernel/sEmbeddedCpu/firmware/falcon_pha/Image02Oldest/ppa_fw_accelerator_commands_FalconImage02Oldest.c b/simulation/simDevices/src/asicSimulation/SKernel/sEmbeddedCpu/firmware/falcon_pha/Image02Oldest/ppa_fw_accelerator_commands_FalconImage02Oldest.c
index b30cd03068..5a28a234d5 100644
--- a/simulation/simDevices/src/asicSimulation/SKernel/sEmbeddedCpu/firmware/falcon_pha/Image02Oldest/ppa_fw_accelerator_commands_FalconImage02Oldest.c
+++ b/simulation/simDevices/src/asicSimulation/SKernel/sEmbeddedCpu/firmware/falcon_pha/Image02Oldest/ppa_fw_accelerator_commands_FalconImage02Oldest.c
@@ -407,6 +407,43 @@ void PPA_FW(load_accelerator_commands)() {
     ACCEL_CMD_LOAD(ADD_BITS_THR58_SFLOW_V5_IPv6_CONST_0x34_LEN16_TO_PKT_udp_header__Length_OFFSET,                                          ADD_BITS_THR58_SFLOW_V5_IPv6_CONST_0x34_LEN16_TO_PKT_udp_header__Length_VALUE);
     ACCEL_CMD_LOAD(COPY_BITS_THR58_SFLOW_V5_IPv6_CONST_0x20_LEN8_TO_PKT_sflow_data_format_header__sample_length_PLUS24_OFFSET,              COPY_BITS_THR58_SFLOW_V5_IPv6_CONST_0x20_LEN8_TO_PKT_sflow_data_format_header__sample_length_PLUS24_VALUE);
     ACCEL_CMD_LOAD(COPY_BITS_THR58_SFLOW_V5_IPv6_CONST_0x0_LEN1_TO_PKT_sflow_flow_sample_header__number_of_records_PLUS31_OFFSET,           COPY_BITS_THR58_SFLOW_V5_IPv6_CONST_0x0_LEN1_TO_PKT_sflow_flow_sample_header__number_of_records_PLUS31_VALUE);
+    ACCEL_CMD_LOAD(COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x08_LEN8_TO_PKT_ethertype_header__ethertype_OFFSET,           COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x08_LEN8_TO_PKT_ethertype_header__ethertype_VALUE);
+    ACCEL_CMD_LOAD(COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x10_LEN8_TO_PKT_GRE_header__C_OFFSET,                         COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x10_LEN8_TO_PKT_GRE_header__C_VALUE);
+    ACCEL_CMD_LOAD(COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x88_LEN8_TO_PKT_GRE_header__NP_OFFSET,                        COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x88_LEN8_TO_PKT_GRE_header__NP_VALUE);
+    ACCEL_CMD_LOAD(COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0xBE_LEN8_TO_PKT_GRE_header__NP_PLUS8_OFFSET,                  COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0xBE_LEN8_TO_PKT_GRE_header__NP_PLUS8_VALUE);
+    ACCEL_CMD_LOAD(COPY_BYTES_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__lm_counter_LEN4_TO_PKT_GRE_header__Seq_num_OFFSET,   COPY_BYTES_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__lm_counter_LEN4_TO_PKT_GRE_header__Seq_num_VALUE);
+    ACCEL_CMD_LOAD(COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_srcTrgPortEntry__targetPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4_OFFSET, COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_srcTrgPortEntry__targetPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4_VALUE);
+    ACCEL_CMD_LOAD(COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_srcTrgPortEntry__srcPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4_OFFSET, COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_srcTrgPortEntry__srcPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4_VALUE);
+    ACCEL_CMD_LOAD(COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x1_LEN4_TO_PKT_ERSPAN_type_II_header__Ver_OFFSET,             COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x1_LEN4_TO_PKT_ERSPAN_type_II_header__Ver_VALUE);
+    ACCEL_CMD_LOAD(COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__qos_mapped_up_LEN3_TO_PKT_ERSPAN_type_II_header__COS_OFFSET, COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__qos_mapped_up_LEN3_TO_PKT_ERSPAN_type_II_header__COS_VALUE);
+    ACCEL_CMD_LOAD(COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x6_LEN3_TO_PKT_ERSPAN_type_II_header__En_OFFSET,              COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x6_LEN3_TO_PKT_ERSPAN_type_II_header__En_VALUE);
+    ACCEL_CMD_LOAD(COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__egress_byte_count_LEN14_TO_PKT_IPv4_Header__total_length_PLUS2_OFFSET, COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__egress_byte_count_LEN14_TO_PKT_IPv4_Header__total_length_PLUS2_VALUE);
+    ACCEL_CMD_LOAD(ADD_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x24_LEN16_TO_PKT_IPv4_Header__total_length_OFFSET,             ADD_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x24_LEN16_TO_PKT_IPv4_Header__total_length_VALUE);
+    ACCEL_CMD_LOAD(CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN8_FROM_PKT_IPv4_Header__version_OFFSET,                       CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN8_FROM_PKT_IPv4_Header__version_VALUE);
+    ACCEL_CMD_LOAD(CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN2_FROM_PKT_IPv4_Header__ttl_OFFSET,                           CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN2_FROM_PKT_IPv4_Header__ttl_VALUE);
+    ACCEL_CMD_LOAD(CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN8_FROM_PKT_IPv4_Header__sip_high_OFFSET,                      CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN8_FROM_PKT_IPv4_Header__sip_high_VALUE);
+    ACCEL_CMD_LOAD(CSUM_STORE_IP_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_TO_PKT_IPv4_Header__header_checksum_OFFSET,                      CSUM_STORE_IP_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_TO_PKT_IPv4_Header__header_checksum_VALUE);
+    ACCEL_CMD_LOAD(COPY_BYTES_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_erspan_template__mac_da_47_32_LEN12_TO_PKT_IPv4_Header__version_MINUS14_OFFSET, COPY_BYTES_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_erspan_template__mac_da_47_32_LEN12_TO_PKT_IPv4_Header__version_MINUS14_VALUE);
+    ACCEL_CMD_LOAD(ADD_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x32_LEN14_TO_DESC_phal2ppa__egress_byte_count_OFFSET,          ADD_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x32_LEN14_TO_DESC_phal2ppa__egress_byte_count_VALUE);
+    ACCEL_CMD_LOAD(COPY_BYTES_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_erspan_template__mac_da_47_32_LEN16_TO_PKT_IPv4_Header__version_MINUS18_OFFSET, COPY_BYTES_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_erspan_template__mac_da_47_32_LEN16_TO_PKT_IPv4_Header__version_MINUS18_VALUE);
+    ACCEL_CMD_LOAD(ADD_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x36_LEN14_TO_DESC_phal2ppa__egress_byte_count_OFFSET,          ADD_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x36_LEN14_TO_DESC_phal2ppa__egress_byte_count_VALUE);
+    ACCEL_CMD_LOAD(COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x86_LEN8_TO_PKT_ethertype_header__ethertype_OFFSET,           COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x86_LEN8_TO_PKT_ethertype_header__ethertype_VALUE);
+    ACCEL_CMD_LOAD(COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0xDD_LEN8_TO_PKT_ethertype_header__ethertype_PLUS8_OFFSET,     COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0xDD_LEN8_TO_PKT_ethertype_header__ethertype_PLUS8_VALUE);
+    ACCEL_CMD_LOAD(COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x10_LEN8_TO_PKT_GRE_header__C_OFFSET,                         COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x10_LEN8_TO_PKT_GRE_header__C_VALUE);
+    ACCEL_CMD_LOAD(COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x88_LEN8_TO_PKT_GRE_header__NP_OFFSET,                        COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x88_LEN8_TO_PKT_GRE_header__NP_VALUE);
+    ACCEL_CMD_LOAD(COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0xBE_LEN8_TO_PKT_GRE_header__NP_PLUS8_OFFSET,                  COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0xBE_LEN8_TO_PKT_GRE_header__NP_PLUS8_VALUE);
+    ACCEL_CMD_LOAD(COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__lm_counter_LEN4_TO_PKT_GRE_header__Seq_num_OFFSET,   COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__lm_counter_LEN4_TO_PKT_GRE_header__Seq_num_VALUE);
+    ACCEL_CMD_LOAD(COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_srcTrgPortEntry__targetPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4_OFFSET, COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_srcTrgPortEntry__targetPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4_VALUE);
+    ACCEL_CMD_LOAD(COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_srcTrgPortEntry__srcPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4_OFFSET, COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_srcTrgPortEntry__srcPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4_VALUE);
+    ACCEL_CMD_LOAD(COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x1_LEN4_TO_PKT_ERSPAN_type_II_header__Ver_OFFSET,             COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x1_LEN4_TO_PKT_ERSPAN_type_II_header__Ver_VALUE);
+    ACCEL_CMD_LOAD(COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__qos_mapped_up_LEN3_TO_PKT_ERSPAN_type_II_header__COS_OFFSET, COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__qos_mapped_up_LEN3_TO_PKT_ERSPAN_type_II_header__COS_VALUE);
+    ACCEL_CMD_LOAD(COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x6_LEN3_TO_PKT_ERSPAN_type_II_header__En_OFFSET,              COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x6_LEN3_TO_PKT_ERSPAN_type_II_header__En_VALUE);
+    ACCEL_CMD_LOAD(COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__egress_byte_count_LEN14_TO_PKT_IPv6_Header__payload_length_PLUS2_OFFSET, COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__egress_byte_count_LEN14_TO_PKT_IPv6_Header__payload_length_PLUS2_VALUE);
+    ACCEL_CMD_LOAD(ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x10_LEN16_TO_PKT_IPv6_Header__payload_length_OFFSET,           ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x10_LEN16_TO_PKT_IPv6_Header__payload_length_VALUE);
+    ACCEL_CMD_LOAD(COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_erspan_template__mac_da_47_32_LEN12_TO_PKT_IPv6_Header__version_MINUS14_OFFSET, COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_erspan_template__mac_da_47_32_LEN12_TO_PKT_IPv6_Header__version_MINUS14_VALUE);
+    ACCEL_CMD_LOAD(ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x3A_LEN14_TO_DESC_phal2ppa__egress_byte_count_OFFSET,          ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x3A_LEN14_TO_DESC_phal2ppa__egress_byte_count_VALUE);
+    ACCEL_CMD_LOAD(COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_erspan_template__mac_da_47_32_LEN16_TO_PKT_IPv6_Header__version_MINUS18_OFFSET, COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_erspan_template__mac_da_47_32_LEN16_TO_PKT_IPv6_Header__version_MINUS18_VALUE);
+    ACCEL_CMD_LOAD(ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x3E_LEN14_TO_DESC_phal2ppa__egress_byte_count_OFFSET,          ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x3E_LEN14_TO_DESC_phal2ppa__egress_byte_count_VALUE);
 __PRAGMA_FLUSH_MEMORY
 
 }
@@ -814,6 +851,47 @@ ACCEL_INFO_STC accelInfoArrFalconImage02Oldest[] =
     ,{ FALCON_ENUM_NAME_AND_VALUE( ADD_BITS_THR58_SFLOW_V5_IPv6_CONST_0x34_LEN16_TO_PKT_udp_header__Length_OFFSET),                                         58}
     ,{ FALCON_ENUM_NAME_AND_VALUE( COPY_BITS_THR58_SFLOW_V5_IPv6_CONST_0x20_LEN8_TO_PKT_sflow_data_format_header__sample_length_PLUS24_OFFSET),             58}
     ,{ FALCON_ENUM_NAME_AND_VALUE( COPY_BITS_THR58_SFLOW_V5_IPv6_CONST_0x0_LEN1_TO_PKT_sflow_flow_sample_header__number_of_records_PLUS31_OFFSET),          58}
+
+/*************** THR64_Erspan_TypeII_SameDevMirroring_Ipv4 *******************/
+    ,{ FALCON_ENUM_NAME_AND_VALUE( COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x08_LEN8_TO_PKT_ethertype_header__ethertype_OFFSET),          64}
+    ,{ FALCON_ENUM_NAME_AND_VALUE( COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x10_LEN8_TO_PKT_GRE_header__C_OFFSET),                        64}
+    ,{ FALCON_ENUM_NAME_AND_VALUE( COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x88_LEN8_TO_PKT_GRE_header__NP_OFFSET),                       64}
+    ,{ FALCON_ENUM_NAME_AND_VALUE( COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0xBE_LEN8_TO_PKT_GRE_header__NP_PLUS8_OFFSET),                 64}
+    ,{ FALCON_ENUM_NAME_AND_VALUE( COPY_BYTES_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__lm_counter_LEN4_TO_PKT_GRE_header__Seq_num_OFFSET),  64}
+    ,{ FALCON_ENUM_NAME_AND_VALUE( COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_srcTrgPortEntry__targetPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4_OFFSET), 64}
+    ,{ FALCON_ENUM_NAME_AND_VALUE( COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_srcTrgPortEntry__srcPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4_OFFSET), 64}
+    ,{ FALCON_ENUM_NAME_AND_VALUE( COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x1_LEN4_TO_PKT_ERSPAN_type_II_header__Ver_OFFSET),            64}
+    ,{ FALCON_ENUM_NAME_AND_VALUE( COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__qos_mapped_up_LEN3_TO_PKT_ERSPAN_type_II_header__COS_OFFSET), 64}
+    ,{ FALCON_ENUM_NAME_AND_VALUE( COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x6_LEN3_TO_PKT_ERSPAN_type_II_header__En_OFFSET),             64}
+    ,{ FALCON_ENUM_NAME_AND_VALUE( COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__egress_byte_count_LEN14_TO_PKT_IPv4_Header__total_length_PLUS2_OFFSET), 64}
+    ,{ FALCON_ENUM_NAME_AND_VALUE( ADD_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x24_LEN16_TO_PKT_IPv4_Header__total_length_OFFSET),            64}
+    ,{ FALCON_ENUM_NAME_AND_VALUE( CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN8_FROM_PKT_IPv4_Header__version_OFFSET),                      64}
+    ,{ FALCON_ENUM_NAME_AND_VALUE( CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN2_FROM_PKT_IPv4_Header__ttl_OFFSET),                          64}
+    ,{ FALCON_ENUM_NAME_AND_VALUE( CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN8_FROM_PKT_IPv4_Header__sip_high_OFFSET),                     64}
+    ,{ FALCON_ENUM_NAME_AND_VALUE( CSUM_STORE_IP_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_TO_PKT_IPv4_Header__header_checksum_OFFSET),                     64}
+    ,{ FALCON_ENUM_NAME_AND_VALUE( COPY_BYTES_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_erspan_template__mac_da_47_32_LEN12_TO_PKT_IPv4_Header__version_MINUS14_OFFSET), 64}
+    ,{ FALCON_ENUM_NAME_AND_VALUE( ADD_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x32_LEN14_TO_DESC_phal2ppa__egress_byte_count_OFFSET),         64}
+    ,{ FALCON_ENUM_NAME_AND_VALUE( COPY_BYTES_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_erspan_template__mac_da_47_32_LEN16_TO_PKT_IPv4_Header__version_MINUS18_OFFSET), 64}
+    ,{ FALCON_ENUM_NAME_AND_VALUE( ADD_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x36_LEN14_TO_DESC_phal2ppa__egress_byte_count_OFFSET),         64}
+
+/*************** THR65_Erspan_TypeII_SameDevMirroring_Ipv6 *******************/
+    ,{ FALCON_ENUM_NAME_AND_VALUE( COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x86_LEN8_TO_PKT_ethertype_header__ethertype_OFFSET),          65}
+    ,{ FALCON_ENUM_NAME_AND_VALUE( COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0xDD_LEN8_TO_PKT_ethertype_header__ethertype_PLUS8_OFFSET),    65}
+    ,{ FALCON_ENUM_NAME_AND_VALUE( COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x10_LEN8_TO_PKT_GRE_header__C_OFFSET),                        65}
+    ,{ FALCON_ENUM_NAME_AND_VALUE( COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x88_LEN8_TO_PKT_GRE_header__NP_OFFSET),                       65}
+    ,{ FALCON_ENUM_NAME_AND_VALUE( COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0xBE_LEN8_TO_PKT_GRE_header__NP_PLUS8_OFFSET),                 65}
+    ,{ FALCON_ENUM_NAME_AND_VALUE( COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__lm_counter_LEN4_TO_PKT_GRE_header__Seq_num_OFFSET),  65}
+    ,{ FALCON_ENUM_NAME_AND_VALUE( COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_srcTrgPortEntry__targetPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4_OFFSET), 65}
+    ,{ FALCON_ENUM_NAME_AND_VALUE( COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_srcTrgPortEntry__srcPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4_OFFSET), 65}
+    ,{ FALCON_ENUM_NAME_AND_VALUE( COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x1_LEN4_TO_PKT_ERSPAN_type_II_header__Ver_OFFSET),            65}
+    ,{ FALCON_ENUM_NAME_AND_VALUE( COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__qos_mapped_up_LEN3_TO_PKT_ERSPAN_type_II_header__COS_OFFSET), 65}
+    ,{ FALCON_ENUM_NAME_AND_VALUE( COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x6_LEN3_TO_PKT_ERSPAN_type_II_header__En_OFFSET),             65}
+    ,{ FALCON_ENUM_NAME_AND_VALUE( COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__egress_byte_count_LEN14_TO_PKT_IPv6_Header__payload_length_PLUS2_OFFSET), 65}
+    ,{ FALCON_ENUM_NAME_AND_VALUE( ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x10_LEN16_TO_PKT_IPv6_Header__payload_length_OFFSET),          65}
+    ,{ FALCON_ENUM_NAME_AND_VALUE( COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_erspan_template__mac_da_47_32_LEN12_TO_PKT_IPv6_Header__version_MINUS14_OFFSET), 65}
+    ,{ FALCON_ENUM_NAME_AND_VALUE( ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x3A_LEN14_TO_DESC_phal2ppa__egress_byte_count_OFFSET),         65}
+    ,{ FALCON_ENUM_NAME_AND_VALUE( COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_erspan_template__mac_da_47_32_LEN16_TO_PKT_IPv6_Header__version_MINUS18_OFFSET), 65}
+    ,{ FALCON_ENUM_NAME_AND_VALUE( ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x3E_LEN14_TO_DESC_phal2ppa__egress_byte_count_OFFSET),         65}
 /*************** Last Entry *******************/
     /*must be last*/
     ,{NULL , 0 , 0}
diff --git a/simulation/simDevices/src/asicSimulation/SKernel/sEmbeddedCpu/firmware/falcon_pha/Image02Oldest/ppa_fw_threads_FalconImage02Oldest.c b/simulation/simDevices/src/asicSimulation/SKernel/sEmbeddedCpu/firmware/falcon_pha/Image02Oldest/ppa_fw_threads_FalconImage02Oldest.c
index d2f74c8099..0407adb3db 100644
--- a/simulation/simDevices/src/asicSimulation/SKernel/sEmbeddedCpu/firmware/falcon_pha/Image02Oldest/ppa_fw_threads_FalconImage02Oldest.c
+++ b/simulation/simDevices/src/asicSimulation/SKernel/sEmbeddedCpu/firmware/falcon_pha/Image02Oldest/ppa_fw_threads_FalconImage02Oldest.c
@@ -49,9 +49,9 @@ static SKERNEL_DEVICE_OBJECT * devObjPtr;
  * inparam         None
  * return          None
  * description     Activate compiler pragma no_reorder command.
- *                 Telling the compiler not to change order of instructions at this point.
+ *                 Telling the compiler not to change order of instructions at this point. 
  ************************************************************************************************************************/
-INLINE void pragma_no_reorder(){
+INLINE void pragma_no_reorder(){    
             #pragma no_reorder
     }
 
@@ -60,9 +60,9 @@ INLINE void pragma_no_reorder(){
  * inparam         None
  * return          None
  * description     Activate compiler pragma frequency_hint command.
- *                 Telling the compiler that this code is hardly executed
+ *                 Telling the compiler that this code is hardly executed  
  ************************************************************************************************************************/
-INLINE void pragma_frequency_hint_never(){
+INLINE void pragma_frequency_hint_never(){  
             #pragma frequency_hint NEVER
     }
 
@@ -125,8 +125,8 @@ void FalconImage02Oldest_get_fw_version(GT_U32 fwImageId)
  * inparam         None
  * return          None
  * description     No modifications to the packet and no additions or remove of any tags or headers.
- *                 Packet is out as it is in.
- *                 Note:
+ *                 Packet is out as it is in. 
+ *                 Note: 
  *                 - this thread is mapped to a fix address and should not be changed.
  *                 - allows to execute the thread while fw version is being upgraded.
  *                 - do not use accelerator commands since it will change thread's code
@@ -160,13 +160,13 @@ void PPA_FW(THR0_DoNothing)() {
  *              Incoming packet: Expansion space(32B),IPv6(40B),IPv6 Ext. hdrs(n*8B),SRH(8B),Segment0(16B),Segment1(16B),Segment2(16B)
  *              Output packet:   Expansion space(32B),IPv6(40B),IPv6 Ext. hdrs(n*8B),SRH(8B),Segment0(16B),Segment1(16B),Segment2(16B)
  *              Header Window anchor= Outer Layer 3
- *              Header Window size= 32B Expansion space + 128B packet
+ *              Header Window size= 32B Expansion space + 128B packet 
  *              Use Desc<SR EH Offset> to find the location of the fields.
- *              Decrement and update the SR Header<Segments Left> field
- *              Update Ipv6 destination IP with the selected segment list IP.
+ *              Decrement and update the SR Header<Segments Left> field  
+ *              Update Ipv6 destination IP with the selected segment list IP. 
  *              Do it only if packet size is still under the maximum allowed size of 128 bytes otherwise drop.
  *              NOTE: Since required Segment list can reach to location beyond 127B need to set offset register
- *                    in order for the accelerator command to work correctly
+ *                    in order for the accelerator command to work correctly 
  ************************************************************************************************************************/
 __attribute__ ((aligned (16)))
 void PPA_FW(THR1_SRv6_End_Node)() {
@@ -190,7 +190,7 @@ void PPA_FW(THR1_SRv6_End_Node)() {
     segments_left_ofst = IPV6_SR_EXPANSION_SPACE_SIZE + IPV6_BASIC_HEADER_SIZE + ipv6_eh_size + SEGMENT_LEFT_OFST_IN_SR_HDR ;
     __LOG_PARAM_FW(segments_left_ofst);
 
-    /* Check that SRH<Segment left> is in the range of PPA buffer (160B = Exp space:32B + input packet:128B) otherwise drop */
+    /* Check that SRH<Segment left> is in the range of PPA buffer (160B = Exp space:32B + input packet:128B) otherwise drop */  
     __LOG_FW(("Check that SRH<Segment left> is in the range of PPA buffer (160B = Exp space:32B + input packet:128B) otherwise drop"));
     if ( segments_left_ofst < (IPV6_SR_EXPANSION_SPACE_SIZE+IPv6_SR_PKT_MAX_LENGTH) )
     {
@@ -204,17 +204,17 @@ void PPA_FW(THR1_SRv6_End_Node)() {
         selected_segment_list_ofst = IPV6_SR_EXPANSION_SPACE_SIZE + IPV6_BASIC_HEADER_SIZE + ipv6_eh_size + SR_BASIC_HEADER_SIZE + (SEGMENT_LIST_SIZE*segments_left);
         __LOG_PARAM_FW(selected_segment_list_ofst);
 
-        /* Check Segment list is in the range of PPA buffer. Since it's 16B long max valid offset is 144B (160-16) otherwise drop */
+        /* Check Segment list is in the range of PPA buffer. Since it's 16B long max valid offset is 144B (160-16) otherwise drop */  
         __LOG_FW(("Check Segment list is in the range of PPA buffer. Since it's 16B long max valid offset is 144B (160-16) otherwise drop"));
         if (selected_segment_list_ofst <= (IPV6_SR_EXPANSION_SPACE_SIZE+IPv6_SR_PKT_MAX_LENGTH-SEGMENT_LIST_SIZE))
         {
-            /* Pkt dst field in accelerator command is only 7 bits which means can hold packet offset up to 127 bytes.
+            /* Pkt dst field in accelerator command is only 7 bits which means can hold packet offset up to 127 bytes. 
                Since in this use case might be a case in which Segment list location exceeds 127 bytes need to use PPN offset register.
-               By default this register is used all the time and the default value is zero.
+               By default this register is used all the time and the default value is zero. 
                This time we will set it to point to IPv6 which means that the pkt src and dst will be relative to 32B
                HW accelerator will add the offset to the current pkt src and dst values and so will point to the exact location */
             __LOG_FW(("Set offset register to point to IPv6"));
-            PPA_FW_SP_WRITE(PPN_IO_REG_PKT_HDR_OFST_ADDR, 32);
+            PPA_FW_SP_WRITE(PPN_IO_REG_PKT_HDR_OFST_ADDR, 32); 
             __PRAGMA_NO_REORDER
 
             /* Update IPv6 destination address from the segment list */
@@ -230,7 +230,7 @@ void PPA_FW(THR1_SRv6_End_Node)() {
 
             /* Set offset register back to zero (default value)  */
             __LOG_FW(("Set offset register back to zero (default value)"));
-            PPA_FW_SP_WRITE(PPN_IO_REG_PKT_HDR_OFST_ADDR, 0);
+            PPA_FW_SP_WRITE(PPN_IO_REG_PKT_HDR_OFST_ADDR, 0); 
         }
         else
         {   /* Drop the packet */
@@ -282,7 +282,7 @@ void PPA_FW(THR1_SRv6_End_Node)() {
  *              Update IPv6 SIP with new value taken from the CFG template
  *              Updates IPv6<Payload Length> += 24
  *              Copy IPv6 SIP to Segment0
- *              Copy Thread<Template> to IPv6 SIP
+ *              Copy Thread<Template> to IPv6 SIP                            
  *              Set SRH header with specific values defined by architect
  *****************************************************************************************************************************************/
 __attribute__ ((aligned (16)))
@@ -293,7 +293,7 @@ void PPA_FW(THR2_SRv6_Source_Node_1_segment)() {
 
     /*------------------------------------------------------------------------------------------------------------------------------------------------
       - Move IPv6 header left by 24 bytes to make room for SRH(8B) + SR segment(16B)
-      - Need to do it in 2 commands since need to move more than 32B (IPv6 is 40B)
+      - Need to do it in 2 commands since need to move more than 32B (IPv6 is 40B)  
       ------------------------------------------------------------------------------------------------------------------------------------------------*/
     /* Move left the first 32 bytes of IPv6 */
     __LOG_FW(("Move left the first 32 bytes using accelerator cmd"));
@@ -314,9 +314,9 @@ void PPA_FW(THR2_SRv6_Source_Node_1_segment)() {
 
 
     /*------------------------------------------------------------------------------------------------------------------------------------------------
-      - Update SR Header
+      - Update SR Header 
       ------------------------------------------------------------------------------------------------------------------------------------------------*/
-    /* Use max constant 11 bits command to set SRH<Routing Type>=4 and SRH<Segments Left>=1. Clear rest bit to zero. */
+    /* Use max constant 11 bits command to set SRH<Routing Type>=4 and SRH<Segments Left>=1. Clear rest bit to zero. */                                                    
     __LOG_FW(("Use max constant 11 bits command to set SRH<Routing Type>=4 and SRH<Segments Left>=1. Clear rest bit to zero."));
     ACCEL_CMD_TRIG(COPY_BITS_THR2_SRv6_Source_Node_1_segment_CONST_0x401_LEN11_TO_PKT_SRv6_Header__routing_type_PLUS5_OFFSET, SET_REMAIN_FIELDS_TO_ZERO);
     __PRAGMA_NO_REORDER
@@ -327,18 +327,18 @@ void PPA_FW(THR2_SRv6_Source_Node_1_segment)() {
     ACCEL_CMD_TRIG(COPY_BYTES_THR2_SRv6_Source_Node_1_segment_PKT_IPv6_Header__next_header_MINUS24_LEN2_TO_PKT_SRv6_Header__next_header_OFFSET, 0);
     __PRAGMA_NO_REORDER
 
-    /* SRH<Hdr Ext Len>=2 */
+    /* SRH<Hdr Ext Len>=2 */                                                    
     __LOG_FW(("SRH<Hdr Ext Len>=2"));
     ACCEL_CMD_TRIG(COPY_BITS_THR2_SRv6_Source_Node_1_segment_CONST_0x2_LEN8_TO_PKT_SRv6_Header__hdr_ext_len_OFFSET, 0);
 
-    /* SRH<Last Entry>=0, SRH<Flags>=0, SRH<Tag>=0 (clear 4 LS bytes to zero) */
+    /* SRH<Last Entry>=0, SRH<Flags>=0, SRH<Tag>=0 (clear 4 LS bytes to zero) */                                                    
     __LOG_FW(("SRH<Last Entry>=0, SRH<Flags>=0, SRH<Tag>=0 (clear 4 LS bytes to zero) "));
     ACCEL_CMD_TRIG(COPY_BITS_THR2_SRv6_Source_Node_1_segment_CONST_0x0_LEN8_TO_PKT_SRv6_Header__last_entry_OFFSET, SET_REMAIN_FIELDS_TO_ZERO);
     __PRAGMA_NO_REORDER
 
 
     /*------------------------------------------------------------------------------------------------------------------------------------------------
-      - Update origin IPv6 header
+      - Update origin IPv6 header 
       ------------------------------------------------------------------------------------------------------------------------------------------------*/
     /* Copy Thread<Template> to IPv6 SIP */
     __LOG_FW(("Copy Thread<Template> to IPv6 SIP using accelerator cmd"));
@@ -355,7 +355,7 @@ void PPA_FW(THR2_SRv6_Source_Node_1_segment)() {
 
 
     /*------------------------------------------------------------------------------------------------------------------------------------------------
-      - Updates Desc<fw_bc_modification>
+      - Updates Desc<fw_bc_modification>  
       ------------------------------------------------------------------------------------------------------------------------------------------------*/
     /* Indicates HW about the new starting point of the packet header (two's complement). In this case plus 24 bytes */
     __LOG_FW(("Indicates HW about the new starting point of the packet header (two's complement). In this case plus 24 bytes"));
@@ -379,7 +379,7 @@ void PPA_FW(THR2_SRv6_Source_Node_1_segment)() {
  * funcname     THR3_SRv6_Source_Node_First_Pass_2_3_segments
  * inparam      None
  * return       None
- * description  Handles first pass thread for 2 or 3 segments.
+ * description  Handles first pass thread for 2 or 3 segments. 
  *              Adds one segment of 16B. SRH will be added in second pass with the option to add maximum of 2 more segments.
  *              cfg template:      new ipv6 sip (16B)
  *              src & trg entries: Not in use (4B)
@@ -388,7 +388,7 @@ void PPA_FW(THR2_SRv6_Source_Node_1_segment)() {
  *              Header Window anchor= Outer Layer 2
  *              Header Window size= 128 bytes + 32 bytes Header increment
  *              Firmware adds 16B after IPv6. Those bytes are marked as Segment2 (deepest segment).
- *              It copies IPv6 SIP to Segment2
+ *              It copies IPv6 SIP to Segment2 
  *              It copies Thread<Template> to IPv6 SIP
  *              Sets eDSA<target ePort>++
  *              eDSA<Is Trg Phy Port Valid>=0
@@ -400,8 +400,8 @@ void PPA_FW(THR3_SRv6_Source_Node_First_Pass_2_3_segments)() {
 
 
     /*------------------------------------------------------------------------------------------------------------------------------------------------
-      - Move L2,eDSA,ET and IPv6 headers left by 16 bytes to make room for Segment2(16B)
-      - Need to do it in 3 commands since need to move more than 32B (L2(12B) + eDSA(16B) + ET(2B) + IPv6(40B) is 70B)
+      - Move L2,eDSA,ET and IPv6 headers left by 16 bytes to make room for Segment2(16B) 
+      - Need to do it in 3 commands since need to move more than 32B (L2(12B) + eDSA(16B) + ET(2B) + IPv6(40B) is 70B)  
       ------------------------------------------------------------------------------------------------------------------------------------------------*/
     /* Move left the first 32 bytes */
     __LOG_FW(("Move left the first 32 bytes"));
@@ -426,7 +426,7 @@ void PPA_FW(THR3_SRv6_Source_Node_First_Pass_2_3_segments)() {
     __PRAGMA_NO_REORDER
 
     /*------------------------------------------------------------------------------------------------------------------------------------------------
-      - Update origin IPv6 header
+      - Update origin IPv6 header 
       ------------------------------------------------------------------------------------------------------------------------------------------------*/
     /* Copy CFG<Template> to IPv6 SIP */
     __LOG_FW(("Copy CFG<Template> to IPv6 SIP"));
@@ -445,7 +445,7 @@ void PPA_FW(THR3_SRv6_Source_Node_First_Pass_2_3_segments)() {
 
 
     /*------------------------------------------------------------------------------------------------------------------------------------------------
-      - Update Desc<fw_bc_modification>
+      - Update Desc<fw_bc_modification>  
       ------------------------------------------------------------------------------------------------------------------------------------------------*/
     /* Indicates HW about the new starting point of the packet header (two's complement). In this case plus 16 bytes */
     __LOG_FW(("Indicates HW about the new starting point of the packet header (two's complement). In this case plus 16 bytes"));
@@ -469,7 +469,7 @@ void PPA_FW(THR3_SRv6_Source_Node_First_Pass_2_3_segments)() {
  * funcname     THR4_SRv6_Source_Node_Second_Pass_3_segments
  * inparam      None
  * return       None
- * description  Handles second pass thread for 3 segments.
+ * description  Handles second pass thread for 3 segments. 
  *              Basically adds SRH(8B) + Segment0(16B) + Segment1(16B).
  *              cfg template:    Not in use (16B)
  *              src & trg entries: Not in use (4B)
@@ -480,11 +480,11 @@ void PPA_FW(THR3_SRv6_Source_Node_First_Pass_2_3_segments)() {
  *              Use Desc<Egress Tag state> to determine if Layer2 header is 14 bytes or 18 bytes
  *              Add 40 Bytes after IPv6 Base Header for SRH, Segment0 and Segment1
  *              IPv6BaseHeader<Payload Length>+= 56 (It includes the 16B added in the first pass + 40B added here)
- *              Set SRH Base, Segment0 and Segment1 from Generic TS<data (36B),EthType(2B) & VLAN(1B)>
- *              Update Desc<fw_bc_modification> field to -14B (0xF2) since we add 40B but remove 54B of Generic TS
+ *              Set SRH Base, Segment0 and Segment1 from Generic TS<data (36B),EthType(2B) & VLAN(1B)>  
+ *              Update Desc<fw_bc_modification> field to -14B (0xF2) since we add 40B but remove 54B of Generic TS  
  *              NOTE: - Since this thread handles packet with and without vlan there are 2 types of accelerators to support both cases
- *                      these accelerators are placed one after the other. First one handles no vlan and second (next 4B) handles with vlan
- *                    - Require set of offset register at some point to enable accelerator command to reach location beyond 127 bytes
+ *                      these accelerators are placed one after the other. First one handles no vlan and second (next 4B) handles with vlan 
+ *                    - Require set of offset register at some point to enable accelerator command to reach location beyond 127 bytes 
  *****************************************************************************************************************************************/
 __attribute__ ((aligned (16)))
 void PPA_FW(THR4_SRv6_Source_Node_Second_Pass_3_segments)() {
@@ -536,7 +536,7 @@ void PPA_FW(THR4_SRv6_Source_Node_Second_Pass_3_segments)() {
 
         /*------------------------------------------------------------------------------------------------------------------------------------------------
           - Move Generic TS(54B),L2(14B) and IPv6(40B) headers left by 40 bytes to make room for SRH(8B) + Container0(16B) + Container1(16B)
-          - Need to do it in 4 commands since need to move more than 32B (108B)
+          - Need to do it in 4 commands since need to move more than 32B (108B)  
           ------------------------------------------------------------------------------------------------------------------------------------------------*/
         /* Move left the first 32 bytes */
         __LOG_FW(("Move left the first 32 bytes"));
@@ -558,40 +558,40 @@ void PPA_FW(THR4_SRv6_Source_Node_Second_Pass_3_segments)() {
         ACCEL_CMD_TRIG(SHIFTLEFT_40_BYTES_THR4_SRv6_Source_Node_Second_Pass_3_segments_LEN32_FROM_PKT_no_vlan__Generic_TS_Data__mac_da_47_32_PLUS76_OFFSET, 0);
         __PRAGMA_NO_REORDER
 
-        /* Pkt dst field in accelerator command is only 7 bits which means can hold packet offset up to 127 bytes.
+        /* Pkt dst field in accelerator command is only 7 bits which means can hold packet offset up to 127 bytes. 
            Since in this use case the location of some of the packet's fields exceed 127 bytes need to use PPN offset register.
-           By default this register is used all the time and the default value is zero.
+           By default this register is used all the time and the default value is zero. 
            This time we will set it to point to start of Generic TS after shift left by 40B which means that the pkt src and dst will be relative to 8B
            HW accelerator will add the offset to the current pkt src and dst values and so will point to the exact location */
         __LOG_FW(("Set offset register to point to L2"));
-        PPA_FW_SP_WRITE(PPN_IO_REG_PKT_HDR_OFST_ADDR, 8);
+        PPA_FW_SP_WRITE(PPN_IO_REG_PKT_HDR_OFST_ADDR, 8); 
         __PRAGMA_NO_REORDER
 
         /*------------------------------------------------------------------------------------------------------------------------------------------------
           - Set SRH
           ------------------------------------------------------------------------------------------------------------------------------------------------*/
-        /* Copy IPv6.Next Header to SRH Base Header.Next Header */
+        /* Copy IPv6.Next Header to SRH Base Header.Next Header */ 
         __LOG_FW(("Copy IPv6.Next Header to SRH Base Header.Next Header"));
-        PPA_FW_SP_BYTE_WRITE(FALCON_PKT_REGs_lo + 116, ipv6NextHeader );
+        PPA_FW_SP_BYTE_WRITE(FALCON_PKT_REGs_lo + 116, ipv6NextHeader ); 
         __PRAGMA_NO_REORDER
 
-        /* Copy Generic TS L2 Header EtherType[15:8] to SRH Base Header.Hdr Ext Len.
+        /* Copy Generic TS L2 Header EtherType[15:8] to SRH Base Header.Hdr Ext Len. 
            Copy Generic TS L2 Header EtherType[7:0] to SRH Base Header.Routing Type. */
         __LOG_FW(("Copy Generic TS L2 Header EtherType[15:8] to SRH Base Header.Hdr Ext Len. Copy Generic TS L2 Header EtherType[7:0] to SRH Base Header.Routing Type."));
-        PPA_FW_SP_SHORT_WRITE(FALCON_PKT_REGs_lo + 117, geneircTsDataEthertype );
+        PPA_FW_SP_SHORT_WRITE(FALCON_PKT_REGs_lo + 117, geneircTsDataEthertype ); 
 
-        /* Copy Generic TS L2 Header VLAN-ID[7:0] to SRH Base Header.Segment Left */
+        /* Copy Generic TS L2 Header VLAN-ID[7:0] to SRH Base Header.Segment Left */ 
         __LOG_FW(("Copy Generic TS L2 Header VLAN-ID[7:0] to SRH Base Header.Segment Left"));
-        PPA_FW_SP_BYTE_WRITE(FALCON_PKT_REGs_lo + 119, geneircTsDataVid );
+        PPA_FW_SP_BYTE_WRITE(FALCON_PKT_REGs_lo + 119, geneircTsDataVid ); 
 
         /* Copy Generic TS< Data Bytes [35:32]> to SRH Bytes [3:0] */
         __LOG_FW(("Copy Generic TS< Data Bytes [35:32]> to SRH Bytes [3:0]"));
         ACCEL_CMD_TRIG(COPY_BYTES_THR4_SRv6_Source_Node_Second_Pass_3_segments_OFFSET8_PKT_no_vlan__Generic_TS_Data__data_35_32_MINUS40_LEN4_TO_PKT_no_vlan__SRv6_Header__last_entry_OFFSET, 0);
 
         /*------------------------------------------------------------------------------------------------------------------------------------------------
-          - Update IPv6
+          - Update IPv6 
           ------------------------------------------------------------------------------------------------------------------------------------------------*/
-        /* IPv6.Payload Length += 56 (16B in pass1 and 40B in pass2) */
+        /* IPv6.Payload Length += 56 (16B in pass1 and 40B in pass2) */           
         __LOG_FW(("IPv6.Payload Length += 56 (16B in pass1 and 40B in pass2)"));
         ACCEL_CMD_TRIG(ADD_BITS_THR4_SRv6_Source_Node_Second_Pass_3_segments_OFFSET8_CONST_0x38_LEN16_TO_PKT_no_vlan__IPv6_Header__payload_length_OFFSET, 0);
 
@@ -626,7 +626,7 @@ void PPA_FW(THR4_SRv6_Source_Node_Second_Pass_3_segments)() {
 
         /*------------------------------------------------------------------------------------------------------------------------------------------------
           - Move Generic TS(54B),L2(14B or 18B) and IPv6(40B) headers left by 40 bytes to make room for SRH(8B) + Container0(16B) + Container1(16B)
-          - Need to do it in 4 commands since need to move more than 32B (108B or 112B)
+          - Need to do it in 4 commands since need to move more than 32B (108B or 112B)  
           ------------------------------------------------------------------------------------------------------------------------------------------------*/
         /* Move left the first 32 bytes */
         __LOG_FW(("Move left the first 32 bytes"));
@@ -643,13 +643,13 @@ void PPA_FW(THR4_SRv6_Source_Node_Second_Pass_3_segments)() {
         ACCEL_CMD_TRIG(SHIFTLEFT_40_BYTES_THR4_SRv6_Source_Node_Second_Pass_3_segments_LEN16_FROM_PKT_no_vlan__Generic_TS_Data__mac_da_47_32_PLUS64_OFFSET, 0);
         __PRAGMA_NO_REORDER
 
-        /* Pkt dst field in accelerator command is only 7 bits which means can hold packet offset up to 127 bytes.
+        /* Pkt dst field in accelerator command is only 7 bits which means can hold packet offset up to 127 bytes. 
            Since in this use case location of last 32B of IPv6 exceed 127 bytes need to use PPN offset register.
-           By default this register is used all the time and the default value is zero.
+           By default this register is used all the time and the default value is zero. 
            This time we will set it to point to start of Generic TS after shift left by 40B which means that the pkt src and dst will be relative to 8B
            HW accelerator will add the offset to the current pkt src and dst values and so will point to the exact location */
         __LOG_FW(("Set offset register to point to L2"));
-        PPA_FW_SP_WRITE(PPN_IO_REG_PKT_HDR_OFST_ADDR, 8);
+        PPA_FW_SP_WRITE(PPN_IO_REG_PKT_HDR_OFST_ADDR, 8); 
         __PRAGMA_NO_REORDER
 
         /* Move the last 32 bytes */
@@ -660,28 +660,28 @@ void PPA_FW(THR4_SRv6_Source_Node_Second_Pass_3_segments)() {
         /*------------------------------------------------------------------------------------------------------------------------------------------------
           - Set SRH
           ------------------------------------------------------------------------------------------------------------------------------------------------*/
-       /* Copy IPv6.Next Header to SRH Base Header.Next Header */
+       /* Copy IPv6.Next Header to SRH Base Header.Next Header */ 
         __LOG_FW(("Copy IPv6.Next Header to SRH Base Header.Next Header"));
-        PPA_FW_SP_BYTE_WRITE(FALCON_PKT_REGs_lo + 116 + 4, ipv6NextHeader );
+        PPA_FW_SP_BYTE_WRITE(FALCON_PKT_REGs_lo + 116 + 4, ipv6NextHeader ); 
         __PRAGMA_NO_REORDER
 
-        /* Copy Generic TS L2 Header EtherType[15:8] to SRH Base Header.Hdr Ext Len.
+        /* Copy Generic TS L2 Header EtherType[15:8] to SRH Base Header.Hdr Ext Len. 
            Copy Generic TS L2 Header EtherType[7:0] to SRH Base Header.Routing Type. */
         __LOG_FW(("Copy Generic TS L2 Header EtherType[15:8] to SRH Base Header.Hdr Ext Len. Copy Generic TS L2 Header EtherType[7:0] to SRH Base Header.Routing Type."));
-        PPA_FW_SP_SHORT_WRITE(FALCON_PKT_REGs_lo + 117 + 4, geneircTsDataEthertype );
+        PPA_FW_SP_SHORT_WRITE(FALCON_PKT_REGs_lo + 117 + 4, geneircTsDataEthertype ); 
 
-        /* Copy Generic TS L2 Header VLAN-ID[7:0] to SRH Base Header.Segment Left */
+        /* Copy Generic TS L2 Header VLAN-ID[7:0] to SRH Base Header.Segment Left */ 
         __LOG_FW(("Copy Generic TS L2 Header VLAN-ID[7:0] to SRH Base Header.Segment Left"));
-        PPA_FW_SP_BYTE_WRITE(FALCON_PKT_REGs_lo + 119 + 4, geneircTsDataVid );
+        PPA_FW_SP_BYTE_WRITE(FALCON_PKT_REGs_lo + 119 + 4, geneircTsDataVid ); 
 
         /* Copy Generic TS< Data Bytes [35:32]> to SRH Bytes [3:0] */
         __LOG_FW(("Copy Generic TS< Data Bytes [35:32]> to SRH Bytes [3:0]"));
         ACCEL_CMD_TRIG(COPY_BYTES_THR4_SRv6_Source_Node_Second_Pass_3_segments_OFFSET8_PKT_with_vlan__Generic_TS_Data__data_35_32_MINUS40_LEN4_TO_PKT_with_vlan__SRv6_Header__last_entry_OFFSET, 0);
 
         /*------------------------------------------------------------------------------------------------------------------------------------------------
-          - Update IPv6
+          - Update IPv6 
           ------------------------------------------------------------------------------------------------------------------------------------------------*/
-        /* IPv6.Payload Length += 56 (16B in pass1 and 40B in pass2) */
+       /* IPv6.Payload Length += 56 (16B in pass1 and 40B in pass2) */           
         __LOG_FW(("IPv6.Payload Length += 56 (16B in pass1 and 40B in pass2)"));
         ACCEL_CMD_TRIG(ADD_BITS_THR4_SRv6_Source_Node_Second_Pass_3_segments_OFFSET8_CONST_0x38_LEN16_TO_PKT_with_vlan__IPv6_Header__payload_length_OFFSET, 0);
 
@@ -703,12 +703,12 @@ void PPA_FW(THR4_SRv6_Source_Node_Second_Pass_3_segments)() {
         __LOG_FW(("not valid: packet should not be changed"));
 
         __LOG_FW((" Desc<Egress Tag state> is not '0' nor '1' "));
-        __LOG_PARAM_FW(thr4_desc_ptr->phal2ppa.egress_tag_state);
+        __LOG_PARAM_FW(thr4_desc_ptr->phal2ppa.egress_tag_state);       
      }
 
      /* Set offset register back to zero (default value) */
      __LOG_FW(("Set offset register back to zero (default value)"));
-     PPA_FW_SP_WRITE(PPN_IO_REG_PKT_HDR_OFST_ADDR, 0);
+     PPA_FW_SP_WRITE(PPN_IO_REG_PKT_HDR_OFST_ADDR, 0); 
 
 
 #if (CHECK_STACK)
@@ -727,7 +727,7 @@ void PPA_FW(THR4_SRv6_Source_Node_Second_Pass_3_segments)() {
  * funcname     THR5_SRv6_Source_Node_Second_Pass_2_segments
  * inparam      None
  * return       None
- * description  Handles second pass thread for 2 segments.
+ * description  Handles second pass thread for 2 segments. 
  *              Basically adds SRH(8B) + Segment0.
  *              cfg template:    Not in use (16B)
  *              src & trg entries: Not in use (4B)
@@ -739,10 +739,10 @@ void PPA_FW(THR4_SRv6_Source_Node_Second_Pass_3_segments)() {
  *              Add 8 Bytes after IPv6 Base Header for SRH and Segment0
  *              IPv6BaseHeader<Payload Length>+= 40 (It includes the 16B added in the first pass and 24B added here)
  *              Set SRH and Segment0 according to Generic TS.
- *              Update Desc<fw_bc_modification> field to -30B (0xE2) since we add 24B but remove 54B of Generic TS
+ *              Update Desc<fw_bc_modification> field to -30B (0xE2) since we add 24B but remove 54B of Generic TS  
  *              NOTE: - Since this thread handles packet with and without vlan there are 2 types of accelerators to support both cases
- *                      these accelerators are placed one after the other. First one handles no vlan and second (next 4B) handles with vlan
- *                    - Require set of offset register at some point to enable accelerator command to reach location beyond 127 bytes
+ *                      these accelerators are placed one after the other. First one handles no vlan and second (next 4B) handles with vlan 
+ *                    - Require set of offset register at some point to enable accelerator command to reach location beyond 127 bytes 
  *****************************************************************************************************************************************/
 __attribute__ ((aligned (16)))
 void PPA_FW(THR5_SRv6_Source_Node_Second_Pass_2_segments)() {
@@ -794,7 +794,7 @@ void PPA_FW(THR5_SRv6_Source_Node_Second_Pass_2_segments)() {
 
         /*------------------------------------------------------------------------------------------------------------------------------------------------
           - Move Generic TS(54B),L2(14B) and IPv6(40B) headers left by 24 bytes to make room for SRH(8B) + Container0(16B)
-          - Need to do it in 4 commands since need to move more than 32B (108B)
+          - Need to do it in 4 commands since need to move more than 32B (108B)  
           ------------------------------------------------------------------------------------------------------------------------------------------------*/
         /* Move left the first 32 bytes */
         __LOG_FW(("Move left the first 32 bytes"));
@@ -816,40 +816,40 @@ void PPA_FW(THR5_SRv6_Source_Node_Second_Pass_2_segments)() {
         ACCEL_CMD_TRIG(SHIFTLEFT_24_BYTES_THR5_SRv6_Source_Node_Second_Pass_2_segments_LEN32_FROM_PKT_no_vlan__Generic_TS_Data__mac_da_47_32_PLUS76_OFFSET, 0);
         __PRAGMA_NO_REORDER
 
-        /* Pkt dst field in accelerator command is only 7 bits which means can hold packet offset up to 127 bytes.
+        /* Pkt dst field in accelerator command is only 7 bits which means can hold packet offset up to 127 bytes. 
            Since in this use case the location of some of the packet's fields exceed 127 bytes need to use PPN offset register.
-           By default this register is used all the time and the default value is zero.
+           By default this register is used all the time and the default value is zero. 
            This time we will set it to point to start of Generic TS after shift left by 24B which means that the pkt src and dst will be relative to 24B
            HW accelerator will add the offset to the current pkt src and dst values and so will point to the exact location */
         __LOG_FW(("Set offset register to point to L2"));
-        PPA_FW_SP_WRITE(PPN_IO_REG_PKT_HDR_OFST_ADDR, 24);
+        PPA_FW_SP_WRITE(PPN_IO_REG_PKT_HDR_OFST_ADDR, 24); 
         __PRAGMA_NO_REORDER
 
         /*------------------------------------------------------------------------------------------------------------------------------------------------
           - Set SRH
           ------------------------------------------------------------------------------------------------------------------------------------------------*/
-        /* Copy IPv6.Next Header to SRH Base Header.Next Header */
+        /* Copy IPv6.Next Header to SRH Base Header.Next Header */ 
         __LOG_FW(("Copy IPv6.Next Header to SRH Base Header.Next Header"));
-        PPA_FW_SP_BYTE_WRITE(FALCON_PKT_REGs_lo + 132, ipv6NextHeader );
+        PPA_FW_SP_BYTE_WRITE(FALCON_PKT_REGs_lo + 132, ipv6NextHeader ); 
         __PRAGMA_NO_REORDER
 
-        /* Copy Generic TS L2 Header EtherType[15:8] to SRH Base Header.Hdr Ext Len.
+        /* Copy Generic TS L2 Header EtherType[15:8] to SRH Base Header.Hdr Ext Len. 
            Copy Generic TS L2 Header EtherType[7:0] to SRH Base Header.Routing Type. */
         __LOG_FW(("Copy Generic TS L2 Header EtherType[15:8] to SRH Base Header.Hdr Ext Len. Copy Generic TS L2 Header EtherType[7:0] to SRH Base Header.Routing Type."));
-        PPA_FW_SP_SHORT_WRITE(FALCON_PKT_REGs_lo + 133, geneircTsDataEthertype );
+        PPA_FW_SP_SHORT_WRITE(FALCON_PKT_REGs_lo + 133, geneircTsDataEthertype ); 
 
-        /* Copy Generic TS L2 Header VLAN-ID[7:0] to SRH Base Header.Segment Left */
+        /* Copy Generic TS L2 Header VLAN-ID[7:0] to SRH Base Header.Segment Left */ 
         __LOG_FW(("Copy Generic TS L2 Header VLAN-ID[7:0] to SRH Base Header.Segment Left"));
-        PPA_FW_SP_BYTE_WRITE(FALCON_PKT_REGs_lo + 135, geneircTsDataVid );
+        PPA_FW_SP_BYTE_WRITE(FALCON_PKT_REGs_lo + 135, geneircTsDataVid ); 
 
         /* Copy Generic TS< Data Bytes [35:32]> to SRH Bytes [3:0] */
         __LOG_FW(("Copy Generic TS< Data Bytes [35:32]> to SRH Bytes [3:0]"));
         ACCEL_CMD_TRIG(COPY_BYTES_THR5_SRv6_Source_Node_Second_Pass_2_segments_OFFSET24_PKT_no_vlan__Generic_TS_Data__data_35_32_MINUS24_LEN4_TO_PKT_no_vlan__SRv6_Header__last_entry_OFFSET, 0);
 
         /*------------------------------------------------------------------------------------------------------------------------------------------------
-          - Update IPv6
+          - Update IPv6 
           ------------------------------------------------------------------------------------------------------------------------------------------------*/
-        /* IPv6.Payload Length += 40 (16B in pass1 and 24B in pass2) */
+        /* IPv6.Payload Length += 40 (16B in pass1 and 24B in pass2) */           
         __LOG_FW(("IPv6.Payload Length += 40 (16B in pass1 and 24B in pass2)"));
         ACCEL_CMD_TRIG(ADD_BITS_THR5_SRv6_Source_Node_Second_Pass_2_segments_OFFSET24_CONST_0x28_LEN16_TO_PKT_no_vlan__IPv6_Header__payload_length_OFFSET, 0);
 
@@ -858,7 +858,7 @@ void PPA_FW(THR5_SRv6_Source_Node_Second_Pass_2_segments)() {
         ACCEL_CMD_TRIG(COPY_BITS_THR5_SRv6_Source_Node_Second_Pass_2_segments_OFFSET24_CONST_0x2B_LEN8_TO_PKT_no_vlan__IPv6_Header__next_header_OFFSET, 0);
 
         /*------------------------------------------------------------------------------------------------------------------------------------------------
-          - Set Container0
+          - Set Container0 
           ------------------------------------------------------------------------------------------------------------------------------------------------*/
         /* Copy Generic TS< Data Bytes [15:0]> to Container 0 */
         __LOG_FW(("Copy Generic TS< Data Bytes [15:0]> to Container 0"));
@@ -883,7 +883,7 @@ void PPA_FW(THR5_SRv6_Source_Node_Second_Pass_2_segments)() {
 
         /*------------------------------------------------------------------------------------------------------------------------------------------------
           - Move Generic TS(54B),L2(18B) and IPv6(40B) headers left by 24 bytes to make room for SRH(8B) + Container0(16B)
-          - Need to do it in 4 commands since need to move more than 32B (112B)
+          - Need to do it in 4 commands since need to move more than 32B (112B)  
           ------------------------------------------------------------------------------------------------------------------------------------------------*/
         /* Move left the first 32 bytes */
         __LOG_FW(("Move left the first 32 bytes"));
@@ -900,13 +900,13 @@ void PPA_FW(THR5_SRv6_Source_Node_Second_Pass_2_segments)() {
         ACCEL_CMD_TRIG(SHIFTLEFT_24_BYTES_THR5_SRv6_Source_Node_Second_Pass_2_segments_LEN16_FROM_PKT_no_vlan__Generic_TS_Data__mac_da_47_32_PLUS64_OFFSET, 0);
         __PRAGMA_NO_REORDER
 
-        /* Pkt dst field in accelerator command is only 7 bits which means can hold packet offset up to 127 bytes.
+        /* Pkt dst field in accelerator command is only 7 bits which means can hold packet offset up to 127 bytes. 
            Since in this use case location of last 32B of IPv6 exceed 127 bytes need to use PPN offset register.
-           By default this register is used all the time and the default value is zero.
+           By default this register is used all the time and the default value is zero. 
            This time we will set it to point to start of Generic TS after shift left by 24B which means that the pkt src and dst will be relative to 24B
            HW accelerator will add the offset to the current pkt src and dst values and so will point to the exact location */
         __LOG_FW(("Set offset register to point to L2"));
-        PPA_FW_SP_WRITE(PPN_IO_REG_PKT_HDR_OFST_ADDR, 24);
+        PPA_FW_SP_WRITE(PPN_IO_REG_PKT_HDR_OFST_ADDR, 24); 
         __PRAGMA_NO_REORDER
 
         /* Move the last 32 bytes */
@@ -917,28 +917,28 @@ void PPA_FW(THR5_SRv6_Source_Node_Second_Pass_2_segments)() {
         /*------------------------------------------------------------------------------------------------------------------------------------------------
           - Set SRH
           ------------------------------------------------------------------------------------------------------------------------------------------------*/
-       /* Copy IPv6.Next Header to SRH Base Header.Next Header */
+       /* Copy IPv6.Next Header to SRH Base Header.Next Header */ 
         __LOG_FW(("Copy IPv6.Next Header to SRH Base Header.Next Header"));
-        PPA_FW_SP_BYTE_WRITE(FALCON_PKT_REGs_lo + 132 + 4, ipv6NextHeader );
+        PPA_FW_SP_BYTE_WRITE(FALCON_PKT_REGs_lo + 132 + 4, ipv6NextHeader ); 
         __PRAGMA_NO_REORDER
 
-        /* Copy Generic TS L2 Header EtherType[15:8] to SRH Base Header.Hdr Ext Len.
+        /* Copy Generic TS L2 Header EtherType[15:8] to SRH Base Header.Hdr Ext Len. 
            Copy Generic TS L2 Header EtherType[7:0] to SRH Base Header.Routing Type. */
         __LOG_FW(("Copy Generic TS L2 Header EtherType[15:8] to SRH Base Header.Hdr Ext Len. Copy Generic TS L2 Header EtherType[7:0] to SRH Base Header.Routing Type."));
-        PPA_FW_SP_SHORT_WRITE(FALCON_PKT_REGs_lo + 133 + 4, geneircTsDataEthertype );
+        PPA_FW_SP_SHORT_WRITE(FALCON_PKT_REGs_lo + 133 + 4, geneircTsDataEthertype ); 
 
-        /* Copy Generic TS L2 Header VLAN-ID[7:0] to SRH Base Header.Segment Left */
+        /* Copy Generic TS L2 Header VLAN-ID[7:0] to SRH Base Header.Segment Left */ 
         __LOG_FW(("Copy Generic TS L2 Header VLAN-ID[7:0] to SRH Base Header.Segment Left"));
-        PPA_FW_SP_BYTE_WRITE(FALCON_PKT_REGs_lo + 135 + 4, geneircTsDataVid );
+        PPA_FW_SP_BYTE_WRITE(FALCON_PKT_REGs_lo + 135 + 4, geneircTsDataVid ); 
 
         /* Copy Generic TS< Data Bytes [35:32]> to SRH Bytes [3:0] */
         __LOG_FW(("Copy Generic TS< Data Bytes [35:32]> to SRH Bytes [3:0]"));
         ACCEL_CMD_TRIG(COPY_BYTES_THR5_SRv6_Source_Node_Second_Pass_2_segments_OFFSET24_PKT_with_vlan__Generic_TS_Data__data_35_32_MINUS24_LEN4_TO_PKT_with_vlan__SRv6_Header__last_entry_OFFSET, 0);
 
-       /*------------------------------------------------------------------------------------------------------------------------------------------------
-         - Update IPv6
+        /*------------------------------------------------------------------------------------------------------------------------------------------------
+          - Update IPv6 
           ------------------------------------------------------------------------------------------------------------------------------------------------*/
-       /* IPv6.Payload Length += 40 (16B in pass1 and 24B in pass2) */
+       /* IPv6.Payload Length += 40 (16B in pass1 and 24B in pass2) */           
         __LOG_FW(("IPv6.Payload Length += 40 (16B in pass1 and 24B in pass2)"));
         ACCEL_CMD_TRIG(ADD_BITS_THR5_SRv6_Source_Node_Second_Pass_2_segments_OFFSET24_CONST_0x28_LEN16_TO_PKT_with_vlan__IPv6_Header__payload_length_OFFSET, 0);
 
@@ -964,7 +964,7 @@ void PPA_FW(THR5_SRv6_Source_Node_Second_Pass_2_segments)() {
 
      /* Set offset register back to zero (default value) */
      __LOG_FW(("Set offset register back to zero (default value)"));
-     PPA_FW_SP_WRITE(PPN_IO_REG_PKT_HDR_OFST_ADDR, 0);
+     PPA_FW_SP_WRITE(PPN_IO_REG_PKT_HDR_OFST_ADDR, 0); 
 
 
 #if (CHECK_STACK)
@@ -983,13 +983,13 @@ void PPA_FW(THR5_SRv6_Source_Node_Second_Pass_2_segments)() {
  * funcname     THR6_Cc_Erspan_TypeII_TrgDevLcMirroring_Ipv4
  * inparam      None
  * return       None
- * description  ERSPAN over IPv4 tunnel for ePort-based CC (Centralized Chassis) while Egress port of the ERSPAN packet is (LC) Line Card port
- *              Encapsulated Remote Switch Port Analyzer (ERSPAN) allows packets to be mirrored to a remote analyzer over a tunnel encapsulation.
+ * description  ERSPAN over IPv4 tunnel for ePort-based CC (Centralized Chassis) while Egress port of the ERSPAN packet is (LC) Line Card port   
+ *              Encapsulated Remote Switch Port Analyzer (ERSPAN) allows packets to be mirrored to a remote analyzer over a tunnel encapsulation. 
  *              - ERSPAN Type II is used
  *              - ERSPAN is sent over an IPv4 GRE tunnel
- *              - Support handling of Ingress and Egress mirroring
+ *              - Support handling of Ingress and Egress mirroring   
  *              - In this case the Egress port of the ERSPAN packet is LC (Line Card) port
- *
+ * 
  *              cfg template:    Not in use (16B). It is used by fw to first hold L2 parameters and then eDSA tag.
  *              src & trg entries: Not is use (4B)
  *              hdr in:  | Extension space (64B) | MAC addresses(12B) | TO_ANALYZER eDSA tag(16B) | payload |
@@ -998,9 +998,9 @@ void PPA_FW(THR5_SRv6_Source_Node_Second_Pass_2_segments)() {
  *              Header Window size= 96 bytes + 64 bytes Header increment space
  *
  *              Firmware adds the tunnel and sets the values according to architect's definitions.
- *              Remove eDSA tag.
- *              Update IPv4 length and calculate IPv4 cs.
- *              Update HW that 42 bytes are added
+ *              Remove eDSA tag. 
+ *              Update IPv4 length and calculate IPv4 cs. 
+ *              Update HW that 42 bytes are added 
  *****************************************************************************************************************************************/
 __attribute__ ((aligned (16)))
 void PPA_FW(THR6_Cc_Erspan_TypeII_TrgDevLcMirroring_Ipv4)() {
@@ -1043,7 +1043,7 @@ void PPA_FW(THR6_Cc_Erspan_TypeII_TrgDevLcMirroring_Ipv4)() {
 
 
     /*-----------------------------------------------------------------------------------------------------------------------------------------------
-      - Calculate offset to the right Analyzer ePort template in shared memory according to shared memory index
+      - Calculate offset to the right Analyzer ePort template in shared memory according to shared memory index 
       ------------------------------------------------------------------------------------------------------------------------------------------------*/
      __LOG_FW(("Calculate offset to the right Analyzer ePort template in shared memory according to shared memory index"));
 
@@ -1109,7 +1109,7 @@ void PPA_FW(THR6_Cc_Erspan_TypeII_TrgDevLcMirroring_Ipv4)() {
     __LOG_PARAM_FW(PPA_FW_SP_READ(DRAM_CC_ERSPAN_GLOBAL_ADDR));
     __PRAGMA_NO_REORDER
 
-
+    
     /* Get vlan vid from template. Was copied earlier from shared memory */
     __LOG_FW(("Get vlan vid from template. Was copied earlier from shared memory"));
     vlanVid = thr6_cfg_ptr->cc_erspan_template.vlan_vid;
@@ -1126,46 +1126,46 @@ void PPA_FW(THR6_Cc_Erspan_TypeII_TrgDevLcMirroring_Ipv4)() {
     ACCEL_CMD_TRIG(COPY_BITS_THR6_Cc_Erspan_TypeII_TrgDevLcMirroring_Ipv4_CONST_0x2_LEN2_TO_PKT_extended_DSA_w0_ToAnalyzer__TagCommand_OFFSET, SET_REMAIN_FIELDS_TO_ZERO);
     __PRAGMA_NO_REORDER
 
-   /* Set SrcTrg_Tagged field to 0 if VID taken from the template is 0 otherwise set it to 1 */
+   /* Set SrcTrg_Tagged field to 0 if VID taken from the template is 0 otherwise set it to 1 */ 
    __LOG_FW(("Set SrcTrg_Tagged field to 0 if VID taken from the template is 0 otherwise set it to 1"));
    if(vlanVid != 0)
    {
-       /* Set SrcTrg_Tagged to '1' */
+       /* Set SrcTrg_Tagged to '1' */ 
        __LOG_FW(("Set SrcTrg_Tagged to '1'"));
        ACCEL_CMD_TRIG(COPY_BITS_THR6_Cc_Erspan_TypeII_TrgDevLcMirroring_Ipv4_CONST_0x1_LEN1_TO_PKT_extended_DSA_w0_ToAnalyzer__SrcTrg_Tagged_OFFSET, 0);
    }
 
-    /* Set extendedDSATagW0.Extend0 field to '1' plus clear other bits in 32 bits range to zero (clear extendedDSATagW0.Extend1 bit)*/
+    /* Set extendedDSATagW0.Extend0 field to '1' plus clear other bits in 32 bits range to zero (clear extendedDSATagW0.Extend1 bit)*/ 
     __LOG_FW(("Set extendedDSATagW0.Extend0 field to '1' plus clear other bits in 32 bits range to zero (clear extendedDSATagW0.Extend1 bit)"));
     ACCEL_CMD_TRIG(COPY_BITS_THR6_Cc_Erspan_TypeII_TrgDevLcMirroring_Ipv4_CONST_0x1_LEN1_TO_PKT_extended_DSA_w0_ToAnalyzer__Extend0_OFFSET, SET_REMAIN_FIELDS_TO_ZERO);
     __PRAGMA_NO_REORDER
 
-    /* Copy CFI field from Thread Template into packet extended TO_ANALYZER tag */
+    /* Copy CFI field from Thread Template into packet extended TO_ANALYZER tag */ 
     __LOG_FW(("Copy CFI field from Thread Template into packet extended TO_ANALYZER tag"));
     ACCEL_CMD_TRIG(COPY_BITS_THR6_Cc_Erspan_TypeII_TrgDevLcMirroring_Ipv4_CFG_cc_erspan_template__vlan_cfi_LEN1_TO_PKT_extended_DSA_w0_ToAnalyzer__CFI_OFFSET, 0);
 
-    /* Copy up field from Thread Template into packet extended TO_ANALYZER tag */
+    /* Copy up field from Thread Template into packet extended TO_ANALYZER tag */ 
     __LOG_FW(("Copy UP field from Thread Template into packet extended TO_ANALYZER tag"));
     ACCEL_CMD_TRIG(COPY_BITS_THR6_Cc_Erspan_TypeII_TrgDevLcMirroring_Ipv4_CFG_cc_erspan_template__vlan_up_LEN3_TO_PKT_extended_DSA_w0_ToAnalyzer__UP_OFFSET, 0);
 
-    /* Copy vid field from Thread Template into packet extended TO_ANALYZER tag */
+    /* Copy vid field from Thread Template into packet extended TO_ANALYZER tag */ 
     __LOG_FW(("Copy vid field from Thread Template into packet extended TO_ANALYZER tag"));
     ACCEL_CMD_TRIG(COPY_BITS_THR6_Cc_Erspan_TypeII_TrgDevLcMirroring_Ipv4_CFG_cc_erspan_template__vlan_vid_LEN12_TO_PKT_extended_DSA_w0_ToAnalyzer__VID_OFFSET, 0);
 
 
     /*-----------------------------------------------------------------------------------------------------------------------------------------------
-     - Set Tunnel MAC addresses
+     - Set Tunnel MAC addresses 
      ------------------------------------------------------------------------------------------------------------------------------------------------*/
      __LOG_FW(("Set Tunnel MAC addresses"));
 
-    /* Set Tunnel MAC addresses from Thread Template */
+    /* Set Tunnel MAC addresses from Thread Template */ 
     __LOG_FW(("Copy the Tunnel MAC addresses from Thread Template"));
     ACCEL_CMD_TRIG(COPY_BYTES_THR6_Cc_Erspan_TypeII_TrgDevLcMirroring_Ipv4_CFG_cc_erspan_template__mac_da_47_32_LEN12_TO_PKT_mac_header_outer__mac_da_47_32_OFFSET, 0);
     __PRAGMA_NO_REORDER
 
 
     /*-----------------------------------------------------------------------------------------------------------------------------------------------
-     - Since copy bits accelerators can not be used from packet to packet, copy 16 bytes of packet eDSA tag into thread's template
+     - Since copy bits accelerators can not be used from packet to packet, copy 16 bytes of packet eDSA tag into thread's template 
      - Remove packet eDSA tag (16B)
      ------------------------------------------------------------------------------------------------------------------------------------------------*/
     __LOG_FW(("Since copy bits accelerators can not be used from packet to packet, copy 16 bytes of packet eDSA tag into thread's template"));
@@ -1191,7 +1191,7 @@ void PPA_FW(THR6_Cc_Erspan_TypeII_TrgDevLcMirroring_Ipv4)() {
 
     __LOG_PARAM_FW(VoQThread);
 
-    if (VoQThread == 1)
+    if (VoQThread == 1) 
     {
         /* extendedDSATag.AnalyzerDev = eDSA TO_ANALYZER(Analyzer Trg Phy Port)[9:6] (take it from template byte 6 plus 6 bits) */
         __LOG_FW(("extendedDSATag.AnalyzerDev = eDSA TO_ANALYZER(Analyzer Trg Phy Port)[9:6] (take it from template byte 6 plus 6 bits)"));
@@ -1228,7 +1228,7 @@ void PPA_FW(THR6_Cc_Erspan_TypeII_TrgDevLcMirroring_Ipv4)() {
     /* extendedDSATag.DropOnSource,PacketIsLooped = eDSA TO_ANALYZER(DropOnSource,PacketIsLooped) (take it from template byte 4 plus 2 bits) */
     __LOG_FW(("extendedDSATag.DropOnSource,PacketIsLooped = eDSA TO_ANALYZER(DropOnSource,PacketIsLooped) (take it from template byte 4 plus 2 bits)"));
     ACCEL_CMD_TRIG(COPY_BITS_THR6_Cc_Erspan_TypeII_TrgDevLcMirroring_Ipv4_CFG_cc_erspan_template__mac_da_15_0_PLUS2_LEN2_TO_PKT_extended_DSA_w1_ToAnalyzer__DropOnSource_OFFSET, 0);
-
+    
 
     /*-----------------------------------------------------------------------------------------------------------------------------------------------
      - Set Ether Type to 0x0800 (IPv4)
@@ -1273,7 +1273,7 @@ void PPA_FW(THR6_Cc_Erspan_TypeII_TrgDevLcMirroring_Ipv4)() {
      ACCEL_CMD_TRIG(COPY_BITS_THR6_Cc_Erspan_TypeII_TrgDevLcMirroring_Ipv4_CFG_cc_erspan_template__mac_sa_31_16_PLUS7_LEN3_TO_PKT_ERSPAN_type_II_header__Index_PLUS3_OFFSET, SET_REMAIN_FIELDS_TO_ZERO);
      __PRAGMA_NO_REORDER
 
-     /* Check if need to overrun it since need to take it from shared memory */
+     /* Check if need to overrun it since need to take it from shared memory */ 
      if (getDeviceIdFromPkt == 0)
      {
          /* Extract from Global parameters (taken from shared memory) the Falcon Device ID */
@@ -1281,7 +1281,7 @@ void PPA_FW(THR6_Cc_Erspan_TypeII_TrgDevLcMirroring_Ipv4)() {
          deviceIdVal = (smemGlobalVal & 0xFFFF0000)>>2;
          __LOG_PARAM_FW(deviceIdVal);
 
-         PPA_FW_SP_WRITE( (FALCON_PKT_REGs_lo + 76) , deviceIdVal  );
+         PPA_FW_SP_WRITE( (FALCON_PKT_REGs_lo + 76) , deviceIdVal  );       
      }
      __PRAGMA_NO_REORDER
 
@@ -1289,7 +1289,7 @@ void PPA_FW(THR6_Cc_Erspan_TypeII_TrgDevLcMirroring_Ipv4)() {
     __LOG_FW(("Assign ERSPAN.Index"));
     if (descRxSniff == 1)
     {
-        /* RX mirroring */
+        /* RX mirroring */ 
         __LOG_FW(("RX mirroring"));
 
         if ( srcTrgDev <= 7 )
@@ -1304,7 +1304,7 @@ void PPA_FW(THR6_Cc_Erspan_TypeII_TrgDevLcMirroring_Ipv4)() {
             __LOG_FW(("Set Index Bits [13:0] (ePort). Take it from packet eDSA.src_ePort (take it from template byte 8 plus 15 bits)"));
             ACCEL_CMD_TRIG(COPY_BITS_THR6_Cc_Erspan_TypeII_TrgDevLcMirroring_Ipv4_CFG_cc_erspan_template__mac_sa_31_16_PLUS15_LEN14_TO_PKT_ERSPAN_type_II_header__Index_PLUS6_OFFSET, 0);
         }
-        else
+        else 
         {   /* RX Mirroring (type 0) in case packet was mirrored from LC (8<= SrcDev <= 15) */
             __LOG_FW(("RX Mirroring (type 0) in case packet was mirrored from LC (8<= SrcDev <= 15)"));
 
@@ -1328,12 +1328,12 @@ void PPA_FW(THR6_Cc_Erspan_TypeII_TrgDevLcMirroring_Ipv4)() {
 
         /* Write Ingress session ID to packet ERSPAN header.sessionID. Write it as 4B while other bits than Ingress sessionID are cleared to zero */
         __LOG_FW(("Write Ingress session ID to packet ERSPAN header.sessionID. Write it as 4B while other bits than Ingress sessionID are cleared to zero"));
-        PPA_FW_SP_WRITE( (FALCON_PKT_REGs_lo + 72) , (sessionId >>10) & 0x3FF  );
+        PPA_FW_SP_WRITE( (FALCON_PKT_REGs_lo + 72) , (sessionId >>10) & 0x3FF  ); 
         __LOG_PARAM_FW((sessionId >>10) & 0x3FF);
     }
     else
     {
-        /* TX mirroring */
+        /* TX mirroring */ 
         __LOG_FW(("TX mirroring"));
 
         if (srcTrgDev <= 15)
@@ -1357,10 +1357,10 @@ void PPA_FW(THR6_Cc_Erspan_TypeII_TrgDevLcMirroring_Ipv4)() {
             __LOG_FW(("Set Index Bits [4:0] (Trg Phy Port). Take it from packet eDSA.SrcTrg_Phy_Port_4_0 (template byte 0 bits offset 5)"));
             ACCEL_CMD_TRIG(COPY_BITS_THR6_Cc_Erspan_TypeII_TrgDevLcMirroring_Ipv4_CFG_cc_erspan_template__mac_da_47_32_PLUS8_LEN5_TO_PKT_ERSPAN_type_II_header__Index_PLUS15_OFFSET, 0);
         }
-        else
+        else 
         {   /* TX Mirroring (type 2) in case packet was mirrored from LC with VoQ (TrgDev >= 16) */
             __LOG_FW(("TX Mirroring (type 2) in case packet was mirrored from LC with VoQ (TrgDev >= 16)"));
-
+        
             /* Set Index Bits [19:18] (type) to '2' */
             __LOG_FW(("Set Index Bits [19:18] (type) to '2'"));
             ACCEL_CMD_TRIG(COPY_BITS_THR6_Cc_Erspan_TypeII_TrgDevLcMirroring_Ipv4_CONST_0x2_LEN2_TO_PKT_ERSPAN_type_II_header__Index_OFFSET, 0);
@@ -1400,8 +1400,8 @@ void PPA_FW(THR6_Cc_Erspan_TypeII_TrgDevLcMirroring_Ipv4)() {
 
     /*-----------------------------------------------------------------------------------------------------------------------------------------------
      - Update Desc<Egress Byte Count>
-     - Update packet IPv4 length field
-     - Calculate IPv4 checksum
+     - Update packet IPv4 length field                         
+     - Calculate IPv4 checksum 
      ------------------------------------------------------------------------------------------------------------------------------------------------*/
     __LOG_FW(("Update Desc<Egress Byte Count> + update IPv4 length field + calculate IPv4 checksum"));
 
@@ -1464,13 +1464,13 @@ void PPA_FW(THR6_Cc_Erspan_TypeII_TrgDevLcMirroring_Ipv4)() {
  * funcname     THR7_Cc_Erspan_TypeII_TrgDevLcMirroring_Ipv6
  * inparam      None
  * return       None
- * description  ERSPAN over IPv6 tunnel for ePort-based CC (Centralized Chassis) while Egress port of the ERSPAN packet is (LC) Line Card port
- *              Encapsulated Remote Switch Port Analyzer (ERSPAN) allows packets to be mirrored to a remote analyzer over a tunnel encapsulation.
+ * description  ERSPAN over IPv6 tunnel for ePort-based CC (Centralized Chassis) while Egress port of the ERSPAN packet is (LC) Line Card port   
+ *              Encapsulated Remote Switch Port Analyzer (ERSPAN) allows packets to be mirrored to a remote analyzer over a tunnel encapsulation. 
  *              - ERSPAN Type II is used
  *              - ERSPAN is sent over an IPv6 GRE tunnel
- *              - Support handling of Ingress and Egress mirroring
+ *              - Support handling of Ingress and Egress mirroring   
  *              - In this case the Egress port of the ERSPAN packet is LC (Line Card) port
- *
+ * 
  *              cfg template:    Not in use (16B). It is used by fw to first hold L2 parameters and then eDSA tag.
  *              src & trg entries: Not is use (4B)
  *              hdr in:  | Extension space (64B) | MAC addresses(12B) | TO_ANALYZER eDSA tag(16B) | payload |
@@ -1479,9 +1479,9 @@ void PPA_FW(THR6_Cc_Erspan_TypeII_TrgDevLcMirroring_Ipv4)() {
  *              Header Window size= 96 bytes + 64 bytes Header increment space
  *
  *              Firmware adds the tunnel and sets the values according to architect's definitions.
- *              Remove eDSA tag.
- *              Update IPv6 length.
- *              Update HW that 62 bytes are added
+ *              Remove eDSA tag. 
+ *              Update IPv6 length. 
+ *              Update HW that 62 bytes are added 
  *****************************************************************************************************************************************/
 __attribute__ ((aligned (16)))
 void PPA_FW(THR7_Cc_Erspan_TypeII_TrgDevLcMirroring_Ipv6)() {
@@ -1523,7 +1523,7 @@ void PPA_FW(THR7_Cc_Erspan_TypeII_TrgDevLcMirroring_Ipv6)() {
 
 
     /*-----------------------------------------------------------------------------------------------------------------------------------------------
-      - Calculate offset to the right Analyzer ePort template in shared memory according to shared memory index
+      - Calculate offset to the right Analyzer ePort template in shared memory according to shared memory index 
       ------------------------------------------------------------------------------------------------------------------------------------------------*/
      __LOG_FW(("Calculate offset to the right Analyzer ePort template in shared memory according to shared memory index"));
 
@@ -1598,7 +1598,7 @@ void PPA_FW(THR7_Cc_Erspan_TypeII_TrgDevLcMirroring_Ipv6)() {
     __LOG_PARAM_FW(PPA_FW_SP_READ(DRAM_CC_ERSPAN_GLOBAL_ADDR));
     __PRAGMA_NO_REORDER
 
-
+    
     /* Get vlan vid from template. Was copied earlier from shared memory */
     __LOG_FW(("Get vlan vid from template. Was copied earlier from shared memory"));
     vlanVid = thr7_cfg_ptr->cc_erspan_template.vlan_vid;
@@ -1615,46 +1615,46 @@ void PPA_FW(THR7_Cc_Erspan_TypeII_TrgDevLcMirroring_Ipv6)() {
     ACCEL_CMD_TRIG(COPY_BITS_THR7_Cc_Erspan_TypeII_TrgDevLcMirroring_Ipv6_CONST_0x2_LEN2_TO_PKT_extended_DSA_w0_ToAnalyzer__TagCommand_OFFSET, SET_REMAIN_FIELDS_TO_ZERO);
     __PRAGMA_NO_REORDER
 
-   /* Set SrcTrg_Tagged field to 0 if VID taken from the template is 0 otherwise set it to 1 */
+   /* Set SrcTrg_Tagged field to 0 if VID taken from the template is 0 otherwise set it to 1 */ 
    __LOG_FW(("Set SrcTrg_Tagged field to 0 if VID taken from the template is 0 otherwise set it to 1"));
    if(vlanVid != 0)
    {
-       /* Set SrcTrg_Tagged to '1' */
+       /* Set SrcTrg_Tagged to '1' */ 
        __LOG_FW(("Set SrcTrg_Tagged to '1'"));
        ACCEL_CMD_TRIG(COPY_BITS_THR7_Cc_Erspan_TypeII_TrgDevLcMirroring_Ipv6_CONST_0x1_LEN1_TO_PKT_extended_DSA_w0_ToAnalyzer__SrcTrg_Tagged_OFFSET, 0);
    }
 
-    /* Set extendedDSATagW0.Extend0 field to '1' plus clear other bits in 32 bits range to zero (clear extendedDSATagW0.Extend1 bit)*/
+    /* Set extendedDSATagW0.Extend0 field to '1' plus clear other bits in 32 bits range to zero (clear extendedDSATagW0.Extend1 bit)*/ 
     __LOG_FW(("Set extendedDSATagW0.Extend0 field to '1' plus clear other bits in 32 bits range to zero (clear extendedDSATagW0.Extend1 bit)"));
     ACCEL_CMD_TRIG(COPY_BITS_THR7_Cc_Erspan_TypeII_TrgDevLcMirroring_Ipv6_CONST_0x1_LEN1_TO_PKT_extended_DSA_w0_ToAnalyzer__Extend0_OFFSET, SET_REMAIN_FIELDS_TO_ZERO);
     __PRAGMA_NO_REORDER
 
-    /* Copy CFI field from Thread Template into packet extended TO_ANALYZER tag */
+    /* Copy CFI field from Thread Template into packet extended TO_ANALYZER tag */ 
     __LOG_FW(("Copy CFI field from Thread Template into packet extended TO_ANALYZER tag"));
     ACCEL_CMD_TRIG(COPY_BITS_THR7_Cc_Erspan_TypeII_TrgDevLcMirroring_Ipv6_CFG_cc_erspan_template__vlan_cfi_LEN1_TO_PKT_extended_DSA_w0_ToAnalyzer__CFI_OFFSET, 0);
 
-    /* Copy up field from Thread Template into packet extended TO_ANALYZER tag */
+    /* Copy up field from Thread Template into packet extended TO_ANALYZER tag */ 
     __LOG_FW(("Copy UP field from Thread Template into packet extended TO_ANALYZER tag"));
     ACCEL_CMD_TRIG(COPY_BITS_THR7_Cc_Erspan_TypeII_TrgDevLcMirroring_Ipv6_CFG_cc_erspan_template__vlan_up_LEN3_TO_PKT_extended_DSA_w0_ToAnalyzer__UP_OFFSET, 0);
 
-    /* Copy vid field from Thread Template into packet extended TO_ANALYZER tag */
+    /* Copy vid field from Thread Template into packet extended TO_ANALYZER tag */ 
     __LOG_FW(("Copy vid field from Thread Template into packet extended TO_ANALYZER tag"));
     ACCEL_CMD_TRIG(COPY_BITS_THR7_Cc_Erspan_TypeII_TrgDevLcMirroring_Ipv6_CFG_cc_erspan_template__vlan_vid_LEN12_TO_PKT_extended_DSA_w0_ToAnalyzer__VID_OFFSET, 0);
 
 
     /*-----------------------------------------------------------------------------------------------------------------------------------------------
-     - Set Tunnel MAC addresses
+     - Set Tunnel MAC addresses 
      ------------------------------------------------------------------------------------------------------------------------------------------------*/
      __LOG_FW(("Set Tunnel MAC addresses"));
 
-    /* Set Tunnel MAC addresses from Thread Template */
+    /* Set Tunnel MAC addresses from Thread Template */ 
     __LOG_FW(("Copy the Tunnel MAC addresses from Thread Template"));
     ACCEL_CMD_TRIG(COPY_BYTES_THR7_Cc_Erspan_TypeII_TrgDevLcMirroring_Ipv6_CFG_cc_erspan_template__mac_da_47_32_LEN12_TO_PKT_mac_header_outer__mac_da_47_32_OFFSET, 0);
     __PRAGMA_NO_REORDER
 
 
     /*-----------------------------------------------------------------------------------------------------------------------------------------------
-     - Since copy bits accelerators can not be used from packet to packet, copy 16 bytes of packet eDSA tag into thread's template
+     - Since copy bits accelerators can not be used from packet to packet, copy 16 bytes of packet eDSA tag into thread's template 
      - Remove packet eDSA tag (16B)
      ------------------------------------------------------------------------------------------------------------------------------------------------*/
     __LOG_FW(("Since copy bits accelerators can not be used from packet to packet, copy 16 bytes of packet eDSA tag into thread's template"));
@@ -1680,7 +1680,7 @@ void PPA_FW(THR7_Cc_Erspan_TypeII_TrgDevLcMirroring_Ipv6)() {
     VoQThread = (smemGlobalVal >> 8) & 0xFF;
     __LOG_PARAM_FW(VoQThread);
 
-    if (VoQThread == 1)
+    if (VoQThread == 1) 
     {
         /* extendedDSATag.AnalyzerDev = eDSA TO_ANALYZER(Analyzer Trg Phy Port)[9:6] (take it from template byte 6 plus 6 bits) */
         __LOG_FW(("extendedDSATag.AnalyzerDev = eDSA TO_ANALYZER(Analyzer Trg Phy Port)[9:6] (take it from template byte 6 plus 6 bits)"));
@@ -1717,7 +1717,7 @@ void PPA_FW(THR7_Cc_Erspan_TypeII_TrgDevLcMirroring_Ipv6)() {
     /* extendedDSATag.DropOnSource,PacketIsLooped = eDSA TO_ANALYZER(DropOnSource,PacketIsLooped) (take it from template byte 4 plus 2 bits) */
     __LOG_FW(("extendedDSATag.DropOnSource,PacketIsLooped = eDSA TO_ANALYZER(DropOnSource,PacketIsLooped) (take it from template byte 4 plus 2 bits)"));
     ACCEL_CMD_TRIG(COPY_BITS_THR7_Cc_Erspan_TypeII_TrgDevLcMirroring_Ipv6_CFG_cc_erspan_template__mac_da_15_0_PLUS2_LEN2_TO_PKT_extended_DSA_w1_ToAnalyzer__DropOnSource_OFFSET, 0);
-
+    
 
     /*-----------------------------------------------------------------------------------------------------------------------------------------------
      - Set Ether Type to 0x86dd (IPv6)
@@ -1763,7 +1763,7 @@ void PPA_FW(THR7_Cc_Erspan_TypeII_TrgDevLcMirroring_Ipv6)() {
      ACCEL_CMD_TRIG(COPY_BITS_THR7_Cc_Erspan_TypeII_TrgDevLcMirroring_Ipv6_CFG_cc_erspan_template__mac_sa_31_16_PLUS7_LEN3_TO_PKT_ERSPAN_type_II_header__Index_PLUS3_OFFSET, SET_REMAIN_FIELDS_TO_ZERO);
      __PRAGMA_NO_REORDER
 
-     /* Check if need to overrun it since need to take it from shared memory */
+     /* Check if need to overrun it since need to take it from shared memory */ 
      if (getDeviceIdFromPkt == 0)
      {
          /* Extract from Global parameters (taken from shared memory) the Falcon Device ID */
@@ -1771,7 +1771,7 @@ void PPA_FW(THR7_Cc_Erspan_TypeII_TrgDevLcMirroring_Ipv6)() {
          deviceIdVal = (smemGlobalVal & 0xFFFF0000)>>2;
          __LOG_PARAM_FW(deviceIdVal);
 
-         PPA_FW_SP_WRITE( (FALCON_PKT_REGs_lo + 76) , deviceIdVal  );
+         PPA_FW_SP_WRITE( (FALCON_PKT_REGs_lo + 76) , deviceIdVal  );       
      }
      __PRAGMA_NO_REORDER
 
@@ -1779,7 +1779,7 @@ void PPA_FW(THR7_Cc_Erspan_TypeII_TrgDevLcMirroring_Ipv6)() {
     __LOG_FW(("Assign ERSPAN.Index"));
     if (descRxSniff == 1)
     {
-        /* RX mirroring */
+        /* RX mirroring */ 
         __LOG_FW(("RX mirroring"));
 
         if ( srcTrgDev <= 7 )
@@ -1794,7 +1794,7 @@ void PPA_FW(THR7_Cc_Erspan_TypeII_TrgDevLcMirroring_Ipv6)() {
             __LOG_FW(("Set Index Bits [13:0] (ePort). Take it from packet eDSA.src_ePort (take it from template byte 8 plus 15 bits)"));
             ACCEL_CMD_TRIG(COPY_BITS_THR7_Cc_Erspan_TypeII_TrgDevLcMirroring_Ipv6_CFG_cc_erspan_template__mac_sa_31_16_PLUS15_LEN14_TO_PKT_ERSPAN_type_II_header__Index_PLUS6_OFFSET, 0);
         }
-        else
+        else 
         {   /* RX Mirroring (type 0) in case packet was mirrored from LC (8<= SrcDev <= 15) */
             __LOG_FW(("RX Mirroring (type 0) in case packet was mirrored from LC (8<= SrcDev <= 15)"));
 
@@ -1818,12 +1818,12 @@ void PPA_FW(THR7_Cc_Erspan_TypeII_TrgDevLcMirroring_Ipv6)() {
 
         /* Write Ingress session ID to packet ERSPAN header.sessionID. Write it as 4B while other bits than Ingress sessionID are cleared to zero */
         __LOG_FW(("Write Ingress session ID to packet ERSPAN header.sessionID. Write it as 4B while other bits than Ingress sessionID are cleared to zero"));
-        PPA_FW_SP_WRITE( (FALCON_PKT_REGs_lo + 72) , (sessionId >>10) & 0x3FF  );
+        PPA_FW_SP_WRITE( (FALCON_PKT_REGs_lo + 72) , (sessionId >>10) & 0x3FF  ); 
         __LOG_PARAM_FW((sessionId >>10) & 0x3FF);
     }
     else
     {
-        /* TX mirroring */
+        /* TX mirroring */ 
         __LOG_FW(("TX mirroring"));
 
         if (srcTrgDev <= 15)
@@ -1847,10 +1847,10 @@ void PPA_FW(THR7_Cc_Erspan_TypeII_TrgDevLcMirroring_Ipv6)() {
             __LOG_FW(("Set Index Bits [4:0] (Trg Phy Port). Take it from packet eDSA.SrcTrg_Phy_Port_4_0 (template byte 0 bits offset 5)"));
             ACCEL_CMD_TRIG(COPY_BITS_THR7_Cc_Erspan_TypeII_TrgDevLcMirroring_Ipv6_CFG_cc_erspan_template__mac_da_47_32_PLUS8_LEN5_TO_PKT_ERSPAN_type_II_header__Index_PLUS15_OFFSET, 0);
         }
-        else
+        else 
         {   /* TX Mirroring (type 2) in case packet was mirrored from LC with VoQ (TrgDev >= 16) */
             __LOG_FW(("TX Mirroring (type 2) in case packet was mirrored from LC with VoQ (TrgDev >= 16)"));
-
+        
             /* Set Index Bits [19:18] (type) to '2' */
             __LOG_FW(("Set Index Bits [19:18] (type) to '2'"));
             ACCEL_CMD_TRIG(COPY_BITS_THR7_Cc_Erspan_TypeII_TrgDevLcMirroring_Ipv6_CONST_0x2_LEN2_TO_PKT_ERSPAN_type_II_header__Index_OFFSET, 0);
@@ -1890,7 +1890,7 @@ void PPA_FW(THR7_Cc_Erspan_TypeII_TrgDevLcMirroring_Ipv6)() {
 
     /*-----------------------------------------------------------------------------------------------------------------------------------------------
      - Update Desc<Egress Byte Count>
-     - Update packet IPv6 length field
+     - Update packet IPv6 length field                         
      ------------------------------------------------------------------------------------------------------------------------------------------------*/
     __LOG_FW(("Update Desc<Egress Byte Count> + update IPv6 length field"));
 
@@ -1928,13 +1928,13 @@ void PPA_FW(THR7_Cc_Erspan_TypeII_TrgDevLcMirroring_Ipv6)() {
  * funcname     THR8_Cc_Erspan_TypeII_TrgDevDirectMirroring_Ipv4
  * inparam      None
  * return       None
- * description  ERSPAN over IPv4 tunnel for ePort-based CC (Centralized Chassis) while Egress port of the ERSPAN packet is Falcon direct port
- *              Encapsulated Remote Switch Port Analyzer (ERSPAN) allows packets to be mirrored to a remote analyzer over a tunnel encapsulation.
+ * description  ERSPAN over IPv4 tunnel for ePort-based CC (Centralized Chassis) while Egress port of the ERSPAN packet is Falcon direct port   
+ *              Encapsulated Remote Switch Port Analyzer (ERSPAN) allows packets to be mirrored to a remote analyzer over a tunnel encapsulation. 
  *              - ERSPAN Type II is used
  *              - ERSPAN is sent over an IPv4 GRE tunnel
- *              - Support handling of Ingress and Egress mirroring
+ *              - Support handling of Ingress and Egress mirroring   
  *              - In this case the Egress port of the ERSPAN packet is Falcon direct port
- *
+ * 
  *              cfg template:    Not in use (16B). It is used by fw to first hold L2 parameters and then eDSA tag.
  *              src & trg entries: Not is use (4B)
  *              hdr in:  | Extension space (64B) | MAC addresses(12B) | TO_ANALYZER eDSA tag(16B) | payload |
@@ -1945,9 +1945,9 @@ void PPA_FW(THR7_Cc_Erspan_TypeII_TrgDevLcMirroring_Ipv6)() {
  *              Header Window size= 96 bytes + 64 bytes Header increment space
  *
  *              Firmware adds the tunnel and sets the values according to architect's definitions.
- *              Remove eDSA tag.
- *              Update IPv4 length and calculate IPv4 cs.
- *              Update HW that 34B(no vlan) or 38B(with vlan) are added
+ *              Remove eDSA tag. 
+ *              Update IPv4 length and calculate IPv4 cs. 
+ *              Update HW that 34B(no vlan) or 38B(with vlan) are added 
  *****************************************************************************************************************************************/
 __attribute__ ((aligned (16)))
 void PPA_FW(THR8_Cc_Erspan_TypeII_TrgDevDirectMirroring_Ipv4)() {
@@ -1988,7 +1988,7 @@ void PPA_FW(THR8_Cc_Erspan_TypeII_TrgDevDirectMirroring_Ipv4)() {
 
 
     /*-----------------------------------------------------------------------------------------------------------------------------------------------
-      - Calculate offset to the right Analyzer ePort template in shared memory according to shared memory index
+      - Calculate offset to the right Analyzer ePort template in shared memory according to shared memory index 
       ------------------------------------------------------------------------------------------------------------------------------------------------*/
      __LOG_FW(("Calculate offset to the right Analyzer ePort template in shared memory according to shared memory index"));
 
@@ -2006,7 +2006,7 @@ void PPA_FW(THR8_Cc_Erspan_TypeII_TrgDevDirectMirroring_Ipv4)() {
 
     /*-----------------------------------------------------------------------------------------------------------------------------------------------
       - Copy 16B of L2 parameters from shared memory into CFG template: | MAC DA SA | TPID | UP | CFI | VID |
-      - Since L2 location in packet output is not 32 bits align it is copied first by core to template and then by accelerator to packet output
+      - Since L2 location in packet output is not 32 bits align it is copied first by core to template and then by accelerator to packet output   
       ------------------------------------------------------------------------------------------------------------------------------------------------*/
      __LOG_FW(("Copy 16B of L2 parameters from shared memory into CFG template: | MAC DA SA | TPID | UP | CFI | VID |"));
 
@@ -2072,8 +2072,8 @@ void PPA_FW(THR8_Cc_Erspan_TypeII_TrgDevDirectMirroring_Ipv4)() {
 
     /*-----------------------------------------------------------------------------------------------------------------------------------------------
      - Update Desc<Egress Byte Count>
-     - Update packet IPv4 length field
-     - Set MAC DA SA and vlan tag if exist
+     - Update packet IPv4 length field     
+     - Set MAC DA SA and vlan tag if exist                    
      ------------------------------------------------------------------------------------------------------------------------------------------------*/
     __LOG_FW(("Update Desc<Egress Byte Count> + update IPv4 length field"));
 
@@ -2102,7 +2102,7 @@ void PPA_FW(THR8_Cc_Erspan_TypeII_TrgDevDirectMirroring_Ipv4)() {
         __LOG_FW(("Indicates HW about the new starting point of the packet header (+34 bytes)."));
         thr8_desc_ptr->ppa_internal_desc.fw_bc_modification = 34;
 
-        /* Set tunnel MAC addresses from template (copied earlier from shared memory to template) */
+        /* Set tunnel MAC addresses from template (copied earlier from shared memory to template) */ 
         __LOG_FW(("Set tunnel MAC addresses + vlan tag from template (copied earlier from shared memory to template)"));
         ACCEL_CMD_TRIG(COPY_BYTES_THR8_Cc_Erspan_TypeII_TrgDevDirectMirroring_Ipv4_CFG_cc_erspan_template__mac_da_47_32_LEN12_TO_PKT_no_vlan__mac_header_outer__mac_da_47_32_OFFSET, 0);
     }
@@ -2118,14 +2118,14 @@ void PPA_FW(THR8_Cc_Erspan_TypeII_TrgDevDirectMirroring_Ipv4)() {
         __LOG_FW(("Indicates HW about the new starting point of the packet header (+38 bytes)."));
         thr8_desc_ptr->ppa_internal_desc.fw_bc_modification = 38;
 
-        /* Set tunnel MAC addresses + vlan tag from template (copied earlier from shared memory to template) */
+        /* Set tunnel MAC addresses + vlan tag from template (copied earlier from shared memory to template) */ 
         __LOG_FW(("Set tunnel MAC addresses + vlan tag from template (copied earlier from shared memory to template)"));
         ACCEL_CMD_TRIG(COPY_BYTES_THR8_Cc_Erspan_TypeII_TrgDevDirectMirroring_Ipv4_CFG_cc_erspan_template__mac_da_47_32_LEN16_TO_PKT_with_vlan__mac_header_outer__mac_da_47_32_OFFSET, 0);
     }
 
 
     /*-----------------------------------------------------------------------------------------------------------------------------------------------
-     - Since copy bits accelerators can not be used from packet to packet, copy 16 bytes of packet eDSA tag into thread's template
+     - Since copy bits accelerators can not be used from packet to packet, copy 16 bytes of packet eDSA tag into thread's template 
      - Remove packet eDSA tag (16B)
      ------------------------------------------------------------------------------------------------------------------------------------------------*/
     __LOG_FW(("Since copy bits accelerators can not be used from packet to packet, copy 16 bytes of packet eDSA tag into thread's template"));
@@ -2174,7 +2174,7 @@ void PPA_FW(THR8_Cc_Erspan_TypeII_TrgDevDirectMirroring_Ipv4)() {
      ACCEL_CMD_TRIG(COPY_BITS_THR8_Cc_Erspan_TypeII_TrgDevDirectMirroring_Ipv4_CFG_cc_erspan_template__mac_sa_31_16_PLUS7_LEN3_TO_PKT_ERSPAN_type_II_header__Index_PLUS3_OFFSET, SET_REMAIN_FIELDS_TO_ZERO);
      __PRAGMA_NO_REORDER
 
-     /* Check if need to overrun it since need to take it from shared memory */
+     /* Check if need to overrun it since need to take it from shared memory */ 
      if (getDeviceIdFromPkt == 0)
      {
          /* Extract from Global parameters (taken from shared memory) the Falcon Device ID */
@@ -2182,7 +2182,7 @@ void PPA_FW(THR8_Cc_Erspan_TypeII_TrgDevDirectMirroring_Ipv4)() {
          deviceIdVal = (smemGlobalVal & 0xFFFF0000)>>2;
          __LOG_PARAM_FW(deviceIdVal);
 
-         PPA_FW_SP_WRITE( (FALCON_PKT_REGs_lo + 76) , deviceIdVal  );
+         PPA_FW_SP_WRITE( (FALCON_PKT_REGs_lo + 76) , deviceIdVal  );       
      }
      __PRAGMA_NO_REORDER
 
@@ -2190,7 +2190,7 @@ void PPA_FW(THR8_Cc_Erspan_TypeII_TrgDevDirectMirroring_Ipv4)() {
     __LOG_FW(("Assign ERSPAN.Index"));
     if (descRxSniff == 1)
     {
-        /* RX mirroring */
+        /* RX mirroring */ 
         __LOG_FW(("RX mirroring"));
 
         if ( srcTrgDev <= 7 )
@@ -2205,7 +2205,7 @@ void PPA_FW(THR8_Cc_Erspan_TypeII_TrgDevDirectMirroring_Ipv4)() {
             __LOG_FW(("Set Index Bits [13:0] (ePort). Take it from packet eDSA.src_ePort (take it from template byte 8 plus 15 bits)"));
             ACCEL_CMD_TRIG(COPY_BITS_THR8_Cc_Erspan_TypeII_TrgDevDirectMirroring_Ipv4_CFG_cc_erspan_template__mac_sa_31_16_PLUS15_LEN14_TO_PKT_ERSPAN_type_II_header__Index_PLUS6_OFFSET, 0);
         }
-        else
+        else 
         {   /* RX Mirroring (type 0) in case packet was mirrored from LC (8<= SrcDev <= 15) */
             __LOG_FW(("RX Mirroring (type 0) in case packet was mirrored from LC (8<= SrcDev <= 15)"));
 
@@ -2229,12 +2229,12 @@ void PPA_FW(THR8_Cc_Erspan_TypeII_TrgDevDirectMirroring_Ipv4)() {
 
         /* Write Ingress session ID to packet ERSPAN header.sessionID. Write it as 4B while other bits than Ingress sessionID are cleared to zero */
         __LOG_FW(("Write Ingress session ID to packet ERSPAN header.sessionID. Write it as 4B while other bits than Ingress sessionID are cleared to zero"));
-        PPA_FW_SP_WRITE( (FALCON_PKT_REGs_lo + 72) , (sessionId >>10) & 0x3FF  );
+        PPA_FW_SP_WRITE( (FALCON_PKT_REGs_lo + 72) , (sessionId >>10) & 0x3FF  ); 
         __LOG_PARAM_FW((sessionId >>10) & 0x3FF);
     }
     else
     {
-        /* TX mirroring */
+        /* TX mirroring */ 
         __LOG_FW(("TX mirroring"));
 
         if (srcTrgDev <= 15)
@@ -2258,10 +2258,10 @@ void PPA_FW(THR8_Cc_Erspan_TypeII_TrgDevDirectMirroring_Ipv4)() {
             __LOG_FW(("Set Index Bits [4:0] (Trg Phy Port). Take it from packet eDSA.SrcTrg_Phy_Port_4_0 (template byte 0 bits offset 5)"));
             ACCEL_CMD_TRIG(COPY_BITS_THR8_Cc_Erspan_TypeII_TrgDevDirectMirroring_Ipv4_CFG_cc_erspan_template__mac_da_47_32_PLUS8_LEN5_TO_PKT_ERSPAN_type_II_header__Index_PLUS15_OFFSET, 0);
         }
-        else
+        else 
         {   /* TX Mirroring (type 2) in case packet was mirrored from LC with VoQ (TrgDev >= 16) */
             __LOG_FW(("TX Mirroring (type 2) in case packet was mirrored from LC with VoQ (TrgDev >= 16)"));
-
+        
             /* Set Index Bits [19:18] (type) to '2' */
             __LOG_FW(("Set Index Bits [19:18] (type) to '2'"));
             ACCEL_CMD_TRIG(COPY_BITS_THR8_Cc_Erspan_TypeII_TrgDevDirectMirroring_Ipv4_CONST_0x2_LEN2_TO_PKT_ERSPAN_type_II_header__Index_OFFSET, 0);
@@ -2342,13 +2342,13 @@ void PPA_FW(THR8_Cc_Erspan_TypeII_TrgDevDirectMirroring_Ipv4)() {
  * funcname     THR9_Cc_Erspan_TypeII_TrgDevDirectMirroring_Ipv6
  * inparam      None
  * return       None
- * description  ERSPAN over IPv6 tunnel for ePort-based CC (Centralized Chassis) while Egress port of the ERSPAN packet is Falcon direct port
- *              Encapsulated Remote Switch Port Analyzer (ERSPAN) allows packets to be mirrored to a remote analyzer over a tunnel encapsulation.
+ * description  ERSPAN over IPv6 tunnel for ePort-based CC (Centralized Chassis) while Egress port of the ERSPAN packet is Falcon direct port   
+ *              Encapsulated Remote Switch Port Analyzer (ERSPAN) allows packets to be mirrored to a remote analyzer over a tunnel encapsulation. 
  *              - ERSPAN Type II is used
  *              - ERSPAN is sent over an IPv6 GRE tunnel
- *              - Support handling of Ingress and Egress mirroring
+ *              - Support handling of Ingress and Egress mirroring   
  *              - In this case the Egress port of the ERSPAN packet is Falcon direct port
- *
+ * 
  *              cfg template:    Not in use (16B). It is used by fw to first hold L2 parameters and then eDSA tag.
  *              src & trg entries: Not is use (4B)
  *              hdr in:  | Extension space (64B) | MAC addresses(12B) | TO_ANALYZER eDSA tag(16B) | payload |
@@ -2359,9 +2359,9 @@ void PPA_FW(THR8_Cc_Erspan_TypeII_TrgDevDirectMirroring_Ipv4)() {
  *              Header Window size= 96 bytes + 64 bytes Header increment space
  *
  *              Firmware adds the tunnel and sets the values according to architect's definitions.
- *              Remove eDSA tag.
- *              Update IPv6 length
- *              Update HW that 54B(no vlan) or 58B(with vlan) are added
+ *              Remove eDSA tag. 
+ *              Update IPv6 length 
+ *              Update HW that 54B(no vlan) or 58B(with vlan) are added 
  *****************************************************************************************************************************************/
 __attribute__ ((aligned (16)))
 void PPA_FW(THR9_Cc_Erspan_TypeII_TrgDevDirectMirroring_Ipv6)() {
@@ -2402,7 +2402,7 @@ void PPA_FW(THR9_Cc_Erspan_TypeII_TrgDevDirectMirroring_Ipv6)() {
 
 
     /*-----------------------------------------------------------------------------------------------------------------------------------------------
-      - Calculate offset to the right Analyzer ePort template in shared memory according to shared memory index
+      - Calculate offset to the right Analyzer ePort template in shared memory according to shared memory index 
       ------------------------------------------------------------------------------------------------------------------------------------------------*/
      __LOG_FW(("Calculate offset to the right Analyzer ePort template in shared memory according to shared memory index"));
 
@@ -2420,7 +2420,7 @@ void PPA_FW(THR9_Cc_Erspan_TypeII_TrgDevDirectMirroring_Ipv6)() {
 
     /*-----------------------------------------------------------------------------------------------------------------------------------------------
       - Copy 16B of L2 parameters from shared memory into CFG template: | MAC DA SA | TPID | UP | CFI | VID |
-      - Since L2 location in packet output is not 32 bits align it is copied first by core to template and then by accelerator to packet output
+      - Since L2 location in packet output is not 32 bits align it is copied first by core to template and then by accelerator to packet output   
       ------------------------------------------------------------------------------------------------------------------------------------------------*/
      __LOG_FW(("Copy 16B of L2 parameters from shared memory into CFG template: | MAC DA SA | TPID | UP | CFI | VID |"));
 
@@ -2497,8 +2497,8 @@ void PPA_FW(THR9_Cc_Erspan_TypeII_TrgDevDirectMirroring_Ipv6)() {
 
     /*-----------------------------------------------------------------------------------------------------------------------------------------------
      - Update Desc<Egress Byte Count>
-     - Update packet IPv6 length field
-     - Set MAC DA SA and vlan tag if exist
+     - Update packet IPv6 length field     
+     - Set MAC DA SA and vlan tag if exist                    
      ------------------------------------------------------------------------------------------------------------------------------------------------*/
     __LOG_FW(("Update Desc<Egress Byte Count> + update IPv6 length field"));
 
@@ -2518,7 +2518,7 @@ void PPA_FW(THR9_Cc_Erspan_TypeII_TrgDevDirectMirroring_Ipv6)() {
         __LOG_FW(("Indicates HW about the new starting point of the packet header (+54 bytes)."));
         thr9_desc_ptr->ppa_internal_desc.fw_bc_modification = 54;
 
-        /* Set tunnel MAC addresses from template (copied earlier from shared memory to template) */
+        /* Set tunnel MAC addresses from template (copied earlier from shared memory to template) */ 
         __LOG_FW(("Set tunnel MAC addresses + vlan tag from template (copied earlier from shared memory to template)"));
         ACCEL_CMD_TRIG(COPY_BYTES_THR9_Cc_Erspan_TypeII_TrgDevDirectMirroring_Ipv6_CFG_cc_erspan_template__mac_da_47_32_LEN12_TO_PKT_no_vlan__mac_header_outer__mac_da_47_32_OFFSET, 0);
     }
@@ -2534,14 +2534,14 @@ void PPA_FW(THR9_Cc_Erspan_TypeII_TrgDevDirectMirroring_Ipv6)() {
         __LOG_FW(("Indicates HW about the new starting point of the packet header (+58 bytes)."));
         thr9_desc_ptr->ppa_internal_desc.fw_bc_modification = 58;
 
-        /* Set tunnel MAC addresses + vlan tag from template (copied earlier from shared memory to template) */
+        /* Set tunnel MAC addresses + vlan tag from template (copied earlier from shared memory to template) */ 
         __LOG_FW(("Set tunnel MAC addresses + vlan tag from template (copied earlier from shared memory to template)"));
         ACCEL_CMD_TRIG(COPY_BYTES_THR9_Cc_Erspan_TypeII_TrgDevDirectMirroring_Ipv6_CFG_cc_erspan_template__mac_da_47_32_LEN16_TO_PKT_with_vlan__mac_header_outer__mac_da_47_32_OFFSET, 0);
     }
 
 
     /*-----------------------------------------------------------------------------------------------------------------------------------------------
-     - Since copy bits accelerators can not be used from packet to packet, copy 16 bytes of packet eDSA tag into thread's template
+     - Since copy bits accelerators can not be used from packet to packet, copy 16 bytes of packet eDSA tag into thread's template 
      - Remove packet eDSA tag (16B)
      ------------------------------------------------------------------------------------------------------------------------------------------------*/
     __LOG_FW(("Since copy bits accelerators can not be used from packet to packet, copy 16 bytes of packet eDSA tag into thread's template"));
@@ -2590,7 +2590,7 @@ void PPA_FW(THR9_Cc_Erspan_TypeII_TrgDevDirectMirroring_Ipv6)() {
      ACCEL_CMD_TRIG(COPY_BITS_THR9_Cc_Erspan_TypeII_TrgDevDirectMirroring_Ipv6_CFG_cc_erspan_template__mac_sa_31_16_PLUS7_LEN3_TO_PKT_ERSPAN_type_II_header__Index_PLUS3_OFFSET, SET_REMAIN_FIELDS_TO_ZERO);
      __PRAGMA_NO_REORDER
 
-     /* Check if need to overrun it since need to take it from shared memory */
+     /* Check if need to overrun it since need to take it from shared memory */ 
      if (getDeviceIdFromPkt == 0)
      {
          /* Extract from Global parameters (taken from shared memory) the Falcon Device ID */
@@ -2598,7 +2598,7 @@ void PPA_FW(THR9_Cc_Erspan_TypeII_TrgDevDirectMirroring_Ipv6)() {
          deviceIdVal = (smemGlobalVal & 0xFFFF0000)>>2;
          __LOG_PARAM_FW(deviceIdVal);
 
-         PPA_FW_SP_WRITE( (FALCON_PKT_REGs_lo + 76) , deviceIdVal  );
+         PPA_FW_SP_WRITE( (FALCON_PKT_REGs_lo + 76) , deviceIdVal  );       
      }
      __PRAGMA_NO_REORDER
 
@@ -2606,7 +2606,7 @@ void PPA_FW(THR9_Cc_Erspan_TypeII_TrgDevDirectMirroring_Ipv6)() {
     __LOG_FW(("Assign ERSPAN.Index"));
     if (descRxSniff == 1)
     {
-        /* RX mirroring */
+        /* RX mirroring */ 
         __LOG_FW(("RX mirroring"));
 
         if ( srcTrgDev <= 7 )
@@ -2621,7 +2621,7 @@ void PPA_FW(THR9_Cc_Erspan_TypeII_TrgDevDirectMirroring_Ipv6)() {
             __LOG_FW(("Set Index Bits [13:0] (ePort). Take it from packet eDSA.src_ePort (take it from template byte 8 plus 15 bits)"));
             ACCEL_CMD_TRIG(COPY_BITS_THR9_Cc_Erspan_TypeII_TrgDevDirectMirroring_Ipv6_CFG_cc_erspan_template__mac_sa_31_16_PLUS15_LEN14_TO_PKT_ERSPAN_type_II_header__Index_PLUS6_OFFSET, 0);
         }
-        else
+        else 
         {   /* RX Mirroring (type 0) in case packet was mirrored from LC (8<= SrcDev <= 15) */
             __LOG_FW(("RX Mirroring (type 0) in case packet was mirrored from LC (8<= SrcDev <= 15)"));
 
@@ -2645,12 +2645,12 @@ void PPA_FW(THR9_Cc_Erspan_TypeII_TrgDevDirectMirroring_Ipv6)() {
 
         /* Write Ingress session ID to packet ERSPAN header.sessionID. Write it as 4B while other bits than Ingress sessionID are cleared to zero */
         __LOG_FW(("Write Ingress session ID to packet ERSPAN header.sessionID. Write it as 4B while other bits than Ingress sessionID are cleared to zero"));
-        PPA_FW_SP_WRITE( (FALCON_PKT_REGs_lo + 72) , (sessionId >>10) & 0x3FF  );
+        PPA_FW_SP_WRITE( (FALCON_PKT_REGs_lo + 72) , (sessionId >>10) & 0x3FF  ); 
         __LOG_PARAM_FW((sessionId >>10) & 0x3FF);
     }
     else
     {
-        /* TX mirroring */
+        /* TX mirroring */ 
         __LOG_FW(("TX mirroring"));
 
         if (srcTrgDev <= 15)
@@ -2674,10 +2674,10 @@ void PPA_FW(THR9_Cc_Erspan_TypeII_TrgDevDirectMirroring_Ipv6)() {
             __LOG_FW(("Set Index Bits [4:0] (Trg Phy Port). Take it from packet eDSA.SrcTrg_Phy_Port_4_0 (template byte 0 bits offset 5)"));
             ACCEL_CMD_TRIG(COPY_BITS_THR9_Cc_Erspan_TypeII_TrgDevDirectMirroring_Ipv6_CFG_cc_erspan_template__mac_da_47_32_PLUS8_LEN5_TO_PKT_ERSPAN_type_II_header__Index_PLUS15_OFFSET, 0);
         }
-        else
+        else 
         {   /* TX Mirroring (type 2) in case packet was mirrored from LC with VoQ (TrgDev >= 16) */
             __LOG_FW(("TX Mirroring (type 2) in case packet was mirrored from LC with VoQ (TrgDev >= 16)"));
-
+        
             /* Set Index Bits [19:18] (type) to '2' */
             __LOG_FW(("Set Index Bits [19:18] (type) to '2'"));
             ACCEL_CMD_TRIG(COPY_BITS_THR9_Cc_Erspan_TypeII_TrgDevDirectMirroring_Ipv6_CONST_0x2_LEN2_TO_PKT_ERSPAN_type_II_header__Index_OFFSET, 0);
@@ -2732,15 +2732,15 @@ void PPA_FW(THR9_Cc_Erspan_TypeII_TrgDevDirectMirroring_Ipv6)() {
  * inparam      None
  * return       None
  * description  ePort-based CC (Centralized Chassis) for source device mirroring.
- *              Thread to process ERSPAN Type II Source Device Mirroring.
- *
- *              cfg template:    Not in use (16B). It is used by fw to hold device ID value.
+ *              Thread to process ERSPAN Type II Source Device Mirroring.   
+ *              
+ *              cfg template:    Not in use (16B). It is used by fw to hold device ID value. 
  *              src & trg entries: Not is use (4B)
  *              hdr in:  | Extension space (64B) | MAC addresses(12B) | eDSA tag(16B) | payload |
  *              hdr out: | Extension space (64B) | MAC addresses(12B) | eDSA tag(16B) | payload |
  *              Header Window anchor= Outer Layer 2
  *              Header Window size= 96 bytes + 64 bytes Header increment space
- *              Firmware fill eDSA.W2.reserved bits 22:24 with device ID value
+ *              Firmware fill eDSA.W2.reserved bits 22:24 with device ID value 
  *              Also set eDSA.W2.reserved bit 21 to '1' to indicate that Falcon Device ID was set.
  *              The header remains with the same size no addition here.
  *****************************************************************************************************************************************/
@@ -2769,7 +2769,7 @@ void PPA_FW(THR10_Cc_Erspan_TypeII_SrcDevMirroring)() {
 
     /* Write it first to template */
     __LOG_FW(("Write it first to template"));
-    PPA_FW_SP_WRITE( FALCON_CFG_REGs_lo , deviceIdVal  );
+    PPA_FW_SP_WRITE( FALCON_CFG_REGs_lo , deviceIdVal  ); 
     __PRAGMA_NO_REORDER
 
     /* Now set eDSA.word2 bits 24:22 with the Falcon Device ID which is now placed in template */
@@ -2800,17 +2800,17 @@ void PPA_FW(THR10_Cc_Erspan_TypeII_SrcDevMirroring)() {
  * description  Thread to support VXLAN-GPB (Group Policy Based) when the Source Group Policy ID is carried in the Desc<Copy Reserved> field.
  *              The <Copy Reserved> bits that are allocated for the Source Group Policy ID should be copied to the VXLAN-GBP field <Group Policy ID>.
  *              Support IPv4 and IPv6 packets.
- *
- *              cfg template:    | reserved 0 (4B)|
+ *              
+ *              cfg template:    | reserved 0 (4B)| 
  *                               | reserved 1 (4B)|
  *                               | reserved 2 (4B)|
  *                               | reserved 3 (22b) | CopyReservedMSB (5b) | CopyReservedLSB (5b) |
  *
- *                               CopyReservedMSB:
+ *                               CopyReservedMSB: 
  *                               - Indicates fw the MS bit of the Group Policy ID value inside Desc<copy reserved> field.
  *                               - Meaning which bit is the last of Group Policy value inside Desc<copy reserved> field.
  *                               - Applicable values: For Falcon it should be 2:19. It should be checked by the CPSS API and not by fw.
- *                               CopyReservedLSB:
+ *                               CopyReservedLSB: 
  *                               - Indicates fw the LS bit of the Group Policy ID value inside Desc<copy reserved> field.
  *                               - Meaning from which bit the Group Policy value starts inside Desc<copy reserved> field.
  *                               - Applicable values: For Falcon it should be 2:19. It should be checked by the CPSS API and not by fw.
@@ -2841,40 +2841,40 @@ void PPA_FW(THR11_VXLAN_GPB_SourceGroupPolicyID)() {
     struct thr11_vxlan_gpb_in_hdr_ipv6* thr11_ipv6_in_hdr_ptr = FALCON_MEM_CAST(FALCON_PKT_REGs_lo,thr11_vxlan_gpb_in_hdr_ipv6);
 
 
-    /* Use CopyReservedMSB and CopyReservedLSB from template to check number of bits of Group Policy ID value */
+    /* Use CopyReservedMSB and CopyReservedLSB from template to check number of bits of Group Policy ID value */ 
     __LOG_FW(("Use CopyReservedMSB and CopyReservedLSB from template to check number of bits of Group Policy ID value"));
     __LOG_PARAM_FW(thr11_cfg_ptr->vxlan_gpb_template.CopyReservedMSB);
     __LOG_PARAM_FW(thr11_cfg_ptr->vxlan_gpb_template.CopyReservedLSB);
     groupPolicyIdLength = (thr11_cfg_ptr->vxlan_gpb_template.CopyReservedMSB - thr11_cfg_ptr->vxlan_gpb_template.CopyReservedLSB) + 1;
     __LOG_PARAM_FW(groupPolicyIdLength);
 
-    /* Set Group Policy ID mask compatible to number of bits */
+    /* Set Group Policy ID mask compatible to number of bits */ 
     __LOG_FW(("Set Group Policy ID mask compatible to number of bits"));
-    groupPolicyIdmask = (1 << groupPolicyIdLength) - 1 ;
+    groupPolicyIdmask = (1 << groupPolicyIdLength) - 1 ; 
     __LOG_PARAM_FW(groupPolicyIdmask);
 
 
     /*-----------------------------------------------------------------------------------------------------------------------------------------------
-      - Extract Group Policy ID value from Desc<copy_reserved> field
+      - Extract Group Policy ID value from Desc<copy_reserved> field 
       -
-      -  1. Read 32 bits from descriptor while the 20 MS bits are copy_reserved field
+      -  1. Read 32 bits from descriptor while the 20 MS bits are copy_reserved field  
       -  2. Move right by 12 bits so copy_reserved field starts from bit#0
       -  3. Now move right by CopyReservedLSB bits so the Group Policy ID value from copy_reserved field will start from bit #0
       -  4. Mask to get Group Policy ID value
       ------------------------------------------------------------------------------------------------------------------------------------------------*/
       __LOG_FW(("Extract Group Policy ID value from Desc<copy_reserved> field"));
-
+   
     __LOG_PARAM_FW(PPA_FW_SP_READ(FALCON_DESC_REGs_lo + 12));
     groupPolicyIdValue = (PPA_FW_SP_READ(FALCON_DESC_REGs_lo + 12) >> (12 + thr11_cfg_ptr->vxlan_gpb_template.CopyReservedLSB) ) & groupPolicyIdmask ;
     __LOG_PARAM_FW(groupPolicyIdValue);
 
 
     /*-----------------------------------------------------------------------------------------------------------------------------------------------
-      - Write Group Policy ID value into packet VXLAN header<Group_Policy_ID>
+      - Write Group Policy ID value into packet VXLAN header<Group_Policy_ID> 
       ------------------------------------------------------------------------------------------------------------------------------------------------*/
       __LOG_FW(("Write Group Policy ID value into packet VXLAN header<Group_Policy_ID>"));
 
-    /* Check packet IP version (IPv4 or IPv6) */
+    /* Check packet IP version (IPv4 or IPv6) */ 
     __LOG_FW(("Check packet IP version (IPv4 or IPv6)"));
     __LOG_PARAM_FW(thr11_ipv4_in_hdr_ptr->IPv4_Header.version);
     if (thr11_ipv4_in_hdr_ptr->IPv4_Header.version == 4)
@@ -3518,7 +3518,7 @@ void PPA_FW(THR15_MPLS_SR_THREE_EL)() {
 }
 
 
-
+   
 
 
 /********************************************************************************************************************//**
@@ -3529,7 +3529,7 @@ void PPA_FW(THR15_MPLS_SR_THREE_EL)() {
  *              It modifies the IPv6 DIP with the next G-SID from SRH segment list.
  *              The thread is triggered by ePort configuration.
  *
- *              cfg template: Byte 0 should hold DIP Common Prefix length (in bits units)
+ *              cfg template: Byte 0 should hold DIP Common Prefix length (in bits units) 
  *              src & trg entries: Not in use (4B)
  *              hdr in:  Extension space(32B),IPv6(40B),SRH(8B),Container0(16B),Container1(16B),Container2(16B)
  *              hdr out: Extension space(32B),IPv6(40B),SRH(8B),Container0(16B),Container1(16B),Container2(16B)
@@ -3538,7 +3538,7 @@ void PPA_FW(THR15_MPLS_SR_THREE_EL)() {
  *
  *              Header Window anchor= Outer Layer 3
  *              Header Window size= 128 bytes + 32 bytes Header increment space
- *
+ * 
  *              Firmware actions:
  *              - Updates SI and SL indexes
  *              - Updates IPv6 DIP with Next G-SID
@@ -3549,7 +3549,7 @@ void PPA_FW(THR53_SRV6_End_Node_GSID_COC32) () {
     /*xt_iss_client_command("profile","disable"); _exit(0); */
 
     uint8_t sl;                    /* Indicates the required container from SRH container list */
-    uint8_t si;                    /* Indicates the next G-SID to be used from the required SRH container */
+    uint8_t si;                    /* Indicates the next G-SID to be used from the required SRH container */ 
     uint8_t NextGSID;              /* Holds G-SID value */
     uint32_t commonPrefixLength;   /* Holds Common Prefix Length in bytes */
     uint32_t src;                  /* Holds source offset (next G-SID from SRH container list) */
@@ -3569,7 +3569,7 @@ void PPA_FW(THR53_SRV6_End_Node_GSID_COC32) () {
     __LOG_FW(("Get SI[1:0] = IPv6 DIP[1:0] (2 lsbits)"));
     si = thr53_in_hdr_ptr->IPv6_Header.dip3_low&0x3;
     __LOG_PARAM_FW(si);
-
+    
     /* Get SL[7:0] = SL field in SRH */
     __LOG_FW(("Get SL[7:0] = SL field in SRH"));
     sl = thr53_in_hdr_ptr->SRv6_Header.segments_left;
@@ -3593,7 +3593,7 @@ void PPA_FW(THR53_SRV6_End_Node_GSID_COC32) () {
         __LOG_FW(("Copy updated SL into SRH SL field"));
         thr53_out_hdr_ptr->SRv6_Header.segments_left = sl;
     }
-    else
+    else 
     {   /* SI!=0 therefore current container still has G-SIDs */
         __LOG_FW(("SI!=0 therefore current container still has G-SIDs"));
 
@@ -3601,8 +3601,8 @@ void PPA_FW(THR53_SRV6_End_Node_GSID_COC32) () {
         __LOG_FW(("Decrement SI by 1"));
         si--;
     }
-
-
+   
+ 
     /*-------------------------------------------------------------------------------------------------------------------------
       - Update IPv6 DIP with Next G-SID
       -------------------------------------------------------------------------------------------------------------------------*/
@@ -3622,33 +3622,33 @@ void PPA_FW(THR53_SRV6_End_Node_GSID_COC32) () {
     __LOG_FW(("Get destination offset for G-SID location: extension space(32B) + IPv6.DIP(24B) + common prefix length (bytesoffset)"));
     dest =  56 + commonPrefixLength;
     __LOG_PARAM_FW(dest);
-
-
-    /* Copy 32b Next_G-SID into IPv6 DIP at offset Common_Prefix_Length */
+    
+    
+    /* Copy 32b Next_G-SID into IPv6 DIP at offset Common_Prefix_Length */   
     __LOG_FW(("Copy 32b Next_G-SID into IPv6 DIP at offset Common_Prefix_Length"));
 
-    NextGSID = PPA_FW_SP_BYTE_READ(FALCON_PKT_REGs_lo+src);
+    NextGSID = PPA_FW_SP_BYTE_READ(FALCON_PKT_REGs_lo+src); 
     __PRAGMA_NO_REORDER
-
-    PPA_FW_SP_BYTE_WRITE(FALCON_PKT_REGs_lo+dest,NextGSID);
+    
+    PPA_FW_SP_BYTE_WRITE(FALCON_PKT_REGs_lo+dest,NextGSID);     
     __PRAGMA_NO_REORDER
 
-    NextGSID = PPA_FW_SP_BYTE_READ(FALCON_PKT_REGs_lo+src+1);
+    NextGSID = PPA_FW_SP_BYTE_READ(FALCON_PKT_REGs_lo+src+1); 
     __PRAGMA_NO_REORDER
-
-    PPA_FW_SP_BYTE_WRITE(FALCON_PKT_REGs_lo+dest+1,NextGSID);
+    
+    PPA_FW_SP_BYTE_WRITE(FALCON_PKT_REGs_lo+dest+1,NextGSID);     
     __PRAGMA_NO_REORDER
 
-    NextGSID = PPA_FW_SP_BYTE_READ(FALCON_PKT_REGs_lo+src+2);
+    NextGSID = PPA_FW_SP_BYTE_READ(FALCON_PKT_REGs_lo+src+2); 
     __PRAGMA_NO_REORDER
-
-    PPA_FW_SP_BYTE_WRITE(FALCON_PKT_REGs_lo+dest+2,NextGSID);
+    
+    PPA_FW_SP_BYTE_WRITE(FALCON_PKT_REGs_lo+dest+2,NextGSID);     
     __PRAGMA_NO_REORDER
 
-    NextGSID = PPA_FW_SP_BYTE_READ(FALCON_PKT_REGs_lo+src+3);
+    NextGSID = PPA_FW_SP_BYTE_READ(FALCON_PKT_REGs_lo+src+3); 
     __PRAGMA_NO_REORDER
-
-    PPA_FW_SP_BYTE_WRITE(FALCON_PKT_REGs_lo+dest+3,NextGSID);
+    
+    PPA_FW_SP_BYTE_WRITE(FALCON_PKT_REGs_lo+dest+3,NextGSID);     
     __PRAGMA_NO_REORDER
 
 
@@ -3659,7 +3659,7 @@ void PPA_FW(THR53_SRV6_End_Node_GSID_COC32) () {
     /* Updates new SI value into IPv6 DIP[1:0] */
     __LOG_FW(("Updates new SI value into IPv6 DIP[1:0]"));
     thr53_out_hdr_ptr->IPv6_Header.dip3_low = (thr53_out_hdr_ptr->IPv6_Header.dip3_low&0xFFFC)|si;
-
+    
 
 #if (CHECK_STACK)
     /* Check if stack was overflowed */
@@ -3678,19 +3678,19 @@ void PPA_FW(THR53_SRV6_End_Node_GSID_COC32) () {
  * inparam      None
  * return       None
  * description  This thread handles specific request.
- *              For selected IPv4 routed flows and if router next hop is configured to "decrement TTL"
+ *              For selected IPv4 routed flows and if router next hop is configured to "decrement TTL" 
  *              HA unit will decrement TTL and PHA fw will increment it back so TTL number will stay the same.
  *
- *              cfg template: Not in use (16B)
+ *              cfg template: Not in use (16B) 
  *              src & trg entries: Not in use (4B)
  *              hdr in:  Extension space(32B),IPv4(20B)
  *              hdr out: Extension space(32B),IPv4(20B)
  *
  *              Header Window anchor= Outer Layer 3
  *              Header Window size= 128 bytes + 32 bytes Header increment space
- *
+ * 
  *              Firmware actions:
- *              - if Desc<dec ttl> == 1
+ *              - if Desc<dec ttl> == 1  
  *                 - Increment IPv4 TTL
  *                 - Incremental Checksum Update
  *              - if Desc<dec ttl> == 0 do nothing
@@ -3710,7 +3710,7 @@ void PPA_FW(THR54_IPv4_TTL_Increment) () {
     if (thr54_desc_ptr->phal2ppa.dec_ttl == 1)
     {
         /*-----------------------------------------------------------------------------------------------------------------
-          - Increment IPv4.ttl field by '1'
+          - Increment IPv4.ttl field by '1' 
           - Calculate IPv4 checksum (incremental update):   New checksum = ~( ~(old checksum) + ~(old ttl) + (new ttl) )
             Since CS accelerators work with 2 bytes resolution we will do CS of ttl(8b) + protocol(8b)
           ----------------------------------------------------------------------------------------------------------------*/
@@ -3734,6 +3734,7 @@ void PPA_FW(THR54_IPv4_TTL_Increment) () {
         __LOG_FW(("Sum current/old IPv4 CS"));
         ACCEL_CMD_TRIG(CSUM_STORE_IP_THR54_IPv4_TTL_Increment_TO_PKT_IPv4_Header__header_checksum_OFFSET, 0);
     }
+    
 
 #if (CHECK_STACK)
     /* Check if stack was overflowed */
@@ -3752,19 +3753,19 @@ void PPA_FW(THR54_IPv4_TTL_Increment) () {
  * inparam      None
  * return       None
  * description  This thread handles specific request.
- *              For selected IPv6 routed flows and if router next hop is configured to "decrement TTL"
+ *              For selected IPv6 routed flows and if router next hop is configured to "decrement TTL" 
  *              HA unit will decrement Hop Limit and PHA fw will increment it back so Hop Limit number will stay the same.
  *
- *              cfg template: Not in use (16B)
+ *              cfg template: Not in use (16B) 
  *              src & trg entries: Not in use (4B)
  *              hdr in:  Extension space(32B),IPv6(40B)
  *              hdr out: Extension space(32B),IPv6(40B)
  *
  *              Header Window anchor= Outer Layer 3
  *              Header Window size= 128 bytes + 32 bytes Header increment space
- *
+ * 
  *              Firmware actions:
- *              - if Desc<dec ttl> == 1
+ *              - if Desc<dec ttl> == 1  
  *                 - Increment IPv6 Hop limit
  *              - if Desc<dec ttl> == 0 do nothing
  ************************************************************************************************************************/
@@ -3803,21 +3804,21 @@ void PPA_FW(THR55_IPv6_HopLimit_Increment) () {
  * funcname     THR56_Clear_Outgoing_Mtag_Cmd
  * inparam      None
  * return       None
- * description  Handles a case in which need to apply EPCL rule to trap packet that was already trapped by an ingress
+ * description  Handles a case in which need to apply EPCL rule to trap packet that was already trapped by an ingress 
  *              pipeline engine, e.g. router exception. In such a case the request is to assign a new CPU Code which
  *              to change the TC assignment.
  *              In the design, EREP will not perform Egress Trap replication to the EQ if Desc<Outgoing Mtag Cmd>=TO_CPU
  *              This is the case when it was trapped already in the ingress pipeline. Solution is for EPCL rule to assign
  *              action of TRAP and to trigger PHA thread that will set Desc<Outgoing Mtag Cmd> to FORWARD.
 
- *              cfg template: Not in use (16B)
+ *              cfg template: Not in use (16B) 
  *              src & trg entries: Not in use (4B)
  *              hdr in:  don't care (change is only done in descriptor field)
  *              hdr out: don't care (change is only done in descriptor field)
  *
  *              Header Window anchor= don't care let's set it to Outer Layer 3
  *              Header Window size= don't care   let's set it to 128 bytes + 32 bytes Header increment space
- *
+ * 
  *              Firmware actions:
  *              - Sets Desc<outgoing_mtag_cmd> to 0x3 (FORWARD)
  *              - Set Desc<Flow-ID> = InDesc<Local Dev Src Port> 
@@ -3839,9 +3840,9 @@ void PPA_FW(THR56_Clear_Outgoing_Mtag_Cmd) () {
     /* Sets Desc<outgoing_mtag_cmd> to 0x3 (FORWARD) */
     __LOG_FW(("Sets Desc<outgoing_mtag_cmd> to 0x3 (FORWARD)"));
     ACCEL_CMD_TRIG(COPY_BITS_THR56_Clear_Outgoing_Mtag_Cmd_CONST_0x3_LEN2_TO_DESC_phal2ppa__outgoing_mtag_cmd_OFFSET, 0);
-
+    
     /*------------------------------------------------------------------------------------------------------------------------------------------------
-      - Sets OutDesc<Flow-ID> = InDesc<Local Dev Src Port>
+      - Sets OutDesc<Flow-ID> = InDesc<Local Dev Src Port> 
       - Since Desc<Flow-ID> is 13 bits and Desc<Local Dev Src Port> is 10 bits only, need to to it in 2 commands
       - First to copy 10 bits of Desc<Local Dev Src Port> to the 10 LS bits of Desc<Flow-ID>
       - Second to clear 3 MS bits of Desc<Flow-ID> with zeros
@@ -3872,13 +3873,13 @@ void PPA_FW(THR56_Clear_Outgoing_Mtag_Cmd) () {
  * funcname     THR57_SFLOW_V5_IPv4
  * inparam      None
  * return       None
- * description  sFlow is a technology for monitoring traffic in data networks containing switches and routers.
+ * description  sFlow is a technology for monitoring traffic in data networks containing switches and routers. 
  *              It requires ingress/egress mirrored packets to be sent over an IPv4-UDP tunnel to a collector in the network.
  *              Following the UDP header there is SFLOW header which is followed by the mirrored packet as the payload.
  *              The L2-IPv4-UDP tunnel encapsulation is added by the Falcon Tunnel-start in the HA unit.
  *              The SFLOW header is inserted by the PHA firmware after the UDP header.
- *
- *              cfg template: 4 LSB holds IPv4 agent address rest 12 bytes are reserved
+ * 
+ *              cfg template: 4 LSB holds IPv4 agent address rest 12 bytes are reserved 
  *              src & trg entries: Not in use (4B)
  *              hdr in:    | Extension space (64B) | IPv4(20B) | UDP(8B) | TS place holder (16B)| payload |
  *              hdr out:   | Extension space (12) | IPv4(20B) | UDP(8B) | sFlow header(28B) | Data Format Header (8B) | Flow Sample Header (32B) | payload |
@@ -3886,11 +3887,11 @@ void PPA_FW(THR56_Clear_Outgoing_Mtag_Cmd) () {
  *              Header Window size= 96 bytes + 64 bytes Header increment space
  *
  *              Firmwares actions:
- *              - Adds sFlow header + Data Format Header + Flow Sample Header and sets it according to architect's definitions.
+ *              - Adds sFlow header + Data Format Header + Flow Sample Header and sets it according to architect's definitions.  
  *              - Updates IPv4 length to + 52 bytes
- *              - Updates UDP length to + 52 bytes
- *              - Calculates IPv4 CS
- *              - Updates HW that 52 bytes were added
+ *              - Updates UDP length to + 52 bytes  
+ *              - Calculates IPv4 CS  
+ *              - Updates HW that 52 bytes were added 
  *****************************************************************************************************************************************/
 __attribute__ ((aligned (16)))
 void PPA_FW(THR57_SFLOW_V5_IPv4)() {
@@ -3899,16 +3900,16 @@ void PPA_FW(THR57_SFLOW_V5_IPv4)() {
 
     uint32_t    ts_sec;                             /* timestamp in seconds */
     uint32_t    ts_nano_sec;                        /* timestamp in nano seconds */
-    uint32_t    ts_sec_new;                         /* holds timestamp in seconds after reading it for the second time to check wraparound */
+    uint32_t    ts_sec_new;                         /* holds timestamp in seconds after reading it for the second time to check wraparound */  
     uint32_t    ts_sec_to_msec;                     /* holds seconds value in milliseconds units */
     uint32_t    ts_nano_sec_to_msec;                /* holds nano seconds value in milliseconds units */
-    uint32_t    uptime;                             /* holds uptime which is the time (in ms) since system boot */
+    uint32_t    uptime;                             /* holds uptime which is the time (in ms) since system boot */ 
     uint8_t     tai_sel;                            /* TAI select index 0 or 1 */
     uint32_t    sampleSeqNum;                       /* holds sample Sequence Number taken from shared memory */
     uint16_t    dropsNum;                           /* holds drops number taken from shared memory */
     uint32_t    smemSrcPortSampleSeqTableEntryAddr; /* holds address of specific entry in src port sample sequence number table in shared memory */
     uint32_t    smemSrcPortDropsTableEntryAddr;     /* holds address of specific entry in src port drops table in shared memory */
-    uint32_t    smemSrcPortIndx;                    /* holds index (0:127) to src port table in shared memory */
+    uint32_t    smemSrcPortIndx;                    /* holds index (0:127) to src port table in shared memory */ 
 
 
     /* Get pointer to descriptor */
@@ -3940,11 +3941,11 @@ void PPA_FW(THR57_SFLOW_V5_IPv4)() {
       ------------------------------------------------------------------------------------------------------------------------------------------------*/
     __LOG_FW(("Set sFlow header. 7 words each of 32 bits."));
 
-    /* Word0: sFlow Version. Set to fixed value 0x5 */
+    /* Word0: sFlow Version. Set to fixed value 0x5 */                                                    
     __LOG_FW(("Word0: sFlow Version. Set to fixed value 0x5"));
     ACCEL_CMD_TRIG(COPY_BITS_THR57_SFLOW_V5_IPv4_CONST_0x5_LEN3_TO_PKT_sflow_ipv4_header__version_PLUS29_OFFSET, SET_REMAIN_FIELDS_TO_ZERO);
 
-    /* Word1: IP version. Set to fixed value 0x1 (IPv4) */
+    /* Word1: IP version. Set to fixed value 0x1 (IPv4) */                                                    
     __LOG_FW(("Word1: IP version. Set to fixed value 0x1 (IPv4)"));
     ACCEL_CMD_TRIG(COPY_BITS_THR57_SFLOW_V5_IPv4_CONST_0x1_LEN1_TO_PKT_sflow_ipv4_header__agent_ip_version_PLUS31_OFFSET, SET_REMAIN_FIELDS_TO_ZERO);
 
@@ -3962,7 +3963,7 @@ void PPA_FW(THR57_SFLOW_V5_IPv4)() {
 
     /*------------------------------------------------------------------------------------------------------------------------------------------------
       Word5: Uptime in milliseconds. Set according to TAI.sec and TAI.ns.
-      - The uptime is the time (in ms) since system boot.
+      - The uptime is the time (in ms) since system boot. 
       - In our case we have 18 bits of seconds and 30 bits of ns that is ~3 days
       - Since 18b for seconds we assume that multiplication of 1000 to convert to milliseconds should not be bigger than 32b size
       ------------------------------------------------------------------------------------------------------------------------------------------------*/
@@ -4008,31 +4009,31 @@ void PPA_FW(THR57_SFLOW_V5_IPv4)() {
     __LOG_FW(("Set uptime in sFlow header"));
     PPA_FW_SP_WRITE( FALCON_PKT_REGs_lo + 60 , uptime );
 
-    /* Word6: Number of samples. Set to fixed value 1 */
+    /* Word6: Number of samples. Set to fixed value 1 */                                                    
     __LOG_FW(("Word6: Number of samples. Set to fixed value 1"));
     ACCEL_CMD_TRIG(COPY_BITS_THR57_SFLOW_V5_IPv4_CONST_0x1_LEN1_TO_PKT_sflow_ipv4_header__samples_number_PLUS31_OFFSET, SET_REMAIN_FIELDS_TO_ZERO);
 
 
     /*------------------------------------------------------------------------------------------------------------------------------------------------
-      - Set Sample Data with sFlow Data Format Header (4B) and Sample Length. 2 words each of 32 bits.
+      - Set Sample Data with sFlow Data Format Header (4B) and Sample Length. 2 words each of 32 bits.     
       ------------------------------------------------------------------------------------------------------------------------------------------------*/
     __LOG_FW(("Set Sample Data with sFlow Data Format Header (4B) and Sample Length. 2 words each of 32 bits."));
 
-    /* Word7: Data Format. Set to template[63:32] */
+    /* Word7: Data Format. Set to template[63:32] */                                                    
     __LOG_FW(("Word7: Data Format. Set to template[63:32]"));
     ACCEL_CMD_TRIG(COPY_BYTES_THR57_SFLOW_V5_IPv4_CFG_sflow_ipv4_template__data_format_header_LEN4_TO_PKT_sflow_data_format_header__smi_private_enterprise_code_OFFSET, 0);
 
-    /* Word8: Set Sample Length to 32 (decimal) */
+    /* Word8: Set Sample Length to 32 (decimal) */                                                    
     __LOG_FW(("Word8: Set Sample Length to 32 (decimal)"));
     ACCEL_CMD_TRIG(COPY_BITS_THR57_SFLOW_V5_IPv4_CONST_0x20_LEN8_TO_PKT_sflow_data_format_header__sample_length_PLUS24_OFFSET, SET_REMAIN_FIELDS_TO_ZERO);
 
 
     /*------------------------------------------------------------------------------------------------------------------------------------------------
-      - Set sFlow Flow Sample Header (32B). 8 words each of 32 bits.
+      - Set sFlow Flow Sample Header (32B). 8 words each of 32 bits.      
       ------------------------------------------------------------------------------------------------------------------------------------------------*/
     __LOG_FW(("Set sFlow Flow Sample Header (32B). 8 words each of 32 bits."));
 
-    /* Word9: Sample Sequence Number. Set to SharedMem.SrcPort[31:0]. Increment SharedMem.SrcPort[31:0] */
+    /* Word9: Sample Sequence Number. Set to SharedMem.SrcPort[31:0]. Increment SharedMem.SrcPort[31:0] */                                                    
     __LOG_FW(("Word9: Sample Sequence Number. Set to SharedMem.SrcPort[31:0]. Increment SharedMem.SrcPort[31:0]"));
 
     /* Get index to shared memory sample sequence source port table. Get it from Desc.local_dev_src_port. Applicable values are 0:127. */
@@ -4093,8 +4094,8 @@ void PPA_FW(THR57_SFLOW_V5_IPv4)() {
     {
         /* Packet is dropped therefore increment Drops number by 1 */
         __LOG_FW(("Packet is dropped therefore increment Drops number by 1"));
-        dropsNum +=1;
-
+        dropsNum +=1; 
+ 
         /* Save it in shared memory */
         __LOG_FW(("Save it in shared memory"));
         PPA_FW_SP_SHORT_WRITE(smemSrcPortDropsTableEntryAddr, dropsNum);
@@ -4103,7 +4104,7 @@ void PPA_FW(THR57_SFLOW_V5_IPv4)() {
     __LOG_FW(("Set sample sequence number in output packet in sFlow Flow Sample Header.drops (word 13)"));
     PPA_FW_SP_WRITE( FALCON_PKT_REGs_lo + 92 , dropsNum );
     __LOG_PARAM_FW(dropsNum);
-
+    
     /* Word14: Input Interface. Set to LocalDevSrcPort */
     __LOG_FW(("Word14: Input Interface. Set to LocalDevSrcPort"));
     ACCEL_CMD_TRIG(COPY_BITS_THR57_SFLOW_V5_IPv4_DESC_phal2ppa__local_dev_src_port_LEN10_TO_PKT_sflow_flow_sample_header__input_PLUS22_OFFSET, SET_REMAIN_FIELDS_TO_ZERO);
@@ -4120,7 +4121,7 @@ void PPA_FW(THR57_SFLOW_V5_IPv4)() {
     /*------------------------------------------------------------------------------------------------------------------------------------------------
       - Update IP length field:                         IPv4 Header<Total Length>= IPv4 Header<Total Length> + 52
       - Calculate IPv4 checksum (incremental update):   New checksum = ~( ~(old checksum) + ~(old Total Length) + (new Total Length) )
-      - Update UDP length field:                        UDP<length> = UDP<length> + 52
+      - Update UDP length field:                        UDP<length> = UDP<length> + 52 
       - Update HW that packet was increased by 52B      Desc<fw_bc_modification> = 52
       ------------------------------------------------------------------------------------------------------------------------------------------------*/
     __LOG_FW(("Update IP length(+52B), calculate new IPv4 CS, update udp length(+52B) and update HW packet was increased by 52B"));
@@ -4169,13 +4170,13 @@ void PPA_FW(THR57_SFLOW_V5_IPv4)() {
  * funcname     THR58_SFLOW_V5_IPv6
  * inparam      None
  * return       None
- * description  sFlow is a technology for monitoring traffic in data networks containing switches and routers.
+ * description  sFlow is a technology for monitoring traffic in data networks containing switches and routers. 
  *              It requires ingress/egress mirrored packets to be sent over an IPv6-UDP tunnel to a collector in the network.
  *              Following the UDP header there is SFLOW header which is followed by the mirrored packet as the payload.
  *              The L2-IPv6-UDP tunnel encapsulation is added by the Falcon Tunnel-start in the HA unit.
  *              The SFLOW header is inserted by the PHA firmware after the UDP header.
- *
- *              cfg template: 4 LSB holds IPv4 agent address rest 12 bytes are reserved
+ * 
+ *              cfg template: 4 LSB holds IPv4 agent address rest 12 bytes are reserved 
  *              src & trg entries: Not in use (4B)
  *              hdr in:    | Extension space (64B) | IPv6(40B) | UDP(8B) | TS place holder (16B)| payload |
  *              hdr out:   | Extension space (12B) | IPv6(40B) | UDP(8B) | sFlow header(28B) | Data Format Header (8B) | Flow Sample Header (32B) | payload |
@@ -4183,10 +4184,10 @@ void PPA_FW(THR57_SFLOW_V5_IPv4)() {
  *              Header Window size= 96 bytes + 64 bytes Header increment space
  *
  *              Firmwares actions:
- *              - Adds sFlow header + Data Format Header + Flow Sample Header and sets it according to architect's definitions.
+ *              - Adds sFlow header + Data Format Header + Flow Sample Header and sets it according to architect's definitions.  
  *              - Updates IPv6 length to + 52 bytes
- *              - Updates UDP length to + 52 bytes
- *              - Updates HW that 52 bytes were added
+ *              - Updates UDP length to + 52 bytes  
+ *              - Updates HW that 52 bytes were added 
  *****************************************************************************************************************************************/
 __attribute__ ((aligned (16)))
 void PPA_FW(THR58_SFLOW_V5_IPv6)() {
@@ -4195,16 +4196,16 @@ void PPA_FW(THR58_SFLOW_V5_IPv6)() {
 
     uint32_t    ts_sec;                             /* timestamp in seconds */
     uint32_t    ts_nano_sec;                        /* timestamp in nano seconds */
-    uint32_t    ts_sec_new;                         /* holds timestamp in seconds after reading it for the second time to check wraparound */
+    uint32_t    ts_sec_new;                         /* holds timestamp in seconds after reading it for the second time to check wraparound */  
     uint32_t    ts_sec_to_msec;                     /* holds seconds value in milliseconds units */
     uint32_t    ts_nano_sec_to_msec;                /* holds nano seconds value in milliseconds units */
-    uint32_t    uptime;                             /* holds uptime which is the time (in ms) since system boot */
+    uint32_t    uptime;                             /* holds uptime which is the time (in ms) since system boot */ 
     uint8_t     tai_sel;                            /* TAI select index 0 or 1 */
     uint32_t    sampleSeqNum;                       /* holds sample Sequence Number taken from shared memory */
     uint16_t    dropsNum;                           /* holds drops number taken from shared memory */
     uint32_t    smemSrcPortSampleSeqTableEntryAddr; /* holds address of specific entry in src port sample sequence number table in shared memory */
     uint32_t    smemSrcPortDropsTableEntryAddr;     /* holds address of specific entry in src port drops table in shared memory */
-    uint32_t    smemSrcPortIndx;                    /* holds index (0:127) to src port table in shared memory */
+    uint32_t    smemSrcPortIndx;                    /* holds index (0:127) to src port table in shared memory */ 
 
     /* Get pointer to descriptor */
     struct ppa_in_desc* thr58_desc_ptr = FALCON_MEM_CAST(FALCON_DESC_REGs_lo,ppa_in_desc);
@@ -4235,11 +4236,11 @@ void PPA_FW(THR58_SFLOW_V5_IPv6)() {
       ------------------------------------------------------------------------------------------------------------------------------------------------*/
     __LOG_FW(("Set sFlow header. 7 words each of 32 bits."));
 
-    /* Word0: sFlow Version. Set to fixed value 0x5 */
+    /* Word0: sFlow Version. Set to fixed value 0x5 */                                                    
     __LOG_FW(("Word0: sFlow Version. Set to fixed value 0x5"));
     ACCEL_CMD_TRIG(COPY_BITS_THR58_SFLOW_V5_IPv6_CONST_0x5_LEN3_TO_PKT_sflow_ipv4_header__version_PLUS29_OFFSET, SET_REMAIN_FIELDS_TO_ZERO);
 
-    /* Word1: IP version. Set to fixed value 0x1 (IPv4) */
+    /* Word1: IP version. Set to fixed value 0x1 (IPv4) */                                                    
     __LOG_FW(("Word1: IP version. Set to fixed value 0x1 (IPv4)"));
     ACCEL_CMD_TRIG(COPY_BITS_THR58_SFLOW_V5_IPv6_CONST_0x1_LEN1_TO_PKT_sflow_ipv4_header__agent_ip_version_PLUS31_OFFSET, SET_REMAIN_FIELDS_TO_ZERO);
 
@@ -4259,7 +4260,7 @@ void PPA_FW(THR58_SFLOW_V5_IPv6)() {
 
     /*------------------------------------------------------------------------------------------------------------------------------------------------
       Word5: Uptime in milliseconds. Set according to TAI.sec and TAI.ns.
-      - The uptime is the time (in ms) since system boot.
+      - The uptime is the time (in ms) since system boot. 
       - In our case we have 18 bits of seconds and 30 bits of ns that is ~3 days
       - Since 18b for seconds we assume that multiplication of 1000 to convert to milliseconds should not be bigger than 32b size
       ------------------------------------------------------------------------------------------------------------------------------------------------*/
@@ -4305,31 +4306,31 @@ void PPA_FW(THR58_SFLOW_V5_IPv6)() {
     __LOG_FW(("Set uptime in sFlow header"));
     PPA_FW_SP_WRITE( FALCON_PKT_REGs_lo + 80 , uptime );
 
-    /* Word6: Number of samples. Set to fixed value 1 */
+    /* Word6: Number of samples. Set to fixed value 1 */                                                    
     __LOG_FW(("Word6: Number of samples. Set to fixed value 1"));
     ACCEL_CMD_TRIG(COPY_BITS_THR58_SFLOW_V5_IPv6_CONST_0x1_LEN1_TO_PKT_sflow_ipv4_header__samples_number_PLUS31_OFFSET, SET_REMAIN_FIELDS_TO_ZERO);
 
 
     /*------------------------------------------------------------------------------------------------------------------------------------------------
-      - Set Sample Data with sFlow Data Format Header (4B) and Sample Length. 2 words each of 32 bits.
+      - Set Sample Data with sFlow Data Format Header (4B) and Sample Length. 2 words each of 32 bits.     
       ------------------------------------------------------------------------------------------------------------------------------------------------*/
     __LOG_FW(("Set Sample Data with sFlow Data Format Header (4B) and Sample Length. 2 words each of 32 bits."));
 
-    /* Word7: Data Format. Set to template[63:32] */
+    /* Word7: Data Format. Set to template[63:32] */                                                    
     __LOG_FW(("Word7: Data Format. Set to template[63:32]"));
     ACCEL_CMD_TRIG(COPY_BYTES_THR58_SFLOW_V5_IPv6_CFG_sflow_ipv4_template__data_format_header_LEN4_TO_PKT_sflow_data_format_header__smi_private_enterprise_code_OFFSET, 0);
 
-    /* Word8: Set Sample Length to 32 (decimal) */
+    /* Word8: Set Sample Length to 32 (decimal) */                                                    
     __LOG_FW(("Word8: Set Sample Length to 32 (decimal)"));
     ACCEL_CMD_TRIG(COPY_BITS_THR58_SFLOW_V5_IPv6_CONST_0x20_LEN8_TO_PKT_sflow_data_format_header__sample_length_PLUS24_OFFSET, SET_REMAIN_FIELDS_TO_ZERO);
 
 
     /*------------------------------------------------------------------------------------------------------------------------------------------------
-      - Set sFlow Flow Sample Header (32B). 8 words each of 32 bits.
+      - Set sFlow Flow Sample Header (32B). 8 words each of 32 bits.      
       ------------------------------------------------------------------------------------------------------------------------------------------------*/
     __LOG_FW(("Set sFlow Flow Sample Header (32B). 8 words each of 32 bits."));
 
-    /* Word9: Sample Sequence Number. Set to SharedMem.SrcPort[31:0]. Increment SharedMem.SrcPort[31:0] */
+    /* Word9: Sample Sequence Number. Set to SharedMem.SrcPort[31:0]. Increment SharedMem.SrcPort[31:0] */                                                    
     __LOG_FW(("Word9: Sample Sequence Number. Set to SharedMem.SrcPort[31:0]. Increment SharedMem.SrcPort[31:0]"));
 
     /* Get index to shared memory sample sequence source port table. Get it from Desc.local_dev_src_port. Applicable values are 0:127. */
@@ -4390,8 +4391,8 @@ void PPA_FW(THR58_SFLOW_V5_IPv6)() {
     {
         /* Packet is dropped therefore increment Drops number by 1 */
         __LOG_FW(("Packet is dropped therefore increment Drops number by 1"));
-        dropsNum +=1;
-
+        dropsNum +=1; 
+ 
         /* Save it in shared memory */
         __LOG_FW(("Save it in shared memory"));
         PPA_FW_SP_SHORT_WRITE(smemSrcPortDropsTableEntryAddr, dropsNum);
@@ -4400,7 +4401,7 @@ void PPA_FW(THR58_SFLOW_V5_IPv6)() {
     __LOG_FW(("Set sample sequence number in output packet in sFlow Flow Sample Header.drops (word 13)"));
     PPA_FW_SP_WRITE( FALCON_PKT_REGs_lo + 112 , dropsNum );
     __LOG_PARAM_FW(dropsNum);
-
+    
     /* Word14: Input Interface. Set to LocalDevSrcPort */
     __LOG_FW(("Word14: Input Interface. Set to LocalDevSrcPort"));
     ACCEL_CMD_TRIG(COPY_BITS_THR58_SFLOW_V5_IPv6_DESC_phal2ppa__local_dev_src_port_LEN10_TO_PKT_sflow_flow_sample_header__input_PLUS22_OFFSET, SET_REMAIN_FIELDS_TO_ZERO);
@@ -4416,7 +4417,7 @@ void PPA_FW(THR58_SFLOW_V5_IPv6)() {
 
     /*------------------------------------------------------------------------------------------------------------------------------------------------
       - Update IP length field:                         IPv6 Header<Payload Length>= IPv6 Header<Payload Length> + 52
-      - Update UDP length field:                        UDP<length> = UDP<length> + 52
+      - Update UDP length field:                        UDP<length> = UDP<length> + 52 
       - Update HW that packet was increased by 52B      Desc<fw_bc_modification> = 52
       ------------------------------------------------------------------------------------------------------------------------------------------------*/
     __LOG_FW(("Update IP length(+52B), update udp length(+52B) and update HW packet was increased by 52B"));
@@ -4452,9 +4453,9 @@ void PPA_FW(THR58_SFLOW_V5_IPv6)() {
  * return          None
  * description     Thread that is used to drop any packet that goes through PPA
  *                 Firmware actions:
- *                 - Set Desc<egress_packet_cmd> to 0x3 (Hard Drop)
+ *                 - Set Desc<egress_packet_cmd> to 0x3 (Hard Drop)   
  *                 - Set Desc<CPU code> to 183
- *                 Note:
+ *                 Note: 
  *                 - this thread is mapped to a fix address and should not be changed.
  *                 - allows to execute the thread while fw version is being upgraded.
  *                 - do not use accelerator commands since it will change thread's code
@@ -4469,11 +4470,11 @@ void PPA_FW(THR60_DropAllTraffic)() {
     /* Get pointer to descriptor */
     struct ppa_in_desc*  thr60_desc_ptr = FALCON_MEM_CAST(FALCON_DESC_REGs_lo,ppa_in_desc);
 
-    /* Set Desc<egress_packet_cmd> to 0x3 (Hard Drop) */
+    /* Set Desc<egress_packet_cmd> to 0x3 (Hard Drop) */    
     __LOG_FW(("Set Desc<egress_packet_cmd> to 0x3 (Hard Drop)"));
     thr60_desc_ptr->phal2ppa.egress_packet_cmd = 0x3;
 
-    /* Set Desc<CPU code> to 183 */
+    /* Set Desc<CPU code> to 183 */    
     __LOG_FW(("Set Desc<CPU code> to 183"));
     thr60_desc_ptr->phal2ppa.cpu_code = 183;
 
@@ -4489,6 +4490,568 @@ void PPA_FW(THR60_DropAllTraffic)() {
 }
 
 
+/*************************************************************************************************************************************//**
+ * funcname     THR64_Erspan_TypeII_SameDevMirroring_Ipv4
+ * inparam      None
+ * return       None
+ * description  ERSPAN over IPv4 tunnel. Encapsulated Remote Switch Port Analyzer (ERSPAN) 
+ *              allows packets to be mirrored to a remote analyzer over a tunnel encapsulation. 
+ *              - ERSPAN Type II is used
+ *              - ERSPAN is sent over an IPv4 GRE tunnel
+ *              - Support handling of Ingress and Egress mirroring   
+ *              - Support handling vlan tagged or untagged
+ * 
+ *              cfg template:    Not in use (16B). It is used by fw to hold L2 parameters copied from shared memory.
+ *              src & trg entries: PHA Target port table holds original packet target physical port for Egress mirroring (2B)  
+ *                                 PHA Source port table holds original packet source physical port for Ingress mirroring (2B)
+ *
+ *              hdr in:  | Extension space (64B) | payload |
+ *              hdr out: | Extension space (14B or 10B) | MAC addresses(12B) | VLAN(4B) or not | ET(2B) | IPv4(20B) | GRE(8B) | ERSPAN Type II(8B) | payload |
+ *              Header Window anchor= Outer Layer 2
+ *              Header Window size= 96 bytes + 64 bytes Header increment space
+ *
+ *              Firmware adds the tunnel and sets the values according to architect's definitions.
+ *              - Add IPv4 and L2 headers which are copied from shared memory 
+ *              - Add GRE & ERSPAN Type II and set them according to Architect's definitions
+ *              - Set IPv4 length and calculate IPv4 cs. 
+ *              - Update Desc<egress_byte_count> +=54(with vlan) or 50(without vlan) 
+ *              - Update Desc<fw_bc_modification> +=54(with vlan) or 50(without vlan)  
+ *****************************************************************************************************************************************/
+__attribute__ ((aligned (16))) 
+void PPA_FW(THR64_Erspan_TypeII_SameDevMirroring_Ipv4)() {
+    /* xt_iss_client_command("profile","enable");             */
+    /* xt_iss_client_command("profile","disable"); _exit(0);  */
+
+    uint32_t    sessionId;
+    uint32_t    smemAnalyzerTemplateBaseAddr;
+    uint32_t    smemAnalayzerTemplateOfst;
+    uint32_t    descRxSniff;
+    uint32_t    vlanVid;
+
+
+    /* Get pointer to descriptor */
+    struct ppa_in_desc* thr64_desc_ptr = FALCON_MEM_CAST(FALCON_DESC_REGs_lo,ppa_in_desc);
+
+
+    /* Get Rx Sniff value from descriptor to tell us if Ingress mirroring or Egress mirroring */
+    __LOG_FW(("Get Rx Sniff value from descriptor to tell us if Ingress mirroring or Egress mirroring"));
+    descRxSniff = thr64_desc_ptr->phal2ppa.rx_sniff;
+    __LOG_PARAM_FW(descRxSniff);
+
+
+    /*-----------------------------------------------------------------------------------------------------------------------------------------------
+      - Calculate offset to the right Analyzer ePort template in shared memory according to shared memory index 
+      ------------------------------------------------------------------------------------------------------------------------------------------------*/
+     __LOG_FW(("Calculate offset to the right Analyzer ePort template in shared memory according to shared memory index"));
+
+    /* Desc.pha_metadata[0:2] contains shared memory index. Applicable values are 0:6. */
+    __LOG_FW(("Desc.pha_metadata[0:2] contains shared memory index. Applicable values are 0:6."));
+    smemAnalayzerTemplateOfst = (thr64_desc_ptr->phal2ppa.pha_metadata & 0x7)*64;
+    __LOG_PARAM_FW(thr64_desc_ptr->phal2ppa.pha_metadata);
+    __LOG_PARAM_FW(smemAnalayzerTemplateOfst);
+
+    /* Get base address of the required Analyzer ePort template in shared memory */
+    __LOG_FW(("Get base address of the required Analyzer ePort template in shared memory"));
+    smemAnalyzerTemplateBaseAddr = DRAM_CC_ERSPAN_ANALYZER_EPORT_1_TEMPLATE_ADDR + smemAnalayzerTemplateOfst;
+    __LOG_PARAM_FW(smemAnalyzerTemplateBaseAddr);
+
+
+    /*-----------------------------------------------------------------------------------------------------------------------------------------------
+      - Get 16B of L2 parameters from shared memory: | mac da sa(12B) | vlan tag(4B) | and placed them in thread's template
+      - To avoid 32 bits alignment issues (packet starts after 10 bytes since Ethertype included), copy it first to CFG template and then to packet
+      ------------------------------------------------------------------------------------------------------------------------------------------------*/
+     __LOG_FW(("Get 16B of L2 parameters from shared memory: | mac da sa(12B) | vlan tag(4B) | and placed them in thread's template"));
+
+    PPA_FW_SP_WRITE( (FALCON_CFG_REGs_lo + 0) , PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr +  IPV4_BASIC_HEADER_SIZE + 4)  );
+    PPA_FW_SP_WRITE( (FALCON_CFG_REGs_lo + 4) , PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr +  IPV4_BASIC_HEADER_SIZE + 8)  );
+    PPA_FW_SP_WRITE( (FALCON_CFG_REGs_lo + 8) , PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr +  IPV4_BASIC_HEADER_SIZE + 12)  );
+    PPA_FW_SP_WRITE( (FALCON_CFG_REGs_lo + 12) , PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr +  IPV4_BASIC_HEADER_SIZE + 16)  );
+    __LOG_PARAM_FW(PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr + IPV4_BASIC_HEADER_SIZE + 4));
+    __LOG_PARAM_FW(PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr + IPV4_BASIC_HEADER_SIZE + 8));
+    __LOG_PARAM_FW(PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr + IPV4_BASIC_HEADER_SIZE + 12));
+    __LOG_PARAM_FW(PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr + IPV4_BASIC_HEADER_SIZE + 16));
+
+
+    /*-----------------------------------------------------------------------------------------------------------------------------------------------
+      - Get 20B of IPv4 header from shared memory and place them in output packet
+      ------------------------------------------------------------------------------------------------------------------------------------------------*/
+     __LOG_FW(("Get 20B of IPv4 header from shared memory and place them in output packet"));
+
+    PPA_FW_SP_WRITE( (FALCON_PKT_REGs_lo + 28) , PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr +  0)  );
+    PPA_FW_SP_WRITE( (FALCON_PKT_REGs_lo + 32) , PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr +  4)  );
+    PPA_FW_SP_WRITE( (FALCON_PKT_REGs_lo + 36) , PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr +  8)  );
+    PPA_FW_SP_WRITE( (FALCON_PKT_REGs_lo + 40) , PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr + 12)  );
+    PPA_FW_SP_WRITE( (FALCON_PKT_REGs_lo + 44) , PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr + 16)  );
+    __LOG_PARAM_FW(PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr + 0));
+    __LOG_PARAM_FW(PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr + 4));
+    __LOG_PARAM_FW(PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr + 8));
+    __LOG_PARAM_FW(PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr + 12));
+    __LOG_PARAM_FW(PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr + 16));
+
+
+    /*-----------------------------------------------------------------------------------------------------------------------------------------------
+      - Get session ID from shared memory. This address contains  | reserved(12b) | Ingress session ID(10b) | Egress session ID(10b) |
+      ------------------------------------------------------------------------------------------------------------------------------------------------*/
+    __LOG_FW(("Get session ID from shared memory. This address contains  | reserved(12b) | Ingress session ID(10b) | Egress session ID(10b) |"));
+
+     sessionId = PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr +  IPV4_BASIC_HEADER_SIZE) ;
+     __LOG_PARAM_FW(sessionId);
+
+     /* Extract 10 bits of Ingress or Egress session ID according to Desc<rx_sniff> field */
+     __LOG_FW(("Extract 10 bits of Ingress or Egress session ID according to Desc<rx_sniff> field"));
+     sessionId = (sessionId >>(10*descRxSniff)) & 0x3FF;
+     __LOG_PARAM_FW(sessionId);
+     __PRAGMA_NO_REORDER
+
+
+    /*-----------------------------------------------------------------------------------------------------------------------------------------------
+     - Get VLAN vid
+     ------------------------------------------------------------------------------------------------------------------------------------------------*/
+
+    /* Get vlan vid from template */
+    __LOG_FW(("Get vlan vid from template"));
+    vlanVid = PPA_FW_SP_READ(FALCON_CFG_REGs_lo + 12) & 0xFFF;
+    __LOG_PARAM_FW(vlanVid);
+
+
+    /*-----------------------------------------------------------------------------------------------------------------------------------------------
+     - Set Ether Type to 0x0800 (IPv4)
+     ------------------------------------------------------------------------------------------------------------------------------------------------*/
+     __LOG_FW(("Set Ether Type to 0x0800 (IPv4)"));
+
+    ACCEL_CMD_TRIG(COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x08_LEN8_TO_PKT_ethertype_header__ethertype_OFFSET, SET_REMAIN_FIELDS_TO_ZERO);
+
+
+    /*-----------------------------------------------------------------------------------------------------------------------------------------------
+     - Set packet GRE header (8B)
+     ------------------------------------------------------------------------------------------------------------------------------------------------*/
+     __LOG_FW(("Set packet GRE header (8B)"));
+
+    /* Set GRE.flags to 0x1000. Clear all other bits in range of 32 bits to zero to get 0x1000 value */
+    __LOG_FW(("Set GRE.flags to 0x1000. Clear all other bits in range of 32 bits to zero to get 0x1000 value"));
+    ACCEL_CMD_TRIG(COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x10_LEN8_TO_PKT_GRE_header__C_OFFSET, SET_REMAIN_FIELDS_TO_ZERO);
+    __PRAGMA_NO_REORDER
+
+    /* Set GRE.Protocol to 0x88BE */
+    __LOG_FW(("Set GRE.Protocol to 0x88BE"));
+    ACCEL_CMD_TRIG(COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x88_LEN8_TO_PKT_GRE_header__NP_OFFSET, 0);
+    ACCEL_CMD_TRIG(COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0xBE_LEN8_TO_PKT_GRE_header__NP_PLUS8_OFFSET, 0);
+
+    /* Set GRE.Sequence Number to Desc<LM Counter> */
+    __LOG_FW(("Set GRE.Sequence Number to Desc<LM Counter>"));
+    ACCEL_CMD_TRIG(COPY_BYTES_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__lm_counter_LEN4_TO_PKT_GRE_header__Seq_num_OFFSET, 0);
+
+
+    /*-----------------------------------------------------------------------------------------------------------------------------------------------
+     - Set packet ERSPAN header (8B)
+     ------------------------------------------------------------------------------------------------------------------------------------------------*/
+     __LOG_FW(("Set packet ERSPAN header (8B)"));
+
+    /* Set Ingress or Egress ERSPAN header.sessionID (extracted earlier according to Desc<rx_sniff>).
+       Write it as 4B so rest fields (Ver,VLAN,COS,En,T) are cleared to zero */
+    __LOG_FW(("Set Ingress or Egress ERSPAN header.sessionID (extracted earlier according to Desc<rx_sniff>)."
+              "Write it as 4B so rest fields (Ver,VLAN,COS,En,T) are cleared to zero"));
+    PPA_FW_SP_WRITE( (FALCON_PKT_REGs_lo + 56) , sessionId ); 
+
+    /* Set 20  bits of ERSPAN.index with PHA target/Source Physical Port bits [15:0], rest 4 bits are cleared to zero.
+       if descRxSniff = 0 trigger target port accelerator if 1 trigger source port accelerator (next command 4B offset) */
+    __LOG_FW(("Set 20  bits of ERSPAN.index with PHA target/Source Physical Port bits [15:0], rest 4 bits are cleared to zero."
+              "if descRxSniff = 0 trigger target port accelerator if 1 trigger source port accelerator (next command 4B offset)"));
+    ACCEL_CMD_TRIG(COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_srcTrgPortEntry__targetPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4_OFFSET + 4*descRxSniff, SET_REMAIN_FIELDS_TO_ZERO);
+    __PRAGMA_NO_REORDER
+
+    /* Set ERSPAN.Ver to 1(4b) and ERSPAN.VLAN(12b) to 0 (cleared already when sessionID field was set) */
+    __LOG_FW(("Set ERSPAN.Ver to 1(4b) and ERSPAN.VLAN(12b) to 0 (cleared already when sessionID field was set) "));
+    ACCEL_CMD_TRIG(COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x1_LEN4_TO_PKT_ERSPAN_type_II_header__Ver_OFFSET, 0);
+
+    /* Set ERSPAN.COS to Desc<QoS Mapped UP> */
+    __LOG_FW(("Set ERSPAN.COS to Desc<QoS Mapped UP>"));
+    ACCEL_CMD_TRIG(COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__qos_mapped_up_LEN3_TO_PKT_ERSPAN_type_II_header__COS_OFFSET, 0);
+
+    /* Set ERSPAN.En to 3(2b) and ERSPAN.T(1b) to 0 */
+    __LOG_FW(("Assign ERSPAN.En to 3(2b) and ERSPAN.T(1b) to 0"));
+    ACCEL_CMD_TRIG(COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x6_LEN3_TO_PKT_ERSPAN_type_II_header__En_OFFSET, 0);
+
+
+    /*-----------------------------------------------------------------------------------------------------------------------------------------------
+     - Update packet IPv4 length field 
+     - Calculate IPv4 checksum 
+     ------------------------------------------------------------------------------------------------------------------------------------------------*/
+    __LOG_FW(("Update IPv4 length field + calculate IPv4 checksum"));
+
+
+    /* Set IPv4 Header<Total Length>= Desc<Egress Byte Count>+36 */
+    __LOG_FW(("Set IPv4 Header<Total Length>= Desc<Egress Byte Count>+36"));
+
+    /* First copy Desc.Egress Byte Count(14b) to IPv4.Total Length(16b).
+       Assumption 2 MS bits were already cleared by application when setting IPv4<Total length> field in shared memory */
+    __LOG_FW(("First copy Desc.Egress Byte Count(14b) to IPv4.Total Length(16b)"));
+    ACCEL_CMD_TRIG(COPY_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_DESC_phal2ppa__egress_byte_count_LEN14_TO_PKT_IPv4_Header__total_length_PLUS2_OFFSET, 0);
+    __PRAGMA_NO_REORDER
+
+    /* IPv4 total Length +=36 */
+    __LOG_FW(("IPv4 total Length +=36"));
+    ACCEL_CMD_TRIG(ADD_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x24_LEN16_TO_PKT_IPv4_Header__total_length_OFFSET, 0);
+    __PRAGMA_NO_REORDER
+
+    /* Compute IPv4 CS */
+    __LOG_FW(("Compute IPv4 CS"));
+
+    /* Sum first 8 bytes of IPv4 */
+    __LOG_FW(("Sum new Total Length"));
+    ACCEL_CMD_TRIG(CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN8_FROM_PKT_IPv4_Header__version_OFFSET, 0);
+
+    /* Skip cs field and add to sum 2B of ttl and protocol */
+    __LOG_FW(("Sum new Total Length"));
+    ACCEL_CMD_TRIG(CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN2_FROM_PKT_IPv4_Header__ttl_OFFSET, 0);
+
+    /* Sum the last 8 bytes of IPv4 (src and dest IP addresses fields) */
+    __LOG_FW(("Sum new Total Length"));
+    ACCEL_CMD_TRIG(CSUM_LOAD_NEW_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_LEN8_FROM_PKT_IPv4_Header__sip_high_OFFSET, 0);
+    __PRAGMA_NO_REORDER
+
+    /* Store the new IPv4 CS */
+    __LOG_FW(("Store the new IPv4 CS"));
+    ACCEL_CMD_TRIG(CSUM_STORE_IP_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_TO_PKT_IPv4_Header__header_checksum_OFFSET, 0);
+
+
+    /*-----------------------------------------------------------------------------------------------------------------------------------------------
+     - Set L2 header: MAC DA SA + vlan tag or no vlan tag
+     - Update Desc<Egress Byte Count> +=50 or 54(with vlan)                         
+     - Update Desc<fw_bc_modification> +=50 or 54(with vlan)
+     ------------------------------------------------------------------------------------------------------------------------------------------------*/
+    __LOG_FW(("Set L2 header with or without vlan tag, Update Desc<Egress Byte Count> +=50, Update Desc<fw_bc_modification> +=50"));
+
+    /* Check if there is vlan or not. If thread's template<vlanVid>=0 then there is no vlan */
+    __LOG_FW(("Check if there is vlan or not. If thread's template<vlanVid>=0 then there is no vlan"));    
+    if (vlanVid == 0)
+    { /* No vlan */
+
+        /* Indicates HW about the new starting point of the packet header (+50 bytes) */
+        __LOG_FW(("Indicates HW about the new starting point of the packet header (+50 bytes)"));
+        thr64_desc_ptr->ppa_internal_desc.fw_bc_modification = 50;
+
+        /* No vlan, just copy MAC 12 bytes from thread's template */
+        __LOG_FW(("No vlan, just copy MAC 12 bytes from thread's template"));
+        ACCEL_CMD_TRIG(COPY_BYTES_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_erspan_template__mac_da_47_32_LEN12_TO_PKT_IPv4_Header__version_MINUS14_OFFSET, 0);
+
+        /* Desc<Egress Byte Count> +=50 */
+        __LOG_FW(("Desc<Egress Byte Count> +=50"));
+        ACCEL_CMD_TRIG(ADD_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x32_LEN14_TO_DESC_phal2ppa__egress_byte_count_OFFSET, 0);
+    }
+    else
+    {/* With vlan */
+
+        /* Indicates HW about the new starting point of the packet header (+54 bytes) */
+        __LOG_FW(("Indicates HW about the new starting point of the packet header (+54 bytes)"));
+        thr64_desc_ptr->ppa_internal_desc.fw_bc_modification = 54;
+
+        /* With vlan, copy MAC(12B) + vlan tag(4B) from thread's template */
+        __LOG_FW(("With vlan, copy MAC(12B) + vlan tag(4B) from thread's template"));
+        ACCEL_CMD_TRIG(COPY_BYTES_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CFG_erspan_template__mac_da_47_32_LEN16_TO_PKT_IPv4_Header__version_MINUS18_OFFSET, 0);
+ 
+        /* Desc<Egress Byte Count> +=54 */
+        __LOG_FW(("Desc<Egress Byte Count> +=54"));
+        ACCEL_CMD_TRIG(ADD_BITS_THR64_Erspan_TypeII_SameDevMirroring_Ipv4_CONST_0x36_LEN14_TO_DESC_phal2ppa__egress_byte_count_OFFSET, 0);
+    }
+
+
+#if (CHECK_STACK)
+    /* Check if stack was overflowed */
+    __LOG_FW(("Check if stack was overflowed"));
+    falcon_stack_overflow_checker(64);
+#endif
+
+    /* Execute the packet swap sequence to jump to the next Thread */
+    __LOG_FW(("Execute the packet swap sequence to jump to the next Thread"));
+    packet_swap_sequence();
+}
+
+
+/*************************************************************************************************************************************//**
+ * funcname     THR65_Erspan_TypeII_SameDevMirroring_Ipv6
+ * inparam      None
+ * return       None
+ * description  ERSPAN over IPv6 tunnel. Encapsulated Remote Switch Port Analyzer (ERSPAN) 
+ *              allows packets to be mirrored to a remote analyzer over a tunnel encapsulation. 
+ *              - ERSPAN Type II is used
+ *              - ERSPAN is sent over an IPv6 GRE tunnel
+ *              - Support handling of Ingress and Egress mirroring   
+ *              - Support handling vlan tagged or untagged
+ *              NOTE: since in case of IPv6 tunneling need to add 74 bytes and PHA fw can only add maximum 64 bytes 
+ *                    HA adds dummy RSPAN (4B) and dummy E-Tag(8B) to be used as place holder when packet arrives to PHA fw.
+ *                    PHA fw will then overrun this area with GRE(4LSB) & ERSPAN II headers.    
+ * 
+ *              cfg template:    Not in use (16B). It is used by fw to hold L2 parameters copied from shared memory.
+ *              src & trg entries: PHA Target port table holds original packet target physical port for Egress mirroring (2B)  
+ *                                 PHA Source port table holds original packet source physical port for Ingress mirroring (2B)
+ *
+ *              hdr in:  | Extension space (64B) | dummy RSPAN tag(4B) | dummy E-Tag (8B) | payload |
+ *              hdr out: | Extension space (6B or 2B) | MAC addresses(12B) | VLAN(4B) or not | ET(2B) | IPv6(40B) | GRE(8B) | ERSPAN Type II(8B) | payload |
+ *              Header Window anchor= Outer Layer 2
+ *              Header Window size= 96 bytes + 64 bytes Header increment space
+ *
+ *              Firmware adds the tunnel and sets the values according to architect's definitions.
+ *              - Add IPv6 and L2 headers which are copied from shared memory 
+ *              - Add GRE & ERSPAN Type II and set them according to Architect's definitions
+ *              - Set IPv6 payload length  
+ *              - Update Desc<egress_byte_count> +=62(with vlan) or 58(without vlan) 
+ *              - Update Desc<fw_bc_modification> +=62(with vlan) or 58(without vlan)  
+ *****************************************************************************************************************************************/
+__attribute__ ((aligned (16))) 
+void PPA_FW(THR65_Erspan_TypeII_SameDevMirroring_Ipv6)() {
+    /* xt_iss_client_command("profile","enable");             */
+    /* xt_iss_client_command("profile","disable"); _exit(0);  */
+
+    uint32_t    sessionId;
+    uint32_t    smemAnalyzerTemplateBaseAddr;
+    uint32_t    smemAnalayzerTemplateOfst;
+    uint32_t    descRxSniff;
+    uint32_t    vlanVid;
+
+
+    /* Get pointer to descriptor */
+    struct ppa_in_desc* thr65_desc_ptr = FALCON_MEM_CAST(FALCON_DESC_REGs_lo,ppa_in_desc);
+
+#ifdef ASIC_SIMULATION
+    /* Print out the input packet */
+    __LOG_FW(("Print out the input packet"));
+    __LOG_PARAM_FW( PPA_FW_SP_READ(FALCON_PKT_REGs_lo + 64) );
+    __LOG_PARAM_FW( PPA_FW_SP_READ(FALCON_PKT_REGs_lo + 64 + 4) );
+    __LOG_PARAM_FW( PPA_FW_SP_READ(FALCON_PKT_REGs_lo + 64 + 8) );
+    __LOG_PARAM_FW( PPA_FW_SP_READ(FALCON_PKT_REGs_lo + 64 + 12) );
+    __LOG_PARAM_FW( PPA_FW_SP_READ(FALCON_PKT_REGs_lo + 64 + 16) );
+    __LOG_PARAM_FW( PPA_FW_SP_READ(FALCON_PKT_REGs_lo + 64 + 20) );
+    __LOG_PARAM_FW( PPA_FW_SP_READ(FALCON_PKT_REGs_lo + 64 + 24) );
+    __LOG_PARAM_FW( PPA_FW_SP_READ(FALCON_PKT_REGs_lo + 64 + 28) );
+    __LOG_PARAM_FW( PPA_FW_SP_READ(FALCON_PKT_REGs_lo + 64 + 32) );
+#endif /* ASIC_SIMULATION */
+
+    /* Get Rx Sniff value from descriptor to tell us if Ingress mirroring or Egress mirroring */
+    __LOG_FW(("Get Rx Sniff value from descriptor to tell us if Ingress mirroring or Egress mirroring"));
+    descRxSniff = thr65_desc_ptr->phal2ppa.rx_sniff;
+    __LOG_PARAM_FW(descRxSniff);
+
+
+    /*-----------------------------------------------------------------------------------------------------------------------------------------------
+      - Calculate offset to the right Analyzer ePort template in shared memory according to shared memory index 
+      ------------------------------------------------------------------------------------------------------------------------------------------------*/
+     __LOG_FW(("Calculate offset to the right Analyzer ePort template in shared memory according to shared memory index"));
+
+    /* Desc.pha_metadata[0:2] contains shared memory index. Applicable values are 0:6. */
+    __LOG_FW(("Desc.pha_metadata[0:2] contains shared memory index. Applicable values are 0:6."));
+    smemAnalayzerTemplateOfst = (thr65_desc_ptr->phal2ppa.pha_metadata & 0x7)*64;
+    __LOG_PARAM_FW(thr65_desc_ptr->phal2ppa.pha_metadata);
+    __LOG_PARAM_FW(smemAnalayzerTemplateOfst);
+
+    /* Get base address of the required Analyzer ePort template in shared memory */
+    __LOG_FW(("Get base address of the required Analyzer ePort template in shared memory"));
+    smemAnalyzerTemplateBaseAddr = DRAM_CC_ERSPAN_ANALYZER_EPORT_1_TEMPLATE_ADDR + smemAnalayzerTemplateOfst;
+    __LOG_PARAM_FW(smemAnalyzerTemplateBaseAddr);
+
+
+    /*-----------------------------------------------------------------------------------------------------------------------------------------------
+      - Get 16B of L2 parameters from shared memory: | mac da sa(12B) | vlan tag(4B) | and placed them in thread's template
+      - To avoid 32 bits alignment issues (packet starts after 2 bytes since Ethertype included), copy it first to CFG template and then to packet
+      ------------------------------------------------------------------------------------------------------------------------------------------------*/
+     __LOG_FW(("Get 16B of L2 parameters from shared memory: | mac da sa(12B) | vlan tag(4B) | and placed them in thread's template"));
+
+    PPA_FW_SP_WRITE( (FALCON_CFG_REGs_lo + 0) , PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr +  IPV6_BASIC_HEADER_SIZE + 4)  );
+    PPA_FW_SP_WRITE( (FALCON_CFG_REGs_lo + 4) , PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr +  IPV6_BASIC_HEADER_SIZE + 8)  );
+    PPA_FW_SP_WRITE( (FALCON_CFG_REGs_lo + 8) , PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr +  IPV6_BASIC_HEADER_SIZE + 12)  );
+    PPA_FW_SP_WRITE( (FALCON_CFG_REGs_lo + 12) , PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr +  IPV6_BASIC_HEADER_SIZE + 16)  );
+    __LOG_PARAM_FW(PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr + IPV6_BASIC_HEADER_SIZE + 4));
+    __LOG_PARAM_FW(PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr + IPV6_BASIC_HEADER_SIZE + 8));
+    __LOG_PARAM_FW(PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr + IPV6_BASIC_HEADER_SIZE + 12));
+    __LOG_PARAM_FW(PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr + IPV6_BASIC_HEADER_SIZE + 16));
+
+
+    /*-----------------------------------------------------------------------------------------------------------------------------------------------
+      - Get 40B of IPv6 header from shared memory and place them in output packet
+      ------------------------------------------------------------------------------------------------------------------------------------------------*/
+     __LOG_FW(("Get 40B of IPv6 header from shared memory and place them in output packet"));
+
+    PPA_FW_SP_WRITE( (FALCON_PKT_REGs_lo + 20) , PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr +  0)  );
+    PPA_FW_SP_WRITE( (FALCON_PKT_REGs_lo + 24) , PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr +  4)  );
+    PPA_FW_SP_WRITE( (FALCON_PKT_REGs_lo + 28) , PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr +  8)  );
+    PPA_FW_SP_WRITE( (FALCON_PKT_REGs_lo + 32) , PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr + 12)  );
+    PPA_FW_SP_WRITE( (FALCON_PKT_REGs_lo + 36) , PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr + 16)  );
+    PPA_FW_SP_WRITE( (FALCON_PKT_REGs_lo + 40) , PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr + 20)  );
+    PPA_FW_SP_WRITE( (FALCON_PKT_REGs_lo + 44) , PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr + 24)  );
+    PPA_FW_SP_WRITE( (FALCON_PKT_REGs_lo + 48) , PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr + 28)  );
+    PPA_FW_SP_WRITE( (FALCON_PKT_REGs_lo + 52) , PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr + 32)  );
+    PPA_FW_SP_WRITE( (FALCON_PKT_REGs_lo + 56) , PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr + 36)  );
+    __LOG_PARAM_FW(PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr + 0));
+    __LOG_PARAM_FW(PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr + 4));
+    __LOG_PARAM_FW(PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr + 8));
+    __LOG_PARAM_FW(PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr + 12));
+    __LOG_PARAM_FW(PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr + 16));
+    __LOG_PARAM_FW(PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr + 20));
+    __LOG_PARAM_FW(PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr + 24));
+    __LOG_PARAM_FW(PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr + 28));
+    __LOG_PARAM_FW(PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr + 32));
+    __LOG_PARAM_FW(PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr + 36));
+
+
+    /*-----------------------------------------------------------------------------------------------------------------------------------------------
+      - Get session ID from shared memory. This address contains  | reserved(12b) | Ingress session ID(10b) | Egress session ID(10b) |
+      ------------------------------------------------------------------------------------------------------------------------------------------------*/
+    __LOG_FW(("Get session ID from shared memory. This address contains  | reserved(12b) | Ingress session ID(10b) | Egress session ID(10b) |"));
+
+     sessionId = PPA_FW_SP_READ(smemAnalyzerTemplateBaseAddr +  IPV6_BASIC_HEADER_SIZE) ;
+     __LOG_PARAM_FW(sessionId);
+
+     /* Extract 10 bits of Ingress or Egress session ID according to Desc<rx_sniff> field */
+     __LOG_FW(("Extract 10 bits of Ingress or Egress session ID according to Desc<rx_sniff> field"));
+     sessionId = (sessionId >>(10*descRxSniff)) & 0x3FF;
+     __LOG_PARAM_FW(sessionId);
+     __PRAGMA_NO_REORDER
+
+
+    /*-----------------------------------------------------------------------------------------------------------------------------------------------
+     - Get VLAN vid
+     ------------------------------------------------------------------------------------------------------------------------------------------------*/
+
+    /* Get vlan vid from template */
+    __LOG_FW(("Get vlan vid from template"));
+    vlanVid = PPA_FW_SP_READ(FALCON_CFG_REGs_lo + 12) & 0xFFF;
+    __LOG_PARAM_FW(vlanVid);
+
+
+    /*-----------------------------------------------------------------------------------------------------------------------------------------------
+     - Set Ether Type to 0x86dd (IPv6)
+     ------------------------------------------------------------------------------------------------------------------------------------------------*/
+     __LOG_FW(("Set Ether Type to 0x86dd (IPv6)"));
+
+    ACCEL_CMD_TRIG(COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x86_LEN8_TO_PKT_ethertype_header__ethertype_OFFSET, 0);
+    ACCEL_CMD_TRIG(COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0xDD_LEN8_TO_PKT_ethertype_header__ethertype_PLUS8_OFFSET, 0);
+
+
+    /*-----------------------------------------------------------------------------------------------------------------------------------------------
+     - Set packet GRE header (8B)
+     ------------------------------------------------------------------------------------------------------------------------------------------------*/
+     __LOG_FW(("Set packet GRE header (8B)"));
+
+    /* Set GRE.flags to 0x1000. Clear all other bits in range of 32 bits to zero to get 0x1000 value */
+    __LOG_FW(("Set GRE.flags to 0x1000. Clear all other bits in range of 32 bits to zero to get 0x1000 value"));
+    ACCEL_CMD_TRIG(COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x10_LEN8_TO_PKT_GRE_header__C_OFFSET, SET_REMAIN_FIELDS_TO_ZERO);
+    __PRAGMA_NO_REORDER
+
+    /* Set GRE.Protocol to 0x88BE */
+    __LOG_FW(("Set GRE.Protocol to 0x88BE"));
+    ACCEL_CMD_TRIG(COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x88_LEN8_TO_PKT_GRE_header__NP_OFFSET, 0);
+    ACCEL_CMD_TRIG(COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0xBE_LEN8_TO_PKT_GRE_header__NP_PLUS8_OFFSET, 0);
+
+    /* Set GRE.Sequence Number to Desc<LM Counter> */
+    __LOG_FW(("Set GRE.Sequence Number to Desc<LM Counter>"));
+    ACCEL_CMD_TRIG(COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__lm_counter_LEN4_TO_PKT_GRE_header__Seq_num_OFFSET, 0);
+
+
+    /*-----------------------------------------------------------------------------------------------------------------------------------------------
+     - Set packet ERSPAN header (8B)
+     ------------------------------------------------------------------------------------------------------------------------------------------------*/
+     __LOG_FW(("Set packet ERSPAN header (8B)"));
+
+    /* Set Ingress or Egress ERSPAN header.sessionID (extracted earlier according to Desc<rx_sniff>).
+       Write it as 4B so rest fields (Ver,VLAN,COS,En,T) are cleared to zero */
+    __LOG_FW(("Set Ingress or Egress ERSPAN header.sessionID (extracted earlier according to Desc<rx_sniff>)."
+              "Write it as 4B so rest fields (Ver,VLAN,COS,En,T) are cleared to zero"));
+    PPA_FW_SP_WRITE( (FALCON_PKT_REGs_lo + 68) , sessionId ); 
+
+    /* Set 20  bits of ERSPAN.index with PHA target/Source Physical Port bits [15:0], rest 4 bits are cleared to zero.
+       if descRxSniff = 0 trigger target port accelerator if 1 trigger source port accelerator (next command 4B offset) */
+    __LOG_FW(("Set 20  bits of ERSPAN.index with PHA target/Source Physical Port bits [15:0], rest 4 bits are cleared to zero."
+              "if descRxSniff = 0 trigger target port accelerator if 1 trigger source port accelerator (next command 4B offset)"));
+    ACCEL_CMD_TRIG(COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_srcTrgPortEntry__targetPortEntry_LEN16_TO_PKT_ERSPAN_type_II_header__Index_PLUS4_OFFSET + 4*descRxSniff, SET_REMAIN_FIELDS_TO_ZERO);
+    __PRAGMA_NO_REORDER
+
+    /* Set ERSPAN.Ver to 1(4b) and ERSPAN.VLAN(12b) to 0 (cleared already when sessionID field was set) */
+    __LOG_FW(("Set ERSPAN.Ver to 1(4b) and ERSPAN.VLAN(12b) to 0 (cleared already when sessionID field was set) "));
+    ACCEL_CMD_TRIG(COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x1_LEN4_TO_PKT_ERSPAN_type_II_header__Ver_OFFSET, 0);
+
+    /* Set ERSPAN.COS to Desc<QoS Mapped UP> */
+    __LOG_FW(("Set ERSPAN.COS to Desc<QoS Mapped UP>"));
+    ACCEL_CMD_TRIG(COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__qos_mapped_up_LEN3_TO_PKT_ERSPAN_type_II_header__COS_OFFSET, 0);
+
+    /* Set ERSPAN.En to 3(2b) and ERSPAN.T(1b) to 0 */
+    __LOG_FW(("Assign ERSPAN.En to 3(2b) and ERSPAN.T(1b) to 0"));
+    ACCEL_CMD_TRIG(COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x6_LEN3_TO_PKT_ERSPAN_type_II_header__En_OFFSET, 0);
+
+
+    /*-----------------------------------------------------------------------------------------------------------------------------------------------
+     - Update packet IPv6 payload length field                         
+     ------------------------------------------------------------------------------------------------------------------------------------------------*/
+    __LOG_FW(("Update IPv6 payload length field"));
+
+
+    /* Set IPv6 Header<Payload Length> = Desc<Egress Byte Count>+16 */
+    __LOG_FW(("Set IPv6 Header<Payload Length>= Desc<Egress Byte Count>+16"));
+
+    /* First copy Desc.Egress Byte Count(14b) to IPv6.Payload Length(16b).
+       Assumption 2 MS bits were already cleared by application when setting IPv6<Payload length> field in shared memory */
+    __LOG_FW(("First copy Desc.Egress Byte Count(14b) to IPv6.Payload Length(16b)"));
+    ACCEL_CMD_TRIG(COPY_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_DESC_phal2ppa__egress_byte_count_LEN14_TO_PKT_IPv6_Header__payload_length_PLUS2_OFFSET, 0);
+    __PRAGMA_NO_REORDER
+
+    /* IPv6 payload Length +=16 */
+    __LOG_FW(("IPv6 payload Length +=16"));
+    ACCEL_CMD_TRIG(ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x10_LEN16_TO_PKT_IPv6_Header__payload_length_OFFSET, 0);
+    __PRAGMA_NO_REORDER
+
+
+    /*-----------------------------------------------------------------------------------------------------------------------------------------------
+     - Set L2 header: MAC DA SA + vlan tag or no vlan tag
+     - Update Desc<Egress Byte Count> +=58 or 62(with vlan)                         
+     - Update Desc<fw_bc_modification> +=58 or 62(with vlan)
+     ------------------------------------------------------------------------------------------------------------------------------------------------*/
+    __LOG_FW(("Set L2 header with or without vlan tag, Update Desc<Egress Byte Count> +=58 or 62(with vlan), Update Desc<fw_bc_modification> +=58 or 62(with vlan)"));
+
+    /* Check if there is vlan or not. If thread's template<vlanVid>=0 then there is no vlan */
+    __LOG_FW(("Check if there is vlan or not. If thread's template<vlanVid>=0 then there is no vlan"));    
+    if (vlanVid == 0)
+    { /* No vlan */
+
+        /* Indicates HW about the new starting point of the packet header (+58 bytes) */
+        __LOG_FW(("Indicates HW about the new starting point of the packet header (+58 bytes)"));
+        thr65_desc_ptr->ppa_internal_desc.fw_bc_modification = 58;
+
+        /* No vlan, just copy MAC 12 bytes from thread's template */
+        __LOG_FW(("No vlan, just copy MAC 12 bytes from thread's template"));
+        ACCEL_CMD_TRIG(COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_erspan_template__mac_da_47_32_LEN12_TO_PKT_IPv6_Header__version_MINUS14_OFFSET, 0);
+
+        /* Desc<Egress Byte Count> +=58 */
+        __LOG_FW(("Desc<Egress Byte Count> +=58"));
+        ACCEL_CMD_TRIG(ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x3A_LEN14_TO_DESC_phal2ppa__egress_byte_count_OFFSET, 0);
+    }
+    else
+    {/* With vlan */
+
+        /* Indicates HW about the new starting point of the packet header (+62 bytes) */
+        __LOG_FW(("Indicates HW about the new starting point of the packet header (+62 bytes)"));
+        thr65_desc_ptr->ppa_internal_desc.fw_bc_modification = 62;
+
+        /* With vlan, copy MAC(12B) + vlan tag(4B) from thread's template */
+        __LOG_FW(("With vlan, copy MAC(12B) + vlan tag(4B) from thread's template"));
+        ACCEL_CMD_TRIG(COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_erspan_template__mac_da_47_32_LEN16_TO_PKT_IPv6_Header__version_MINUS18_OFFSET, 0);
+ 
+        /* Desc<Egress Byte Count> +=62 */
+        __LOG_FW(("Desc<Egress Byte Count> +=62"));
+        ACCEL_CMD_TRIG(ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x3E_LEN14_TO_DESC_phal2ppa__egress_byte_count_OFFSET, 0);
+    }
+
+
+#if (CHECK_STACK)
+    /* Check if stack was overflowed */
+    __LOG_FW(("Check if stack was overflowed"));
+    falcon_stack_overflow_checker(65);
+#endif
+
+    /* Execute the packet swap sequence to jump to the next Thread */
+    __LOG_FW(("Execute the packet swap sequence to jump to the next Thread"));
+    packet_swap_sequence();
+}
+
+
 #if RECOVER_FROM_EXCEPTION
 /********************************************************************************************************************//**
  * funcname        falconRecoveFromException
@@ -4587,8 +5150,8 @@ THREAD_TYPE phaThreadsTypeFalconImage02Oldest[] = {
     /*61*/ ,invalidFirmwareThread
     /*62*/ ,invalidFirmwareThread
     /*63*/ ,invalidFirmwareThread
-    /*64*/ ,invalidFirmwareThread
-    /*65*/ ,invalidFirmwareThread
+    /*64*/ ,PPA_FW(THR64_Erspan_TypeII_SameDevMirroring_Ipv4)
+    /*65*/ ,PPA_FW(THR65_Erspan_TypeII_SameDevMirroring_Ipv6)
     /*66*/ ,invalidFirmwareThread
     /*67*/ ,invalidFirmwareThread
     /*68*/ ,invalidFirmwareThread
diff --git a/simulation/simDevices/src/asicSimulation/SKernel/sEmbeddedCpu/firmware/falcon_pha/Image02Previous/ppa_fw_accelerator_commands_FalconImage02Previous.c b/simulation/simDevices/src/asicSimulation/SKernel/sEmbeddedCpu/firmware/falcon_pha/Image02Previous/ppa_fw_accelerator_commands_FalconImage02Previous.c
index 0384e1edae..ff86c2f19f 100644
--- a/simulation/simDevices/src/asicSimulation/SKernel/sEmbeddedCpu/firmware/falcon_pha/Image02Previous/ppa_fw_accelerator_commands_FalconImage02Previous.c
+++ b/simulation/simDevices/src/asicSimulation/SKernel/sEmbeddedCpu/firmware/falcon_pha/Image02Previous/ppa_fw_accelerator_commands_FalconImage02Previous.c
@@ -444,6 +444,7 @@ void PPA_FW(load_accelerator_commands)() {
     ACCEL_CMD_LOAD(ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x3A_LEN14_TO_DESC_phal2ppa__egress_byte_count_OFFSET,          ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x3A_LEN14_TO_DESC_phal2ppa__egress_byte_count_VALUE);
     ACCEL_CMD_LOAD(COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_erspan_template__mac_da_47_32_LEN16_TO_PKT_IPv6_Header__version_MINUS18_OFFSET, COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_erspan_template__mac_da_47_32_LEN16_TO_PKT_IPv6_Header__version_MINUS18_VALUE);
     ACCEL_CMD_LOAD(ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x3E_LEN14_TO_DESC_phal2ppa__egress_byte_count_OFFSET,          ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x3E_LEN14_TO_DESC_phal2ppa__egress_byte_count_VALUE);
+    ACCEL_CMD_LOAD(SHIFTRIGHT_12_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_LEN12_FROM_PKT_mac_header__mac_da_47_32_OFFSET,            SHIFTRIGHT_12_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_LEN12_FROM_PKT_mac_header__mac_da_47_32_VALUE);
 __PRAGMA_FLUSH_MEMORY
 
 }
@@ -892,6 +893,7 @@ ACCEL_INFO_STC accelInfoArrFalconImage02Previous[] =
     ,{ FALCON_ENUM_NAME_AND_VALUE( ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x3A_LEN14_TO_DESC_phal2ppa__egress_byte_count_OFFSET),         65}
     ,{ FALCON_ENUM_NAME_AND_VALUE( COPY_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CFG_erspan_template__mac_da_47_32_LEN16_TO_PKT_IPv6_Header__version_MINUS18_OFFSET), 65}
     ,{ FALCON_ENUM_NAME_AND_VALUE( ADD_BITS_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_CONST_0x3E_LEN14_TO_DESC_phal2ppa__egress_byte_count_OFFSET),         65}
+    ,{ FALCON_ENUM_NAME_AND_VALUE( SHIFTRIGHT_12_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_LEN12_FROM_PKT_mac_header__mac_da_47_32_OFFSET),           65}
 /*************** Last Entry *******************/
     /*must be last*/
     ,{NULL , 0 , 0}
diff --git a/simulation/simDevices/src/asicSimulation/SKernel/sEmbeddedCpu/firmware/falcon_pha/Image02Previous/ppa_fw_threads_FalconImage02Previous.c b/simulation/simDevices/src/asicSimulation/SKernel/sEmbeddedCpu/firmware/falcon_pha/Image02Previous/ppa_fw_threads_FalconImage02Previous.c
index b11cf188a8..2744145c62 100644
--- a/simulation/simDevices/src/asicSimulation/SKernel/sEmbeddedCpu/firmware/falcon_pha/Image02Previous/ppa_fw_threads_FalconImage02Previous.c
+++ b/simulation/simDevices/src/asicSimulation/SKernel/sEmbeddedCpu/firmware/falcon_pha/Image02Previous/ppa_fw_threads_FalconImage02Previous.c
@@ -4522,11 +4522,11 @@ void PPA_FW(THR64_Erspan_TypeII_SameDevMirroring_Ipv4)() {
     /* xt_iss_client_command("profile","enable");             */
     /* xt_iss_client_command("profile","disable"); _exit(0);  */
 
-    uint32_t    sessionId;
-    uint32_t    smemAnalyzerTemplateBaseAddr;
-    uint32_t    smemAnalayzerTemplateOfst;
-    uint32_t    descRxSniff;
-    uint32_t    vlanVid;
+    uint32_t    sessionId;                      /* holds Ingress or Egress session ID (10 bits)                   */ 
+    uint32_t    smemAnalyzerTemplateBaseAddr;   /* holds base address of sFlow templates in shared memory         */
+    uint32_t    smemAnalayzerTemplateOfst;      /* holds base address of specific sFlow template in shared memory */
+    uint32_t    descRxSniff;                    /* holds value of Desc<rx_sniff> field                            */
+    uint32_t    vlanVid;                        /* holds value of vlan vid taken from shared memory template      */
 
 
     /* Get pointer to descriptor */
@@ -4786,12 +4786,13 @@ void PPA_FW(THR64_Erspan_TypeII_SameDevMirroring_Ipv4)() {
  *              src & trg entries: PHA Target port table holds original packet target physical port for Egress mirroring (2B)  
  *                                 PHA Source port table holds original packet source physical port for Ingress mirroring (2B)
  *
- *              hdr in:  | Extension space (64B) | dummy RSPAN tag(4B) | dummy E-Tag (8B) | payload |
- *              hdr out: | Extension space (6B or 2B) | MAC addresses(12B) | VLAN(4B) or not | ET(2B) | IPv6(40B) | GRE(8B) | ERSPAN Type II(8B) | payload |
+ *              hdr in:  | Extension space (64B) | origin MAC(12B) | dummy RSPAN tag(4B) | dummy E-Tag (8B) | payload |
+ *              hdr out: | Extension space (6B or 2B) | MAC(12B) | VLAN(4B) or not | ET(2B) | IPv6(40B) | GRE(8B) | ERSPAN Type II(8B) | origin MAC(12B) | payload |
  *              Header Window anchor= Outer Layer 2
  *              Header Window size= 96 bytes + 64 bytes Header increment space
  *
  *              Firmware adds the tunnel and sets the values according to architect's definitions.
+ *              - Copy origin MAC into dummy E-tag & RSPAN  
  *              - Add IPv6 and L2 headers which are copied from shared memory 
  *              - Add GRE & ERSPAN Type II and set them according to Architect's definitions
  *              - Set IPv6 payload length  
@@ -4803,11 +4804,11 @@ void PPA_FW(THR65_Erspan_TypeII_SameDevMirroring_Ipv6)() {
     /* xt_iss_client_command("profile","enable");             */
     /* xt_iss_client_command("profile","disable"); _exit(0);  */
 
-    uint32_t    sessionId;
-    uint32_t    smemAnalyzerTemplateBaseAddr;
-    uint32_t    smemAnalayzerTemplateOfst;
-    uint32_t    descRxSniff;
-    uint32_t    vlanVid;
+    uint32_t    sessionId;                     /* holds Ingress or Egress session ID (10 bits)                   */
+    uint32_t    smemAnalyzerTemplateBaseAddr;  /* holds base address of sFlow templates in shared memory         */
+    uint32_t    smemAnalayzerTemplateOfst;     /* holds base address of specific sFlow template in shared memory */
+    uint32_t    descRxSniff;                   /* holds value of Desc<rx_sniff> field                            */
+    uint32_t    vlanVid;                       /* holds value of vlan vid taken from shared memory template      */
 
 
     /* Get pointer to descriptor */
@@ -4918,6 +4919,16 @@ void PPA_FW(THR65_Erspan_TypeII_SameDevMirroring_Ipv6)() {
     __LOG_PARAM_FW(vlanVid);
 
 
+    /*-----------------------------------------------------------------------------------------------------------------------------------------------
+     - Move origin MAC addresses into dummy RSPAN & E-Tag section
+     ------------------------------------------------------------------------------------------------------------------------------------------------*/
+
+    /* Move right origin MAC addresses by 12 bytes and overrun dummy RSPAN & E-tag */
+    __LOG_FW(("Move right origin MAC addresses by 12 bytes and overrun dummy RSPAN & E-tag"));
+    ACCEL_CMD_TRIG(SHIFTRIGHT_12_BYTES_THR65_Erspan_TypeII_SameDevMirroring_Ipv6_LEN12_FROM_PKT_mac_header__mac_da_47_32_OFFSET, 0);
+    __PRAGMA_NO_REORDER
+
+
     /*-----------------------------------------------------------------------------------------------------------------------------------------------
      - Set Ether Type to 0x86dd (IPv6)
      ------------------------------------------------------------------------------------------------------------------------------------------------*/
