# xpSaiAttrComplianceArrayGen.py
#
#/*******************************************************************************
#* Copyright (c) 2021 Marvell. All rights reserved. The following file is       *
#* subject to the limited use license agreement by and between Marvell and you, *
#* your employer or other entity on behalf of whom you act. In the absence of   *
#* such license agreement the following file is subject to Marvell`s standard   *
#* Limited Use License Agreement.                                               *
#********************************************************************************/

# This script parses the sai header files to generate array which contains the
# attributes compliance details by xdk. The attributes that are not supported by
# xdk should be included in xpSaiNotSupported.txt file. The array written into
# xpSaiAttrComplianceArray.txt file in util/include

import argparse
import os.path

parser = argparse.ArgumentParser(description='This script generates array for SAI attribute compliance',
      epilog='XPS/SAI Attribute compiliance is defined in the array These arrays are autogenerated by xpSaiAttrComplianceArrayGen.py script and stored in xpSaiAttrComplianceArray.txt file. As a fact, attributes flags and usage conditions depend on SAI headers version. Also, we have to take into account that XPS layer does not support all SAI attributes.\nPlease note, we have to run this script after SAI headers modification or xpSaiNotSupported.txt file modification.\nPlease follow SAI/xpSai/saiShell/README.txt prior to running the script.\nList of unsupported attributes is stored in SAI/xpSai/util/xpSaiNotSupported.txt document.\n',
                                 formatter_class=argparse.RawTextHelpFormatter)

args = parser.parse_args()

import sys
import os
from xml.etree import ElementTree

file_name = '../../xpSai/sai/xml/all.xml'
full_file = os.path.join('',file_name)

# Verify all.xml file is present
if not os.path.isfile(full_file):
    print "Failed to find all.xml file.\nPlease see README.txt for details."
    exit()

dom = ElementTree.parse(full_file)

root= dom.getroot()

# Defined strings for functions
keystr = 'sai_status_t'

# Declare dictionaries
file_list ={}
union_membrs = {}
enum_db = {}
supported_attrib_count = {}

# Define Strings for attributes
keystr = "_attr_t"

#Each attribute-id has a flag associated with it which defines the scope of that attribute.If the flag is READ-ONLY then the attribute can only be read,If CREATE-AND-SET then the attribute can be used while creating an object and also can be modified later and so on.. SAI 1.0 has six types of flags which are stated below.
#TODO UPDATE Required if new flags introduced
readonly = ['READ-ONLY', 'READ_ONLY']
readwrite =['READ-WRITE', 'READ_WRITE']
createset = ['CREATE_AND_SET', 'CREATE-AND-SET']
mand_on_create_only =['MANDATORY_ON_CREATE|CREATE_ONLY', 'MANDATORY_ON_CREATE | CREATE_ONLY']
mand_on_create_and_set = ['MANDATORY_ON_CREATE | CREATE_AND_SET','MANDATORY_ON_CREATE|CREATE_AND_SET', 'CREATE_AND_SET|MANDATORY_ON_CREATE', 'CREATE_AND_SET | MANDATORY_ON_CREATE']

createonly = ['CREATE_ONLY','CREATE-ONLY']

def getEnumDbFromxml():

        for child in root:
            # Search for child of kind file in the xml file
            if child.attrib['kind'] == 'file':
                # File name is present in element compoundname.text
                filename = (child.find('compoundname').text).replace('.h','')

                # Each compound has multiple sections
                sections = child.findall('sectiondef')

                # Search for sections of kind enum
                for x in sections:
                    if x.attrib['kind'] == 'enum':
                        # Section of kind enum has all the defined enums as its members
                        for y in x:
                            enum_name = y.find('name').text
                            enum_name = enum_name[1:]
                            #print enum_name
                            enum_members = []
                            for z in y:
                                # Element y has the all attributes as its members 
                                # Check if member is of type 'enumvalue'
                                if z.tag == 'enumvalue':
                                    enum_member = z.find('name').text
                                    enum_members.append(enum_member)
                            enum_db[enum_name] = enum_members
                            #print enum_members
def getAttrDSFromxml():
        # Define Strings for attributes
        keystr = "_attr_t"
        typeset = "NO"
        flagset = "NO"
        nameset = "NO"

        attr_proprty = {}
        objct_list = {}
        objct_attr_list = {}
        objct_modules ={}

        for child in root:
            # Search for child of kind file in the xml file
            if child.attrib['kind'] == 'file':
                # File name is present in element compoundname.text
                filename = (child.find('compoundname').text).replace('.h','')

                # Each compound has multiple sections
                sections = child.findall('sectiondef')

                # Search for sections of kind enum
                for x in sections:
                    if x.attrib['kind'] == 'enum':
                        # Section of kind enum has all the defined enums as its members
                        for y in x:
                            # Check if enum y  is that of attributes
                            string = y.find('name').text
                            # keystr = "_attr_t" if keystr present in string then the enum is defined for attribute_list
                            if keystr in string:
                                # Framing the object name from enum name
                                objctname = string.replace('_sai_','').replace(keystr,'').strip()
                                for z in y:
                                    # Element y has the all attributes as its members
                                    # Check if member is of type 'enumvalue'
                                    if z.tag == 'enumvalue':
                                        attr_id = z.find('name').text
                                        attr_proprty['attr_id']=attr_id
                                        detail = z.find('detaileddescription') # Element 'detaileddescription' has the properties of the attributes as its children
                                        flagset = "NO"
                                        conditionset = "NO"
                                        # Iterate through the children of detaileddescription to know the property of the attrributes
                                        for ab in detail:
                                            for ppty in ab:

                                                # Check if the child is defined "Flag" property of the attribute
                                                if ((ppty.tag == 'simplesect') and (ppty.find('title').text) == "Flags:"):
                                                    flag_string = ''
                                                    flag_string = ppty.find('para').text

                                                    if flagset == "NO":
                                                            for a in readonly:
                                                                if a in flag_string  :
                                                                        attr_proprty['mandatory_on_create'] ='false'
                                                                        attr_proprty['valid_for_create'] ='false'
                                                                        attr_proprty['valid_for_set'] ='false'
                                                                        attr_proprty['valid_for_get'] ='true'
                                                                        flagset = "YES"
                                                                        break
                                                    if flagset == "NO":
                                                            for a in  readwrite :
                                                                if a in flag_string:
                                                                        attr_proprty['mandatory_on_create'] ='false'
                                                                        attr_proprty['valid_for_create'] ='false'
                                                                        attr_proprty['valid_for_set'] ='true'
                                                                        attr_proprty['valid_for_get'] ='true'
                                                                        flagset = "YES"
                                                                        break
                                                    if flagset == "NO":
                                                            for a in mand_on_create_only :
                                                                if a in flag_string:
                                                                        attr_proprty['mandatory_on_create'] ='true'
                                                                        attr_proprty['valid_for_create'] ='true'
                                                                        attr_proprty['valid_for_set'] ='false'
                                                                        attr_proprty['valid_for_get'] ='true'
                                                                        flagset = "YES"
                                                                        break
                                                    if flagset == "NO":
                                                           for a in mand_on_create_and_set :
                                                               if a in flag_string:
                                                                       attr_proprty['mandatory_on_create'] ='true'
                                                                       attr_proprty['valid_for_create'] ='true'
                                                                       attr_proprty['valid_for_set'] ='true'
                                                                       attr_proprty['valid_for_get'] ='true'
                                                                       flagset = "YES"
                                                                       break
                                                    if flagset == "NO":
                                                           for a in createset :
                                                               if a in flag_string :
                                                                       attr_proprty['mandatory_on_create'] ='false'
                                                                       attr_proprty['valid_for_create'] ='true'
                                                                       attr_proprty['valid_for_set'] ='true'
                                                                       attr_proprty['valid_for_get'] ='true'
                                                                       flagset = "YES"
                                                                       break
                                                    if flagset == "NO":
                                                           for a in createonly:
                                                               if a in flag_string :
                                                                       attr_proprty['mandatory_on_create'] ='false'
                                                                       attr_proprty['valid_for_create'] ='true'
                                                                       attr_proprty['valid_for_set'] ='false'
                                                                       attr_proprty['valid_for_get'] ='true'
                                                                       flagset = "YES"
                                                                       break

                                                elif (((ppty.tag == 'simplesect') and (ppty.find('title').text) == "Condition:") or
                                                      ((ppty.tag == 'simplesect') and (ppty.find('title').text) == "Valid only when:")) :
                                                    condition_string = ''
                                                    condition_string = ppty.find('para').text
                                                    condition_string = condition_string.replace('@@condition','')
                                                    condition_string = condition_string.replace('@@validonly','')
                                                    condition_string = condition_string.strip(' ')
                                                    #print condition_string
                                                    conditions = condition_string.split(" or ")
                                                    condition_list = []
                                                    condition_value = []
                                                    for eachcondition in conditions:
                                                        condition_list.append(eachcondition.split('==')[0])
                                                        condition_value.append(eachcondition.split('==')[1])
                                                    #print condition_list
                                                    #print condition_value
                                                    attr_proprty['condition_type'] = condition_list
                                                    attr_proprty['condition_value'] = condition_value
                                                    conditionset = "YES"

                                                else:
                                                    continue
                                        if flagset =="NO":
                                            attr_proprty['mandatory_on_create'] ='false'
                                            attr_proprty['valid_for_create'] ='false'
                                            attr_proprty['valid_for_set'] ='false'
                                            attr_proprty['valid_for_get'] ='false'

                                        if conditionset == "NO":
                                            attr_proprty['condition_type'] = ['XP_SAI_NO_CONDITION']
                                            attr_proprty['condition_value'] = ['XP_SAI_NO_CONDITION']

                                        # Build the attribute name from attr_id
                                        attr_proprty['attrib_name'] = attr_id
                                        nameset = "YES"

                                        # Parse to find the attribute type
                                        detail = z.find('detaileddescription')
                                        for ab in detail:
                                            for ppty in ab:
                                                if ((ppty.tag == 'simplesect') and (ppty.find('title').text) == "Value Type:"):
                                                    type_string = ppty.find('para').text
                                                    type_list = type_string.replace('@@type','').strip().split(' ')
                                                    attr_proprty['attrib_type'] = type_list[0]
                                                    #attr_proprty['attrib_type'] = type_string.replace('@@type','').strip()
                                                    typeset = "YES"
                                        if typeset == "NO":
                                            attr_proprty['attrib_type'] = 'undetermined'

                                        typeset = "NO"

                                        if ((not attr_id.endswith('START')) and not (attr_id.endswith('END'))):#Should Discard the START and END attributes
                                                objct_attr_list[attr_id] = attr_proprty
                                        attr_proprty = {}

                                objct_modules['attr_list'] = objct_attr_list
                                objct_modules['fn_list'] = {}
                                objct_list[objctname] = objct_modules
                                #objct_list[objctname]= [objct_attr_list]
                                objct_attr_list = {}
                                objct_modules = {}
                file_list[filename]=objct_list
                objct_list = {}

def genUnionDSFromXml():
        key_str = 'sai_attribute_value_t'
        for child in root:
            if child.attrib['kind'] == 'union':
                if key_str in (child.find('compoundname').text):

                    union_name  = child.find('compoundname').text
                    section = child.find('sectiondef')
                    members = section.findall('memberdef')

                    for member in members:
                        memberdef = member.find('definition').text
                        union_membrs[memberdef.split(' ')[0]] = member.find('name').text

# Func:  genCustomerRelatedCode
def genCustomerRelatedCode(fns):
    return

def printDS():

        fns = open('../../xpSai/util/include/xpSaiAttrComplianceArray.txt','w')

        #Writing the cpoyright to the headerfile
        fns.write('/********************************************************************************/\n')
        fns.write('/* Copyright (c) 2021 Marvell. All rights reserved. The following file is       */\n')
        fns.write('/* subject to the limited use license agreement by and between Marvell and you, */\n')
        fns.write('/* your employer or other entity on behalf of whom you act. In the absence of   */\n')
        fns.write('/* such license agreement the following file is subject to Marvell`s standard   */\n')
        fns.write('/* Limited Use License Agreement.                                               */\n')
        fns.write('/********************************************************************************/\n')

        #Writing the purpose of the script and typical usage examples
        fns.write('/*\n')
        fns.write(' * Each SAI object has some number of attributes. Each attribute has some\n')
        fns.write(' * properties (MANDATORY_ON_CREATE, CREATE_ONLY, CREATE_AND_SET) that has to be\n')
        fns.write(' * Generated array will show attribute compliance report for each attribtute\n')
        fns.write(' * property. Arrays are defined in xpSaiAttrComplianceArray.txt file.\n')
        fns.write(' *\n')
        fns.write(' * The meaning of the array is:\n')
        fns.write(' *    id;                -- sai_attr_id_t -- attribute id\n')
        fns.write(' *    xpSaiSupport;      -- bool          -- is attribute supported by SAI Adapter?\n')
        fns.write(' *    validForCreate;    -- bool          -- is attribute valid for create?\n')
        fns.write(' *    validForSet;       -- bool          -- is attribute valid for set?\n')
        fns.write(' *    validForGet;       -- bool          -- is attribute valid for get?\n')
        fns.write(' * Please note, some of the attributes are not supported. List of such attributes\n')
        fns.write(' * is located in xpSaiNotSupported.txt file.\n')
        fns.write(' */')

        genCustomerRelatedCode(fns)

        Not_suppored_features = {'nat_entry', 'nat_zone_counter', 'isolation_group', 'isolation_group_member',
                                 'port_serdes', 'port_connector', 'ipmc_group', 'ipmc_group_member',
                                 'debug_counter', 'udf_match', 'udf_group', 'udf', 'system_port',
                                 'mcast_fdb_entry', 'samplepacket', 'dtel_int_session', 'dtel_event',
                                 'dtel_queue_report', 'dtel_report_session', 'dtel', 'macsec_flow', 'macsec',
                                 'macsec_sc', 'macsec_port', 'macsec_sa', 'tam_event_threshold', 'tam_report',
                                 'tam_event_action', 'tam_collector', 'tam_tel_type', 'tam_event', 'tam_int',
                                 'tam_transport', 'tam', 'tam_telemetry', 'tam_math_func', 'rpf_group',
                                 'rpf_group_member', 'bfd_session', 'ipmc_entry', 'inseg_entry',
                                 'segmentroute_sidlist'}

        fns.write("\n\n")
        fns.write("---------------------------------------------------------------------------------------------------------------\n")
        #fns.write("Featrues not supported: \n")
        #fns.write("---------------------------------------------------------------------------------------------------------------\n")
        #fns.write('     '+'\n     '.join(map(str, Not_suppored_features)))
        #fns.write("\n---------------------------------------------------------------------------------------------------------------\n")


        #fns.write("\n\n")
        #fns.write("---------------------------------------------------------------------------------------------------------------\n")
        #fns.write("Supported featrues: \n")
        #fns.write("---------------------------------------------------------------------------------------------------------------")
        for key in file_list.keys():
            file_a = file_list[key]
            for objects in file_a.keys() :
              #if objects not in Not_suppored_features :
                fns.write("\n\n")
                fns.write("---------------------------------------------------------------------------------------------------------------\n")
                fns.write("API:\n")
                fns.write("   create_"+objects+'\n')
                fns.write("   remove_"+objects+'\n')
                fns.write("   set_"+objects+'_attribute\n')
                fns.write("   get_"+objects+'_attribute\n')
                fns.write("---------------------------------------------------------------------------------------------------------------\n")
                fns.write('Attributes: ' + 45*' ')
                fns.write("IsSupp()   create()  set_attr()   get_attr()\n")
                fns.write("---------------------------------------------------------------------------------------------------------------")
                modules = file_a[objects]
                attr_list = modules['attr_list']
                supportflag = True
                count = 0
                for attribute in attr_list.keys():
                    supportflag = True
                    enumflag = True
                    with open('../../xpSai/util/xpSaiNotSupported.txt','r') as ns:
                        for line in ns:
                            line = line.replace(' ','').replace(',','').replace(';','')
                            line = line.strip("/\n")
                            line.strip("/\t")
                            if (attribute in line) and (line in attribute):
                                supportflag = False
                                enumflag = False
                                break
                    #print supportflag
                    attr_property = attr_list[attribute]
                    #print union_membrs.keys()
                    fns.write('\n %-55s  %-9s  %-9s  %-9s  %-s'  % (attribute,  str(supportflag).lower(), attr_property['valid_for_create'], attr_property['valid_for_set'], attr_property['valid_for_get']))
                    count = count+1

                fns.write('\n')
                supported_attrib_count[objects] = count
                obj_str = ''
                obj_str = objects.strip()
                obj_str = obj_str.upper()
                #fns.write('\n#define '+obj_str+'_VALIDATION_ARRAY_SIZE ('+str(count)+')\n')

        fns.close()

if __name__ == "__main__":

    genUnionDSFromXml()
    getEnumDbFromxml()
    getAttrDSFromxml()
    printDS()
