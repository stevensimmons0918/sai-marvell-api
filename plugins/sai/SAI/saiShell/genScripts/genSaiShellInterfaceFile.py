
pathSdkInterface = "../../../../../build/SWIG/prod_ifs"
fileSdkInterface = "sdk.i"
fileSaiShellInterface = "saiShell.i"
pathSaiHeaders = "../../xpSai/sai/inc"
fileSaiShellSwigElements = "saiShellSwigElements.txt"

    
def genXpSaiShellInterfaceFile():
    ''' This function generates the xpSaiShell Interface file for swiggification
        taking the sdk part of it from the sdk.i so that there is a dependency on
        sdk interface files and hence if some directory changes or any new things
        gets added no manual intervention is requried
    '''    
    srcLine = '// stuff from product .cpp files that has to be given to SWIG'
    tgtLine = '%include "../plugins/sai/sai-src/saiShell/genScripts/saiShellCWrappers/include/allSaiShellIgnore.src.i"'
    
    saiShell = open(pathSdkInterface+"/"+fileSaiShellInterface,"w")
    saiShell.write("\n//"+"#"*100)
    saiShell.write("\n//#This file would be autogenerated on executing preprocessing.h from the saishell folder")
    saiShell.write("\n//#This file is only required for launching saishell")
    saiShell.write("\n//#This file is required for building using saiShell_py.mk target")
    saiShell.write("\n//"+"#"*100+'\n')

    #List of all files to be concatenated in this order to produce saiShell.i
    files = [pathSdkInterface+"/"+fileSdkInterface,
             fileSaiShellSwigElements]

    #Concatenating all files and changing sdk. with saiShell.
    i=0
    for fname in files:
        f = open(fname,"rb")
        contents = f.read()
        if i==0:
            #Replacing all sdk gen file to saiShell gen files
            contents = contents.replace('sdk.','saiShell.')
            #Putting allIgnores before the generation of saiShell.gen.cpp
            contents = contents.replace(srcLine,tgtLine+"\n\n"+srcLine)
        i=i+1
        saiShell.write(contents)
        saiShell.write("\n\n\n")
        f.close()

    saiShell.close()

                    

if __name__ == "__main__" :

    genXpSaiShellInterfaceFile()
