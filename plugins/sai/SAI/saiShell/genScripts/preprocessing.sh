#!/bin/bash

#Add --kernel mode for ksaiShell_py
kernelMode=0
for i in "$@"
do
    case $i in
        -k | --kernel)
        kernelMode=1
    esac
done

#Creating directory for C, header and python shell wrapper autogenerated files
mkdir -p saiShellCWrappers/include
mkdir -p saiShellPyWrappers

# Change the link to SAI sources to the current SAI directory.
SAI_LINK_NAME=sai-src
SAI_BASE_PATH=../../..
SAI_SRC_LINK_PATH=$SAI_BASE_PATH/$SAI_LINK_NAME
SAI_TARGET_DIR=SAI
SAI_ACTUAL_TARGET_DIR=`readlink $SAI_SRC_LINK_PATH`
SAI_CUST_PATCH_FILE_NAME=0001-General-patch-over-1.2.patch
SAI_HEADERS_DIR=../../xpSai/sai/inc/

if [ "$SAI_ACTUAL_TARGET_DIR" != "$SAI_TARGET_DIR" ]; then
    rm -rf $SAI_SRC_LINK_PATH
    (cd $SAI_BASE_PATH && ln -s $SAI_TARGET_DIR $SAI_LINK_NAME)
fi

#SAI header files changes required for inconsistencies in the naming and comments
#sed -i 's/sai_host_interface_api_t/sai_hostif_api_t/g' ../xpSai/sai/inc/sai.h
#sed -i 's/} sai_route_entry_attr_t;/} sai_route_attr_t;/g' ../xpSai/sai/inc/sairoute.h
#sed -i 's/sai_set_samplepacket_attribute_fn/sai_set_samplepacket_session_attribute_fn/g' ../xpSai/sai/inc/saisamplepacket.h
#sed -i 's/sai_get_samplepacket_attribute_fn/sai_get_samplepacket_session_attribute_fn/g' ../xpSai/sai/inc/saisamplepacket.h

test -e ../../../.gitmodules
if [ $? -eq 0 ] ; then
  # Checkout SAI header files potentially modified previously by ./preprocessing.sh
  (cd $SAI_HEADERS_DIR && git checkout saiacl.h saibuffer.h saiport.h sairouterinterface.h)
fi

# Check if we are building for cust. If yes then apply a patch with SAI_CUST_PATCH_FILE_NAME extensions for 1.2 SAI headers
IS_DL_PKG=0
IS_ST_PKG=0



cd ../../xpSai/sai
if ! grep -q "validonly" Doxyfile; then
  echo 'ALIASES                += "validonly    =@par Validonly:\n              @xmlonly @@validonly     @endxmlonly"' >> Doxyfile
fi

if ! grep -q "@@warning" Doxyfile; then
  echo 'ALIASES                += "warning      =@par Warning:\n                @xmlonly @@warning       @endxmlonly"' >> Doxyfile
fi

doxygen Doxyfile

#Generation of single xml file from multiple
cd xml
xsltproc combine.xslt index.xml >all.xml


#return to the generation folder
cd ../../../saiShell/


#Need to put the SAI headers in the following folders for db_gen #include to work
cp ../xpSai/sai/inc/sai*.h ./genScripts/saiShellCWrappers/include/


#Execute the db_gen.py which will generate files attr_db, db_file.txt, list_struct_db.txt, liststruct_db, union_db, union_db.txt
cd genScripts
python db_gen.py

if [ $kernelMode -eq 1 ] 
then
    #Generates the C wrapper files over the xpSaiAdapter files for ksaiShell_py
    python saiShellCWrapperGen.py --kernel
else
    #Generates the C wrapper files over the xpSaiAdapter files
    python saiShellCWrapperGen.py
fi

#saiShellPyWrapperGen.py will generate the python wrapper files for the C files generated by gen_create.py and puts in saiShellPyWrappers folder .
python saiShellPyWrapperGen.py

#Auto Generates the verification header file xpSaiValidationArrays.h into SAI/xpSai/util/include/ directory. This header file contains the validation arrays.
python xpSaiValidationArrayGen.py

#Auto Generate the saiShellInterface file saiShell.i from sdk.i so that any change in path of sdk.i will not affect saiShell.i file
python genSaiShellInterfaceFile.py
rm api_enums.txt api_structures.txt db_file.txt list_struct_db.txt union_db.txt

#Add CLI wrappers for STP bulk APIs
patch -p1 < stp_bulk_api_cli.patch
