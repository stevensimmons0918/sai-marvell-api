#!/usr/bin/env python
#  xpLinkMgr.py
#
#/*******************************************************************************
#* Copyright (c) 2021 Marvell. All rights reserved. The following file is       *
#* subject to the limited use license agreement by and between Marvell and you, *
#* your employer or other entity on behalf of whom you act. In the absence of   *
#* such license agreement the following file is subject to Marvell`s standard   *
#* Limited Use License Agreement.                                               *
#*******************************************************************************/

import sys
import time
#from datetime import datetime
import os
import re
import readline
import thread
import inspect
from multiprocessing import Process

#/**********************************************************************************/
# import cmd2 package
#/**********************************************************************************/
dirname, filename = os.path.split(os.path.abspath(__file__))
sys.path.append(dirname + "/../cli")
sys.path.append(dirname + "/../../cli")
from cmd2x import Cmd

#/**********************************************************************************/
# import everything from buildTarget
#/**********************************************************************************/
from buildTarget import *

def threaded_function(*args):
    ret = xpLinkManagerSerdesAacsServer(int(args[0]), int(args[1]), int(args[2]))
    if ret < 0:
        print 'serdes_aacs_server Failed with return value:', ret
    else:
        print 'done with return value:', ret

class all_port_an_class:
      port_down_st = 1
      port_an_st = 0
      port_lt_st = 0
      port_up_st = 0
      port_an_ability = 0x180
      port_an_ctrl = 0x3
      port_remote_an_ability = 0
      port_remote_an_ctrl = 0
      macConfigMode = 6
      #eval(MAC_MODE_1X100GB)
      port_linkstatus = 0

global all_port_an_obj
global all_port__an_thread_running
all_port_an_obj = [all_port_an_class() for port in xrange(128)]
all_port_an_thread_running = 0

def port_an_status_check(dev_id, port):
     global all_port_an_obj
     an_status_Ptr = new_uint16_tp()
     an_ability_Ptr = new_uint16_tp()
     an_remote_ability_Ptr = new_uint16_tp()
     an_ctrl_Ptr = new_uint16_tp()
     an_remote_ctrl_Ptr = new_uint16_tp()
     uint16_tp_assign(an_status_Ptr, 0)
     uint16_tp_assign(an_ability_Ptr, 0)
     uint16_tp_assign(an_remote_ability_Ptr, 0)
     uint16_tp_assign(an_ctrl_Ptr, 0)
     uint16_tp_assign(an_remote_ctrl_Ptr, 0)
     an_success = 0

     xpLinkManagerPortSoftReset(0, port, 0)
     abort_after = 0xFF
     timeout = 0
     delta = 0
     while timeout != 1:
         xpLinkManagerMacBackPlaneAutoNegStatusGet(dev_id,port,an_status_Ptr,an_ability_Ptr,an_remote_ability_Ptr,an_ctrl_Ptr,an_remote_ctrl_Ptr)
         if uint16_tp_value(an_status_Ptr)&0x100 == 0x100:    #AN Success
             an_success = 1
             break
         #if uint16_tp_value(an_ability_Ptr) & 0x198: #for 100G/40G - check on all lanes (as per IEEE it is lane0, but if there are any lane swaps)
         for portNum in range(port,port+4):
             #print('===1=====================================================================')
             xpLinkManagerMacBackPlaneAutoNegStatusGet(dev_id,portNum,an_status_Ptr,an_ability_Ptr,an_remote_ability_Ptr,an_ctrl_Ptr,an_remote_ctrl_Ptr)
             if uint16_tp_value(an_status_Ptr)&0x100 == 0x100:    #AN Success
                an_success = 1
                #print('===2=====================================================================')
                break
         if an_success == 1:
            break
         delta = delta+1
         if delta > abort_after:
            timeout = 1
            break
     if an_success != 1:
        xpLinkManagerPortSoftReset(0, port, 1)
        ret = 1
     else :
        print('========================================================================')
        print('-----AN Success----- Port Number = %d ' % (port))
        print(' Local Ability = 0x%x  ' % uint16_tp_value(an_ability_Ptr))
        print(' Remote Ability = 0x%x ' % uint16_tp_value(an_remote_ability_Ptr))
        print(' Local Ctrl = 0x%x  ' % uint16_tp_value(an_ctrl_Ptr))
        print(' Remote Ctrl = 0x%x ' % uint16_tp_value(an_remote_ctrl_Ptr))
        print('========================================================================')
        argu2 = all_port_an_obj[port].an_ability = uint16_tp_value(an_ability_Ptr)
        argu3 = all_port_an_obj[port].an_ctrl = uint16_tp_value(an_ctrl_Ptr)
        argu5 = all_port_an_obj[port].remote_an_ability = uint16_tp_value(an_remote_ability_Ptr)
        argu6 = all_port_an_obj[port].remote_an_ctrl = uint16_tp_value(an_remote_ctrl_Ptr)
        for portNum in range(port,port+4):
            xpLinkManagerMacBackPlaneAutoNegProcessReset(dev_id, portNum)
        xpLinkManagerSerdesLinkTrainingProcessSet(dev_id, port, all_port_an_obj[port].macConfigMode, 1, 0)
        xpLinkManagerMacBackPlaneAutoNegSuccessAction(dev_id, port, argu2, argu5, argu3, argu6,0,0,0,0)
        ret = 0

     delete_uint16_tp(an_status_Ptr)
     delete_uint16_tp(an_ability_Ptr)
     delete_uint16_tp(an_remote_ability_Ptr)
     delete_uint16_tp(an_ctrl_Ptr)
     delete_uint16_tp(an_remote_ctrl_Ptr)
     return ret

def port_lt_status_check(dev_id, port):
     global all_port_an_obj
     ret = xpLinkManagerSerdesLinkTrainingStatusGet(dev_id, port, all_port_an_obj[port].macConfigMode)
     if ret == 0:
         print('============================')
         print('Link Training Success for Port %d:' % (port))
         print('============================')
         xpLinkManagerMacLoopback(dev_id, port, 4, 0) #Remove Loopback
     	 xpLinkManagerPortSerdesSignalOverride(dev_id, port, 1)
     	 xpLinkManagerPortSerdesSignalOverride(dev_id, port, 0)
     return ret

def port_link_status_check(dev_id, port):
     global all_port_an_obj
     ret = 0
     linkStatus_Ptr_2 = new_uint8_tp()
     faultStatus_Ptr_3 = new_uint8_tp()
     serdesStatus_Ptr_4 = new_uint8_tp()
     xpLinkManagerGetPortStatus(dev_id, port, linkStatus_Ptr_2, faultStatus_Ptr_3, serdesStatus_Ptr_4)
     all_port_an_obj[port].port_linkstatus = uint8_tp_value(linkStatus_Ptr_2)
     if (all_port_an_obj[port].port_linkstatus == 0):
         ret=1
     delete_uint8_tp(serdesStatus_Ptr_4)
     delete_uint8_tp(faultStatus_Ptr_3)
     delete_uint8_tp(linkStatus_Ptr_2)
     return ret

def all_port_an_threaded_function():
    global all_port_an_obj
    #starttime = datetime.now()
    while True:
        for port_num in range (0, 127, 4):

            if (port_num == 60 or port_num == 64 or port_num == 68):
               continue

            if all_port_an_obj[port_num].port_down_st == 1:
               for portNum in range(port_num,port_num+4):
                   xpLinkManagerMacBackPlaneAutoNegProcessReset(0, portNum)
               ret = xpLinkManagerMacBackPlaneAutoNegProcessSet(0,port_num,all_port_an_obj[port_num].port_an_ability,all_port_an_obj[port_num].port_an_ctrl,0)
               all_port_an_obj[port_num].port_down_st = 0
               all_port_an_obj[port_num].port_an_st = 1

            if all_port_an_obj[port_num].port_an_st == 1:
               ret = port_an_status_check(0, port_num)
               if ret == 0:
                  all_port_an_obj[port_num].port_an_st = 0
                  all_port_an_obj[port_num].port_lt_st = 1

            if all_port_an_obj[port_num].port_lt_st == 1:
               ret = port_lt_status_check(0, port_num)
               if ret == 0:
                  #if port_num == 124:
                     #endtime = datetime.now()
                     #print('================================================================================================================================')
                     #print('Duration for all port AN Success: {}'.format(endtime - starttime))
                     #print('================================================================================================================================')
                  all_port_an_obj[port_num].port_lt_st = 0
                  ret = port_link_status_check(0, port_num)
                  if ret == 0:   #Port Link Up
                     all_port_an_obj[port_num].port_up_st = 1
                  #else:
                     #all_port_an_obj[port_num].port_down_st = 1
               else:
                  if ret == -1:  #Port Link Down or LT Fail or Timeout
                     all_port_an_obj[port_num].port_lt_st = 0
                     #all_port_an_obj[port_num].port_down_st = 1

            if all_port_an_obj[port_num].port_up_st == 1:
               ret = port_link_status_check(0, port_num)
               if ret != 0:      #Port Link Down
                  all_port_an_obj[port_num].port_up_st = 0
                  all_port_an_obj[port_num].port_up_st = 0
                  #all_port_an_obj[port_num].port_down_st = 1

def all_port_an_start(*args):
    global all_port_an_thread_running
    if all_port_an_thread_running == 0:
        all_port_an_thread_running = 1
        thread.start_new_thread(all_port_an_threaded_function,())

class port_bp_an_class:
    an_enabled = 0
    an_ability = 0
    an_ctrl = 0
    link_train = 0
    ieee_consortium_mode = 0
    remote_an_ability = 0
    remote_an_ctrl = 0
    trigger_port_init = 0
    dfe_tune_port_serdes = 0
    next_page_suppport = 0
    ext_next_page_suppport = 0
    start_link_training = 0
    check_link_training = 0
    clear_link_training = 0
    macConfigMode = 0

global port_bp_an_obj
global bp_an_thread_running
port_bp_an_obj = [port_bp_an_class() for port in xrange(128)]
bp_an_thread_running = 0


#/********************************************************************************/
# Back Plane AutoNeg Process BASE page Rx Check
#/********************************************************************************/
def bp_an_base_page_rx_check(dev_id, port):
     global port_bp_an_obj
     argu0 = dev_id
     argu1 = port
     argu2 = port_bp_an_obj[port].an_ability
     argu3 = port_bp_an_obj[port].an_ctrl
     argu4 = port_bp_an_obj[port].ieee_consortium_mode
     an_status_Ptr = new_uint16_tp()
     an_ability_Ptr = new_uint16_tp()
     an_remote_ability_Ptr = new_uint16_tp()
     an_ctrl_Ptr = new_uint16_tp()
     an_remote_ctrl_Ptr = new_uint16_tp()
     an_sts_Ptr = new_uint16_tp()
     an_next_page_Ptr = new_uint16_tp()
     uint16_tp_assign(an_status_Ptr, 0)
     uint16_tp_assign(an_ability_Ptr, 0)
     uint16_tp_assign(an_remote_ability_Ptr, 0)
     uint16_tp_assign(an_ctrl_Ptr, 0)
     uint16_tp_assign(an_remote_ctrl_Ptr, 0)
     is25GModeIEEE = argu4
     if ((argu2 & 0x1e00) and (is25GModeIEEE == 0)):  #25G/50G Support - BASE Page sent with NP supported
         uint16_tp_assign(an_sts_Ptr, 0)
         uint16_tp_assign(an_next_page_Ptr, 0)
         ret = xpLinkManagerMacBackPlaneAutoNegIsDone(argu0, argu1, an_sts_Ptr, an_next_page_Ptr);
         if (uint16_tp_value(an_sts_Ptr) & 0xF) | uint16_tp_value(an_next_page_Ptr):
             port_bp_an_obj[port].an_enabled = 0
             #xpB0BPANregDump(0, port/4, port%4)
             print('========================================================================')
             print(' BPAN AutoNeg Process Success Base page exchange Done for PortNum %d:' % (port))
             print('========================================================================')
             if uint16_tp_value(an_next_page_Ptr):
                 port_bp_an_obj[port].next_page_suppport = 1
             else:
                 xpLinkManagerMacBackPlaneAutoNegStatusGet(argu0,port,an_status_Ptr,an_ability_Ptr,an_remote_ability_Ptr,an_ctrl_Ptr,an_remote_ctrl_Ptr)
                 print('========================================================================')
                 print('---------- Port Number = %d ' % (port))
                 print(' Local Ability = 0x%x  ' % uint16_tp_value(an_ability_Ptr))
                 print(' Remote Ability = 0x%x ' % uint16_tp_value(an_remote_ability_Ptr))
                 print(' Local Ctrl = 0x%x  ' % uint16_tp_value(an_ctrl_Ptr))
                 print(' Remote Ctrl = 0x%x ' % uint16_tp_value(an_remote_ctrl_Ptr))
                 print('========================================================================')
                 port_bp_an_obj[port].remote_an_ability =  uint16_tp_value(an_remote_ability_Ptr)
                 port_bp_an_obj[port].remote_an_ctrl =  uint16_tp_value(an_remote_ctrl_Ptr)
                 if (port_bp_an_obj[port].remote_an_ability != 0):
                    if port_bp_an_obj[port].link_train:
                       port_bp_an_obj[port].start_link_training = 1
                    else:
                       port_bp_an_obj[port].trigger_port_init = 1
                 port_bp_an_obj[port].next_page_suppport = 0
     else:  # 100G/40G/25G-IEEE/10G Support   -  BASE Page sent without NP supported
         ret = xpLinkManagerMacBackPlaneAutoNegStatusGet(argu0,argu1,an_status_Ptr,an_ability_Ptr,an_remote_ability_Ptr,an_ctrl_Ptr,an_remote_ctrl_Ptr)
         status_done = 0
         if uint16_tp_value(an_status_Ptr)&0x100 != 0x100:
             status_done = 0
             if argu2 & 0x198: #for 100G/40G - check on all lanes (as per IEEE it is lane0, but if there are any lane swaps)
                 for portNum in range(argu1,argu1+4):
                     #portNum = argu1
                     ret = xpLinkManagerMacBackPlaneAutoNegStatusGet(argu0,portNum,an_status_Ptr,an_ability_Ptr,an_remote_ability_Ptr,an_ctrl_Ptr,an_remote_ctrl_Ptr)
                     if uint16_tp_value(an_status_Ptr)&0x100 == 0x100:    #AN Success
                        status_done = 1
                        break
         else:
             status_done = 1

         if status_done == 1:
             port_bp_an_obj[port].an_enabled = 0
             print('========================================================================')
             #xpB0BPANregDump(0, port/4, port%4)
             print('-BPAN AutoNeg Process Success Base page exchange Done for PortNum %d:' % (argu1))
             print(' Local Ability = 0x%x  ' % uint16_tp_value(an_ability_Ptr))
             print(' Remote Ability = 0x%x ' % uint16_tp_value(an_remote_ability_Ptr))
             print(' Local Ctrl = 0x%x  ' % uint16_tp_value(an_ctrl_Ptr))
             print(' Remote Ctrl = 0x%x ' % uint16_tp_value(an_remote_ctrl_Ptr))
             print('========================================================================')
             port_bp_an_obj[port].remote_an_ability =  uint16_tp_value(an_remote_ability_Ptr)
             port_bp_an_obj[port].remote_an_ctrl =  uint16_tp_value(an_remote_ctrl_Ptr)
             if port_bp_an_obj[port].remote_an_ctrl & 0x8000: #remote_np
                #if argu2 & 0x198: #for 100G/40G
                   #for portNum in range(argu1,argu1+4):
                       #xpLinkManagerRegisterPlatformGetSerdesLaneSwapFunc(
                #else:
                portNum = argu1
                xpLinkManagerMacBackPlaneAutoNegConfigureNullNextPage(0,portNum)
                print('xpLinkManagerMacBackPlaneAutoNegConfigureNullNextPage() for Port %d:' % (portNum))
             if (port_bp_an_obj[port].remote_an_ability != 0):
                if port_bp_an_obj[port].link_train:
                   port_bp_an_obj[port].start_link_training = 1
                else:
                   port_bp_an_obj[port].trigger_port_init = 1
             else:
                print("remote_an_ability is equal to ZERO")
             port_bp_an_obj[port].next_page_suppport = 0
     delete_uint16_tp(an_status_Ptr)
     delete_uint16_tp(an_ability_Ptr)
     delete_uint16_tp(an_remote_ability_Ptr)
     delete_uint16_tp(an_ctrl_Ptr)
     delete_uint16_tp(an_remote_ctrl_Ptr)
     delete_uint16_tp(an_sts_Ptr)
     delete_uint16_tp(an_next_page_Ptr)


#/********************************************************************************/
# Back Plane AutoNeg Process Send NEXT page
#/********************************************************************************/
def bp_an_next_page_send(dev_id, port):
     global port_bp_an_obj
     argu0 = dev_id
     argu1 = port
     argu2 = port_bp_an_obj[port].an_ability
     argu3 = port_bp_an_obj[port].an_ctrl
     if port_bp_an_obj[port].next_page_suppport != 0:
         ret = xpLinkManagerMacBackPlaneAutoNegSendConsortiumNextPage(argu0,argu1,argu2,argu3)
         if ret != 0:
             print('============================')
             print('BPAN AutoNeg Next Page Send Failed for PortNum %d:' % port)
             print('Return Value = %d' % (ret))
             print('============================')
             print('')

#/********************************************************************************/
# Back Plane AutoNeg Process Send Ext NEXT page
#/********************************************************************************/
def bp_an_ext_next_page_send(dev_id, port):
     global port_bp_an_obj
     argu0 = dev_id
     argu1 = port
     argu2 = port_bp_an_obj[port].an_ability
     argu3 = port_bp_an_obj[port].an_ctrl
     if port_bp_an_obj[port].ext_next_page_suppport != 0:
         ret = xpLinkManagerMacBackPlaneAutoNegSendConsortiumExtNextPage(argu0,argu1,argu2,argu3)
         if ret != 0:
             print('============================')
             print('BPAN AutoNeg Ext Next Page Send Failed for PortNum %d:' % port)
             print('Return Value = %d' % (ret))
             print('============================')
             print('')

#/********************************************************************************/
# Back Plane AutoNeg Process NEXT page Receive Check
#/********************************************************************************/
def bp_an_next_page_receive_check(dev_id, port):
     global port_bp_an_obj
     argu0 = dev_id
     argu1 = port
     argu2 = port_bp_an_obj[port].an_ability
     argu3 = port_bp_an_obj[port].an_ctrl
     argu4 = port_bp_an_obj[port].ieee_consortium_mode
     an_status_Ptr = new_uint16_tp()
     an_ability_Ptr = new_uint16_tp()
     an_remote_ability_Ptr = new_uint16_tp()
     an_ctrl_Ptr = new_uint16_tp()
     an_remote_ctrl_Ptr = new_uint16_tp()
     an_sts_Ptr = new_uint16_tp()
     an_next_page_Ptr = new_uint16_tp()
     uint16_tp_assign(an_status_Ptr, 0)
     uint16_tp_assign(an_ability_Ptr, 0)
     uint16_tp_assign(an_remote_ability_Ptr, 0)
     uint16_tp_assign(an_ctrl_Ptr, 0)
     uint16_tp_assign(an_remote_ctrl_Ptr, 0)
     is25GModeIEEE = argu4

     if port_bp_an_obj[port].next_page_suppport != 0:
         abort_after = 1      # in seconds - 1 second
         start = time.time()
         timeout = 0
         uint16_tp_assign(an_sts_Ptr, 0)
         uint16_tp_assign(an_next_page_Ptr, 0)
         while True:
               ret = xpLinkManagerMacBackPlaneAutoNegIsDone(argu0, argu1, an_sts_Ptr, an_next_page_Ptr);
               #if uint16_tp_value(an_sts_Ptr)|uint16_tp_value(an_next_page_Ptr):
               if (uint16_tp_value(an_sts_Ptr) & 0xF) | uint16_tp_value(an_next_page_Ptr):
                   break
               delta = time.time() - start
               if delta >= abort_after:
                   timeout = 1
                   break
         if timeout != 1:
             #xpB0BPANregDump(0, port/4, port%4)
             xpLinkManagerMacBackPlaneAutoNegStatusGet(argu0,port,an_status_Ptr,an_ability_Ptr,an_remote_ability_Ptr,an_ctrl_Ptr,an_remote_ctrl_Ptr)
             print('========================================================================')
             print('BPAN AutoNeg Process Success Next page exchange Done for PortNum %d:' % (argu1))
             print(' AN Sts = 0x%x ' % uint16_tp_value(an_sts_Ptr))
             print('========================================================================')
             port_bp_an_obj[port].remote_an_ability =  uint16_tp_value(an_remote_ability_Ptr)
             port_bp_an_obj[port].remote_an_ctrl =  uint16_tp_value(an_remote_ctrl_Ptr)
             port_bp_an_obj[port].ext_next_page_suppport = 1
         else:
             print('============================')
             print('BPAN AutoNeg Process Next Page Configure Timeout for PortNum %d:' % (argu1))
             print('============================')
             print('')
         port_bp_an_obj[port].next_page_suppport = 0
     delete_uint16_tp(an_status_Ptr)
     delete_uint16_tp(an_ability_Ptr)
     delete_uint16_tp(an_remote_ability_Ptr)
     delete_uint16_tp(an_ctrl_Ptr)
     delete_uint16_tp(an_remote_ctrl_Ptr)
     delete_uint16_tp(an_sts_Ptr)
     delete_uint16_tp(an_next_page_Ptr)

#/********************************************************************************/
# Back Plane AutoNeg Process Ext NEXT page Receive Check
#/********************************************************************************/
def bp_an_ext_next_page_receive_check(dev_id, port):
     global port_bp_an_obj
     argu0 = dev_id
     argu1 = port
     argu2 = port_bp_an_obj[port].an_ability
     argu3 = port_bp_an_obj[port].an_ctrl
     argu4 = port_bp_an_obj[port].ieee_consortium_mode
     an_status_Ptr = new_uint16_tp()
     an_ability_Ptr = new_uint16_tp()
     an_remote_ability_Ptr = new_uint16_tp()
     an_ctrl_Ptr = new_uint16_tp()
     an_remote_ctrl_Ptr = new_uint16_tp()
     an_sts_Ptr = new_uint16_tp()
     an_next_page_Ptr = new_uint16_tp()
     uint16_tp_assign(an_status_Ptr, 0)
     uint16_tp_assign(an_ability_Ptr, 0)
     uint16_tp_assign(an_remote_ability_Ptr, 0)
     uint16_tp_assign(an_ctrl_Ptr, 0)
     uint16_tp_assign(an_remote_ctrl_Ptr, 0)
     is25GModeIEEE = argu4

     if port_bp_an_obj[port].ext_next_page_suppport != 0:
         abort_after = 1      # in seconds - 1 second
         start = time.time()
         timeout = 0
         uint16_tp_assign(an_sts_Ptr, 0)
         uint16_tp_assign(an_next_page_Ptr, 0)
         while True:
               ret = xpLinkManagerMacBackPlaneAutoNegStatusGet(argu0,port,an_status_Ptr,an_ability_Ptr,an_remote_ability_Ptr,an_ctrl_Ptr,an_remote_ctrl_Ptr)
               if (uint16_tp_value(an_status_Ptr) & 0x100):
                   break
               delta = time.time() - start
               if delta >= abort_after:
                   timeout = 1
                   break
         if timeout != 1:
             #xpB0BPANregDump(0, port/4, port%4)
             print('========================================================================')
             print('BPAN AutoNeg Process Success Next page exchange Done for PortNum %d:' % (argu1))
             print(' Local Ability = 0x%x  ' % uint16_tp_value(an_ability_Ptr))
             print(' Remote Ability = 0x%x ' % uint16_tp_value(an_remote_ability_Ptr))
             print(' Local Ctrl = 0x%x  ' % uint16_tp_value(an_ctrl_Ptr))
             print(' Remote Ctrl = 0x%x ' % uint16_tp_value(an_remote_ctrl_Ptr))
             print(' AN Status = 0x%x ' % uint16_tp_value(an_status_Ptr))
             print('========================================================================')
             port_bp_an_obj[port].remote_an_ability =  uint16_tp_value(an_remote_ability_Ptr)
             port_bp_an_obj[port].remote_an_ctrl =  uint16_tp_value(an_remote_ctrl_Ptr)
             if port_bp_an_obj[port].link_train:
                port_bp_an_obj[port].start_link_training = 1
             else:
                port_bp_an_obj[port].trigger_port_init = 1
         else:
             print('============================')
             print('BPAN AutoNeg Process Next Page Configure Timeout for PortNum %d:' % (argu1))
             print('============================')
             print('')
         port_bp_an_obj[port].ext_next_page_suppport = 0
     delete_uint16_tp(an_status_Ptr)
     delete_uint16_tp(an_ability_Ptr)
     delete_uint16_tp(an_remote_ability_Ptr)
     delete_uint16_tp(an_ctrl_Ptr)
     delete_uint16_tp(an_remote_ctrl_Ptr)
     delete_uint16_tp(an_sts_Ptr)
     delete_uint16_tp(an_next_page_Ptr)

def bp_an_port_init(dev_id, port):
     global port_bp_an_obj
     argu0 = dev_id
     argu1 = port
     argu2 = port_bp_an_obj[port].an_ability
     argu3 = port_bp_an_obj[port].an_ctrl
     argu4 = port_bp_an_obj[port].ieee_consortium_mode
     argu5 = port_bp_an_obj[port].remote_an_ability
     argu6 = port_bp_an_obj[port].remote_an_ctrl
     print('Called:: BPAN AutoNeg Success Action, anAbility = 0x%x; Remote anAbility = 0x%x; anCtrl = 0x%x; Remote anCtrl = 0x%x' % (argu2,argu5,argu3,argu6))
     if port_bp_an_obj[port].link_train:
        ret = xpLinkManagerMacBackPlaneAutoNegSuccessAction(argu0,argu1,argu2,argu5,argu3,argu6,0,0,0,0)
     else:
        ret = xpLinkManagerMacBackPlaneAutoNegSuccessAction(argu0,argu1,argu2,argu5,argu3,argu6,0,1,0,0)
     if ret != 0:
         print('============================')
         print('BPAN AutoNeg Process Success Action Failed for PortNum %d:' % (argu1))
         print('Return Value = %d' % (ret))
         print('============================')
         print('')
     else:
         print('========================================================================')
         print('Performed BPAN AutoNeg Success Action, anAbility = 0x%x; Remote anAbility = 0x%x; anCtrl = 0x%x; Remote anCtrl = 0x%x' % (argu2,argu5,argu3,argu6))
         print('========================================================================')
     port_bp_an_obj[port].check_link_training = 1
     #port_bp_an_obj[port].clear_link_training = 1
         #xpLinkManagerMacLoopback(dev_id,port,MAC-PCS-LB,1)
         #port_bp_an_obj[port].dfe_tune_port_serdes = 1

def bp_an_serdes_start_link_training(dev_id, port):
     global port_bp_an_obj
     UMAC_BPAN_TECH_ABILITY_1000BASE_KX_BIT  =   0x0001
     UMAC_BPAN_TECH_ABILITY_10GBASE_KX4_BIT  =   0x0002
     UMAC_BPAN_TECH_ABILITY_10GBASE_KR_BIT   =   0x0004
     UMAC_BPAN_TECH_ABILITY_40GBASE_KR4_BIT  =   0x0008
     UMAC_BPAN_TECH_ABILITY_40GBASE_CR4_BIT  =   0x0010
     UMAC_BPAN_TECH_ABILITY_100GBASE_CR10_BIT=   0x0020
     UMAC_BPAN_TECH_ABILITY_100GBASE_KP4_BIT =   0x0040
     UMAC_BPAN_TECH_ABILITY_100GBASE_KR4_BIT =   0x0080
     UMAC_BPAN_TECH_ABILITY_100GBASE_CR4_BIT =   0x0100
     UMAC_BPAN_TECH_ABILITY_25GBASE_KR1_BIT  =   0x0200
     UMAC_BPAN_TECH_ABILITY_25GBASE_CR1_BIT  =   0x0400
     UMAC_BPAN_TECH_ABILITY_50GBASE_KR2_BIT  =   0x0800
     UMAC_BPAN_TECH_ABILITY_50GBASE_CR2_BIT  =   0x1000
     if ((port_bp_an_obj[port].an_ability & port_bp_an_obj[port].remote_an_ability) & (UMAC_BPAN_TECH_ABILITY_100GBASE_CR4_BIT | UMAC_BPAN_TECH_ABILITY_100GBASE_KR4_BIT)):  #100G
        port_bp_an_obj[port].macConfigMode = MAC_MODE_1X100GB
     else:
        if ((port_bp_an_obj[port].an_ability & port_bp_an_obj[port].remote_an_ability) & (UMAC_BPAN_TECH_ABILITY_50GBASE_KR2_BIT | UMAC_BPAN_TECH_ABILITY_50GBASE_CR2_BIT)): #50G
           port_bp_an_obj[port].macConfigMode = MAC_MODE_2X50GB
        else:
          if ((port_bp_an_obj[port].an_ability & port_bp_an_obj[port].remote_an_ability) & (UMAC_BPAN_TECH_ABILITY_40GBASE_CR4_BIT | UMAC_BPAN_TECH_ABILITY_40GBASE_KR4_BIT)): #40G
             port_bp_an_obj[port].macConfigMode = MAC_MODE_1X40GB
          else:
             if ((port_bp_an_obj[port].an_ability & port_bp_an_obj[port].remote_an_ability) & (UMAC_BPAN_TECH_ABILITY_25GBASE_KR1_BIT | UMAC_BPAN_TECH_ABILITY_25GBASE_CR1_BIT)): #25G
                port_bp_an_obj[port].macConfigMode = MAC_MODE_4X25GB
             else:
               if ((port_bp_an_obj[port].an_ability & port_bp_an_obj[port].remote_an_ability) & (UMAC_BPAN_TECH_ABILITY_10GBASE_KX4_BIT | UMAC_BPAN_TECH_ABILITY_10GBASE_KR_BIT)): #10G
                  port_bp_an_obj[port].macConfigMode = MAC_MODE_4X10GB

     fixedSpeed_an = 0
     if ((port_bp_an_obj[port].an_ability & 0xffff) == (UMAC_BPAN_TECH_ABILITY_100GBASE_CR4_BIT | UMAC_BPAN_TECH_ABILITY_100GBASE_KR4_BIT)):
         fixedSpeed_an = 1
     if ((port_bp_an_obj[port].an_ability & 0xffff) == UMAC_BPAN_TECH_ABILITY_100GBASE_CR4_BIT):
         fixedSpeed_an = 1
     if ((port_bp_an_obj[port].an_ability & 0xffff) == UMAC_BPAN_TECH_ABILITY_100GBASE_KR4_BIT):
         fixedSpeed_an = 1
     if ((port_bp_an_obj[port].an_ability & 0xffff) == (UMAC_BPAN_TECH_ABILITY_40GBASE_CR4_BIT | UMAC_BPAN_TECH_ABILITY_40GBASE_KR4_BIT)):
         fixedSpeed_an = 1
     if ((port_bp_an_obj[port].an_ability & 0xffff) == UMAC_BPAN_TECH_ABILITY_40GBASE_CR4_BIT):
         fixedSpeed_an = 1
     if ((port_bp_an_obj[port].an_ability & 0xffff) == UMAC_BPAN_TECH_ABILITY_40GBASE_KR4_BIT):
         fixedSpeed_an = 1
     xpLinkManagerMacBackPlaneAutoNegProcessReset(dev_id,port)
     ret = xpLinkManagerSerdesLinkTrainingProcessSet(dev_id, port, port_bp_an_obj[port].macConfigMode, fixedSpeed_an, 0)
     if ret != 0:
         print('============================')
         print('Link Training Process Set Failed for Port %d:' % (port))
         print('Return Value = %d' % (ret))
         print('============================')
         print('')
     else:
         #port_bp_an_obj[port].check_link_training = 1
         port_bp_an_obj[port].trigger_port_init = 1
         print('============================')
         print('Link Training in Progress for Port %d:' % (port))
         print('============================')

def bp_an_serdes_check_link_training(dev_id, port):
     global port_bp_an_obj
     ret = xpLinkManagerSerdesLinkTrainingStatusGetLoop(dev_id, port, port_bp_an_obj[port].macConfigMode)
     if ret != 0:
         print('============================')
         print('Link Training Status Get Loop Failed for Port %d:' % (port))
         print('Return Value = %d' % (ret))
         print('============================')
         print('')
     else:
         print('============================')
         print('Link Training Success for Port %d:' % (port))
         print('============================')
     #port_bp_an_obj[port].trigger_port_init = 1
     port_bp_an_obj[port].clear_link_training = 1
     #port_bp_an_obj[port].dfe_tune_port_serdes = 1

def bp_an_serdes_clear_link_training(dev_id, port):
     global port_bp_an_obj
     ret = xpLinkManagerSerdesLinkTrainingClear(dev_id, port, port_bp_an_obj[port].macConfigMode)
     if ret != 0:
         print('============================')
         print('Link Training Clear Failed for Port %d:' % (port))
         print('============================')
     else:
         print('============================')
         print('Link Training Cleared for Port %d:' % (port))
         print('============================')
     #port_bp_an_obj[port].trigger_port_init = 1
     xpLinkManagerMacLoopback(dev_id, port, 4, 0) #Remove Loopback
     port_bp_an_obj[port].dfe_tune_port_serdes = 1

def bp_an_dfe_tune_port_serdes(dev_id, port):
     global port_bp_an_obj
     portList = range(port, port+1)
     arrUint32 = new_arrUint32(len(portList))
     for index, value in enumerate(portList):
         arrUint32_setitem(arrUint32, index, value)
     if port_bp_an_obj[port].link_train:
         ret = xpLinkManagerTunePortSerdes(dev_id,arrUint32,len(portList),1,0)
     else:
         ret = xpLinkManagerTunePortSerdes(dev_id,arrUint32,len(portList),0,0)
     if ret != 0:
         print('========================================================================')
         print('DFE Tune Error returned = %d for portNum = %d' % (ret,port))
         print('========================================================================')
     else:
         print('========================================================================')
         print('DFE Tune Done for portNum = %d' % (port))
         print('========================================================================')
     # required for 100G FEC enabled
     xpLinkManagerPortSerdesSignalOverride(dev_id, port, 1)
     xpLinkManagerPortSerdesSignalOverride(dev_id, port, 0)

def bp_an_port_serdes_signal_overide(dev_id, port, serdesSignalVal):
     ret = xpLinkManagerPortSerdesSignalOverride(dev_id,port,serdesSignalVal)
     if ret != 0:
         print('Error returned = %d for portNum = %d' % (ret,port))

def bp_an_threaded_function():
    global port_bp_an_obj
    while True:
        for port_num in range (0, 128):
            if (port_bp_an_obj[port_num].an_enabled == 1):
                #starttime = datetime.now()
                bp_an_base_page_rx_check(0, port_num)
                #endtime = datetime.now()
                #print('Duration for AN Success: {}'.format(endtime - starttime))
        for port_num in range (0, 128):
            if (port_bp_an_obj[port_num].next_page_suppport == 1):
                bp_an_next_page_send(0, port_num)
        for port_num in range (0, 128):
            if (port_bp_an_obj[port_num].next_page_suppport == 1):
                #starttime = datetime.now()
                bp_an_next_page_receive_check(0, port_num)
                #endtime = datetime.now()
                #print('Duration for NextPage Receive Chk: {}'.format(endtime - starttime))
        for port_num in range (0, 128):
            if (port_bp_an_obj[port_num].ext_next_page_suppport == 1):
                bp_an_ext_next_page_send(0, port_num)
        for port_num in range (0, 128):
            if (port_bp_an_obj[port_num].ext_next_page_suppport == 1):
                #starttime = datetime.now()
                bp_an_ext_next_page_receive_check(0, port_num)
                #endtime = datetime.now()
                #print('Duration for Ext NextPage Receive Chk: {}'.format(endtime - starttime))
        for port_num in range (0, 128):
            if port_bp_an_obj[port_num].start_link_training == 1:
                #starttime = datetime.now()
                bp_an_port_serdes_signal_overide(0, port_num, 1)
                bp_an_serdes_start_link_training(0, port_num)
                port_bp_an_obj[port_num].start_link_training = 0
                #endtime = datetime.now()
                #print('Duration for LT Start: {}'.format(endtime - starttime))
        for port_num in range (0, 128):
            if port_bp_an_obj[port_num].trigger_port_init == 1:
                #starttime = datetime.now()
                bp_an_port_init(0, port_num)
                #endtime = datetime.now()
                port_bp_an_obj[port_num].trigger_port_init = 0
                #print('Duration for MAC Init : {}'.format(endtime - starttime))
        for port_num in range (0, 128):
            if port_bp_an_obj[port_num].check_link_training == 1:
                #starttime = datetime.now()
                bp_an_serdes_check_link_training(0, port_num)
                port_bp_an_obj[port_num].check_link_training = 0
                #endtime = datetime.now()
                #print('Duration for LT Check : {}'.format(endtime - starttime))
        for port_num in range (0, 128):
            if port_bp_an_obj[port_num].clear_link_training == 1:
                bp_an_serdes_clear_link_training(0, port_num)
                port_bp_an_obj[port_num].clear_link_training = 0
        for port_num in range (0, 128):
            if port_bp_an_obj[port_num].dfe_tune_port_serdes == 1:
                bp_an_dfe_tune_port_serdes(0, port_num)
                port_bp_an_obj[port_num].dfe_tune_port_serdes = 0

def bp_an_process_start(*args):
    global bp_an_thread_running
    if bp_an_thread_running == 0:
        bp_an_thread_running = 1
        thread.start_new_thread(bp_an_threaded_function,())

#/**********************************************************************************/
# The class object for xpLinkMgr operations
#/**********************************************************************************/

def customPrepareEyeCfgData(args):
    varArgDict = {
                   "-eyeType" : "0",
                   "-cmpMode" : "0",
                   "-minDwellBits" : "0",
                   "-maxDwellBits" : "0",
                   "-fastDynamic" : "0",
                   "-errorThreshold" : "0",
                   "-dcBalance" : "0",
                   "-transDensity" : "0",
                   "-xUI" : "0",
                   "-xResolution" : "0",
                   "-yCenterPoint" : "0",
                   "-yPoints" : "0",
                   "-yStepSize" : "0",
                   "-xAutoScale" : "0",
                   "-yAutoScale" : "0",
                   "-xShift" : "0",
                   "-gatherMean" : "0",
                   "-meanThreshold" : "0",
                   "-noSbm" : "0",
                   "-meanDirection" : "0",
           }
    #default eye config values
    eyecfg = new_xpSerdesEyeConfig_tp()
    retVal = xpLinkManagerSerdesGetEyeWithDefaultConfig (int(args[0]), int(args[1]), eyecfg);
    if(retVal != 0):
        print 'Error in getting default eye config, Return Value : %d' %(retVal)
        return None

    for index, argument in enumerate(args):
    	if "-" in argument :
    		if varArgDict.has_key(argument):
    			if (index + 1) < len(args):
    				varArgDict[argument] = args[index + 1]
                                if "-eyeType" in argument:
                                    eyecfg.ecEyeType = int(varArgDict["-eyeType"])
                                if "-cmpMode" in argument:
                                    eyecfg.ecCmpMode = int(varArgDict["-cmpMode"], 16)
                                if "-minDwellBits" in argument:
                                    eyecfg.ecMinDwellBits = long(varArgDict["-minDwellBits"])
                                if "-maxDwellBits" in argument:
                                    eyecfg.ecMaxDwellBits = long(varArgDict["-maxDwellBits"])
                                if "-fastDynamic" in argument:
                                    eyecfg.ecFastDynamic = int(varArgDict["-fastDynamic"])
                                if "-errorThreshold" in argument:
                                    eyecfg.ecErrorThreshold = int(varArgDict["-errorThreshold"])
                                if "-dcBalance" in argument:
                                    eyecfg.ecDcBalance = float(varArgDict["-dcBalance"])
                                if "-transDensity" in argument:
                                    eyecfg.ecTransDensity = float(varArgDict["-transDensity"])
                                if "-xUI" in argument:
                                    eyecfg.ecXUI = int(varArgDict["-xUI"])
                                if "-xResolution" in argument:
                                    eyecfg.ecXResolution = int(varArgDict["-xResolution"])
                                if "-yCenterPoint" in argument:
                                    eyecfg.ecYCenterPoint = int(varArgDict["-yCenterPoint"])
                                if "-yPoints" in argument:
                                    eyecfg.ecYPoints = int(varArgDict["-yPoints"])
                                if "-yStepSize" in argument:
                                    eyecfg.ecYStepSize = int(varArgDict["-yStepSize"])
                                if "-xAutoScale" in argument:
                                    eyecfg.ecXAutoScale = int(varArgDict["-xAutoScale"])
                                if "-yAutoScale" in argument:
                                    eyecfg.ecYAutoScale = int(varArgDict["-yAutoScale"])
                                if "-xShift" in argument:
                                    eyecfg.ecXShift = int(varArgDict["-xShift"])
                                if "-gatherMean" in argument:
                                    eyecfg.ecGatherMean = bool(varArgDict["-gatherMean"])
                                if "-meanThreshold" in argument:
                                    eyecfg.ecMeanThreshold = long(varArgDict["-meanThreshold"])
                                if "-noSbm" in argument:
                                    eyecfg.ecNoSbm = bool(varArgDict["-noSbm"])
                                if "-meanDirection" in argument:
                                    eyecfg.ecMeanDirection = int(varArgDict["-meanDirection"])
    			else:
    				print "data missing in argument : %s"%(argument)
    				return None
    		else:
    			print  "invalid argument : %s"%(argument)
    			return None
    print ('eyecfg.ec_eye_type        = %d' % eyecfg.ecEyeType)
    print ('eyecfg.ec_cmp_mode        = %d' % eyecfg.ecCmpMode)
    print ('eyecfg.ec_max_dwell_bits  = %i' % eyecfg.ecMaxDwellBits)
    print ('eyecfg.ec_min_dwell_bits  = %i' % eyecfg.ecMinDwellBits)
    print ('eyecfg.ec_fast_dynamic    = %d' % eyecfg.ecFastDynamic)
    print ('eyecfg.ec_error_threshold = %d' % eyecfg.ecErrorThreshold )
    print ('eyecfg.ec_x_UI            = %d' % eyecfg.ecXUI)
    print ('eyecfg.ec_x_resolution    = %d' % eyecfg.ecXResolution)
    print ('eyecfg.ec_y_center_point  = %d' % eyecfg.ecYCenterPoint)
    print ('eyecfg.ec_y_step_size     = %d' % eyecfg.ecYStepSize)
    print ('eyecfg.ec_y_points        = %d' % eyecfg.ecYPoints)
    print ('eyecfg.ec_dc_balance      = %f' % eyecfg.ecDcBalance)
    print ('eyecfg.ec_trans_density   = %f' % eyecfg.ecTransDensity)
    print ('eyecfg.ec_x_auto_scale    = %d' % eyecfg.ecXAutoScale)
    print ('eyecfg.ec_y_auto_scale    = %d' % eyecfg.ecYAutoScale)
    print ('eyecfg.ec_x_shift         = %d' % eyecfg.ecXShift )
    print ('eyecfg.ec_gather_mean     = %d' % eyecfg.ecGatherMean)
    print ('eyecfg.ec_mean_threshold  = %i' % eyecfg.ecMeanThreshold)
    print ('eyecfg.ec_no_sbm          = %d' % eyecfg.ecNoSbm)
    print ('eyecfg.ec_mean_direction  = %d' % eyecfg.ecMeanDirection )
    print ('----------------------------------')

    return eyecfg

class xpLinkMgrObj(Cmd):

    doc_header   = 'Available commands (type help <topic>):'
    undoc_header = 'Utility commands'

    #/*****************************************************************************************************/
    # command to serdes aacs server
    #/*****************************************************************************************************/
    def do_serdes_aacs_server(self, arg):
        '''
         Run serdes_aacs_server command as different process: Enter [devId,serdesId,tcpPort ]
        '''
        args =  arg.split()
        if  len(args) < 3:
            print('Invalid input, Enter [ devId, serdesId, tcpPort ]')
        else:
            print('Input Arguments are, devId=%d serdesId=%d tcpPort=%d' % (int(args[0]), int(args[1]), int(args[2])))
            p1 = Process(target = threaded_function, args = tuple(args))
            p1.start()

    #/********************************************************************************/
    # command for xpLinkManagerPrintAllPortStatus
    #/********************************************************************************/
    def do_print_all_port_status(self, arg):
        '''
         xpLinkManagerPrintAllPortStatus: Enter [ devId ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 1
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId ]')
        else:
            args[0] = int(args[0])
            #print('Input Arguments are, devId=%d' % (args[0]))
            ret = xpLinkManagerPrintAllPortStatus(args[0])

    #/********************************************************************************/
    # command for xpLinkManagerPrintPortStatus
    #/********************************************************************************/
    def do_print_port_status(self, arg):
        '''
         xpLinkManagerPrintPortStatus: Enter [ devId, portNum/startPort-endPort]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId, portNum/startPort-endPort]')
        else:
            args[0] = int(args[0])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        if (176 == portNum):
                            xpLinkManagerPrintCPUPortStatus(args[0])
                        else:
                            xpLinkManagerPrintPortStatus(args[0], portNum)


    #/********************************************************************************/
    # command for xpLinkManagerSerdesAutoTune
    #/********************************************************************************/
    def do_serdes_auto_tune(self, arg):
        '''
         xpLinkManagerSerdesAutoTune: Enter [ devId ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 1
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId ]')
        else:
            args[0] = int(args[0])
            #print('Input Arguments are, devId=%d' % (args[0]))
            ret = xpLinkManagerSerdesAutoTune(args[0])
            if ret != 0:
                print('Return Value = %d' % (ret))
            else:
                pass

    #/********************************************************************************/
    # command for xpLinkManagerAddDevice
    #/********************************************************************************/
    def do_add_device(self, arg):
        '''
         xpLinkManagerAddDevice: Enter [ devId,initType]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,initType]')
        else:
            args[0] = int(args[0])
            args[1] = int(args[1])
            ret = xpLinkManagerAddDevice(args[0],args[1])
            if ret != 0:
                print('Return Value = %d' % (ret))
            else:
                pass

    #/********************************************************************************/
    # command for xpLinkManagerRemoveDevice
    #/********************************************************************************/
    def do_remove_device(self, arg):
        '''
         xpLinkManagerRemoveDevice: Enter [ devId ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 1
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId ]')
        else:
            args[0] = int(args[0])
            #print('Input Arguments are, devId=%d' % (args[0]))
            ret = xpLinkManagerRemoveDevice(args[0])
            if ret != 0:
                print('Return Value = %d' % (ret))
            else:
                pass

    #/********************************************************************************/
    # command for xpLinkManagerSwitchMacConfigMode
    #/********************************************************************************/
    def do_port_group_speed_set(self, arg):
        '''
         xpLinkManagerSwitchMacConfigMode: Enter [ devId,ptgNum/startPtg-endPtg,speedMode,fecMode,enableFEC]
            print('Valid ptgNum are: 0 to 31')
            Valid speedMode are: 1x100G, 1x40G, 2x40G, 2x50G, 1x50G, 4x10G, 4x25G, 4x1G
            Valid FECMode are: RS, FC'
        '''
        args = re.split(';| ',arg)
        numArgsReq = 5
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId, ptgNum/startPtg-endPtg, speedMode, fecMode, enableFEC]')
            print('Valid ptgNum are: 0 to 31')
            print('Valid speedMode are: 1x100G, 1x40G, 2x40G, 2x50G, 1x50G, 4x10G, 4x25G, 4x1G')
            print('Valid FECMode are: RS, FC')

        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startPtg = int(args[1].split('-')[0].strip())
                endPtg = int(args[1].split('-')[1].strip())
                if startPtg > endPtg:
                    print('improper range')
                    return
            else:
                args[1] = int(args[1])
                startPtg = args[1]
                endPtg = args[1]
            #args[2] = int(args[2])

            if (args[2] == '1x100G') :
                macMode = eval('MAC_MODE_1X100GB')
            elif (args[2] == '1x40G') :
                macMode = eval('MAC_MODE_1X40GB')
            elif (args[2] == '2x40G') :
                macMode = eval('MAC_MODE_2X40GB')
            elif (args[2] == '2x50G') :
                macMode = eval('MAC_MODE_2X50GB')
            elif (args[2] == '1x50G') :
                macMode = eval('MAC_MODE_1X50GB')
            elif (args[2] == '4x10G') :
                macMode = eval('MAC_MODE_4X10GB')
            elif (args[2] == '4x25G') :
                macMode = eval('MAC_MODE_4X25GB')
            elif (args[2] == '4x1G') :
                macMode = eval('MAC_MODE_4X1G')
            else :
                print('Invalid speedMode provided')
                return

            enableFEC = int(args[4])

            if enableFEC :
                if (args[3] == 'RS') :
                    fecMode = eval('RS_FEC_MODE')
                elif (args[3] == 'FC') :
                    fecMode = eval('FC_FEC_MODE')
                else :
                    print('Invalid FECMode provided')
                    return
            else:
                fecMode = eval('MAX_FEC_MODE')

            for ptgNum in range(startPtg,endPtg+1):
                ret = xpLinkManagerSwitchMacConfigMode(args[0],ptgNum,macMode, fecMode, enableFEC)
                if ret != 0:
                    print('Return Value = %d for ptgNum = %d' % (ret,ptgNum))
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerSwitchMacConfigMode
    #/********************************************************************************/
    def do_port_init(self, arg):
        '''
         xpLinkManagerPortInit: Enter [ devId,portNum/startPortNum-endPortNum,speedMode,fecMode,enableFEC,initSerdes]
            Valid portNum are: 0 to 127 and 176
            Valid speedMode are: 1x100G, 1x40G, 2x40G, 1x50G, 2x50G, 4x10G, 4x25G, 4x1G, 1x10G, 1G
            176 is the CPU eth interface port. Valid mac mode for CPU port is 1x10G and 1G
            port 176 doesn't support FEC
            Valid FECMode are: RS, FC'
        '''
        args = re.split(';| ',arg)
        numArgsReq = 6
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId, portNum/startPortNum-endPortNum, speedMode, fecMode, enableFEC, initSerdes]')
            print('Valid portNum are: 0 to 127 and 176')
            print('176 is the CPU eth interface port. Valid mac mode for this is 1x10G and 1G')
            print('Valid speedMode are: 1x100G, 1x40G, 2x40G, 1x50G, 2x50G, 4x10G, 4x25G, 4x1G, 1x10G, 1G')
            print('1x10G used for the dmac port 176. port 176 does not support FEC')
            print('Valid FECMode are: RS, FC')

        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startport = int(args[1].split('-')[0].strip())
                endport = int(args[1].split('-')[1].strip())
                if startport > endport:
                    print('improper range')
                    return
            else:
                args[1] = int(args[1])
                startport = args[1]
                endport = args[1]
            #args[2] = int(args[2])

            if (args[2] == '1x100G') :
                macMode = eval('MAC_MODE_1X100GB')
            elif (args[2] == '1x40G') :
                macMode = eval('MAC_MODE_1X40GB')
            elif (args[2] == '2x40G') :
                macMode = eval('MAC_MODE_2X40GB')
            elif (args[2] == '1x50G') :
                macMode = eval('MAC_MODE_1X50GB')
            elif (args[2] == '2x50G') :
                macMode = eval('MAC_MODE_2X50GB')
            elif (args[2] == '4x10G') :
                macMode = eval('MAC_MODE_4X10GB')
            elif (args[2] == '4x25G') :
                macMode = eval('MAC_MODE_4X25GB')
            elif (args[2] == '1x10G') :
                macMode = eval('MAC_MODE_1X10GB')
            elif (args[2] == '4x1G') :
                macMode = eval('MAC_MODE_4X1GB')
            elif (args[2] == '1G') :
                macMode = eval('MAC_MODE_1GB')
            else :
                print('Invalid speedMode provided')
                return

            enableFEC = int(args[4])
            initSerdes = int(args[5])
            prbsTestMode = 0
            firmwareUpload = 0

            if enableFEC :
                if (args[3] == 'RS') :
                    fecMode = eval('RS_FEC_MODE')
                elif (args[3] == 'FC') :
                    fecMode = eval('FC_FEC_MODE')
                else :
                    print('Invalid FECMode provided')
                    return
            else:
                fecMode = eval('MAX_FEC_MODE')

            for portNum in range(startport,endport+1):
                ret = xpLinkManagerPortInit(args[0],portNum,macMode,initSerdes,prbsTestMode,firmwareUpload,fecMode,enableFEC)
                if ret != 0:
                    print('Return Value = %d for portNum = %d' % (ret,portNum))
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerPortInitWithLinkStatusControl
    #/********************************************************************************/
    def do_port_init_with_link_status_control(self, arg):
        '''
         xpLinkManagerPortInitWithLinkStatusControl : Enter [ devId,portNum/startPortNum-endPortNum,speedMode,fecMode,enableFEC,initSerdes,keepPortDown]
            Valid portNum are: 0 to 127 and 176
            Valid speedMode are: 1x100G, 1x40G, 2x40G, 2x50G, 4x10G, 4x25G, 4x1G, 1x10G, 1G
            176 is the CPU eth interface port. Valid mac mode for CPU port is 1x10G and 1G
            port 176 doesn't support FEC
            Valid FECMode are: RS, FC
            keepPortDown : when 1 it will keep the port status as down upon port init
        '''
        args = re.split(';| ',arg)
        numArgsReq = 7
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId, portNum/startPortNum-endPortNum, speedMode, fecMode, enableFEC, initSerdes, keepPortDown]')
            print('Valid portNum are: 0 to 127 and 176')
            print('176 is the CPU eth interface port. Valid mac mode for this is 1x10G and 1G')
            print('Valid speedMode are: 1x100G, 1x40G, 2x40G, 2x50G, 4x10G, 4x25G, 4x1G, 1x10G, 1G')
            print('1x10G used for the dmac port 176. port 176 does not support FEC')
            print('Valid FECMode are: RS, FC')
            print('keepPortDown : when 1 it will keep the port status as down upon port init')

        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startport = int(args[1].split('-')[0].strip())
                endport = int(args[1].split('-')[1].strip())
                if startport > endport:
                    print('improper range')
                    return
            else:
                args[1] = int(args[1])
                startport = args[1]
                endport = args[1]
            #args[2] = int(args[2])

            if (args[2] == '1x100G') :
                macMode = eval('MAC_MODE_1X100GB')
            elif (args[2] == '1x40G') :
                macMode = eval('MAC_MODE_1X40GB')
            elif (args[2] == '2x40G') :
                macMode = eval('MAC_MODE_2X40GB')
            elif (args[2] == '2x50G') :
                macMode = eval('MAC_MODE_2X50GB')
            elif (args[2] == '4x10G') :
                macMode = eval('MAC_MODE_4X10GB')
            elif (args[2] == '4x25G') :
                macMode = eval('MAC_MODE_4X25GB')
            elif (args[2] == '4x1G') :
                macMode = eval('MAC_MODE_4X1G')
            elif (args[2] == '1x10G') :
                macMode = eval('MAC_MODE_1X10GB')
            elif (args[2] == '1G') :
                macMode = eval('MAC_MODE_1GB')
            else :
                print('Invalid speedMode provided')
                return

            enableFEC = int(args[4])
            initSerdes = int(args[5])
            keepPortDown = int(args[6])
            prbsTestMode = 0
            firmwareUpload = 0

            if enableFEC :
                if (args[3] == 'RS') :
                    fecMode = eval('RS_FEC_MODE')
                elif (args[3] == 'FC') :
                    fecMode = eval('FC_FEC_MODE')
                else :
                    print('Invalid FECMode provided')
                    return
            else:
                fecMode = eval('MAX_FEC_MODE')

            for portNum in range(startport,endport+1):
                ret = xpLinkManagerPortInitWithLinkStatusControl(args[0],portNum,macMode,initSerdes,prbsTestMode,firmwareUpload,fecMode,enableFEC,keepPortDown)
                if ret != 0:
                    print('Return Value = %d for portNum = %d' % (ret,portNum))
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerPortDeInit
    #/********************************************************************************/
    def do_port_de_init(self, arg):
        '''
         xpLinkManagerPortDeInit: Enter [ devId,portNum/startPortNum-endPortNum ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPortNum-endPortNum ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startPort = int(args[1].split('-')[0].strip())
                endPort = int(args[1].split('-')[1].strip())
                if startPort > endPort or (endPort > 127 and endPort != 176):
                    print('Invalid input, Enter [ devId,portNum')
                    print('Valid portNum are: 0 to 127 and 176')
                    print('improper range')
                    return
            else:
                args[1] = int(args[1])
                startPort = args[1]
                endPort = args[1]
            for portNum in range(startPort,endPort+1):
                ret = xpLinkManagerPortDeInit(args[0],portNum)
                if ret != 0:
                    print('Return Value = %d for portNum = %d' % (ret,portNum))
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerPrintCPUPortStatus
    #/********************************************************************************/
    def do_print_cpu_port_status(self, arg):
        '''
         xpLinkManagerPrintCPUPortStatus: Enter [ devId ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 1
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId ]')
        else:
            args[0] = int(args[0])
            #print('Input Arguments are, devId=%d' % (args[0]))
            ret = xpLinkManagerPrintCPUPortStatus(args[0])
            if ret != 0:
                print('Return Value = %d' % (ret))
            else:
                pass

    #/********************************************************************************/
    # command for xpLinkManagerMacConfigModeDebugSet
    #/********************************************************************************/
    def do_mac_config_mode_debug_set(self, arg):
        '''
         xpLinkManagerMacConfigModeDebugSet: Enter [ devId,portNum/startPort-endPort,macConfig ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,macConfig ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, macConfig=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerMacConfigModeDebugSet(args[0],portNum,args[2])
                        if ret !=0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerPortGroupMacInit
    #/********************************************************************************/
    def do_port_group_init(self, arg):
        '''
         xpLinkManagerPortGroupMacInit: Enter [ devId, ptgNum/startPtg-endPtg,speedMode, initSerdes, fecMode, enableFEC ]
            Valid ptgNum are: 0 to 31
            Valid speedMode are: 1x100G, 1x40G, 2x40G, 2x50G, 1x50G, 4x10G, 4x25G, MIXED_MODE_10G, SGMII, 1000BASE_R, MIXED_MODE_SGMII, MIXED_MODE_1000BASE_R
            Valid FEC mode: RS, FC
            SGMII and MIXED_MODE_SGMII will configure in 1G speed by default. you can change speed using set_sgmii_port_speed command.
        '''
        args = re.split(';| ',arg)
        numArgsReq = 6
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId, ptgNum/startPtg-endPtg, speedMode, initSerdes, fecMode, enableFEC ]')
            print('Valid ptgNum are: 0 to 31')
            print('Valid speedMode are: 1x100G, 1x40G, 2x40G, 2x50G, 1x50G, 4x10G, 4x25G, MIXED_MODE_10G, SGMII, 1000BASE_R, MIXED_MODE_SGMII, MIXED_MODE_1000BASE_R')
            print('Valid FECMode are: RS, FC')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startPtg = int(args[1].split('-')[0].strip())
                endPtg = int(args[1].split('-')[1].strip())
                if startPtg > endPtg or endPtg > 31:
                    print('Invalid input, Enter [ devId,ptgNum/startPtg-endPtg,speedMode,initSerdes, fecMode, enableFEC')
                    print('Valid ptgNum are: 0 to 31')
                    print('Valid speedMode are: 1x100G, 1x40G, 2x40G, 2x50G, 1x50G, 4x10G, 4x25G, MIXED_MODE_10G, SGMII, 1000BASE_R, MIXED_MODE_SGMII, MIXED_MODE_1000BASE_R')
                    print('Valid FECMode are: RS, FC')
                    return
            else:
                args[1] = int(args[1])
                startPtg = args[1]
                endPtg = args[1]
            sgmiiSpeed = 9
            if (args[2] == '1x100G') :
                macMode = eval('MAC_MODE_1X100GB')
            elif (args[2] == '1x40G') :
                macMode = eval('MAC_MODE_1X40GB')
            elif (args[2] == '1x50G') :
                macMode = eval('MAC_MODE_1X50GB')
            elif (args[2] == '2x40G') :
                macMode = eval('MAC_MODE_2X40GB')
            elif (args[2] == '2x50G') :
                macMode = eval('MAC_MODE_2X50GB')
            elif (args[2] == '4x10G') :
                macMode = eval('MAC_MODE_4X10GB')
            elif (args[2] == '4x25G') :
                macMode = eval('MAC_MODE_4X25GB')
            elif (args[2] == 'MIXED_MODE_10G') :
                macMode = eval('MAC_MODE_MIX_4_CHANNEL_10G')
            elif (args[2] == '4x1G') :
                macMode = eval('MAC_MODE_4X1GB')
            elif (args[2] == '1000BASE_R') :
                macMode = eval('MAC_MODE_1000BASE_R')
            elif (args[2] == 'MIXED_MODE_SGMII') :
                macMode = eval('MAC_MODE_MIX_SGMII')
                sgmiiSpeed = 2
            elif (args[2] == 'MIXED_MODE_1000BASE_R') :
                macMode = eval('MAC_MODE_MIX_1000BASE_R')
            else :
                print('Invalid speedMode provided')
                return
            initSerdes = int(args[3])
            enableFEC = int(args[5])
            prbsTestMode = 0
            firmwareUpload = 0

            if enableFEC :
                if (args[4] == 'RS') :
                    fecMode = eval('RS_FEC_MODE')
                elif (args[4] == 'FC') :
                    fecMode = eval('FC_FEC_MODE')
                else :
                    print('Invalid FECMode provided')
                    return
            else:
                fecMode = eval('MAX_FEC_MODE')

            for ptgNum in range(startPtg,endPtg+1):
                ret = xpLinkManagerPortGroupInit(args[0],ptgNum,macMode,sgmiiSpeed,initSerdes,prbsTestMode,firmwareUpload, fecMode, enableFEC)
                if ret != 0:
                    print('Return Value = %d for ptgNum = %d' % (ret,ptgNum))
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerPortGroupInit
    #/********************************************************************************/
    def do_port_group_reinit(self, arg):
        '''
         xpLinkManagerPortGroupReInit: Enter [ devId,ptgNum/startPtg-endPtg,speedMode,fecMode,enableFEC]
            Re-Init(DeInit PTG followed by Init PTG) the portGroup (PTG) without touching the serdes
            Valid ptgNum are: 0 to 31
            Valid speedMode are: 1x100G, 1x40G, 2x40G, 2x50G, 4x10G, 4x25G, SGMII, MIXED_MODE_SGMII, MIXED_MODE_10G
            Valid FEC mode: RS, FC
        '''
        args = re.split(';| ',arg)
        numArgsReq = 5
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,ptgNum/startPtg-endPtg,speedMode, fecMode, enableFEC]')
            print('Valid ptgNum are: 0 to 31')
            print('Valid speedMode are: 1x100G, 1x40G, 2x40G, 2x50G, 4x10G, 4x25G, SGMII, MIXED_MODE_SGMII, MIXED_MODE_10G')
            print('Valid FEC mode: RS, FC')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startPtg = int(args[1].split('-')[0].strip())
                endPtg = int(args[1].split('-')[1].strip())
                if startPtg > endPtg or endPtg > 31:
                    print('Invalid input, Enter [ devId,ptgNum/startPtg-endPtg,speedMode, fecMode, enableFEC')
                    print('Valid ptgNum are: 0 to 31')
                    print('Valid speedMode are: 1x100G, 1x40G, 2x40G, 2x50G, 4x10G, 4x25G, SGMII, MIXED_MODE_SGMII, MIXED_MODE_10G')
                    print('Valid FEC mode: RS, FC')
                    return
            else:
                args[1] = int(args[1])
                startPtg = args[1]
                endPtg = args[1]
            if (args[2] == '1x100G') :
                macMode = eval('MAC_MODE_1X100GB')
            elif (args[2] == '1x40G') :
                macMode = eval('MAC_MODE_1X40GB')
            elif (args[2] == '2x40G') :
                macMode = eval('MAC_MODE_2X40GB')
            elif (args[2] == '2x50G') :
                macMode = eval('MAC_MODE_2X50GB')
            elif (args[2] == '4x10G') :
                macMode = eval('MAC_MODE_4X10GB')
            elif (args[2] == '4x25G') :
                macMode = eval('MAC_MODE_4X25GB')
            elif (args[2] == '4x1G') :
                macMode = eval('MAC_MODE_4X1G')
            elif (args[2] == 'MIXED_MODE_SGMII') :
                macMode = eval('MAC_MODE_MIX_4_CHANNEL')
            elif (args[2] == 'MIXED_MODE_10G') :
                macMode = eval('MAC_MODE_MIX_4_CHANNEL')
            else :
                print('Invalid speedMode provided')
                return

            enableFEC = int(args[4])

            initSerdes = 0
            prbsTestMode = 0
            firmwareUpload = 0
            sgmiiSpeed = 9

            if enableFEC :
                if (args[3] == 'RS') :
                    fecMode = eval('RS_FEC_MODE')
                elif (args[3] == 'FC') :
                    fecMode = eval('FC_FEC_MODE')
                else :
                    print('Invalid FECMode provided')
                    return
            else:
                fecMode = eval('MAX_FEC_MODE')

            for ptgNum in range(startPtg,endPtg+1):

                ret = xpLinkManagerPortGroupDeInit(args[0],ptgNum)
                if ret != 0:
                    print('port_group_de_init: Return Value = %d for ptgNum = %d' % (ret,ptgNum))
                else:
                    pass

            for ptgNum in range(startPtg,endPtg+1):
                ret = xpLinkManagerPortGroupInit(args[0],ptgNum,macMode,sgmiiSpeed, initSerdes, prbsTestMode, firmwareUpload, fecMode, enableFEC)
                if ret != 0:
                    print('port_group_init: Return Value = %d for ptgNum = %d' % (ret,ptgNum))
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerIsPortInited
    #/********************************************************************************/
    def do_is_port_inited(self, arg):
        '''
         xpLinkManagerIsPortInited: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            for portNum in range(startIdx,endIdx+1):
                ret = xpLinkManagerIsPortInited(args[0],portNum)
                err = 0
                if ret != 0:
                    print('============================')
                    print('Port %d:' % (portNum))
                    print('============================')
                    print('portNum %d is not initialized' % (portNum))
                    print('Return Value = %d for portNum = %d' % (ret,portNum))
                    print('')
                    err = 1
                if err == 0:
                    print('============================')
                    print('Port %d:' % (portNum))
                    print('============================')
                    print('port inited')
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerMacConfigModeGet
    #/********************************************************************************/
    def do_mac_mode_get(self, arg):
        '''
         xpLinkManagerMacConfigModeGet: Enter [ devId,startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        macModeStr = ""
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            valid_Ptr_2 = new_xpMacConfigMode_p()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            for portNum in range(startIdx,endIdx+1):
                ret = xpLinkManagerMacConfigModeGet(args[0],portNum,valid_Ptr_2)
                err = 0
                if ret != 0:
                    err = 1
                if err == 0:
                    print('============================')
                    print('Port %d:' % (portNum))
                    print('============================')
                    if(MAC_MODE_4X1GB == xpMacConfigMode_p_value(valid_Ptr_2)):
                        macModeStr = "MAC_MODE_4X1GB"
                    elif(MAC_MODE_MIX_4_CHANNEL_10G == xpMacConfigMode_p_value(valid_Ptr_2)):
                        macModeStr = "MAC_MODE_MIX_4_CHANNEL_10G"
                    elif(MAC_MODE_1GB == xpMacConfigMode_p_value(valid_Ptr_2)):
                        macModeStr = "MAC_MODE_1GB"
                    elif(MAC_MODE_4X10GB == xpMacConfigMode_p_value(valid_Ptr_2)):
                        macModeStr = "MAC_MODE_4X10GB"
                    elif(MAC_MODE_2X40GB == xpMacConfigMode_p_value(valid_Ptr_2)):
                        macModeStr = "MAC_MODE_2X40GB"
                    elif(MAC_MODE_1X40GB == xpMacConfigMode_p_value(valid_Ptr_2)):
                        macModeStr = "MAC_MODE_1X40GB"
                    elif(MAC_MODE_1X100GB == xpMacConfigMode_p_value(valid_Ptr_2)):
                        macModeStr = "MAC_MODE_1X100GB"
                    elif(MAC_MODE_4X25GB == xpMacConfigMode_p_value(valid_Ptr_2)):
                        macModeStr = "MAC_MODE_4X25GB"
                    elif(MAC_MODE_2X50GB == xpMacConfigMode_p_value(valid_Ptr_2)):
                        macModeStr = "MAC_MODE_2X50GB"
                    elif(MAC_MODE_1X10GB == xpMacConfigMode_p_value(valid_Ptr_2)):
                        macModeStr = "MAC_MODE_1X10GB"
                    elif(MAC_MODE_1000BASE_R == xpMacConfigMode_p_value(valid_Ptr_2)):
                        macModeStr = "MAC_MODE_1000BASE_R"
                    elif(MAC_MODE_1000BASE_X == xpMacConfigMode_p_value(valid_Ptr_2)):
                        macModeStr = "MAC_MODE_1000BASE_X"
                    elif(MAC_MODE_MIX_SGMII == xpMacConfigMode_p_value(valid_Ptr_2)):
                        macModeStr = "MAC_MODE_MIX_SGMII"
                    elif(MAC_MODE_MIX_1000BASE_R == xpMacConfigMode_p_value(valid_Ptr_2)):
                        macModeStr = "MAC_MODE_MIX_1000BASE_R"
                    elif(MAC_MODE_1X50GB == xpMacConfigMode_p_value(valid_Ptr_2)):
                        macModeStr = "MAC_MODE_1X50GB"
                    else:
                        macModeStr = "INVALIDE_MODE"
                    print('mac mode= %s' % (macModeStr))
                    print('')
                    pass
            delete_xpMacConfigMode_p(valid_Ptr_2)


    #/********************************************************************************/
    # command for xpLinkManagerIsPortNumValid
    #/********************************************************************************/
    def do_is_port_num_valid(self, arg):
        '''
         xpLinkManagerIsPortNumValid: Enter [ devId,startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            valid_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            for portNum in range(startIdx,endIdx+1):
                ret = xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr_2)
                err = 0
                if ret != 0:
                    print('Return Value = %d for portNum = %d' % (ret,portNum))
                    err = 1
                if err == 0:
                    print('============================')
                    print('Port %d:' % (portNum))
                    print('============================')
                    print('valid = %d' % (uint8_tp_value(valid_Ptr_2)))
                    print('')
                    pass
            delete_uint8_tp(valid_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerPortGroupDeInit
    #/********************************************************************************/
    def do_port_group_de_init(self, arg):
        '''
         xpLinkManagerPortGroupDeInit: Enter [ devId,ptgNum/startPtg-endPtg ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,ptgNum/startPtg-endPtg ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startPtg = int(args[1].split('-')[0].strip())
                endPtg = int(args[1].split('-')[1].strip())
                if startPtg > endPtg or endPtg > 31:
                    print('Invalid input, Enter [ devId,ptgNum')
                    print('Valid ptgNum are: 0 to 31')
                    print('improper range')
                    return
            else:
                args[1] = int(args[1])
                startPtg = args[1]
                endPtg = args[1]
            for ptgNum in range(startPtg,endPtg+1):
                ret = xpLinkManagerPortGroupDeInit(args[0],ptgNum)
                if ret != 0:
                    print('Return Value = %d for ptgNum = %d' % (ret,ptgNum))
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerPortLoopbackEnable
    #/********************************************************************************/
    def do_port_loopback_enable(self, arg):
        '''
         xpLinkManagerPortLoopbackEnable: Enter [devId, portNum/startPort-endPort, enable]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [devId, portNum/startPort-endPort, enable]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerPortLoopbackEnable(args[0],portNum,args[2])
                        if ret !=0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerTunePortSerdes
    #/********************************************************************************/
    def do_tune_port_serdes(self, arg):
        '''
         xpLinkManagerTunePortSerdes: Enter [devId, portNum/startPort-endPort, tuneMode, force]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 4
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [devId, portNum/startPort-endPort, tuneMode, force]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]

            tuneMode = int(args[2]) # mode 0 is coarse, mode 1 is fine
            force = int(args[3])
            portList = range(startIdx,endIdx+1)
            arrUint32 = new_arrUint32(len(portList))
            for index, value in enumerate(portList):
                arrUint32_setitem(arrUint32, index, value)
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, tuneMode=%d force=%d' % (args[0],args[1],args[2],args[3]))
            ret = xpLinkManagerTunePortSerdes(args[0],arrUint32,len(portList),tuneMode,force)
            if ret != 0:
                print('Error returned = %d ' % (ret))
            else:
                pass

    #/********************************************************************************/
    # command for xpLinkManagerPortSerdesSignalOverride
    #/********************************************************************************/
    def do_port_serdes_signal_override(self, arg):
        '''
         xpLinkManagerPortSerdesSignalOverride: Enter [devId, portNum/startPort-endPort, serdesSignalVal]
         serdesSignalVal could be :
         0 (serdes signal normal operation. no override)
         1 (Invert. Not available in A0)
         2 (force signal ok to 0 going in PCS)
         3 (force signal ok to 1 going in PCS)
         How it operate :
             - In case of 100G,40G all four serdes will override
             - In case of 50G, Two serdes per port will override
             - In case of 10G,25G, Single serdes per port will override
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [devId, portNum/startPort-endPort, serdesSignalVal]')
            print('serdesSignalVal could be :')
            print('0 (serdes signal normal operation. no override)')
            print('1 (Invert. Not available in A0)')
            print('2 (force signal ok to 0 going in PCS)')
            print('3 (force signal ok to 1 going in PCS)')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]

            serdesSignalVal = int(args[2])

            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, tuneMode=%d force=%d' % (args[0],args[1],args[2],args[3]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerPortSerdesSignalOverride(args[0],portNum,serdesSignalVal)
                        if ret != 0:
                            print('Error returned = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerEventHandler
    #/********************************************************************************/
    def do_event_handler(self, arg):
        '''
         xpLinkManagerEventHandler: Enter [ devId,macNum ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,macNum ]')
        else:
            args[0] = int(args[0])
            args[1] = int(args[1])
            #print('Input Arguments are, devId=%d, macNum=%d' % (args[0],args[1]))
            ret = xpLinkManagerEventHandler(args[0],args[1])
            if ret != 0:
                print('Return Value = %d' % (ret))
            else:
                pass

    #/********************************************************************************/
    # command for xpLinkManagerRxCrcCheckEnable
    #/********************************************************************************/
    def do_rx_crc_check_enable(self, arg):
        '''
         xpLinkManagerRxCrcCheckEnable: Enter [ devId,portNum/startPort-endPort,enable ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,enable ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, enable=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerRxCrcCheckEnable(args[0],portNum,args[2])
                        if ret !=0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerRxStripFcsEnable
    #/********************************************************************************/
    def do_rx_strip_fcs_enable(self, arg):
        '''
         xpLinkManagerRxStripFcsEnable: Enter [ devId,portNum/startPort-endPort,enable ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,enable ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, enable=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerRxStripFcsEnable(args[0],portNum,args[2])
                        if ret !=0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerRxFlowControlDecodeEnable
    #/********************************************************************************/
    def do_rx_flow_control_decode_enable(self, arg):
        '''
         xpLinkManagerRxFlowControlDecodeEnable: Enter [ devId,portNum/startPort-endPort,enable ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,enable ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, enable=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerRxFlowControlDecodeEnable(args[0],portNum,args[2])
                        if ret !=0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerRxPreambleLenSet
    #/********************************************************************************/
    def do_rx_preamble_len_set(self, arg):
        '''
         xpLinkManagerRxPreambleLenSet: Enter [ devId,portNum/startPort-endPort,bytes ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,bytes ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #CLI only includes mapping for the supported preamble bytes and for which it's necessary - For unsupported value error will come out from XDK
            if(args[2] == 8):
                args[2] = eval('PREAMBLE_RX_LEN_BYTES_8')
            elif(args[2] == 4):
                args[2] = eval('PREAMBLE_RX_LEN_BYTES_4')

            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, bytes=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerRxPreambleLenSet(args[0],portNum,args[2])
                        if ret !=0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerRxJabberFrmSizeSet
    #/********************************************************************************/
    def do_rx_jabber_frm_size_set(self, arg):
        '''
         xpLinkManagerRxJabberFrmSizeSet: Enter [ devId,portNum/startPort-endPort,jabberFrmSize ]
         Provide the jabber frame size greater than maximum frame size comfigured
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,jabberFrmSize ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, jabberFrmSize=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerRxJabberFrmSizeSet(args[0],portNum,args[2])
                        if ret !=0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerRxJabberFrmSizeGet
    #/********************************************************************************/
    def do_rx_jabber_frm_size_get(self, arg):
        '''
         xpLinkManagerRxJabberFrmSizeGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            jabberFrmSize_Ptr_2 = new_uint16_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerRxJabberFrmSizeGet(args[0],portNum,jabberFrmSize_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print(' jabberFrmSize = %d' % (uint16_tp_value(jabberFrmSize_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint16_tp(jabberFrmSize_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerTxPriorityPauseVectorSet
    #/********************************************************************************/
    def do_tx_priority_pause_vector_set(self, arg):
        '''
         xpLinkManagerTxPriorityPauseVectorSet: Enter [ devId,portNum/startPort-endPort,txPriPauseVector ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,txPriPauseVector ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, txPriPauseVector=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerTxPriorityPauseVectorSet(args[0],portNum,args[2])
                        if ret !=0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerPauseFrameGenGet
    #/********************************************************************************/
    def do_pause_frame_gen_get(self, arg):
        '''
         xpLinkManagerPauseFrameGenGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            status_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerPauseFrameGenGet(args[0],portNum,status_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('status = %d  ' % (uint8_tp_value(status_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(status_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerPauseFrameGenSet
    #/********************************************************************************/
    def do_pause_frame_gen_set(self, arg):
        '''
         xpLinkManagerPauseFrameGenSet: Enter [ devId,portNum/startPort-endPort,status ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,status ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, status=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerPauseFrameGenSet(args[0],portNum,args[2])
                        if ret !=0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerMacFlowCtrlFrmDestAddrSet
    #/********************************************************************************/
    def do_mac_flow_ctrl_frm_dest_addr_set(self, arg):
        '''
         xpLinkManagerMacFlowCtrlFrmDestAddrSet: Enter [ devId,portNum/startPort-endPort,macAddr ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,macAddr ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2], 16)
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, macAddr=0x%x' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerMacFlowCtrlFrmDestAddrSet(args[0],portNum,args[2])
                        if ret !=0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerMacFlowCtrlFrmSrcAddrSet
    #/********************************************************************************/
    def do_mac_flow_ctrl_frm_src_addr_set(self, arg):
        '''
         xpLinkManagerMacFlowCtrlFrmSrcAddrSet: Enter [ devId,portNum/startPort-endPort,macAddr ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,macAddr ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2], 16)
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, macAddr=0x%x' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerMacFlowCtrlFrmSrcAddrSet(args[0],portNum,args[2])
                        if ret !=0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerXonPauseTimeSet
    #/********************************************************************************/
    def do_xon_pause_time_set(self, arg):
        '''
         xpLinkManagerXonPauseTimeSet: Enter [ devId,portNum/startPort-endPort,pauseTime ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,pauseTime ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, pauseTime=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerXonPauseTimeSet(args[0],portNum,args[2])
                        if ret !=0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerXoffPauseTimeSet
    #/********************************************************************************/
    def do_xoff_pause_time_set(self, arg):
        '''
         xpLinkManagerXoffPauseTimeSet: Enter [ devId,portNum/startPort-endPort,pauseTime ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,pauseTime ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, pauseTime=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerXoffPauseTimeSet(args[0],portNum,args[2])
                        if ret !=0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerTimeStampValueGet
    #/********************************************************************************/
    def do_time_stamp_value_get(self, arg):
        '''
         xpLinkManagerTxTimeStampValueGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            timeStampVal_Ptr_2 = new_uint64_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, timeStampVal=0x%x' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerTxTimeStampValueGet(args[0],portNum,timeStampVal_Ptr_2)
                        err = 0
                        if ret !=0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('==========================')
                            print('Port %d:' % (portNum))
                            print('==========================')
                            print(' TxTimeStampValue = %d' % (uint64_tp_value(timeStampVal_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint64_tp(timeStampVal_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerTimeStampValidStatusGet
    #/********************************************************************************/
    def do_time_stamp_valid_status_get(self, arg):
        '''
         xpLinkManagerTimeStampValidStatusGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            valid_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerTimeStampValidStatusGet(args[0],portNum,valid_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('valid = %d ' % (uint8_tp_value(valid_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(valid_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerTimeStampIdGet
    #/********************************************************************************/
    def do_time_stamp_id_get(self, arg):
        '''
         xpLinkManagerTimeStampIdGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            timeStampId_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerTimeStampIdGet(args[0],portNum,timeStampId_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('timeStampId = %d ' % (uint8_tp_value(timeStampId_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(timeStampId_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerFlowCtrlPauseTimeSet
    #/********************************************************************************/
    def do_flow_ctrl_pause_time_set(self, arg):
        '''
         xpLinkManagerFlowCtrlPauseTimeSet: Enter [ devId,portNum/startPort-endPort,pauseTime ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,pauseTime ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, pauseTime=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerFlowCtrlPauseTimeSet(args[0],portNum,args[2])
                        if ret !=0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerMaxFrmLenSet
    #/********************************************************************************/
    def do_rx_max_frm_len_set(self, arg):
        '''
         xpLinkManagerMaxFrmLenSet: Enter [ devId,portNum/startPort-endPort,frameSize ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,frameSize ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, frameSize=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerMaxFrmLenSet(args[0],portNum,args[2])
                        if ret !=0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerTxIfgLenSet
    #/********************************************************************************/
    def do_tx_ifg_len_set(self, arg):
        '''
         xpLinkManagerTxIfgLenSet: Enter [ devId,portNum/startPort-endPort,ifgLength ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,ifgLength ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, ifgLength=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerTxIfgLenSet(args[0],portNum,args[2])
                        if ret !=0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerTxJabberFrmSizeSet
    #/********************************************************************************/
    def do_tx_jabber_frm_size_set(self, arg):
        '''
         xpLinkManagerTxJabberFrmSizeSet: Enter [ devId,portNum/startPort-endPort,jabberFrmSize ]
         Provide the jabber frame size greater than maximum frame size comfigured
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,jabberFrmSize ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, jabberFrmSize=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerTxJabberFrmSizeSet(args[0],portNum,args[2])
                        if ret !=0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerTxIfgCtrlPerFrameEnable
    #/********************************************************************************/
    def do_tx_ifg_ctrl_per_frame_enable(self, arg):
        '''
         xpLinkManagerTxIfgCtrlPerFrameEnable: Enter [ devId,portNum/startPort-endPort,enable ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,enable ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, enable=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerTxIfgCtrlPerFrameEnable(args[0],portNum,args[2])
                        if ret !=0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerTxCrcCheckEnable
    #/********************************************************************************/
    def do_tx_crc_check_enable(self, arg):
        '''
         xpLinkManagerTxCrcCheckEnable: Enter [ devId,portNum/startPort-endPort,enable ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,enable ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, enable=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerTxCrcCheckEnable(args[0],portNum,args[2])
                        if ret !=0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerTxFcsInvertEnable
    #/********************************************************************************/
    def do_tx_fcs_invert_enable(self, arg):
        '''
         xpLinkManagerTxFcsInvertEnable: Enter [ devId,portNum/startPort-endPort,enable ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,enable ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, enable=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerTxFcsInvertEnable(args[0],portNum,args[2])
                        if ret !=0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerTxFlowControlEnable
    #/********************************************************************************/
    def do_tx_flow_control_enable(self, arg):
        '''
         xpLinkManagerTxFlowControlEnable: Enter [ devId,portNum/startPort-endPort,enable ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,enable ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, enable=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerTxFlowControlEnable(args[0],portNum,args[2])
                        if ret !=0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerTxPriorityFlowControlEnable
    #/********************************************************************************/
    def do_tx_priority_flow_control_enable(self, arg):
        '''
         xpLinkManagerTxPriorityFlowControlEnable: Enter [ devId,portNum/startPort-endPort,enable ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,enable ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, enable=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerTxPriorityFlowControlEnable(args[0],portNum,args[2])
                        if ret !=0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerTxPreambleLenSet
    #/********************************************************************************/
    def do_tx_preamble_len_set(self, arg):
        '''
         xpLinkManagerTxPreambleLenSet: Enter [ devId,portNum/startPort-endPort,bytes ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,bytes ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #CLI only includes mapping for the supported preamble bytes and for which it's necessary - For unsupported value error will come out from XDK
            if(args[2] == 8):
                args[2] = eval('PREAMBLE_LEN_BYTES_8')

            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, bytes=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerTxPreambleLenSet(args[0],portNum,args[2])
                        if ret !=0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerPortSoftReset
    #/********************************************************************************/
    def do_port_soft_reset(self, arg):
        '''
         xpLinkManagerPortSoftReset: Enter [ devId,portNum/startPort-endPort,enable ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,enable ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, enable=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerPortSoftReset(args[0],portNum,args[2])
                        if ret !=0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerRxtxPortEnable
    #/********************************************************************************/
    def do_rxtx_port_enable(self, arg):
        '''
         xpLinkManagerRxtxPortEnable: Enter [ devId,portNum/startPort-endPort,enable ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,enable ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, enable=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerRxtxPortEnable(args[0],portNum,args[2])
                        if ret !=0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerTxPortEnable
    #/********************************************************************************/
    def do_tx_port_enable(self, arg):
        '''
         xpLinkManagerTxPortEnable: Enter [ devId,portNum/startPort-endPort,enable ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,enable ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, enable=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerTxPortEnable(args[0],portNum,args[2])
                        if ret !=0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerRxPortEnable
    #/********************************************************************************/
    def do_rx_port_enable(self, arg):
        '''
         xpLinkManagerRxPortEnable: Enter [ devId,portNum/startPort-endPort,enable ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,enable ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, enable=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerRxPortEnable(args[0],portNum,args[2])
                        if ret !=0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerStatCounterReset
    #/********************************************************************************/
    def do_clear_stats(self, arg):
        '''
         xpLinkManagerStatCounterReset: Enter [ devId,portNum/startPortNum-endPortNum ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPortNum-endPortNum ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startPort = int(args[1].split('-')[0].strip())
                endPort = int(args[1].split('-')[1].strip())
                if startPort > endPort:
                    print('improper range')
                    return
            else:
                args[1] = int(args[1])
                startPort = args[1]
                endPort = args[1]
            valid_Ptr = new_uint8_tp()
            for portNum in range(startPort,endPort+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerStatCounterReset(args[0],portNum)
                        if ret !=0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerPortEnable
    #/********************************************************************************/
    def do_port_enable(self, arg):
        '''
         xpLinkManagerPortEnable: Enter [ devId,portNum/startPort-endPort,enable ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,enable ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, enable=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    ret = xpLinkManagerPortEnable(args[0],portNum,args[2])
                    if ret !=0:
                        print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        pass

    #/********************************************************************************/
    # command for xpLinkManagerPortAutoTuneStatusGet
    #/********************************************************************************/
    def do_port_auto_tune_status_get(self, arg):
        '''
         xpLinkManagerPortAutoTuneStatusGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            status_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                        ret = xpLinkManagerPortAutoTuneStatusGet(args[0],portNum,status_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('AutoTuneStatus = %d for port = %d' % (uint8_tp_value(status_Ptr_2),portNum))
                            print('')
                else:
                    pass
            delete_uint8_tp(status_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerSerdesEyeSimpleMetricThresholdGet
    #/********************************************************************************/
    def do_serdes_eye_simple_metric_threshold_get(self, arg):
        '''
         xpLinkManagerSerdesEyeSimpleMetricThresholdGet:: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            status_Ptr_2 = new_uint32_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                        ret = xpLinkManagerSerdesEyeSimpleMetricThresholdGet(args[0],portNum,status_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('EyeMatric = %d for port = %d' % (uint16_tp_value(status_Ptr_2),portNum))
                            print('')
                else:
                    pass
            delete_uint32_tp(status_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerSerdesEyeSimpleMetricThresholdSet
    #/********************************************************************************/
    def do_serdes_eye_simple_metric_threshold_set(self, arg):
        '''
         xpLinkManagerSerdesEyeSimpleMetricThresholdSet: Enter [ devId,portNum/startPort-endPort,eyeMatric ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,eyeMatric ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, enable=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint32_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    ret = xpLinkManagerSerdesEyeSimpleMetricThresholdSet(args[0],portNum,args[2])
                    if ret !=0:
                        print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        pass

    #/********************************************************************************/
    # command for xpLinkManagerPortAutoTuneEnable
    #/********************************************************************************/
    def do_port_auto_tune_enable(self, arg):
        '''
         xpLinkManagerPortAutoTuneEnable: Enter [ devId,portNum/startPort-endPort,enable ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,enable ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, enable=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    ret = xpLinkManagerPortAutoTuneEnable(args[0],portNum,args[2])
                    if ret !=0:
                        print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        pass
    #/********************************************************************************/
    # command for xpLinkManagerPortEnableRange
    #/********************************************************************************/
    def do_port_enable_range(self, arg):
        '''
         xpLinkManagerPortEnableRange: Enter [ devId,fromPortNum,toPortNum,enable ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 4
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,fromPortNum,toPortNum,enable ]')
        else:
            args[0] = int(args[0])
            args[1] = int(args[1])
            args[2] = int(args[2])
            args[3] = int(args[3])
            #print('Input Arguments are, devId=%d, fromPortNum=%d, toPortNum=%d, enable=%d' % (args[0],args[1],args[2],args[3]))
            ret = xpLinkManagerPortEnableRange(args[0],args[1],args[2],args[3])
            if ret != 0:
                print('Return Value = %d' % (ret))
            else:
                pass

    #/********************************************************************************/
    # command for xpLinkManagerPortReset
    #/********************************************************************************/
    def do_port_reset(self, arg):
        '''
         xpLinkManagerPortReset: Enter [ devId,enable,portNum/startPort-endPort,reset ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 4
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,enable,portNum/startPort-endPort,reset ]')
        else:
            args[0] = int(args[0])
            args[1] = int(args[1])
            if '-' in args[2]:
                startIdx = int(args[2].split('-')[0].strip())
                endIdx = int(args[2].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[2] = int(args[2])
                startIdx = args[2]
                endIdx = args[2]
            args[3] = int(args[3])
            #print('Input Arguments are, devId=%d, enable=%d, portNum/startPort-endPort=%d, reset=%d' % (args[0],args[1],args[2],args[3]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerPortReset(args[0],args[1],portNum,args[3])
                        if ret !=0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerMacLoopback
    #/********************************************************************************/
    def do_mac_loopback(self, arg):
        '''
         xpLinkManagerMacLoopback: Enter [ devId,portNum/startPort-endPort,loopback,enable ]
            loopbacks are: MAC-LEVEL-LB, MAC-PCS-LB, MAC-FIFO-LB
        '''
        args = re.split(';| ',arg)
        numArgsReq = 4
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,loopback,enable ]')
            print('loopbacks are: MAC-LEVEL-LB, MAC-PCS-LB, MAC-FIFO-LB')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            if args[2] == 'MAC-LEVEL-LB':
                args[2] = 2
            if args[2] == 'MAC-FIFO-LB':
                args[2] = 3
            if args[2] == 'MAC-PCS-LB':
                args[2] = 4
            args[3] = int(args[3])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, loopback=%d, enable=%d' % (args[0],args[1],args[2],args[3]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerMacLoopback(args[0],portNum,args[2],args[3])
                        if ret !=0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerMacLoopbackGet
    #/********************************************************************************/
    def do_mac_loopback_get(self, arg):
        '''
         xpLinkManagerMacLoopbackGet: Enter [ devId,portNum/startPort-endPort,loopback ]
            loopbacks are: MAC-LEVEL-LB, MAC-PCS-LB, MAC-FIFO-LB
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,loopback ]')
            print('loopbacks are: MAC-LEVEL-LB, MAC-PCS-LB, MAC-FIFO-LB')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            if args[2] == 'MAC-LEVEL-LB':
                args[2] = 2
            if args[2] == 'MAC-FIFO-LB':
                args[2] = 3
            if args[2] == 'MAC-PCS-LB':
                args[2] = 4
            status_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, loopback=%d, enable=%d' % (args[0],args[1],args[2],args[3]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerMacLoopbackGet(args[0],portNum,args[2],status_Ptr_2)
                        err = 0
                        if ret !=0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('status = %d ' % (uint8_tp_value(status_Ptr_2)))
                            print('')

                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerConfigMdioMaster
    #/********************************************************************************/
    def do_config_mdio_master(self, arg):
        '''
         xpLinkManagerConfigMdioMaster: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerConfigMdioMaster(args[0],portNum)
                        if ret !=0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerDeconfigMdioMaster
    #/********************************************************************************/
    def do_deconfig_mdio_master(self, arg):
        '''
         xpLinkManagerDeconfigMdioMaster: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerDeconfigMdioMaster(args[0],portNum)
                        if ret !=0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerExtPHYRead
    #/********************************************************************************/
    def do_ext_phy_read(self, arg):
        '''
         xpLinkManagerExtPHYRead: Enter [ devId,portNum/startPort-endPort,phyAddr,phyRegAddr ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 4
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,phyAddr,phyRegAddr ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2], 16)
            args[3] = int(args[3], 16)
            value_Ptr_4 = new_uint16_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, phyAddr=0x%x, phyRegAddr=0x%x' % (args[0],args[1],args[2],args[3]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerExtPHYRead(args[0],portNum,args[2],args[3],value_Ptr_4)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('value = %d ' % (uint16_tp_value(value_Ptr_4)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint16_tp(value_Ptr_4)

    #/********************************************************************************/
    # command for xpLinkManagerExtPHYWrite
    #/********************************************************************************/
    def do_ext_phy_write(self, arg):
        '''
         xpLinkManagerExtPHYWrite: Enter [ devId,portNum/startPort-endPort,phyAddr,phyRegAddr,value ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 5
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,phyAddr,phyRegAddr,value ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2], 16)
            args[3] = int(args[3], 16)
            args[4] = int(args[4], 16)
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, phyAddr=0x%x, phyRegAddr=0x%x, value=0x%x' % (args[0],args[1],args[2],args[3],args[4]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerExtPHYWrite(args[0],portNum,args[2],args[3],args[4])
                        if ret !=0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerPortSpeedGet
    #/********************************************************************************/
    def do_port_speed_get(self, arg):
        '''
         xpLinkManagerPortSpeedGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            speed_Ptr_2 = new_xpSpeedp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerPortSpeedGet(args[0],portNum,speed_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('speed = %d ' % (xpSpeedp_value(speed_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_xpSpeedp(speed_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerPortAutoNegSet
    #/********************************************************************************/
    def do_port_auto_neg_set(self, arg):
        '''
         xpLinkManagerPortAutoNegSet: Enter [ devId,portNum/startPort-endPort,enable ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,enable ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, enable=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerPortAutoNegSet(args[0],portNum,args[2])
                        if ret !=0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerPortAutoNegRestart
    #/********************************************************************************/
    def do_port_auto_neg_restart(self, arg):
        '''
         xpLinkManagerPortAutoNegRestart: Enter [ devId,portNum/startPort-endPort,restart ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,restart ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, restart=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerPortAutoNegRestart(args[0],portNum,args[2])
                        if ret !=0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerPortAutoNegSyncStatusGet
    #/********************************************************************************/
    def do_port_auto_neg_sync_status_get(self, arg):
        '''
         xpLinkManagerPortAutoNegSyncStatusGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            status_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerPortAutoNegSyncStatusGet(args[0],portNum,status_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('status = %d ' % (uint8_tp_value(status_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(status_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerIsMdioMasterConf
    #/********************************************************************************/
    def do_is_mdio_master_conf(self, arg):
        '''
         xpLinkManagerIsMdioMasterConf: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerIsMdioMasterConf(args[0],portNum)
                        if ret !=0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerMdioClkDivisonCtrlSet
    #/********************************************************************************/
    def do_mdio_clk_divison_ctrl_set(self, arg):
        '''
         xpLinkManagerMdioClkDivisonCtrlSet: Enter [ devId,portNum/startPort-endPort,divCtrlRatio ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,divCtrlRatio ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, divCtrlRatio=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerMdioClkDivisonCtrlSet(args[0],portNum,args[2])
                        if ret !=0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerEventHandlerDeRegister
    #/********************************************************************************/
    def do_event_handler_de_register(self, arg):
        '''
         xpLinkManagerEventHandlerDeRegister: Enter [ devId,portNum/startPort-endPort,eventType ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,eventType ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, eventType=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerEventHandlerDeRegister(args[0],portNum,args[2])
                        if ret !=0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerCounterStatsGet
    #/********************************************************************************/
    def do_counter_stats_get(self, arg):
        '''
         xpLinkManagerCounterStatsGet: Enter [ devId,portNum/startPort-endPort,fromStatNum,toStatNum ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 4
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,fromStatNum,toStatNum ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            args[3] = int(args[3])
            stat_Ptr_4 = new_xp_Statisticsp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, fromStatNum=%d, toStatNum=%d' % (args[0],args[1],args[2],args[3]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerCounterStatsGet(args[0],portNum,args[2],args[3],stat_Ptr_4)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print "frameRxOk : ",stat_Ptr_4.frameRxOk
                            print "frameRxAll : ",stat_Ptr_4.frameRxAll
                            print "frameRxFcsErr : ",stat_Ptr_4.frameRxFcsErr
                            print "frameRxAnyErr : ",stat_Ptr_4.frameRxAnyErr
                            print "octetsRxGoodFrame : ",stat_Ptr_4.octetsRxGoodFrame
                            print "octetsRx : ",stat_Ptr_4.octetsRx
                            print "frameRxUnicastAddr : ",stat_Ptr_4.frameRxUnicastAddr
                            print "frameRxMulticastAddr : ",stat_Ptr_4.frameRxMulticastAddr
                            print "frameRxBroadcastAddr : ",stat_Ptr_4.frameRxBroadcastAddr
                            print "frameRxTypePause : ",stat_Ptr_4.frameRxTypePause
                            print "frameRxLengthErr : ",stat_Ptr_4.frameRxLengthErr
                            print "frameRxUndersize : ",stat_Ptr_4.frameRxUndersize
                            print "frameRxOversize : ",stat_Ptr_4.frameRxOversize
                            print "fragmentsRx : ",stat_Ptr_4.fragmentsRx
                            print "jabberFrameRx : ",stat_Ptr_4.jabberFrameRx
                            print "frameRxLength64 : ",stat_Ptr_4.frameRxLength64
                            print "frameRxLength65To127 : ",stat_Ptr_4.frameRxLength65To127
                            print "frameRxLength128To255 : ",stat_Ptr_4.frameRxLength128To255
                            print "frameRxLength256To511 : ",stat_Ptr_4.frameRxLength256To511
                            print "frameRxLength512To1023 : ",stat_Ptr_4.frameRxLength512To1023
                            print "frameRxLength1024To1518 : ",stat_Ptr_4.frameRxLength1024To1518
                            print "frameRxLength1519AndUp : ",stat_Ptr_4.frameRxLength1519AndUp
                            print "frameDroppedFromRxFIFOFullCondition : ",stat_Ptr_4.frameDroppedFromRxFIFOFullCondition
                            print "frameTransmittedOk : ",stat_Ptr_4.frameTransmittedOk
                            print "frameTransmittedAll : ",stat_Ptr_4.frameTransmittedAll
                            print "frameTransmittedWithErr : ",stat_Ptr_4.frameTransmittedWithErr
                            print "octetsTransmittedWithoutErr : ",stat_Ptr_4.octetsTransmittedWithoutErr
                            print "octetsTransmittedTotal : ",stat_Ptr_4.octetsTransmittedTotal
                            print "framesTransmittedUnicast : ",stat_Ptr_4.framesTransmittedUnicast
                            print "framesTransmittedMulticast : ",stat_Ptr_4.framesTransmittedMulticast
                            print "framesTransmittedBroadcast0 : ",stat_Ptr_4.framesTransmittedBroadcast0
                            print "framesTransmittedPause : ",stat_Ptr_4.framesTransmittedPause
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_xp_Statisticsp(stat_Ptr_4)

    #/********************************************************************************/
    # command for xpLinkManagerCounterStatsDirectGet
    #/********************************************************************************/
    def do_counter_stats_direct_get(self, arg):
        '''
         xpLinkManagerCounterStatsDirectGet: Enter [ devId,portNum/startPort-endPort,fromStatNum,toStatNum ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 4
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,fromStatNum,toStatNum ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            args[3] = int(args[3])
            stat_Ptr_4 = new_xp_Statisticsp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, fromStatNum=%d, toStatNum=%d' % (args[0],args[1],args[2],args[3]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerCounterStatsDirectGet(args[0],portNum,args[2],args[3],stat_Ptr_4)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print "frameRxOk : ",stat_Ptr_4.frameRxOk
                            print "frameRxAll : ",stat_Ptr_4.frameRxAll
                            print "frameRxFcsErr : ",stat_Ptr_4.frameRxFcsErr
                            print "frameRxAnyErr : ",stat_Ptr_4.frameRxAnyErr
                            print "octetsRxGoodFrame : ",stat_Ptr_4.octetsRxGoodFrame
                            print "octetsRx : ",stat_Ptr_4.octetsRx
                            print "frameRxUnicastAddr : ",stat_Ptr_4.frameRxUnicastAddr
                            print "frameRxMulticastAddr : ",stat_Ptr_4.frameRxMulticastAddr
                            print "frameRxBroadcastAddr : ",stat_Ptr_4.frameRxBroadcastAddr
                            print "frameRxTypePause : ",stat_Ptr_4.frameRxTypePause
                            print "frameRxLengthErr : ",stat_Ptr_4.frameRxLengthErr
                            print "frameRxUndersize : ",stat_Ptr_4.frameRxUndersize
                            print "frameRxOversize : ",stat_Ptr_4.frameRxOversize
                            print "fragmentsRx : ",stat_Ptr_4.fragmentsRx
                            print "jabberFrameRx : ",stat_Ptr_4.jabberFrameRx
                            print "frameRxLength64 : ",stat_Ptr_4.frameRxLength64
                            print "frameRxLength65To127 : ",stat_Ptr_4.frameRxLength65To127
                            print "frameRxLength128To255 : ",stat_Ptr_4.frameRxLength128To255
                            print "frameRxLength256To511 : ",stat_Ptr_4.frameRxLength256To511
                            print "frameRxLength512To1023 : ",stat_Ptr_4.frameRxLength512To1023
                            print "frameRxLength1024To1518 : ",stat_Ptr_4.frameRxLength1024To1518
                            print "frameRxLength1519AndUp : ",stat_Ptr_4.frameRxLength1519AndUp
                            print "frameDroppedFromRxFIFOFullCondition : ",stat_Ptr_4.frameDroppedFromRxFIFOFullCondition
                            print "frameTransmittedOk : ",stat_Ptr_4.frameTransmittedOk
                            print "frameTransmittedAll : ",stat_Ptr_4.frameTransmittedAll
                            print "frameTransmittedWithErr : ",stat_Ptr_4.frameTransmittedWithErr
                            print "octetsTransmittedWithoutErr : ",stat_Ptr_4.octetsTransmittedWithoutErr
                            print "octetsTransmittedTotal : ",stat_Ptr_4.octetsTransmittedTotal
                            print "framesTransmittedUnicast : ",stat_Ptr_4.framesTransmittedUnicast
                            print "framesTransmittedMulticast : ",stat_Ptr_4.framesTransmittedMulticast
                            print "framesTransmittedBroadcast0 : ",stat_Ptr_4.framesTransmittedBroadcast0
                            print "framesTransmittedPause : ",stat_Ptr_4.framesTransmittedPause
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_xp_Statisticsp(stat_Ptr_4)

    #/********************************************************************************/
    # command for xpLinkManagerPcsFaultStatusGet
    #/********************************************************************************/
    def do_pcs_fault_status_get(self, arg):
        '''
         xpLinkManagerPcsFaultStatusGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            status_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerPcsFaultStatusGet(args[0],portNum,status_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('status = %d ' % (uint8_tp_value(status_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(status_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerPcsDoubleSpeedEnable
    #/********************************************************************************/
    def do_pcs_double_speed_enable(self, arg):
        '''
         xpLinkManagerPcsDoubleSpeedEnable: Enter [ devId,portNum/startPort-endPort,enable ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,enable ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, enable=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerPcsDoubleSpeedEnable(args[0],portNum,args[2])
                        if ret !=0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerEncoding10gEnable
    #/********************************************************************************/
    def do_encoding10g_enable(self, arg):
        '''
         xpLinkManagerEncoding10gEnable: Enter [ devId,portNum/startPort-endPort,enable ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,enable ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, enable=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerEncoding10gEnable(args[0],portNum,args[2])
                        if ret !=0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerPcsInterruptMaskEnable
    #/********************************************************************************/
    def do_pcs_interrupt_mask_enable(self, arg):
        '''
         xpLinkManagerPcsInterruptMaskEnable: Enter [ devId,portNum/startPort-endPort,enable ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,enable ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, enable=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerPcsInterruptMaskEnable(args[0],portNum,args[2])
                        if ret !=0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerPcsInterruptMaskEnableGet
    #/********************************************************************************/
    def do_pcs_interrupt_mask_enable_get(self, arg):
        '''
         xpLinkManagerPcsInterruptMaskEnableGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            enable_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerPcsInterruptMaskEnableGet(args[0],portNum,enable_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('enable = %d' % (uint8_tp_value(enable_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(enable_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerPcsInterruptTestEnable
    #/********************************************************************************/
    def do_pcs_interrupt_test_enable(self, arg):
        '''
         xpLinkManagerPcsInterruptTestEnable: Enter [ devId,portNum/startPort-endPort,enable ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,enable ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, enable=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerPcsInterruptTestEnable(args[0],portNum,args[2])
                        if ret !=0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
    #/********************************************************************************/
    # command for xpLinkManagerPcsInterruptTestEnableGet
    #/********************************************************************************/
    def do_pcs_interrupt_test_enable_get(self, arg):
        '''
         xpLinkManagerPcsInterruptTestEnableGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            enable_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerPcsInterruptTestEnableGet(args[0],portNum,enable_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('enable = %d' % (uint8_tp_value(enable_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(enable_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerPcsTestPatternSeedASet
    #/********************************************************************************/
    def do_pcs_test_pattern_seed_a_set(self, arg):
        '''
         xpLinkManagerPcsTestPatternSeedASet: Enter [ devId,portNum/startPort-endPort,seed ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,seed ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2],16)
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, seed=0x%x' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerPcsTestPatternSeedASet(args[0],portNum,args[2])
                        if ret !=0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerPcsTestPatternSeedAGet
    #/********************************************************************************/
    def do_pcs_test_pattern_seed_a_get(self, arg):
        '''
         xpLinkManagerPcsTestPatternSeedAGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            seed_Ptr_2 = new_uint64_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerPcsTestPatternSeedAGet(args[0],portNum,seed_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('seed = %d ' % (uint64_tp_value(seed_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint64_tp(seed_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerPcsTestPatternSeedBSet
    #/********************************************************************************/
    def do_pcs_test_pattern_seed_b_set(self, arg):
        '''
         xpLinkManagerPcsTestPatternSeedBSet: Enter [ devId,portNum/startPort-endPort,seed ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,seed ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2], 16)
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, seed=0x%x' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerPcsTestPatternSeedBSet(args[0],portNum,args[2])
                        if ret !=0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerPcsTestPatternSeedBGet
    #/********************************************************************************/
    def do_pcs_test_pattern_seed_b_get(self, arg):
        '''
         xpLinkManagerPcsTestPatternSeedBGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            seed_Ptr_2 = new_uint64_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerPcsTestPatternSeedBGet(args[0],portNum,seed_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('seed = %d ' % (uint64_tp_value(seed_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint64_tp(seed_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerPcsDataPatternSelect
    #/********************************************************************************/
    def do_pcs_data_pattern_select(self, arg):
        '''
         xpLinkManagerPcsDataPatternSelect: Enter [ devId,portNum/startPort-endPort,dataPattern ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,dataPattern ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2], 16)
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, dataPattern=0x%x' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerPcsDataPatternSelect(args[0],portNum,args[2])
                        if ret !=0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerPcsTestPatternSelect
    #/********************************************************************************/
    def do_pcs_test_pattern_select(self, arg):
        '''
         xpLinkManagerPcsTestPatternSelect: Enter [ devId,portNum/startPort-endPort,testPattern ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,testPattern ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, testPattern=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerPcsTestPatternSelect(args[0],portNum,args[2])
                        if ret !=0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerPcsRxTxTestModeEnableSet
    #/********************************************************************************/
    def do_pcs_rx_tx_test_mode_enable_set(self, arg):
        '''
         xpLinkManagerPcsRxTxTestModeEnableSet: Enter [ devId,portNum/startPort-endPort,testMode ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,testMode ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, testMode=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerPcsRxTxTestModeEnableSet(args[0],portNum,args[2])
                        if ret !=0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerPcsScrambledIdealTestPatternSet
    #/********************************************************************************/
    def do_pcs_scrambled_ideal_test_pattern_set(self, arg):
        '''
         xpLinkManagerPcsScrambledIdealTestPatternSet: Enter [ devId,portNum/startPort-endPort,enable ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,enable ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, enable=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerPcsScrambledIdealTestPatternSet(args[0],portNum,args[2])
                        if ret !=0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerPcsLockStatusGet
    #/********************************************************************************/
    def do_pcs_lock_status_get(self, arg):
        '''
         xpLinkManagerPcsLockStatusGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            pcsLock_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerPcsLockStatusGet(args[0],portNum,pcsLock_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('pcsLock = %d ' % (uint8_tp_value(pcsLock_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(pcsLock_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerPcsHiBerStatusGet
    #/********************************************************************************/
    def do_pcs_hi_ber_status_get(self, arg):
        '''
         xpLinkManagerPcsHiBerStatusGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            pcsHiBer_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerPcsHiBerStatusGet(args[0],portNum,pcsHiBer_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('pcsHiBer = %d ' % (uint8_tp_value(pcsHiBer_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(pcsHiBer_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerPcsBlockLockStatusGet
    #/********************************************************************************/
    def do_pcs_block_lock_status_get(self, arg):
        '''
         xpLinkManagerPcsBlockLockStatusGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            blockLock_Ptr_2 = new_uint32_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerPcsBlockLockStatusGet(args[0],portNum,blockLock_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('blockLock = %d ' % (uint32_tp_value(blockLock_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint32_tp(blockLock_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerPcsAlignmentLockGet
    #/********************************************************************************/
    def do_pcs_alignment_lock_get(self, arg):
        '''
         xpLinkManagerPcsAlignmentLockGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            status_Ptr_2 = new_uint8_tp()
            alignmentLock_Ptr_3 = new_uint32_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerPcsAlignmentLockGet(args[0],portNum,status_Ptr_2,alignmentLock_Ptr_3)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('status = %d ' % (uint8_tp_value(status_Ptr_2)))
                            print('alignmentLock = %d ' % (uint32_tp_value(alignmentLock_Ptr_3)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint32_tp(alignmentLock_Ptr_3)
            delete_uint8_tp(status_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerPcsDebugDeskewOverFlowGet
    #/********************************************************************************/
    def do_pcs_debug_deskew_over_flow_get(self, arg):
        '''
         xpLinkManagerPcsDebugDeskewOverFlowGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            deskewOverFlowErr_Ptr_2 = new_uint32_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerPcsDebugDeskewOverFlowGet(args[0],portNum,deskewOverFlowErr_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('deskewOverFlowErr = %d ' % (uint32_tp_value(deskewOverFlowErr_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint32_tp(deskewOverFlowErr_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerPcsDebugTxGearboxFifoErrGet
    #/********************************************************************************/
    def do_pcs_debug_tx_gearbox_fifo_err_get(self, arg):
        '''
         xpLinkManagerPcsDebugTxGearboxFifoErrGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            fifoErr_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerPcsDebugTxGearboxFifoErrGet(args[0],portNum,fifoErr_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('fifoErr = %d ' % (uint8_tp_value(fifoErr_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(fifoErr_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerPcsLaneMappingStatusGet
    #/********************************************************************************/
    def do_pcs_lane_mapping_status_get(self, arg):
        '''
         xpLinkManagerPcsLaneMappingStatusGet: Enter [ devId,portNum/startPort-endPort,laneNum ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,laneNum ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            laneMapping_Ptr_3 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, laneNum=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerPcsLaneMappingStatusGet(args[0],portNum,args[2],laneMapping_Ptr_3)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('laneMapping = %d ' % (uint8_tp_value(laneMapping_Ptr_3)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(laneMapping_Ptr_3)

    #/********************************************************************************/
    # command for xpLinkManagerPcsMulLaneBipErrCntGet
    #/********************************************************************************/
    def do_pcs_mul_lane_bip_err_cnt_get(self, arg):
        '''
         xpLinkManagerPcsMulLaneBipErrCntGet: Enter [ devId,portNum/startPort-endPort,laneNum ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,laneNum ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            bipErrCount_Ptr_3 = new_uint16_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, laneNum=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerPcsMulLaneBipErrCntGet(args[0],portNum,args[2],bipErrCount_Ptr_3)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print(' BIP Error Count = %d' % (uint16_tp_value(bipErrCount_Ptr_3)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint16_tp(bipErrCount_Ptr_3)

    #/********************************************************************************/
    # command for xpLinkManagerRsFecLaneBipErrCntGet
    #/********************************************************************************/
    def do_rs_fec_lane_bip_err_cnt_get(self, arg):
        '''
         xpLinkManagerRsFecLaneBipErrCntGet: Enter [ devId,portNum/startPort-endPort,laneNum ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,laneNum ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            counter_Ptr_3 = new_uint16_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, laneNum=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerRsFecLaneBipErrCntGet(args[0],portNum,args[2],counter_Ptr_3)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print(' counter = %d' % (uint16_tp_value(counter_Ptr_3)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint16_tp(counter_Ptr_3)

    #/********************************************************************************/
    # command for xpLinkManagerPcsEnable
    #/********************************************************************************/
    def do_pcs_enable(self, arg):
        '''
         xpLinkManagerPcsEnable: Enter [ devId,portNum/startPort-endPort,enable ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,enable ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, enable=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerPcsEnable(args[0],portNum,args[2])
                        if ret !=0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerPcsBypassScramblerEnable
    #/********************************************************************************/
    def do_pcs_bypass_scrambler_enable(self, arg):
        '''
         xpLinkManagerPcsBypassScramblerEnable: Enter [ devId,portNum/startPort-endPort,enable ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,enable ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, enable=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerPcsBypassScramblerEnable(args[0],portNum,args[2])
                        if ret !=0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerPcsUseShortTimerEnable
    #/********************************************************************************/
    def do_pcs_use_short_timer_enable(self, arg):
        '''
         xpLinkManagerPcsUseShortTimerEnable: Enter [ devId,portNum/startPort-endPort,enable ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,enable ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, enable=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerPcsUseShortTimerEnable(args[0],portNum,args[2])
                        if ret !=0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerPcsIgnoreSignalOkEnable
    #/********************************************************************************/
    def do_pcs_ignore_signal_ok_enable(self, arg):
        '''
         xpLinkManagerPcsIgnoreSignalOkEnable: Enter [ devId,portNum/startPort-endPort,enable ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,enable ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, enable=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerPcsIgnoreSignalOkEnable(args[0],portNum,args[2])
                        if ret !=0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerPcsBypassTxBufEnable
    #/********************************************************************************/
    def do_pcs_bypass_tx_buf_enable(self, arg):
        '''
         xpLinkManagerPcsBypassTxBufEnable: Enter [ devId,portNum/startPort-endPort,enable ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,enable ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, enable=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerPcsBypassTxBufEnable(args[0],portNum,args[2])
                        if ret !=0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerPcsFullThresholdSet
    #/********************************************************************************/
    def do_pcs_full_threshold_set(self, arg):
        '''
         xpLinkManagerPcsFullThresholdSet: Enter [ devId,portNum/startPort-endPort,maxEntries ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,maxEntries ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, maxEntries=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerPcsFullThresholdSet(args[0],portNum,args[2])
                        if ret !=0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerPcsLowLatencyModeEnable
    #/********************************************************************************/
    def do_pcs_low_latency_mode_enable(self, arg):
        '''
         xpLinkManagerPcsLowLatencyModeEnable: Enter [ devId,portNum/startPort-endPort,enable ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,enable ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, enable=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerPcsLowLatencyModeEnable(args[0],portNum,args[2])
                        if ret !=0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerPcsLowLatencyModeEnableGet
    #/********************************************************************************/
    def do_pcs_low_latency_mode_enable_get(self, arg):
        '''
         xpLinkManagerPcsLowLatencyModeEnableGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            enable_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerPcsLowLatencyModeEnableGet(args[0],portNum,enable_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('enable = %d' % (uint8_tp_value(enable_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(enable_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerFecEnable
    #/********************************************************************************/
    def do_fec_enable(self, arg):
        '''
         xpLinkManagerFecEnable: Enter [ devId,portNum/startPort-endPort,enable ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,enable ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, enable=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerFecEnable(args[0],portNum,args[2])
                        if ret !=0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerFec10gAbilityGet
    #/********************************************************************************/
    def do_fec10g_ability_get(self, arg):
        '''
         xpLinkManagerFec10gAbilityGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            status_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerFcFecAbilityGet(args[0],portNum,status_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('status = %d ' % (uint8_tp_value(status_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(status_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerFec10gErrIndicationAbilityGet
    #/********************************************************************************/
    def do_fec10g_err_indication_ability_get(self, arg):
        '''
         xpLinkManagerFec10gErrIndicationAbilityGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            status_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerFcFecErrIndicationAbilityGet(args[0],portNum,status_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('status = %d ' % (uint8_tp_value(status_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(status_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerFec10gEnable
    #/********************************************************************************/
    def do_fec10g_enable(self, arg):
        '''
         xpLinkManagerFec10gEnable: Enter [ devId,portNum/startPort-endPort,enable ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,enable ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, enable=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerFcFecEnable(args[0],portNum,args[2])
                        if ret !=0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerFec10gErrToPcsEnable
    #/********************************************************************************/
    def do_fec10g_err_to_pcs_enable(self, arg):
        '''
         xpLinkManagerFec10gErrToPcsEnable: Enter [ devId,portNum/startPort-endPort,enable ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,enable ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, enable=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerFcFecErrToPcsEnable(args[0],portNum,args[2])
                        if ret !=0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerFcFecCorrectedBlockCntGet
    #/********************************************************************************/
    def do_fec10_corrected_block_cnt_get(self, arg):
        '''
         xpLinkManagerFcFecCorrectedBlockCntGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            value_Ptr_2 = new_uint32_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerFcFecCorrectedBlockCntGet(args[0],portNum,value_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('value = %d ' % (uint32_tp_value(value_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint32_tp(value_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerFcFecUncorrectedBlockCntGet
    #/********************************************************************************/
    def do_fec10_uncorrected_block_cnt_get(self, arg):
        '''
         xpLinkManagerFcFecUncorrectedBlockCntGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            value_Ptr_2 = new_uint32_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerFcFecUncorrectedBlockCntGet(args[0],portNum,value_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('value = %d ' % (uint32_tp_value(value_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint32_tp(value_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerFec10gSoftReset
    #/********************************************************************************/
    def do_fec10g_soft_reset(self, arg):
        '''
         xpLinkManagerFec10gSoftReset: Enter [ devId,portNum/startPort-endPort,enable ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,enable ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, enable=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerFcFecSoftReset(args[0],portNum,args[2])
                        if ret !=0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerFec10gSoftResetGet
    #/********************************************************************************/
    def do_fec10g_soft_reset_get(self, arg):
        '''
         xpLinkManagerFec10gSoftResetGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            enable_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerFcFecSoftResetGet(args[0],portNum,enable_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('enable = %d' % (uint8_tp_value(enable_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(enable_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerFec100gBypassEnable
    #/********************************************************************************/
    def do_fec100g_bypass_enable(self, arg):
        '''
         xpLinkManagerFec100gBypassEnable: Enter [ devId,portNum/startPort-endPort,enable ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,enable ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, enable=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerRsFecBypassEnable(args[0],portNum,args[2])
                        if ret !=0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerFec100gEnaErrorIndicationGet
    #/********************************************************************************/
    def do_fec100g_ena_error_indication_get(self, arg):
        '''
         xpLinkManagerFec100gEnaErrorIndicationGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            error_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerRsFecEnaErrorIndicationGet(args[0],portNum,error_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('error = %d ' % (uint8_tp_value(error_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(error_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerRsFec100gAbilityGet
    #/********************************************************************************/
    def do_rs_fec100g_ability_get(self, arg):
        '''
         xpLinkManagerRsFec100gAbilityGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            status_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerRsFecAbilityGet(args[0],portNum,status_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('status = %d ' % (uint8_tp_value(status_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(status_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerFec100gBypassCorrAbilityGet
    #/********************************************************************************/
    def do_fec100g_bypass_corr_ability_get(self, arg):
        '''
         xpLinkManagerFec100gBypassCorrAbilityGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            status_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerRsFecBypassCorrAbilityGet(args[0],portNum,status_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('status = %d ' % (uint8_tp_value(status_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(status_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerFec100gErrIndicationAbiGet
    #/********************************************************************************/
    def do_fec100g_err_indication_abi_get(self, arg):
        '''
         xpLinkManagerFec100gErrIndicationAbiGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            error_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerRsFecErrIndicationAbiGet(args[0],portNum,error_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('error = %d ' % (uint8_tp_value(error_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(error_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerFec100gCorrectedBlockCntGet
    #/********************************************************************************/
    def do_fec100g_corrected_block_cnt_get(self, arg):
        '''
         xpLinkManagerFec100gCorrectedBlockCntGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            value_Ptr_2 = new_uint32_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerRsFecCorrectedBlockCntGet(args[0],portNum,value_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('value = %d ' % (uint32_tp_value(value_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint32_tp(value_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerFec100gUncorrectedBlockCntGet
    #/********************************************************************************/
    def do_fec100g_uncorrected_block_cnt_get(self, arg):
        '''
         xpLinkManagerFec100gUncorrectedBlockCntGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            value_Ptr_2 = new_uint32_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerRsFecUncorrectedBlockCntGet(args[0],portNum,value_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('value = %d ' % (uint32_tp_value(value_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint32_tp(value_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerRsFecSymbolErrCntGet
    #/********************************************************************************/
    def do_rs_fec_symbol_err_cnt_get(self, arg):
        '''
         xpLinkManagerRsFecSymbolErrCntGet: Enter [ devId,portNum/startPort-endPort,laneNum ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,laneNum ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            value_Ptr_3 = new_uint32_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, laneNum=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerRsFecSymbolErrCntGet(args[0],portNum,args[2],value_Ptr_3)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('value = %d ' % (uint32_tp_value(value_Ptr_3)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint32_tp(value_Ptr_3)

    #/********************************************************************************/
    # command for xpLinkManagerRsFecSoftReset
    #/********************************************************************************/
    def do_rs_fec_soft_reset(self, arg):
        '''
         xpLinkManagerRsFecSoftReset: Enter [ devId,portNum/startPort-endPort,enable ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,enable ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, enable=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerRsFecSoftReset(args[0],portNum,args[2])
                        if ret !=0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerBackPlaneAbilitySet
    #/********************************************************************************/
    def do_back_plane_ability_set(self, arg):
        '''
         xpLinkManagerBackPlaneAbilitySet: Enter [ devId,portNum/startPort-endPort,backPlaneAbilityMode ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,backPlaneAbilityMode ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, backPlaneAbilityMode=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerBackPlaneAbilitySet(args[0],portNum,args[2])
                        if ret !=0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerBackPlaneAbilityGet
    #/********************************************************************************/
    def do_back_plane_ability_get(self, arg):
        '''
         xpLinkManagerBackPlaneAbilityGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            backPlaneAbilityMode_Ptr_2 = new_xpBackPlaneAbilityModesp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerBackPlaneAbilityGet(args[0],portNum,backPlaneAbilityMode_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('backPlaneAbilityMode = %d' % (xpBackPlaneAbilityModesp_value(backPlaneAbilityMode_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_xpBackPlaneAbilityModesp(backPlaneAbilityMode_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerResetAllChannelSet
    #/********************************************************************************/
    def do_reset_all_channel_set(self, arg):
        '''
         xpLinkManagerResetAllChannelSet: Enter [ devId,portNum/startPort-endPort,enable ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,enable ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, enable=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerResetAllChannelSet(args[0],portNum,args[2])
                        if ret !=0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerResetAllChannelGet
    #/********************************************************************************/
    def do_reset_all_channel_get(self, arg):
        '''
         xpLinkManagerResetAllChannelGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            enable_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerResetAllChannelGet(args[0],portNum,enable_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('enable = %d ' % (uint8_tp_value(enable_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(enable_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerTxFifoThreshold4chSet
    #/********************************************************************************/
    def do_tx_fifo_threshold4ch_set(self, arg):
        '''
         xpLinkManagerTxFifoThreshold4chSet: Enter [ devId,portNum/startPort-endPort,threshold ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,threshold ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, threshold=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerTxFifoThreshold4chSet(args[0],portNum,args[2])
                        if ret !=0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerTxFifoThreshold4chGet
    #/********************************************************************************/
    def do_tx_fifo_threshold4ch_get(self, arg):
        '''
         xpLinkManagerTxFifoThreshold4chGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            threshold_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerTxFifoThreshold4chGet(args[0],portNum,threshold_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('threshold = %d ' % (uint8_tp_value(threshold_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(threshold_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerTxFifoThreshold2chSet
    #/********************************************************************************/
    def do_tx_fifo_threshold2ch_set(self, arg):
        '''
         xpLinkManagerTxFifoThreshold2chSet: Enter [ devId,portNum/startPort-endPort,threshold ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,threshold ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, threshold=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerTxFifoThreshold2chSet(args[0],portNum,args[2])
                        if ret !=0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerTxFifoThreshold2chGet
    #/********************************************************************************/
    def do_tx_fifo_threshold2ch_get(self, arg):
        '''
         xpLinkManagerTxFifoThreshold2chGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            threshold_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerTxFifoThreshold2chGet(args[0],portNum,threshold_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('threshold = %d ' % (uint8_tp_value(threshold_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(threshold_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerTxFifoThreshold1chSet
    #/********************************************************************************/
    def do_tx_fifo_threshold1ch_set(self, arg):
        '''
         xpLinkManagerTxFifoThreshold1chSet: Enter [ devId,portNum/startPort-endPort,threshold ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,threshold ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, threshold=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerTxFifoThreshold1chSet(args[0],portNum,args[2])
                        if ret !=0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerTxFifoThreshold1chGet
    #/********************************************************************************/
    def do_tx_fifo_threshold1ch_get(self, arg):
        '''
         xpLinkManagerTxFifoThreshold1chGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            threshold_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerTxFifoThreshold1chGet(args[0],portNum,threshold_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('threshold = %d ' % (uint8_tp_value(threshold_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(threshold_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerTxInterfaceTypeSet
    #/********************************************************************************/
    def do_tx_inter_face_type_set(self, arg):
        '''
         xpLinkManagerTxInterfaceTypeSet: Enter [ devId,portNum/startPort-endPort,enable ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,enable ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, enable=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerTxInterfaceTypeSet(args[0],portNum,args[2])
                        if ret !=0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerTxInterfaceTypeGet
    #/********************************************************************************/
    def do_tx_inter_face_type_get(self, arg):
        '''
         xpLinkManagerTxInterfaceTypeGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            enable_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerTxInterfaceTypeGet(args[0],portNum,enable_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('enable = %d ' % (uint8_tp_value(enable_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(enable_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerRxInterfaceTypeSet
    #/********************************************************************************/
    def do_rx_inter_face_type_set(self, arg):
        '''
         xpLinkManagerRxInterfaceTypeSet: Enter [ devId,portNum/startPort-endPort,enable ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,enable ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, enable=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerRxInterfaceTypeSet(args[0],portNum,args[2])
                        if ret !=0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerRxInterfaceTypeGet
    #/********************************************************************************/
    def do_rx_inter_face_type_get(self, arg):
        '''
         xpLinkManagerRxInterfaceTypeGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            enable_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerRxInterfaceTypeGet(args[0],portNum,enable_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('enable = %d ' % (uint8_tp_value(enable_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(enable_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerAnRxSelectorGet
    #/********************************************************************************/
    def do_an_rx_selector_get(self, arg):
        '''
         xpLinkManagerAnRxSelectorGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            rxSelector_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerAnRxSelectorGet(args[0],portNum,rxSelector_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('rxSelector = %d ' % (uint8_tp_value(rxSelector_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(rxSelector_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerAnRxNonceGet
    #/********************************************************************************/
    def do_an_rx_nonce_get(self, arg):
        '''
         xpLinkManagerAnRxNonceGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            rxNonce_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerAnRxNonceGet(args[0],portNum,rxNonce_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('rxNonce = %d ' % (uint8_tp_value(rxNonce_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(rxNonce_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerTxActiveGet
    #/********************************************************************************/
    def do_tx_active_get(self, arg):
        '''
         xpLinkManagerTxActiveGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            enable_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerTxActiveGet(args[0],portNum,enable_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('enable = %d ' % (uint8_tp_value(enable_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(enable_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerTxErrorGet
    #/********************************************************************************/
    def do_tx_error_get(self, arg):
        '''
         xpLinkManagerTxErrorGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            enable_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerTxErrorGet(args[0],portNum,enable_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('enable = %d ' % (uint8_tp_value(enable_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(enable_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerTxUnderrunGet
    #/********************************************************************************/
    def do_tx_underrun_get(self, arg):
        '''
         xpLinkManagerTxUnderrunGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            enable_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerTxUnderrunGet(args[0],portNum,enable_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('enable = %d ' % (uint8_tp_value(enable_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(enable_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerTxPauseGet
    #/********************************************************************************/
    def do_tx_pause_get(self, arg):
        '''
         xpLinkManagerTxPauseGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            enable_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerTxPauseGet(args[0],portNum,enable_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('enable = %d ' % (uint8_tp_value(enable_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(enable_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerRxActiveGet
    #/********************************************************************************/
    def do_rx_active_get(self, arg):
        '''
         xpLinkManagerRxActiveGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            enable_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerRxActiveGet(args[0],portNum,enable_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('enable = %d ' % (uint8_tp_value(enable_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(enable_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerRxCrcErrorGet
    #/********************************************************************************/
    def do_rx_crc_error_get(self, arg):
        '''
         xpLinkManagerRxCrcErrorGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            enable_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerRxCrcErrorGet(args[0],portNum,enable_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('enable = %d ' % (uint8_tp_value(enable_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(enable_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerRxErrorGet
    #/********************************************************************************/
    def do_rx_error_get(self, arg):
        '''
         xpLinkManagerRxErrorGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            enable_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerRxErrorGet(args[0],portNum,enable_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('enable = %d ' % (uint8_tp_value(enable_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(enable_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerRxOverflowGet
    #/********************************************************************************/
    def do_rx_overflow_get(self, arg):
        '''
         xpLinkManagerRxOverflowGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            enable_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerRxOverflowGet(args[0],portNum,enable_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('enable = %d ' % (uint8_tp_value(enable_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(enable_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerRxPauseGet
    #/********************************************************************************/
    def do_rx_pause_get(self, arg):
        '''
         xpLinkManagerRxPauseGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            enable_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerRxPauseGet(args[0],portNum,enable_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('enable = %d ' % (uint8_tp_value(enable_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(enable_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerTxFifoOverFlowErrorIntSet
    #/********************************************************************************/
    def do_tx_fifo_over_flow_error_int_set(self, arg):
        '''
         xpLinkManagerTxFifoOverFlowErrorIntSet: Enter [ devId,portNum/startPort-endPort,enable ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,enable ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, enable=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerTxFifoOverFlowErrorIntSet(args[0],portNum,args[2])
                        if ret !=0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerTxFifoOverFlowErrorIntGet
    #/********************************************************************************/
    def do_tx_fifo_over_flow_error_int_get(self, arg):
        '''
         xpLinkManagerTxFifoOverFlowErrorIntGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            enable_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerTxFifoOverFlowErrorIntGet(args[0],portNum,enable_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('enable = %d ' % (uint8_tp_value(enable_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(enable_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerTxFifoOverFlowErrorIntEnableSet
    #/********************************************************************************/
    def do_tx_fifo_over_flow_error_int_enable_set(self, arg):
        '''
         xpLinkManagerTxFifoOverFlowErrorIntEnableSet: Enter [ devId,portNum/startPort-endPort,enable ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,enable ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, enable=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerTxFifoOverFlowErrorIntEnableSet(args[0],portNum,args[2])
                        if ret !=0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerTxFifoOverFlowErrorIntEnableGet
    #/********************************************************************************/
    def do_tx_fifo_over_flow_error_int_enable_get(self, arg):
        '''
         xpLinkManagerTxFifoOverFlowErrorIntEnableGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            enable_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerTxFifoOverFlowErrorIntEnableGet(args[0],portNum,enable_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('enable = %d ' % (uint8_tp_value(enable_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(enable_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerFecErrorBlockIntGet
    #/********************************************************************************/
    def do_fec_error_block_int_get(self, arg):
        '''
         xpLinkManagerFecErrorBlockIntGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            enable_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerFecErrorBlockIntGet(args[0],portNum,enable_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('enable = %d ' % (uint8_tp_value(enable_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(enable_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerFecUncorrectedBlockIntGet
    #/********************************************************************************/
    def do_fec_uncorrected_block_int_get(self, arg):
        '''
         xpLinkManagerFecUncorrectedBlockIntGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            enable_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerFecUncorrectedBlockIntGet(args[0],portNum,enable_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('enable = %d ' % (uint8_tp_value(enable_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(enable_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerFecBlockLockIntGet
    #/********************************************************************************/
    def do_fec_block_lock_int_get(self, arg):
        '''
         xpLinkManagerFecBlockLockIntGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            enable_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerFecBlockLockIntGet(args[0],portNum,enable_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('enable = %d ' % (uint8_tp_value(enable_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(enable_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerFecBlockLockLostIntGet
    #/********************************************************************************/
    def do_fec_block_lock_lost_int_get(self, arg):
        '''
         xpLinkManagerFecBlockLockLostIntGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            enable_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerFecBlockLockLostIntGet(args[0],portNum,enable_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('enable = %d ' % (uint8_tp_value(enable_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(enable_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerFecBlockLockChangedIntGet
    #/********************************************************************************/
    def do_fec_block_lock_changed_int_get(self, arg):
        '''
         xpLinkManagerFecBlockLockChangedIntGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            enable_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerFecBlockLockChangedIntGet(args[0],portNum,enable_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('enable = %d ' % (uint8_tp_value(enable_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(enable_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerFecErrorBlockIntEnableSet
    #/********************************************************************************/
    def do_fec_error_block_int_enable_set(self, arg):
        '''
         xpLinkManagerFecErrorBlockIntEnableSet: Enter [ devId,portNum/startPort-endPort,enable ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,enable ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, enable=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerFecErrorBlockIntEnableSet(args[0],portNum,args[2])
                        if ret !=0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerFecErrorBlockIntEnableGet
    #/********************************************************************************/
    def do_fec_error_block_int_enable_get(self, arg):
        '''
         xpLinkManagerFecErrorBlockIntEnableGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            enable_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerFecErrorBlockIntEnableGet(args[0],portNum,enable_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('enable = %d ' % (uint8_tp_value(enable_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(enable_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerFecUncorrectedBlockIntEnableSet
    #/********************************************************************************/
    def do_fec_uncorrected_block_int_enable_set(self, arg):
        '''
         xpLinkManagerFecUncorrectedBlockIntEnableSet: Enter [ devId,portNum/startPort-endPort,enable ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,enable ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, enable=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerFecUncorrectedBlockIntEnableSet(args[0],portNum,args[2])
                        if ret !=0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerFecUncorrectedBlockIntEnableGet
    #/********************************************************************************/
    def do_fec_uncorrected_block_int_enable_get(self, arg):
        '''
         xpLinkManagerFecUncorrectedBlockIntEnableGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            enable_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerFecUncorrectedBlockIntEnableGet(args[0],portNum,enable_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('enable = %d ' % (uint8_tp_value(enable_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(enable_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerFecBlockLockIntEnableSet
    #/********************************************************************************/
    def do_fec_block_lock_int_enable_set(self, arg):
        '''
         xpLinkManagerFecBlockLockIntEnableSet: Enter [ devId,portNum/startPort-endPort,enable ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,enable ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, enable=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerFecBlockLockIntEnableSet(args[0],portNum,args[2])
                        if ret !=0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerFecBlockLockIntEnableGet
    #/********************************************************************************/
    def do_fec_block_lock_int_enable_get(self, arg):
        '''
         xpLinkManagerFecBlockLockIntEnableGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            enable_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerFecBlockLockIntEnableGet(args[0],portNum,enable_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('enable = %d ' % (uint8_tp_value(enable_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(enable_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerFecBlockLockLostIntEnableSet
    #/********************************************************************************/
    def do_fec_block_lock_lost_int_enable_set(self, arg):
        '''
         xpLinkManagerFecBlockLockLostIntEnableSet: Enter [ devId,portNum/startPort-endPort,enable ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,enable ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, enable=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerFecBlockLockLostIntEnableSet(args[0],portNum,args[2])
                        if ret !=0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerFecBlockLockLostIntEnableGet
    #/********************************************************************************/
    def do_fec_block_lock_lost_int_enable_get(self, arg):
        '''
         xpLinkManagerFecBlockLockLostIntEnableGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            enable_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerFecBlockLockLostIntEnableGet(args[0],portNum,enable_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('enable = %d ' % (uint8_tp_value(enable_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(enable_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerFecBlockLockChangedIntEnableSet
    #/********************************************************************************/
    def do_fec_block_lock_changed_int_enable_set(self, arg):
        '''
         xpLinkManagerFecBlockLockChangedIntEnableSet: Enter [ devId,portNum/startPort-endPort,enable ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,enable ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, enable=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerFecBlockLockChangedIntEnableSet(args[0],portNum,args[2])
                        if ret !=0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerFecBlockLockChangedIntEnableGet
    #/********************************************************************************/
    def do_fec_block_lock_changed_int_enable_get(self, arg):
        '''
         xpLinkManagerFecBlockLockChangedIntEnableGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            enable_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerFecBlockLockChangedIntEnableGet(args[0],portNum,enable_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('enable = %d ' % (uint8_tp_value(enable_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(enable_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerFecErrorBlockIntTestSet
    #/********************************************************************************/
    def do_fec_error_block_int_test_set(self, arg):
        '''
         xpLinkManagerFecErrorBlockIntTestSet: Enter [ devId,portNum/startPort-endPort,enable ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,enable ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, enable=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerFecErrorBlockIntTestSet(args[0],portNum,args[2])
                        if ret !=0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerFecUncorrectedBlockIntTestSet
    #/********************************************************************************/
    def do_fec_uncorrected_block_int_test_set(self, arg):
        '''
         xpLinkManagerFecUncorrectedBlockIntTestSet: Enter [ devId,portNum/startPort-endPort,enable ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,enable ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, enable=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerFecUncorrectedBlockIntTestSet(args[0],portNum,args[2])
                        if ret !=0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerFecBlockLockIntTestSet
    #/********************************************************************************/
    def do_fec_block_lock_int_test_set(self, arg):
        '''
         xpLinkManagerFecBlockLockIntTestSet: Enter [ devId,portNum/startPort-endPort,enable ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,enable ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, enable=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerFecBlockLockIntTestSet(args[0],portNum,args[2])
                        if ret !=0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerFecBlockLockLostIntTestSet
    #/********************************************************************************/
    def do_fec_block_lock_lost_int_test_set(self, arg):
        '''
         xpLinkManagerFecBlockLockLostIntTestSet: Enter [ devId,portNum/startPort-endPort,enable ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,enable ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, enable=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerFecBlockLockLostIntTestSet(args[0],portNum,args[2])
                        if ret !=0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerFecBlockLockChangedIntTestSet
    #/********************************************************************************/
    def do_fec_block_lock_changed_int_test_set(self, arg):
        '''
         xpLinkManagerFecBlockLockChangedIntTestSet: Enter [ devId,portNum/startPort-endPort,enable ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,enable ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, enable=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerFecBlockLockChangedIntTestSet(args[0],portNum,args[2])
                        if ret !=0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerSgmiiIntEnableSet
    #/********************************************************************************/
    def do_sgmii_int_enable_set(self, arg):
        '''
         xpLinkManagerSgmiiIntEnableSet: Enter [ devId,portNum/startPort-endPort,enable ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,enable ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, enable=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerSgmiiIntEnableSet(args[0],portNum,args[2])
                        if ret !=0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerSgmiiIntEnableGet
    #/********************************************************************************/
    def do_sgmii_int_enable_get(self, arg):
        '''
         xpLinkManagerSgmiiIntEnableGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            enable_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerSgmiiIntEnableGet(args[0],portNum,enable_Ptr_2)
                        err = 0
                        if ret !=0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('enable = %d ' % (uint8_tp_value(enable_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(enable_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerSgmiiIntTestSet
    #/********************************************************************************/
    def do_sgmii_int_test_set(self, arg):
        '''
         xpLinkManagerSgmiiIntTestSet: Enter [ devId,portNum/startPort-endPort,enable ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,enable ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, enable=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerSgmiiIntTestSet(args[0],portNum,args[2])
                        if ret !=0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerSgmiiIntTestGet
    #/********************************************************************************/
    def do_sgmii_int_test_get(self, arg):
        '''
         xpLinkManagerSgmiiIntTestGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            enable_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerSgmiiIntTestGet(args[0],portNum,enable_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('enable = %d ' % (uint8_tp_value(enable_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(enable_Ptr_2)


    #/********************************************************************************/
    # command for xpLinkManagerReadCounterClearSet
    #/********************************************************************************/
    def do_read_counter_clear_set(self, arg):
        '''
         xpLinkManagerReadCounterClearSet: Enter [ devId,portNum/startPort-endPort,enable ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,enable ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, enable=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerReadCounterClearSet(args[0],portNum,args[2])
                        if ret !=0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerReadCounterClearGet
    #/********************************************************************************/
    def do_read_counter_clear_get(self, arg):
        '''
         xpLinkManagerReadCounterClearGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            enable_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerReadCounterClearGet(args[0],portNum,enable_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('enable = %d ' % (uint8_tp_value(enable_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(enable_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerReadCounterPrioritySet
    #/********************************************************************************/
    def do_read_counter_priority_set(self, arg):
        '''
         xpLinkManagerReadCounterPrioritySet: Enter [ devId,portNum/startPort-endPort,enable ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,enable ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, enable=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerReadCounterPrioritySet(args[0],portNum,args[2])
                        if ret !=0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerReadCounterPriorityGet
    #/********************************************************************************/
    def do_read_counter_priority_get(self, arg):
        '''
         xpLinkManagerReadCounterPriorityGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            enable_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerReadCounterPriorityGet(args[0],portNum,enable_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('enable = %d ' % (uint8_tp_value(enable_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(enable_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerTxDrainModeSet
    #/********************************************************************************/
    def do_tx_drain_mode_set(self, arg):
        '''
         xpLinkManagerTxDrainModeSet: Enter [ devId,portNum/startPort-endPort,enable ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,enable ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, enable=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerTxDrainModeSet(args[0],portNum,args[2])
                        if ret !=0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerTxDrainModeGet
    #/********************************************************************************/
    def do_tx_drain_mode_get(self, arg):
        '''
         xpLinkManagerTxDrainModeGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            enable_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerTxDrainModeGet(args[0],portNum,enable_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('enable = %d ' % (uint8_tp_value(enable_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(enable_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerRxEarlyEofDetectionSet
    #/********************************************************************************/
    def do_rx_early_eof_detection_set(self, arg):
        '''
         xpLinkManagerRxEarlyEofDetectionSet: Enter [ devId,portNum/startPort-endPort,enable ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,enable ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, enable=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerRxEarlyEofDetectionSet(args[0],portNum,args[2])
                        if ret !=0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerRxEarlyEofDetectionGet
    #/********************************************************************************/
    def do_rx_early_eof_detection_get(self, arg):
        '''
         xpLinkManagerRxEarlyEofDetectionGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            enable_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerRxEarlyEofDetectionGet(args[0],portNum,enable_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('enable = %d ' % (uint8_tp_value(enable_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(enable_Ptr_2)



    #/********************************************************************************/
    # command for xpLinkManagerRsFecDebugShortAMPSet
    #/********************************************************************************/
    def do_rs_fec_debug_short_amp_set(self, arg):
        '''
         xpLinkManagerRsFecDebugShortAMPSet: Enter [ devId,portNum/startPort-endPort,enable ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,enable ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, enable=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerRsFecDebugShortAMPSet(args[0],portNum,args[2])
                        if ret !=0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerRsFecDebugShortAMPGet
    #/********************************************************************************/
    def do_rs_fec_debug_short_amp_get(self, arg):
        '''
         xpLinkManagerRsFecDebugShortAMPGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            enable_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerRsFecDebugShortAMPGet(args[0],portNum,enable_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('enable = %d ' % (uint8_tp_value(enable_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(enable_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerRsFecDebugTestInitSet
    #/********************************************************************************/
    def do_rs_fec_debug_test_init_set(self, arg):
        '''
         xpLinkManagerRsFecDebugTestInitSet: Enter [ devId,portNum/startPort-endPort,enable ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,enable ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, enable=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerRsFecDebugTestInitSet(args[0],portNum,args[2])
                        if ret !=0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerRsFecDebugTestInitGet
    #/********************************************************************************/
    def do_rs_fec_debug_test_init_get(self, arg):
        '''
         xpLinkManagerRsFecDebugTestInitGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            enable_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerRsFecDebugTestInitGet(args[0],portNum,enable_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('enable = %d ' % (uint8_tp_value(enable_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(enable_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerRsFecCWTestStopASMSet
    #/********************************************************************************/
    def do_rs_fec_cw_test_stop_asm_set(self, arg):
        '''
         xpLinkManagerRsFecCWTestStopASMSet: Enter [ devId,portNum/startPort-endPort,enable ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,enable ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, enable=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerRsFecCWTestStopASMSet(args[0],portNum,args[2])
                        if ret !=0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerRsFecCWTestStopASMGet
    #/********************************************************************************/
    def do_rs_fec_cw_test_stop_asm_get(self, arg):
        '''
         xpLinkManagerRsFecCWTestStopASMGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            enable_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerRsFecCWTestStopASMGet(args[0],portNum,enable_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('enable = %d ' % (uint8_tp_value(enable_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(enable_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerRsFecDuplicateAmsGet
    #/********************************************************************************/
    def do_rs_fec_duplicate_ams_get(self, arg):
        '''
         xpLinkManagerRsFecDuplicateAmsGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            enable_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerRsFecDuplicateAmsGet(args[0],portNum,enable_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('enable = %d ' % (uint8_tp_value(enable_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(enable_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerRsFecDuplicateAmsSet
    #/********************************************************************************/
    def do_rs_fec_duplicate_ams_set(self, arg):
        '''
         xpLinkManagerRsFecDuplicateAmsSet: Enter [ devId,portNum/startPort-endPort,enable ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,enable ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, enable=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerRsFecDuplicateAmsSet(args[0],portNum,args[2])
                        if ret !=0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerBpanSerdesTxSelSet
    #/********************************************************************************/
    def do_bpan_serdes_tx_sel_set(self, arg):
        '''
         xpLinkManagerBpanSerdesTxSelSet: Enter [ devId,portNum/startPort-endPort,enable ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,enable ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, enable=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerBpanSerdesTxSelSet(args[0],portNum,args[2])
                        if ret !=0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerBpanSerdesTxSelGet
    #/********************************************************************************/
    def do_bpan_serdes_tx_sel_get(self, arg):
        '''
         xpLinkManagerBpanSerdesTxSelGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            enable_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerBpanSerdesTxSelGet(args[0],portNum,enable_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('enable = %d ' % (uint8_tp_value(enable_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(enable_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerBpanModeSet
    #/********************************************************************************/
    def do_bpan_mode_set(self, arg):
        '''
         xpLinkManagerBpanModeSet: Enter [ devId,portNum/startPort-endPort,enable ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,enable ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, enable=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerBpanModeSet(args[0],portNum,args[2])
                        if ret !=0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerBpanModeGet
    #/********************************************************************************/
    def do_bpan_mode_get(self, arg):
        '''
         xpLinkManagerBpanModeGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            enable_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerBpanModeGet(args[0],portNum,enable_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('enable = %d ' % (uint8_tp_value(enable_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(enable_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerBpanRxGearboxReSyncSet
    #/********************************************************************************/
    def do_bpan_rx_gearbox_re_sync_set(self, arg):
        '''
         xpLinkManagerBpanRxGearboxReSyncSet: Enter [ devId,portNum/startPort-endPort,enable ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,enable ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, enable=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerBpanRxGearboxReSyncSet(args[0],portNum,args[2])
                        if ret !=0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerBpanRxGearboxReSyncGet
    #/********************************************************************************/
    def do_bpan_rx_gearbox_re_sync_get(self, arg):
        '''
         xpLinkManagerBpanRxGearboxReSyncGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            enable_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerBpanRxGearboxReSyncGet(args[0],portNum,enable_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('enable = %d ' % (uint8_tp_value(enable_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(enable_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerRsFecInterruptStatusGet
    #/********************************************************************************/
    def do_rs_fec_interrupt_status_get(self, arg):
        '''
         xpLinkManagerRsFecInterruptStatusGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            enable_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerRsFecInterruptStatusGet(args[0],portNum,enable_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('enable = %d ' % (uint8_tp_value(enable_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(enable_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerRsFecAmcLockGet
    #/********************************************************************************/
    def do_rs_fec_amc_lock_get(self, arg):
        '''
         xpLinkManagerRsFecAmcLockGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            amcLock_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerRsFecAmcLockGet(args[0],portNum,amcLock_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('amcLock = %d ' % (uint8_tp_value(amcLock_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(amcLock_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerRsFecLane0InternalMapGet
    #/********************************************************************************/
    def do_rs_fec_lane0_internal_map_get(self, arg):
        '''
         xpLinkManagerRsFecLane0InternalMapGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            lanMap_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerRsFecLane0InternalMapGet(args[0],portNum,lanMap_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('lanMap = %d ' % (uint8_tp_value(lanMap_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(lanMap_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerRsFecLane1InternalMapGet
    #/********************************************************************************/
    def do_rs_fec_lane1_internal_map_get(self, arg):
        '''
         xpLinkManagerRsFecLane1InternalMapGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            lanMap_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerRsFecLane1InternalMapGet(args[0],portNum,lanMap_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('lanMap = %d ' % (uint8_tp_value(lanMap_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(lanMap_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerRsFecLane2InternalMapGet
    #/********************************************************************************/
    def do_rs_fec_lane2_internal_map_get(self, arg):
        '''
         xpLinkManagerRsFecLane2InternalMapGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            lanMap_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerRsFecLane2InternalMapGet(args[0],portNum,lanMap_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('lanMap = %d ' % (uint8_tp_value(lanMap_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(lanMap_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerRsFecLane3InternalMapGet
    #/********************************************************************************/
    def do_rs_fec_lane3_internal_map_get(self, arg):
        '''
         xpLinkManagerRsFecLane3InternalMapGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            lanMap_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerRsFecLane3InternalMapGet(args[0],portNum,lanMap_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('lanMap = %d ' % (uint8_tp_value(lanMap_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(lanMap_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerGetPortStatus
    #/********************************************************************************/
    def do_get_port_status(self, arg):
        '''
         xpLinkManagerGetPortStatus: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            linkStatus_Ptr_2 = new_uint8_tp()
            faultStatus_Ptr_3 = new_uint8_tp()
            serdesStatus_Ptr_4 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerGetPortStatus(args[0],portNum,linkStatus_Ptr_2,faultStatus_Ptr_3,serdesStatus_Ptr_4)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('==========================')
                            print('Port %d:' % (portNum))
                            print('==========================')
                            print('linkStatus = %d' % (uint8_tp_value(linkStatus_Ptr_2)))
                            print('faultStatus = %d' % (uint8_tp_value(faultStatus_Ptr_3)))
                            print('serdesStatus = %d' % (uint8_tp_value(serdesStatus_Ptr_4)))
                            print('')
                    else:
                        print('==========================')
                        print('Port %d:' % (portNum))
                        print('==========================')
                        print('Port %d is not initialized' % (portNum))
                else:
                    pass
            delete_uint8_tp(serdesStatus_Ptr_4)
            delete_uint8_tp(faultStatus_Ptr_3)
            delete_uint8_tp(linkStatus_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerSetLinkStatus
    #/********************************************************************************/
    def do_set_link_status(self, arg):
        '''
         xpLinkManagerSetLinkStatus: Enter [ devId,portNum/startPort-endPort,status ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,status ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, status=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerSetLinkStatus(args[0],portNum,args[2])
                        if ret !=0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerLinkStatusInterruptEnableSet
    #/********************************************************************************/
    def do_link_status_interrupt_enable_set(self, arg):
        '''
         xpLinkManagerLinkStatusInterruptEnableSet: Enter [ devId,portNum/startPort-endPort,status ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,status ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, status=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerLinkStatusInterruptEnableSet(args[0],portNum,args[2])
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
    #/********************************************************************************/
    # command for xpLinkManagerLinkStatusInterruptEnableGet
    #/********************************************************************************/
    def do_link_status_interrupt_enable_get(self, arg):
        '''
         xpLinkManagerLinkStatusInterruptEnableGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            status_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerLinkStatusInterruptEnableGet(args[0],portNum,status_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('status = %d' % (uint8_tp_value(status_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(status_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerRxCrcCheckEnableGet
    #/********************************************************************************/
    def do_rx_crc_check_enable_get(self, arg):
        '''
         xpLinkManagerRxCrcCheckEnableGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            enable_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerRxCrcCheckEnableGet(args[0],portNum,enable_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('enable = %d ' % (uint8_tp_value(enable_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(enable_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerRxStripFcsEnableGet
    #/********************************************************************************/
    def do_rx_strip_fcs_enable_get(self, arg):
        '''
         xpLinkManagerRxStripFcsEnableGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            enable_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerRxStripFcsEnableGet(args[0],portNum,enable_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('enable = %d ' % (uint8_tp_value(enable_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(enable_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerRxFlowControlDecodeEnableGet
    #/********************************************************************************/
    def do_rx_flow_control_decode_enable_get(self, arg):
        '''
         xpLinkManagerRxFlowControlDecodeEnableGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            enable_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerRxFlowControlDecodeEnableGet(args[0],portNum,enable_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('enable = %d ' % (uint8_tp_value(enable_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(enable_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerRxMaxFrmLenGet
    #/********************************************************************************/
    def do_rx_max_frm_len_get(self, arg):
        '''
         xpLinkManagerRxMaxFrmLenGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            frameSize_Ptr_2 = new_uint16_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerRxMaxFrmLenGet(args[0],portNum,frameSize_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print(' frameSize = %d' % (uint16_tp_value(frameSize_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint16_tp(frameSize_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerTxPriorityPauseVectorGet
    #/********************************************************************************/
    def do_tx_priority_pause_vector_get(self, arg):
        '''
         xpLinkManagerTxPriorityPauseVectorGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            txPriPauseVector_Ptr_2 = new_uint16_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerTxPriorityPauseVectorGet(args[0],portNum,txPriPauseVector_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print(' txPriPauseVector = %d' % (uint16_tp_value(txPriPauseVector_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint16_tp(txPriPauseVector_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerTxIfgLenGet
    #/********************************************************************************/
    def do_tx_ifg_len_get(self, arg):
        '''
         xpLinkManagerTxIfgLenGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            ifgLength_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerTxIfgLenGet(args[0],portNum,ifgLength_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('ifgLength = %d ' % (uint8_tp_value(ifgLength_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(ifgLength_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerTxJabberFrmSizeGet
    #/********************************************************************************/
    def do_tx_jabber_frm_size_get(self, arg):
        '''
         xpLinkManagerTxJabberFrmSizeGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            jabberFrmSize_Ptr_2 = new_uint16_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerTxJabberFrmSizeGet(args[0],portNum,jabberFrmSize_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print(' jabberFrmSize = %d' % (uint16_tp_value(jabberFrmSize_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint16_tp(jabberFrmSize_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerTxIfgCtrlPerFrameEnableGet
    #/********************************************************************************/
    def do_tx_ifg_ctrl_per_frame_enable_get(self, arg):
        '''
         xpLinkManagerTxIfgCtrlPerFrameEnableGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            enable_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerTxIfgCtrlPerFrameEnableGet(args[0],portNum,enable_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('enable = %d ' % (uint8_tp_value(enable_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(enable_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerFlowCtrlPauseTimeGet
    #/********************************************************************************/
    def do_flow_ctrl_pause_time_get(self, arg):
        '''
         xpLinkManagerFlowCtrlPauseTimeGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            pauseTime_Ptr_2 = new_uint16_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerFlowCtrlPauseTimeGet(args[0],portNum,pauseTime_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print(' pauseTime = %d' % (uint16_tp_value(pauseTime_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint16_tp(pauseTime_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerXoffPauseTimeGet
    #/********************************************************************************/
    def do_xoff_pause_time_get(self, arg):
        '''
         xpLinkManagerXoffPauseTimeGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            pauseTime_Ptr_2 = new_uint16_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerXoffPauseTimeGet(args[0],portNum,pauseTime_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print(' pauseTime = %d' % (uint16_tp_value(pauseTime_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint16_tp(pauseTime_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerXonPauseTimeGet
    #/********************************************************************************/
    def do_xon_pause_time_get(self, arg):
        '''
         xpLinkManagerXonPauseTimeGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            pauseTime_Ptr_2 = new_uint16_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerXonPauseTimeGet(args[0],portNum,pauseTime_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print(' pauseTime = %d' % (uint16_tp_value(pauseTime_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint16_tp(pauseTime_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerTimeStampIdSet
    #/********************************************************************************/
    def do_time_stamp_id_set(self, arg):
        '''
         xpLinkManagerTimeStampIdSet: Enter [ devId,portNum/startPort-endPort,timeStampId ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,timeStampId ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, timeStampId=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerTimeStampIdSet(args[0],portNum,args[2])
                        if ret !=0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerTxFcsInvertEnableGet
    #/********************************************************************************/
    def do_tx_fcs_invert_enable_get(self, arg):
        '''
         xpLinkManagerTxFcsInvertEnableGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            enable_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerTxFcsInvertEnableGet(args[0],portNum,enable_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('enable = %d ' % (uint8_tp_value(enable_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(enable_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerTxFlowControlEnableGet
    #/********************************************************************************/
    def do_tx_flow_control_enable_get(self, arg):
        '''
         xpLinkManagerTxFlowControlEnableGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            enable_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerTxFlowControlEnableGet(args[0],portNum,enable_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('enable = %d ' % (uint8_tp_value(enable_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(enable_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerTxPriorityFlowControlEnableGet
    #/********************************************************************************/
    def do_tx_priority_flow_control_enable_get(self, arg):
        '''
         xpLinkManagerTxPriorityFlowControlEnableGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            enable_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerTxPriorityFlowControlEnableGet(args[0],portNum,enable_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('enable = %d ' % (uint8_tp_value(enable_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(enable_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerTxCrcCheckEnableGet
    #/********************************************************************************/
    def do_tx_crc_check_enable_get(self, arg):
        '''
         xpLinkManagerTxCrcCheckEnableGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            enable_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerTxCrcCheckEnableGet(args[0],portNum,enable_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('enable = %d ' % (uint8_tp_value(enable_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(enable_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerTxPreambleLenGet
    #/********************************************************************************/
    def do_tx_preamble_len_get(self, arg):
        '''
         xpLinkManagerTxPreambleLenGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            bytes_Ptr_2 = new_xpPreambleLenBytesp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerTxPreambleLenGet(args[0],portNum,bytes_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            retval = xpPreambleLenBytesp_value(bytes_Ptr_2)
                            #CLI only includes mapping for the supported preamble bytes and for which it's necessary - For unsupported value error will come out from XDK
                            if(retval == eval('PREAMBLE_LEN_BYTES_8')):
                                retval = 8

                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('bytes = %d ' % (retval))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_xpPreambleLenBytesp(bytes_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerRxtxPortEnableGet
    #/********************************************************************************/
    def do_rxtx_port_enable_get(self, arg):
        '''
         xpLinkManagerRxtxPortEnableGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            enable_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerRxtxPortEnableGet(args[0],portNum,enable_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('enable = %d ' % (uint8_tp_value(enable_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(enable_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerTxPortEnableGet
    #/********************************************************************************/
    def do_tx_port_enable_get(self, arg):
        '''
         xpLinkManagerTxPortEnableGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            enable_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerTxPortEnableGet(args[0],portNum,enable_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('enable = %d ' % (uint8_tp_value(enable_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(enable_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerRxPortEnableGet
    #/********************************************************************************/
    def do_rx_port_enable_get(self, arg):
        '''
         xpLinkManagerRxPortEnableGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            enable_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerRxPortEnableGet(args[0],portNum,enable_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('enable = %d ' % (uint8_tp_value(enable_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(enable_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerPortSoftResetGet
    #/********************************************************************************/
    def do_port_soft_reset_get(self, arg):
        '''
         xpLinkManagerPortSoftResetGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            enable_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerPortSoftResetGet(args[0],portNum,enable_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('enable = %d ' % (uint8_tp_value(enable_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(enable_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerPortResetGet
    #/********************************************************************************/
    def do_port_reset_get(self, arg):
        '''
         xpLinkManagerPortResetGet: Enter [ devId,portNum/startPort-endPort,reset ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,reset ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            enable_Ptr_1 = new_uint8_tp()
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, reset=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerPortResetGet(args[0],enable_Ptr_1,args[1],args[2])
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('enable = %d ' % (uint8_tp_value(enable_Ptr_1)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(enable_Ptr_1)

    #/********************************************************************************/
    # command for xpLinkManagerMdioClkDivisonCtrlGet
    #/********************************************************************************/
    def do_mdio_clk_divison_ctrl_get(self, arg):
        '''
         xpLinkManagerMdioClkDivisonCtrlGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            divCtrlRatio_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerMdioClkDivisonCtrlGet(args[0],portNum,divCtrlRatio_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('divCtrlRatio = %d ' % (uint8_tp_value(divCtrlRatio_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(divCtrlRatio_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerPcsTestPatternSelectGet
    #/********************************************************************************/
    def do_pcs_test_pattern_select_get(self, arg):
        '''
         xpLinkManagerPcsTestPatternSelectGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            testPattern_Ptr_2 = new_xpPCSTestPatternp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerPcsTestPatternSelectGet(args[0],portNum,testPattern_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('testPattern = %d ' % (xpPCSTestPatternp_value(testPattern_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_xpPCSTestPatternp(testPattern_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerPcsScrambledIdealTestPatternGet
    #/********************************************************************************/
    def do_pcs_scrambled_ideal_test_pattern_get(self, arg):
        '''
         xpLinkManagerPcsScrambledIdealTestPatternGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            enable_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerPcsScrambledIdealTestPatternGet(args[0],portNum,enable_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('enable = %d ' % (uint8_tp_value(enable_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(enable_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerFec10gEnableGet
    #/********************************************************************************/
    def do_fec10g_enable_get(self, arg):
        '''
         xpLinkManagerFec10gEnableGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            enable_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerFcFecEnableGet(args[0],portNum,enable_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('enable = %d ' % (uint8_tp_value(enable_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(enable_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerFec10gErrToPcsEnableGet
    #/********************************************************************************/
    def do_fec10g_err_to_pcs_enable_get(self, arg):
        '''
         xpLinkManagerFec10gErrToPcsEnableGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            enable_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerFcFecErrToPcsEnableGet(args[0],portNum,enable_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('enable = %d ' % (uint8_tp_value(enable_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(enable_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerFec100gBypassEnableGet
    #/********************************************************************************/
    def do_fec100g_bypass_enable_get(self, arg):
        '''
         xpLinkManagerFec100gBypassEnableGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            enable_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerRsFecBypassEnableGet(args[0],portNum,enable_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('enable = %d ' % (uint8_tp_value(enable_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(enable_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerFec100gEnaErrorIndicationSet
    #/********************************************************************************/
    def do_fec100g_ena_error_indication_set(self, arg):
        '''
         xpLinkManagerFec100gEnaErrorIndicationSet: Enter [ devId,portNum/startPort-endPort,error ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,error ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, error=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerRsFecEnaErrorIndicationSet(args[0],portNum,args[2])
                        if ret !=0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerRsFecSoftResetGet
    #/********************************************************************************/
    def do_rs_fec_soft_reset_get(self, arg):
        '''
         xpLinkManagerRsFecSoftResetGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            enable_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerRsFecSoftResetGet(args[0],portNum,enable_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('enable = %d ' % (uint8_tp_value(enable_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(enable_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerSetSerdesDebugLevel
    #/********************************************************************************/
    def do_set_serdes_debug_level(self, arg):
        '''
         xpLinkManagerSetSerdesDebugLevel: Enter [ devId,serdesId/startSerdesId-endSerdesId,debugLevel,enLogging ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 4
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId,debugLevel,enLogging]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            args[3] = int(args[3])
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d, debugLevel=%d' % (args[0],args[1],args[2]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSetSerdesDebugLevel(args[0],serdesId,args[2],args[3])
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerSerdesInit
    #/********************************************************************************/
    def do_serdes_init(self, arg):
        '''
         xpLinkManagerSerdesInit: Enter [ devId,serdesId/startSerdesId-endSerdesId,TxWidth,RxWidth,divider,serdesTxSel,serdesRxSel,resetSerdes,serdesTestOn,prbsTestMode,firmwareUpload,phaseCal ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 12
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId,TxWidth,RxWidth,divider,serdesTxSel,serdesRxSel,resetSerdes,serdesTestOn,prbsTestMode,firmwareUpload,phaseCal ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            args[3] = int(args[3])
            args[4] = int(args[4])
            args[5] = int(args[5], 16)
            args[6] = int(args[6], 16)
            args[7] = int(args[7], 16)
            args[8] = int(args[8], 16)
            args[9] = int(args[9], 16)
            args[10] = int(args[10], 16)
            args[11] = int(args[11], 16)
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d, TxWidth=%d, RxWidth=%d, divider=%d, serdesTxSel=0x%x, serdesRxSel=0x%x, resetSerdes=0x%x, serdesTestOn=0x%x, prbsTestMode=0x%x, firmwareUpload=0x%x, phaseCal=0x%x' % (args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesInit(args[0],serdesId,args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11])
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerMacMibCntResetStatGet
    #/********************************************************************************/
    def do_mac_mib_cnt_reset_stat_get(self, arg):
        '''
         xpLinkManagerMacMibCntResetStatGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            status_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerMacMibCntResetStatGet(args[0],portNum,status_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('status = %d ' % (uint8_tp_value(status_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(status_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerPcsRErrBlckAndPcsBerCntGet
    #/********************************************************************************/
    def do_pcs_r_err_blck_and_ber_cnt_get(self, arg):
        '''
         xpLinkManagerPcsRErrBlckAndPcsBerCntGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            count_Ptr_2 = new_uint32_tp()
            count_Ptr_3 = new_uint32_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerPcsRErrBlckAndPcsBerCntGet(args[0],portNum,count_Ptr_2,count_Ptr_3)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('pcs R error block count = %d ' % (uint32_tp_value(count_Ptr_2)))
                            print('pcs BER count value = %d ' % (uint32_tp_value(count_Ptr_3)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint32_tp(count_Ptr_2)
            delete_uint32_tp(count_Ptr_3)


    #/********************************************************************************/
    # command for xpLinkManagerPcsRTestPatternErrCntGet
    #/********************************************************************************/
    def do_pcs_r_test_pattern_err_cnt_get(self, arg):
        '''
         xpLinkManagerPcsRTestPatternErrCntGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            count_Ptr_2 = new_uint16_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerPcsRTestPatternErrCntGet(args[0],portNum,count_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print(' count = %d' % (uint16_tp_value(count_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint16_tp(count_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerMacFlowCtrlFrmDestAddrGet
    #/********************************************************************************/
    def do_mac_flow_ctrl_frm_dest_addr_get(self, arg):
        '''
         xpLinkManagerMacFlowCtrlFrmDestAddrGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            macAddr_Ptr_2 = new_uint64_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerMacFlowCtrlFrmDestAddrGet(args[0],portNum,macAddr_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('macAddr = %d ' % (uint64_tp_value(macAddr_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint64_tp(macAddr_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerMacFlowCtrlFrmSrcAddrGet
    #/********************************************************************************/
    def do_mac_flow_ctrl_frm_src_addr_get(self, arg):
        '''
         xpLinkManagerMacFlowCtrlFrmSrcAddrGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            macAddr_Ptr_2 = new_uint64_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerMacFlowCtrlFrmSrcAddrGet(args[0],portNum,macAddr_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('macAddr = %d ' % (uint64_tp_value(macAddr_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint64_tp(macAddr_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerPcsResetStatusGet
    #/********************************************************************************/
    def do_pcs_reset_status_get(self, arg):
        '''
         xpLinkManagerPcsResetStatusGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            status_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerPcsResetStatusGet(args[0],portNum,status_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('status = %d ' % (uint8_tp_value(status_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(status_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerPcsOperationalStatusGet
    #/********************************************************************************/
    def do_pcs_operational_status_get(self, arg):
        '''
         xpLinkManagerPcsOperationalStatusGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            status_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerPcsOperationalStatusGet(args[0],portNum,status_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('status = %d ' % (uint8_tp_value(status_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(status_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerPcsDataPatternStatusGet
    #/********************************************************************************/
    def do_pcs_data_pattern_status_get(self, arg):
        '''
         xpLinkManagerPcsDataPatternStatusGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            status_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerPcsDataPatternStatusGet(args[0],portNum,status_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('status = %d ' % (uint8_tp_value(status_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(status_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerPcsDataPatternSelectGet
    #/********************************************************************************/
    def do_pcs_data_pattern_select_get(self, arg):
        '''
         xpLinkManagerPcsDataPatternSelectGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            dataPattern_Ptr_2 = new_xpPCSDataPatternp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerPcsDataPatternSelectGet(args[0],portNum,dataPattern_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('dataPattern = %d ' % (xpPCSDataPatternp_value(dataPattern_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_xpPCSDataPatternp(dataPattern_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerPcsTxTestModeEnableGet
    #/********************************************************************************/
    def do_pcs_tx_test_mode_enable_get(self, arg):
        '''
         xpLinkManagerPcsTxTestModeEnableGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            testMode_Ptr_2 = new_xpPCSEnableTestModep()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerPcsTxTestModeEnableGet(args[0],portNum,testMode_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('testMode = %d ' % (xpPCSEnableTestModep_value(testMode_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_xpPCSEnableTestModep(testMode_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerPcsRxTestModeEnableGet
    #/********************************************************************************/
    def do_pcs_rx_test_mode_enable_get(self, arg):
        '''
         xpLinkManagerPcsRxTestModeEnableGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            testMode_Ptr_2 = new_xpPCSEnableTestModep()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerPcsRxTestModeEnableGet(args[0],portNum,testMode_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('testMode = %d ' % (xpPCSEnableTestModep_value(testMode_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_xpPCSEnableTestModep(testMode_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerPcsDoubleSpeedEnableGet
    #/********************************************************************************/
    def do_pcs_double_speed_enable_get(self, arg):
        '''
         xpLinkManagerPcsDoubleSpeedEnableGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            enable_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerPcsDoubleSpeedEnableGet(args[0],portNum,enable_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('enable = %d ' % (uint8_tp_value(enable_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(enable_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerEncoding10gEnableGet
    #/********************************************************************************/
    def do_encoding10g_enable_get(self, arg):
        '''
         xpLinkManagerEncoding10gEnableGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            enable_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerEncoding10gEnableGet(args[0],portNum,enable_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('enable = %d ' % (uint8_tp_value(enable_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(enable_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerPcsEnableGet
    #/********************************************************************************/
    def do_pcs_enable_get(self, arg):
        '''
         xpLinkManagerPcsEnableGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            enable_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerPcsEnableGet(args[0],portNum,enable_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('enable = %d ' % (uint8_tp_value(enable_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(enable_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerPcsBypassScramblerEnableGet
    #/********************************************************************************/
    def do_pcs_bypass_scrambler_enable_get(self, arg):
        '''
         xpLinkManagerPcsBypassScramblerEnableGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            enable_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerPcsBypassScramblerEnableGet(args[0],portNum,enable_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('enable = %d ' % (uint8_tp_value(enable_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(enable_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerPcsUseShortTimerEnableGet
    #/********************************************************************************/
    def do_pcs_use_short_timer_enable_get(self, arg):
        '''
         xpLinkManagerPcsUseShortTimerEnableGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            enable_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerPcsUseShortTimerEnableGet(args[0],portNum,enable_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('enable = %d ' % (uint8_tp_value(enable_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(enable_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerPcsIgnoreSignalOkEnableGet
    #/********************************************************************************/
    def do_pcs_ignore_signal_ok_enable_get(self, arg):
        '''
         xpLinkManagerPcsIgnoreSignalOkEnableGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            enable_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerPcsIgnoreSignalOkEnableGet(args[0],portNum,enable_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('enable = %d ' % (uint8_tp_value(enable_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(enable_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerPcsBypassTxBufEnableGet
    #/********************************************************************************/
    def do_pcs_bypass_tx_buf_enable_get(self, arg):
        '''
         xpLinkManagerPcsBypassTxBufEnableGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            enable_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerPcsBypassTxBufEnableGet(args[0],portNum,enable_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('enable = %d ' % (uint8_tp_value(enable_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(enable_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerPcsFullThresholdGet
    #/********************************************************************************/
    def do_pcs_full_threshold_get(self, arg):
        '''
         xpLinkManagerPcsFullThresholdGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            maxEntries_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerPcsFullThresholdGet(args[0],portNum,maxEntries_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('maxEntries = %d ' % (uint8_tp_value(maxEntries_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(maxEntries_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerPcsDecodeTrapGet
    #/********************************************************************************/
    def do_pcs_decode_trap_get(self, arg):
        '''
         xpLinkManagerPcsDecodeTrapGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            trap_Ptr_2 = new_xpDecodeTrapp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerPcsDecodeTrapGet(args[0],portNum,trap_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('trap = %d ' % (xpDecodeTrapp_value(trap_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_xpDecodeTrapp(trap_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerPcsDecodeTrapSet
    #/********************************************************************************/
    def do_pcs_decode_trap_set(self, arg):
        '''
         xpLinkManagerPcsDecodeTrapSet: Enter [ devId,portNum/startPort-endPort, trapType ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,trapType ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, trapType=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerPcsDecodeTrapSet(args[0],portNum,args[2])
                        if ret !=0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass



    #/********************************************************************************/
    # command for xpLinkManagerFecModeGet
    #/********************************************************************************/
    def do_fec_enable_get(self, arg):
        '''
         xpLinkManagerFecModeGet: Enter [ devId,portNum/startPort-endPort ]
         This cli will give the FEC mode if enable otherwise it tell FEC is disable
         In A0 only 100G has the FEC feature available which is RS FEC
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            fec_mode = new_xpFecModep()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerFecModeGet(args[0],portNum,fec_mode)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            if(RS_FEC_MODE == xpFecModep_value(fec_mode)):
                                fecModeStr = "RS FEC MODE is enable"
                            elif(FC_FEC_MODE == xpFecModep_value(fec_mode)):
                                fecModeStr = "FC FEC MODE is enable"
                            else:
                                fecModeStr = "FEC is disable"
                            print('============================')
                            print('%s ' % fecModeStr)
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_xpFecModep(fec_mode)

    #/********************************************************************************/
    # command for xpLinkManagerFecResetForceEnableGet
    #/********************************************************************************/
    def do_fec_reset_force_enable_get(self, arg):
        '''
         xpLinkManagerFecResetForceEnableGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            enable_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerFecResetForceEnableGet(args[0],portNum,enable_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('enable = %d ' % (uint8_tp_value(enable_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(enable_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerFecResetForceEnableSet
    #/********************************************************************************/
    def do_fec_reset_force_enable_set(self, arg):
        '''
         xpLinkManagerFecResetForceEnableSet: Enter [ devId,portNum/startPort-endPort,enable ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,enable ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, enable=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerFecResetForceEnableSet(args[0],portNum,args[2])
                        if ret !=0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerGmiiLoopbackEnableGet
    #/********************************************************************************/
    def do_gmii_loopback_enable_get(self, arg):
        '''
         xpLinkManagerGmiiLoopbackEnableGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            enable_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerGmiiLoopbackEnableGet(args[0],portNum,enable_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('enable = %d ' % (uint8_tp_value(enable_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(enable_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerSgmiiDisparityErrCntGet
    #/********************************************************************************/
    def do_sgmii_disparity_err_cnt_get(self, arg):
        '''
         xpLinkManagerSgmiiDisparityErrCntGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            count_Ptr_2 = new_uint16_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerSgmiiDisparityErrCntGet(args[0],portNum,count_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print(' count = %d' % (uint16_tp_value(count_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint16_tp(count_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerSgmiiInvalidCodeCntGet
    #/********************************************************************************/
    def do_sgmii_invalid_code_cnt_get(self, arg):
        '''
         xpLinkManagerSgmiiInvalidCodeCntGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            count_Ptr_2 = new_uint16_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerSgmiiInvalidCodeCntGet(args[0],portNum,count_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print(' count = %d' % (uint16_tp_value(count_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint16_tp(count_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerSgmiiSerdesLoopbackEnableGet
    #/********************************************************************************/
    def do_sgmii_serdes_loopback_enable_get(self, arg):
        '''
         xpLinkManagerSgmiiSerdesLoopbackEnableGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            enable_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerSgmiiSerdesLoopbackEnableGet(args[0],portNum,enable_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('enable = %d ' % (uint8_tp_value(enable_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(enable_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerSgmiiAutoNegGet
    #/********************************************************************************/
    def do_sgmii_auto_neg_get(self, arg):
        '''
         xpLinkManagerSgmiiAutoNegGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            enable_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerSgmiiAutoNegGet(args[0],portNum,enable_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('enable = %d ' % (uint8_tp_value(enable_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(enable_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerSgmiiAutoNegSet
    #/********************************************************************************/
    def do_sgmii_auto_neg_set(self, arg):
        '''
         xpLinkManagerSgmiiAutoNegSet: Enter [ devId,portNum/startPort-endPort,enable ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,enable ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, enable=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerSgmiiAutoNegSet(args[0],portNum,args[2])
                        if ret !=0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerSgmiiAutoNegRestartGet
    #/********************************************************************************/
    def do_sgmii_auto_neg_restart_get(self, arg):
        '''
         xpLinkManagerSgmiiAutoNegRestartGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            restart_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerSgmiiAutoNegRestartGet(args[0],portNum,restart_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('restart = %d ' % (uint8_tp_value(restart_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(restart_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerSgmiiAutoNegRestartSet
    #/********************************************************************************/
    def do_sgmii_auto_neg_restart_set(self, arg):
        '''
         xpLinkManagerSgmiiAutoNegRestartSet: Enter [ devId,portNum/startPort-endPort,restart ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,restart ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, restart=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerSgmiiAutoNegRestartSet(args[0],portNum,args[2])
                        if ret !=0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerRxPreambleLenGet
    #/********************************************************************************/
    def do_rx_preamble_len_get(self, arg):
        '''
         xpLinkManagerRxPreambleLenGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            length_Ptr_2 = new_xpRxPreambleLenBytesp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerRxPreambleLenGet(args[0],portNum,length_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            retval = xpRxPreambleLenBytesp_value(length_Ptr_2)
                            #CLI only includes mapping for the supported preamble bytes and for which it's necessary - For unsupported value error will come out from XDK
                            if(retval == eval('PREAMBLE_RX_LEN_BYTES_8')):
                                retval = 8
                            if(retval == eval('PREAMBLE_RX_LEN_BYTES_4')):
                                retval = 4

                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('bytes = %d ' % (retval))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_xpRxPreambleLenBytesp(length_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerSerdesDfePause
    #/********************************************************************************/
    def do_serdes_dfe_pause(self, arg):
        '''
         xpLinkManagerSerdesDfePause: Enter [ devId,serdesId/startSerdesId-endSerdesId ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            rrEnabled_Ptr_2 = new_uint32_tp()
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d' % (args[0],args[1]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesDfePause(args[0],serdesId,rrEnabled_Ptr_2)
                err = 0
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                    err = 1
                if err == 0:
                    print('rrEnabled = %d for serdesId = %d' % (uint32_tp_value(rrEnabled_Ptr_2),serdesId))
                    pass
            delete_uint32_tp(rrEnabled_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerSerdesDfeWait
    #/********************************************************************************/
    def do_serdes_dfe_wait(self, arg):
        '''
         xpLinkManagerSerdesDfeWait: Enter [ devId,serdesId/startSerdesId-endSerdesId ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d' % (args[0],args[1]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesDfeWait(args[0],serdesId)
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerSerdesDfeWaitTimeout
    #/********************************************************************************/
    def do_serdes_dfe_wait_timeout(self, arg):
        '''
         xpLinkManagerSerdesDfeWaitTimeout: Enter [ devId,serdesId/startSerdesId-endSerdesId,timeoutInMilliseconds ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId,timeoutInMilliseconds ]')
        else:
            args[0] = int(args[0])
            args[2] = int(args[2])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d timeoutInMilliseconds=%d' % (args[0],args[1],args[2]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesDfeWaitTimeout(args[0],serdesId,args[2])
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerSerdesDfeResume
    #/********************************************************************************/
    def do_serdes_dfe_resume(self, arg):
        '''
         xpLinkManagerSerdesDfeResume: Enter [ devId,serdesId/startSerdesId-endSerdesId,rrEnable ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId,rrEnable ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d, rrEnable=%d' % (args[0],args[1],args[2]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesDfeResume(args[0],serdesId,args[2])
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                else:
                    pass


    #/********************************************************************************/
    # command for xpLinkManagerSerdesPmdTrain
    #/********************************************************************************/
    def do_serdes_pmd_train(self, arg):
        '''
         xpLinkManagerSerdesPmdTrain: Enter [ devId,serdesId/startSerdesId-endSerdesId ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d' % (args[0],args[1]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesPmdTrain(args[0],serdesId)
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerSerdesPmdDebug
    #/********************************************************************************/
    def do_serdes_pmd_debug(self, arg):
        '''
         xpLinkManagerSerdesPmdDebug: Enter [ devId,serdesId/startSerdesId-endSerdesId ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d' % (args[0],args[1]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesPmdDebug(args[0],serdesId)
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerSerdesPmdDebugPrint
    #/********************************************************************************/
    def do_serdes_pmd_debug_print(self, arg):
        '''
         xpLinkManagerSerdesPmdDebugPrint: Enter [ devId,serdesId/startSerdesId-endSerdesId ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d' % (args[0],args[1]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesPmdDebugPrint(args[0],serdesId)
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerSerdesCommandExec
    #/********************************************************************************/
    def do_serdes_command_exec(self, arg):
        '''
         xpLinkManagerSerdesCommandExec: Enter [ devId,serdesId/startSerdesId-endSerdesId,regAddr,command,serdesData,recvDataBack ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 6
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId,regAddr,command,serdesData,recvDataBack ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2], 16)
            args[3] = int(args[3])
            args[4] = int(args[4], 16)
            args[5] = int(args[5], 16)
            serdesStatus_Ptr_6 = new_uint32_tp()
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d, regAddr=0x%x, command=%d, serdesData=0x%x, recvDataBack=0x%x' % (args[0],args[1],args[2],args[3],args[4],args[5]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesCommandExec(args[0],serdesId,args[2],args[3],args[4],args[5],serdesStatus_Ptr_6)
                err = 0
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                    err = 1
                if err == 0:
                    print('serdesStatus = %d for serdesId = %d' % (uint32_tp_value(serdesStatus_Ptr_6),serdesId))
                    pass
            delete_uint32_tp(serdesStatus_Ptr_6)

    #/********************************************************************************/
    # command for xpLinkManagerSerdesWr
    #/********************************************************************************/
    def do_serdes_wr(self, arg):
        '''
         xpLinkManagerSerdesWr: Enter [ devId,serdesId/startSerdesId-endSerdesId,regAddr,serdesData ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 4
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId,regAddr,serdesData ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2], 16)
            args[3] = int(args[3], 16)
            serdesStatus_Ptr_4 = new_uint32_tp()
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d, regAddr=0x%x, serdesData=0x%x' % (args[0],args[1],args[2],args[3]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesWr(args[0],serdesId,args[2],args[3],serdesStatus_Ptr_4)
                err = 0
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                    err = 1
                if err == 0:
                    print('serdesStatus = %d for serdesId = %d' % (uint32_tp_value(serdesStatus_Ptr_4),serdesId))
                    pass
            delete_uint32_tp(serdesStatus_Ptr_4)

    #/********************************************************************************/
    # command for xpLinkManagerSerdesRmw
    #/********************************************************************************/
    def do_serdes_rmw(self, arg):
        '''
         xpLinkManagerSerdesRmw: Enter [ devId,serdesId/startSerdesId-endSerdesId,regAddr,serdesData,mask ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 5
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId,regAddr,serdesData,mask ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2], 16)
            args[3] = int(args[3], 16)
            args[4] = int(args[4])
            serdesStatus_Ptr_5 = new_uint32_tp()
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d, regAddr=0x%x, serdesData=0x%x, mask=%d' % (args[0],args[1],args[2],args[3],args[4]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesRmw(args[0],serdesId,args[2],args[3],args[4],serdesStatus_Ptr_5)
                err = 0
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                    err = 1
                if err == 0:
                    print('serdesStatus = %d for serdesId = %d' % (uint32_tp_value(serdesStatus_Ptr_5),serdesId))
                    pass
            delete_uint32_tp(serdesStatus_Ptr_5)

    #/********************************************************************************/
    # command for xpLinkManagerSerdesRd
    #/********************************************************************************/
    def do_serdes_rd(self, arg):
        '''
         xpLinkManagerSerdesRd: Enter [ devId,serdesId/startSerdesId-endSerdesId,regAddr ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId,regAddr ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2], 16)
            readData_Ptr_3 = new_uint32_tp()
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d, regAddr=0x%x' % (args[0],args[1],args[2]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesRd(args[0],serdesId,args[2],readData_Ptr_3)
                err = 0
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                    err = 1
                if err == 0:
                    print('readData = %d for serdesId = %d' % (uint32_tp_value(readData_Ptr_3),serdesId))
                    pass
            delete_uint32_tp(readData_Ptr_3)

    #/********************************************************************************/
    # command for xpLinkManagerSerdesReset
    #/********************************************************************************/
    def do_serdes_reset(self, arg):
        '''
         xpLinkManagerSerdesReset: Enter [ devId,serdesId/startSerdesId-endSerdesId,hard ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId,hard ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d, hard=%d' % (args[0],args[1],args[2]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesReset(args[0],serdesId,args[2])
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                else:
                    pass



    #/********************************************************************************/
    # command for xpLinkManagerAllSerdesDiag
    #/********************************************************************************/
    def do_all_serdes_diag(self, arg):
        '''
         xpLinkManagerAllSerdesDiag: Enter [ devId,serdesId/startSerdesId-endSerdesId ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            serdesStatus_Ptr_2 = new_uint32_tp()
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d' % (args[0],args[1]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerAllSerdesDiag(args[0],serdesId,serdesStatus_Ptr_2)
                err = 0
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                    err = 1
                if err == 0:
                    print('serdesStatus = %d for serdesId = %d' % (uint32_tp_value(serdesStatus_Ptr_2),serdesId))
                    pass
            delete_uint32_tp(serdesStatus_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerSerdesStateDump
    #/********************************************************************************/
    def do_serdes_state_dump(self, arg):
        '''
         xpLinkManagerSerdesStateDump: Enter [ devId,serdesId/startSerdesId-endSerdesId ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d' % (args[0],args[1]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesStateDump(args[0],serdesId)
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerGetReturnCode
    #/********************************************************************************/
    def do_get_return_code(self, arg):
        '''
         xpLinkManagerGetReturnCode: Enter [ devId,serdesId/startSerdesId-endSerdesId ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d' % (args[0],args[1]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerGetReturnCode(args[0],serdesId)
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerSetIpType
    #/********************************************************************************/
    def do_set_ip_type(self, arg):
        '''
         xpLinkManagerSetIpType: Enter [ devId,serdesId/startSerdesId-endSerdesId ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d' % (args[0],args[1]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSetIpType(args[0],serdesId)
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerSerdesEyeErrorsGet
    #/********************************************************************************/
    def do_serdes_eye_errors_get(self, arg):
        '''
         xpLinkManagerSerdesEyeErrorsGet: Enter [ devId,serdesId/startSerdesId-endSerdesId,xPoint,yPoint ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 4
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId,xPoint,yPoint ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            args[3] = int(args[3])
            errCnt_Ptr_4 = new_int64_tp()
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d, xPoint=%d, yPoint=%d' % (args[0],args[1],args[2],args[3]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesEyeErrorsGet(args[0],serdesId,args[2],args[3],errCnt_Ptr_4)
                err = 0
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                    err = 1
                if err == 0:
                    print('errCnt = %d for serdesId = %d' % (int64_tp_value(errCnt_Ptr_4),serdesId))
                    pass
            delete_int64_tp(errCnt_Ptr_4)

    #/********************************************************************************/
    # command for xpLinkManagerSerdesEyeBitsGet
    #/********************************************************************************/
    def do_serdes_eye_bits_get(self, arg):
        '''
         xpLinkManagerSerdesEyeBitsGet: Enter [ devId,serdesId/startSerdesId-endSerdesId,xPoint,yPoint ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 4
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId,xPoint,yPoint ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            args[3] = int(args[3])
            bitCnt_Ptr_4 = new_int64_tp()
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d, xPoint=%d, yPoint=%d' % (args[0],args[1],args[2],args[3]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesEyeBitsGet(args[0],serdesId,args[2],args[3],bitCnt_Ptr_4)
                err = 0
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                    err = 1
                if err == 0:
                    print('bitCnt = %d for serdesId = %d' % (int64_tp_value(bitCnt_Ptr_4),serdesId))
                    pass
            delete_int64_tp(bitCnt_Ptr_4)

    #/********************************************************************************/
    # command for xpLinkManagerSerdesEyeGradGet
    #/********************************************************************************/
    def do_serdes_eye_grad_get(self, arg):
        '''
         xpLinkManagerSerdesEyeGradGet: Enter [ devId,serdesId/startSerdesId-endSerdesId,xPoint,yPoint ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 4
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId,xPoint,yPoint ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            args[3] = int(args[3])
            gradVal_Ptr_4 = new_floatp()
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d, xPoint=%d, yPoint=%d' % (args[0],args[1],args[2],args[3]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesEyeGradGet(args[0],serdesId,args[2],args[3],gradVal_Ptr_4)
                err = 0
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                    err = 1
                if err == 0:
                    print('gradVal = %d for serdesId = %d' % (floatp_value(gradVal_Ptr_4),serdesId))
                    pass
            delete_floatp(gradVal_Ptr_4)

    #/********************************************************************************/
    # command for xpLinkManagerSerdesEyeQvalGet
    #/********************************************************************************/
    def do_serdes_eye_qval_get(self, arg):
        '''
         xpLinkManagerSerdesEyeQvalGet: Enter [ devId,serdesId/startSerdesId-endSerdesId,xPoint,yPoint ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 4
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId,xPoint,yPoint ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            args[3] = int(args[3])
            qVal_Ptr_4 = new_floatp()
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d, xPoint=%d, yPoint=%d' % (args[0],args[1],args[2],args[3]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesEyeQvalGet(args[0],serdesId,args[2],args[3],qVal_Ptr_4)
                err = 0
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                    err = 1
                if err == 0:
                    print('qVal = %d for serdesId = %d' % (floatp_value(qVal_Ptr_4),serdesId))
                    pass
            delete_floatp(qVal_Ptr_4)

    #/********************************************************************************/
    # command for xpLinkManagerHardwareInfoFormat
    #/********************************************************************************/
    def do_hardware_info_format(self, arg):
        '''
         xpLinkManagerHardwareInfoFormat: Enter [ devId,serdesId/startSerdesId-endSerdesId,hwInfo ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId,hwInfo ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            hwInfo_ptr = str(args[2])
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d, hwInfo=%s' % (args[0],args[1],hwInfo_ptr))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerHardwareInfoFormat(args[0],serdesId,hwInfo_ptr)

        #/********************************************************************************/
        # command for xpLinkManagerSerdesEyePlotLogPrint
        #/********************************************************************************/
    def do_serdes_eye_plot_log_print(self, arg):
        '''
         xpLinkManagerSerdesEyePlotLogPrint: Enter [ devId,serdesId/startSerdesId-endSerdesId,level,func,line ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 5
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId,level,func,line ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            func_Ptr_3 = str(args[3])
            args[4] = int(args[4])
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d, level=%d, func=%s, line=%d' % (args[0],args[1],args[2],func_Ptr_3,args[4]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesEyePlotLogPrint(args[0],serdesId,args[2],func_Ptr_3,args[4])
                err = 0
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                    err = 1
                if err == 0:
                    print('func = %s for serdesId = %d' % func_Ptr_3,serdesId)
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerSerdesEyeHbtcLogPrint
    #/********************************************************************************/
    def do_serdes_eye_hbtc_log_print(self, arg):
        '''
         xpLinkManagerSerdesEyeHbtcLogPrint: Enter [ devId,serdesId/startSerdesId-endSerdesId,level,func,line ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 5
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId,level,func,line ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            func_Ptr_3 = str(args[3])
            args[4] = int(args[4])
            hbtcp_Ptr_5 = new_xpSerdesEyeHbtc_tp()
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d, level=%d, func=%s, line=%d' % (args[0],args[1],args[2],func_Ptr_3,args[4]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesEyeHbtcLogPrint(args[0],serdesId,args[2],func_Ptr_3,args[4],hbtcp_Ptr_5)
                err = 0
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                    err = 1
                if err == 0:
                    print('func = %s for serdesId = %d' % func_Ptr_3,serdesId)
                    print('hbtcp = %d for serdesId = %d' % (xpSerdesEyeHbtc_tp_value(hbtcp_Ptr_5),serdesId))
                    pass
            delete_xpSerdesEyeHbtc_tp(hbtcp_Ptr_5)

    #/********************************************************************************/
    # command for xpLinkManagerSerdesEyeVbtcLogPrint
    #/********************************************************************************/
    def do_serdes_eye_vbtc_log_print(self, arg):
        '''
         xpLinkManagerSerdesEyeVbtcLogPrint: Enter [ devId,serdesId/startSerdesId-endSerdesId,level,func,line ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 5
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId,level,func,line ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            func_Ptr_3 = str(args[3])
            args[4] = int(args[4])
            vbtcp_Ptr_5 = new_xpSerdesEyeVbtc_tp()
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d, level=%d, func=%s, line=%d' % (args[0],args[1],args[2],func_Ptr_3,args[4]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesEyeVbtcLogPrint(args[0],serdesId,args[2],func_Ptr_3,args[4],vbtcp_Ptr_5)
                err = 0
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                    err = 1
                if err == 0:
                    print('func = %s for serdesId = %d' % func_Ptr_3,serdesId)
                    print('vbtcp = %d for serdesId = %d' % (xpSerdesEyeVbtc_tp_value(vbtcp_Ptr_5),serdesId))
                    pass
            delete_xpSerdesEyeVbtc_tp(vbtcp_Ptr_5)

    #/********************************************************************************/
    # command for xpLinkManagerSerdesEyeDataReadFile
    #/********************************************************************************/
    def do_serdes_eye_data_read_file(self, arg):
        '''
         xpLinkManagerSerdesEyeDataReadFile: Enter [ devId,serdesId/startSerdesId-endSerdesId,filename ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId,filename ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            filename_Ptr_2 = str(args[2])
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d filename=%s' % (args[0],args[1],filename_Ptr_2))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesEyeDataReadFile(args[0],serdesId,filename_Ptr_2)
                err = 0
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                    err = 1
                if err == 0:
                    print('filename = %s for serdesId = %d' % filename_Ptr_2,serdesId)
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerSerdesGetFirmwareRev
    #/********************************************************************************/
    def do_serdes_get_firmware_rev(self, arg):
        '''
         xpLinkManagerSerdesGetFirmwareRev: Enter [ devId,serdesId/startSerdesId-endSerdesId ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            fwRev_Ptr_2 = new_uint32_tp()
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d' % (args[0],args[1]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesGetFirmwareRev(args[0],serdesId,fwRev_Ptr_2)
                err = 0
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                    err = 1
                if err == 0:
                    print('fwRev = %d for serdesId = %d' % (uint32_tp_value(fwRev_Ptr_2),serdesId))
                    pass
            delete_uint32_tp(fwRev_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerSerdesGetFirmwareBuildId
    #/********************************************************************************/
    def do_serdes_get_firmware_build_id(self, arg):
        '''
         xpLinkManagerSerdesGetFirmwareBuildId: Enter [ devId,serdesId/startSerdesId-endSerdesId ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            fwBldId_Ptr_2 = new_uint32_tp()
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d' % (args[0],args[1]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesGetFirmwareBuildId(args[0],serdesId,fwBldId_Ptr_2)
                err = 0
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                    err = 1
                if err == 0:
                    print('fwBldId = %d for serdesId = %d' % (uint32_tp_value(fwBldId_Ptr_2),serdesId))
                    pass
            delete_uint32_tp(fwBldId_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerSerdesGetLsbRev
    #/********************************************************************************/
    def do_serdes_get_lsb_rev(self, arg):
        '''
         xpLinkManagerSerdesGetLsbRev: Enter [ devId,serdesId/startSerdesId-endSerdesId ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d' % (args[0],args[1]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesGetLsbRev(args[0],serdesId)
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerSerdesGetTxRxReady
    #/********************************************************************************/
    def do_serdes_get_tx_rx_ready(self, arg):
        '''
         xpLinkManagerSerdesGetTxRxReady: Enter [ devId,serdesId/startSerdesId-endSerdesId ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            tx_Ptr_2 = new_intp()
            rx_Ptr_3 = new_intp()
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d' % (args[0],args[1]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesGetTxRxReady(args[0],serdesId,tx_Ptr_2,rx_Ptr_3)
                err = 0
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                    err = 1
                if err == 0:
                    print('tx = %d for serdesId = %d' % (intp_value(tx_Ptr_2),serdesId))
                    print('rx = %d for serdesId = %d' % (intp_value(rx_Ptr_3),serdesId))
                    pass
            delete_intp(rx_Ptr_3)
            delete_intp(tx_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerSerdesSetTxRxEnable
    #/********************************************************************************/
    def do_serdes_set_tx_rx_enable(self, arg):
        '''
         xpLinkManagerSerdesSetTxRxEnable: Enter [ devId,serdesId/startSerdesId-endSerdesId,tx,rx,txOutput ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 5
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId,tx,rx,txOutput ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            args[3] = int(args[3])
            args[4] = int(args[4])
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d, tx=%d, rx=%d, txOutput=%d' % (args[0],args[1],args[2],args[3],args[4]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesSetTxRxEnable(args[0],serdesId,args[2],args[3],args[4])
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerSerdesGetTxOutputEnable
    #/********************************************************************************/
    def do_serdes_get_tx_output_enable(self, arg):
        '''
         xpLinkManagerSerdesGetTxOutputEnable: Enter [ devId,serdesId/startSerdesId-endSerdesId ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            enable_Ptr_2 = new_intp()
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d' % (args[0],args[1]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesGetTxOutputEnable(args[0],serdesId,enable_Ptr_2)
                err = 0
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                    err = 1
                if err == 0:
                    print('enable = %d for serdesId = %d' % (intp_value(enable_Ptr_2),serdesId))
                    pass
            delete_intp(enable_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerSerdesSetTxOutputEnable
    #/********************************************************************************/
    def do_serdes_set_tx_output_enable(self, arg):
        '''
         xpLinkManagerSerdesSetTxOutputEnable: Enter [ devId,serdesId/startSerdesId-endSerdesId,enable ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId,enable ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d, enable=%d' % (args[0],args[1],args[2]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesSetTxOutputEnable(args[0],serdesId,args[2])
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerSerdesGetTxRxWidth
    #/********************************************************************************/
    def do_serdes_get_tx_rx_width(self, arg):
        '''
         xpLinkManagerSerdesGetTxRxWidth: Enter [ devId,serdesId/startSerdesId-endSerdesId ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            txWidth_Ptr_2 = new_int32_tp()
            rxWidth_Ptr_3 = new_int32_tp()
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d' % (args[0],args[1]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesGetTxRxWidth(args[0],serdesId,txWidth_Ptr_2,rxWidth_Ptr_3)
                err = 0
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                    err = 1
                if err == 0:
                    print('txWidth = %d for serdesId = %d' % (int32_tp_value(txWidth_Ptr_2),serdesId))
                    print('rxWidth = %d for serdesId = %d' % (int32_tp_value(rxWidth_Ptr_3),serdesId))
                    pass
            delete_int32_tp(rxWidth_Ptr_3)
            delete_int32_tp(txWidth_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerSerdesSetTxRxWidth
    #/********************************************************************************/
    def do_serdes_set_tx_rx_width(self, arg):
        '''
         xpLinkManagerSerdesSetTxRxWidth: Enter [ devId,serdesId/startSerdesId-endSerdesId,txWidth,rxWidth ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 4
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId,txWidth,rxWidth ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            args[3] = int(args[3])
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d, txWidth=%d, rxWidth=%d' % (args[0],args[1],args[2],args[3]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesSetTxRxWidth(args[0],serdesId,args[2],args[3])
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerSerdesSetTxInvert
    #/********************************************************************************/
    def do_serdes_set_tx_invert(self, arg):
        '''
         xpLinkManagerSerdesSetTxInvert: Enter [ devId,serdesId/startSerdesId-endSerdesId,invert ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId,invert ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d, invert=%d' % (args[0],args[1],args[2]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesSetTxInvert(args[0],serdesId,args[2])
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerSerdesSetRxInvert
    #/********************************************************************************/
    def do_serdes_set_rx_invert(self, arg):
        '''
         xpLinkManagerSerdesSetRxInvert: Enter [ devId,serdesId/startSerdesId-endSerdesId,invert ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId,invert ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d, invert=%d' % (args[0],args[1],args[2]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesSetRxInvert(args[0],serdesId,args[2])
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerSerdesTxInjectError
    #/********************************************************************************/
    def do_serdes_tx_inject_error(self, arg):
        '''
         xpLinkManagerSerdesTxInjectError: Enter [ devId,serdesId/startSerdesId-endSerdesId,numBits ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId,numBits ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d, numBits=%d' % (args[0],args[1],args[2]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesTxInjectError(args[0],serdesId,args[2])
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerSerdesRxInjectError
    #/********************************************************************************/
    def do_serdes_rx_inject_error(self, arg):
        '''
         xpLinkManagerSerdesRxInjectError: Enter [ devId,serdesId/startSerdesId-endSerdesId,numBits ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId,numBits ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d, numBits=%d' % (args[0],args[1],args[2]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesRxInjectError(args[0],serdesId,args[2])
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerSerdesSetRxInputLoopback
    #/********************************************************************************/
    def do_serdes_set_rx_input_loopback(self, arg):
        '''
         xpLinkManagerSerdesSetRxInputLoopback: Enter [ devId,serdesId/startSerdesId-endSerdesId,selectInternal ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId,selectInternal ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d, selectInternal=%d' % (args[0],args[1],args[2]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesSetRxInputLoopback(args[0],serdesId,args[2])
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerSerdesGetTxUserData
    #/********************************************************************************/
    def do_serdes_get_tx_user_data(self, arg):
        '''
         xpLinkManagerSerdesGetTxUserData: Enter [ devId,serdesId/startSerdesId-endSerdesId ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            data = [0] * 4
            print('========================')
            print(' serdes-Id |    Data   |')
            print('========================')
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesGetTxUserData(args[0],serdesId,data)
                if ret != 0:
                    print('Error : Return Value = %d for serdesId = %d' % (ret,serdesId))
                else:
                    print('    %03d    |  0x%05X  |' % (serdesId, data[0]))
            del data
            print('========================')

    #/********************************************************************************/
    # command for xpLinkManagerSerdesSetTxUserData
    #/********************************************************************************/
    def do_serdes_set_tx_user_data(self, arg):
        '''
         xpLinkManagerSerdesSetTxUserData: Enter [ devId,serdesId/startSerdesId-endSerdesId,data ]
         Example: serdes_set_tx_user_data 0 10 0x04 / serdes_set_tx_user_data 0 10-139 0x04
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId,data ]')
            print('Example: serdes_set_tx_user_data 0 10 0x04 / serdes_set_tx_user_data 0 10-139 0x04')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            try:
                args[2] = int(args[2],16)
            except:
                print('Error: data should be in hex')
                return
            data = [0] * 4
            data[3] = args[2]
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d, data=%s' % (args[0],args[1],args[2]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesSetTxUserData(args[0],serdesId,data)
                if ret != 0:
                    print('Error: Return Value = %d for serdesId = %d' % (ret,serdesId))
                else:
                    print('Tx userdata set successfully for serdesId = %d' % (serdesId))
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerSerdesSetRxCmpData
    #/********************************************************************************/
    def do_serdes_set_rx_cmp_data(self, arg):
        '''
         xpLinkManagerSerdesSetRxCmpData: Enter [ devId,serdesId/startSerdesId-endSerdesId,cmpData ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId,cmpData ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2], 16)
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d, cmpData=0x%x' % (args[0],args[1],args[2]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesSetRxCmpData(args[0],serdesId,args[2])
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerSerdesGetTxEq
    #/********************************************************************************/
    def do_serdes_get_tx_eq(self, arg):
        '''
         xpLinkManagerSerdesGetTxEq: Enter [ devId,serdesId/startSerdesId-endSerdesId ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            xpSerdesTxEq_t_Ptr = new_xpSerdesTxEq_tp()

            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d, pre=0x%x, atten=0x%x, post=0x%x, slew=%d' % (args[0],args[1],xpSerdesTxEq_t_Ptr.pre,xpSerdesTxEq_t_Ptr.atten,xpSerdesTxEq_t_Ptr.post,xpSerdesTxEq_t_Ptr.slew))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesGetTxEq(args[0],serdesId,xpSerdesTxEq_t_Ptr)
                err = 0
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                    err = 1
                if err == 0:
                    print('pre = %d' % (xpSerdesTxEq_t_Ptr.pre))
                    print('atten = %d' % (xpSerdesTxEq_t_Ptr.atten))
                    print('post = %d' % (xpSerdesTxEq_t_Ptr.post))
                    print('slew = %d' % (xpSerdesTxEq_t_Ptr.slew))
                    pass
            delete_xpSerdesTxEq_tp(xpSerdesTxEq_t_Ptr)

    #/********************************************************************************/
    # command for xpLinkManagerSerdesSetTxEq
    #/********************************************************************************/
    def do_serdes_set_tx_eq(self, arg):
        '''
         xpLinkManagerSerdesSetTxEq: Enter [ devId,serdesId/startSerdesId-endSerdesId,pre,atten,post,slew ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 6
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId,pre,atten,post,slew ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            xpSerdesTxEq_t_Ptr = new_xpSerdesTxEq_tp()
            xpSerdesTxEq_t_Ptr.pre = int(args[2])
            xpSerdesTxEq_t_Ptr.atten = int(args[3])
            xpSerdesTxEq_t_Ptr.post = int(args[4])
            xpSerdesTxEq_t_Ptr.slew = int(args[5])

            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d, pre=0x%x, atten=0x%x, post=0x%x, slew=%d' % (args[0],args[1],xpSerdesTxEq_t_Ptr.pre,xpSerdesTxEq_t_Ptr.atten,xpSerdesTxEq_t_Ptr.post,xpSerdesTxEq_t_Ptr.slew))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesSetTxEq(args[0],serdesId,xpSerdesTxEq_t_Ptr)
                err = 0
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                    err = 1
                if err == 0:
                    pass
            delete_xpSerdesTxEq_tp(xpSerdesTxEq_t_Ptr)

    #/********************************************************************************/
    # command for xpLinkManagerSerdesSetRxTerm
    #/********************************************************************************/
    def do_serdes_set_rx_term(self, arg):
        '''
         xpLinkManagerSerdesSetRxTerm: Enter [ devId,serdesId/startSerdesId-endSerdesId,term ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId,term ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d, term=%d' % (args[0],args[1],args[2]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesSetRxTerm(args[0],serdesId,args[2])
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerSerdesSetRxCmpMode
    #/********************************************************************************/
    def do_serdes_set_rx_cmp_mode(self, arg):
        '''
         xpLinkManagerSerdesSetRxCmpMode: Enter [ devId,serdesId/startSerdesId-endSerdesId,mode ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId,mode ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d, mode=%d' % (args[0],args[1],args[2]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesSetRxCmpMode(args[0],serdesId,args[2])
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerSerdesSetClkSrc
    #/********************************************************************************/
    def do_serdes_set_clk_src(self, arg):
        '''
         xpLinkManagerSerdesSetClkSrc: Enter [ devId,serdesId/startSerdesId-endSerdesId,src ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId,src ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d, src=%d' % (args[0],args[1],args[2]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesSetClkSrc(args[0],serdesId,args[2])
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerSerdesSetTxPllClkSrc
    #/********************************************************************************/
    def do_serdes_set_tx_pll_clk_src(self, arg):
        '''
         xpLinkManagerSerdesSetTxPllClkSrc: Enter [ devId,serdesId/startSerdesId-endSerdesId,src ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId,src ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d, src=%d' % (args[0],args[1],args[2]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesSetTxPllClkSrc(args[0],serdesId,args[2])
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerSerdesMemRd
    #/********************************************************************************/
    def do_serdes_mem_rd(self, arg):
        '''
         xpLinkManagerSerdesMemRd: Enter [ devId,serdesId/startSerdesId-endSerdesId,type,memAddr ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 4
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId,type,memAddr ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            args[3] = int(args[3], 16)
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d, type=%d, addr=0x%x' % (args[0],args[1],args[2],args[3]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesMemRd(args[0],serdesId,args[2],args[3])
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerSerdesMemWr
    #/********************************************************************************/
    def do_serdes_mem_wr(self, arg):
        '''
         xpLinkManagerSerdesMemWr: Enter [ devId,serdesId/startSerdesId-endSerdesId,type,memAddr,data ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 5
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId,type,memAddr,data ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            args[3] = int(args[3], 16)
            args[4] = int(args[4], 16)
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d, type=%d, memAddr=0x%x, data=0x%x' % (args[0],args[1],args[2],args[3],args[4]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesMemWr(args[0],serdesId,args[2],args[3],args[4])
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerSerdesMemRmw
    #/********************************************************************************/
    def do_serdes_mem_rmw(self, arg):
        '''
         xpLinkManagerSerdesMemRmw: Enter [ devId,serdesId/startSerdesId-endSerdesId,type,memAddr,data,mask ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 6
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId,type,memAddr,data,mask ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            args[3] = int(args[3], 16)
            args[4] = int(args[4], 16)
            args[5] = int(args[5])
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d, type=%d, memAddr=0x%x, data=0x%x, mask=%d' % (args[0],args[1],args[2],args[3],args[4],args[5]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesMemRmw(args[0],serdesId,args[2],args[3],args[4],args[5])
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerSerdesGetSignalOk
    #/********************************************************************************/
    def do_serdes_get_signal_ok(self, arg):
        '''
         xpLinkManagerSerdesGetSignalOk: Enter [ devId,serdesId/startSerdesId-endSerdesId,reset ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId,reset ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            signalOk_Ptr_3 = new_intp()
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d, reset=%d' % (args[0],args[1],args[2]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesGetSignalOk(args[0],serdesId,args[2],signalOk_Ptr_3)
                err = 0
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                    err = 1
                if err == 0:
                    print('signalOk = %d for serdesId = %d' % (intp_value(signalOk_Ptr_3),serdesId))
                    pass
            delete_intp(signalOk_Ptr_3)

    #/********************************************************************************/
    # command for xpLinkManagerSerdesGetElectricalIdle
    #/********************************************************************************/
    def do_serdes_get_electrical_idle(self, arg):
        '''
         xpLinkManagerSerdesGetElectricalIdle: Enter [ devId,serdesId/startSerdesId-endSerdesId ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            ei_Ptr_2 = new_intp()
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d, reset=%d' % (args[0],args[1],args[2]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesGetElectricalIdle(args[0],serdesId,ei_Ptr_2)
                err = 0
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                    err = 1
                if err == 0:
                    print('ei = %d for serdesId = %d' % (intp_value(ei_Ptr_2),serdesId))
                    pass
            delete_intp(ei_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerSerdesInitializeSignalOk
    #/********************************************************************************/
    def do_serdes_initialize_signal_ok(self, arg):
        '''
         xpLinkManagerSerdesInitializeSignalOk: Enter [ devId,serdesId/startSerdesId-endSerdesId,threshold ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId,threshold ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d, threshold=%d' % (args[0],args[1],args[2]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesInitializeSignalOk(args[0],serdesId,args[2])
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerSerdesGetErrors
    #/********************************************************************************/
    def do_serdes_get_errors(self, arg):
        '''
         xpLinkManagerSerdesGetErrors: Enter [ devId,serdesId/startSerdesId-endSerdesId,type,resetCountAfterGet ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 4
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId,type,resetCountAfterGet ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            args[3] = int(args[3])
            errCnt_Ptr_4 = new_uint32_tp()
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d, type=%d, resetCountAfterGet=%d' % (args[0],args[1],args[2],args[3]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesGetErrors(args[0],serdesId,args[2],args[3],errCnt_Ptr_4)
                err = 0
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                    err = 1
                if err == 0:
                    print('errCnt = %d for serdesId = %d' % (uint32_tp_value(errCnt_Ptr_4),serdesId))
                    pass
            delete_uint32_tp(errCnt_Ptr_4)


    #/********************************************************************************/
    # command for xpLinkManagerDiagSerdesRwTest
    #/********************************************************************************/
    def do_diag_serdes_rw_test(self, arg):
        '''
         xpLinkManagerDiagSerdesRwTest: Enter [ devId,serdesId/startSerdesId-endSerdesId,cycles ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId,cycles ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d, cycles=%d' % (args[0],args[1],args[2]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerDiagSerdesRwTest(args[0],serdesId,args[2])
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerDiagSerdesDump
    #/********************************************************************************/
    def do_diag_serdes_dump(self, arg):
        '''
         xpLinkManagerDiagSerdesDump: Enter [ devId,serdesId/startSerdesId-endSerdesId,binEnable ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId,binEnable ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d, binEnable=%d' % (args[0],args[1],args[2]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerDiagSerdesDump(args[0],serdesId,args[2])
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                else:
                    pass


    #/********************************************************************************/
    # command for xpLinkManagerSerdesDiag
    #/********************************************************************************/
    def do_serdes_diag(self, arg):
        '''
         xpLinkManagerSerdesDiag: Enter [ devId,serdesId/startSerdesId-endSerdesId ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d' % (args[0],args[1]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesDiag(args[0],serdesId)
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerSerdesGetTxInvert
    #/********************************************************************************/
    def do_serdes_get_tx_invert(self, arg):
        '''
         xpLinkManagerSerdesGetTxInvert: Enter [ devId,serdesId/startSerdesId-endSerdesId ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            getTxInvert_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d' % (args[0],args[1]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesGetTxInvert(args[0],serdesId,getTxInvert_Ptr_2)
                err = 0
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                    err = 1
                if err == 0:
                    print('getTxInvert = %d for serdesId = %d' % (uint8_tp_value(getTxInvert_Ptr_2),serdesId))
                    pass
            delete_uint8_tp(getTxInvert_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerSerdesGetRxInvert
    #/********************************************************************************/
    def do_serdes_get_rx_invert(self, arg):
        '''
         xpLinkManagerSerdesGetRxInvert: Enter [ devId,serdesId/startSerdesId-endSerdesId ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            getRxInvert_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d' % (args[0],args[1]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesGetRxInvert(args[0],serdesId,getRxInvert_Ptr_2)
                err = 0
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                    err = 1
                if err == 0:
                    print('getRxInvert = %d for serdesId = %d' % (uint8_tp_value(getRxInvert_Ptr_2),serdesId))
                    pass
            delete_uint8_tp(getRxInvert_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerSerdesGetRxInputLoopback
    #/********************************************************************************/
    def do_serdes_get_rx_input_loopback(self, arg):
        '''
         xpLinkManagerSerdesGetRxInputLoopback: Enter [ devId,serdesId/startSerdesId-endSerdesId ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            getRxInputLoopback_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d' % (args[0],args[1]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesGetRxInputLoopback(args[0],serdesId,getRxInputLoopback_Ptr_2)
                err = 0
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                    err = 1
                if err == 0:
                    print('getRxInputLoopback = %d for serdesId = %d' % (uint8_tp_value(getRxInputLoopback_Ptr_2),serdesId))
                    pass
            delete_uint8_tp(getRxInputLoopback_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerSerdesGetTxDataSel
    #/********************************************************************************/
    def do_serdes_get_tx_data_sel(self, arg):
        '''
         xpLinkManagerSerdesGetTxDataSel: Enter [ devId,serdesId/startSerdesId-endSerdesId ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            txDataSel_Ptr_2 = new_xpSerdesTxDataSel_tp()
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d' % (args[0],args[1]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesGetTxDataSel(args[0],serdesId,txDataSel_Ptr_2)
                err = 0
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                    err = 1
                if err == 0:
                    print('txDataSel = %d for serdesId = %d' % (xpSerdesTxDataSel_tp_value(txDataSel_Ptr_2),serdesId))
                    pass
            delete_xpSerdesTxDataSel_tp(txDataSel_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerSerdesGetRxCmpData
    #/********************************************************************************/
    def do_serdes_get_rx_cmp_data(self, arg):
        '''
         xpLinkManagerSerdesGetRxCmpData: Enter [ devId,serdesId/startSerdesId-endSerdesId ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            rxCmpData_Ptr_2 = new_xpSerdesRxCmpData_tp()
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d' % (args[0],args[1]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesGetRxCmpData(args[0],serdesId,rxCmpData_Ptr_2)
                err = 0
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                    err = 1
                if err == 0:
                    print('rxCmpData = %d for serdesId = %d' % (xpSerdesRxCmpData_tp_value(rxCmpData_Ptr_2),serdesId))
                    pass
            delete_xpSerdesRxCmpData_tp(rxCmpData_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerSerdesGetRxTerm
    #/********************************************************************************/
    def do_serdes_get_rx_term(self, arg):
        '''
         xpLinkManagerSerdesGetRxTerm: Enter [ devId,serdesId/startSerdesId-endSerdesId ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            getRxTerm_Ptr_2 = new_xpSerdesRxTerm_tp()
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d' % (args[0],args[1]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesGetRxTerm(args[0],serdesId,getRxTerm_Ptr_2)
                err = 0
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                    err = 1
                if err == 0:
                    print('getRxTerm = %d for serdesId = %d' % (xpSerdesRxTerm_tp_value(getRxTerm_Ptr_2),serdesId))
                    pass
            delete_xpSerdesRxTerm_tp(getRxTerm_Ptr_2)


    #/********************************************************************************/
    # command for xpLinkManagerSerdesGetRxCmpMode
    #/********************************************************************************/
    def do_serdes_get_rx_cmp_mode(self, arg):
        '''
         xpLinkManagerSerdesGetRxCmpMode: Enter [ devId,serdesId/startSerdesId-endSerdesId ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            rxCmpModeT_Ptr_2 = new_xpSerdesRxCmpMode_tp()
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d' % (args[0],args[1]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesGetRxCmpMode(args[0],serdesId,rxCmpModeT_Ptr_2)
                err = 0
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                    err = 1
                if err == 0:
                    print('rxCmpModeT = %d for serdesId = %d' % (xpSerdesRxCmpMode_tp_value(rxCmpModeT_Ptr_2),serdesId))
                    pass
            delete_xpSerdesRxCmpMode_tp(rxCmpModeT_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerSerdesGetClkSrc
    #/********************************************************************************/
    def do_serdes_get_clk_src(self, arg):
        '''
         xpLinkManagerSerdesGetClkSrc: Enter [ devId,serdesId/startSerdesId-endSerdesId ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            ClkT_Ptr_2 = new_xpSerdesClk_tp()
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d' % (args[0],args[1]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesGetClkSrc(args[0],serdesId,ClkT_Ptr_2)
                err = 0
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                    err = 1
                if err == 0:
                    print('ClkT = %d for serdesId = %d' % (xpSerdesClk_tp_value(ClkT_Ptr_2),serdesId))
                    pass
            delete_xpSerdesClk_tp(ClkT_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerSerdesGetTxPllClkSrc
    #/********************************************************************************/
    def do_serdes_get_tx_pll_clk_src(self, arg):
        '''
         xpLinkManagerSerdesGetTxPllClkSrc: Enter [ devId,serdesId/startSerdesId-endSerdesId ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            txPllClkT_Ptr_2 = new_xpSerdesTxPllClk_tp()
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d' % (args[0],args[1]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesGetTxPllClkSrc(args[0],serdesId,txPllClkT_Ptr_2)
                err = 0
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                    err = 1
                if err == 0:
                    print('txPllClkT = %d for serdesId = %d' % (xpSerdesTxPllClk_tp_value(txPllClkT_Ptr_2),serdesId))
                    pass
            delete_xpSerdesTxPllClk_tp(txPllClkT_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerLogGet
    #/********************************************************************************/
    def do_log_get(self, arg):
        '''
         xpLinkManagerLogGet: Enter [ devId,serdesId/startSerdesId-endSerdesId ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d' % (args[0],args[1]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerLogGet(args[0],serdesId)

        #/********************************************************************************/
        # command for xpLinkManagerSerdesEyeDataWriteFile
        #/********************************************************************************/
    def do_serdes_eye_data_write_file(self, arg):
        '''
         xpLinkManagerSerdesEyeDataWriteFile: Enter [ devId,serdesId/startSerdesId-endSerdesId,filename ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId,filename ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            filename_Ptr_2 = str(args[2])
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d, filename=%s' % (args[0],args[1],filename_Ptr_2))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesEyeDataWriteFile(args[0],serdesId,filename_Ptr_2)
                err = 0
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                    err = 1
                if err == 0:
                    print('filename = %s for serdesId = %d' % filename_Ptr_2,serdesId)
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerSerdesEyeDataWrite
    #/********************************************************************************/
    def do_serdes_eye_data_write(self, arg):
        '''
         xpLinkManagerSerdesEyeDataWrite: Enter [ devId,serdesId/startSerdesId-endSerdesId ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            file_Ptr_2 = new_FILEp()
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d' % (args[0],args[1]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesEyeDataWrite(args[0],serdesId,file_Ptr_2)
                err = 0
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                    err = 1
                if err == 0:
                    print('file = %d for serdesId = %d' % (FILEp_value(file_Ptr_2),serdesId))
                    pass
            delete_FILEp(file_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerSerdesEyeVbtcWrite
    #/********************************************************************************/
    def do_serdes_eye_vbtc_write(self, arg):
        '''
         xpLinkManagerSerdesEyeVbtcWrite: Enter [ devId,serdesId/startSerdesId-endSerdesId,file ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId,file ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            fileName = args[2]
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d, file=%s' % (args[0],args[1],args[2]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesEyeVbtcWrite(args[0],serdesId,fileName)
                err = 0
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                    err = 1
                if err == 0:
                    print('file = %s for serdesId = %d' % (fileName,serdesId))
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerSerdesEyeHbtcWrite
    #/********************************************************************************/
    def do_serdes_eye_hbtc_write(self, arg):
        '''
         xpLinkManagerSerdesEyeHbtcWrite: Enter [ devId,serdesId/startSerdesId-endSerdesId,file ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId,file ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            fileName = args[2]
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d, file=%s' % (args[0],args[1],args[2]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesEyeHbtcWrite(args[0],serdesId,fileName)
                err = 0
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                    err = 1
                if err == 0:
                    print('file = %s for serdesId = %d' % (fileName,serdesId))
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerSerdesEyePlotWrite
    #/********************************************************************************/
    def do_serdes_eye_plot_write(self, arg):
        '''
         xpLinkManagerSerdesEyePlotWrite: Enter [ devId,serdesId/startSerdesId-endSerdesId ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            #file_Ptr_2 = new_FILEp()
            file_Ptr_2 = 0
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d' % (args[0],args[1]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesEyePlotWrite(args[0],serdesId,file_Ptr_2)
                err = 0
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                    err = 1
                if err == 0:
                    print('file = %d for serdesId = %d' % (file_Ptr_2,serdesId))
                    pass
            #delete_FILEp(file_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerSerdesEyeVbtcFormat
    #/********************************************************************************/
    def do_serdes_eye_vbtc_format(self, arg):
        '''
         xpLinkManagerSerdesEyeVbtcFormat: Enter [ devId,serdesId/startSerdesId-endSerdesId,eyeData ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId,eyeData ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            vbtcp_Ptr_2 = new_xpSerdesEyeVbtc_tp()
            eyeData_ptr = str(args[2])
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d, eyeData=%s' % (args[0],args[1],eyeData_ptr))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesEyeVbtcFormat(args[0],serdesId,vbtcp_Ptr_2,eyeData_ptr)
                if ret == 0:
                    print('vbtcp = %d for serdesId = %d' % (xpSerdesEyeVbtc_tp_value(vbtcp_Ptr_2),serdesId))
                    pass
            delete_xpSerdesEyeVbtc_tp(vbtcp_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerSerdesEyeHbtcFormat
    #/********************************************************************************/
    def do_serdes_eye_hbtc_format(self, arg):
        '''
         xpLinkManagerSerdesEyeHbtcFormat: Enter [ devId,serdesId/startSerdesId-endSerdesId,eyeData ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId,eyeData ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            hbtcp_Ptr_2 = new_xpSerdesEyeHbtc_tp()
            eyeData_ptr = str(args[2])
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d, eyeData=%s' % (args[0],args[1],eyeData_ptr))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesEyeHbtcFormat(args[0],serdesId,hbtcp_Ptr_2,eyeData_ptr)
                if ret == 0:
                    print('hbtcp = %d for serdesId = %d' % (xpSerdesEyeHbtc_tp_value(hbtcp_Ptr_2),serdesId))
                    pass
            delete_xpSerdesEyeHbtc_tp(hbtcp_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerSerdesEyePlotFormat
    #/********************************************************************************/
    def do_serdes_eye_plot_format(self, arg):
        '''
         xpLinkManagerSerdesEyePlotFormat: Enter [ devId,serdesId/startSerdesId-endSerdesId,eyeData ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId,eyeData ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            eyeData_ptr = str(args[2])
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d, eyeData=%s' % (args[0],args[1],eyeData_ptr))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesEyePlotFormat(args[0],serdesId,eyeData_ptr)

        #/********************************************************************************/
        # command for xpLinkManagerSerdesEyeVbtcExtrapolate
        #/********************************************************************************/
    def do_serdes_eye_vbtc_extrapolate(self, arg):
        '''
         xpLinkManagerSerdesEyeVbtcExtrapolate: Enter [ devId,serdesId/startSerdesId-endSerdesId,dataCol ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId,dataCol ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2], 16)
            results_Ptr_3 = new_xpSerdesEyeVbtc_tp()
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d, dataCol=0x%x' % (args[0],args[1],args[2]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesEyeVbtcExtrapolate(args[0],serdesId,args[2],results_Ptr_3)
                err = 0
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                    err = 1
                if err == 0:
                    print('results = %d for serdesId = %d' % (xpSerdesEyeVbtc_tp_value(results_Ptr_3),serdesId))
                    pass
            delete_xpSerdesEyeVbtc_tp(results_Ptr_3)

    #/********************************************************************************/
    # command for xpLinkManagerSerdesEyeHbtcExtrapolate
    #/********************************************************************************/
    def do_serdes_eye_hbtc_extrapolate(self, arg):
        '''
         xpLinkManagerSerdesEyeHbtcExtrapolate: Enter [ devId,serdesId/startSerdesId-endSerdesId,dataRow ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId,dataRow ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2], 16)
            results_Ptr_3 = new_xpSerdesEyeHbtc_tp()
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d, dataRow=0x%x' % (args[0],args[1],args[2]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesEyeHbtcExtrapolate(args[0],serdesId,args[2],results_Ptr_3)
                err = 0
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                    err = 1
                if err == 0:
                    print('results = %d for serdesId = %d' % (xpSerdesEyeHbtc_tp_value(results_Ptr_3),serdesId))
                    pass
            delete_xpSerdesEyeHbtc_tp(results_Ptr_3)

    #/********************************************************************************/
    # command for xpLinkManagerSerdesCtrlrStatus
    #/********************************************************************************/
    def do_serdes_ctrlr_status(self, arg):
        '''
         xpLinkManagerSerdesCtrlrStatus: Enter [ devId,serdesId/startSerdesId-endSerdesId ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            st_Ptr_2 = new_xpSerdesStatus_tp()
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d' % (args[0],args[1]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesCtrlrStatus(args[0],serdesId,st_Ptr_2)
                err = 0
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                    err = 1
                if err == 0:
                    print('st = %d for serdesId = %d' % (xpSerdesStatus_tp_value(st_Ptr_2),serdesId))
                    pass
            delete_xpSerdesStatus_tp(st_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerSerdesCtrlrRunning
    #/********************************************************************************/
    def do_serdes_ctrlr_running(self, arg):
        '''
         xpLinkManagerSerdesCtrlrRunning: Enter [ devId,serdesId/startSerdesId-endSerdesId ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            runStatus_Ptr_2 = new_uint32_tp()
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d' % (args[0],args[1]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesCtrlrRunning(args[0],serdesId,runStatus_Ptr_2)
                err = 0
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                    err = 1
                if err == 0:
                    print('runStatus = %d for serdesId = %d' % (uint32_tp_value(runStatus_Ptr_2),serdesId))
                    pass
            delete_uint32_tp(runStatus_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerSerdesCtrlrReset
    #/********************************************************************************/
    def do_serdes_ctrlr_reset(self, arg):
        '''
         xpLinkManagerSerdesCtrlrReset: Enter [ devId,serdesId/startSerdesId-endSerdesId ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d' % (args[0],args[1]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesCtrlrReset(args[0],serdesId)
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerSerdesCtrlrUploadSwapImage
    #/********************************************************************************/
    def do_serdes_ctrlr_upload_swap_image(self, arg):
        '''
         xpLinkManagerSerdesCtrlrUploadSwapImage: Enter [ devId,serdesId/startSerdesId-endSerdesId,words ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId,words ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            rom_Ptr_3 = new_int32_tp()
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d, words=%d' % (args[0],args[1],args[2]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesCtrlrUploadSwapImage(args[0],serdesId,args[2],rom_Ptr_3)
                err = 0
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                    err = 1
                if err == 0:
                    print('rom = %d for serdesId = %d' % (int32_tp_value(rom_Ptr_3),serdesId))
                    pass
            delete_int32_tp(rom_Ptr_3)

    #/********************************************************************************/
    # command for xpLinkManagerSerdesFirmwareUpload
    #/********************************************************************************/
    def do_serdes_firmware_upload(self, arg):
        '''
         xpLinkManagerSerdesFirmwareUpload: Enter [ devId,serdesId/startSerdesId-endSerdesId,ramBist,words ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 4
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId,ramBist,words ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            args[3] = int(args[3])
            rom_Ptr_4 = new_int32_tp()
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d, ramBist=%d, words=%d' % (args[0],args[1],args[2],args[3]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesFirmwareUpload(args[0],serdesId,args[2],args[3],rom_Ptr_4)
                err = 0
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                    err = 1
                if err == 0:
                    print('rom = %d for serdesId = %d' % (int32_tp_value(rom_Ptr_4),serdesId))
                    pass
            delete_int32_tp(rom_Ptr_4)

    #/********************************************************************************/
    # command for xpLinkManagerSerdesCtrlrInt
    #/********************************************************************************/
    def do_serdes_ctrlr_int(self, arg):
        '''
         xpLinkManagerSerdesCtrlrInt: Enter [ devId,serdesId/startSerdesId-endSerdesId,intNum,param ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 4
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId,intNum,param ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            args[3] = int(args[3])
            intstatus_Ptr_4 = new_uint32_tp()
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d, intNum=%d, param=%d' % (args[0],args[1],args[2],args[3]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesCtrlrInt(args[0],serdesId,args[2],args[3],intstatus_Ptr_4)
                err = 0
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                    err = 1
                if err == 0:
                    print('intstatus = %d for serdesId = %d' % (uint32_tp_value(intstatus_Ptr_4),serdesId))
                    pass
            delete_uint32_tp(intstatus_Ptr_4)

    #/********************************************************************************/
    # command for xpLinkManagerSerdesCtrlrIntArray
    #/********************************************************************************/
    def do_serdes_ctrlr_int_array(self, arg):
        '''
         xpLinkManagerSerdesCtrlrIntArray: Enter [ devId,serdesId/startSerdesId-endSerdesId,numElements ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId,numElements ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            interrupts_Ptr_3 = new_xpSerdesInt_tp()
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d, numElements=%d' % (args[0],args[1],args[2]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesCtrlrIntArray(args[0],serdesId,args[2],interrupts_Ptr_3)
                err = 0
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                    err = 1
                if err == 0:
                    print('interrupts = %d for serdesId = %d' % (xpSerdesInt_tp_value(interrupts_Ptr_3),serdesId))
                    pass
            delete_xpSerdesInt_tp(interrupts_Ptr_3)

    #/********************************************************************************/
    # command for xpLinkManagerSerdesCtrlrCrc
    #/********************************************************************************/
    def do_serdes_ctrlr_crc(self, arg):
        '''
         xpLinkManagerSerdesCtrlrCrc: Enter [ devId,serdesId/startSerdesId-endSerdesId ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            crcResult_Ptr_2 = new_uint32_tp()
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d' % (args[0],args[1]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesCtrlrCrc(args[0],serdesId,crcResult_Ptr_2)
                err = 0
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                    err = 1
                if err == 0:
                    print('crcResult = %d for serdesId = %d' % (uint32_tp_value(crcResult_Ptr_2),serdesId))
                    pass
            delete_uint32_tp(crcResult_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerSerdesCtrlrRamBist
    #/********************************************************************************/
    def do_serdes_ctrlr_ram_bist(self, arg):
        '''
         xpLinkManagerSerdesCtrlrRamBist: Enter [ devId,serdesId/startSerdesId-endSerdesId ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d' % (args[0],args[1]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesCtrlrRamBist(args[0],serdesId)
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerSerdesDfeRunning
    #/********************************************************************************/
    def do_serdes_dfe_running(self, arg):
        '''
         xpLinkManagerSerdesDfeRunning: Enter [ devId,serdesId/startSerdesId-endSerdesId ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            dfeRunning_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d' % (args[0],args[1]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesDfeRunning(args[0],serdesId,dfeRunning_Ptr_2)
                err = 0
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                    err = 1
                if err == 0:
                    print('dfeRunning = %d for serdesId = %d' % (uint8_tp_value(dfeRunning_Ptr_2),serdesId))
                    pass
            delete_uint8_tp(dfeRunning_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerSerdesTxEqInit
    #/********************************************************************************/
    def do_serdes_tx_eq_init(self, arg):
        '''
         xpLinkManagerSerdesTxEqInit: Enter [ devId,serdesId/startSerdesId-endSerdesId,pre,atten,post,slew ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 6
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId,pre,atten,post,slew ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            xpSerdesTxEq_t_Ptr = new_xpSerdesTxEq_tp()
            xpSerdesTxEq_t_Ptr.pre = int(args[2], 16)
            xpSerdesTxEq_t_Ptr.atten = int(args[3], 16)
            xpSerdesTxEq_t_Ptr.post = int(args[4], 16)
            xpSerdesTxEq_t_Ptr.slew = int(args[5])

            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d, pre=0x%x, atten=0x%x, post=0x%x, slew=%d' % (args[0],args[1],xpSerdesTxEq_t_Ptr.pre,xpSerdesTxEq_t_Ptr.atten,xpSerdesTxEq_t_Ptr.post,xpSerdesTxEq_t_Ptr.slew))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesTxEqInit(args[0],serdesId,xpSerdesTxEq_t_Ptr)
                err = 0
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                    err = 1
                if err == 0:
                    pass
            delete_xpSerdesTxEq_tp(xpSerdesTxEq_t_Ptr)

    #/********************************************************************************/
    # command for xpLinkManagerSerdesGetSignalOkEnable
    #/********************************************************************************/
    def do_serdes_get_signal_ok_enable(self, arg):
        '''
         xpLinkManagerSerdesGetSignalOkEnable: Enter [ devId,serdesId/startSerdesId-endSerdesId ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            signalOkEnable_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d' % (args[0],args[1]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesGetSignalOkEnable(args[0],serdesId,signalOkEnable_Ptr_2)
                err = 0
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                    err = 1
                if err == 0:
                    print('signalOkEnable = %d for serdesId = %d' % (uint8_tp_value(signalOkEnable_Ptr_2),serdesId))
                    pass
            delete_uint8_tp(signalOkEnable_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerSerdesGetSignalOkThreshold
    #/********************************************************************************/
    def do_serdes_get_signal_ok_threshold(self, arg):
        '''
         xpLinkManagerSerdesGetSignalOkThreshold: Enter [ devId,serdesId/startSerdesId-endSerdesId ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d' % (args[0],args[1]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesGetSignalOkThreshold(args[0],serdesId)
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                else:
                    print('Threshold Value = %d for serdesId = %d' % (ret,serdesId))
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerSerdesEyeGet
    #/********************************************************************************/
    def do_serdes_eye_get(self, arg):
        '''
         xpLinkManagerSerdesEyeGet: Enter [ devId,serdesId/startSerdesId-endSerdesId ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d' % (args[0],args[1]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesEyeGet(args[0],serdesId)
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                else:
                    pass


    #/********************************************************************************/
    # command for xpLinkManagerSerdesEyeGetCustom
    #/********************************************************************************/
    def do_serdes_print_eye(self, arg):
        '''
         xpLinkManagerGetSerdesEyeGetCustom: Enter [ devId,serdesId, [eye configuration parameters(optional)] ]
         Optional args are:\n\
         [\n\
             -eyeType [By default: EYE_FULL, valid range is <EYE_SIZE = 0, EYE_CROSS = 0, EYE_SIZE_VDUAL = 1, EYE_HEIGHT = 2, EYE_WIDTH = 3, EYE_FULL = 4, EYE_HEIGHT_DVOS = 5>]\n\
             -cmpMode [By default: 0x0100, valid values are <0x0000, 0x0100, 0x0120, 0x0200>]\n\
             -minDwellBits [Minimum samples to measure. By default: 500000]\n\
             -maxDwellBits [Maximum samples to measure. By default: 100000000]\n\
             -fastDynamic [By default: 2, valid range is <0, 1, 2>]\n\
             -xUI [By default: 1, valid range is <1, 2, 3, 4, 5, 6, 7, 8>]\n\
             -errorThreshold [By default: 30]\n\
             -dcBalance [By default: 0.5]\n\
             -transDensity [By default: 0.5]\n\
             -xResolution [Number of points per UI to gather. The requested value will be rounded down to the next lower power of 2, with a minimum of 8 points per UI. By default: 64]\n\
             -yCenterPoint [Center around which yPoints is gathered. By default: 0]\n\
             -yPoints [Number of vertical points to gather. By default: 129]\n\
             -yStepSize [Vertical step size. By default: 1]\n\
             -xAutoScale [By default: 1]\n\
             -yAutoScale [By default: 1]\n\
             -xShift [PI steps to adjust the eye center before gathering.]\n\
             -gatherMean [By default: 0, valid range is <FALSE = 0, TRUE = 1>] If -meanDirection is true, gather only the eye points that bracket the 50% error point.\n\
             -MeanThreshold [If ec_gather_mean is given, use this value as the 50% error point, overriding calculation.]\n\
             -noSbm [By default: 0, valid range is <FALSE = 0, TRUE = 1>] If -noSbm is true then sbus master assist will not be used even if avaiable.\n\
             -meanDirection [If -meanDirection is given, use this value to control direction.]\n\
         ]\n\
         Note: Without any optional arguments, command will be execute with default configuration values.
        '''
        args = arg.split()
        if  len(args) < 2:
            print 'Invalid input,\n\
                   \rxpLinkManagerGetSerdesEyeGetCustom: Enter [ devId,serdesId, [optional arguments] ]\n\
                   \rsee "help serdes_print_eye" for optional arguments information.\n'
            return
        eyecfg = customPrepareEyeCfgData(args)
        if(eyecfg == None):
            return
        eyeHeight_Ptr_2 = new_uint32_tp()
        eyeWidth_Ptr_3 = new_uint32_tp()
        serdesId = int(args[1])
        print('Input arguments are args[0]-DeviceId=%d args[1]-SerdesId=%d\n' % (int(args[0]),serdesId))
        xpLinkManagerSerdesEyeGetCustom(int(args[0]),serdesId,eyecfg,0)
        ret = xpLinkManagerSerdesEyePlotWrite(int(args[0]),serdesId, None)
        if ret != 0:
            print('Err: Return Value for EyePlotWrite = %d for serdesId = %d' % (ret,serdesId))
        ret = xpLinkManagerSerdesGetEyeMeasurementFromEyeData(int(args[0]),serdesId,eyeHeight_Ptr_2,eyeWidth_Ptr_3)
        if ret != 0:
            print('Err: xpLinkManagerSerdesGetEyeMeasurementFromEyeData Return Value = %d' % (ret))
        else:
            print('eyeHeight = %d' % (uint32_tp_value(eyeHeight_Ptr_2)))
            print('eyeWidth = %d' % (uint32_tp_value(eyeWidth_Ptr_3)))
        ret = xpLinkManagerSerdesEyeHbtcLogPrintFromEyeData(int(args[0]),serdesId)
        if ret != 0:
            print('Err: Return Value for HbtcLogPrint = %d for serdesId = %d' % (ret,serdesId))
        ret = xpLinkManagerSerdesEyeVbtcLogPrintFromEyeData(int(args[0]),serdesId)
        if ret != 0:
            print('Err: Return Value for VbtcLogPrint = %d for serdesId = %d' % (ret,serdesId))

        delete_xpSerdesEyeConfig_tp(eyecfg)
        delete_uint32_tp(eyeHeight_Ptr_2)
        delete_uint32_tp(eyeWidth_Ptr_3)

    #/********************************************************************************/
    # command for xpLinkManagerGetSerdesEyeMeasurementWithCustomConfig
    #/********************************************************************************/
    def do_serdes_get_eye_measurement_custom(self, arg):
        '''
         xpLinkManagerGetSerdesEyeMeasurementWithCustomConfig: Enter [ devId,serdesId, [eye configuration parameters(optional)] ]
         Optional args are:\n\
         [\n\
             -eyeType [By default: EYE_FULL, valid range is <EYE_SIZE = 0, EYE_CROSS = 0, EYE_SIZE_VDUAL = 1, EYE_HEIGHT = 2, EYE_WIDTH = 3, EYE_FULL = 4, EYE_HEIGHT_DVOS = 5>]\n\
             -cmpMode [By default: 0x0100, valid values are <0x0000, 0x0100, 0x0120, 0x0200>]\n\
             -minDwellBits [Minimum samples to measure. By default: 500000]\n\
             -maxDwellBits [Maximum samples to measure. By default: 100000000]\n\
             -fastDynamic [By default: 2, valid range is <0, 1, 2>]\n\
             -xUI [By default: 1, valid range is <1, 2, 3, 4, 5, 6, 7, 8>]\n\
             -errorThreshold [By default: 30]\n\
             -dcBalance [By default: 0.5]\n\
             -transDensity [By default: 0.5]\n\
             -xResolution [Number of points per UI to gather. The requested value will be rounded down to the next lower power of 2, with a minimum of 8 points per UI. By default: 64]\n\
             -yCenterPoint [Center around which yPoints is gathered. By default: 0]\n\
             -yPoints [Number of vertical points to gather. By default: 129]\n\
             -yStepSize [Vertical step size. By default: 1]\n\
             -xAutoScale [By default: 1]\n\
             -yAutoScale [By default: 1]\n\
             -xShift [PI steps to adjust the eye center before gathering.]\n\
             -gatherMean [By default: 0, valid range is <FALSE = 0, TRUE = 1>] If -meanDirection is true, gather only the eye points that bracket the 50% error point.\n\
             -MeanThreshold [If ec_gather_mean is given, use this value as the 50% error point, overriding calculation.]\n\
             -noSbm [By default: 0, valid range is <FALSE = 0, TRUE = 1>] If -noSbm is true then sbus master assist will not be used even if avaiable.\n\
             -meanDirection [If -meanDirection is given, use this value to control direction.]\n\
         ]\n\
         Note: Without any optional arguments, command will be execute with default configuration values.
        '''

        args = arg.split()
        if  len(args) < 2:
            print 'Invalid input,\n\
                   \rxpLinkManagerGetSerdesEyeMeasurementWithCustomConfig: Enter [ devId,serdesId, [optional arguments] ]\n\
                   \rsee "help serdes_get_eye_measurement_custom" for optional arguments information.\n'
            return
        else:
            eyecfg = customPrepareEyeCfgData(args)
            if(eyecfg == None):
                return
            args[0] = int(args[0])
            args[1] = int(args[1])
            eyeHeight_Ptr_2 = new_uint32_tp()
            eyeWidth_Ptr_3 = new_uint32_tp()
            #print('Input Arguments are, devId=%d, serdesId=%d' % (args[0],args[1]))
            ret = xpLinkManagerGetSerdesEyeMeasurementWithCustomConfig(args[0], args[1], eyecfg, eyeHeight_Ptr_2, eyeWidth_Ptr_3)
            if ret != 0:
                print('Error: Return value = %d' % (ret))
            else:
                print('eyeHeight = %d' % (uint32_tp_value(eyeHeight_Ptr_2)))
                print('eyeWidth = %d' % (uint32_tp_value(eyeWidth_Ptr_3)))
                pass
            delete_uint32_tp(eyeHeight_Ptr_2)
            delete_uint32_tp(eyeWidth_Ptr_3)

    #/********************************************************************************/
    # command for xpLinkManagerSerdesSetAsyncCancelFlag
    #/********************************************************************************/
    # command for xpLinkManagerSerdesSetAsyncCancelFlag
    #/********************************************************************************/
    def do_serdes_set_async_cancel_flag(self, arg):
        '''
         xpLinkManagerSerdesSetAsyncCancelFlag: Enter [ devId,serdesId/startSerdesId-endSerdesId,newValue ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId,newValue ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2], 16)
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d, newValue=0x%x' % (args[0],args[1],args[2]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesSetAsyncCancelFlag(args[0],serdesId,args[2])
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerSerdesGetFirmwareBuild
    #/********************************************************************************/
    def do_serdes_get_firmware_build(self, arg):
        '''
         xpLinkManagerSerdesGetFirmwareBuild: Enter [ devId,serdesId/startSerdesId-endSerdesId ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d' % (args[0],args[1]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesGetFirmwareBuild(args[0],serdesId)
                if ret < 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                else:
                    print('firmware build = %d for serdesId = %d' % (ret,serdesId))
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerSerdesAddrInitBroadcast
    #/********************************************************************************/
    def do_serdes_addr_init_broadcast(self, arg):
        '''
         xpLinkManagerSerdesAddrInitBroadcast: Enter [ devId,serdesId/startSerdesId-endSerdesId ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            addrStruct_Ptr_2 = new_xpSerdesAddr_tp()
            serdesStatus_Ptr_3 = new_uint32_tp()
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d' % (args[0],args[1]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesAddrInitBroadcast(args[0],serdesId,addrStruct_Ptr_2,serdesStatus_Ptr_3)
                err = 0
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                    err = 1
                if err == 0:
                    print('addrStruct = %d for serdesId = %d' % (xpSerdesAddr_tp_value(addrStruct_Ptr_2),serdesId))
                    print('serdesStatus = %d for serdesId = %d' % (uint32_tp_value(serdesStatus_Ptr_3),serdesId))
                    pass
            delete_uint32_tp(serdesStatus_Ptr_3)
            delete_xpSerdesAddr_tp(addrStruct_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerSerdesDeviceInfo
    #/********************************************************************************/
    def do_serdes_device_info(self, arg):
        '''
         xpLinkManagerSerdesDeviceInfo: Enter [ devId,serdesId/startSerdesId-endSerdesId,type ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId,type ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            addrStruct_Ptr_2 = new_xpSerdesAddr_tp()
            args[3] = int(args[3])
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d, type=%d' % (args[0],args[1],args[3]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesDeviceInfo(args[0],serdesId,addrStruct_Ptr_2,args[3])
                err = 0
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                    err = 1
                if err == 0:
                    print('addrStruct = %d for serdesId = %d' % (xpSerdesAddr_tp_value(addrStruct_Ptr_2),serdesId))
                    pass
            delete_xpSerdesAddr_tp(addrStruct_Ptr_2)


    #/********************************************************************************/
    # command for xpLinkManagerSerdesSerdesWrFlush
    #/********************************************************************************/
    def do_serdes_serdes_wr_flush(self, arg):
        '''
         xpLinkManagerSerdesSerdesWrFlush: Enter [ devId,serdesId/startSerdesId-endSerdesId,reg,data ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 4
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId,reg,data ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            args[3] = int(args[3], 16)
            serdesStatus_Ptr_4 = new_uint32_tp()
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d, reg=%d, data=0x%x' % (args[0],args[1],args[2],args[3]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesSerdesWrFlush(args[0],serdesId,args[2],args[3],serdesStatus_Ptr_4)
                err = 0
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                    err = 1
                if err == 0:
                    print('serdesStatus = %d' % (uint32_tp_value(serdesStatus_Ptr_4)))
                    pass
            delete_uint32_tp(serdesStatus_Ptr_4)


    #/********************************************************************************/
    # command for xpLinkManagerSerdesSetTxDataSel
    #/********************************************************************************/
    def do_serdes_set_tx_data_sel(self, arg):
        '''
         xpLinkManagerSerdesSetTxDataSel: Enter [ devId,serdesId/startSerdesId-endSerdesId,input ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId,input ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d, input=%d' % (args[0],args[1],args[2]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesSetTxDataSel(args[0],serdesId,args[2])
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerSerdesGetTxLineEncoding
    #/********************************************************************************/
    def do_serdes_get_tx_line_encoding(self, arg):
        '''
         xpLinkManagerSerdesGetTxLineEncoding: Enter [ devId,serdesId/startSerdesId-endSerdesId ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            serdesStatus_Ptr_3 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d' % (args[0],args[1]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesGetTxLineEncoding(args[0],serdesId,serdesStatus_Ptr_3)
                err = 0
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                    err = 1
                if err == 0:
                    print('serdesStatus = %d for serdesId = %d' % (uint8_tp_value(serdesStatus_Ptr_3),serdesId))
                    pass
            delete_uint8_tp(serdesStatus_Ptr_3)

    #/********************************************************************************/
    # command for xpLinkManagerSerdesGetRxLineEncoding
    #/********************************************************************************/
    def do_serdes_get_rx_line_encoding(self, arg):
        '''
         xpLinkManagerSerdesGetRxLineEncoding: Enter [ devId,serdesId/startSerdesId-endSerdesId ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            serdesStatus_Ptr_3 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d' % (args[0],args[1]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesGetRxLineEncoding(args[0],serdesId,serdesStatus_Ptr_3)
                err = 0
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                    err = 1
                if err == 0:
                    print('serdesStatus = %d for serdesId = %d' % (uint8_tp_value(serdesStatus_Ptr_3),serdesId))
                    pass
            delete_uint8_tp(serdesStatus_Ptr_3)

    #/********************************************************************************/
    # command for xpLinkManagerSerdesSetTxRxDataWidth
    #/********************************************************************************/
    def do_serdes_set_tx_rx_data_width(self, arg):
        '''
         xpLinkManagerSerdesSetTxRxDataWidth: Enter [ devId,serdesId/startSerdesId-endSerdesId,txWidth,rxWidth,txEncoding,rxEncoding ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 6
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId,txWidth,rxWidth,txEncoding,rxEncoding ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            args[3] = int(args[3])
            args[4] = int(args[4])
            args[5] = int(args[5])
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d, txWidth=%d, rxWidth=%d, txEncoding=%d, rxEncoding=%d' % (args[0],args[1],args[2],args[3],args[4],args[5]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesSetTxRxDataWidth(args[0],serdesId,args[2],args[3],args[4],args[5])
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerSerdesSlipBits
    #/********************************************************************************/
    def do_serdes_slip_bits(self, arg):
        '''
         xpLinkManagerSerdesSlipBits: Enter [ devId,serdesId/startSerdesId-endSerdesId,bits ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId,bits ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            serdesStatus_Ptr_3 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d, bits=%d' % (args[0],args[1],args[2]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesSlipBits(args[0],serdesId,args[2],serdesStatus_Ptr_3)
                err = 0
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                    err = 1
                if err == 0:
                    print('serdesStatus = %d for serdesId = %d' % (uint8_tp_value(serdesStatus_Ptr_3),serdesId))
                    pass
            delete_uint8_tp(serdesStatus_Ptr_3)

    #/********************************************************************************/
    # command for xpLinkManagerSerdesSlipRxPhase
    #/********************************************************************************/
    def do_serdes_slip_rx_phase(self, arg):
        '''
         xpLinkManagerSerdesSlipRxPhase: Enter [ devId,serdesId/startSerdesId-endSerdesId,bits,applyAtInit ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 4
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId,bits,applyAtInit ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            args[3] = int(args[3])
            serdesStatus_Ptr_4 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d, bits=%d, applyAtInit=%d' % (args[0],args[1],args[2],args[3]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesSlipRxPhase(args[0],serdesId,args[2],args[3],serdesStatus_Ptr_4)
                err = 0
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                    err = 1
                if err == 0:
                    print('serdesStatus = %d for serdesId = %d' % (uint8_tp_value(serdesStatus_Ptr_4),serdesId))
                    pass
            delete_uint8_tp(serdesStatus_Ptr_4)

    #/********************************************************************************/
    # command for xpLinkManagerSerdesSlipTxPhase
    #/********************************************************************************/
    def do_serdes_slip_tx_phase(self, arg):
        '''
         xpLinkManagerSerdesSlipTxPhase: Enter [ devId,serdesId/startSerdesId-endSerdesId,bits,applyAtInit ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 4
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId,bits,applyAtInit ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            args[3] = int(args[3])
            serdesStatus_Ptr_4 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d, bits=%d, applyAtInit=%d' % (args[0],args[1],args[2],args[3]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesSlipTxPhase(args[0],serdesId,args[2],args[3],serdesStatus_Ptr_4)
                err = 0
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                    err = 1
                if err == 0:
                    print('serdesStatus = %d for serdesId = %d' % (uint8_tp_value(serdesStatus_Ptr_4),serdesId))
                    pass
            delete_uint8_tp(serdesStatus_Ptr_4)

    #/********************************************************************************/
    # command for xpLinkManagerSerdesTuneInit
    #/********************************************************************************/
    def do_serdes_tune_init(self, arg):
        '''
         xpLinkManagerSerdesTuneInit: Enter [ devId,serdesId/startSerdesId-endSerdesId ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            control_Ptr_2 = new_xpSerdesDfeTune_tp()
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d' % (args[0],args[1]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesTuneInit(args[0],serdesId,control_Ptr_2)
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                else:
                    pass
            delete_xpSerdesDfeTune_tp(control_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerSerdesTune
    #/********************************************************************************/
    def do_serdes_tune(self, arg):
        '''
         xpLinkManagerSerdesTune: Enter [ devId,serdesId/startSerdesId-endSerdesId ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            control_Ptr_2 = new_xpSerdesDfeTune_tp()
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d' % (args[0],args[1]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesTune(args[0],serdesId,control_Ptr_2)
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                else:
                    pass
            delete_xpSerdesDfeTune_tp(control_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerSerdesEyeGetSimpleMetric
    #/********************************************************************************/
    def do_serdes_eye_get_simple_metric(self, arg):
        '''
         xpLinkManagerSerdesEyeGetSimpleMetric: Enter [ devId,serdesId/startSerdesId-endSerdesId ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            eyeMetric_Ptr_3 = new_uint32_tp()
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d' % (args[0],args[1]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesEyeGetSimpleMetric(args[0],serdesId,eyeMetric_Ptr_3)
                err = 0
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                    err = 1
                if err == 0:
                    print('eyeMetric = %d' % (uint32_tp_value(eyeMetric_Ptr_3)))
                    pass
            delete_uint32_tp(eyeMetric_Ptr_3)

    #/********************************************************************************/
    # command for xpLinkManagerSerdesGetRxLiveData
    #/********************************************************************************/
    def do_serdes_get_rx_live_data(self, arg):
        '''
         xpLinkManagerSerdesGetRxLiveData: Enter [ devId,serdesId/startSerdesId-endSerdesId ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d' % (args[0],args[1]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesGetRxLiveData(args[0],serdesId)
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                else:
                    pass


    #/********************************************************************************/
    # command for xpLinkManagerSerdesCtrlrDiag
    #/********************************************************************************/
    def do_serdes_ctrlr_diag(self, arg):
        '''
         xpLinkManagerSerdesCtrlrDiag: Enter [ devId,serdesId/startSerdesId-endSerdesId,cycles ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId,cycles ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            serderStatus_Ptr_4 = new_uint32_tp()
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d, cycles=%d' % (args[0],args[1],args[2]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesCtrlrDiag(args[0],serdesId,args[2],serderStatus_Ptr_4)
                err = 0
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                    err = 1
                if err == 0:
                    print('serderStatus = %d' % (uint32_tp_value(serderStatus_Ptr_4)))
                    pass
            delete_uint32_tp(serderStatus_Ptr_4)

    #/********************************************************************************/
    # command for xpLinkManagerSerdesCtrlrWaitForUpload
    #/********************************************************************************/
    def do_serdes_ctrlr_wait_for_upload(self, arg):
        '''
         xpLinkManagerSerdesCtrlrWaitForUpload: Enter [ devId,serdesId/startSerdesId-endSerdesId ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d' % (args[0],args[1]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesCtrlrWaitForUpload(args[0],serdesId)
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerSerdesTwiWaitForComplete
    #/********************************************************************************/
    def do_serdes_twi_wait_for_complete(self, arg):
        '''
         xpLinkManagerSerdesTwiWaitForComplete: Enter [ devId,serdesId/startSerdesId-endSerdesId ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d' % (args[0],args[1]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesTwiWaitForComplete(args[0],serdesId)
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerGetSerdesCtleVal
    #/********************************************************************************/
    def do_get_serdes_ctle_val(self, arg):
        '''
         xpLinkManagerGetSerdesCtleVal: Enter [ devId,serdesId/startSerdesId-endSerdesId ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d' % (args[0],args[1]))
            ctleVal = new_xpSerdesCtle_tp()
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerGetSerdesCtleVal(args[0],serdesId, ctleVal)
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                else:
                    print('HF = %d, LF = %d, DC = %d, BW = %d for serdesId = %d' % (ctleVal.hf,ctleVal.lf,ctleVal.dc,ctleVal.bw,serdesId))
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerSerdesCtrlrIntCheck
    #/********************************************************************************/
    def do_serdes_ctrlr_int_check(self, arg):
        '''
         xpLinkManagerSerdesCtrlrIntCheck: Enter [ devId,serdesId/startSerdesId-endSerdesId,intNum,param ]
        '''
        info=inspect.currentframe()	#parse function informations
        args = re.split(';| ',arg)
        numArgsReq = 4
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId,intNum,param ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            args[3] = int(args[3])
            serdesStatus_Ptr_7 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d, intNum=%d, param=%d' % (args[0],args[1],args[2],args[3]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesCtrlrIntCheck(args[0],serdesId,info.f_code.co_name,info.f_lineno,args[2],args[3],serdesStatus_Ptr_7)
                err = 0
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                    err = 1
                if err == 0:
                    print('serdesStatus = %d for serdesId = %d' % (uint8_tp_value(serdesStatus_Ptr_7),serdesId))
                    pass
            delete_uint8_tp(serdesStatus_Ptr_7)

    #/********************************************************************************/
    # command for xpLinkManagerSetSerdesStruct
    #/********************************************************************************/
    def do_set_serdes_struct(self, arg):
        '''
         xpLinkManagerSetSerdesStruct: Enter [ devId,serdesId/startSerdesId-endSerdesId ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            serdesData_Ptr_2 = new_xpSerdes_tp()
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d' % (args[0],args[1]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSetSerdesStruct(args[0],serdesId,serdesData_Ptr_2)
                err = 0
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                    err = 1
                if err == 0:
                    print('serdesData = %d for serdesId = %d' % (xpSerdes_tp_value(serdesData_Ptr_2),serdesId))
                    pass
            delete_xpSerdes_tp(serdesData_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerGetSerdesStruct
    #/********************************************************************************/
    def do_get_serdes_struct(self, arg):
        '''
         xpLinkManagerGetSerdesStruct: Enter [ devId,serdesId/startSerdesId-endSerdesId ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            serdesData_Ptr_2 = new_xpSerdes_tp()
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d' % (args[0],args[1]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerGetSerdesStruct(args[0],serdesId,serdesData_Ptr_2)
                err = 0
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                    err = 1
                if err == 0:
                    print('serdesData = %d for serdesId = %d' % (xpSerdes_tp_value(serdesData_Ptr_2),serdesId))
                    pass
            delete_xpSerdes_tp(serdesData_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerXpMacWrite
    #/********************************************************************************/
    def do_xp_mac_write(self, arg):
        '''
         xpLinkManagerXpMacWrite: Enter [ devId,portNum/startPort-endPort,regAddr,regValue ]
         regAddr and regValue should be given in HEX format
        '''
        args = re.split(';| ',arg)
        numArgsReq = 4
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,regAddr,regValue ]')
            print('regAddr and regValue should be given in HEX format')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2], 16)
            args[3] = int(args[3], 16)
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, regAddr=0x%x, regValue=0x%x' % (args[0],args[1],args[2],args[3]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerXpMacWrite(args[0],portNum,args[2],args[3])
                        if ret !=0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerXpMacRead
    #/********************************************************************************/
    def do_xp_mac_read(self, arg):
        '''
         xpLinkManagerXpMacRead: Enter [ devId,portNum/startPort-endPort,regAddr ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,regAddr ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2], 16)
            regValue_Ptr_3 = new_uint16_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, regAddr=0x%x' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerXpMacRead(args[0],portNum,args[2],regValue_Ptr_3)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print(' regValue = 0x%x' % (uint16_tp_value(regValue_Ptr_3)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint16_tp(regValue_Ptr_3)

    #/********************************************************************************/
    # command for xpLinkManagerSetSerdesDebugLevelAll
    #/********************************************************************************/
    def do_set_serdes_debug_level_all(self, arg):
        '''
         xpLinkManagerSetSerdesDebugLevelAll: Enter [ devId,debugLevel,enLogging ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,debugLevel,enLogging ]')
        else:
            args[0] = int(args[0])
            args[1] = int(args[1])
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, debugLevel=%d' % (args[0],args[1]))
            ret = xpLinkManagerSetSerdesDebugLevelAll(args[0],args[1],args[2])
            if ret != 0:
                print('Return Value = %d' % (ret))
            else:
                pass

    #/*****************************************************************************************************/
    # command to read statistics for given port
    #/*****************************************************************************************************/
    def do_get_stats(self, arg):
        '''
        getPortStat: Enter [ devId,portNum/startPort-endPort ]
        '''
        #args = tuple(map(int, arg.split()))
        args = arg.split()
        if  len(args) < 2:
            print 'Invalid input, Enter [ devId,portNum/startPort-endPort ]'
        else:
            statStruct = xp_Statistics()
            if (xpDeviceMgr.instance().isDeviceValid(int(args[0]))):
                if (len(args) >= 2):
                    args[0] = int(args[0])
                    if '-' in args[1]:
                        startPort = int(args[1].split('-')[0].strip())
                        endPort = int(args[1].split('-')[1].strip())
                        if startPort > endPort:
                            print('improper range')
                            return
                    else:
                        args[1] = int(args[1])
                        startPort = args[1]
                        endPort = args[1]
                    passList = []
                    #portList = range(startPort, endPort + 1)
                    #postList = args[1].strip("'").strip("'").strip("]").strip("[").split(",")
                    #listLen = len(portList)
                    valid_Ptr = new_uint8_tp()
                    for portNum in range(startPort,endPort+1):
                        xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                        if((uint8_tp_value(valid_Ptr))):
                            if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                                passList.append(portNum)
                            else:
                                print('============================')
                                print('Port %d:' % (portNum))
                                print('============================')
                                print('portNum %d is not initialized' % (portNum))
                                print('')
                        else:
                            pass
                    listLen = len(passList)
                    arrUint32 = new_arrUint32(listLen)
                    for index, value in enumerate(passList):
                        arrUint32_setitem(arrUint32, index, value)
                    print('Input Arguments are devId=%d' % (args[0]))
                    xpLinkManagerGetPortStat(args[0], arrUint32, listLen)
                    delete_arrUint32(arrUint32)
            else:
                print ('Device %d not added' % int(args[0]))

    #/********************************************************************************/
    # command for xpLinkManagerPortFarEndLoopbackEnable
    #/********************************************************************************/
    def do_port_far_end_loopback_enable(self, arg):
        '''
         xpLinkManagerPortFarEndLoopbackEnable: Enter [ devId,portNum/startPort-endPort,enable ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,enable ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerPortFarEndLoopbackEnable(args[0],portNum,args[2])
                        if ret !=0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerSerdesGetEyeMeasurement
    #/********************************************************************************/
    def do_serdes_get_eye_measurement(self, arg):
        '''
         xpLinkManagerSerdesGetEyeMeasurement: Enter [ devId,serdesId ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId ]')
        else:
            args[0] = int(args[0])
            args[1] = int(args[1])
            eyeHeight_Ptr_2 = new_uint32_tp()
            eyeWidth_Ptr_3 = new_uint32_tp()
            #print('Input Arguments are, devId=%d, serdesId=%d' % (args[0],args[1]))
            ret = xpLinkManagerSerdesGetEyeMeasurement(args[0],args[1], eyeHeight_Ptr_2, eyeWidth_Ptr_3)
            if ret != 0:
                print('Return Value = %d' % (ret))
            else:
                print('eyeHeight = %d' % (uint32_tp_value(eyeHeight_Ptr_2)))
                print('eyeWidth = %d' % (uint32_tp_value(eyeWidth_Ptr_3)))
                pass
            delete_uint32_tp(eyeHeight_Ptr_2)
            delete_uint32_tp(eyeWidth_Ptr_3)

    #/********************************************************************************/
    # command for xpLinkManagerRxFlowControlFilterEnable
    #/********************************************************************************/
    def do_rx_flow_control_filter_enable(self, arg):
        '''
         xpLinkManagerRxFlowControlFilterEnable: Enter [ devId,portNum/startPort-endPort,enable ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,enable ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, enable=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerRxFlowControlFilterEnable(args[0],portNum,args[2])
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerRxFlowControlFilterEnableGet
    #/********************************************************************************/
    def do_rx_flow_control_filter_enable_get(self, arg):
        '''
         xpLinkManagerRxFlowControlFilterEnableGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            enable_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerRxFlowControlFilterEnableGet(args[0],portNum,enable_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('enable = %d' % (uint8_tp_value(enable_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(enable_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerFcFecDbgCorrectedBitsCntGet
    #/********************************************************************************/
    def do_fc_fec_dbg_corrected_bits_cnt_get(self, arg):
        '''
         xpLinkManagerFcFecDbgCorrectedBitsCntGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            value_Ptr_2 = new_uint32_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerFcFecDbgCorrectedBitsCntGet(args[0],portNum,value_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('value = %d' % (uint32_tp_value(value_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint32_tp(value_Ptr_2)
    #/********************************************************************************/
    # command for xpLinkManagerFcFecDbgBlockCntGet
    #/********************************************************************************/
    def do_fc_fec_dbg_block_cnt_get(self, arg):
        '''
         xpLinkManagerFcFecDbgBlockCntGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            value_Ptr_2 = new_uint32_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerFcFecDbgBlockCntGet(args[0],portNum,value_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('value = %d' % (uint32_tp_value(value_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint32_tp(value_Ptr_2)
    #/********************************************************************************/
    # command for xpLinkManagerFcFecBypassScarmblerSet
    #/********************************************************************************/
    def do_fc_fec_bypass_scarmbler_set(self, arg):
        '''
         xpLinkManagerFcFecBypassScarmblerSet: Enter [ devId,portNum/startPort-endPort,value ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,value ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2], 16)
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, value=0x%x' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerFcFecBypassScarmblerSet(args[0],portNum,args[2])
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
    #/********************************************************************************/
    # command for xpLinkManagerFcFecDbgRobustBlockSet
    #/********************************************************************************/
    def do_fc_fec_dbg_robust_block_set(self, arg):
        '''
         xpLinkManagerFcFecDbgRobustBlockSet: Enter [ devId,portNum/startPort-endPort,enable ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,enable ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, enable=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerFcFecDbgRobustBlockSet(args[0],portNum,args[2])
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
    #/********************************************************************************/
    # command for xpLinkManagerFcFecForceBlockLockSet
    #/********************************************************************************/
    def do_fc_fec_force_block_lock_set(self, arg):
        '''
         xpLinkManagerFcFecForceBlockLockSet: Enter [ devId,portNum/startPort-endPort,enable ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,enable ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, enable=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerFcFecForceBlockLockSet(args[0],portNum,args[2])
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
    #/********************************************************************************/
    # command for xpLinkManagerFcFecForceSlipSet
    #/********************************************************************************/
    def do_fc_fec_force_slip_set(self, arg):
        '''
         xpLinkManagerFcFecForceSlipSet: Enter [ devId,portNum/startPort-endPort,enable ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,enable ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, enable=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerFcFecForceSlipSet(args[0],portNum,args[2])
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
    #/********************************************************************************/
    # command for xpLinkManagerRsFecDbgBerIntThresSet
    #/********************************************************************************/
    def do_rs_fec_dbg_ber_int_thres_set(self, arg):
        '''
         xpLinkManagerRsFecDbgBerIntThresSet: Enter [ devId,portNum/startPort-endPort,enable ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,enable ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, enable=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerRsFecDbgBerIntThresSet(args[0],portNum,args[2])
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
    #/********************************************************************************/
    # command for xpLinkManagerRcFecForceInvldTmrLowSet
    #/********************************************************************************/
    def do_rc_fec_force_invld_tmr_low_set(self, arg):
        '''
         xpLinkManagerRcFecForceInvldTmrLowSet: Enter [ devId,portNum/startPort-endPort,value ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,value ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2], 16)
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, value=0x%x' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerRcFecForceInvldTmrLowSet(args[0],portNum,args[2])
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
    #/********************************************************************************/
    # command for xpLinkManagerRsFecForceInvldTmrHighSet
    #/********************************************************************************/
    def do_rs_fec_force_invld_tmr_high_set(self, arg):
        '''
         xpLinkManagerRsFecForceInvldTmrHighSet: Enter [ devId,portNum/startPort-endPort,value ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,value ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2], 16)
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, value=0x%x' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerRsFecForceInvldTmrHighSet(args[0],portNum,args[2])
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
    #/********************************************************************************/
    # command for xpLinkManagerRsFecBlockLockEnSet
    #/********************************************************************************/
    def do_rs_fec_block_lock_en_set(self, arg):
        '''
         xpLinkManagerRsFecBlockLockEnSet: Enter [ devId,portNum/startPort-endPort,enable ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,enable ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, enable=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerRsFecBlockLockEnSet(args[0],portNum,args[2])
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
    #/********************************************************************************/
    # command for xpLinkManagerRsFecRobustBlockLockSet
    #/********************************************************************************/
    def do_rs_fec_robust_block_lock_set(self, arg):
        '''
         xpLinkManagerRsFecRobustBlockLockSet: Enter [ devId,portNum/startPort-endPort,value ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,value ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2], 16)
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, value=0x%x' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerRsFecRobustBlockLockSet(args[0],portNum,args[2])
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
    #/********************************************************************************/
    # command for xpLinkManagerRsFecBlockGainThresholdSet
    #/********************************************************************************/
    def do_rs_fec_block_gain_threshold_set(self, arg):
        '''
         xpLinkManagerRsFecBlockGainThresholdSet: Enter [ devId,portNum/startPort-endPort,value ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,value ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2], 16)
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, value=0x%x' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerRsFecBlockGainThresholdSet(args[0],portNum,args[2])
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
    #/********************************************************************************/
    # command for xpLinkManagerRsFecBlockLossThresholdSet
    #/********************************************************************************/
    def do_rs_fec_block_loss_threshold_set(self, arg):
        '''
         xpLinkManagerRsFecBlockLossThresholdSet: Enter [ devId,portNum/startPort-endPort,value ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,value ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2], 16)
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, value=0x%x' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerRsFecBlockLossThresholdSet(args[0],portNum,args[2])
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
    #/********************************************************************************/
    # command for xpLinkManagerRsFec25GPadValSet
    #/********************************************************************************/
    def do_rs_fec25_g_pad_val_set(self, arg):
        '''
         xpLinkManagerRsFec25GPadValSet: Enter [ devId,portNum/startPort-endPort,enable ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,enable ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, enable=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerRsFec25GPadValSet(args[0],portNum,args[2])
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
    #/********************************************************************************/
    # command for xpLinkManagerRsFecTranscodScramblerSet
    #/********************************************************************************/
    def do_rs_fec_transcod_scrambler_set(self, arg):
        '''
         xpLinkManagerRsFecTranscodScramblerSet: Enter [ devId,portNum/startPort-endPort,enable ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,enable ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, enable=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerRsFecTranscodScramblerSet(args[0],portNum,args[2])
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
    #/********************************************************************************/
    # command for xpLinkManagerRsFecPNScramblingSet
    #/********************************************************************************/
    def do_rs_fec_pn_scrambling_set(self, arg):
        '''
         xpLinkManagerRsFecPNScramblingSet: Enter [ devId,portNum/startPort-endPort,enable ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,enable ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, enable=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerRsFecPNScramblingSet(args[0],portNum,args[2])
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
    #/********************************************************************************/
    # command for xpLinkManagerRsFecBlock2ErrIndSet
    #/********************************************************************************/
    def do_rs_fec_block2_err_ind_set(self, arg):
        '''
         xpLinkManagerRsFecBlock2ErrIndSet: Enter [ devId,portNum/startPort-endPort,enable ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,enable ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, enable=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerRsFecBlock2ErrIndSet(args[0],portNum,args[2])
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
    #/********************************************************************************/
    # command for xpLinkManagerRsFecBlock6ErrIndSet
    #/********************************************************************************/
    def do_rs_fec_block6_err_ind_set(self, arg):
        '''
         xpLinkManagerRsFecBlock6ErrIndSet: Enter [ devId,portNum/startPort-endPort,enable ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,enable ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, enable=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerRsFecBlock6ErrIndSet(args[0],portNum,args[2])
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
    #/********************************************************************************/
    # command for xpLinkManagerClearLinkIntStatus
    #/********************************************************************************/
    def do_clear_link_int_status(self, arg):
        '''
         xpLinkManagerClearLinkIntStatus: Enter [ devId,portNum,startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = 1
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, enable=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerClearLinkIntStatus(args[0],portNum,args[2])
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
    #/********************************************************************************/
    # command for xpLinkManagerLinkStatusTxIdleEnableGet
    #/********************************************************************************/
    def do_link_status_tx_idle_enable_get(self, arg):
        '''
         xpLinkManagerLinkStatusTxIdleEnableGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            status_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerLinkStatusTxIdleEnableGet(args[0],portNum,status_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('status = %d' % (uint8_tp_value(status_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(status_Ptr_2)
    #/********************************************************************************/
    # command for xpLinkManagerSlot2ChMappingEnableSet
    #/********************************************************************************/
    def do_slot2_ch_mapping_enable_set(self, arg):
        '''
         xpLinkManagerSlot2ChMappingEnableSet: Enter [ devId,portNum/startPort-endPort,enable ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,enable ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, enable=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerSlot2ChMappingEnableSet(args[0],portNum,args[2])
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
    #/********************************************************************************/
    # command for xpLinkManagerSlot2ChMappingEnableGet
    #/********************************************************************************/
    def do_slot2_ch_mapping_enable_get(self, arg):
        '''
         xpLinkManagerSlot2ChMappingEnableGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            enable_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerSlot2ChMappingEnableGet(args[0],portNum,enable_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('enable = %d' % (uint8_tp_value(enable_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(enable_Ptr_2)
    #/********************************************************************************/
    # command for xpLinkManagerMacFifoLoopbackThresholdGet
    #/********************************************************************************/
    def do_mac_fifo_loopback_threshold_get(self, arg):
        '''
         xpLinkManagerMacFifoLoopbackThresholdGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            value_Ptr_2 = new_uint16_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerMacFifoLoopbackThresholdGet(args[0],portNum,value_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('value = %d' % (uint16_tp_value(value_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint16_tp(value_Ptr_2)
    #/********************************************************************************/
    # command for xpLinkManagerMacFifoLoopbackThresholdSet
    #/********************************************************************************/
    def do_mac_fifo_loopback_threshold_set(self, arg):
        '''
         xpLinkManagerMacFifoLoopbackThresholdSet: Enter [ devId,portNum/startPort-endPort,value ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,value ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2], 16)
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, value=0x%x' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerMacFifoLoopbackThresholdSet(args[0],portNum,args[2])
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
    #/********************************************************************************/
    # command for xpLinkManagerDbgBitErrorEnableSet
    #/********************************************************************************/
    def do_dbg_bit_error_enable_set(self, arg):
        '''
         xpLinkManagerDbgBitErrorEnableSet: Enter [ devId,portNum/startPort-endPort,enable ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,enable ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, enable=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerDbgBitErrorEnableSet(args[0],portNum,args[2])
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
    #/********************************************************************************/
    # command for xpLinkManagerDbgBitErrorEnableGet
    #/********************************************************************************/
    def do_dbg_bit_error_enable_get(self, arg):
        '''
         xpLinkManagerDbgBitErrorEnableGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            enable_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerDbgBitErrorEnableGet(args[0],portNum,enable_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('enable = %d' % (uint8_tp_value(enable_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(enable_Ptr_2)
    #/********************************************************************************/
    # command for xpLinkManagerDbgSyncHeaderEnableSet
    #/********************************************************************************/
    def do_dbg_sync_header_enable_set(self, arg):
        '''
         xpLinkManagerDbgSyncHeaderEnableSet: Enter [ devId,portNum/startPort-endPort,enable ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,enable ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, enable=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerDbgSyncHeaderEnableSet(args[0],portNum,args[2])
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
    #/********************************************************************************/
    # command for xpLinkManagerDbgSyncHeaderEnableGet
    #/********************************************************************************/
    def do_dbg_sync_header_enable_get(self, arg):
        '''
         xpLinkManagerDbgSyncHeaderEnableGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            enable_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerDbgSyncHeaderEnableGet(args[0],portNum,enable_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('enable = %d' % (uint8_tp_value(enable_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(enable_Ptr_2)
    #/********************************************************************************/
    # command for xpLinkManagerDbgInsertionCodeSet
    #/********************************************************************************/
    def do_dbg_insertion_code_set(self, arg):
        '''
         xpLinkManagerDbgInsertionCodeSet: Enter [ devId,portNum/startPort-endPort,value ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,value ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2], 16)
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, value=0x%x' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerDbgInsertionCodeSet(args[0],portNum,args[2])
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
    #/********************************************************************************/
    # command for xpLinkManagerPcsMlgChModGet
    #/********************************************************************************/
    def do_pcs_mlg_ch_mod_get(self, arg):
        '''
         xpLinkManagerPcsMlgChModGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            value_Ptr_2 = new_uint16_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerPcsMlgChModGet(args[0],portNum,value_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('value = %d' % (uint16_tp_value(value_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint16_tp(value_Ptr_2)
    #/********************************************************************************/
    # command for xpLinkManagerPcsMlgChModSet
    #/********************************************************************************/
    def do_pcs_mlg_ch_mod_set(self, arg):
        '''
         xpLinkManagerPcsMlgChModSet: Enter [ devId,portNum/startPort-endPort,value ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,value ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2], 16)
            print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, value=0x%x' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerPcsMlgChModSet(args[0],portNum,args[2])
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
    #/********************************************************************************/
    # command for xpLinkManagerPcsPmaChModGet
    #/********************************************************************************/
    def do_pcs_pma_ch_mod_get(self, arg):
        '''
         xpLinkManagerPcsPmaChModGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            value_Ptr_2 = new_uint16_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerPcsPmaChModGet(args[0],portNum,value_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('value = %d' % (uint16_tp_value(value_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint16_tp(value_Ptr_2)
    #/********************************************************************************/
    # command for xpLinkManagerPcsPmaChModSet
    #/********************************************************************************/
    def do_pcs_pma_ch_mod_set(self, arg):
        '''
         xpLinkManagerPcsPmaChModSet: Enter [ devId,portNum/startPort-endPort,value ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,value ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2], 16)
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, value=0x%x' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerPcsPmaChModSet(args[0],portNum,args[2])
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
    #/********************************************************************************/
    # command for xpLinkManagerPcsFecChModGet
    #/********************************************************************************/
    def do_pcs_fec_ch_mod_get(self, arg):
        '''
         xpLinkManagerPcsFecChModGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            value_Ptr_2 = new_uint16_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerPcsFecChModGet(args[0],portNum,value_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('value = %d' % (uint16_tp_value(value_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint16_tp(value_Ptr_2)
    #/********************************************************************************/
    # command for xpLinkManagerPcsFecChModSet
    #/********************************************************************************/
    def do_pcs_fec_ch_mod_set(self, arg):
        '''
         xpLinkManagerPcsFecChModSet: Enter [ devId,portNum/startPort-endPort,value ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,value ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2], 16)
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, value=0x%x' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerPcsFecChModSet(args[0],portNum,args[2])
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
    #/********************************************************************************/
    # command for xpLinkManagerSerdesSignalStatusOverrideGet
    #/********************************************************************************/
    def do_serdes_signal_status_override_get(self, arg):
        '''
         xpLinkManagerSerdesSignalStatusOverrideGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            value_Ptr_2 = new_uint16_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerSerdesSignalStatusOverrideGet(args[0],portNum,value_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('value = %d' % (uint16_tp_value(value_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint16_tp(value_Ptr_2)
    #/********************************************************************************/
    # command for xpLinkManagerSerdesLaneRemapRx0Get
    #/********************************************************************************/
    def do_serdes_lane_remap_rx0_get(self, arg):
        '''
         xpLinkManagerSerdesLaneRemapRx0Get: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            value_Ptr_2 = new_uint16_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerSerdesLaneRemapRx0Get(args[0],portNum,value_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('value = %d' % (uint16_tp_value(value_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint16_tp(value_Ptr_2)
    #/********************************************************************************/
    # command for xpLinkManagerSerdesLaneRemapRx0Set
    #/********************************************************************************/
    def do_serdes_lane_remap_rx0_set(self, arg):
        '''
         xpLinkManagerSerdesLaneRemapRx0Set: Enter [ devId,portNum/startPort-endPort,value ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,value ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2],16)
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, value=0x%x' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerSerdesLaneRemapRx0Set(args[0],portNum,args[2])
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
    #/********************************************************************************/
    # command for xpLinkManagerSerdesLaneRemapTx0Get
    #/********************************************************************************/
    def do_serdes_lane_remap_tx0_get(self, arg):
        '''
         xpLinkManagerSerdesLaneRemapTx0Get: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            value_Ptr_2 = new_uint16_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerSerdesLaneRemapTx0Get(args[0],portNum,value_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('value = %d' % (uint16_tp_value(value_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint16_tp(value_Ptr_2)
    #/********************************************************************************/
    # command for xpLinkManagerSerdesLaneRemapTx0Set
    #/********************************************************************************/
    def do_serdes_lane_remap_tx0_set(self, arg):
        '''
         xpLinkManagerSerdesLaneRemapTx0Set: Enter [ devId,portNum/startPort-endPort,value ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,value ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2], 16)
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, value=0x%x' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerSerdesLaneRemapTx0Set(args[0],portNum,args[2])
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
    #/********************************************************************************/
    # command for xpLinkManagerRxFifoOverflowGet
    #/********************************************************************************/
    def do_rx_fifo_overflow_get(self, arg):
        '''
         xpLinkManagerRxFifoOverflowGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            enable_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerRxFifoOverflowGet(args[0],portNum,enable_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('enable = %d' % (uint8_tp_value(enable_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(enable_Ptr_2)
    #/********************************************************************************/
    # command for xpLinkManagerTxFifoUnderflowGet
    #/********************************************************************************/
    def do_tx_fifo_underflow_get(self, arg):
        '''
         xpLinkManagerTxFifoUnderflowGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            enable_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerTxFifoUnderflowGet(args[0],portNum,enable_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('enable = %d' % (uint8_tp_value(enable_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(enable_Ptr_2)

    #/*****************************************************************************************************/
    # Command to Enable Port AutoNegotiation
    #/*****************************************************************************************************/
    def do_an_lt_port_enable(self, arg):
        args = re.split(';| ',arg)
        numArgsReq = 5
        if (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum,ANability,ANctrl,is25GModeIEEE]')
            print('ANability & ANctrl values are in HEX')
            print('Example for Capability of 100G,40G & FEC requ/supp:  an_lt_port_enable 0 2 0x198 0x3 0')
            print('Example for Capability of 25G,10G & no FEC:          an_lt_port_enable 0 2 0x206 0x0 1')
            print('    ANability bit0:  RESERVED')
            print('    ANability bit1:  10GBASE-KX4')
            print('    ANability bit2:  10GBASE-KR')
            print('    ANability bit3:  40GBASE-KR4')
            print('    ANability bit4:  40GBASE-CR4')
            print('    ANability bit5:  RESERVED')
            print('    ANability bit6:  RESERVED')
            print('    ANability bit7:  100GBASE-KR4')
            print('    ANability bit8:  100GBASE-CR4')
            print('    ANability bit9:  25GBASE-KR1')
            print('    ANability bit10: 25GBASE-CR1')
            print('    ANability bit11: 50GBASE-KR2')
            print('    ANability bit12: 50GBASE-CR2')
            print('    ANctrl bit0:     FEC_SUPPORTED')
            print('    ANctrl bit1:     FEC_REQUEST')
            print('    ANctrl bit2:     FEC_MODE::RS_FEC - This option is only for 25G/50G')
            print('    ANctrl bit3:     FEC_MODE::FC_FEC - This option is only for 25G/50G')
            print('    is25GModeIEEE 0:    Consortium AN mode - This option is only for 25G ')
            print('    is25GModeIEEE 1:    IEEE 802.3by AN mode - This option is only for 25G ')
        else:
            args[0] = int(args[0])
            args[1] = int(args[1])
            args[2] = int(args[2],16)
            args[3] = int(args[3],16)
            args[4] = int(args[4])
            xpLinkManagerPortANLtEnable(args[0], args[1], args[2], args[3], args[4])
        pass
    #/*****************************************************************************************************/
    # Command to Disable Port AutoNegotiation
    #/*****************************************************************************************************/
    def do_an_lt_port_disable(self, arg):
        args = re.split(';| ',arg)
        numArgsReq = 2
        if (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum]')
        else:
            args[0] = int(args[0])
            args[1] = int(args[1])
            xpLinkManagerPortANLtDisable(args[0], args[1])
        pass
    #/********************************************************************************/
    # command to Disable Back Plane Auto Negotiation
    #/********************************************************************************/
    def do_backplane_autoneg_disable(self, arg):
        '''
         backplane auto negotiation disable : Enter [ devId,portNum/startPort-endPort,isPythonInterface ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum,isPythonInterface ]')
        else:
            args[0] = int(args[0])
            isPythonInterface = 0
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
                if (len(args) == 3):
                    isPythonInterface = int(args[2])

            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                if (isPythonInterface == 0):
                    xpLinkManagerPortANLtDisable(args[0], portNum)
                    continue
                port_bp_an_obj[portNum].an_ability = 0
                port_bp_an_obj[portNum].an_ctrl = 0
                port_bp_an_obj[portNum].ieee_consortium_mode = 0
                port_bp_an_obj[portNum].an_enabled = 0
                port_bp_an_obj[portNum].link_train = 0
                port_bp_an_obj[portNum].remote_an_ability = 0
                port_bp_an_obj[portNum].remote_an_ctrl = 0
                port_bp_an_obj[portNum].remote_an_ctrl = 0
                port_bp_an_obj[portNum].trigger_port_init = 0
                port_bp_an_obj[portNum].dfe_tune_port_serdes = 0
                port_bp_an_obj[portNum].next_page_suppport = 0
                port_bp_an_obj[portNum].start_link_training = 0
                port_bp_an_obj[portNum].check_link_training = 0
                port_bp_an_obj[portNum].clear_link_training = 0
                port_bp_an_obj[portNum].macConfigMode = 0
                ret = xpLinkManagerMacBackPlaneAutoNegProcessReset(args[0],portNum)
                if ret != 0:
                    print('============================')
                    print('BPAN AutoNeg Process Reset Failed for PortNum %d:' % portNum)
                    print('Return Value = %d' % (ret))
                    print('============================')
                    print('')
                    return

    #/********************************************************************************/
    # command to ENABLE Back Plane Auto Negotiation
    #/********************************************************************************/
    def do_backplane_autoneg_enable(self, arg):
        '''
         backplane auto negotiation enable : Enter [ devId,portNum/startPort-endPort,ANability,ANctrl,is25GModeIEEE,LinkTrain,isPythonInterface  ]
        '''
        args = re.split(';| ',arg)
        global bp_an_thread_running
        global port_bp_an_obj
        numArgsReq = 4
        if (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,ANability,ANctrl,is25GModeIEEE, LinkTraining, isPythonInterface ]')
            print('ANability & ANctrl values are in HEX')
            print('Example for Capability of 100G,40G & FEC requ/supp:  backplane_autoneg_enable 0 2 0x198 0x3 0 1')
            print('Example for Capability of 25G,10G & no FEC:          backplane_autoneg_enable 0 2 0x206 0x0 1 1')
            print('    ANability bit0:  RESERVED')
            print('    ANability bit1:  10GBASE-KX4')
            print('    ANability bit2:  10GBASE-KR')
            print('    ANability bit3:  40GBASE-KR4')
            print('    ANability bit4:  40GBASE-CR4')
            print('    ANability bit5:  RESERVED')
            print('    ANability bit6:  RESERVED')
            print('    ANability bit7:  100GBASE-KR4')
            print('    ANability bit8:  100GBASE-CR4')
            print('    ANability bit9:  25GBASE-KR1')
            print('    ANability bit10: 25GBASE-CR1')
            print('    ANability bit11: 50GBASE-KR2')
            print('    ANability bit12: 50GBASE-CR2')
            print('    ANctrl bit0:     FEC_SUPPORTED')
            print('    ANctrl bit1:     FEC_REQUEST')
            print('    ANctrl bit2:     FEC_MODE::RS_FEC - This option is only for 25G/50G')
            print('    ANctrl bit3:     FEC_MODE::FC_FEC - This option is only for 25G/50G')
            print('    is25GModeIEEE 0:    Consortium AN mode - This option is only for 25G interoperability and is optional')
            print('    is25GModeIEEE 1:    IEEE 802.3by AN mode - This option is only for 25G interoperability and is optional')
            print('    LinkTraining: If 1 perform Link Training at the end')
            print('    isPythonInterface 0: If 0 perform C interface for AN enable (default)')
            print('    isPythonInterface 1: If 0 perform Python interface for AN enable')
        else:
            args[0] = int(args[0])
            args[2] = int(args[2],16)
            args[3] = int(args[3],16)
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                if (args[2] & 0x198):  #100G or 40G
                   if (portNum % 4):
                      continue
                if (len(args) >= 5):
                    is25GModeIEEE = int(args[4])
                else:
                    is25GModeIEEE = 0
                if (len(args) >= 6):
                    link_training = int(args[5])
                else:
                    link_training = 0
                if (len(args) == 7):
                    isPythonInterface = int(args[6])
                else:
                    isPythonInterface = 0

                if (isPythonInterface == 0):
                    xpLinkManagerPortANLtEnable(args[0], portNum, args[2], args[3], is25GModeIEEE)
                    return
                else:
                    ret = xpLinkManagerMacBackPlaneAutoNegProcessSet(args[0],portNum,args[2],args[3],is25GModeIEEE)
                    if ret != 0:
                        print('============================')
                        print('BPAN AutoNeg Process Set Failed for PortNum %d:' % portNum)
                        print('Return Value = %d' % (ret))
                        print('============================')
                        print('')
                        return
                    port_bp_an_obj[portNum].an_ability = args[2]
                    port_bp_an_obj[portNum].an_ctrl = args[3]
                    port_bp_an_obj[portNum].ieee_consortium_mode = is25GModeIEEE
                    port_bp_an_obj[portNum].link_train = link_training
                    port_bp_an_obj[portNum].remote_an_ability = 0
                    port_bp_an_obj[portNum].remote_an_ctrl = 0
                    port_bp_an_obj[portNum].remote_an_ctrl = 0
                    port_bp_an_obj[portNum].trigger_port_init = 0
                    port_bp_an_obj[portNum].dfe_tune_port_serdes = 0
                    port_bp_an_obj[portNum].next_page_suppport = 0
                    port_bp_an_obj[portNum].start_link_training = 0
                    port_bp_an_obj[portNum].check_link_training = 0
                    port_bp_an_obj[portNum].clear_link_training = 0
                    port_bp_an_obj[portNum].macConfigMode = 0
                    port_bp_an_obj[portNum].an_enabled = 1
                    if bp_an_thread_running == 0:
                        bp_an_process_start()
                pass

    #/********************************************************************************/
    # command to print AN_LT Port State 
    #/********************************************************************************/
    def do_dump_an_lt_port_state(self, arg):
        '''
         print an_lt state get : Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerPrintPortANLtState(args[0],portNum)
        pass

    #/********************************************************************************/
    # command for xpLinkManager Back Plane AutoNeg Process Set
    #/********************************************************************************/
    def do_backplane_autoneg_process_set(self, arg):
        '''
         xpLinkManagerBpanAutoNegProcessSet: Enter [ devId,portNum,ANability,ANctrl,is25GModeIEEE,LinkTraining ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 4
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum,ANability,ANctrl,is25GModeIEEE,LinkTraining ]')
            print('ANability & ANctrl values are in HEX')
            print('Example for Capability of 100G,40G & FEC requ/supp:  backplane_autoneg_process_set 0 2 0x198 0x3')
            print('Example for Capability of 25G,10G & no FEC:          backplane_autoneg_process_set 0 2 0x206 0x0')
            print('    ANability bit0:  RESERVED')
            print('    ANability bit1:  10GBASE-KX4')
            print('    ANability bit2:  10GBASE-KR')
            print('    ANability bit3:  40GBASE-KR4')
            print('    ANability bit4:  40GBASE-CR4')
            print('    ANability bit5:  RESERVED')
            print('    ANability bit6:  RESERVED')
            print('    ANability bit7:  100GBASE-KR4')
            print('    ANability bit8:  100GBASE-CR4')
            print('    ANability bit9:  25GBASE-KR1')
            print('    ANability bit10: 25GBASE-CR1')
            print('    ANability bit11: 50GBASE-KR2')
            print('    ANability bit12: 50GBASE-CR2')
            print('    ANctrl bit0:     FEC_SUPPORTED')
            print('    ANctrl bit1:     FEC_REQUEST')
            print('    ANctrl bit2:     FEC_MODE::RS_FEC - This option is only for 25G/50G')
            print('    ANctrl bit3:     FEC_MODE::FC_FEC - This option is only for 25G/50G')
            print('    is25GModeIEEE 0:    Consortium AN mode - This option is only for 25G interoperability and is optional')
            print('    is25GModeIEEE 1:    IEEE 802.3by AN mode - This option is only for 25G interoperability and is optional')
            print('    LinkTraining: If 1 perform Link Training at the end')
        else:
            args[0] = int(args[0])
            args[1] = int(args[1])
            args[2] = int(args[2],16)
            args[3] = int(args[3],16)
            an_status_Ptr = new_uint16_tp()
            an_ability_Ptr = new_uint16_tp()
            an_remote_ability_Ptr = new_uint16_tp()
            an_ctrl_Ptr = new_uint16_tp()
            an_remote_ctrl_Ptr = new_uint16_tp()
            an_sts_Ptr = new_uint16_tp()
            an_next_page_Ptr = new_uint16_tp()
            uint16_tp_assign(an_status_Ptr, 0)
            uint16_tp_assign(an_ability_Ptr, 0)
            uint16_tp_assign(an_remote_ability_Ptr, 0)
            uint16_tp_assign(an_ctrl_Ptr, 0)
            uint16_tp_assign(an_remote_ctrl_Ptr, 0)
            is25GModeIEEE = -1
            if (len(args) == 5):
                is25GModeIEEE = int(args[4])
            if (len(args) == 6):
                linkTraining = int(args[5])
            else:
                linkTraining = 0
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            if (args[2]&0x1e00) and (is25GModeIEEE == 0) :  #25G/50G Support
                ret = xpLinkManagerMacBackPlaneAutoNegProcessSet(args[0],args[1],args[2],args[3],is25GModeIEEE)
                if ret != 0:
                    print('============================')
                    print('BPAN AutoNeg Process Set Failed for PortNum %d:' % (args[1]))
                    print('Return Value = %d' % (ret))
                    print('============================')
                    print('')
                else:
                    abort_after = 2*60      # in seconds - 120 seconds
                    start = time.time()
                    timeout = 0
                    uint16_tp_assign(an_sts_Ptr, 0)
                    uint16_tp_assign(an_next_page_Ptr, 0)
                    while True:
                        ret = xpLinkManagerMacBackPlaneAutoNegIsDone(args[0], args[1], an_sts_Ptr, an_next_page_Ptr);
                        if (uint16_tp_value(an_sts_Ptr) & 0xF) | uint16_tp_value(an_next_page_Ptr):
                          break
                        delta = time.time() - start
                        if delta >= abort_after:
                          timeout = 1
                          break
                    if timeout != 1:
                        print('========================================================================')
                        print('BPAN AutoNeg Process Success Base page exchange Done for PortNum %d:' % (args[1]))
                        print('========================================================================')
                        if uint16_tp_value(an_next_page_Ptr):
                            ret =  xpLinkManagerMacBackPlaneAutoNegSendConsortiumNextPage(args[0],args[1],args[2],args[3])
                            abort_after = 2*60      # in seconds - 120 seconds
                            start = time.time()
                            timeout = 0
                            uint16_tp_assign(an_sts_Ptr, 0)
                            uint16_tp_assign(an_next_page_Ptr, 0)
                            while True:
                                ret = xpLinkManagerMacBackPlaneAutoNegIsDone(args[0], args[1], an_sts_Ptr, an_next_page_Ptr);
                                if (uint16_tp_value(an_sts_Ptr) & 0xF) | uint16_tp_value(an_next_page_Ptr):
                                  break
                                delta = time.time() - start
                                if delta >= abort_after:
                                  timeout = 1
                                  break
                            if timeout != 1:
                                print('========================================================================')
                                print('BPAN AutoNeg Process Success Next page exchange Done for PortNum %d:' % (argu1))
                                print(' AN Sts = 0x%x ' % uint16_tp_value(an_sts_Ptr))
                                print('========================================================================')
                                ret = xpLinkManagerMacBackPlaneAutoNegSendConsortiumExtNextPage(args[0],args[1],args[2],args[3])

                                while True:
                                    ret = xpLinkManagerMacBackPlaneAutoNegStatusGet(argu0,port,an_status_Ptr,an_ability_Ptr,an_remote_ability_Ptr,an_ctrl_Ptr,an_remote_ctrl_Ptr)
                                    if (uint16_tp_value(an_status_Ptr) & 0x100):
                                        break
                                    delta = time.time() - start
                                    if delta >= abort_after:
                                        timeout = 1
                                        break
                                if timeout != 1:
                                    if uint16_tp_value(an_next_page_Ptr):
                                        ret = xpLinkManagerMacBackPlaneAutoNegStatusGet(args[0],args[1],an_status_Ptr,an_ability_Ptr,an_remote_ability_Ptr,an_ctrl_Ptr,an_remote_ctrl_Ptr)
                                        print('========================================================================')
                                        print('BPAN AutoNeg Process Success Ext Next page exchange Done for PortNum %d:' % (args[1]))
                                        print(' Local Ability = 0x%x  ' % uint16_tp_value(an_ability_Ptr))
                                        print(' Remote Ability = 0x%x ' % uint16_tp_value(an_remote_ability_Ptr))
                                        print(' Local Ctrl = 0x%x  ' % uint16_tp_value(an_ctrl_Ptr))
                                        print(' Remote Ctrl = 0x%x ' % uint16_tp_value(an_remote_ctrl_Ptr))
                                        print('========================================================================')
                                else:
                                    print('============================')
                                    print('BPAN AutoNeg Process Ext Next Page Configure Timeout for PortNum %d:' % (args[1]))
                                    print('============================')
                                    print('')
                                    error = 1
                            else:
                                print('============================')
                                print('BPAN AutoNeg Process Next Page Configure Timeout for PortNum %d:' % (args[1]))
                                print('============================')
                                print('')
                                error = 1

                            if error == 1:
                                delete_uint16_tp(an_status_Ptr)
                                delete_uint16_tp(an_ability_Ptr)
                                delete_uint16_tp(an_remote_ability_Ptr)
                                delete_uint16_tp(an_ctrl_Ptr)
                                delete_uint16_tp(an_remote_ctrl_Ptr)
                                delete_uint16_tp(an_sts_Ptr)
                                delete_uint16_tp(an_next_page_Ptr)
                                return

                        ret = xpLinkManagerMacBackPlaneAutoNegSuccessAction(args[0],args[1],uint16_tp_value(an_ability_Ptr),uint16_tp_value(an_remote_ability_Ptr),uint16_tp_value(an_ctrl_Ptr),uint16_tp_value(an_remote_ctrl_Ptr),1,1,linkTraining,0)
                        if ret != 0:
                            print('============================')
                            print('BPAN AutoNeg Process Success Action Failed for PortNum %d:' % (args[1]))
                            print('Return Value = %d' % (ret))
                            print('============================')
                            print('')
                        else:
                            print('========================================================================')
                            print('Performed BPAN AutoNeg Success Action')
                            print('========================================================================')
                            pass
                    else:
                        print('BPAN AutoNeg Process - Timeout for PortNum %d:' % (args[1]))

            else:  # IEEE 100G/40G/25G/10G
                ret = xpLinkManagerMacBackPlaneAutoNegProcessSet(args[0],args[1],args[2],args[3],is25GModeIEEE)
                if ret != 0:
                    print('============================')
                    print('BPAN AutoNeg Process Base Page Set Failed for PortNum %d:' % (args[1]))
                    print('Return Value = %d' % (ret))
                    print('============================')
                    print('')
                else:
                    abort_after = 2*60      # in seconds - 120 seconds
                    start = time.time()
                    timeout = 0
                    while True:
                         ret = xpLinkManagerMacBackPlaneAutoNegStatusGet(args[0],args[1],an_status_Ptr,an_ability_Ptr,an_remote_ability_Ptr,an_ctrl_Ptr,an_remote_ctrl_Ptr)
                         if uint16_tp_value(an_status_Ptr)&0x100 == 0x100:
                           break
                         #if args[2] & 0x198: #for 100G/40G - check on all lanes (as per IEEE it is lane0, but if there are any lane swaps)
                         #    status_done = 0
                         #    #for portNum in range(args[1],args[1]+3):
                         #    portNum = args[1]
                         #    ret = xpLinkManagerMacBackPlaneAutoNegStatusGet(args[0],portNum,an_status_Ptr,an_ability_Ptr,an_remote_ability_Ptr,an_ctrl_Ptr,an_remote_ctrl_Ptr)
                         #    if uint16_tp_value(an_status_Ptr)&0x100 == 0x100:    #AN Success
                         #        status_done = 1
                         #        break
                         delta = time.time() - start
                         if delta >= abort_after:
                           timeout = 1
                           break
                    if timeout != 1:
                        print('========================================================================')
                        print('BPAN AutoNeg Process Success Base page exchange Done for PortNum %d:' % (args[1]))
                        print(' Local Ability = 0x%x  ' % uint16_tp_value(an_ability_Ptr))
                        print(' Remote Ability = 0x%x ' % uint16_tp_value(an_remote_ability_Ptr))
                        print(' Local Ctrl = 0x%x  ' % uint16_tp_value(an_ctrl_Ptr))
                        print(' Remote Ctrl = 0x%x ' % uint16_tp_value(an_remote_ctrl_Ptr))
                        print('========================================================================')
                        if uint16_tp_value(an_remote_ctrl_Ptr) & 0x8000: #remote_np
                            xpLinkManagerMacBackPlaneAutoNegConfigureNullNextPage(0,args[1])
                            print('xpLinkManagerMacBackPlaneAutoNegConfigureNullNextPage() for Port %d:' % (args[1]))

                        ret = xpLinkManagerMacBackPlaneAutoNegSuccessAction(args[0],args[1],uint16_tp_value(an_ability_Ptr),uint16_tp_value(an_remote_ability_Ptr),uint16_tp_value(an_ctrl_Ptr),uint16_tp_value(an_remote_ctrl_Ptr),1,1,linkTraining,0)
                        if ret != 0:
                            print('============================')
                            print('BPAN AutoNeg Process Success Action Failed for PortNum %d:' % (args[1]))
                            print('Return Value = %d' % (ret))
                            print('============================')
                            print('')
                        else:
                            print('========================================================================')
                            print('Performed BPAN AutoNeg Success Action')
                            print('========================================================================')
                            pass
                    else:
                        print('============================')
                        print('BPAN AutoNeg Process - Timeout for PortNum %d:' % (args[1]))
                        print('============================')
            delete_uint16_tp(an_status_Ptr)
            delete_uint16_tp(an_ability_Ptr)
            delete_uint16_tp(an_remote_ability_Ptr)
            delete_uint16_tp(an_ctrl_Ptr)
            delete_uint16_tp(an_remote_ctrl_Ptr)
            delete_uint16_tp(an_sts_Ptr)
            delete_uint16_tp(an_next_page_Ptr)

    #/********************************************************************************/
    # command for xpLinkManager to set IEEE or Consortium mode in 25Gig
    #/********************************************************************************/
    def do_ieee_consortium_mode_set(self, arg):
        '''
         xpLinkManager IEEE or Consortium Mode Set: Enter [ devId,portNum,is25GModeIEEE]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum,is25GModeIEEE]')
        else:
            args[0] = int(args[0])
            args[1] = int(args[1])
            args[2] = int(args[2])
            ret = xpLinkManagerMacSetModeConsortiumIEEE(args[0],args[1],args[2])
            if ret != 0:
                print('25G IEEE or Consortium Mode Set Failed for Port %d:' % (args[1]))
                print('Return Value = %d' % (ret))
                print('')
            else:
                print('25G IEEE or Consortium Mode Mode Set to %s for Port %d' % (("CONSORTIUM", "IEEE")[args[2]], args[1]))
                print('')

    #/********************************************************************************/
    # command for xpLinkManager Link Training Trigger
    #/********************************************************************************/
    def do_link_training_trigger(self, arg):
        '''
         xpLinkManageri Link Training Trigger: Enter [ devId,portNumber,macConfigMode,fixedSpeed_an ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 4
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum,macConfigMode,fixedSpeed_an ]')
        else:
            args[0] = int(args[0])
            args[1] = int(args[1])
            args[2] = int(args[2])
            args[3] = int(args[3])
            ret = xpLinkManagerSerdesLinkTrainingProcessSet(args[0],args[1],args[2],args[3],0)
            if ret != 0:
                print('============================')
                print('Link Training Process Set Failed for Port %d:' % (args[1]))
                print('Return Value = %d' % (ret))
                print('============================')
                print('')
            else:
               print('============================')
               print('Started Link Training in Progress for Port %d:' % (args[1]))
               print('============================')
               ret = xpLinkManagerSerdesLinkTrainingStatusGetLoop(args[0],args[1],args[2])
               if ret != 0:
                   print('============================')
                   print('Link Training Status Get Loop Failed for Port %d:' % (args[1]))
                   print('Return Value = %d' % (ret))
                   print('============================')
                   print('')
               else:
                   print('============================')
                   print('Link Training Success for Port %d:' % (args[1]))
                   print('============================')
                   pass

    #/********************************************************************************/
    # command for xpLinkManagerSerdesAaplClearLogs
    #/********************************************************************************/
    def do_serdes_aapl_logs_clear(self, arg):
        '''
         xpLinkManagerSerdesAaplClearLogs: Enter [ devId,serdesId ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId ]')
        else:
            args[0] = int(args[0])
            args[1] = int(args[1])
            #print('Input Arguments are, devId=%d, serdesId=%d' % (args[0],args[1]))
            ret = xpLinkManagerSerdesAaplClearLogs(args[0], args[1])
            if ret != 0:
                print('Return Value = %d' % (ret))
            else:
                pass

    #/********************************************************************************/
    # command for xpLinkManagerSerdesTimeoutSet
    #/********************************************************************************/
    def do_serdes_aapl_timeout_set(self, arg):
        '''
         xpLinkManagerSerdesTimeoutSet: Enter [ devId, serdesId, timeoutVal]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId, serdesId, timeoutVal]')
        else:
            args[0] = int(args[0])
            args[1] = int(args[1])
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, serdesId=%d, timeoutVal=%d' % (args[0],args[1],args[2]))
            ret = xpLinkManagerSerdesTimeoutSet(args[0], args[1], args[2])
            if ret != 0:
                print('Return Value = %d' % (ret))
            else:
                pass

    #/********************************************************************************/
    # command for xpLinkManagerFaultStatusIntrSet
    #/********************************************************************************/
    def do_fault_status_intr_enable_set(self, arg):
        '''
         xpLinkManagerFaultStatusIntrSet: Enter [ devId,portNum/startPort-endPort,enable ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,enable ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, enable=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerFaultStatusIntrEnableSet(args[0],portNum,args[2])
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerSerdesSignalStatusIntrSet
    #/********************************************************************************/
    def do_serdes_signal_status_intr_enable_set(self, arg):
        '''
         xpLinkManagerSerdesSignalStatusIntrSet: Enter [ devId,portNum/startPort-endPort,enable ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,enable ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, enable=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerSerdesSignalStatusIntrEnableSet(args[0],portNum,args[2])
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
    #/********************************************************************************/
    # command for xpLinkManagerFaultStatusIntrGet
    #/********************************************************************************/
    def do_fault_status_intr_enable_get(self, arg):
        '''
         xpLinkManagerFaultStatusIntrGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            enable_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerFaultStatusIntrEnableGet(args[0],portNum,enable_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('enable = %d' % (uint8_tp_value(enable_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(enable_Ptr_2)
    #/********************************************************************************/
    # command for xpLinkManagerSerdesSignalStatusIntrGet
    #/********************************************************************************/
    def do_serdes_signal_status_intr_enable_get(self, arg):
        '''
         xpLinkManagerSerdesSignalStatusIntrGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            enable_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerSerdesSignalStatusIntrEnableGet(args[0],portNum,enable_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('enable = %d' % (uint8_tp_value(enable_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(enable_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerDisableMacInterrupts
    #/********************************************************************************/
    def do_disable_mac_interrupts(self, arg):
        '''
         xpLinkManagerDisableMacInterrupts: Enter [ devId,macNum ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,macNum ]')
        else:
            args[0] = int(args[0])
            args[1] = int(args[1])
            #print('Input Arguments are, devId=%d, macNum=%d' % (args[0],args[1]))
            ret = xpLinkManagerDisableMacInterrupts(args[0],args[1])
            err = 0
            if ret != 0:
                print('Return Value = %d' % (ret))
                err = 1
            if err == 0:
                pass

    #/********************************************************************************/
    # command for xpLinkManagerRxLocalFaultInterruptEnable
    #/********************************************************************************/
    def do_rx_local_fault_interrupt_enable(self, arg):
        '''
         xpLinkManagerRxLocalFaultInterruptEnable: Enter [ devId,portNum/startPort-endPort,status ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,status ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, status=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerRxLocalFaultInterruptEnable(args[0],portNum,args[2])
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
    #/********************************************************************************/
    # command for xpLinkManagerRxRemoteFaultInterruptEnable
    #/********************************************************************************/
    def do_rx_remote_fault_interrupt_enable(self, arg):
        '''
         xpLinkManagerRxRemoteFaultInterruptEnable: Enter [ devId,portNum/startPort-endPort,status ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,status ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, status=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerRxRemoteFaultInterruptEnable(args[0],portNum,args[2])
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerRxPreambleLenSet
    #/********************************************************************************/
    def do_tx_fault_gen_set(self, arg):
        '''
         xpLinkManagerTxFaultGenSet: Enter [ devId,portNum/startPort-endPort,faultType,value]
         faultType can be 0(for local fault) OR 1(for remote fault)
         value can be 0(disable) OR 1(enable)
        '''
        args = re.split(';| ',arg)
        numArgsReq = 4
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,faultType,value]')
	    print('faultType can be 0(for local fault) OR 1(for remote fault)')
            print('value can be 0(disable) OR 1(enable)')

        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            args[3] = int(args[3])
            #CLI only includes mapping for the supported preamble bytes and for which it's necessary - For unsupported value error will come out from XDK
            if(args[2] == 0):
                args[2] = eval('TX_LOCAL_FAULT')
            elif(args[2] == 1):
                args[2] = eval('TX_REMOTE_FAULT')
            else:
                print('Improper faultType')

            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, length=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerTxFaultGenSet(args[0],portNum,args[2],args[3])
                        if ret !=0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerTxFaultGenGet
    #/********************************************************************************/
    def do_tx_fault_gen_get(self, arg):
        '''
         xpLinkManagerTxFaultGenGet: Enter [ devId,portNum/startPort-endPort,faultType ]
         faultType can be 0(for local fault) OR 1(for remote fault)
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,faultType ]')
            print('faultType can be 0(for local fault) OR 1(for remote fault)')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])

            if(args[2] == 0):
                args[2] = eval('TX_LOCAL_FAULT')
            elif(args[2] == 1):
                args[2] = eval('TX_REMOTE_FAULT')
            else:
                print('Improper faultType')

            enable_Ptr_2 = new_uint16_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerTxFaultGenGet(args[0],portNum,args[2],enable_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('enable = %d' % (uint16_tp_value(enable_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint16_tp(enable_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerInterruptEnable
    #/********************************************************************************/
    def do_interrupt_enable(self, arg):
        '''
         xpLinkManagerInterruptEnable: Enter [ devId,portNum/startPort-endPort,eventType,enable ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 4
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,eventType,enable ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            args[3] = int(args[3])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, eventType=%d, enable=%d' % (args[0],args[1],args[2],args[3]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerInterruptEnable(args[0],portNum,args[2],args[3])
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerSerdesSensorGetTemperature
    #/********************************************************************************/
    def do_serdes_sensor_get_temperature(self, arg):
        '''
         xpLinkManagerSerdesSensorGetTemperature: Enter [ devId,sensor/startSensor-endSensor ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,sensor/startSensor-endSensor ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            mTemp = new_int32_tp()
            for sensor in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesSensorGetTemperature(args[0], sensor, mTemp)
                if ret != 0:
                    print('Sensor %d Temperature is Invalid (err=%d)' % (sensor, ret))
                else:
                    mC = int32_tp_value(mTemp)
                    if mC > 0 :
                        print('Sensor %d Temperature %d.%03d degree celsius' % (sensor, mC/1000, mC%1000/100))
                    else:
                        print('Sensor %d Temperature %d.%03d degree celsius' % (sensor, mC/1000, -1 * mC%1000/100))
                    pass
            delete_int32_tp(mTemp)

    #/********************************************************************************/
    # command for xpLinkManagerGetFaultLiveStatus
    #/********************************************************************************/
    def do_get_fault_live_status(self, arg):
        '''
         xpLinkManagerGetFaultLiveStatus: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            enable_Ptr_2 = new_xpMacRxFaultp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerGetFaultLiveStatus(args[0],portNum,enable_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            if(xpMacRxFaultp_value(enable_Ptr_2) == 0):
                                print('fault = LOCAL')
                            if(xpMacRxFaultp_value(enable_Ptr_2) == 1):
                                print('fault = REMOTE')
                            if(xpMacRxFaultp_value(enable_Ptr_2) == 2):
                                print('fault = OK')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerSerdesCtrlrGetSerdesClockDivider
    #/********************************************************************************/
    def do_serdes_ctrlr_get_serdes_clock_divider(self, arg):
        '''
         xpLinkManagerSerdesCtrlrGetSerdesClockDivider: Enter [ devId,serdesId/startSerdesId-endSerdesId ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            divider = new_int32_tp()
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d' % (args[0],args[1]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesCtrlrGetSerdesClockDivider(args[0],serdesId, divider)
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                else:
                    print('divider = %d for serdesId = %d' % (int32_tp_value(divider),serdesId))
                    pass
            delete_int32_tp(divider)

    #/********************************************************************************/
    # command for xpLinkManagerSerdesConnectionStatus
    #/********************************************************************************/
    def do_serdes_connection_status(self, arg):
        '''
         xpLinkManagerSerdesConnectionStatus: Enter [ devId,serdesId/startSerdesId-endSerdesId ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d' % (args[0],args[1]))
            status = new_int32_tp()
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesConnectionStatus(args[0],serdesId, status)
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                else:
                    print('status = %d for serdesId = %d' % (int32_tp_value(status),serdesId))
                    pass
            delete_int32_tp(status)
    #/********************************************************************************/
    # command for xpLinkManagerSerdesCloseConnection
    #/********************************************************************************/
    def do_serdes_close_connection(self, arg):
        '''
         xpLinkManagerSerdesCloseConnection: Enter [ devId,serdesId/startSerdesId-endSerdesId ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d' % (args[0],args[1]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesCloseConnection(args[0],serdesId)
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                else:
                    pass
    #/********************************************************************************/
    # command for xpLinkManagerSerdesSetCtrlrRunningFlag
    #/********************************************************************************/
    def do_serdes_set_ctrlr_running_flag(self, arg):
        '''
         xpLinkManagerSerdesSetCtrlrRunningFlag: Enter [ devId,serdesId/startSerdesId-endSerdesId,isSerdesCtrlRunning]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId,isSerdesCtrlRunning]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d, isSerdesCtrlRunning=%d' % (args[0],args[1],args[2]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesSetCtrlrRunningFlag(args[0],serdesId,int(args[2]))
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                else:
                    pass
    #/********************************************************************************/
    # command for xpLinkManagerSerdesGetCtrlrRunningFlag
    #/********************************************************************************/
    def do_serdes_get_ctrlr_running_flag(self, arg):
        '''
         xpLinkManagerSerdesGetCtrlrRunningFlag: Enter [ devId,serdesId/startSerdesId-endSerdesId ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            ctrlRunFlag = new_int32_tp()
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d' % (args[0],args[1]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesGetCtrlrRunningFlag(args[0],serdesId, ctrlRunFlag)
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                else:
                    print('ctrlRunFlag = %d for serdesId = %d' % (int32_tp_value(ctrlRunFlag),serdesId))

            delete_int32_tp(ctrlRunFlag)

    #/********************************************************************************/
    # command for xpLinkManagerSerdesGetInterruptRev
    #/********************************************************************************/
    def do_serdes_get_interrupt_rev(self, arg):
        '''
         xpLinkManagerSerdesGetInterruptRev: Enter [ devId,intNum,serdesId/startSerdesId-endSerdesId ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,intNum,serdesId/startSerdesId-endSerdesId ]')
        else:
            args[0] = int(args[0])
            args[1] = int(args[1])
            if '-' in args[2]:
                startIdx = int(args[2].split('-')[0].strip())
                endIdx = int(args[2].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[2] = int(args[2])
                startIdx = args[2]
                endIdx = args[2]
            rev = new_int32_tp()
            #print('Input Arguments are, devId=%d, intNum=0x%x, serdesId/startSerdesId-endSerdesId=%d' % (args[0],args[1],args[2]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesGetInterruptRev(args[0],args[1],serdesId, rev)
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                else:
                    print('rev = %d for serdesId = %d' % (int32_tp_value(rev),serdesId))
                    pass
            delete_int32_tp(rev)

    #/********************************************************************************/
    # command for xpLinkManagerSerdesGetSdrev
    #/********************************************************************************/
    def do_serdes_get_sdrev(self, arg):
        '''
         xpLinkManagerSerdesGetSdrev: Enter [ devId,serdesId/startSerdesId-endSerdesId ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            rev = new_int32_tp()
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d' % (args[0],args[1]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesGetSdrev(args[0],serdesId, rev)
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                else:
                    print('SD rev = %d for serdesId = %d' % (int32_tp_value(rev),serdesId))

            delete_int32_tp(rev)

    #/********************************************************************************/
    # command for xpLinkManagerSerdesInitQuick
    #/********************************************************************************/
    def do_serdes_init_quick(self, arg):
        '''
         xpLinkManagerSerdesInitQuick: Enter [ devId,divider,serdesId/startSerdesId-endSerdesId ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,divider,serdesId/startSerdesId-endSerdesId ]')
        else:
            args[0] = int(args[0])
            args[1] = int(args[1])
            if '-' in args[2]:
                startIdx = int(args[2].split('-')[0].strip())
                endIdx = int(args[2].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[2] = int(args[2])
                startIdx = args[2]
                endIdx = args[2]
            #print('Input Arguments are, devId=%d, divider=%d, serdesId/startSerdesId-endSerdesId=%d' % (args[0],args[1],args[2]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesInitQuick(args[0],args[1],serdesId)
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                else:
                    pass
    #/********************************************************************************/
    # command for xpLinkManagerSerdesResume
    #/********************************************************************************/
    def do_serdes_resume(self, arg):
        '''
         xpLinkManagerSerdesResume: Enter [ devId,initialState,serdesId/startSerdesId-endSerdesId ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,initialState,serdesId/startSerdesId-endSerdesId ]')
        else:
            args[0] = int(args[0])
            args[1] = int(args[1], 16)
            if '-' in args[2]:
                startIdx = int(args[2].split('-')[0].strip())
                endIdx = int(args[2].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[2] = int(args[2])
                startIdx = args[2]
                endIdx = args[2]
            #print('Input Arguments are, devId=%d, initialState=0x%x, serdesId/startSerdesId-endSerdesId=%d' % (args[0],args[1],args[2]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesResume(args[0],args[1],serdesId)
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                else:
                    pass
    #/********************************************************************************/
    # command for xpLinkManagerSerdesHalt
    #/********************************************************************************/
    def do_serdes_halt(self, arg):
        '''
         xpLinkManagerSerdesHalt: Enter [ devId,serdesId/startSerdesId-endSerdesId ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d' % (args[0],args[1]))
            runState = new_int32_tp()
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesHalt(args[0],serdesId, runState)
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                else:
                    print('runState = %d for serdesId = %d' % (int32_tp_value(runState),serdesId))
                    pass
            delete_int32_tp(runState)

    #/********************************************************************************/
    # command for xpLinkManagerSerdesPmdStatus
    #/********************************************************************************/
    def do_serdes_pmd_status(self, arg):
        '''
         xpLinkManagerSerdesPmdStatus: Enter [ devId,serdesId/startSerdesId-endSerdesId ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d' % (args[0],args[1]))
            status = new_int32_tp()
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesPmdStatus(args[0],serdesId, status)
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                else:
                    print('status = %d for serdesId = %d' % (int32_tp_value(status),serdesId))
                    pass
    #/********************************************************************************/
    # command for xpLinkManagerSerdesEyeGradientPlotWrite
    #/********************************************************************************/
    def do_serdes_eye_gradient_plot_write(self, arg):
        '''
         xpLinkManagerSerdesEyeGradientPlotWrite: Enter [ devId,serdesId/startSerdesId-endSerdesId,fileName ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId,fileName ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            fileName = args[2]
            # print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d, fileName=%s' % (args[0],args[1],args[2]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesEyeGradientPlotWrite(args[0],fileName,serdesId)
                err = 0
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                    err = 1
                if err == 0:
                    print('fileName = %s is written for serdesId = %d' % (fileName,serdesId))
                    pass
    #/********************************************************************************/
    # command for xpLinkManagerSerdesSetTxDatapathEncoding
    #/********************************************************************************/
    def do_serdes_set_tx_datapath_encoding(self, arg):
        '''
         xpLinkManagerSerdesSetTxDatapathEncoding: Enter [ devId,grayCode,preCode,serdesId/startSerdesId-endSerdesId ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 4
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,grayCode,preCode,serdesId/startSerdesId-endSerdesId ]')
        else:
            args[0] = int(args[0])
            args[1] = int(args[1])
            args[2] = int(args[2])
            if '-' in args[3]:
                startIdx = int(args[3].split('-')[0].strip())
                endIdx = int(args[3].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[3] = int(args[3])
                startIdx = args[3]
                endIdx = args[3]
            #print('Input Arguments are, devId=%d, grayCode=0x%x, preCode=0x%x, serdesId/startSerdesId-endSerdesId=%d' % (args[0],args[1],args[2],args[3]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesSetTxDatapathEncoding(args[0],args[1],args[2],serdesId)
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                else:
                    pass
    #/********************************************************************************/
    # command for xpLinkManagerSerdesGetTxDatapathEncoding
    #/********************************************************************************/
    def do_serdes_get_tx_datapath_encoding(self, arg):
        '''
         xpLinkManagerSerdesGetTxDatapathEncoding: Enter [ devId,serdesId/startSerdesId-endSerdesId ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId ]')
        else:
            args[0] = int(args[0])
            grayCode_Ptr_1 = new_intp()
            preCode_Ptr_2 = new_intp()
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d' % (args[0],args[1]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesGetTxDatapathEncoding(args[0],grayCode_Ptr_1,preCode_Ptr_2,serdesId)
                err = 0
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                    err = 1
                if err == 0:
                    print('grayCode = %d for serdesId = %d' % (intp_value(grayCode_Ptr_1),serdesId))
                    print('preCode = %d for serdesId = %d' % (intp_value(preCode_Ptr_2),serdesId))
                    pass
            delete_intp(preCode_Ptr_2)
            delete_intp(grayCode_Ptr_1)
    #/********************************************************************************/
    # command for xpLinkManagerSerdesSetRxDatapathEncoding
    #/********************************************************************************/
    def do_serdes_set_rx_datapath_encoding(self, arg):
        '''
         xpLinkManagerSerdesSetRxDatapathEncoding: Enter [ devId,grayCode,preCode,serdesId/startSerdesId-endSerdesId ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 4
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,grayCode,preCode,serdesId/startSerdesId-endSerdesId ]')
        else:
            args[0] = int(args[0])
            args[1] = int(args[1])
            args[2] = int(args[2])
            if '-' in args[3]:
                startIdx = int(args[3].split('-')[0].strip())
                endIdx = int(args[3].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[3] = int(args[3])
                startIdx = args[3]
                endIdx = args[3]
            #print('Input Arguments are, devId=%d, grayCode=0x%x, preCode=0x%x, serdesId/startSerdesId-endSerdesId=%d' % (args[0],args[1],args[2],args[3]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesSetRxDatapathEncoding(args[0],args[1],args[2],serdesId)
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                else:
                    pass
    #/********************************************************************************/
    # command for xpLinkManagerSerdesGetRxDatapathEncoding
    #/********************************************************************************/
    def do_serdes_get_rx_datapath_encoding(self, arg):
        '''
         xpLinkManagerSerdesGetRxDatapathEncoding: Enter [ devId,serdesId/startSerdesId-endSerdesId ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId ]')
        else:
            args[0] = int(args[0])
            grayCode_Ptr_1 = new_intp()
            preCode_Ptr_2 = new_intp()
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d' % (args[0],serdesId))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesGetRxDatapathEncoding(args[0],grayCode_Ptr_1,preCode_Ptr_2,serdesId)
                err = 0
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                    err = 1
                if err == 0:
                    print('grayCode = %d for serdesId = %d' % (intp_value(grayCode_Ptr_1),serdesId))
                    print('preCode = %d for serdesId = %d' % (intp_value(preCode_Ptr_2),serdesId))
                    pass
            delete_intp(preCode_Ptr_2)
            delete_intp(grayCode_Ptr_1)

    #/********************************************************************************/
    # command for xpLinkManagerSerdesGetRxData
    #/********************************************************************************/
    def do_serdes_get_rx_data(self, arg):
        '''
         xpLinkManagerSerdesGetRxData: Enter [ devId,serdesId/startSerdesId-endSerdesId ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            data = [0] * 4
            print('============================================================')
            print(' serdes-Id |  Data[0]  |  Data[1]  |  Data[2]  |  Data[3]  |')
            print('============================================================')
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesGetRxData(args[0], serdesId, data)
                if ret != 0:
                    print('Error : Return Value = %d for serdesId = %d' % (ret,serdesId))
                else:
                    print('    %03d    |  0x%05X  |  0x%05X  |  0x%05X  |  0x%05X  |' % (serdesId, data[0], data[1], data[2], data[3]))
            del data
            print('============================================================')

    #/********************************************************************************/
    # command for xpLinkManagerSerdesGetMediaStatus
    #/********************************************************************************/
    def do_serdes_get_media_status(self, arg):
        '''
         xpLinkManagerSerdesGetMediaStatus: Enter [ devId,serdesId/startSerdesId-endSerdesId ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]

            isConnected = new_uint8_tp()
            print('============================')
            print(' serdes-Id |     status    |')
            print('============================')
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesGetMediaStatus(args[0], serdesId, isConnected)
                if ret == 0:
                    print '    %03d    | %13s |' %(serdesId , '\033[92m    Connected\033[00m' if \
                          (uint8_tp_value(isConnected) == 1) else '\033[91mNot Connected\033[00m')
                else:
                    print '    %03d    |     ERROR=%03d |' %(serdesId, ret)
            print('============================')
            delete_uint8_tp(isConnected)

    #/********************************************************************************/
    # command for xpLinkManagerSerdesGetFrequencyLock
    #/********************************************************************************/
    def do_serdes_get_frequency_lock(self, arg):
        '''
         xpLinkManagerSerdesGetFrequencyLock: Enter [ devId,serdesId/startSerdesId-endSerdesId ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            frequencyLock = new_int32_tp()
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d' % (args[0],args[1]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesGetFrequencyLock(args[0],serdesId, frequencyLock)
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                else:
                    print('frequencyLock = %d for serdesId = %d' % (int32_tp_value(frequencyLock),serdesId))
                    pass
            delete_int32_tp(frequencyLock)
    #/********************************************************************************/
    # command for xpLinkManagerSerdesGetSignalOkLive
    #/********************************************************************************/
    def do_serdes_get_signal_ok_live(self, arg):
        '''
         xpLinkManagerSerdesGetSignalOkLive: Enter [ devId,serdesId/startSerdesId-endSerdesId ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            isLive = new_int32_tp()
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d' % (args[0],args[1]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesGetSignalOkLive(args[0],serdesId,isLive)
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                else:
                    print('Signal status = %d for serdesId = %d' % (int32_tp_value(isLive),serdesId))
                    pass
            delete_int32_tp(isLive)
    #/********************************************************************************/
    # command for xpLinkManagerSerdesGetErrorFlag
    #/********************************************************************************/
    def do_serdes_get_error_flag(self, arg):
        '''
         xpLinkManagerSerdesGetErrorFlag: Enter [ devId,reset,serdesId/startSerdesId-endSerdesId ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,reset,serdesId/startSerdesId-endSerdesId ]')
        else:
            args[0] = int(args[0])
            args[1] = int(args[1])
            if '-' in args[2]:
                startIdx = int(args[2].split('-')[0].strip())
                endIdx = int(args[2].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[2] = int(args[2])
                startIdx = args[2]
                endIdx = args[2]
            #print('Input Arguments are, devId=%d, reset=0x%x, serdesId/startSerdesId-endSerdesId=%d' % (args[0],args[1],args[2]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesGetErrorFlag(args[0],args[1],serdesId)
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                else:
                    pass
    #/********************************************************************************/
    # command for xpLinkManagerSerdesEnableCoreToControl
    #/********************************************************************************/
    def do_serdes_enable_core_to_control(self, arg):
        '''
         xpLinkManagerSerdesEnableCoreToControl: Enter [ devId,txRxEnable,lowPowerEnable,serdesId/startSerdesId-endSerdesId ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 4
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,txRxEnable,lowPowerEnable,serdesId/startSerdesId-endSerdesId ]')
        else:
            args[0] = int(args[0])
            args[1] = int(args[1])
            args[2] = int(args[2])
            if '-' in args[3]:
                startIdx = int(args[3].split('-')[0].strip())
                endIdx = int(args[3].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[3] = int(args[3])
                startIdx = args[3]
                endIdx = args[3]
            #print('Input Arguments are, devId=%d, txRxEnable=0x%x, lowPowerEnable=0x%x, serdesId/startSerdesId-endSerdesId=%d' % (args[0],args[1],args[2],args[3]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesEnableCoreToControl(args[0],args[1],args[2],serdesId)
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                else:
                    pass
    #/********************************************************************************/
    # command for xpLinkManagerSerdesAddrInit
    #/********************************************************************************/
    def do_serdes_addr_init(self, arg):
        '''
         xpLinkManagerSerdesAddrInit: Enter [ devId,serdesId/startSerdesId-endSerdesId ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId ]')
        else:
            args[0] = int(args[0])
            addrStruct_Ptr_1 = new_xpSerdesAddr_tp(1)
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d' % (args[0],serdesId))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesAddrInit(args[0],addrStruct_Ptr_1,serdesId)
                err = 0
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                    err = 1
                if err == 0:
                    print('xpSerdesAddr.chip = %d for serdesId = %d' % (xpSerdesAddr_tp_getitem(addrStruct_Ptr_1, 0).chip,serdesId))
                    print('xpSerdesAddr.ring = %d for serdesId = %d' % (xpSerdesAddr_tp_getitem(addrStruct_Ptr_1, 0).ring,serdesId))
                    print('xpSerdesAddr.sbus = %d for serdesId = %d' % (xpSerdesAddr_tp_getitem(addrStruct_Ptr_1, 0).sbus,serdesId))
                    print('xpSerdesAddr.lane = %d for serdesId = %d' % (xpSerdesAddr_tp_getitem(addrStruct_Ptr_1, 0).lane,serdesId))
                    pass
            delete_xpSerdesAddr_tp(addrStruct_Ptr_1)
    #/********************************************************************************/
    # command for xpLinkManagerSerdesSensorStartTemperature
    #/********************************************************************************/
    def do_serdes_sensor_start_temperature(self, arg):
        '''
         xpLinkManagerSerdesSensorStartTemperature: Enter [ devId,serdesId/startSerdesId-endSerdesId ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d' % (args[0],args[1]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesSensorStartTemperature(args[0],serdesId)
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                else:
                    pass
    #/********************************************************************************/
    # command for xpLinkManagerSerdesSensorWaitTemperature
    #/********************************************************************************/
    def do_serdes_sensor_wait_temperature(self, arg):
        '''
         xpLinkManagerSerdesSensorWaitTemperature: Enter [ devId,serdesId/startSerdesId-endSerdesId ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            temp = new_int32_tp()
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d' % (args[0],args[1]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesSensorWaitTemperature(args[0],serdesId, temp)
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                else:
                    print('Temperature = %d for serdesId = %d' % (int32_tp_value(temp),serdesId))
                    pass
            delete_int32_tp(temp)
    #/********************************************************************************/
    # command for xpLinkManagerSerdesSensorGetVoltage
    #/********************************************************************************/
    def do_serdes_sensor_get_voltage(self, arg):
        '''
         xpLinkManagerSerdesSensorGetVoltage: Enter [ devId,sensor/startSensor-endSensor ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,sensor/startSensor-endSensor ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            mVolt = new_int32_tp()
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d' % (args[0],args[1]))
            for sensor in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesSensorGetVoltage(args[0],sensor, mVolt)
                if ret != 0:
                    print('Sensor %d voltage is Invalid (err=%d)' % (sensor, ret))
                else:
                    mV = int32_tp_value(mVolt)
                    if mV > 0 :
                        print('Sensor %d Voltage %d.%03d V' % (sensor, mV/1000, mV%1000))
                    else:
                        print('Sensor %d Voltage %d.%03d V' % (sensor, mV/1000, -1 * mV%1000))
                    pass
            delete_int32_tp(mVolt)
    #/********************************************************************************/
    # command for xpLinkManagerSerdesSensorStartVoltage
    #/********************************************************************************/
    def do_serdes_sensor_start_voltage(self, arg):
        '''
         xpLinkManagerSerdesSensorStartVoltage: Enter [ devId,serdesId/startSerdesId-endSerdesId ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d' % (args[0],args[1]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesSensorStartVoltage(args[0],serdesId)
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                else:
                    pass
    #/********************************************************************************/
    # command for xpLinkManagerSerdesSensorWaitVoltage
    #/********************************************************************************/
    def do_serdes_sensor_wait_voltage(self, arg):
        '''
         xpLinkManagerSerdesSensorWaitVoltage: Enter [ devId,serdesId/startSerdesId-endSerdesId ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            mVolt = new_int32_tp()
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d' % (args[0],args[1]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesSensorWaitVoltage(args[0],serdesId,mVolt)
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                else:
                    print('mVolt = %d for serdesId = %d' % (int32_tp_value(mVolt),serdesId))
                    pass
            delete_int32_tp(mVolt)
    #/********************************************************************************/
    # command for xpLinkManagerSerdesBroadcastIntWMask
    #/********************************************************************************/
    def do_serdes_broadcast_int_w_mask(self, arg):
        '''
         xpLinkManagerSerdesBroadcastIntWMask: Enter [ devId,serdesId/startSerdesId-endSerdesId,addrMask,intNum,param,args ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 6
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId,addrMask,intNum,param,args ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            args[3] = int(args[3])
            args[4] = int(args[4])
            varArgs = new_intArr(len(args)-5)
            for index in range(len(args)-5):
                intArr_setitem(varArgs, index, int(args[5+index]))
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d, addrMask=0x%x, intNum=0x%x, param=0x%x, args=0x%x' % (args[0],args[1],args[2],args[3],args[4],args[5]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesBroadcastIntWMask(args[0],serdesId,args[2],args[3],args[4],len(args)-5, varArgs)
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                else:
                    pass
            delete_intArr(varArgs)
    #/********************************************************************************/
    # command for xpLinkManagerSerdesBroadcastInt
    #/********************************************************************************/
    def do_serdes_broadcast_int(self, arg):
        '''
         xpLinkManagerSerdesBroadcastInt: Enter [ devId,serdesId/startSerdesId-endSerdesId,intNum,param,args ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 5
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId,intNum,param,args ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            args[3] = int(args[3])
            varArgs = new_intArr(len(args)-4)
            for index in range(len(args)-4):
                intArr_setitem(varArgs, index, int(args[4+index]))
            #print('Input Arguments are, devId=%d, serdesId/startSerdesId-endSerdesId=%d, intNum=0x%x, param=0x%x, args=0x%x' % (args[0],args[1],args[2],args[3],args[4]))
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesBroadcastInt(args[0],serdesId,args[2],args[3],len(args)-4,varArgs)
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                else:
                    pass
            delete_intArr(varArgs)

    #/********************************************************************************/
    # command for xpLinkManagerPortGroupInitWithLinkStatusControl
    #/********************************************************************************/
    def do_port_group_init_with_link_status_control(self, arg):
        '''
         xpLinkManagerPortGroupInitWithLinkStatusControl: Enter [ devId,ptgNum/startPtg-endPtg,speedMode,initSerdes,fecMode,enableFEC,keepPortDown ]
            print('Valid ptgNum are: 0 to 31')
            Valid speedMode are: 1x100G, 1x40G, 2x40G, 2x50G, 1x50G, 4x10G, 4x25G, MIXED_MODE_10G, SGMII, 1000BASE_R, MIXED_MODE_SGMII, MIXED_MODE_1000BASE_R
            Valid FEC mode: RS, FC
            keepPortDown : when 1 it will keep the port status as down upon PTG init.
        '''
        args = re.split(';| ',arg)
        numArgsReq = 7
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId, ptgNum/startPtg-endPtg, speedMode, initSerdes, fecMode, enableFEC, keepPortDown ]')
            print('Valid ptgNum are: 0 to 31')
            print('Valid speedMode are: 1x100G, 1x40G, 2x40G, 2x50G, 1x50G, 4x10G, 4x25G, MIXED_MODE_10G, SGMII, 1000BASE_R, MIXED_MODE_SGMII, MIXED_MODE_1000BASE_R')
            print('Valid FECMode are: RS, FC')
            print('keepPortDown : when 1 it will keep the port status as down upon PTG init.')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startPtg = int(args[1].split('-')[0].strip())
                endPtg = int(args[1].split('-')[1].strip())
                if startPtg > endPtg or endPtg > 31:
                    print('Invalid input, Enter [ devId,ptgNum/startPtg-endPtg,speedMode,initSerdes, fecMode, enableFEC, keepPortDown')
                    print('Valid ptgNum are: 0 to 31')
                    print('Valid speedMode are: 1x100G, 1x40G, 2x40G, 2x50G, 1x50G, 4x10G, 4x25G, MIXED_MODE_10G, SGMII, 1000BASE_R, MIXED_MODE_SGMII, MIXED_MODE_1000BASE_R')
                    print('Valid FECMode are: RS, FC')
                    print('keepPortDown : when 1 it will keep the port status as down upon PTG init.')
                    return
            else:
                args[1] = int(args[1])
                startPtg = args[1]
                endPtg = args[1]
            sgmiiSpeed = 9
            if (args[2] == '1x100G') :
                macMode = eval('MAC_MODE_1X100GB')
            elif (args[2] == '1x40G') :
                macMode = eval('MAC_MODE_1X40GB')
            elif (args[2] == '1x50G') :
                macMode = eval('MAC_MODE_1X50GB')
            elif (args[2] == '2x40G') :
                macMode = eval('MAC_MODE_2X40GB')
            elif (args[2] == '2x50G') :
                macMode = eval('MAC_MODE_2X50GB')
            elif (args[2] == '4x10G') :
                macMode = eval('MAC_MODE_4X10GB')
            elif (args[2] == '4x25G') :
                macMode = eval('MAC_MODE_4X25GB')
            elif (args[2] == 'MIXED_MODE_10G') :
                macMode = eval('MAC_MODE_MIX_4_CHANNEL_10G')
            elif (args[2] == '4x1G') :
                macMode = eval('MAC_MODE_4X1GB')
            elif (args[2] == '1000BASE_R') :
                macMode = eval('MAC_MODE_1000BASE_R')
            elif (args[2] == 'MIXED_MODE_SGMII') :
                macMode = eval('MAC_MODE_MIX_SGMII')
                sgmiiSpeed = 2
            elif (args[2] == 'MIXED_MODE_1000BASE_R') :
                macMode = eval('MAC_MODE_MIX_1000BASE_R')
            else :
                print('Invalid speedMode provided')
                return
            initSerdes = int(args[3])
            enableFEC = int(args[5])
            keepPortDown = int(args[6])
            prbsTestMode = 0
            firmwareUpload = 0

            if enableFEC :
                if (args[4] == 'RS') :
                    fecMode = eval('RS_FEC_MODE')
                elif (args[4] == 'FC') :
                    fecMode = eval('FC_FEC_MODE')
                else :
                    print('Invalid FECMode provided')
                    return
            else:
                fecMode = eval('MAX_FEC_MODE')

            for ptgNum in range(startPtg,endPtg+1):
                ret = xpLinkManagerPortGroupInitWithLinkStatusControl(args[0],ptgNum,macMode,sgmiiSpeed,initSerdes,prbsTestMode,firmwareUpload, fecMode, enableFEC, keepPortDown)
                if ret != 0:
                    print('Return Value = %d for ptgNum = %d' % (ret,ptgNum))
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerLinkStatusOverrideGet
    #/********************************************************************************/
    def do_link_status_override_get(self, arg):
        '''
         xpLinkManagerLinkStatusOverrideGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            status = new_uint8_tp()
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    ret = xpLinkManagerLinkStatusOverrideGet(args[0],portNum,status)
                    if ret != 0:
                        print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('status = %d for portNum = %d' % (uint8_tp_value(status),portNum))
                else:
                    print('Return Value = %d for portNum = %d' % (ret,portNum))
                    pass
            delete_uint8_tp(status)
            delete_uint8_tp(valid_Ptr)

    #/********************************************************************************/
    # command for xpLinkManagerLinkStatusOverride
    #/********************************************************************************/
    def do_link_status_override(self, arg):
        '''
         xpLinkManagerLinkStatusOverride: Enter [ devId,portNum/startPort-endPort,value ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,value ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2], 16)
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, value=0x%x' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                ret = xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if ret != 0:
                    print('Return Value = %d for portNum = %d' % (ret,portNum))
                    continue
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerLinkStatusOverride(args[0],portNum,args[2])
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('portNum %d is not initialized' % (portNum))
                else:
                    pass
            delete_uint8_tp(valid_Ptr)

    #/********************************************************************************/
    # command for xpLinkManagerFaultStatusOverrideGet
    #/********************************************************************************/
    def do_fault_status_override_get(self, arg):
        '''
         xpLinkManagerFaultStatusOverrideGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            status = new_uint8_tp()
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    ret = xpLinkManagerFaultStatusOverrideGet(args[0],portNum,status)
                    if ret != 0:
                        print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('status = %d for portNum = %d' % (uint8_tp_value(status),portNum))
                else:
                    print('Return Value = %d for portNum = %d' % (ret,portNum))
                    pass
            delete_uint8_tp(status)
            delete_uint8_tp(valid_Ptr)

    #/********************************************************************************/
    # command for xpLinkManagerFaultStatusOverride
    #/********************************************************************************/
    def do_fault_status_override(self, arg):
        '''
         xpLinkManagerFaultStatusOverride: Enter [ devId,portNum/startPort-endPort,value ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,value ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2], 16)
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, value=0x%x' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                ret = xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if ret != 0:
                    print('Return Value = %d for portNum = %d' % (ret,portNum))
                    continue
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerFaultStatusOverride(args[0],portNum,args[2])
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('portNum %d is not initialized' % (portNum))
                else:
                    pass
            delete_uint8_tp(valid_Ptr)

    #/********************************************************************************/
    # command for xpLinkManagerElectricalIdleThresholdSet
    #/********************************************************************************/
    def do_serdes_electrical_idle_threshold_set(self, arg):
        '''
         xpLinkManagerElectricalIdleThresholdSet: Enter [ devId,serdesId/startSerdesId-endSerdesId,eiThreshold]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId,eiThreshold ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            intstatus_Ptr_3 = new_uint32_tp()
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerElectricalIdleThresholdSet(args[0],serdesId,args[2],intstatus_Ptr_3)
                err = 0
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                    err = 1
                if err == 0:
                    print('intstatus = %d for serdesId = %d' % (uint32_tp_value(intstatus_Ptr_3),serdesId))
                    pass
            delete_uint32_tp(intstatus_Ptr_3)

    #/********************************************************************************/
    # command for xpLinkManagerPmroMetricGet
    #/********************************************************************************/
    def do_serdes_pmro_metric_get(self, arg):
        '''
         xpLinkManagerPmroMetricGet: Enter [ devId,serdesId/startSerdesId-endSerdesId]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            pmroMetric_ptr = new_uint32_tp()
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerPmroMetricGet(args[0],serdesId,pmroMetric_ptr)
                err = 0
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                    err = 1
                if err == 0:
                    print('pmroMetric = %d for serdesId = %d' % (uint32_tp_value(pmroMetric_ptr),serdesId))
                    pass
            delete_uint32_tp(pmroMetric_ptr)

    #/********************************************************************************/
    # command for xpLinkManagerSerdesDfeStatusGet
    #/********************************************************************************/
    def do_serdes_dfe_status_get(self, arg):
        '''
         xpLinkManagerSerdesDfeStatusGet: Enter [ devId,serdesId/startSerdesId-endSerdesId]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            dfeStatus_ptr = new_int32_tp()
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesDfeStatusGet(args[0],serdesId,dfeStatus_ptr)
                err = 0
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                    err = 1
                if err == 0:
                    print('dfeStatus = %d for serdesId = %d' % (int32_tp_value(dfeStatus_ptr),serdesId))
                    pass
            delete_int32_tp(dfeStatus_ptr)

    #/********************************************************************************/
    # command for xpLinkManagerSerdesDfeStateGet
    #/********************************************************************************/
    def do_serdes_dfe_state_get(self, arg):
        '''
         xpLinkManagerSerdesDfeStateGet: Enter [ devId,serdesId/startSerdesId-endSerdesId]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId/startSerdesId-endSerdesId ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            dfeState_ptr = new_xpSerdesDfeState_tp()
            for serdesId in range(startIdx,endIdx+1):
                ret = xpLinkManagerSerdesDfeStateGet(args[0],serdesId,dfeState_ptr)
                err = 0
                if ret != 0:
                    print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                    err = 1
                if err == 0:
                    ret = xpLinkManagerSerdesDfeStatePrint(args[0],serdesId,dfeState_ptr,0)
                    err = 0
                    if ret != 0:
                        print('Return Value = %d for serdesId = %d' % (ret,serdesId))
                        err = 1
                    if err == 0:
                        pass
            delete_xpSerdesDfeState_tp(dfeState_ptr)

    #/********************************************************************************/
    # command for xpLinkManagerSerdesEyeDataReadPhase
    #/********************************************************************************/
    def do_serdes_eye_data_read_phase(self, arg):
        '''
         xpLinkManagerSerdesEyeDataReadPhase: Enter [ devId,serdesId,fileName ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId,fileName ]')
        else:
            args[0] = int(args[0])
            args[1] = int(args[1])
            args[2] = str(args[2])
            readPhaseVal_Ptr_3 = new_int32_tp()
            #print('Input Arguments are, devId=%d, serdesId=%d, Filename=%s' % (args[0],args[1],args[2]))
            ret = xpLinkManagerSerdesEyeDataReadPhase(args[0],args[1],args[2],readPhaseVal_Ptr_3)
            if ret != 0:
                print('Return Value = %d' % (ret))
            else:
                print('Serdes eye data read phase value = %d' % (int32_tp_value(readPhaseVal_Ptr_3)))

    #/********************************************************************************/
    # command for xpLinkManagerSerdesDfeLos
    #/********************************************************************************/
    def do_serdes_dfe_los(self, arg):
        '''
         xpLinkManagerSerdesDfeLos: Enter [ devId,serdesId ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,serdesId ]')
        else:
            args[0] = int(args[0])
            args[1] = int(args[1])
            dfeLosVal_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, serdesId=%d' % (args[0],args[1]))
            ret = xpLinkManagerSerdesDfeLos(args[0],args[1],dfeLosVal_Ptr_2)
            if ret == 0:
                if ((uint8_tp_value(dfeLosVal_Ptr_2)) == 0):
                    print('dfe LOS is not detected')
                else:
                    print('dfe LOS is detected')
            else:
                print('Return Value = %d' % (ret))

    #/********************************************************************************/
    # command for xpLinkManagerSetRecoveredClock
    #/********************************************************************************/
    def do_rcvrd_clock_enable(self, arg):
        '''
        xpLinkManagerRcvrdClockEnable: [devId, portNum/startPort-endPort]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            for portNum in range(startIdx,endIdx+1):
                ret = xpLinkManagerRcvrdClockEnable(args[0],portNum)
                if ret != 0:
                    print('Return Value = %d for portNum = %d' % (ret,portNum))
                else:
                    pass
    #/********************************************************************************/
    # command for xpLinkManagerMacCustomAlignmentMarkerLenSet
    #/********************************************************************************/
    def do_custom_am_len_set(self, arg):
        '''
         xpLinkManagerMacCustomAlignmentMarkerLenSet: Enter [ devId,portNum/startPort-endPort,value ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,value ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
           # print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, value=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerMacCustomAlignmentMarkerLenSet(args[0],portNum,args[2])
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
   #/********************************************************************************/
    # command for xpLinkManagerMacCustomAlignmentMarkerLenGet
    #/********************************************************************************/
    def do_custom_am_len_get(self, arg):
        '''
         xpLinkManagerMacCustomAlignmentMarkerLenGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            value_Ptr_2 = new_uint32_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerMacCustomAlignmentMarkerLenGet(args[0],portNum,value_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('value = %d' % (uint32_tp_value(value_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint32_tp(value_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerRsFecProgAmpLockLenSet
    #/********************************************************************************/
    def do_rsfec_prog_amp_lock_len_set(self, arg):
        '''
         xpLinkManagerRsFecProgAmpLockLenSet: Enter [ devId,portNum/startPort-endPort,value ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,value ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, value=0x%x' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerRsFecProgAmpLockLenSet(args[0],portNum,args[2])
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
   #/********************************************************************************/
    # command for xpLinkManagerRsFecProgAmpLockLenGet
    #/********************************************************************************/
    def do_rsfec_prog_amp_lock_len_get(self, arg):
        '''
         xpLinkManagerRsFecProgAmpLockLenGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            value_Ptr_2 = new_uint32_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerRsFecProgAmpLockLenGet(args[0],portNum,value_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('value = %d' % (uint32_tp_value(value_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
			print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint32_tp(value_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerRsFecProgCwAmpLenSet
    #/********************************************************************************/
    def do_rs_fec_prog_cw_amp_len_set(self, arg):
        '''
         xpLinkManagerRsFecProgCwAmpLenSet: Enter [ devId,portNum/startPort-endPort,value ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,value ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, value=0x%x' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerRsFecProgCwAmpLenSet(args[0],portNum,args[2])
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
    #/********************************************************************************/
    # command for xpLinkManagerRsFecProgCwAmpLenGet
    #/********************************************************************************/
    def do_rs_fec_prog_cw_amp_len_get(self, arg):
        '''
         xpLinkManagerRsFecProgCwAmpLenGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            value_Ptr_2 = new_uint16_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerRsFecProgCwAmpLenGet(args[0],portNum,value_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('value = %d' % (uint16_tp_value(value_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
 			print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint16_tp(value_Ptr_2)
    #/********************************************************************************/
    # command for xpLinkManagerSerdesRxLaneRemapSet
    #/********************************************************************************/
    def do_serdes_rx_lane_remap_set(self, arg):
        '''
         xpLinkManagerSerdesRxLaneRemapSet: Enter [ devId,portNum/startPort-endPort,laneNum, serdesLaneNum ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 4
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,laneNum,serdesLaneNum ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            args[3] = int(args[3])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, laneNum=0x%x' % (args[0],args[1],args[3]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerSerdesRxLaneRemapSet(args[0],portNum,args[2],args[3])
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
    #/********************************************************************************/
    # command for xpLinkManagerSerdesRxLaneRemapGet
    #/********************************************************************************/
    def do_serdes_rx_lane_remap_get(self, arg):
        '''
         xpLinkManagerSerdesRxLaneRemapGet: Enter [ devId,portNum/startPort-endPort,LaneNum ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,laneNum ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
		args[2] = int(args[2])
            value_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerSerdesRxLaneRemapGet(args[0],portNum,args[2],value_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('serdes number associated with PCS Rx lane %d = %d' %(args[2],(uint8_tp_value(value_Ptr_2))))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
 			print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(value_Ptr_2)
    #/********************************************************************************/
    # command for xpLinkManagerSerdesTxLaneRemapSet
    #/********************************************************************************/
    def do_serdes_tx_lane_remap_set(self, arg):
        '''
         xpLinkManagerSerdesTxLaneRemapSet: Enter [ devId,portNum/startPort-endPort,laneNum, serdesLaneNum ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 4
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,laneNum,serdesLaneNum ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            args[3] = int(args[3])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, laneNum=0x%x' % (args[0],args[1],args[3]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerSerdesTxLaneRemapSet(args[0],portNum,args[2],args[3])
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
    #/********************************************************************************/
    # command for xpLinkManagerSerdesTxLaneRemapGet
    #/********************************************************************************/
    def do_serdes_tx_lane_remap_get(self, arg):
        '''
         xpLinkManagerSerdesTxLaneRemapGet: Enter [ devId,portNum/startPort-endPort,LaneNum ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,laneNum ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
		args[2] = int(args[2])
            value_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerSerdesTxLaneRemapGet(args[0],portNum,args[2],value_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('serdes number associated with PCS Tx lane %d = %d' %(args[2],(uint8_tp_value(value_Ptr_2))))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
 			print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                        pass
                delete_uint8_tp(value_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerRsFecAlwaysUseClause49EnableGet
    #/********************************************************************************/
    def do_rs_fec_always_use_clause_enable_get(self, arg):
        '''
         xpLinkManagerRsFecAlwaysUseClause49EnableGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            enable_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerRsFecAlwaysUseClause49EnableGet(args[0],portNum,enable_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('enable = %d ' % (uint8_tp_value(enable_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(enable_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerRsFecAlwaysUseClause49EnableSet
    #/********************************************************************************/
    def do_rs_fec_always_use_clause_enable_set(self, arg):
        '''
         xpLinkManagerRsFecAlwaysUseClause49EnableSet: Enter [ devId,portNum/startPort-endPort,enable ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,enable ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, enable=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerRsFecAlwaysUseClause49EnableSet(args[0],portNum,args[2])
                        if ret !=0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
    #/********************************************************************************/
    # command for xpLinkManagerRsFecNeverUseClause49EnableGet
    #/********************************************************************************/
    def do_rs_fec_never_use_clause_enable_get(self, arg):
        '''
         xpLinkManagerRsFecNeverUseClause49EnableSet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            enable_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerRsFecNeverUseClause49EnableGet(args[0],portNum,enable_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('enable = %d ' % (uint8_tp_value(enable_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(enable_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerRsFecNeverUseClause49EnableSet
    #/********************************************************************************/
    def do_rs_fec_never_use_clause_enable_set(self, arg):
        '''
         xpLinkManagerRsFecNeverUseClause49EnableSet: Enter [ devId,portNum/startPort-endPort,enable ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,enable ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, enable=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerRsFecNeverUseClause49EnableSet(args[0],portNum,args[2])
                        if ret !=0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
    #/********************************************************************************/
    # command for xpLinkManagerRsFecPcsScramblerEnableGet
    #/********************************************************************************/
    def do_rs_fec_pcs_scrambler_enable_get(self, arg):
        '''
         xpLinkManagerRsFecPcsScramblerEnableSet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            enable_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerRsFecPcsScramblerEnableGet(args[0],portNum,enable_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('enable = %d ' % (uint8_tp_value(enable_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(enable_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerRsFecPcsScramblerEnableSet
    #/********************************************************************************/
    def do_rs_fec_pcs_scrambler_enable_set(self, arg):
        '''
         xpLinkManagerRsFecPcsScramblerEnableSet: Enter [ devId,portNum/startPort-endPort,enable ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,enable ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, enable=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerRsFecPcsScramblerEnableSet(args[0],portNum,args[2])
                        if ret !=0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
    #/********************************************************************************/
    # command for xpLinkManagerRsFecMlgScramblerEnableGet
    #/********************************************************************************/
    def do_rs_fec_mlg_scrambler_enable_get(self, arg):
        '''
         xpLinkManagerRsFecMlgScramblerEnableGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            enable_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerRsFecMlgScramblerEnableGet(args[0],portNum,enable_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('enable = %d ' % (uint8_tp_value(enable_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
            delete_uint8_tp(enable_Ptr_2)

    #/********************************************************************************/
    # command for xpLinkManagerRsFecMlgScramblerEnableSet
    #/********************************************************************************/
    def do_rs_fec_mlg_scrambler_enable_set(self, arg):
        '''
         xpLinkManagerRsFecMlgScramblerEnableSet: Enter [ devId,portNum/startPort-endPort,enable ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,enable ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, enable=%d' % (args[0],args[1],args[2]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerRsFecMlgScramblerEnableSet(args[0],portNum,args[2])
                        if ret !=0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
    #/********************************************************************************/
    # command for xpLinkManagerAppFifoPortMapSet
    #/********************************************************************************/
    def do_app_fifo_port_map_set(self, arg):
        '''
         xpLinkManagerAppFifoPortMapSet: Enter [ devId,portNum/startPort-endPort,value ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort,value ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            args[2] = int(args[2])
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d, channelNum=0x%x' % (args[0],args[1],args[3]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerAppFifoPortMapSet(args[0],portNum,args[2])
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
                        print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                    pass
    #/********************************************************************************/
    # command for xpLinkManagerAppFifoPortMapGet
    #/********************************************************************************/
    def do_app_fifo_port_map_get(self, arg):
        '''
         xpLinkManagerAppFifoPortMapGet: Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            value_Ptr_2 = new_uint8_tp()
            #print('Input Arguments are, devId=%d, portNum/startPort-endPort=%d' % (args[0],args[1]))
            valid_Ptr = new_uint8_tp()
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerIsPortNumValid(args[0],portNum,valid_Ptr)
                if((uint8_tp_value(valid_Ptr))):
                    if(xpLinkManagerIsPortInited(args[0],portNum) == 0):
                        ret = xpLinkManagerAppFifoPortMapGet(args[0],portNum,value_Ptr_2)
                        err = 0
                        if ret != 0:
                            print('Return Value = %d for portNum = %d' % (ret,portNum))
                            err = 1
                        if err == 0:
                            print('============================')
                            print('Port %d:' % (portNum))
                            print('============================')
                            print('Value= %d' %(uint8_tp_value(value_Ptr_2)))
                            print('')
                    else:
                        print('============================')
                        print('Port %d:' % (portNum))
                        print('============================')
 			print('portNum %d is not initialized' % (portNum))
                        print('')
                else:
                        pass
                delete_uint8_tp(value_Ptr_2)

    #/********************************************************************************/
    # command to print AN_LT Port Info
    #/********************************************************************************/
    def do_print_an_lt_port_info(self, arg):
        '''
         print an_lt state get : Enter [ devId,portNum/startPort-endPort ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,portNum/startPort-endPort ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            for portNum in range(startIdx,endIdx+1):
                xpLinkManagerPrintPortANLtInfo(args[0],portNum)
        pass

    #/********************************************************************************/
    # command for xpLinkManagerTv80InitMem
    #/********************************************************************************/
    def do_tv80_init_mem(self, arg):
        '''
         xpLinkManagerTv80InitMem: Enter [ devId,ptgNum/startPtg-endPtg,enable ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,ptgNum/startPtg-endPtg,enable ]')
        else:
            args[0] = int(args[0])
            args[2] = int(args[2])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            for ptgNum in range(startIdx,endIdx+1):
                ret = xpLinkManagerTv80InitMem(args[0], ptgNum, args[2])
                if ret != 0:
                    print('Return Value = %d for ptgNum = %d' % (ret,ptgNum))
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerTv80Enable
    #/********************************************************************************/
    def do_tv80_enable(self, arg):
        '''
         xpLinkManagerTv80Enable: Enter [ devId,ptgNum/startPtg-endPtg,enable ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,ptgNum/startPtg-endPtg,enable ]')
        else:
            args[0] = int(args[0])
            args[2] = int(args[2])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            for ptgNum in range(startIdx,endIdx+1):
                ret = xpLinkManagerTv80Enable(args[0], ptgNum, args[2])
                if ret != 0:
                    print('Return Value = %d for ptgNum = %d' % (ret,ptgNum))
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerTv80LoadUcode
    #/********************************************************************************/
    def do_tv80_load_ucode(self, arg):
        '''
         xpLinkManagerTv80LoadUcode: Enter [ devId,ptgNum,ucodeMemFile ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,ptgNum,ucodeMemFile ]')
        else:
            args[0] = int(args[0])
            args[1] = int(args[1])
            args[2] = args[2].strip()
            ret = xpLinkManagerTv80LoadUcode(args[0],args[1], args[2])
            if ret != 0:
                print('Return Value = %d for ptgNum = %d' % (ret,ptgNum))
            else:
                pass

    #/********************************************************************************/
    # command for xpLinkManagerTv80RunFirmware
    #/********************************************************************************/
    def do_tv80_run_firmware(self, arg):
        '''
         xpLinkManagerTv80RunFirmware: Enter [ devId,ptgNum/startPtg-endPtg,ucodeMemFile ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,ptgNum/startPtg-endPtg,ucodeMemFile ]')
        else:
            args[0] = int(args[0])
            args[2] = args[2].strip()
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            for ptgNum in range(startIdx,endIdx+1):
                ret = xpLinkManagerTv80RunFirmware(args[0], ptgNum, args[2])
                if ret != 0:
                    print('Return Value = %d for ptgNum = %d' % (ret,ptgNum))
                else:
                    pass

    #/********************************************************************************/
    # command for xpLinkManagerTv80SetPortEnable
    #/********************************************************************************/
    def do_tv80_set_port_enable(self, arg):
        '''
         xpLinkManagerTv80SetPortEnable: Enter [ devId,ptgNum/startPtg-endPtg,chNum/startChNum-endChNum,enable ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 4
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,ptgNum/startPtg-endPtg,chNum/startChNum-endChNum,enable ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range ptgNum')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            if '-' in args[2]:
                startIdx1 = int(args[2].split('-')[0].strip())
                endIdx1 = int(args[2].split('-')[1].strip())
                if startIdx1 > endIdx1:
                    print('Improper Range ChNum')
                    return
            else:
                args[2] = int(args[2])
                startIdx1 = args[2]
                endIdx1 = args[2]
            args[3] = int(args[3])
            for ptgNum in range(startIdx,endIdx+1):
                for chNum in range(startIdx1,endIdx1+1):
                    ret = xpLinkManagerTv80SetPortEnable(args[0], ptgNum, chNum, args[3])
                    if ret != 0:
                        print('Return Value = %d for ptgNum = %d ChNum = %d' % (ret,ptgNum, chNum))
                    else:
                        pass

    #/********************************************************************************/
    # command for xpLinkManagerTv80SetANLTEnable
    #/********************************************************************************/
    def do_tv80_set_port_anlt_enable(self, arg):
        '''
         xpLinkManagerTv80SetANLTEnable: Enter [ devId,ptgNum/startPtg-endPtg,chNum/startChNum-endChNum,enable ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 4
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,ptgNum/startPtg-endPtg,chNum/startChNum-endChNum,enable ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range ptgNum')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            if '-' in args[2]:
                startIdx1 = int(args[2].split('-')[0].strip())
                endIdx1 = int(args[2].split('-')[1].strip())
                if startIdx1 > endIdx1:
                    print('Improper Range ChNum')
                    return
            else:
                args[2] = int(args[2])
                startIdx1 = args[2]
                endIdx1 = args[2]
            args[3] = int(args[3])
            for ptgNum in range(startIdx,endIdx+1):
                for chNum in range(startIdx1,endIdx1+1):
                    ret = xpLinkManagerTv80SetANLTEnable(args[0], ptgNum, chNum, args[3])
                    if ret != 0:
                        print('Return Value = %d for ptgNum = %d ChNum = %d' % (ret,ptgNum, chNum))
                    else:
                        pass

    #/********************************************************************************/
    # command for xpLinkManagerTv80DbgPortInfo
    #/********************************************************************************/
    def do_tv80_debug_port_info(self, arg):
        '''
         xpLinkManagerTv80DbgPortInfo: Enter [ devId,ptgNum/startPtg-endPtg,chNum/startChNum-endChNum ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,ptgNum/startPtg-endPtg,chNum/startChNum-endChNum ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range ptgNum')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            if '-' in args[2]:
                startIdx1 = int(args[2].split('-')[0].strip())
                endIdx1 = int(args[2].split('-')[1].strip())
                if startIdx1 > endIdx1:
                    print('Improper Range ChNum')
                    return
            else:
                args[2] = int(args[2])
                startIdx1 = args[2]
                endIdx1 = args[2]
            for ptgNum in range(startIdx,endIdx+1):
                for chNum in range(startIdx1,endIdx1+1):
                    ret = xpLinkManagerTv80DbgPortInfo(args[0], ptgNum, chNum)
                    if ret != 0:
                        print('Return Value = %d for ptgNum = %d ChNum = %d' % (ret,ptgNum, chNum))
                    else:
                        pass

    #/********************************************************************************/
    # command for xpLinkManagerTv80PrintInfo
    #/********************************************************************************/
    def do_tv80_print_status(self, arg):
        '''
         xpLinkManagerTv80PrintInfo: Enter [ devId,ptgNum/startPtg-endPtg ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,ptgNum/startPtg-endPtg ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range ptgNum')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            for ptgNum in range(startIdx,endIdx+1):
                ret = xpLinkManagerTv80PrintInfo(args[0], ptgNum)
                if ret != 0:
                    print('Return Value = %d for ptgNum = %d' % (ret,ptgNum))
                else:
                    pass


    #/********************************************************************************/
    # command for xpLinkManagerPrintPtgLockDebugInfo
    #/********************************************************************************/
    def do_tv80_print_ptg_lock_debug(self, arg):
        '''
         xpLinkManagerTv80PrintInfo: Enter [ devId,ptgNum/startPtg-endPtg ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,ptgNum/startPtg-endPtg ]')
        else:
            args[0] = int(args[0])
            if '-' in args[1]:
                startIdx = int(args[1].split('-')[0].strip())
                endIdx = int(args[1].split('-')[1].strip())
                if startIdx > endIdx:
                    print('Improper Range ptgNum')
                    return
            else:
                args[1] = int(args[1])
                startIdx = args[1]
                endIdx = args[1]
            for ptgNum in range(startIdx,endIdx+1):
                ret = xpLinkManagerPrintPtgLockDebugInfo(args[0], ptgNum)
                if ret != 0:
                    print('Return Value = %d for ptgNum = %d' % (ret,ptgNum))
                else:
                    pass


