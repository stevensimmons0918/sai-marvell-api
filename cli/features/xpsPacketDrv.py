#!/usr/bin/env python
#  xpsPacketDrv.py
#
#/*******************************************************************************
#* Copyright (c) 2021 Marvell. All rights reserved. The following file is       *
#* subject to the limited use license agreement by and between Marvell and you, *
#* your employer or other entity on behalf of whom you act. In the absence of   *
#* such license agreement the following file is subject to Marvell`s standard   *
#* Limited Use License Agreement.                                               *
#*******************************************************************************/
#* @file xpsPacketDrv.py                                                        *
#* @autogenerated by ./cli/cmdsGen.py ../xps/include/xpsPacketDrv.h             *
#*                   ./cli/cmdsGen.py ../xps/include/openXpsPacketDrv.h         *
#* @merged        both generated python files into xpsPacketDrv.py             */
#

import sys
import time
import os
import re
import readline

#/**********************************************************************************/
# import cmd2 package
#/**********************************************************************************/
dirname, filename = os.path.split(os.path.abspath(__file__))
sys.path.append(dirname + "/../cli")
sys.path.append(dirname + "/../../cli")
from cmd2x import Cmd
import xpShellGlobals

#/**********************************************************************************/
# import everything from buildTarget
from buildTarget import *




#/**********************************************************************************/
#SendPacketPrepareMetadata
#/**********************************************************************************/
def sendPacketPrepareMetadata(args):
    sendPktArg = []
    varArgDict = { 
        "-recalcCrc" : "1",
        "-dstInterfaceType" : "0",
        "-vpt" : "0",
        "-cfiBit" : "0",
        "-vid" : "0",
        "-dropOnSource":"0",
        "-packetIsLooped":"0",
        "-tc":"0",
        "-dp":"0",
        "-egrFilterEn":"0",
        "-cascadeControl":"0",
        "-egrFilterRegistered":"0",
        "-srcId":"0",
        "-mailBoxToNeighborCPU":"0",
        "-tag0TpidIndex":"0",
        "-macDA":"0",
        "-macSA":"0"
    }

    for index, argument in enumerate(args):
        if "-" in argument :
            if varArgDict.has_key(argument):
                if (index + 1) < len(args):
                    varArgDict[argument] = args[index + 1]
                else:
                    print "data missing in argument : %s"%(argument)
                    return
            else:
                print  "invalid argument : %s"%(argument)
                return


    xpDsaHeader_stc = new_xpDsaHeaderp()
    devId = int(args[0])
    egressPort = int(args[1])
    packetLen = int(args[2])
    queue = int(args[3])
    pktCopies = int(args[4])
    numOfPkt_Ptr = new_uint32_tp()
    uint32_tp_assign(numOfPkt_Ptr, pktCopies)
    xpDsaHeader_stc.recalcCrc = bool(int(varArgDict["-recalcCrc"]))
    xpDsaHeader_stc.dstInterfaceType = int(varArgDict["-dstInterfaceType"])
    xpDsaHeader_stc.vpt = int(varArgDict["-vpt"])
    xpDsaHeader_stc.cfiBit = int(varArgDict["-cfiBit"])
    xpDsaHeader_stc.vid = int(varArgDict["-vid"])
    xpDsaHeader_stc.dropOnSource = bool(int(varArgDict["-dropOnSource"]))
    xpDsaHeader_stc.packetIsLooped = bool(int(varArgDict["-packetIsLooped"]))
    xpDsaHeader_stc.tc = int(varArgDict["-tc"])
    xpDsaHeader_stc.dp = int(varArgDict["-dp"])
    xpDsaHeader_stc.egrFilterEn = bool(int(varArgDict["-egrFilterEn"]))
    xpDsaHeader_stc.cascadeControl = bool(int(varArgDict["-cascadeControl"]))
    xpDsaHeader_stc.egrFilterRegistered = bool(int(varArgDict["-egrFilterRegistered"]))
    xpDsaHeader_stc.srcId = int(varArgDict["-srcId"])
    xpDsaHeader_stc.mailBoxToNeighborCPU = bool(int(varArgDict["-mailBoxToNeighborCPU"]))
    xpDsaHeader_stc.tag0TpidIndex = int(varArgDict["-tag0TpidIndex"])
    ethHdr = new_xpEthHdr_tp()
    ethHdr.isSASet = False
    ethHdr.isDASet = False
    ethHdr.isVlanIdSet = False
    if varArgDict["-macSA"] != "0":
        macSA = varArgDict["-macSA"].split(":")
        for i in range(0, len(macSA)):
            ethHdr.macSA[i] = int(macSA[i], 16)
        ethHdr.isSASet = True;
    if varArgDict["-macDA"] != "0":
        macDA = varArgDict["-macDA"].split(":")
        for i in range(0, len(macDA)):
            ethHdr.macDA[i] = int(macDA[i], 16)
        ethHdr.isDASet = True;
    if varArgDict["-vid"] != "0":
        vid = int(varArgDict["-vid"])
        ethHdr.vlanId = vid
        ethHdr.isVlanIdSet = True

    sendPktArg.append(devId)
    sendPktArg.append(egressPort)
    sendPktArg.append(packetLen)
    sendPktArg.append(queue)
    sendPktArg.append(numOfPkt_Ptr)
    sendPktArg.append(xpDsaHeader_stc)
    sendPktArg.append(ethHdr)
    return sendPktArg
#/**********************************************************************************/
#SendPcapPrepareMetadata
#/**********************************************************************************/
def sendPcapPrepareMetadata(args):
    sendPktArg = []
    varArgDict = { 
        "-recalcCrc" : "1",
        "-dstInterfaceType" : "0",
        "-vpt" : "0",
        "-cfiBit" : "0",
        "-vid" : "0",
        "-dropOnSource":"0",
        "-packetIsLooped":"0",
        "-tc":"0",
        "-dp":"0",
        "-egrFilterEn":"0",
        "-cascadeControl":"0",
        "-egrFilterRegistered":"0",
        "-srcId":"0",
        "-mailBoxToNeighborCPU":"0",
        "-tag0TpidIndex":"0"
    }

    for index, argument in enumerate(args):
        if "-" in argument :
            if varArgDict.has_key(argument):
                if (index + 1) < len(args):
                    varArgDict[argument] = args[index + 1]
                else:
                    print "data missing in argument : %s"%(argument)
                    return
            else:
                print  "invalid argument : %s"%(argument)
                return


    xpDsaHeader_stc = new_xpDsaHeaderp()
    devId = int(args[0])
    egressPort = int(args[1])
    queue = int(args[2])
    xpDsaHeader_stc.recalcCrc = bool(int(varArgDict["-recalcCrc"]))
    xpDsaHeader_stc.dstInterfaceType = int(varArgDict["-dstInterfaceType"])
    xpDsaHeader_stc.vpt = int(varArgDict["-vpt"])
    xpDsaHeader_stc.cfiBit = int(varArgDict["-cfiBit"])
    xpDsaHeader_stc.vid = int(varArgDict["-vid"])
    xpDsaHeader_stc.dropOnSource = bool(int(varArgDict["-dropOnSource"]))
    xpDsaHeader_stc.packetIsLooped = bool(int(varArgDict["-packetIsLooped"]))
    xpDsaHeader_stc.tc = int(varArgDict["-tc"])
    xpDsaHeader_stc.dp = int(varArgDict["-dp"])
    xpDsaHeader_stc.egrFilterEn = bool(int(varArgDict["-egrFilterEn"]))
    xpDsaHeader_stc.cascadeControl = bool(int(varArgDict["-cascadeControl"]))
    xpDsaHeader_stc.egrFilterRegistered = bool(int(varArgDict["-egrFilterRegistered"]))
    xpDsaHeader_stc.srcId = int(varArgDict["-srcId"])
    xpDsaHeader_stc.mailBoxToNeighborCPU = bool(int(varArgDict["-mailBoxToNeighborCPU"]))
    xpDsaHeader_stc.tag0TpidIndex = int(varArgDict["-tag0TpidIndex"])
    
    sendPktArg.append(devId)
    sendPktArg.append(egressPort)
    sendPktArg.append(queue)
    sendPktArg.append(args[3])
    sendPktArg.append(xpDsaHeader_stc)
    return sendPktArg

#/**********************************************************************************/
# The class object for xpsPacketDrv operations
#/**********************************************************************************/

class xpsPacketDrvObj(Cmd):

    doc_header   = 'Available commands (type help <topic>):'
    undoc_header = 'Utility commands'

    #/********************************************************************************/
    # command for xpsPacketDriverCpuCaptureStart
    #/********************************************************************************/
    def do_packet_driver_cpu_capture_start(self, arg):
        '''
         xpsPacketDriverCpuCaptureStart: Enter [ devId,keyIntfId,type,l2EcmpSize,type,keyIntfId ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 6
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,keyIntfId,type,l2EcmpSize,type,keyIntfId ]')
        else:
            args[0] = int(args[0])
            char_Ptr = new_charp()
            char_Ptr.keyIntfId = int(args[1])
            char_Ptr.type = eval(args[2])
            char_Ptr.l2EcmpSize = int(args[3])
            char_Ptr.type = eval(args[4])
            char_Ptr.keyIntfId = int(args[5])
            
            #print('Input Arguments are, devId=%d, keyIntfId=%d, type=%d, l2EcmpSize=%d, type=%d, keyIntfId=%d' % (args[0],char_Ptr.keyIntfId,char_Ptr.type,char_Ptr.l2EcmpSize,char_Ptr.type,char_Ptr.keyIntfId))
            ret = xpsPacketDriverCpuCaptureStart(args[0],char_Ptr)
            err = 0
            if ret != 0:
                print('Return Value = %d' % (ret))
                err = 1
            if err == 0:
                print('keyIntfId = %d' % (char_Ptr.keyIntfId))
                print('type = %d' % (char_Ptr.type))
                print('l2EcmpSize = %d' % (char_Ptr.l2EcmpSize))
                print('type = %d' % (char_Ptr.type))
                print('keyIntfId = %d' % (char_Ptr.keyIntfId))
                pass
            delete_charp(char_Ptr)
    #/********************************************************************************/
    # command for xpsPacketDriverCpuCaptureStop
    #/********************************************************************************/
    def do_packet_driver_cpu_capture_stop(self, arg):
        '''
         xpsPacketDriverCpuCaptureStop: Enter [ devId ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 1
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId ]')
        else:
            args[0] = int(args[0])
            #print('Input Arguments are, devId=%d' % (args[0]))
            ret = xpsPacketDriverCpuCaptureStop(args[0])
            if ret != 0:
                print('Return Value = %d' % (ret))
            else:
                pass
    #/********************************************************************************/
    # command for xpsPacketDriverDeInit
    #/********************************************************************************/
    def do_packet_driver_de_init(self, arg):
        '''
         xpsPacketDriverDeInit: Enter [ devId ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 1
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId ]')
        else:
            args[0] = int(args[0])
            #print('Input Arguments are, devId=%d' % (args[0]))
            ret = xpsPacketDriverDeInit(args[0])
            if ret != 0:
                print('Return Value = %d' % (ret))
            else:
                pass
    #/********************************************************************************/
    # command for xpsPacketDriverDmaReset
    #/********************************************************************************/
    def do_packet_driver_dma_reset(self, arg):
        '''
         xpsPacketDriverDmaReset: Enter [ devId ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 1
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId ]')
        else:
            args[0] = int(args[0])
            #print('Input Arguments are, devId=%d' % (args[0]))
            ret = xpsPacketDriverDmaReset(args[0])
            if ret != 0:
                print('Return Value = %d' % (ret))
            else:
                pass
    #/********************************************************************************/
    # command for xpsPacketDriverDmaInit
    #/********************************************************************************/
    def do_packet_driver_dma_init(self, arg):
        '''
         xpsPacketDriverDmaInit: Enter [ devId,queueNum,descDepth,isTxQueue,count,numOffload ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 5
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,queueNum,descDepth,isTxQueue,count,numOffload ]')
        else:
            args[0] = int(args[0])
            xpQueueInfo_Ptr = new_xpQueueInfop()
            xpQueueInfo_Ptr.queueNum = int(args[1])
            xpQueueInfo_Ptr.descDepth = int(args[2])
            xpQueueInfo_Ptr.isTxQueue = int(args[3])
            args[4] = int(args[4])
            args[5] = int(args[5])
            #print('Input Arguments are, devId=%d, queueNum=%d, descDepth=%d, isTxQueue=%d, count=%d, numOffload=%d' % (args[0],xpQueueInfo_Ptr.queueNum,xpQueueInfo_Ptr.descDepth,xpQueueInfo_Ptr.isTxQueue,args[4],args[5]))
            ret = xpsPacketDriverDmaInit(args[0],xpQueueInfo_Ptr,args[4],args[5])
            err = 0
            if ret != 0:
                print('Return Value = %d' % (ret))
                err = 1
            if err == 0:
                print('queueNum = %d' % (xpQueueInfo_Ptr.queueNum))
                print('descDepth = %d' % (xpQueueInfo_Ptr.descDepth))
                print('isTxQueue = %d' % (xpQueueInfo_Ptr.isTxQueue))
                pass
            delete_xpQueueInfop(xpQueueInfo_Ptr)
    #/********************************************************************************/
    # command for xpsPacketDriverEtherInit
    #/********************************************************************************/
    def do_packet_driver_ether_init(self, arg):
        '''
         xpsPacketDriverEtherInit: Enter [ devId,keyIntfId,type,l2EcmpSize,type,keyIntfId,numOffload ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 7
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,keyIntfId,type,l2EcmpSize,type,keyIntfId,numOffload ]')
        else:
            args[0] = int(args[0])
            char_Ptr = new_charp()
            char_Ptr.keyIntfId = int(args[1])
            char_Ptr.type = eval(args[2])
            char_Ptr.l2EcmpSize = int(args[3])
            char_Ptr.type = eval(args[4])
            char_Ptr.keyIntfId = int(args[5])
            args[6] = int(args[6])
            
            #print('Input Arguments are, devId=%d, keyIntfId=%d, type=%d, l2EcmpSize=%d, type=%d, keyIntfId=%d, numOffload=%d' % (args[0],char_Ptr.keyIntfId,char_Ptr.type,char_Ptr.l2EcmpSize,char_Ptr.type,char_Ptr.keyIntfId,args[6]))
            ret = xpsPacketDriverEtherInit(args[0],char_Ptr,args[6])
            err = 0
            if ret != 0:
                print('Return Value = %d' % (ret))
                err = 1
            if err == 0:
                print('keyIntfId = %d' % (char_Ptr.keyIntfId))
                print('type = %d' % (char_Ptr.type))
                print('l2EcmpSize = %d' % (char_Ptr.l2EcmpSize))
                print('type = %d' % (char_Ptr.type))
                print('keyIntfId = %d' % (char_Ptr.keyIntfId))
                pass
            delete_charp(char_Ptr)
    #/********************************************************************************/
    # command for xpsPacketDriverNetdevInit
    #/********************************************************************************/
    def do_packet_driver_netdev_init(self, arg):
        '''
         xpsPacketDriverNetdevInit: Enter [ devId ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 1
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId ]')
        else:
            args[0] = int(args[0])
            #print('Input Arguments are, devId=%d' % (args[0]))
            ret = xpsPacketDriverNetdevInit(args[0])
            if ret != 0:
                print('Return Value = %d' % (ret))
            else:
                pass
    #/********************************************************************************/
    # command for xpsPacketDriverNetdevDeInit
    #/********************************************************************************/
    def do_packet_driver_netdev_de_init(self, arg):
        '''
         xpsPacketDriverNetdevDeInit: Enter [ devId ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 1
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId ]')
        else:
            args[0] = int(args[0])
            #print('Input Arguments are, devId=%d' % (args[0]))
            ret = xpsPacketDriverNetdevDeInit(args[0])
            if ret != 0:
                print('Return Value = %d' % (ret))
            else:
                pass
    #/********************************************************************************/
    # command for xpsPacketDriverGetPktRxTxStatistics
    #/********************************************************************************/
    def do_packet_driver_get_pkt_rx_tx_statistics(self, arg):
        '''
         xpsPacketDriverGetPktRxTxStatistics: Enter [ devId ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 1
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId ]')
        else:
            args[0] = int(args[0])
            #print('Input Arguments are, devId=%d' % (args[0]))
            ret = xpsPacketDriverGetPktRxTxStatistics(args[0])
            if ret != 0:
                print('Return Value = %d' % (ret))
            else:
                pass
    #/*****************************************************************************************************/
    # sub-commands to display tables
    #/*****************************************************************************************************/
    def do_display_tables(self, s):
        'Display Table commands'
        i = displayTableCmds()
        i.prompt = self.prompt[:-1]+':displayTables)'
        while True:
            try:
                i.cmdloop()
                break
            except (ValueError, IndexError), e:
                print 'Invalid input format, check help <command> or ? for usage'
                continue
        del i

    #/********************************************************************************/
    # command for xpsPacketDriverSend
    #/********************************************************************************/
    def do_packet_driver_send(self, arg):
        '''
         xpsPacketDriverSend: Enter [ devId,egressPort,size of pkt, Queue, pkt copies]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 5
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,egressPort,size of pkt,queue, pkt copies ]')
        else:
            devId = int(args[0])
            egressPort = int(args[1])
            packetLen = int(args[2])
            queue = int(args[3])
            pktCopies = int(args[4])
            numOfPkt_Ptr = new_uint32_tp()
            uint32_tp_assign(numOfPkt_Ptr, pktCopies)

            print('Input Arguments are, devId=%d, egress Port=%d, size of packet=%d, queue=%d pktCopies=%d' % (devId,egressPort,packetLen, queue, pktCopies))
            ret = xpSendPacket(devId, egressPort, packetLen, queue, numOfPkt_Ptr)
            if (ret != XP_NO_ERR):
                print "-------------------------------------------------------"
                print "Packet Sending Failed"
                print "-------------------------------------------------------"
            else:
                pass
    #/********************************************************************************/
    # command for xpsPacketDriverReceive
    #/********************************************************************************/
    def do_packet_driver_receive(self, arg):
        '''
         xpsPacketDriverReceive: Enter [ printPktCnt ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 1
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [printPktCnt]')
        else:
            printPktCnt = int(args[0])
            #print('Input Arguments are, devId=%d, bufSize=%d, priority=%d' % (args[0],xpPacketInfo_Ptr.buf,xpPacketInfo_Ptr.bufSize,xpPacketInfo_Ptr.priority))
            ret = xpsPacketDriverReceive(printPktCnt)
            err = 0
            if ret != 0:
                print('Return Value = %d' % (ret))
                err = 1
            if err == 0:
                pass

    #/********************************************************************************/
    # command for xpsCaptureUnitTest
    #/********************************************************************************/
    def do_packet_driver_trap_ingress_traffic(self, arg):
        '''
         xpsPacketDriverTrapIngressTraffic: Enter [ devId, port, enable ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId, port, enable ]')
        else:
            args[0] = int(args[0])
            args[1] = eval(args[1])
            args[2] = bool( int(args[2]))
            #print('Input Arguments are, scopeId=%d, stgId=%d, vlanId=%d' % (args[0],args[1],args[2]))
            ret=0;
            ret = xpsMacMacLoopback(args[0], args[1], 2, args[2])
            xpsPacketDriverTrapIngressTraffic(args[0],args[1], args[2])
            if ret != 0:
                print('Error in configuring loopback .Return Value = %d' % (ret))
            else:
                pass
    #/********************************************************************************/
    # command for xpsNetdevXpnetIdAllocate
    #/********************************************************************************/
    def do_netdev_xpnet_id_allocate(self, arg):
        '''
         xpsNetdevXpnetIdAllocate: Enter [ devId ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 1
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId ]')
        else:
            args[0] = int(args[0])
            xpnetId_Ptr_1 = new_uint32_tp()
            #print('Input Arguments are, devId=%d' % (args[0]))
            ret = xpsNetdevXpnetIdAllocate(args[0],xpnetId_Ptr_1)
            err = 0
            if ret != 0:
                print('Return Value = %d' % (ret))
                err = 1
            if err == 0:
                print('xpnetId = %d' % (uint32_tp_value(xpnetId_Ptr_1)))
                pass
            delete_uint32_tp(xpnetId_Ptr_1)
    #/********************************************************************************/
    # command for xpsNetdevXpnetIdAllocateWith
    #/********************************************************************************/
    def do_netdev_xpnet_id_allocate_with(self, arg):
        '''
         xpsNetdevXpnetIdAllocateWith: Enter [ devId,xpnetId ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,xpnetId ]')
        else:
            args[0] = int(args[0])
            args[1] = int(args[1])
            #print('Input Arguments are, devId=%d, xpnetId=%d' % (args[0],args[1]))
            ret = xpsNetdevXpnetIdAllocateWith(args[0],args[1])
            if ret != 0:
                print('Return Value = %d' % (ret))
            else:
                pass
    #/********************************************************************************/
    # command for xpsNetdevXpnetIdFree
    #/********************************************************************************/
    def do_netdev_xpnet_id_free(self, arg):
        '''
         xpsNetdevXpnetIdFree: Enter [ devId,xpnetId ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,xpnetId ]')
        else:
            args[0] = int(args[0])
            args[1] = int(args[1])
            #print('Input Arguments are, devId=%d, xpnetId=%d' % (args[0],args[1]))
            ret = xpsNetdevXpnetIdFree(args[0],args[1])
            if ret != 0:
                print('Return Value = %d' % (ret))
            else:
                pass
    #/********************************************************************************/
    # command for xpsNetdevIfCreate
    #/********************************************************************************/
    def do_netdev_if_create(self, arg):
        '''
         xpsNetdevIfCreate: Enter [ devId,xpnetId, ifName ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,xpnetId,ifName ]')
        else:
            args[0] = int(args[0])
            args[1] = int(args[1])
            ifName_Ptr_2 = new_charp()
            charp_assign(ifName_Ptr_2, args[2])
            #print('Input Arguments are, devId=%d, xpnetId=%d' % (args[0],args[1]))
            ret = xpsNetdevIfCreate(args[0],args[1],ifName_Ptr_2)
            err = 0
            if ret != 0:
                print('Return Value = %d' % (ret))
                err = 1
            if err == 0:
                print('ifName = %s' % (charp_value(ifName_Ptr_2)))
                pass
    #/********************************************************************************/
    # command for xpsNetdevIfDelete
    #/********************************************************************************/
    def do_netdev_if_delete(self, arg):
        '''
         xpsNetdevIfDelete: Enter [ devId,xpnetId ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,xpnetId ]')
        else:
            args[0] = int(args[0])
            args[1] = int(args[1])
            #print('Input Arguments are, devId=%d, xpnetId=%d' % (args[0],args[1]))
            ret = xpsNetdevIfDelete(args[0],args[1])
            if ret != 0:
                print('Return Value = %d' % (ret))
            else:
                pass
    #/********************************************************************************/
    # command for xpsNetdevTrapSet
    #/********************************************************************************/
    def do_netdev_trap_set(self, arg):
        '''
         xpsNetdevTrapSet: Enter [ devId,trapId,rCode,ch,fd,flag ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 6
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,trapId,rCode,ch,fd,flag ]')
        else:
            args[0] = int(args[0])
            args[1] = int(args[1])
            args[2] = int(args[2])
            args[3] = int(args[3])
            args[4] = int(args[4])
            args[5] = int(args[5])
            #print('Input Arguments are, devId=%d, trapId=%d, rCode=%d, ch=%d, fd=%d, flag=%d' % (args[0],args[1],args[2],args[3],args[4],args[5]))
            ret = xpsNetdevTrapSet(args[0],args[1],args[2],args[3],args[4],args[5])
            if ret != 0:
                print('Return Value = %d' % (ret))
            else:
                pass
    #/********************************************************************************/
    # command for xpsNetdevTrapGet
    #/********************************************************************************/
    def do_netdev_trap_get(self, arg):
        '''
         xpsNetdevTrapGet: Enter [ devId,trapId, fd ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 2
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,trapId ]')
        else:
            args[0] = int(args[0])
            args[1] = int(args[1])
            fd_Ptr_2 = new_int32_tp()
            #print('Input Arguments are, devId=%d, trapId=%d' % (args[0],args[1]))
            ret = xpsNetdevTrapGet(args[0],args[1],fd_Ptr_2)
            err = 0
            if ret != 0:
                print('Return Value = %d' % (ret))
                err = 1
            if err == 0:
                print('fd = %d' % (int32_tp_value(fd_Ptr_2)))
                pass
            delete_int32_tp(fd_Ptr_2)
    #/********************************************************************************/
    # command for xpsNetdevDefaultTrapSet
    #/********************************************************************************/
    def do_netdev_default_trap_set(self, arg):
        '''
         xpsNetdevDefaultTrapSet: Enter [ devId,ch,fd,flag ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 4
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,ch,fd,flag ]')
        else:
            args[0] = int(args[0])
            args[1] = int(args[1])
            args[2] = int(args[2])
            args[3] = bool(int(args[3]))
            #print('Input Arguments are, devId=%d, ch=%d, fd=%d, flag=%d' % (args[0],args[1],args[2],args[3]))
            ret = xpsNetdevDefaultTrapSet(args[0],args[1],args[2],args[3])
            if ret != 0:
                print('Return Value = %d' % (ret))
            else:
                pass
    #/********************************************************************************/
    # command for xpsNetdevLinkStatusSet
    #/********************************************************************************/
    def do_netdev_link_status_set(self, arg):
        '''
         xpsNetdevLinkStatusSet: Enter [ devId,xpnetId,status ]
        '''
        args = re.split(';| ',arg)
        numArgsReq = 3
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter [ devId,xpnetId,status ]')
        else:
            args[0] = int(args[0])
            args[1] = int(args[1])
            args[2] = bool(int(args[2]))
            #print('Input Arguments are, devId=%d, xpnetId=%d, status=%d' % (args[0],args[1],args[2]))
            ret = xpsNetdevLinkStatusSet(args[0],args[1],args[2])
            if ret != 0:
                print('Return Value = %d' % (ret))
            else:
                pass
    #/********************************************************************************/
    # command for xpsPacketDriverSendWithDSA
    #/********************************************************************************/
    def do_packet_driver_send_with_dsa(self, arg):
        'Send packet to target port.\n\
         Input arguments are\n\
         deviceId,\n\
         egressPort,\n\
         size of packet\n\
         queue\n\
         packet copies\n\
         Optional args are:\n\
         [\n\
         -recalcCrc <Val>,\n\
         -dstInterfaceType <Val>,\n\
         -vpt <Val>,\n\
         -cfiBit <Val>,\n\
         -vid <Val>,\n\
         -dropOnSource <Val>,\n\
         -packetIsLooped <Val>,\n\
         -tc <Val>,\n\
         -dp <Val>,\n\
         -egrFilterEn <Val>,\n\
         -cascadeControl <Val>,\n\
         -egrFilterRegistered <Val>,\n\
         -srcId <Val>,\n\
         -mailBoxToNeighborCPU <Val>,\n\
         -tag0TpidIndex <Val>,\n\
         -macDA <Val>, \n\
         -macSA <Val>, \n\
         ]\n'
        '''
         xpsPacketDriverSend: Enter  [devId,egressPort,size of pkt, Queue, pkt copies]
        '''

        sendPktArg = [-1]
        args = re.split(';| ',arg)
        numArgsReq = 5
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter devId,egressPort,size of pkt,queue, pkt copies\n\
                    Optional args are:\n\
                    [\n\
                    -recalcCrc <Val>,\n\
                    -dstInterfaceType <Val>,\n\
                    -vpt <Val>, \n\
                    -cfiBit <Val>,\n\
                    -vid <Val>,\n\
                    -dropOnSource <Val>,\n\
                    -packetIsLooped <Val>,\n\
                    -tc <Val>,\n\
                    -dp <Val>,\n\
                    -egrFilterEn <Val>,\n\
                    -cascadeControl <Val>,\n\
                    -egrFilterRegistered <Val>,\n\
                    -srcId <Val>,\n\
                    -mailBoxToNeighborCPU <Val>,\n\
                    -tag0TpidIndex <Val>,\n\
                    -macDA <Val>, \n\
                    -macSA <Val>, \n\
                    ]\n')
        else:
            sendPktArg = sendPacketPrepareMetadata(args)
            ret = xpSendPacketWithDSA(sendPktArg[0], sendPktArg[1], sendPktArg[2], sendPktArg[3], sendPktArg[4], sendPktArg[5], sendPktArg[6])
            if (ret != XP_NO_ERR):
                print "-------------------------------------------------------"
                print "Packet Sending Failed"
                print "-------------------------------------------------------"
            else:
                pass
    #/********************************************************************************/
    # command for xpSendPcapWithDSA
    #/********************************************************************************/
    def do_packet_driver_send_pcap_with_dsa(self, arg):
        'Send packet to target port.\n\
         Input arguments are\n\
         deviceId,\n\
         egressPort,\n\
         queue\n\
         pcapFile\n\
         Optional args are:\n\
         [\n\
         -recalcCrc <Val>,\n\
         -dstInterfaceType <Val>,\n\
         -vpt <Val>,\n\
         -cfiBit <Val>,\n\
         -vid <Val>,\n\
         -dropOnSource <Val>,\n\
         -packetIsLooped <Val>,\n\
         -tc <Val>,\n\
         -dp <Val>,\n\
         -egrFilterEn <Val>,\n\
         -cascadeControl <Val>,\n\
         -egrFilterRegistered <Val>,\n\
         -srcId <Val>,\n\
         -mailBoxToNeighborCPU <Val>,\n\
         -tag0TpidIndex <Val>,\n\
         ]\n'
        '''
         xpSendPcapWithDSA: Enter  [devId,egressPort,Queue, pcapFile]
        '''

        sendPktArg = [-1]
        args = re.split(';| ',arg)
        numArgsReq = 4
        if  (numArgsReq > 0 and args[0] == '') or (len(args) < numArgsReq) :
            print('Invalid input, Enter devId,egressPort,queue, pcapFile\n\
                    Optional args are:\n\
                    [\n\
                    -recalcCrc <Val>,\n\
                    -dstInterfaceType <Val>,\n\
                    -vpt <Val>, \n\
                    -cfiBit <Val>,\n\
                    -vid <Val>,\n\
                    -dropOnSource <Val>,\n\
                    -packetIsLooped <Val>,\n\
                    -tc <Val>,\n\
                    -dp <Val>,\n\
                    -egrFilterEn <Val>,\n\
                    -cascadeControl <Val>,\n\
                    -egrFilterRegistered <Val>,\n\
                    -srcId <Val>,\n\
                    -mailBoxToNeighborCPU <Val>,\n\
                    -tag0TpidIndex <Val>,\n\
                    ]\n')
        else:
            sendPktArg = sendPcapPrepareMetadata(args)
            ret = xpSendPcapWithDSA(sendPktArg[0], sendPktArg[1], sendPktArg[2], sendPktArg[3], sendPktArg[4])
            if (ret != XP_NO_ERR):
                print "-------------------------------------------------------"
                print "Packet Sending Failed"
                print "-------------------------------------------------------"
            else:
                pass
    #/*****************************************************************************************************/
    # sub-commands to display tables
    #/*****************************************************************************************************/
    def do_display_tables(self, s):
        'Display Table commands'
        i = displayTableCmds()
        i.prompt = self.prompt[:-1]+':displayTables)'
        while True:
            try:
                i.cmdloop()
                break
            except (ValueError, IndexError), e:
                print 'Invalid input format, check help <command> or ? for usage'
                continue
        del i
