// TAG:               HSR-SAN-CPU
// Short Description: restore 'default' configures CPU port in HSR-SAN switch
// Description:       restore 'default' configures CPU port in HSR-SAN , in addition to other ring/interlink ports.
end
configure


access-list device ${dev} pcl-ID 10
delete rule-id 60 
delete rule-id 66 
exit 

access-list device ${dev} pcl-ID 11
delete rule-id 72 
delete rule-id 78 
exit 

access-list device ${dev} pcl-ID 13
delete rule-id 84 
exit 

interface ethernet ${dev}/${CPU}
no service-acl pcl-ID 13
exit 

delete access-list device ${dev} pcl-id 13  

do cpss-api call cpssDxChPclNumberOfStreamIdsSet devNum ${dev} direction CPSS_PCL_DIRECTION_INGRESS_E maxNum 0

callCpssAPI cpssDxChHsrPrpPntEntrySet
<<<PARAMS
{
    { "IN", "GT_U8", "devNum", ${dev} },
    { "IN", "GT_U32", "index",    127 },
    { "IN", "CPSS_DXCH_HSR_PRP_PNT_OPER_ENT", "operation",      "CPSS_DXCH_HSR_PRP_PNT_OPER_SET_INVALID_E" },
    { "IN", "CPSS_DXCH_HSR_PRP_PNT_ENTRY_STC", "infoPtr",
        { 
        }
    }
}
>>> 
callCpssAPI cpssDxChHsrPrpPntEntrySet
<<<PARAMS
{
    { "IN", "GT_U8", "devNum", ${dev} },
    { "IN", "GT_U32", "index",    126 },
    { "IN", "CPSS_DXCH_HSR_PRP_PNT_OPER_ENT", "operation",      "CPSS_DXCH_HSR_PRP_PNT_OPER_SET_INVALID_E" },
    { "IN", "CPSS_DXCH_HSR_PRP_PNT_ENTRY_STC", "infoPtr",
        { 
        }
    }
}
>>> 

callCpssAPI cpssDxChHsrPrpLreInstanceEntrySet
<<<PARAMS
{
    { "IN", "GT_U8", "devNum", ${dev} },
    { "IN", "GT_U32", "index",      0 },
    { "IN", "CPSS_DXCH_HSR_PRP_LRE_INSTANCE_ENTRY_STC", "infoPtr",
        { numOfPorts = 3,
          lowestHPort = 0,
          eVidxMappingBase = 1024
        }
    }
}
>>>

// use resetSeqNum = true , to reset the counter from any previous run
callCpssAPI cpssDxChStreamEntrySet
<<<PARAMS
{
    { "IN", "GT_U8", "devNum", ${dev} },
    { "IN", "GT_U32", "index",      6 },
    { "IN", "CPSS_DXCH_STREAM_SNG_IRF_ENTRY_STC", "sngIrfInfoPtr",
        { seqNumAssignmentEnable = false,
          resetSeqNum = true
        }
    }
}
>>>


do cpss-api call cpssDxChBrgVlanEgressPortTagStateModeSet devNum ${dev} portNum ${CPU} stateMode CPSS_DXCH_BRG_VLAN_EPORT_TAG_STATE_EVLAN_MODE_E

do cpss-api call cpssDxChBrgVlanEgressPortTagStateSet devNum ${dev} portNum ${CPU} tagCmd CPSS_DXCH_BRG_VLAN_PORT_UNTAGGED_CMD_E

//restore vlan filter on CPU port in the VIDX
do cpss-api call cpssDxChBrgEgrFltVlanPortFilteringEnableSet devNum ${dev} portNum ${CPU} enable true


callCpssAPI cpssDxChBrgMcEntryWrite
<<<PARAMS
{
    { "IN", "GT_U8", "devNum", ${dev} },
    { "IN", "GT_U16", "vidx",   1032 },
    { "IN", "CPSS_PORTS_BMP_STC", "portBitmapPtr",
        { ports = {
            [0] = 0 ,
            [1] = 0} 
        }
    }
}
>>>


callCpssAPI cpssDxChBrgMcEntryWrite
<<<PARAMS
{
    { "IN", "GT_U8", "devNum", ${dev} },
    { "IN", "GT_U16", "vidx",   1033 },
    { "IN", "CPSS_PORTS_BMP_STC", "portBitmapPtr",
        { ports = {
            [0] = 0 ,
            [1] = 0} 
        }
    }
}
>>>

callCpssAPI cpssDxChBrgMcEntryWrite
<<<PARAMS
{
    { "IN", "GT_U8", "devNum", ${dev} },
    { "IN", "GT_U16", "vidx",   1034 },
    { "IN", "CPSS_PORTS_BMP_STC", "portBitmapPtr",
        { ports = {
            [0] = 0 ,
            [1] = 0} 
        }
    }
}
>>>

callCpssAPI cpssDxChBrgMcEntryWrite
<<<PARAMS
{
    { "IN", "GT_U8", "devNum", ${dev} },
    { "IN", "GT_U16", "vidx",   1035 },
    { "IN", "CPSS_PORTS_BMP_STC", "portBitmapPtr",
        { ports = {
            [0] = 0 ,
            [1] = 0} 
        }
    }
}
>>>

callCpssAPI cpssDxChBrgMcEntryWrite
<<<PARAMS
{
    { "IN", "GT_U8", "devNum", ${dev} },
    { "IN", "GT_U16", "vidx",   1036 },
    { "IN", "CPSS_PORTS_BMP_STC", "portBitmapPtr",
        { ports = {
            [0] = 0 ,
            [1] = 0} 
        }
    }
}
>>>

callCpssAPI cpssDxChBrgMcEntryWrite
<<<PARAMS
{
    { "IN", "GT_U8", "devNum", ${dev} },
    { "IN", "GT_U16", "vidx",   1037 },
    { "IN", "CPSS_PORTS_BMP_STC", "portBitmapPtr",
        { ports = {
            [0] = 0 ,
            [1] = 0} 
        }
    }
}
>>>

callCpssAPI cpssDxChBrgMcEntryWrite
<<<PARAMS
{
    { "IN", "GT_U8", "devNum", ${dev} },
    { "IN", "GT_U16", "vidx",   1038 },
    { "IN", "CPSS_PORTS_BMP_STC", "portBitmapPtr",
        { ports = {
            [0] = 0 ,
            [1] = 0} 
        }
    }
}
>>>

callCpssAPI cpssDxChBrgMcEntryWrite
<<<PARAMS
{
    { "IN", "GT_U8", "devNum", ${dev} },
    { "IN", "GT_U16", "vidx",   1039 },
    { "IN", "CPSS_PORTS_BMP_STC", "portBitmapPtr",
        { ports = {
            [0] = 0 ,
            [1] = 0} 
        }
    }
}
>>>

do cpss-api call cpssDxChBrgNestVlanPortTargetUseIngressModeSet devNum ${dev} portNum ${CPU} mode CPSS_DXCH_BRG_NEST_VLAN_TARGET_USE_INGRESS_MODE_ALLOWED_E

do cpss-api call cpssDxChHsrPrpPortSrcHsrBaseLsduOffsetSet devNum ${dev} portNum ${CPU} lsduOffset 14

// delete before changing the partition mode 
// delete the DDE entry for MAC-C1 with seqNum = 5003
do cpss-api call cpssDxChHsrPrpDdeEntryInvalidate devNum ${dev} index 5504 
// delete the DDE entry for MAC-B with seqNum = 5004
do cpss-api call cpssDxChHsrPrpDdeEntryInvalidate devNum ${dev} index 17776
// delete the DDE entry for MAC-B with seqNum = 5004
do cpss-api call cpssDxChHsrPrpDdeEntryInvalidate devNum ${dev} index 18017
// delete the DDE entry for MAC-B with seqNum = 5005
do cpss-api call cpssDxChHsrPrpDdeEntryInvalidate devNum ${dev} index 5488 
 