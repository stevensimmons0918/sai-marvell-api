// TAG:               vxlan-gpe-ioam, uni, nno;
// Short Description: set vxlan config
// Description:       configure ports 1,2 as uni and 3,4 as nni. All interfaces with vsi 1000000
//                    the NNI are of type 'vxlan-GPE' with next protocol 'IOAM'
//                    ports 5,6 are part of 'transit device' , meaning that ingress and egress traffic 
//                    with the IOAM-vxlan tunnel.

end
configure

//////////////  ingress device section  /////////////////
mac address 00:00:00:10:20:30

interface ethernet ${dev}/${port[1]}
uni vsi 1000000 assign-eport 0x301 vid 101 src-mac 00:00:00:24:00:01 tag-state tagged
exit

interface ethernet ${dev}/${port[2]}
uni vsi 1000000 assign-eport 0x302 vid 102 src-mac 00:00:00:24:00:02
exit

interface ethernet ${dev}/${port[3]}
nni vxlan-gpe-ioam vsi 1000000 assign-eport 0x311 assign-eport-flood 0x411 local-ip-addr 192.176.10.10  remote-ip-addr 192.176.10.11 nexthop-mac-addr 00:00:00:B0:1A:11 tag-state tagged
exit

interface ethernet ${dev}/${port[4]}
// need to enable EPCL lookup for the use-e2e option
// need to do it before calling to 'nni vxlan-gpe-ioam vsi'
service-acl pcl-ID 11 egress lookup 0 
nni vxlan-gpe-ioam vsi 1000000 assign-eport 0x312 assign-eport-flood 0x412 local-ip-addr 192.176.10.10  remote-ip-addr 192.176.10.12 nexthop-mac-addr 00:00:00:B0:1A:12 use-e2e true
exit

// bind the eports and the 'flood-eports' to the needed phaThread for 'ioam-ipv4-ingress-switch'
do cpss-api call cpssDxChPhaPortThreadIdSet devNum ${dev} portNum 0x311 enable true phaThreadId 156
do cpss-api call cpssDxChPhaPortThreadIdSet devNum ${dev} portNum 0x411 enable true phaThreadId 156
do cpss-api call cpssDxChPhaPortThreadIdSet devNum ${dev} portNum 0x312 enable true phaThreadId 200
do cpss-api call cpssDxChPhaPortThreadIdSet devNum ${dev} portNum 0x412 enable true phaThreadId 200
// --
// define the info to be used by the phaThread
// IOAM_Trace_Type 0xB660      -- set 7 fields to true --> IOAM_HDR_len1 = 9 (7 'regular' + 2 'wide')
// TraceType_HopLimAndNodeId   = true 
// TraceType_IngEgrInterface   = false
// TraceType_TimestampSec      = true 
// TraceType_TimestampNanoSec  = true 
// TraceType_TransitDelay      = false
// TraceType_AppData           = true 
// TraceType_QueueDepth        = true 
// TraceType_OpaqueData        = false
// TraceType_HopLimAndNodeIdWide= false
// TraceType_IngEgrInterfaceWide= true
// TraceType_AppDataWide        = true
pha thread-id-info ioam-ingress-switch ipv4 device ${dev} thread-id 156 1.common.busyStallMode drop 1.common.statisticalProcessingFactor 0 1.common.stallDropCode 150 2.ioam.01.IOAM_Trace_Type  0xB660 2.ioam.02.Maximum_Length 101 2.ioam.03.Flags 102 2.ioam.04.Hop_Lim 103 2.ioam.05.node_id 104 2.ioam.06.Type1  105 2.ioam.07.IOAM_HDR_len1  9 2.ioam.08.Reserved1  107 2.ioam.09.Next_Protocol1 108 2.ioam.10.Type2 109 2.ioam.11.IOAM_HDR_len2 110 2.ioam.12.Reserved2 111 2.ioam.13.Next_Protocol2 112
// define the info to be used by the phaThread
// IOAM_Trace_Type 0x54A0      -- set 5 fields to true 1,3,5,8,10 --> IOAM_HDR_len1 = 7 (5 'regular' + 2 'wide')
// TraceType_HopLimAndNodeId   = false 
// TraceType_IngEgrInterface   = true
// TraceType_TimestampSec      = false 
// TraceType_TimestampNanoSec  = true 
// TraceType_TransitDelay      = false
// TraceType_AppData           = true 
// TraceType_QueueDepth        = false 
// TraceType_OpaqueData        = false
// TraceType_HopLimAndNodeIdWide= true
// TraceType_IngEgrInterfaceWide= false
// TraceType_AppDataWide        = true
pha thread-id-info ioam-ingress-switch ipv4 device ${dev} thread-id 200 1.common.busyStallMode drop 1.common.statisticalProcessingFactor 0 1.common.stallDropCode 150 2.ioam.01.IOAM_Trace_Type  0x54A0 2.ioam.02.Maximum_Length 201 2.ioam.03.Flags 202 2.ioam.04.Hop_Lim 203 2.ioam.05.node_id 204 2.ioam.06.Type1  205 2.ioam.07.IOAM_HDR_len1  7 2.ioam.08.Reserved1  207 2.ioam.09.Next_Protocol1 208 2.ioam.10.Type2 209 2.ioam.11.IOAM_HDR_len2 210 2.ioam.12.Reserved2 211 2.ioam.13.Next_Protocol2 212

//////////////  transit device section  /////////////////
end
configure
//define vlan 555 and 666
interface vlan device ${dev} vid 555
exit 
interface vlan device ${dev} vid 666
exit 
// allow port 6 to egress packets in vlan 555
interface range ethernet ${dev}/${port[6]}
switchport allowed vlan add 555 do_not_modify
exit 
// allow port 5 to egress packets in vlan 666
interface range ethernet ${dev}/${port[5]}
switchport allowed vlan add 666 do_not_modify
exit 

// set the mac address (static) of 'next hop' egress eport (0x311) (port 3) to be forwarded from port 5 to port 6 (eport 600)
mac address-table static 00:00:00:B0:1A:11 device ${dev} vlan 555 ethernet ${dev}/600 
// set the mac address (static) of 'next hop' egress eport (0x312) (port 4) to be forwarded from port 6 to port 5 (eport 500)
mac address-table static 00:00:00:B0:1A:12 device ${dev} vlan 666 ethernet ${dev}/500 

// set pvid 555 on port 5
interface ethernet ${dev}/${port[5]}
switchport pvid 555
exit 
// set pvid 666 on port 6
interface ethernet ${dev}/${port[6]}
switchport pvid 666
exit 

// bind the eports to the needed phaThread for 'ioam-ipv4-transit-switch'
do cpss-api call cpssDxChPhaPortThreadIdSet devNum ${dev} portNum 500 enable true phaThreadId 150
do cpss-api call cpssDxChPhaPortThreadIdSet devNum ${dev} portNum 600 enable true phaThreadId 160
// define the info to be used by the phaThread
// the thread to handle traffic to eport 500 (port 5)
pha thread-id-info ioam-transit-switch ipv4 device ${dev} thread-id 150 2.ioam.02.node_id 0xaabbcc 
// the thread to handle traffic to eport 600 (port 6)
pha thread-id-info ioam-transit-switch ipv4 device ${dev} thread-id 160 2.ioam.02.node_id 0xbbccdd 

// map eport 500 to egress on port 5
callCpssAPI cpssDxChBrgEportToPhysicalPortTargetMappingTableSet
<<<PARAMS
{
    { "IN", "GT_U8", "devNum", ${dev} },
    { "IN", "GT_PORT_NUM", "portNum", 500 },
    { "IN", "CPSS_INTERFACE_INFO_STC", "physicalInfoPtr",
        { devPort = {devNum = ${@@test_env.trgHwDev} , portNum = ${port[5]}} }
    }
} 
>>> 
// map eport 600 to egress on port 6
callCpssAPI cpssDxChBrgEportToPhysicalPortTargetMappingTableSet
<<<PARAMS
{
    { "IN", "GT_U8", "devNum", ${dev} },
    { "IN", "GT_PORT_NUM", "portNum", 600 },
    { "IN", "CPSS_INTERFACE_INFO_STC", "physicalInfoPtr",
        { devPort = {devNum = ${@@test_env.trgHwDev} , portNum = ${port[6]}} }
    }
} 
>>> 
