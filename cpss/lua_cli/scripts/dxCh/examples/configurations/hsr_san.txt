// TAG:               HSR-SAN
// Short Description: Configures HSR-SAN switch
// Description:       Configures HSR-SAN (High-availability Seamless Redundancy , for single attached network devices).
end
configure

tpid device ${dev} direction ingress index 0 etherType 0x8100
tpid device ${dev} direction ingress index 1 etherType 0x892F tag-type 6-bytes-tag
tpid ingress profile 0 device ${dev} ether_type_index 0 tpid-range 0
tpid ingress profile 1 device ${dev} ether_type_index 1 tpid-range 1


interface ethernet ${dev}/${ringA}
tpid ingress profile 0 ether_type_index 0 is_default true
tpid ingress profile 1 ether_type_index 1 is_default true 
exit

interface ethernet ${dev}/${ringB}
tpid ingress profile 0 ether_type_index 0 is_default true
tpid ingress profile 1 ether_type_index 1 is_default true 
exit

interface ethernet ${dev}/${interlink}
tpid ingress profile 0 ether_type_index 0 is_default true
exit

//102 divided by 6
access-list device ${dev} pcl-ID 10
rule-id 102 action permit eport-assign ${ePort_ringA} nested-vlan bypass-ingress-pipe
exit

//108 divided by 6
access-list device ${dev} pcl-ID 11
rule-id 108 action permit eport-assign ${ePort_ringB} nested-vlan bypass-ingress-pipe
exit

//114 divided by 6
access-list device ${dev} pcl-ID 12
rule-id 114 action permit eport-assign ${ePort_interlink} bypass-ingress-pipe
exit



interface ethernet ${dev}/${ringA}
service-acl pcl-ID 10 lookup 0
exit
interface ethernet ${dev}/${ringB}
service-acl pcl-ID 11 lookup 0
exit 

interface ethernet ${dev}/${interlink}
service-acl pcl-ID 12 lookup 0
exit 

do cpss-api call cpssDxChHsrPrpfdbPartitionModeSet devNum ${dev} mode CPSS_DXCH_HSR_PRP_FDB_PARTITION_MODE_DDE_3_4_E
do cpss-api call cpssDxChHsrPrpHPortSrcEPortBaseSet devNum ${dev} baseEport ${ePortBase}

callCpssAPI cpssDxChHsrPrpHPortEntrySet
<<<PARAMS
{
    { "IN", "GT_U8", "devNum", ${dev} },
    { "IN", "GT_U32", "hport",      0 },
    { "IN", "CPSS_DXCH_HSR_PRP_HPORT_ENTRY_STC", "infoPtr",
        { pntLookupMode = "CPSS_DXCH_HSR_PRP_PNT_LOOKUP_MODE_DST_AND_SRC_E" ,
          fdbDdlMode = "CPSS_DXCH_HSR_PRP_FDB_DDL_MODE_DDL_E",
          lreRingPortType = "CPSS_DXCH_HSR_PRP_LRE_PORT_TYPE_A_E",
          lreInstance = 0,
          defaultForwardingBmp = 0x6,
          srcIsMeBmp = 0x7,
          srcDuplicateDiscardBmp = 0x0
        }
    }
}
>>>


callCpssAPI cpssDxChHsrPrpHPortEntrySet
<<<PARAMS
{
    { "IN", "GT_U8", "devNum", ${dev} },
    { "IN", "GT_U32", "hport",      1 },
    { "IN", "CPSS_DXCH_HSR_PRP_HPORT_ENTRY_STC", "infoPtr",
        { pntLookupMode = "CPSS_DXCH_HSR_PRP_PNT_LOOKUP_MODE_DST_AND_SRC_E" ,
          fdbDdlMode = "CPSS_DXCH_HSR_PRP_FDB_DDL_MODE_DDL_E",
          lreRingPortType = "CPSS_DXCH_HSR_PRP_LRE_PORT_TYPE_B_E",
          lreInstance = 0,
          defaultForwardingBmp = 0x5,
          srcIsMeBmp = 0x7,
          srcDuplicateDiscardBmp = 0x0
        }
    }
}
>>>

callCpssAPI cpssDxChHsrPrpHPortEntrySet
<<<PARAMS
{
    { "IN", "GT_U8", "devNum", ${dev} },
    { "IN", "GT_U32", "hport",      2 },
    { "IN", "CPSS_DXCH_HSR_PRP_HPORT_ENTRY_STC", "infoPtr",
        { pntLookupMode = "CPSS_DXCH_HSR_PRP_PNT_LOOKUP_MODE_SRC_AND_LEARN_E" ,
          fdbDdlMode = "CPSS_DXCH_HSR_PRP_FDB_DDL_MODE_SKIP_E",
          lreRingPortType = "CPSS_DXCH_HSR_PRP_LRE_PORT_TYPE_A_E",
          lreInstance = 0,
          defaultForwardingBmp = 0x3,
          srcDuplicateDiscardBmp = 0x0,
          destToMeForwardingBmp  = 0x4
        }
    }
}
>>>

callCpssAPI cpssDxChHsrPrpPntEntrySet
<<<PARAMS
{
    { "IN", "GT_U8", "devNum", ${dev} },
    { "IN", "GT_U32", "index",      5 },
    { "IN", "CPSS_DXCH_HSR_PRP_PNT_OPER_ENT", "operation",      "CPSS_DXCH_HSR_PRP_PNT_OPER_SET_INVALID_E" },
    { "IN", "CPSS_DXCH_HSR_PRP_PNT_ENTRY_STC", "infoPtr",
        { 
        }
    }
}
>>>

callCpssAPI cpssDxChHsrPrpPntEntrySet
<<<PARAMS
{
    { "IN", "GT_U8", "devNum", ${dev} },
    { "IN", "GT_U32", "index",      5 },
    { "IN", "CPSS_DXCH_HSR_PRP_PNT_OPER_ENT", "operation",      "CPSS_DXCH_HSR_PRP_PNT_OPER_SET_READY_E" },
    { "IN", "CPSS_DXCH_HSR_PRP_PNT_ENTRY_STC", "infoPtr",
        { streamId = 0x6
        }
    }
}
>>>

callCpssAPI cpssDxChHsrPrpLreInstanceEntrySet
<<<PARAMS
{
    { "IN", "GT_U8", "devNum", ${dev} },
    { "IN", "GT_U32", "index",      0 },
    { "IN", "CPSS_DXCH_HSR_PRP_LRE_INSTANCE_ENTRY_STC", "infoPtr",
        { numOfPorts = 3,
          lowestHPort = 0,
          eVidxMappingBase = 1024
        }
    }
}
>>>

do cpss-api call cpssDxChStreamSngEnableSet devNum ${dev} enable true

// use resetSeqNum = true , to reset the counter from any previous run
callCpssAPI cpssDxChStreamEntrySet
<<<PARAMS
{
    { "IN", "GT_U8", "devNum", ${dev} },
    { "IN", "GT_U32", "index",      6 },
    { "IN", "CPSS_DXCH_STREAM_SNG_IRF_ENTRY_STC", "sngIrfInfoPtr",
        { seqNumAssignmentEnable = true,
          resetSeqNum = true
        }
    }
}
>>>

do cpss-api call cpssDxChBrgVlanPortRemoveTag0IfRxWithoutTag0EnableSet devNum ${dev} portNum ${ringA} enable true
do cpss-api call cpssDxChBrgVlanPortRemoveTag0IfRxWithoutTag0EnableSet devNum ${dev} portNum ${ringB} enable true
do cpss-api call cpssDxChBrgVlanPortRemoveTag0IfRxWithoutTag0EnableSet devNum ${dev} portNum ${interlink} enable true


do cpss-api call cpssDxChBrgVlanEgressPortTagStateModeSet devNum ${dev} portNum ${ringA} stateMode CPSS_DXCH_BRG_VLAN_EPORT_TAG_STATE_EPORT_MODE_E
do cpss-api call cpssDxChBrgVlanEgressPortTagStateModeSet devNum ${dev} portNum ${ringB} stateMode CPSS_DXCH_BRG_VLAN_EPORT_TAG_STATE_EPORT_MODE_E
do cpss-api call cpssDxChBrgVlanEgressPortTagStateModeSet devNum ${dev} portNum ${interlink} stateMode CPSS_DXCH_BRG_VLAN_EPORT_TAG_STATE_EPORT_MODE_E

do cpss-api call cpssDxChBrgVlanEgressPortTagStateSet devNum ${dev} portNum ${ringA} tagCmd CPSS_DXCH_BRG_VLAN_PORT_OUTER_TAG0_INNER_TAG1_CMD_E
do cpss-api call cpssDxChBrgVlanEgressPortTagStateSet devNum ${dev} portNum ${ringB} tagCmd CPSS_DXCH_BRG_VLAN_PORT_OUTER_TAG0_INNER_TAG1_CMD_E
do cpss-api call cpssDxChBrgVlanEgressPortTagStateSet devNum ${dev} portNum ${interlink} tagCmd CPSS_DXCH_BRG_VLAN_PORT_TAG0_CMD_E


callCpssAPI cpssDxChBrgMcEntryWrite
<<<PARAMS
{
    { "IN", "GT_U8", "devNum", ${dev} },
    { "IN", "GT_U16", "vidx",   1024 },
    { "IN", "CPSS_PORTS_BMP_STC", "portBitmapPtr",
        { ports = {
            [0] = ${@@hsrTest1VidxToTargetPortsBmp(1024)}}
        }
    }
}
>>>


callCpssAPI cpssDxChBrgMcEntryWrite
<<<PARAMS
{
    { "IN", "GT_U8", "devNum", ${dev} },
    { "IN", "GT_U16", "vidx",   1025 },
    { "IN", "CPSS_PORTS_BMP_STC", "portBitmapPtr",
        { ports = {
            [0] = ${@@hsrTest1VidxToTargetPortsBmp(1025)}}
        }
    }
}
>>>

callCpssAPI cpssDxChBrgMcEntryWrite
<<<PARAMS
{
    { "IN", "GT_U8", "devNum", ${dev} },
    { "IN", "GT_U16", "vidx",   1026 },
    { "IN", "CPSS_PORTS_BMP_STC", "portBitmapPtr",
        { ports = {
            [0] = ${@@hsrTest1VidxToTargetPortsBmp(1026)}}
        }
    }
}
>>>

callCpssAPI cpssDxChBrgMcEntryWrite
<<<PARAMS
{
    { "IN", "GT_U8", "devNum", ${dev} },
    { "IN", "GT_U16", "vidx",   1027 },
    { "IN", "CPSS_PORTS_BMP_STC", "portBitmapPtr",
        { ports = {
            [0] = ${@@hsrTest1VidxToTargetPortsBmp(1027)}}
        }
    }
}
>>>

callCpssAPI cpssDxChBrgMcEntryWrite
<<<PARAMS
{
    { "IN", "GT_U8", "devNum", ${dev} },
    { "IN", "GT_U16", "vidx",   1028 },
    { "IN", "CPSS_PORTS_BMP_STC", "portBitmapPtr",
        { ports = {
            [0] = ${@@hsrTest1VidxToTargetPortsBmp(1028)}}
        }
    }
}
>>>

callCpssAPI cpssDxChBrgMcEntryWrite
<<<PARAMS
{
    { "IN", "GT_U8", "devNum", ${dev} },
    { "IN", "GT_U16", "vidx",   1029 },
    { "IN", "CPSS_PORTS_BMP_STC", "portBitmapPtr",
        { ports = {
            [0] = ${@@hsrTest1VidxToTargetPortsBmp(1029)}}
        }
    }
}
>>>

callCpssAPI cpssDxChBrgMcEntryWrite
<<<PARAMS
{
    { "IN", "GT_U8", "devNum", ${dev} },
    { "IN", "GT_U16", "vidx",   1030 },
    { "IN", "CPSS_PORTS_BMP_STC", "portBitmapPtr",
        { ports = {
            [0] = ${@@hsrTest1VidxToTargetPortsBmp(1030)}}
        }
    }
}
>>>

callCpssAPI cpssDxChBrgMcEntryWrite
<<<PARAMS
{
    { "IN", "GT_U8", "devNum", ${dev} },
    { "IN", "GT_U16", "vidx",   1031 },
    { "IN", "CPSS_PORTS_BMP_STC", "portBitmapPtr",
        { ports = {
            [0] = ${@@hsrTest1VidxToTargetPortsBmp(1031)}}
        }
    }
}
>>>

do cpss-api call cpssDxChBrgNestVlanPortTargetUseIngressModeSet devNum ${dev} portNum ${ringA} mode CPSS_DXCH_BRG_NEST_VLAN_TARGET_USE_INGRESS_MODE_IGNORE_FORCE_UNTAGGED_E
do cpss-api call cpssDxChBrgNestVlanPortTargetUseIngressModeSet devNum ${dev} portNum ${ringB} mode CPSS_DXCH_BRG_NEST_VLAN_TARGET_USE_INGRESS_MODE_IGNORE_FORCE_UNTAGGED_E
do cpss-api call cpssDxChBrgNestVlanPortTargetUseIngressModeSet devNum ${dev} portNum ${interlink} mode CPSS_DXCH_BRG_NEST_VLAN_TARGET_USE_INGRESS_MODE_IGNORE_E


callCpssAPI cpssDxChBrgVlanPort8BTagInfoSet
<<<PARAMS
{
    { "IN", "GT_U8", "devNum", ${dev} },
    { "IN", "CPSS_DIRECTION_ENT", "direction",   "CPSS_DIRECTION_BOTH_E" },
    { "IN", "GT_U32", "tpidEntryIndex",   1 },
    { "IN", "CPSS_DXCH_BRG_VLAN_8B_TAG_PARSE_CONFIG_STC", "parseConfigPtr",
        {
            enable = true,
            extractedValueOffset = 2,
            hsrTag = true
        }
    }
}
>>>

tpid device ${dev} direction egress index 0 etherType 0x8100
tpid device ${dev} direction egress index 1 etherType 0x892F tag-type 6-bytes-tag

interface ethernet ${dev}/${ringA}
tpid egress bind 0 ether_type_index 0
tpid egress bind 1 ether_type_index 1
exit
 
interface ethernet ${dev}/${ringB}
tpid egress bind 0 ether_type_index 0
tpid egress bind 1 ether_type_index 1
exit

interface ethernet ${dev}/${interlink}
tpid egress bind 0 ether_type_index 0
exit


