--********************************************************************************
--*              (c), Copyright 2010, Marvell International Ltd.                 *
--* THIS CODE CONTAINS CONFIDENTIAL INFORMATION OF MARVELL SEMICONDUCTOR, INC.   *
--* NO RIGHTS ARE GRANTED HEREIN UNDER ANY PATENT, MASK WORK RIGHT OR COPYRIGHT  *
--* OF MARVELL OR ANY THIRD PARTY. MARVELL RESERVES THE RIGHT AT ITS SOLE        *
--* DISCRETION TO REQUEST THAT THIS CODE BE IMMEDIATELY RETURNED TO MARVELL.     *
--* THIS CODE IS PROVIDED "AS IS". MARVELL MAKES NO WARRANTIES, EXPRESSED,       *
--* IMPLIED OR OTHERWISE, REGARDING ITS ACCURACY, COMPLETENESS OR PERFORMANCE.   *
--********************************************************************************
--* dce_qcn_cnm_priority.lua
--*
--* DESCRIPTION:
--*       configuring of the priority to use for all Congestion Notification 
--*       Messages (CNMs) transmitted by the device
--*
--* FILE REVISION NUMBER:
--*       $Revision: 2 $
--*
--********************************************************************************

--includes

--constants 

local DEFAULT_CNM_PRIORITY  = 0

-- ************************************************************************
---
--  dce_qcn_cnm_func
--        @description  configures of the priority to use for all  
--                      Congestion Notification Messages (CNMs) transmitted
--                      by the device
--
--        @param params         - params["priority"]: 802.1Q Priority;
--                                params["all_device"]: all or given 
--                                devices iterating property;
--                                params["flagNo"]: no command property
--
--        @return       true on success, otherwise false and error message
--
local function dce_qcn_cnm_func(params)
    -- Common variables declaration.
    local result, values
    local devFamily, devNum, portNum
    local command_data = Command_Data()
    -- Command  specific variables declaration.
    local priority
    
    -- Common variables initialization.
    command_data:initAllDeviceRange(params)
    
    -- Command specific variables initialization.
    priority        = command_data:getValueIfFlagNoIsNil(params, 
                                                         params["priority"], 
                                                         DEFAULT_CNM_PRIORITY)

    -- Main port handling cycle.
    if true == command_data["status"]               then
        local iterator
        for iterator, devNum, portNum in command_data:getDevicesIterator() do
            command_data:clearDeviceStatus()  
                    
            command_data:clearLocalStatus() 
            
            devFamily = wrLogWrapper("wrlCpssDeviceFamilyGet", "(devNum)", devNum)
            
            if ("CPSS_PP_FAMILY_DXCH_LION_E"  == devFamily)     or
               ("CPSS_PP_FAMILY_DXCH_LION2_E" == devFamily)     then
                -- Seting of traffic class queue associated with CN frames 
                -- generated by device.
                if true == command_data["local_status"]     then   
                    result, values = 
                        cpssPerDeviceParamSet("cpssDxChPortCnFrameQueueSet",
                                              devNum, priority, "tcQueue", 
                                              "GT_U8")  
                    if     0x10 == result   then
                        command_data:setFailEntryStatus() 
                        command_data:addWarning("It is not allowed to set " ..
                                                "priority %d to use for all " ..
                                                "Congestion Notification " ..
                                                "Messages on device %d.", 
                                                priority, devNum) 
                    elseif    0 ~= result   then
                        command_data:setFailEntryAndLocalStatus()
                        command_data:addError("Error at setting of priority " ..
                                              "%d to use for all Congestion " ..
                                              "Notification Messages on " ..
                                              "device %d: %s.", priority, 
                                              devNum, returnCodes[result])
                    end               
                end                
            else
                command_data:setFailDeviceStatus() 
                command_data:addWarning("Family of device %d does not " ..
                                        "supported.", devNum)
            end
                
            command_data:updateStatus()
                        
            command_data:updateDevices()                
        end
        
        command_data:addWarningIfNoSuccessDevices(
            "Can not set priority to use for all Congestion Notification " ..
            "Messages for all processed devices.")            
    end       
    
    command_data:analyzeCommandExecution()
     
    command_data:printCommandExecutionResults()
           
    return command_data:getCommandExecutionResults()                 
end


--------------------------------------------------------------------------------
-- command registration: dce qcn cnm
--------------------------------------------------------------------------------
CLI_addHelp("config",       "dce",              "DCE subcommands")
CLI_addHelp("config",       "dce qcn",          "DCE QCN subcommands")
CLI_addCommand("config",    "dce qcn cnm", {
  func   = dce_qcn_cnm_func,
  help   = "Configuring of the priority to use for all Congestion " ..
           "Notification Messages (CNMs) transmitted by the device",
  params = {
    { type = "named",
          "#priority",
          "#all_device",
        mandatory = { "priority" }
    }
  }
})

--------------------------------------------------------------------------------
-- command registration: no dce qcn cnm
--------------------------------------------------------------------------------
CLI_addHelp("config",       "no dce",           "DCE subcommands")
CLI_addHelp("config",       "no dce qcn",       "DCE QCN subcommands")
CLI_addCommand("config",    "no dce qcn cnm", {
  func   = function(params) 
               params.flagNo = true
               dce_qcn_cnm_func(params)
           end,
  help   = "Setting of default of the priority to use for all Congestion " ..
           "Notification Messages (CNMs) transmitted by the device",
  params = {
      { type = "named",
          "#priority",
          "#all_device",
        mandatory = { "priority" }
      }
  }
})
