/*******************************************************************************
*              (c), Copyright 2001, Marvell International Ltd.                 *
* THIS CODE CONTAINS CONFIDENTIAL INFORMATION OF MARVELL SEMICONDUCTOR, INC.   *
* NO RIGHTS ARE GRANTED HEREIN UNDER ANY PATENT, MASK WORK RIGHT OR COPYRIGHT  *
* OF MARVELL OR ANY THIRD PARTY. MARVELL RESERVES THE RIGHT AT ITS SOLE        *
* DISCRETION TO REQUEST THAT THIS CODE BE IMMEDIATELY RETURNED TO MARVELL.     *
* THIS CODE IS PROVIDED "AS IS". MARVELL MAKES NO WARRANTIES, EXPRESSED,       *
* IMPLIED OR OTHERWISE, REGARDING ITS ACCURACY, COMPLETENESS OR PERFORMANCE.   *
********************************************************************************
*/
/**
********************************************************************************
* @file cpssPxPortCn.h
*
* @brief CPSS Pipe Port Congestion Notification API.
*
* @version   1
********************************************************************************
*/

#ifndef __cpssPxPortCnh
#define __cpssPxPortCnh

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#include <cpss/common/cpssTypes.h>
#include <cpss/px/cpssPxTypes.h>
#include <cpss/px/cos/private/prvCpssPxCoS.h>
#include <cpss/px/port/cpssPxPortTxTailDrop.h>

/**
* @enum CPSS_PX_PORT_CN_PACKET_LENGTH_ENT
 *
 * @brief Enumeration of packet length used by the CN frames triggering logic.
*/
typedef enum{

    /** Original packet length in bytes */
    CPSS_PX_PORT_CN_LENGTH_ORIG_PACKET_E,

    /** 1.5KB */
    CPSS_PX_PORT_CN_LENGTH_1_5_KB_E,

    /** 2KB */
    CPSS_PX_PORT_CN_LENGTH_2_KB_E,

    /** 10KB */
    CPSS_PX_PORT_CN_LENGTH_10_KB_E

} CPSS_PX_PORT_CN_PACKET_LENGTH_ENT;

/**
* @struct CPSS_PX_PORT_CN_SAMPLE_INTERVAL_ENTRY_STC
 *
 * @brief CN Sample Interval Table entry.
*/
typedef struct{

    /** @brief CN sampling interval in resolution of 16 bytes.
     *  (0..0xFFFF)
     */
    GT_U32 interval;

    /** @brief bitmap that indicates which sampling interval bits
     *  are randomize. 0 - don't randomize; 1 - randomize.
     *  (0..0xFFFF)
     *  Comments:
     *  None.
     */
    GT_U32 randBitmap;

} CPSS_PX_PORT_CN_SAMPLE_INTERVAL_ENTRY_STC;

/**
* @struct CPSS_PX_PORT_CN_FB_CALCULATION_CONFIG_STC
 *
 * @brief Feedback calculation configurations.
*/
typedef struct{

    /** Exponent weight for Fb calculation.( */
    GT_32 wExp;

    /** @brief bits that are used for qFb calculation.
     *  qFb = Fb[fbLsb+5:fbLsb] (0..0x1F)
     */
    GT_U32 fbLsb;

    /** @brief GT_TRUE: enables Delta (Qlen
     *  inclusion in Fb calculation
     *  GT_FALSE: Delta (Qlen-QlenOld) is not included
     *  in Fb calculation.
     */
    GT_BOOL deltaEnable;

    /** @brief Minimum value of Fb.
     *  (APPLICABLE RANGES: 0..0xFFFFFF)
     *  If |Fb| < FbMin then |Fb| is set to 0.
     */
    GT_U32 fbMin;

    /** @brief Maximum value of |Fb|.
     *  (APPLICABLE RANGES: 0..0xFFFFFF)
     *  If |Fb| > FbMax then |Fb| is set to FbMax.
     *  Comments:
     *  None.
     */
    GT_U32 fbMax;

} CPSS_PX_PORT_CN_FB_CALCULATION_CONFIG_STC;

/**
* @enum CPSS_PX_PORT_CN_MESSAGE_TYPE_ENT
 *
 * @brief Enumeration describes congestion notification message type
*/
typedef enum{

    /** Quantized Congestion Notification protocol message */
    CPSS_PX_PORT_CN_MESSAGE_TYPE_QCN_E,

    /** Cross Chip Flow Control message */
    CPSS_PX_PORT_CN_MESSAGE_TYPE_CCFC_E

} CPSS_PX_PORT_CN_MESSAGE_TYPE_ENT;

/**
* @struct CPSS_PX_PORT_CNM_GENERATION_CONFIG_STC
 *
 * @brief CN message generation configurations
*/
typedef struct{

    /** @brief The packet type associated with the QCN frames on the receive port.
     *  (APPLICABLE RANGES: 0..31).
     */
    CPSS_PX_PACKET_TYPE packetType;

    /** @brief QCN frames are assigned with a new priority, based on this configuration.
     *  QCN en-queuing is done based on this priority.
     *  (APPLICABLE RANGES: 0..7).
     */
    GT_U32 priority;

    /** @brief QCN frames are assigned with a new drop precedence,
     *  based on this configuration.
     */
    CPSS_DP_LEVEL_ENT dropPrecedence;

    /** @brief QCN frames generated by the local device are assigned
     *  with a new Traffic Class used for priority flow control triggering,
     *  based on this configuration.
     *  (APPLICABLE RANGES: 0..7).
     */
    GT_U32 tc4pfc;

    /** @brief - Enables the QCN packet type assignment for QCN frames
     *  generated on the local device.
     *  GT_FALSE - Disable
     *  GT_TRUE  - Enable
     */
    GT_BOOL localGeneratedPacketTypeAssignmentEnable;

    /** @brief The QCN packet type assigned to the QCN frames
     *  which is generated on the local device.
     *  (APPLICABLE RANGES: 0..31).
     *  Comments:
     *  None.
     */
    CPSS_PX_PACKET_TYPE localGeneratedPacketType;

} CPSS_PX_PORT_CNM_GENERATION_CONFIG_STC;

/**
* @struct CPSS_PX_PORT_CN_PROFILE_CONFIG_STC
 *
 * @brief CN Profile configurations.
*/
typedef struct{

    /** @brief GT_FALSE
     *  does not generate CN messages.
     *  GT_TRUE - CN Aware: This queue is enabled
     *  for triggering CN messages.
     */
    GT_BOOL cnAware;

    /** buffer limit threshold for triggering CN frame. */
    GT_U32 threshold;

    /** @brief configurable factor, which dictates which factor
     *  of the free buffers are available to the port or
     *  queue. The greater the Alpha, the more resources
     *  can be used, and the packet memory utilization
     *  increases. However, greater Alpha results in
     *  slower adaptation to workload changes.
     *  Comments:
     *  None.
     */
    CPSS_PX_PORT_TX_TAIL_DROP_DBA_ALPHA_ENT alpha;

} CPSS_PX_PORT_CN_PROFILE_CONFIG_STC;

/**
* @internal cpssPxPortCnModeEnableSet function
* @endinternal
*
* @brief   Enable/Disable Congestion Notification (CN) mechanism.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] enable                   - Enable/disable congestion notification mechanism.
*                                      GT_TRUE    - Enable congestion notification mechanism.
*                                      GT_FALSE   - Disable congestion notification mechanism.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong device number
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/
GT_STATUS cpssPxPortCnModeEnableSet
(
    IN GT_SW_DEV_NUM            devNum,
    IN GT_BOOL                  enable
);

/**
* @internal cpssPxPortCnModeEnableGet function
* @endinternal
*
* @brief   Get the current status of Congestion Notification (CN) mode.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
*
* @param[out] enablePtr                - (pointer to) status of congestion notification mechanism
*                                      GT_TRUE    - congestion notification mechanism is enabled.
*                                      GT_FALSE   - congestion notification mechanism is disabled.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PTR               - on NULL pointer.
* @retval GT_BAD_PARAM             - on wrong device number
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/
GT_STATUS cpssPxPortCnModeEnableGet
(
    IN GT_SW_DEV_NUM            devNum,
    OUT GT_BOOL                 *enablePtr
);

/**
* @internal cpssPxPortCnPacketLengthSet function
* @endinternal
*
* @brief   Set packet length used by the CN frames triggering logic.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] packetLength             - packet length.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong device number or packet length.
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/
GT_STATUS cpssPxPortCnPacketLengthSet
(
    IN GT_SW_DEV_NUM                        devNum,
    IN CPSS_PX_PORT_CN_PACKET_LENGTH_ENT    packetLength
);

/**
* @internal cpssPxPortCnPacketLengthGet function
* @endinternal
*
* @brief   Get packet length used by the CN frames triggering logic.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
*
* @param[out] packetLengthPtr          - (pointer to) packet length.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PTR               - on NULL pointer.
* @retval GT_BAD_PARAM             - on wrong device number
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/
GT_STATUS cpssPxPortCnPacketLengthGet
(
    IN GT_SW_DEV_NUM                        devNum,
    OUT CPSS_PX_PORT_CN_PACKET_LENGTH_ENT  *packetLengthPtr
);

/**
* @internal cpssPxPortCnQueueStatusModeEnableSet function
* @endinternal
*
* @brief   Enable/Disable queue status mode. When enabled, CNM is sent to a
*         configurable target that examines the queue status.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] enable                   - GT_TRUE: CNM is sent to a targetDev/targetPort.
*                                      GT_FALSE: CNM is sent to a sampled packet's source.
* @param[in] targetPort               - Target port for the CNM.
*                                      Relevant only if enable==GT_TRUE.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong device number
* @retval GT_OUT_OF_RANGE          - on out of range value
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/
GT_STATUS cpssPxPortCnQueueStatusModeEnableSet
(
    IN GT_SW_DEV_NUM            devNum,
    IN GT_BOOL                  enable,
    IN GT_PORT_NUM              targetPort
);

/**
* @internal cpssPxPortCnQueueStatusModeEnableGet function
* @endinternal
*
* @brief   Gets the current status of queue status mode.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
*
* @param[out] enablePtr                - (pointer to) status of queue status mode.
*                                      GT_TRUE: CNM is sent to a targetDev/targetPort.
*                                      GT_FALSE: CNM is sent to a sampled packet's source.
* @param[out] targetPortPtr            - (pointer to) Target port for the CNM.
*                                      Relevant only if enable==GT_TRUE.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PTR               - on NULL pointer
* @retval GT_BAD_PARAM             - on wrong device number
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/
GT_STATUS cpssPxPortCnQueueStatusModeEnableGet
(
    IN GT_SW_DEV_NUM            devNum,
    OUT GT_BOOL                 *enablePtr,
    OUT GT_PORT_NUM             *targetPortPtr
);

/**
* @internal cpssPxPortCnSampleEntrySet function
* @endinternal
*
* @brief   Set CN sample interval entry.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] entryIndex               - index: qFb 3 msb. (0..7)
* @param[in] entryPtr                 - (pointer to) entry settings.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong device number, or entry index
* @retval GT_BAD_PTR               - on NULL pointer
* @retval GT_OUT_OF_RANGE          - on out of range value
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note 1.To implement CCFC functionality set entryPtr fields to:
*       interval = (MTU+256b)/16
*       randBitmap = 0
*       2.To achieve uniform distribution of random values,
*       set the Interval LSbits to be randomized to 1.
*       For example, if Interval = 0xF0 and RndRange = 0x0F
*       then the Sampling Interval is a random value in [0xF0, 0xFF].
*
*/
GT_STATUS cpssPxPortCnSampleEntrySet
(
    IN GT_SW_DEV_NUM            devNum,
    IN GT_U8                    entryIndex,
    IN CPSS_PX_PORT_CN_SAMPLE_INTERVAL_ENTRY_STC *entryPtr
);

/**
* @internal cpssPxPortCnSampleEntryGet function
* @endinternal
*
* @brief   Get CN sample interval entry.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] entryIndex               - index: qFb 3 msb. (0..7)
*
* @param[out] entryPtr                 - (pointer to) entry settings.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong device number, or entry index
* @retval GT_BAD_PTR               - on NULL pointer
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/
GT_STATUS cpssPxPortCnSampleEntryGet
(
    IN GT_SW_DEV_NUM            devNum,
    IN  GT_U8                   entryIndex,
    OUT CPSS_PX_PORT_CN_SAMPLE_INTERVAL_ENTRY_STC *entryPtr
);

/**
* @internal cpssPxPortCnFbCalcConfigSet function
* @endinternal
*
* @brief   Set Fb (Feedback) calculation configuration.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] fbCalcCfgPtr             - (pointer to) feedback Calculation configurations.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PTR               - on NULL pointer
* @retval GT_BAD_PARAM             - on wrong device number
* @retval GT_OUT_OF_RANGE          - on out of range value
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/
GT_STATUS cpssPxPortCnFbCalcConfigSet
(
    IN GT_SW_DEV_NUM            devNum,
    IN CPSS_PX_PORT_CN_FB_CALCULATION_CONFIG_STC *fbCalcCfgPtr
);

/**
* @internal cpssPxPortCnFbCalcConfigGet function
* @endinternal
*
* @brief   Get Fb (Feedback) calculation configuration.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
*
* @param[out] fbCalcCfgPtr             - (pointer to) feedback Calculation configurations.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PTR               - on NULL pointer
* @retval GT_BAD_PARAM             - on wrong device number
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/
GT_STATUS cpssPxPortCnFbCalcConfigGet
(
    IN GT_SW_DEV_NUM            devNum,
    OUT CPSS_PX_PORT_CN_FB_CALCULATION_CONFIG_STC *fbCalcCfgPtr
);

/**
* @internal cpssPxPortCnMessageTriggeringStateSet function
* @endinternal
*
* @brief   Set CNM Triggering State Variables
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] portNum                  - port number.
* @param[in] tcQueue                  - traffic class queue (0..7).
* @param[in] qcnSampleInterval        -  parameter that defines the probability to trigger
*                                      the next CN frame based on the current value of the
*                                      calculated feedback (Fb), measured in Bytes.
*                                      (APPLICABLE RANGES: 0..0xFFFFF)
* @param[in] qlenOld                  - a snapshot of current length of the queue in buffers,
*                                      taken when the QcnSampleInterval expires.
*                                      (APPLICABLE RANGES: 0..0xFFFFF)
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong parameter
* @retval GT_OUT_OF_RANGE          - on out of range values
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note qlenOld reset value and QcnSampleInterval init value must be set by the
*       application prior to configuring the queue to be CN aware
*
*/
GT_STATUS cpssPxPortCnMessageTriggeringStateSet
(
    IN GT_SW_DEV_NUM            devNum,
    IN GT_PHYSICAL_PORT_NUM     portNum,
    IN GT_U8                    tcQueue,
    IN GT_U32                   qcnSampleInterval,
    IN GT_U32                   qlenOld
);

/**
* @internal cpssPxPortCnMessageTriggeringStateGet function
* @endinternal
*
* @brief   Get CNM Triggering State Variables
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] portNum                  - port number.
* @param[in] tcQueue                  - traffic class queue (0..7).
*
* @param[out] qcnSampleIntervalPtr     -  (pointer to) parameter that defines the probability to trigger
*                                      the next CN frame based on the current value of the
*                                      calculated feedback (Fb), measured in Bytes.
* @param[out] qlenOldPtr               - (pointer to) snapshot of current length of the queue in buffers,
*                                      taken when the QcnSampleInterval expires.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong parameter
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note qlenOld reset value and QcnSampleInterval init value must be set by the
*       application prior to configuring the queue to be CN aware
*
*/
GT_STATUS cpssPxPortCnMessageTriggeringStateGet
(
    IN GT_SW_DEV_NUM            devNum,
    IN  GT_PHYSICAL_PORT_NUM    portNum,
    IN  GT_U8                   tcQueue,
    OUT GT_U32                  *qcnSampleIntervalPtr,
    OUT GT_U32                  *qlenOldPtr
);

/**
* @internal cpssPxPortCnMessageGenerationConfigSet function
* @endinternal
*
* @brief   Set CNM generation configuration.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] cnmGenerationCfgPtr      - (pointer to) CNM generation configurations.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PTR               - on NULL pointer
* @retval GT_BAD_PARAM             - on wrong device number
* @retval GT_OUT_OF_RANGE          - on out of range value
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/
GT_STATUS cpssPxPortCnMessageGenerationConfigSet
(
    IN GT_SW_DEV_NUM            devNum,
    IN CPSS_PX_PORT_CNM_GENERATION_CONFIG_STC *cnmGenerationCfgPtr
);

/**
* @internal cpssPxPortCnMessageGenerationConfigGet function
* @endinternal
*
* @brief   Get CNM generation configuration.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
*
* @param[out] cnmGenerationCfgPtr      - (pointer to) CNM generation configurations.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PTR               - on NULL pointer
* @retval GT_BAD_PARAM             - on wrong device number
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/
GT_STATUS cpssPxPortCnMessageGenerationConfigGet
(
    IN GT_SW_DEV_NUM            devNum,
    OUT CPSS_PX_PORT_CNM_GENERATION_CONFIG_STC *cnmGenerationCfgPtr
);

/**
* @internal cpssPxPortCnMessagePortMapEntrySet function
* @endinternal
*
* @brief   Set port map configuration per target port
*         for the triggered QCN incoming descriptor.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] portNum                  - physical target port number.
* @param[in] portsBmp                 - the bitmap of ports represent the target port number.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong device or port number
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/
GT_STATUS cpssPxPortCnMessagePortMapEntrySet
(
    IN  GT_SW_DEV_NUM                   devNum,
    IN  GT_PHYSICAL_PORT_NUM            portNum,
    IN  CPSS_PX_PORTS_BMP               portsBmp
);

/**
* @internal cpssPxPortCnMessagePortMapEntryGet function
* @endinternal
*
* @brief   Get port map configuration per target port
*         for the triggered QCN incoming descriptor.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] portNum                  - physical target port number.
*
* @param[out] portsBmpPtr              - (pointer to) the bitmap of ports represent the target port number.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PTR               - on NULL pointer
* @retval GT_BAD_PARAM             - on wrong device or port number
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/
GT_STATUS cpssPxPortCnMessagePortMapEntryGet
(
    IN  GT_SW_DEV_NUM                   devNum,
    IN  GT_PHYSICAL_PORT_NUM            portNum,
    OUT CPSS_PX_PORTS_BMP               *portsBmpPtr
);

/**
* @internal cpssPxPortCnTerminationEnableSet function
* @endinternal
*
* @brief   Enable/Disable termination of CNM (Congestion Notification Message) on given port.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] portNum                  - port number.
* @param[in] enable                   - GT_TRUE: enable. CNM is terminated, i.e not transmited on this port.
*                                      GT_FALSE: disable. CNM isn't terminated, i.e transmited on this port.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong device or port number
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/
GT_STATUS cpssPxPortCnTerminationEnableSet
(
    IN  GT_SW_DEV_NUM                   devNum,
    IN  GT_PHYSICAL_PORT_NUM            portNum,
    IN  GT_BOOL                         enable
);

/**
* @internal cpssPxPortCnTerminationEnableGet function
* @endinternal
*
* @brief   Gets the status of CNM termination on given port.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] portNum                  - port number.
*
* @param[out] enablePtr                - (pointer to)
*                                      GT_TRUE: enable. CNM is terminated, i.e not transmited on this port.
*                                      GT_FALSE: disable. CNM isn't terminated, i.e transmited on this port.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PTR               - on NULL pointer
* @retval GT_BAD_PARAM             - on wrong device number or port
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/
GT_STATUS cpssPxPortCnTerminationEnableGet
(
    IN  GT_SW_DEV_NUM                   devNum,
    IN  GT_PHYSICAL_PORT_NUM            portNum,
    OUT GT_BOOL                         *enablePtr
);

/**
* @internal cpssPxPortCnFcEnableSet function
* @endinternal
*
* @brief   Enable/Disable generation of flow control packets as result of CN
*         frame termination or Panic Pause.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] portNum                  - port number.
* @param[in] enable                   - Enable/Disable generation of flow control packets
*                                      on specific port.
*                                      GT_TRUE:  enable. Flow control packets can be issued.
*                                      GT_FALSE: disable. Flow control packets can't be issued.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/
GT_STATUS cpssPxPortCnFcEnableSet
(
    IN GT_SW_DEV_NUM            devNum,
    IN GT_PHYSICAL_PORT_NUM     portNum,
    IN GT_BOOL                  enable
);

/**
* @internal cpssPxPortCnFcEnableGet function
* @endinternal
*
* @brief   Get the status of generation of flow control packets as result of CN
*         frame termination or Panic Pause on a given port.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] portNum                  - port number.
*
* @param[out] enablePtr                - (pointer to) state of specific port to generate
*                                      flow control packets.
*                                      GT_TRUE:  enable. Flow control packets is issued.
*                                      GT_FALSE: disable. Flow control packets is not issued.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PTR               - on NULL pointer.
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/
GT_STATUS cpssPxPortCnFcEnableGet
(
    IN GT_SW_DEV_NUM            devNum,
    IN  GT_PHYSICAL_PORT_NUM    portNum,
    OUT GT_BOOL                 *enablePtr
);

/**
* @internal cpssPxPortCnFcTimerSet function
* @endinternal
*
* @brief   Set timer value for the IEEE 802.3x/PFC frame issued as result
*         of CN frame termination.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] portNum                  - port number.
* @param[in] index                    -  (APPLICABLE RANGES: 0..7)
* @param[in] timer                    - 802.3x/PFC pause time (APPLICABLE RANGES: 0..0xFFFF).
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number, device or speed index
* @retval GT_OUT_OF_RANGE          - on out of range value
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/
GT_STATUS cpssPxPortCnFcTimerSet
(
    IN GT_SW_DEV_NUM            devNum,
    IN GT_PHYSICAL_PORT_NUM     portNum,
    IN GT_U32                   index,
    IN GT_U32                   timer
);

/**
* @internal cpssPxPortCnFcTimerGet function
* @endinternal
*
* @brief   Get timer value for the IEEE 802.3x/PFC frame issued as result
*         of CN frame termination.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] portNum                  - port number.
* @param[in] index                    -  (APPLICABLE RANGES: 0..7)
*
* @param[out] timerPtr                 - (pointer to) 802.3x/PFC Pause time.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PTR               - on NULL pointer
* @retval GT_BAD_PARAM             - on wrong port number, device or speed index
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/
GT_STATUS cpssPxPortCnFcTimerGet
(
    IN GT_SW_DEV_NUM            devNum,
    IN  GT_PHYSICAL_PORT_NUM    portNum,
    IN  GT_U32                  index,
    OUT GT_U32                  *timerPtr
);

/**
* @internal cpssPxPortCnProfileQueueConfigSet function
* @endinternal
*
* @brief   Sets CN profile configurations for given tc queue.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] profileSet               - profile set.
* @param[in] tcQueue                  - traffic class queue (0..7).
* @param[in] cnProfileCfgPtr          - pointer to CN Profile configurations.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PTR               - on NULL pointer
* @retval GT_BAD_PARAM             - on wrong device number, profile set
*                                       or traffic class queue
* @retval GT_OUT_OF_RANGE          - on out of range threshold value
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note CN Profile is part of the Tail-Drop Profile.
*       To bind port to Tail-Drop Profile use cpssPxPortTxTailDropProfileIdSet.
*
*/
GT_STATUS cpssPxPortCnProfileQueueConfigSet
(
    IN GT_SW_DEV_NUM                                devNum,
    IN CPSS_PX_PORT_TX_TAIL_DROP_PROFILE_SET_ENT    profileSet,
    IN GT_U32                                       tcQueue,
    IN CPSS_PX_PORT_CN_PROFILE_CONFIG_STC           *cnProfileCfgPtr
);

/**
* @internal cpssPxPortCnProfileQueueConfigGet function
* @endinternal
*
* @brief   Gets CN profile configurations for given tc queue.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] profileSet               - profile set.
* @param[in] tcQueue                  - traffic class queue (0..7).
*
* @param[out] cnProfileCfgPtr          - pointer to CN Profile configurations.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PTR               - on NULL pointer.
* @retval GT_BAD_PARAM             - on wrong device number, profile set
*                                       or traffic class queue
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/
GT_STATUS cpssPxPortCnProfileQueueConfigGet
(
    IN  GT_SW_DEV_NUM                               devNum,
    IN  CPSS_PX_PORT_TX_TAIL_DROP_PROFILE_SET_ENT   profileSet,
    IN  GT_U32                                      tcQueue,
    OUT CPSS_PX_PORT_CN_PROFILE_CONFIG_STC          *cnProfileCfgPtr
);

/**
* @internal cpssPxPortCnAvailableBuffSet function
* @endinternal
*
* @brief   Set amount of buffers available for dynamic allocation for CN.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] availableBuff            - amount of buffers available for dynamic allocation for
*                                      CN (APPLICABLE RANGES: 0..0x0FFFFF).
*/
GT_STATUS cpssPxPortCnAvailableBuffSet
(
    IN  GT_SW_DEV_NUM   devNum,
    IN  GT_U32          availableBuff
);

/**
* @internal cpssPxPortCnAvailableBuffGet function
* @endinternal
*
* @brief   Get amount of buffers available for dynamic allocation for CN.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
*
* @param[out] availableBuffPtr         - pointer to amount of buffers available for dynamic
*                                      allocation for CN.
*                                      RETURN:
*                                      GT_OK                    - on success
*                                      GT_FAIL                  - on error
*                                      GT_BAD_PTR               - on NULL pointer
*                                      GT_BAD_PARAM             - on wrong device number
*                                      GT_HW_ERROR              - on hardware error
*                                      GT_NOT_APPLICABLE_DEVICE - on not applicable device
*                                      COMMENTS:
*                                      None.
*/
GT_STATUS cpssPxPortCnAvailableBuffGet
(
    IN  GT_SW_DEV_NUM   devNum,
    OUT GT_U32          *availableBuffPtr
);

/**
* @internal cpssPxPortCnMessageTypeSet function
* @endinternal
*
* @brief   Sets congestion notification message type - QCN or CCFC
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] mType                    - CN message type
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong device number
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/
GT_STATUS cpssPxPortCnMessageTypeSet
(
    IN  GT_SW_DEV_NUM                       devNum,
    IN  CPSS_PX_PORT_CN_MESSAGE_TYPE_ENT    mType
);

/**
* @internal cpssPxPortCnMessageTypeGet function
* @endinternal
*
* @brief   Gets congestion notification message type - QCN or CCFC
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
*
* @param[out] mTypePtr                 - (pointer to) CN message type
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong device number
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - on NULL pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/
GT_STATUS cpssPxPortCnMessageTypeGet
(
    IN  GT_SW_DEV_NUM                       devNum,
    OUT CPSS_PX_PORT_CN_MESSAGE_TYPE_ENT    *mTypePtr
);

#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif /* __cpssPxPortCnh */

