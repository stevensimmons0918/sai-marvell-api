/*******************************************************************************
*              (c), Copyright 2001, Marvell International Ltd.                 *
* THIS CODE CONTAINS CONFIDENTIAL INFORMATION OF MARVELL SEMICONDUCTOR, INC.   *
* NO RIGHTS ARE GRANTED HEREIN UNDER ANY PATENT, MASK WORK RIGHT OR COPYRIGHT  *
* OF MARVELL OR ANY THIRD PARTY. MARVELL RESERVES THE RIGHT AT ITS SOLE        *
* DISCRETION TO REQUEST THAT THIS CODE BE IMMEDIATELY RETURNED TO MARVELL.     *
* THIS CODE IS PROVIDED "AS IS". MARVELL MAKES NO WARRANTIES, EXPRESSED,       *
* IMPLIED OR OTHERWISE, REGARDING ITS ACCURACY, COMPLETENESS OR PERFORMANCE.   *
********************************************************************************
*/
/**
********************************************************************************
* @file prvCpssDxChHwRegAddrVer1_ppDb.h
*
* @brief This file includes definitions of all different 'eArch' registers
* addresses to be used by all functions accessing PP registers.
* a variable of type PRV_CPSS_DXCH_PP_REGS_ADDR_VER1_STC should be allocated
* for each PP type.
*
* @version   1
********************************************************************************
*/
#ifndef __PRV_CPSS_DXCH_HW_REG_ADDR_VER1_PP_DB_H
#define __PRV_CPSS_DXCH_HW_REG_ADDR_VER1_PP_DB_H

#include <cpss/dxCh/dxChxGen/cpssHwInit/cpssDxChTables.h>
#include <cpssDriver/pp/prvCpssDrvPpDefs.h>

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

/*global variables macros*/
#define PRV_SHARED_HW_INIT_REG_V1_DB_VAR_SET(_var,_value)\
      PRV_SHARED_GLOBAL_VAR_SET(mainPpDrvMod.dxChCpssHwInit.regV1Src._var,_value)

#define PRV_SHARED_HW_INIT_REG_V1_DB_VAR_GET(_var)\
      PRV_SHARED_GLOBAL_VAR_GET(mainPpDrvMod.dxChCpssHwInit.regV1Src._var)

/* define invalid base address (use 0x1 as LSBits to allow cpssDriver to catch
  access to not valid registers/units and not crash on the device/simulation on
  non-exists memory)
  the cpssDriver will issue 'CPSS_LOG_ERROR_AND_RETURN_MAC' message on such access.
*/
#define NON_VALID_BASE_ADDR_CNS         0xFE000001
#define END_OF_TABLE_INDICATOR_CNS      0xFFFFFFFE

/* Lion2 units */
#define PRV_CPSS_DXCH_LION2_BASE_ADDRESS_TTI_CNS                    0x01000000
#define PRV_CPSS_DXCH_LION2_BASE_ADDRESS_PCL_CNS                    0x0B800000
#define PRV_CPSS_DXCH_LION2_BASE_ADDRESS_L2I_CNS                    0x02000000
#define PRV_CPSS_DXCH_LION2_BASE_ADDRESS_FDB_CNS                    0x06000000
#define PRV_CPSS_DXCH_LION2_BASE_ADDRESS_EQ_CNS                     0x0B000000
#define PRV_CPSS_DXCH_LION2_BASE_ADDRESS_LPM_CNS                    NON_VALID_BASE_ADDR_CNS
#define PRV_CPSS_DXCH_LION2_BASE_ADDRESS_EGF_EFT_CNS                NON_VALID_BASE_ADDR_CNS
#define PRV_CPSS_DXCH_LION2_BASE_ADDRESS_EGF_QAG_CNS                NON_VALID_BASE_ADDR_CNS
#define PRV_CPSS_DXCH_LION2_BASE_ADDRESS_EGF_SHT_CNS                NON_VALID_BASE_ADDR_CNS
#define PRV_CPSS_DXCH_LION2_BASE_ADDRESS_HA_CNS                     0x0E800000
#define PRV_CPSS_DXCH_LION2_BASE_ADDRESS_ETS_CNS                    (PRV_CPSS_DXCH_LION2_BASE_ADDRESS_HA_CNS + 0x800)
#define PRV_CPSS_DXCH_LION2_BASE_ADDRESS_MLL_CNS                    0x0C800000
#define PRV_CPSS_DXCH_LION2_BASE_ADDRESS_IPLR_CNS                   0x0C000000
#define PRV_CPSS_DXCH_LION2_BASE_ADDRESS_EPLR_CNS                   0x07800000
#define PRV_CPSS_DXCH_LION2_BASE_ADDRESS_IPVX_CNS                   0x02800000
#define PRV_CPSS_DXCH_LION2_BASE_ADDRESS_IOAM_CNS                   NON_VALID_BASE_ADDR_CNS
#define PRV_CPSS_DXCH_LION2_BASE_ADDRESS_EOAM_CNS                   NON_VALID_BASE_ADDR_CNS
#define PRV_CPSS_DXCH_LION2_BASE_ADDRESS_TCAM_CNS                   NON_VALID_BASE_ADDR_CNS
#define PRV_CPSS_DXCH_LION2_BASE_ADDRESS_RXDMA_CNS                  0x0F000000
#define PRV_CPSS_DXCH_LION2_BASE_ADDRESS_EPCL_CNS                   0x0E000000
#define PRV_CPSS_DXCH_LION2_BASE_ADDRESS_TM_FCU_CNS                 NON_VALID_BASE_ADDR_CNS
#define PRV_CPSS_DXCH_LION2_BASE_ADDRESS_TM_DROP_CNS                NON_VALID_BASE_ADDR_CNS
#define PRV_CPSS_DXCH_LION2_BASE_ADDRESS_TM_QMAP_CNS                NON_VALID_BASE_ADDR_CNS
#define PRV_CPSS_DXCH_LION2_BASE_ADDRESS_TM_CNS                     NON_VALID_BASE_ADDR_CNS
#define PRV_CPSS_DXCH_LION2_BASE_ADDRESS_GOP_CNS                    0x08800000
#define PRV_CPSS_DXCH_LION2_BASE_ADDRESS_MIB_CNS                    0x09000000
#define PRV_CPSS_DXCH_LION2_BASE_ADDRESS_SERDES_CNS                 0x09800000
#define PRV_CPSS_DXCH_LION2_BASE_ADDRESS_ERMRK_CNS                  NON_VALID_BASE_ADDR_CNS
#define PRV_CPSS_DXCH_LION2_BASE_ADDRESS_BM_CNS                     0x03000000
#define PRV_CPSS_DXCH_LION2_BASE_ADDRESS_TM_INGRESS_GLUE_CNS        NON_VALID_BASE_ADDR_CNS
#define PRV_CPSS_DXCH_LION2_BASE_ADDRESS_TM_EGRESS_GLUE_CNS         NON_VALID_BASE_ADDR_CNS
#define PRV_CPSS_DXCH_LION2_BASE_ADDRESS_ETH_TXFIFO_CNS             NON_VALID_BASE_ADDR_CNS
#define PRV_CPSS_DXCH_LION2_BASE_ADDRESS_ILKN_TXFIFO_CNS            NON_VALID_BASE_ADDR_CNS
#define PRV_CPSS_DXCH_LION2_BASE_ADDRESS_ILKN_CNS                   NON_VALID_BASE_ADDR_CNS
#define PRV_CPSS_DXCH_LION2_BASE_ADDRESS_LMS0_0_CNS                 0x04000000
#define PRV_CPSS_DXCH_LION2_BASE_ADDRESS_LMS0_1_CNS                 0x04800000
#define PRV_CPSS_DXCH_LION2_BASE_ADDRESS_LMS0_2_CNS                 0x05000000
#define PRV_CPSS_DXCH_LION2_BASE_ADDRESS_LMS0_3_CNS                 0x05800000
#define PRV_CPSS_DXCH_LION2_BASE_ADDRESS_TX_FIFO_CNS                NON_VALID_BASE_ADDR_CNS
#define PRV_CPSS_DXCH_LION2_BASE_ADDRESS_BMA_CNS                    0x03800000
#define PRV_CPSS_DXCH_LION2_BASE_ADDRESS_CNC_0_CNS                  0x08000000
#define PRV_CPSS_DXCH_LION2_BASE_ADDRESS_CNC_1_CNS                  NON_VALID_BASE_ADDR_CNS
#define PRV_CPSS_DXCH_LION2_BASE_ADDRESS_TXQ_QUEUE_CNS              0x10000000
#define PRV_CPSS_DXCH_LION2_BASE_ADDRESS_TXQ_LL_CNS                 0x10800000
#define PRV_CPSS_DXCH_LION2_BASE_ADDRESS_TXQ_PFC_CNS                0x13800000
#define PRV_CPSS_DXCH_LION2_BASE_ADDRESS_TXQ_QCN_CNS                0x3F000000
#define PRV_CPSS_DXCH_LION2_BASE_ADDRESS_TXQ_DQ_CNS                 0x11000000
#define PRV_CPSS_DXCH_LION2_BASE_ADDRESS_DFX_SERVER_CNS             0x01800000
#define PRV_CPSS_DXCH_LION2_BASE_ADDRESS_MPPM_CNS                   0x06800000
#define PRV_CPSS_DXCH_LION2_BASE_ADDRESS_LMS1_0_CNS                 NON_VALID_BASE_ADDR_CNS
#define PRV_CPSS_DXCH_LION2_BASE_ADDRESS_LMS1_1_CNS                 NON_VALID_BASE_ADDR_CNS
#define PRV_CPSS_DXCH_LION2_BASE_ADDRESS_LMS1_2_CNS                 NON_VALID_BASE_ADDR_CNS
#define PRV_CPSS_DXCH_LION2_BASE_ADDRESS_LMS1_3_CNS                 NON_VALID_BASE_ADDR_CNS
#define PRV_CPSS_DXCH_LION2_BASE_ADDRESS_LMS2_0_CNS                 NON_VALID_BASE_ADDR_CNS
#define PRV_CPSS_DXCH_LION2_BASE_ADDRESS_LMS2_1_CNS                 NON_VALID_BASE_ADDR_CNS
#define PRV_CPSS_DXCH_LION2_BASE_ADDRESS_LMS2_2_CNS                 NON_VALID_BASE_ADDR_CNS
#define PRV_CPSS_DXCH_LION2_BASE_ADDRESS_LMS2_3_CNS                 NON_VALID_BASE_ADDR_CNS
#define PRV_CPSS_DXCH_LION2_BASE_ADDRESS_MPPM_1_CNS                 0x0A000000
#define PRV_CPSS_DXCH_LION2_BASE_ADDRESS_CTU_0_CNS                  0x07000000
#define PRV_CPSS_DXCH_LION2_BASE_ADDRESS_CTU_1_CNS                  0x0A800000
#define PRV_CPSS_DXCH_LION2_BASE_ADDRESS_TXQ_SHT_CNS                0x11800000
#define PRV_CPSS_DXCH_LION2_BASE_ADDRESS_TXQ_EGR0_CNS               0x12000000
#define PRV_CPSS_DXCH_LION2_BASE_ADDRESS_TXQ_EGR1_CNS               0x12800000
#define PRV_CPSS_DXCH_LION2_BASE_ADDRESS_TXQ_DIST_CNS               0x13000000
#define PRV_CPSS_DXCH_LION2_BASE_ADDRESS_IPLR_1_CNS                 0x00800000
#define PRV_CPSS_DXCH_LION2_BASE_ADDRESS_TXDMA_CNS                  0x0F800000
#define PRV_CPSS_DXCH_LION2_BASE_ADDRESS_MG_CNS                     0x00000000
#define PRV_CPSS_DXCH_LION2_BASE_ADDRESS_TCC_PCL_CNS                0x0D000000
#define PRV_CPSS_DXCH_LION2_BASE_ADDRESS_TCC_IPVX_CNS               0x0D800000


/* XCAT3 units */
#define PRV_CPSS_DXCH_XCAT3_BASE_ADDRESS_TTI_CNS                    0x16000000
#define PRV_CPSS_DXCH_XCAT3_BASE_ADDRESS_PCL_CNS                    0x15000000
#define PRV_CPSS_DXCH_XCAT3_BASE_ADDRESS_L2I_CNS                    0x01000000
#define PRV_CPSS_DXCH_XCAT3_BASE_ADDRESS_FDB_CNS                    0x0B000000
#define PRV_CPSS_DXCH_XCAT3_BASE_ADDRESS_EQ_CNS                     0x14000000
#define PRV_CPSS_DXCH_XCAT3_BASE_ADDRESS_LPM_CNS                    NON_VALID_BASE_ADDR_CNS
#define PRV_CPSS_DXCH_XCAT3_BASE_ADDRESS_EGF_EFT_CNS                NON_VALID_BASE_ADDR_CNS
#define PRV_CPSS_DXCH_XCAT3_BASE_ADDRESS_EGF_QAG_CNS                NON_VALID_BASE_ADDR_CNS
#define PRV_CPSS_DXCH_XCAT3_BASE_ADDRESS_EGF_SHT_CNS                NON_VALID_BASE_ADDR_CNS
#define PRV_CPSS_DXCH_XCAT3_BASE_ADDRESS_HA_CNS                     0x1C000000
#define PRV_CPSS_DXCH_XCAT3_BASE_ADDRESS_ETS_CNS                    NON_VALID_BASE_ADDR_CNS
#define PRV_CPSS_DXCH_XCAT3_BASE_ADDRESS_MLL_CNS                    0x19000000
#define PRV_CPSS_DXCH_XCAT3_BASE_ADDRESS_IPLR_CNS                   0x17000000
#define PRV_CPSS_DXCH_XCAT3_BASE_ADDRESS_EPLR_CNS                   0x06000000
#define PRV_CPSS_DXCH_XCAT3_BASE_ADDRESS_IPVX_CNS                   0x04000000
#define PRV_CPSS_DXCH_XCAT3_BASE_ADDRESS_IOAM_CNS                   NON_VALID_BASE_ADDR_CNS
#define PRV_CPSS_DXCH_XCAT3_BASE_ADDRESS_EOAM_CNS                   NON_VALID_BASE_ADDR_CNS
#define PRV_CPSS_DXCH_XCAT3_BASE_ADDRESS_TCAM_CNS                   NON_VALID_BASE_ADDR_CNS
#define PRV_CPSS_DXCH_XCAT3_BASE_ADDRESS_RXDMA_CNS                  NON_VALID_BASE_ADDR_CNS
#define PRV_CPSS_DXCH_XCAT3_BASE_ADDRESS_EPCL_CNS                   0x1D000000
#define PRV_CPSS_DXCH_XCAT3_BASE_ADDRESS_TM_FCU_CNS                 NON_VALID_BASE_ADDR_CNS
#define PRV_CPSS_DXCH_XCAT3_BASE_ADDRESS_TM_DROP_CNS                NON_VALID_BASE_ADDR_CNS
#define PRV_CPSS_DXCH_XCAT3_BASE_ADDRESS_TM_QMAP_CNS                NON_VALID_BASE_ADDR_CNS
#define PRV_CPSS_DXCH_XCAT3_BASE_ADDRESS_TM_CNS                     NON_VALID_BASE_ADDR_CNS
#define PRV_CPSS_DXCH_XCAT3_BASE_ADDRESS_GOP_CNS                    0x12000000
#define PRV_CPSS_DXCH_XCAT3_BASE_ADDRESS_MIB_CNS                    0x11000000
#define PRV_CPSS_DXCH_XCAT3_BASE_ADDRESS_SERDES_CNS                 0x13000000
#define PRV_CPSS_DXCH_XCAT3_BASE_ADDRESS_ERMRK_CNS                  NON_VALID_BASE_ADDR_CNS
#define PRV_CPSS_DXCH_XCAT3_BASE_ADDRESS_BM_CNS                     0x05000000
#define PRV_CPSS_DXCH_XCAT3_BASE_ADDRESS_TM_INGRESS_GLUE_CNS        NON_VALID_BASE_ADDR_CNS
#define PRV_CPSS_DXCH_XCAT3_BASE_ADDRESS_TM_EGRESS_GLUE_CNS         NON_VALID_BASE_ADDR_CNS
#define PRV_CPSS_DXCH_XCAT3_BASE_ADDRESS_ETH_TXFIFO_CNS             NON_VALID_BASE_ADDR_CNS
#define PRV_CPSS_DXCH_XCAT3_BASE_ADDRESS_ILKN_TXFIFO_CNS            NON_VALID_BASE_ADDR_CNS
#define PRV_CPSS_DXCH_XCAT3_BASE_ADDRESS_ILKN_CNS                   NON_VALID_BASE_ADDR_CNS
#define PRV_CPSS_DXCH_XCAT3_BASE_ADDRESS_LMS0_0_CNS                 0x07000000
#define PRV_CPSS_DXCH_XCAT3_BASE_ADDRESS_LMS0_1_CNS                 0x08000000
#define PRV_CPSS_DXCH_XCAT3_BASE_ADDRESS_LMS0_2_CNS                 NON_VALID_BASE_ADDR_CNS
#define PRV_CPSS_DXCH_XCAT3_BASE_ADDRESS_LMS0_3_CNS                 NON_VALID_BASE_ADDR_CNS
#define PRV_CPSS_DXCH_XCAT3_BASE_ADDRESS_TX_FIFO_CNS                NON_VALID_BASE_ADDR_CNS
#define PRV_CPSS_DXCH_XCAT3_BASE_ADDRESS_BMA_CNS                    NON_VALID_BASE_ADDR_CNS
#define PRV_CPSS_DXCH_XCAT3_BASE_ADDRESS_CNC_0_CNS                  0x10000000
#define PRV_CPSS_DXCH_XCAT3_BASE_ADDRESS_CNC_1_CNS                  NON_VALID_BASE_ADDR_CNS
#define PRV_CPSS_DXCH_XCAT3_BASE_ADDRESS_TXQ_QUEUE_CNS              0x28000000
#define PRV_CPSS_DXCH_XCAT3_BASE_ADDRESS_TXQ_LL_CNS                 0x28000000
#define PRV_CPSS_DXCH_XCAT3_BASE_ADDRESS_TXQ_PFC_CNS                NON_VALID_BASE_ADDR_CNS
#define PRV_CPSS_DXCH_XCAT3_BASE_ADDRESS_TXQ_QCN_CNS                NON_VALID_BASE_ADDR_CNS
#define PRV_CPSS_DXCH_XCAT3_BASE_ADDRESS_TXQ_DQ_CNS                 0x28000000
#define PRV_CPSS_DXCH_XCAT3_BASE_ADDRESS_DFX_SERVER_CNS             0x000F8000
#define PRV_CPSS_DXCH_XCAT3_BASE_ADDRESS_MPPM_CNS                   0x0C000000
#define PRV_CPSS_DXCH_XCAT3_BASE_ADDRESS_LMS1_0_CNS                 0x09000000
#define PRV_CPSS_DXCH_XCAT3_BASE_ADDRESS_LMS1_1_CNS                 0x0A000000
#define PRV_CPSS_DXCH_XCAT3_BASE_ADDRESS_LMS1_2_CNS                 NON_VALID_BASE_ADDR_CNS
#define PRV_CPSS_DXCH_XCAT3_BASE_ADDRESS_LMS1_3_CNS                 NON_VALID_BASE_ADDR_CNS
#define PRV_CPSS_DXCH_XCAT3_BASE_ADDRESS_LMS2_0_CNS                 NON_VALID_BASE_ADDR_CNS
#define PRV_CPSS_DXCH_XCAT3_BASE_ADDRESS_LMS2_1_CNS                 NON_VALID_BASE_ADDR_CNS
#define PRV_CPSS_DXCH_XCAT3_BASE_ADDRESS_LMS2_2_CNS                 NON_VALID_BASE_ADDR_CNS
#define PRV_CPSS_DXCH_XCAT3_BASE_ADDRESS_LMS2_3_CNS                 NON_VALID_BASE_ADDR_CNS
#define PRV_CPSS_DXCH_XCAT3_BASE_ADDRESS_MPPM_1_CNS                 0x0D000000
#define PRV_CPSS_DXCH_XCAT3_BASE_ADDRESS_CTU_0_CNS                  NON_VALID_BASE_ADDR_CNS
#define PRV_CPSS_DXCH_XCAT3_BASE_ADDRESS_CTU_1_CNS                  NON_VALID_BASE_ADDR_CNS
#define PRV_CPSS_DXCH_XCAT3_BASE_ADDRESS_TXQ_SHT_CNS                0x28000000
#define PRV_CPSS_DXCH_XCAT3_BASE_ADDRESS_TXQ_EGR0_CNS               0x28000000
#define PRV_CPSS_DXCH_XCAT3_BASE_ADDRESS_TXQ_EGR1_CNS               0x28000000
#define PRV_CPSS_DXCH_XCAT3_BASE_ADDRESS_TXQ_DIST_CNS               0x28000000
#define PRV_CPSS_DXCH_XCAT3_BASE_ADDRESS_IPLR_1_CNS                 0x18000000
#define PRV_CPSS_DXCH_XCAT3_BASE_ADDRESS_TXDMA_CNS                  0x0E000000
#define PRV_CPSS_DXCH_XCAT3_BASE_ADDRESS_MG_CNS                     0x00000000
#define PRV_CPSS_DXCH_XCAT3_BASE_ADDRESS_TCC_PCL_CNS                0x1A000000
#define PRV_CPSS_DXCH_XCAT3_BASE_ADDRESS_TCC_IPVX_CNS               0x1B000000
/*AC5*/
#define PRV_CPSS_DXCH_AC5_BASE_ADDRESS_CNC_1_CNS                    0x1f000000
#define PRV_CPSS_DXCH_AC5_BASE_ADDRESS_TCC_PCL_1_CNS                0x20000000


/* the base address for non exists 'dummy' units :

   NOTE:
   1. this is 'dummy address' for simulation purposes , to be able to access to it .
   2. the CPU can not access to it !
   3. we use 'unused' memory space --> we can change it to any other unit space.
*/
#define UNIT_BASE_ADDR_MAC(unit_index)                  ((unit_index) << 23)

/* not used memory */
#define DUMMY_UNITS_BASE_ADDR_CNS(index)              0x70000000 + UNIT_BASE_ADDR_MAC(2*index)
/* Bobcat2 units */
#define PRV_CPSS_DXCH_BOBCAT2_BASE_ADDRESS_TTI_CNS                    0x01000000
#define PRV_CPSS_DXCH_BOBCAT2_BASE_ADDRESS_PCL_CNS                    0x02000000
#define PRV_CPSS_DXCH_BOBCAT2_BASE_ADDRESS_L2I_CNS                    0x03000000
#define PRV_CPSS_DXCH_BOBCAT2_BASE_ADDRESS_FDB_CNS                    0x04000000
#define PRV_CPSS_DXCH_BOBCAT2_BASE_ADDRESS_EQ_CNS                     0x0D000000
#define PRV_CPSS_DXCH_BOBCAT2_BASE_ADDRESS_LPM_CNS                    0x58000000
#define PRV_CPSS_DXCH_BOBCAT2_BASE_ADDRESS_EGF_EFT_CNS                0x35000000
#define PRV_CPSS_DXCH_BOBCAT2_BASE_ADDRESS_EGF_QAG_CNS                0x3B000000
#define PRV_CPSS_DXCH_BOBCAT2_BASE_ADDRESS_EGF_SHT_CNS                0x48000000
#define PRV_CPSS_DXCH_BOBCAT2_BASE_ADDRESS_HA_CNS                     0x0F000000
#define PRV_CPSS_DXCH_BOBCAT2_BASE_ADDRESS_ETS_CNS                    (PRV_CPSS_DXCH_BOBCAT2_BASE_ADDRESS_HA_CNS + 0x800)
#define PRV_CPSS_DXCH_BOBCAT2_BASE_ADDRESS_MLL_CNS                    0x1D000000
#define PRV_CPSS_DXCH_BOBCAT2_BASE_ADDRESS_IPLR_CNS                   0x0B000000
#define PRV_CPSS_DXCH_BOBCAT2_BASE_ADDRESS_EPLR_CNS                   0x0E000000
#define PRV_CPSS_DXCH_BOBCAT2_BASE_ADDRESS_IPVX_CNS                   0x06000000
#define PRV_CPSS_DXCH_BOBCAT2_BASE_ADDRESS_IOAM_CNS                   0x1C000000
#define PRV_CPSS_DXCH_BOBCAT2_BASE_ADDRESS_EOAM_CNS                   0x1E000000
#define PRV_CPSS_DXCH_BOBCAT2_BASE_ADDRESS_TCAM_CNS                   0x05000000
#define PRV_CPSS_DXCH_BOBCAT2_BASE_ADDRESS_RXDMA_CNS                  0x17000000
#define PRV_CPSS_DXCH_BOBCAT2_BASE_ADDRESS_EPCL_CNS                   0x14000000
#define PRV_CPSS_DXCH_BOBCAT2_BASE_ADDRESS_TM_FCU_CNS                 0x08000000
#define PRV_CPSS_DXCH_BOBCAT2_BASE_ADDRESS_TM_DROP_CNS                0x09000000
#define PRV_CPSS_DXCH_BOBCAT2_BASE_ADDRESS_TM_QMAP_CNS                0x0A000000
#define PRV_CPSS_DXCH_BOBCAT2_BASE_ADDRESS_TM_CNS                     0x0C000000
#define PRV_CPSS_DXCH_BOBCAT2_BASE_ADDRESS_GOP_CNS                    0x10000000
#define PRV_CPSS_DXCH_BOBCAT2_BASE_ADDRESS_MIB_CNS                    0x12000000
#define PRV_CPSS_DXCH_BOBCAT2_BASE_ADDRESS_SERDES_CNS                 0x13000000
#define PRV_CPSS_DXCH_BOBCAT2_BASE_ADDRESS_ERMRK_CNS                  0x15000000
#define PRV_CPSS_DXCH_BOBCAT2_BASE_ADDRESS_BM_CNS                     0x16000000
#define PRV_CPSS_DXCH_BOBCAT2_BASE_ADDRESS_TM_INGRESS_GLUE_CNS        0x18000000
#define PRV_CPSS_DXCH_BOBCAT2_BASE_ADDRESS_TM_EGRESS_GLUE_CNS         0x19000000
#define PRV_CPSS_DXCH_BOBCAT2_BASE_ADDRESS_ETH_TXFIFO_CNS             0x1A000000
#define PRV_CPSS_DXCH_BOBCAT2_BASE_ADDRESS_ILKN_TXFIFO_CNS            0x1B000000
#define PRV_CPSS_DXCH_BOBCAT2_BASE_ADDRESS_ILKN_CNS                   0x1F000000
#define PRV_CPSS_DXCH_BOBCAT2_BASE_ADDRESS_LMS0_0_CNS                 0x21000000
#define PRV_CPSS_DXCH_BOBCAT2_BASE_ADDRESS_LMS0_1_CNS                 0x22000000
#define PRV_CPSS_DXCH_BOBCAT2_BASE_ADDRESS_LMS0_2_CNS                 0x23000000
#define PRV_CPSS_DXCH_BOBCAT2_BASE_ADDRESS_LMS0_3_CNS                 0x24000000
#define PRV_CPSS_DXCH_BOBCAT2_BASE_ADDRESS_TX_FIFO_CNS                0x27000000
#define PRV_CPSS_DXCH_BOBCAT2_BASE_ADDRESS_BMA_CNS                    0x2D000000
#define PRV_CPSS_DXCH_BOBCAT2_BASE_ADDRESS_CNC_0_CNS                  0x2E000000
#define PRV_CPSS_DXCH_BOBCAT2_BASE_ADDRESS_CNC_1_CNS                  0x2F000000
#define PRV_CPSS_DXCH_BOBCAT2_BASE_ADDRESS_TXQ_QUEUE_CNS              0x3C000000
#define PRV_CPSS_DXCH_BOBCAT2_BASE_ADDRESS_TXQ_LL_CNS                 0x3D000000
#define PRV_CPSS_DXCH_BOBCAT2_BASE_ADDRESS_TXQ_PFC_CNS                0x3E000000
#define PRV_CPSS_DXCH_BOBCAT2_BASE_ADDRESS_TXQ_QCN_CNS                0x3F000000
#define PRV_CPSS_DXCH_BOBCAT2_BASE_ADDRESS_TXQ_DQ_CNS                 0x40000000
#define PRV_CPSS_DXCH_BOBCAT2_BASE_ADDRESS_DFX_SERVER_CNS             NON_VALID_BASE_ADDR_CNS
#define PRV_CPSS_DXCH_BOBCAT2_BASE_ADDRESS_MPPM_CNS                   0x47000000
#define PRV_CPSS_DXCH_BOBCAT2_BASE_ADDRESS_LMS1_0_CNS                 0x50000000
#define PRV_CPSS_DXCH_BOBCAT2_BASE_ADDRESS_LMS1_1_CNS                 0x51000000
#define PRV_CPSS_DXCH_BOBCAT2_BASE_ADDRESS_LMS1_2_CNS                 0x52000000
#define PRV_CPSS_DXCH_BOBCAT2_BASE_ADDRESS_LMS1_3_CNS                 0x53000000
#define PRV_CPSS_DXCH_BOBCAT2_BASE_ADDRESS_LMS2_0_CNS                 0x54000000
#define PRV_CPSS_DXCH_BOBCAT2_BASE_ADDRESS_LMS2_1_CNS                 0x55000000
#define PRV_CPSS_DXCH_BOBCAT2_BASE_ADDRESS_LMS2_2_CNS                 0x56000000
#define PRV_CPSS_DXCH_BOBCAT2_BASE_ADDRESS_LMS2_3_CNS                 0x57000000
#define PRV_CPSS_DXCH_BOBCAT2_BASE_ADDRESS_MPPM_1_CNS                 NON_VALID_BASE_ADDR_CNS
#define PRV_CPSS_DXCH_BOBCAT2_BASE_ADDRESS_CTU_0_CNS                  NON_VALID_BASE_ADDR_CNS
#define PRV_CPSS_DXCH_BOBCAT2_BASE_ADDRESS_CTU_1_CNS                  NON_VALID_BASE_ADDR_CNS
#define PRV_CPSS_DXCH_BOBCAT2_BASE_ADDRESS_TXQ_SHT_CNS                NON_VALID_BASE_ADDR_CNS
#define PRV_CPSS_DXCH_BOBCAT2_BASE_ADDRESS_TXQ_EGR0_CNS               NON_VALID_BASE_ADDR_CNS
#define PRV_CPSS_DXCH_BOBCAT2_BASE_ADDRESS_TXQ_EGR1_CNS               NON_VALID_BASE_ADDR_CNS
#define PRV_CPSS_DXCH_BOBCAT2_BASE_ADDRESS_TXQ_DIST_CNS               DUMMY_UNITS_BASE_ADDR_CNS(4)
#define PRV_CPSS_DXCH_BOBCAT2_BASE_ADDRESS_IPLR_1_CNS                 0x20000000
#define PRV_CPSS_DXCH_BOBCAT2_BASE_ADDRESS_TXDMA_CNS                  0x26000000
#define PRV_CPSS_DXCH_BOBCAT2_BASE_ADDRESS_MG_CNS                     0x00000000
#define PRV_CPSS_DXCH_BOBCAT2_BASE_ADDRESS_TCC_PCL_CNS                DUMMY_UNITS_BASE_ADDR_CNS(2)
#define PRV_CPSS_DXCH_BOBCAT2_BASE_ADDRESS_TCC_IPVX_CNS               DUMMY_UNITS_BASE_ADDR_CNS(3)
#define PRV_CPSS_DXCH_BOBCAT2_BASE_ADDRESS_SMI_0_E                    0x54000000
#define PRV_CPSS_DXCH_BOBCAT2_BASE_ADDRESS_SMI_1_E                    0x55000000
#define PRV_CPSS_DXCH_BOBCAT2_BASE_ADDRESS_SMI_2_E                    0x56000000
#define PRV_CPSS_DXCH_BOBCAT2_BASE_ADDRESS_SMI_3_E                    0x57000000
#define PRV_CPSS_DXCH_BOBCAT2_BASE_ADDRESS_LED_0_E                    0x21000000
#define PRV_CPSS_DXCH_BOBCAT2_BASE_ADDRESS_LED_1_E                    0x22000000
#define PRV_CPSS_DXCH_BOBCAT2_BASE_ADDRESS_LED_2_E                    0x23000000
#define PRV_CPSS_DXCH_BOBCAT2_BASE_ADDRESS_LED_3_E                    0x24000000
#define PRV_CPSS_DXCH_BOBCAT2_BASE_ADDRESS_LED_4_E                    0x50000000

#define PRV_CPSS_DXCH_BOBK_BASE_ADDRESS_RXDMA1_E                      0x68000000
#define PRV_CPSS_DXCH_BOBK_BASE_ADDRESS_TXDMA1_E                      0x66000000
#define PRV_CPSS_DXCH_BOBK_BASE_ADDRESS_TX_FIFO1_E                    0x67000000
#define PRV_CPSS_DXCH_BOBK_BASE_ADDRESS_ETH_TX_FIFO1_CNS              0x62000000
#define PRV_CPSS_DXCH_BOBK_BASE_ADDRESS_RXDMA_GLUE_CNS                0x63000000
#define PRV_CPSS_DXCH_BOBK_BASE_ADDRESS_TXDMA_GLUE_CNS                0x64000000
#define PRV_CPSS_DXCH_BOBK_BASE_ADDRESS_MPPM_CNS                      0x47000000
#define PRV_CPSS_DXCH_BOBK_BASE_ADDRESS_TAI_CNS                       0x65000000

/* aldrin units */
#define PRV_CPSS_DXCH_ALDRIN_BASE_ADDRESS_RXDMA2_E                    0x69000000
#define PRV_CPSS_DXCH_ALDRIN_BASE_ADDRESS_TXDMA2_E                    0x6B000000
#define PRV_CPSS_DXCH_ALDRIN_BASE_ADDRESS_TX_FIFO2_E                  0x6A000000

/* bobcat3 addresses */
#define PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_MG_CNS                 0x00000000
#define PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_TTI_CNS                0x01000000
#define PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_IPCL_CNS               0x02000000
#define PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_L2I_CNS                0x03000000
#define PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_IPVX_CNS               0x04000000
#define PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_IPLR_CNS               0x05000000
#define PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_IPLR1_CNS              0x06000000
#define PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_IOAM_CNS               0x07000000
#define PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_MLL_CNS                0x08000000
#define PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_EQ_CNS                 0x09000000
#define PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_EGF_EFT_CNS            0x0a000000

#define PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_TXQ_DQ_CNS             0x0b000000
#define PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_TXQ_DQ_1_CNS           0x0c000000
#define PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_TXQ_DQ_2_CNS           0x0d000000

#define PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_CNC_0_CNS              0x0e000000
#define PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_CNC_1_CNS              0x0f000000

#define PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_GOP_CNS                0x10000000
#define PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_MIB_CNS                0x12000000
#define PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_SERDES_CNS             0x13000000
#define PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_HA_CNS                 0x14000000
#define PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_ERMRK_CNS              0x15000000
#define PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_EPCL_CNS               0x16000000
#define PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_EPLR_CNS               0x17000000
#define PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_EOAM_CNS               0x18000000

#define PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_RX_DMA_CNS             0x19000000
#define PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_RX_DMA_1_CNS           0x1a000000
#define PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_RX_DMA_2_CNS           0x1b000000
#define PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_TX_DMA_CNS             0x1c000000
#define PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_TX_DMA_1_CNS           0x1d000000
#define PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_TX_DMA_2_CNS           0x1e000000
#define PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_TX_FIFO_CNS            0x1f000000
#define PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_TX_FIFO_1_CNS          0x20000000
#define PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_TX_FIFO_2_CNS          0x21000000
#define PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_IA_0_CNS               0x22000000

#define PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_GOP_LED_0_CNS          0x27000000
#define PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_GOP_LED_1_CNS          0x28000000
#define PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_GOP_SMI_0_CNS          0x29000000
#define PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_GOP_SMI_1_CNS          0x2a000000

#define PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_EGF_SHT_CNS            0x30000000 /* 1. was shared between pipes , but now it is 'per pipe'
                                                                                2. was in 0x48000000*/

#define PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_BM_CNS                 0x40000000
#define PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_BMA_CNS                0x41000000
#define PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_CPFC_CNS               0x42000000
#define PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_FDB_CNS                0x43000000
#define PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_LPM_CNS                0x44000000
#define PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_LPM_1_CNS              0x45000000
#define PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_LPM_2_CNS              0x46000000
#define PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_LPM_3_CNS              0x47000000
#define PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_EGF_QAG_CNS            0x50000000
#define PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_MPPM_CNS               0x51000000
#define PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_TCAM_CNS               0x52000000
#define PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_TXQ_LL_CNS             0x53000000
#define PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_TXQ_QCN_CNS            0x54000000
#define PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_TXQ_QUEUE_CNS          0x55000000
#define PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_TXQ_BMX_CNS            0x56000000
#define PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_TAI_CNS                0x57000000

/* Bobcat3 offset of pipe1 addresses from corresponding units in pipe 0*/
#define PRV_CPSS_DXCH_BOBCAT3_PIPE1_OFFSET_CNS                    0x80000000
#define BOBCAT3_PIPE1_MAC(unitAddr)     ((unitAddr) | PRV_CPSS_DXCH_BOBCAT3_PIPE1_OFFSET_CNS)

#define PRV_CPSS_DXCH_BOBCAT3_PIPE1_GOP_OFFSET_CNS                0x00400000
#define PRV_CPSS_DXCH_BOBCAT3_PIPE1_MIB_OFFSET_CNS                0x00800000
#define PRV_CPSS_DXCH_BOBCAT3_PIPE1_TAI_OFFSET_CNS                0x01000000
#define PRV_CPSS_DXCH_BOBCAT3_PIPE1_SERDES_OFFSET_CNS             0x00080000

#define BOBCAT3_SPECIAL_PIPE1_MAC(unitAddr, pipeOffset)     ((unitAddr) + pipeOffset)


#define PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_RX_DMA_3_CNS           BOBCAT3_PIPE1_MAC(PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_RX_DMA_CNS)
#define PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_RX_DMA_4_CNS           BOBCAT3_PIPE1_MAC(PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_RX_DMA_1_CNS)
#define PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_RX_DMA_5_CNS           BOBCAT3_PIPE1_MAC(PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_RX_DMA_2_CNS)

#define PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_TX_DMA_3_CNS           BOBCAT3_PIPE1_MAC(PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_TX_DMA_CNS)
#define PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_TX_DMA_4_CNS           BOBCAT3_PIPE1_MAC(PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_TX_DMA_1_CNS)
#define PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_TX_DMA_5_CNS           BOBCAT3_PIPE1_MAC(PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_TX_DMA_2_CNS)

#define PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_TX_FIFO_3_CNS           BOBCAT3_PIPE1_MAC(PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_TX_FIFO_CNS)
#define PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_TX_FIFO_4_CNS           BOBCAT3_PIPE1_MAC(PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_TX_FIFO_1_CNS)
#define PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_TX_FIFO_5_CNS           BOBCAT3_PIPE1_MAC(PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_TX_FIFO_2_CNS)

#define PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_TXQ_DQ_3_CNS         BOBCAT3_PIPE1_MAC(PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_TXQ_DQ_CNS  )
#define PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_TXQ_DQ_4_CNS         BOBCAT3_PIPE1_MAC(PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_TXQ_DQ_1_CNS)
#define PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_TXQ_DQ_5_CNS         BOBCAT3_PIPE1_MAC(PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_TXQ_DQ_2_CNS)

#define PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_MIB1_CNS             BOBCAT3_SPECIAL_PIPE1_MAC(PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_MIB_CNS, PRV_CPSS_DXCH_BOBCAT3_PIPE1_MIB_OFFSET_CNS)
#define PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_GOP1_CNS             BOBCAT3_SPECIAL_PIPE1_MAC(PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_GOP_CNS, PRV_CPSS_DXCH_BOBCAT3_PIPE1_GOP_OFFSET_CNS)
#define PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_TAI1_CNS             BOBCAT3_SPECIAL_PIPE1_MAC(PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_TAI_CNS, PRV_CPSS_DXCH_BOBCAT3_PIPE1_TAI_OFFSET_CNS)

#define PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_EGF_SHT_1_CNS        BOBCAT3_PIPE1_MAC(PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_EGF_SHT_CNS)

#define PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_TTI_1_CNS            BOBCAT3_PIPE1_MAC(PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_TTI_CNS)
#define PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_IPCL_1_CNS           BOBCAT3_PIPE1_MAC(PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_IPCL_CNS)
#define PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_L2I_1_CNS            BOBCAT3_PIPE1_MAC(PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_L2I_CNS)
#define PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_IPVX_1_CNS           BOBCAT3_PIPE1_MAC(PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_IPVX_CNS)
#define PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_IPLR_0_1_CNS         BOBCAT3_PIPE1_MAC(PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_IPLR_CNS)
#define PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_IPLR_1_1_CNS         BOBCAT3_PIPE1_MAC(PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_IPLR1_CNS)
#define PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_IOAM_1_CNS           BOBCAT3_PIPE1_MAC(PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_IOAM_CNS)
#define PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_MLL_1_CNS            BOBCAT3_PIPE1_MAC(PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_MLL_CNS)
#define PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_EQ_1_CNS             BOBCAT3_PIPE1_MAC(PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_EQ_CNS)
#define PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_EGF_EFT_1_CNS        BOBCAT3_PIPE1_MAC(PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_EGF_EFT_CNS)
#define PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_CNC_0_1_CNS          BOBCAT3_PIPE1_MAC(PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_CNC_0_CNS)
#define PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_CNC_1_1_CNS          BOBCAT3_PIPE1_MAC(PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_CNC_1_CNS)
#define PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_SERDES_1_CNS         BOBCAT3_SPECIAL_PIPE1_MAC(PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_SERDES_CNS, PRV_CPSS_DXCH_BOBCAT3_PIPE1_SERDES_OFFSET_CNS)
#define PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_HA_1_CNS             BOBCAT3_PIPE1_MAC(PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_HA_CNS)
#define PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_ERMRK_1_CNS          BOBCAT3_PIPE1_MAC(PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_ERMRK_CNS)
#define PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_EPCL_1_CNS           BOBCAT3_PIPE1_MAC(PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_EPCL_CNS)
#define PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_EPLR_1_CNS           BOBCAT3_PIPE1_MAC(PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_EPLR_CNS)
#define PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_EOAM_1_CNS           BOBCAT3_PIPE1_MAC(PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_EOAM_CNS)
#define PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_IA_1_CNS             BOBCAT3_PIPE1_MAC(PRV_CPSS_DXCH_BOBCAT3_BASE_ADDRESS_IA_0_CNS)

/* --------------------------------------------------*
 *  Unit base address definition                     *
 *---------------------------------------------------*/
#define NON_VALID_ADDR_CNS (GT_U32)(~0)
#define PRV_CPSS_NUM_OF_TAI_IN_FALCON_CNS   17  /* number of TAI's in Falcon */
#define PRV_CPSS_NUM_OF_TAI_IN_HAWK_CNS     17  /* number of TAI's in Hawk */
#define PRV_CPSS_NUM_OF_TAI_IN_PHOENIX_CNS  11  /* number of TAI's in Phoenix */
#define PRV_CPSS_NUM_OF_TAI_IN_HARRIER_CNS  12  /* number of TAI's in Harrier */
#define PRV_CPSS_NUM_OF_TAI_IN_IRONMAN_CNS   5  /* number of TAI's in Ironman */

/**
* @enum PRV_CPSS_DXCH_UNITID_DB_FAMILY_ENT
 *
 * @brief Defines index in units DB array and it's size.
*/
typedef enum {
    /** index for Bobcat2 entry */
    PRV_CPSS_DXCH_UNITID_DB_FAMILY_BOBCAT2_E = 0,
    /** index for Bobk (Caelum, Cetus) entry */
    PRV_CPSS_DXCH_UNITID_DB_FAMILY_BOBK_E,
    /** index for Bobcat3 entry */
    PRV_CPSS_DXCH_UNITID_DB_FAMILY_BOBCAT3_E,
    /** index for Aldrin entry */
    PRV_CPSS_DXCH_UNITID_DB_FAMILY_ALDRIN_E,
    /** index for AC3X entry */
    PRV_CPSS_DXCH_UNITID_DB_FAMILY_AC3X_E,
    /** index for Aldrin2 entry */
    PRV_CPSS_DXCH_UNITID_DB_FAMILY_ALDRIN2_E,
    /** index for Falcon entry */
    PRV_CPSS_DXCH_UNITID_DB_FAMILY_FALCON_E,
    /** index for AC5P entry */
    PRV_CPSS_DXCH_UNITID_DB_FAMILY_AC5P_E,
    /** index for AC5X entry */
    PRV_CPSS_DXCH_UNITID_DB_FAMILY_AC5X_E,
    /** index for Harrier entry */
    PRV_CPSS_DXCH_UNITID_DB_FAMILY_HARRIER_E,
    /** index for IronMan L entry */
    PRV_CPSS_DXCH_UNITID_DB_FAMILY_IRONMAN_L_E,

    /** size of DB */
    PRV_CPSS_DXCH_UNITID_DB_FAMILY__LAST__E
}PRV_CPSS_DXCH_UNITID_DB_FAMILY_ENT;

typedef struct
{
    PRV_CPSS_DXCH_UNIT_ENT unitId;
    GT_U32                 unitBaseAdrr;  /* last line shall be  { PRV_CPSS_DXCH_UNIT_LAST_E , NON_VALID_ADDR_CNS } */
}PRV_CPSS_DXCH_UNITID_UNITBASEADDR_STC;

typedef struct
{
    /** unit address table generic initialization done */
    GT_BOOL                                 isInit;
    /** unit address table device family specific initialization done */
    GT_BOOL                                 isUnitAddrInit;
    CPSS_PP_FAMILY_TYPE_ENT                 devFamily;
    CPSS_PP_SUB_FAMILY_TYPE_ENT             devSubfamily;
    const PRV_CPSS_DXCH_UNITID_UNITBASEADDR_STC * unitId2UnitBaseAdrrList;
    GT_U32                                * devUnitsBaseAddr;
}PRV_CPSS_DXCH_UNITID_UNITBASEADDR_x_TABLE2FILL_STC;


#define END_OF_TABLE_CNS   (GT_U32*)(GT_UINTPTR)0xFFFFFFFF
/* structure to hold the info about offset of registers array in the reg DB
   'PRV_CPSS_DXCH_PP_REGS_ADDR_STC'/'PRV_CPSS_DXCH_PP_REGS_ADDR_VER1_STC' */
typedef struct{
    GT_U32*  registerOffsetPtr;  /* pointer offset from start of PRV_CPSS_DXCH_PP_REGS_ADDR_STC/PRV_CPSS_DXCH_PP_REGS_ADDR_VER1_STC of register */
    GT_U32  numOfRegisters;  /* number of registers from the 'registerOffset' */
}PRV_CPSS_DXCH_HW_REG_ADDR_OFFSET_IN_REG_DB_INFO_STC;

#define UNIT_OFFSET_MASK_CNS    0x00FFFFFF

/* structure to hold the info about offset of registers array in the reg DB
   'PRV_CPSS_DXCH_PP_REGS_ADDR_VER1_STC' */
typedef struct{
    CPSS_DXCH_TABLE_ENT  tableType;  /* pointer offset from start of PRV_CPSS_DXCH_PP_MAC(_devNum)->accessTableInfoPtr []*/
    GT_U32  numOfEntries;/* number of entries from start of table
                            value 0 means use the info from tablesInfo : PRV_CPSS_DXCH_TABLES_INFO_STC*/
}PRV_CPSS_DXCH_HW_RED_ADDR_OFFSET_IN_TABLE_INFO_STC;

#define FALCON_MAX_UNITS    (800)
#define HAWK_MAX_UNITS    (250)
#define PHOENIX_MAX_UNITS    (200)
#define HARRIER_MAX_UNITS    (250)
#define IRONMAN_MAX_UNITS    (200)

/**************************************************/
/* calculate the offset of registers array position in PRV_CPSS_DXCH_PP_REGS_ADDR_VER1_STC from
   start of the structure */
/* NOTE: in VC10 when the macro hold " - (GT_U32*)NULL" --> error C2099: initializer is not a constant */
#define REG_ARR_OFFSET_FROM_REG_DB_1_STC_MAC(regArrName)   \
    (((PRV_CPSS_DXCH_PP_REGS_ADDR_VER1_STC*)NULL)->regArrName)

/* calculate the offset of registers array position in PRV_CPSS_DXCH_PP_REGS_ADDR_VER1_STC from
   start of the structure */
/* NOTE: in VC10 when the macro hold " - (GT_U32*)NULL" --> error C2099: initializer is not a constant */
#define REG_SINGLE_OFFSET_FROM_REG_DB_1_STC_MAC(regSingleName)   \
    &(((PRV_CPSS_DXCH_PP_REGS_ADDR_VER1_STC*)NULL)->regSingleName)

#define REG_ARR_SIZE_REG_DB_1_STC_MAC(regArrName)   \
    sizeof(((PRV_CPSS_DXCH_PP_REGS_ADDR_VER1_STC*)NULL)->regArrName)/4
/* the array of registers from 'regDB1' with the 'size' (number of registers) */
/* used as 'entry' in PRV_CPSS_DXCH_HW_REG_ADDR_OFFSET_IN_REG_DB_INFO_STC */
#define REG_ARR_OFFSET_FROM_REG_DB_1_AND_SIZE_STC_MAC(regArrName)   \
    (GT_U32*)REG_SINGLE_OFFSET_FROM_REG_DB_1_STC_MAC(regArrName) , REG_ARR_SIZE_REG_DB_1_STC_MAC(regArrName)

/**************************************************/
/* calculate the offset of registers array position in PRV_CPSS_DXCH_PP_REGS_ADDR_STC from
   start of the structure */
/* NOTE: in VC10 when the macro hold " - (GT_U32*)NULL" --> error C2099: initializer is not a constant */
#define REG_ARR_OFFSET_FROM_REG_DB_STC_MAC(regArrName)   \
    (((PRV_CPSS_DXCH_PP_REGS_ADDR_STC*)NULL)->regArrName)

#define REG_ARR_OFFSET_FROM_DFX_REG_DB_STC_MAC(regArrName)   \
    (((PRV_CPSS_RESET_AND_INIT_CTRL_REGS_ADDR_STC*)NULL)->regArrName)

#define REG_ARR_SIZE_REG_DB_STC_MAC(regArrName)   \
    sizeof(((PRV_CPSS_DXCH_PP_REGS_ADDR_STC*)NULL)->regArrName)/4

/* the array of registers from 'regDB' with the 'size' (number of registers) */
/* used as 'entry' in PRV_CPSS_DXCH_HW_REG_ADDR_OFFSET_IN_REG_DB_INFO_STC */
#define REG_ARR_OFFSET_FROM_REG_DB_AND_SIZE_STC_MAC(regArrName)   \
    (GT_U32*)&REG_ARR_OFFSET_FROM_REG_DB_STC_MAC(regArrName) , REG_ARR_SIZE_REG_DB_STC_MAC(regArrName)



/* use DB of non manipulated unit ... because unit 0 hold addresses of all units */
#define NON_FIRST_UNIT_INDEX_CNS    1

/**
* @internal prvCpssDxChHwRegAddrIsAddrInTableArray function
* @endinternal
*
* @brief   check if register address is in one of the listed tables.
*
* @note   APPLICABLE DEVICES:      Bobcat2; Caelum; Aldrin; AC3X; Bobcat3; Aldrin2; Falcon; AC5P; AC5X; Harrier; Ironman.
* @note   NOT APPLICABLE DEVICES:  xCat3; AC5; Lion2.
*
* @param[in] devNum                   - The PP's device number to init the struct for.
* @param[in] infoArr                  - the array of listed tables to check if the register is part of it
* @param[in] regAddr                  - the register to check
*
* @retval GT_TRUE                  - the register is in the listed tables.
* @retval GT_FALSE                 - the register is not in the listed tables.
*/
GT_BOOL  prvCpssDxChHwRegAddrIsAddrInTableArray(
    IN GT_SW_DEV_NUM    devNum,
    IN const PRV_CPSS_DXCH_HW_RED_ADDR_OFFSET_IN_TABLE_INFO_STC   *infoArr,
    IN GT_U32       regAddr
);
/**
* @internal prvCpssDxChHwRegAddrIsAddrInRegDb1Array function
* @endinternal
*
* @brief   check if register address is in the array of registers (PRV_CPSS_DXCH_PP_REGS_ADDR_VER1_STC)
*
* @note   APPLICABLE DEVICES:      Bobcat2; Caelum; Aldrin; AC3X; Bobcat3; Aldrin2; Falcon; AC5P; AC5X; Harrier; Ironman.
* @note   NOT APPLICABLE DEVICES:  xCat3; AC5; Lion2.
*
* @param[in] devNum                   - The PP's device number to init the struct for.
* @param[in] infoAddrOffset           - offset of the addresses in infoArr[] from the 'instance 0' of the unit.
*                                      NOTE: should be 0 for sip5 devices.
*                                      should have meaningfully value for sip6 devices
* @param[in] infoArr                  - the array of registers to check if the register is part of it
* @param[in] regAddr                  - the register to check
*
* @retval GT_TRUE                  - the register is in the array
* @retval GT_FALSE                 - the register is not in the array
*/
GT_BOOL  prvCpssDxChHwRegAddrIsAddrInRegDb1Array(
    IN GT_SW_DEV_NUM    devNum,
    IN GT_U32           infoAddrOffset,
    IN const PRV_CPSS_DXCH_HW_REG_ADDR_OFFSET_IN_REG_DB_INFO_STC   *infoArr,
    IN GT_U32       regAddr
);

/**
* @internal prvCpssDxChHwRegAddrIsAddrInRegDbArray function
* @endinternal
*
* @brief   check if register address is in the array of registers (PRV_CPSS_DXCH_PP_REGS_ADDR_STC)
*
* @note   APPLICABLE DEVICES:      Bobcat2; Caelum; Aldrin; AC3X; Bobcat3; Aldrin2; Falcon; AC5P; AC5X; Harrier; Ironman.
* @note   NOT APPLICABLE DEVICES:  xCat3; AC5; Lion2.
*
* @param[in] devNum                   - The PP's device number to init the struct for.
* @param[in] infoAddrOffset           - offset of the addresses in infoArr[] from the 'instance 0' of the unit.
*                                      NOTE: should be 0 for sip5 devices.
*                                      should have meaningfully value for sip6 devices
* @param[in] infoArr                  - the array of registers to check if the register is part of it
* @param[in] regAddr                  - the register to check
*
* @retval GT_TRUE                  - the register is in the array
* @retval GT_FALSE                 - the register is not in the array
*/
GT_BOOL  prvCpssDxChHwRegAddrIsAddrInRegDbArray(
    IN GT_SW_DEV_NUM    devNum,
    IN GT_U32           infoAddrOffset,
    IN const PRV_CPSS_DXCH_HW_REG_ADDR_OFFSET_IN_REG_DB_INFO_STC   *infoArr,
    IN GT_U32       regAddr
);

/**
* @internal prvCpssDxChHwRegAddrIsAddrInDfxRegDbArray function
* @endinternal
*
* @brief   check if register address is in the array of registers (PRV_CPSS_DXCH_RESET_AND_INIT_CTRL_REGS_ADDR_STC)
*
* @note   APPLICABLE DEVICES:      Bobcat2; Caelum; Aldrin; AC3X; Bobcat3; Aldrin2; Falcon; AC5P; AC5X; Harrier; Ironman.
* @note   NOT APPLICABLE DEVICES:  xCat3; AC5; Lion2.
*
* @param[in] devNum                   - The PP's device number to init the struct for.
* @param[in] infoAddrOffset           - offset of the addresses in infoArr[] from the 'instance 0' of the unit.
*                                      NOTE: should be 0 for sip5 devices.
*                                      should have meaningfully value for sip6 devices
* @param[in] infoArr                  - the array of registers to check if the register is part of it
* @param[in] regAddr                  - the register to check
*
* @retval GT_TRUE                  - the register is in the array
* @retval GT_FALSE                 - the register is not in the array
*/
GT_BOOL  prvCpssDxChHwRegAddrIsAddrInDfxRegDbArray(
    IN GT_SW_DEV_NUM    devNum,
    IN GT_U32           infoAddrOffset,
    IN PRV_CPSS_DXCH_HW_REG_ADDR_OFFSET_IN_REG_DB_INFO_STC   *infoArr,
    IN GT_U32       regAddr
);


/**
* @internal prvCpssDxChUnitBaseTableGet function
* @endinternal
*
* @brief   get based address lists for all ASICs
*
* @note   APPLICABLE DEVICES:      Bobcat2; Caelum; Aldrin; AC3X; Bobcat3; Aldrin2; Falcon; AC5P; AC5X; Harrier; Ironman.
* @note   NOT APPLICABLE DEVICES:  xCat3; AC5; Lion2.
*
* @param[in] devNum                   - The PP's device number to init the struct for.
*
* @param[out] devUnitsBaseAddrPtrPtr   - ptr to point to table
*                                       GT_OK on success
*/
GT_STATUS prvCpssDxChUnitBaseTableGet
(
    IN  GT_U8    devNum,
    OUT GT_U32 **devUnitsBaseAddrPtrPtr
);


/**
* @internal prvCpssDxChUnitBaseTableInit function
* @endinternal
*
* @brief   init based address lists for all ASICs
*
* @note   APPLICABLE DEVICES:      xCat3; AC5; Lion2; Bobcat2; Caelum; Aldrin; AC3X; Bobcat3; Aldrin2; Falcon; AC5P; AC5X; Harrier; Ironman.
* @note   NOT APPLICABLE DEVICES: None.
*
*                                       GT_OK on success
*/
GT_STATUS prvCpssDxChUnitBaseTableInit(IN CPSS_PP_FAMILY_TYPE_ENT devFamily);


/**
* @enum PRV_CPSS_REG_DB_TYPE_ENT
 *
 * @brief the enumeration for the 'reg DB' types .
*/
typedef enum{
    /**@brief - info for shared MTI MIB counters (per 8 ports)
        index to : regsAddrPtr->GOP.MTI_STATISTICS[] */
    PRV_CPSS_REG_DB_TYPE_MTI_MIB_COUNTER_SHARED_E,
    /**@brief - info for MTI MAC_EXT - for local port index
        used for regsAddrPtr->GOP.MTI[portNum].MTI_EXT to the local port index
        for Cider address calculations */
    PRV_CPSS_REG_DB_TYPE_MTI_MAC_EXT_E,
    /**@brief - get local channel and unit index to
        index to : PRV_CPSS_DXCH_DEV_REGS_VER1_MAC(_devNum)->LMU[_lmu] */
    PRV_CPSS_REG_DB_TYPE_MTI_LMU_E,

    /**@brief - get index to one of the next
        index to : PRV_CPSS_DXCH_DEV_REGS_VER1_MAC(_devNum)->MPFS[]
        and to   : PRV_CPSS_DXCH_DEV_REGS_VER1_MAC(_devNum)->MPFS_CPU[] */
    PRV_CPSS_REG_DB_TYPE_MTI_MPFS_E,

    /**@brief - info for function to know which the BMP of MACs that their SERDESs may
       eclipse my SERDES */
    PRV_CPSS_REG_DB_TYPE_MAC_ECLIPSED_BY_SERDES_BEHIND_E,

    /**@brief - info for function to know which the BMP of MACs my SERDESs will
       eclipse their MACs
       NOTE: the 'startMacIn_macBmpEclipseSerdes' is used as 'IN GT_U32 numOfLanes'
    */
    PRV_CPSS_REG_DB_TYPE_MAC_ECLIPSE_SERDES_AHEAD_E,

    /**@brief - info for function to know which channel Id to use for the PB.
    */
    PRV_CPSS_REG_DB_TYPE_PB_CHANNEL_ID_E,

    /**@brief - info for function to know the number of serdeses that the MAC uses
       out startMacIn_macBmpEclipseSerdes hold the first global SERDES number.
    */
    PRV_CPSS_REG_DB_TYPE_FIRST_SERDES_E,

    /**@brief - info for shared USX MTI MIB counters (per 8 ports) */
    PRV_CPSS_REG_DB_TYPE_USX_MTI_MIB_COUNTER_SHARED_E,

    /**@brief - info for MTI_USX_EXT - for local port index
    used for regsAddrPtr->GOP.MTI[_port].MTI_USX_EXT to the local port index
    for Cider address calculations */
    PRV_CPSS_REG_DB_TYPE_MTI_USX_EXT_E,

    /**@brief - info for MTI_CPU_EXT - for local port index
    used for regsAddrPtr->GOP.MTI[_port].MTI_CPU_EXT to CPU port index
    for Cider address calculations */
    PRV_CPSS_REG_DB_TYPE_MTI_CPU_EXT_E,

    PRV_CPSS_REG_DB_TYPE____LAST____E
}PRV_CPSS_REG_DB_TYPE_ENT;

/**
* @enum PRV_CPSS_REG_DB_INFO_STC
 *
 * @brief the structure to hold info about the 'reg DB'
*/
typedef struct{
    /** the index in the regDb */
    GT_U32             regDbIndex;
    /** the index for address calculations */
    GT_U32             ciderIndexInUnit;
    /** the BMP of MACs that their SERDESs may eclipse my SERDES */
    GT_U32             macBmpEclipseSerdes;
    /** the MAC port of 'bit 0' in  macBmpEclipseSerdes */
    GT_U32             startMacIn_macBmpEclipseSerdes;
}PRV_CPSS_REG_DB_INFO_STC;

/**
* @internal PRV_CPSS_SIP6_UNIT_ID_SIZE_IN_BYTE_GET_FUNC function
* @endinternal
*
* @brief   To get the size of the unit in bytes
*
* @note   APPLICABLE DEVICES:      Falcon; AC5P; AC5X; Harrier; Ironman.
* @note   NOT APPLICABLE DEVICES:  Lion2; xCat3; AC5; Bobcat2; Caelum; Aldrin; AC3X; Bobcat3; Aldrin2; Falcon; AC5P; AC5X; Harrier; Ironman.
*
* @param[in] devNum                   - the device number
* @param[in] prvUnitId                - Id of DxCh unit(one of the PRV_CPSS_DXCH_UNIT_ENT)
*
* @param[out] unitIdSize               - size of the unit in bytes
*/
typedef GT_STATUS (*PRV_CPSS_SIP6_UNIT_ID_SIZE_IN_BYTE_GET_FUNC)
(
    IN  GT_U8                      devNum,
    IN  PRV_CPSS_DXCH_UNIT_ENT     prvUnitId,
    OUT GT_U32                    *unitIdSizePtr
);
/**
* @internal PRV_CPSS_SIP6_HWS_UNIT_BASE_ADDR_CALC_FUNC function
* @endinternal
*
* @brief   function for HWS to call to cpss to use for Calculate the base address
*         of a global port, for next units :
*         MIB/SERDES/GOP
* @param[in] hwsUnitId                - the unit : MIB/SERDES/GOP
* @param[in] portNum                  - the global port num (MAC number)
*                                       The address of the port in the unit
*/
typedef GT_U32 /*GT_UREG_DATA*/ (*PRV_CPSS_SIP6_HWS_UNIT_BASE_ADDR_CALC_FUNC)
(
    GT_U8                                   devNum,
    GT_U32/*HWS_UNIT_BASE_ADDR_TYPE_ENT*/   hwsUnitId,
    GT_U32/*GT_UOPT*/                       portNum
);

/**
* @internal PRV_CPSS_SIP6_OFFSET_FROM_FIRST_INSTANCE_GET_FUNC function
* @endinternal
*
* @brief   for any instance of unit that is duplicated get the address offset from
*         first instance of the unit.
*
* @note   APPLICABLE DEVICES:      Falcon; AC5P; AC5X; Harrier; Ironman.
* @note   NOT APPLICABLE DEVICES:  Lion2; xCat3; AC5; Bobcat2; Caelum; Aldrin; AC3X; Bobcat3; Aldrin2.
*
* @param[in] devNum                   - the device number
* @param[in] instanceId               - the instance index in which the unitId exists.
* @param[in] instance0UnitId          - the unitId 'name' of first instance.
*                                       the address offset from instance 0
*/
typedef GT_U32 (*PRV_CPSS_SIP6_OFFSET_FROM_FIRST_INSTANCE_GET_FUNC)
(
    IN GT_SW_DEV_NUM            devNum,
    IN GT_U32                   instanceId,
    IN PRV_CPSS_DXCH_UNIT_ENT   instance0UnitId
);

/**
* @internal PRV_CPSS_SIP6_REG_DB_INFO_GET_FUNC function
* @endinternal
*
* @brief   function to get the info to index in 'reg DB'
*
* @param[in] devNum          - The PP's device number.
* @param[in] portMacNum      - the global mac port number.
* @param[out] regDbType      - the type of regDbInfo.
* @param[out] regDbInfoPtr   - (pointer to) the reg db info
* @return - GT_OK on success
*/
typedef GT_STATUS   (*PRV_CPSS_SIP6_REG_DB_INFO_GET_FUNC)
(
    IN GT_U8                       devNum,
    IN GT_U32                      portMacNum,
    IN PRV_CPSS_REG_DB_TYPE_ENT    regDbType,
    IN PRV_CPSS_REG_DB_INFO_STC   *regDbInfoPtr
);


/**
* @internal PRV_CPSS_SIP6_DMA_GLOBAL_NUM_TO_LOCAL_NUM_IN_DP_CONVERT_FUNC function
* @endinternal
*
* @brief   Falcon : convert the global DMA number in device to local DMA number
*         in the DataPath (DP), and the Data Path Id.
*
* @note   APPLICABLE DEVICES:      Falcon.
* @note   NOT APPLICABLE DEVICES:  Lion2; xCat3; AC5; Bobcat2; Caelum; Aldrin; AC3X; Bobcat3; Aldrin2; AC5P; AC5X; Harrier; Ironman.
*
* @param[in] devNum                   - The PP's device number.
* @param[in] globalDmaNum             - the DMA global number.
*
* @param[out] dpIndexPtr               - (pointer to) the Data Path (DP) Index
* @param[out] localDmaNumPtr           - (pointer to) the DMA local number
*                                       GT_OK on success
*/
typedef GT_STATUS (*PRV_CPSS_SIP6_DMA_GLOBAL_NUM_TO_LOCAL_NUM_IN_DP_CONVERT_FUNC)
(
    IN  GT_U8   devNum,
    IN  GT_U32  globalDmaNum,
    OUT GT_U32  *dpIndexPtr,
    OUT GT_U32  *localDmaNumPtr
);

/**
* @internal PRV_CPSS_SIP6_DMA_LOCAL_NUM_IN_DP_TO_GLOBAL_NUM_CONVERT_FUNC function
* @endinternal
*
* @brief   Falcon : convert the local DMA number in the DataPath (DP), to global DMA number
*         in the device.
*
* @note   APPLICABLE DEVICES:      Falcon.
* @note   NOT APPLICABLE DEVICES:  Lion2; xCat3; AC5; Bobcat2; Caelum; Aldrin; AC3X; Bobcat3; Aldrin2; AC5P; AC5X; Harrier; Ironman.
*
* @param[in] devNum                   - The PP's device number.
* @param[in] dpIndex                  - the Data Path (DP) Index
* @param[in] localDmaNum              - the DMA local number
*
* @param[out] globalDmaNumPtr          - (pointer to) the DMA global number.
*                                       GT_OK on success
*/
typedef GT_STATUS (*PRV_CPSS_SIP6_DMA_LOCAL_NUM_IN_DP_TO_GLOBAL_NUM_CONVERT_FUNC)
(
    IN  GT_U8   devNum,
    IN  GT_U32  dpIndex,
    IN  GT_U32  localDmaNum,
    OUT GT_U32  *globalDmaNumPtr
);

/**
* @internal PRV_CPSS_SIP6_DMA_LOCAL_NUM_IN_DP_TO_GLOBAL_NUM_CONVERT_GET_NEXT_FUNC function
* @endinternal
*
* @brief   Falcon : the pair of {dpIndex,localDmaNum} may support 'mux' of :
*                   SDMA CPU port or network CPU port
*          each of them hold different 'global DMA number'
*
* @note   APPLICABLE DEVICES:      Falcon.
* @note   NOT APPLICABLE DEVICES:  Lion2; xCat3; AC5; Bobcat2; Caelum; Aldrin; AC3X; Bobcat3; Aldrin2; AC5P; AC5X; Harrier; Ironman.
*
* @param[in] devNum                   - The PP's device number.
* @param[in] dpIndex                  - the Data Path (DP) Index
* @param[in] localDmaNum              - the DMA local number
* @param[out] globalDmaNumPtr          - (pointer to) the 'current' DMA global number.
*                                       if 'current' is GT_NA (0xFFFFFFFF) --> meaning need to 'get first'
*
* @param[out] globalDmaNumPtr          - (pointer to) the 'next' DMA global number.
*  GT_OK      on success
*  GT_NO_MORE on success but no more such global DMA port
*  GT_BAD_PARAM on bad param
*  GT_NOT_FOUND on non exists global DMA port
*/
typedef GT_STATUS (*PRV_CPSS_SIP6_DMA_LOCAL_NUM_IN_DP_TO_GLOBAL_NUM_CONVERT_GET_NEXT_FUNC)
(
    IN  GT_U8   devNum,
    IN  GT_U32  dpIndex,
    IN  GT_U32  localDmaNum,
    INOUT GT_U32  *globalDmaNumPtr
);

/**
* @internal PRV_CPSS_SIP6_HW_REG_ADDR_TO_UNIT_ID_CONRVERT_FUNC function
* @endinternal
*
* @brief   This function convert register address to unit id.
*
* @note   APPLICABLE DEVICES:      Falcon.
* @note   NOT APPLICABLE DEVICES:  xCat3; AC5; Lion2; Bobcat2; Caelum; Aldrin; AC3X; Bobcat3; Aldrin2; AC5P; AC5X; Harrier; Ironman.
*
* @param[in] devNum                   - The PP's device number to init the struct for.
* @param[in] regAddr                  - the register address to get it's base address unit Id.
*                                       the unitId for the given address
*/
typedef PRV_CPSS_DXCH_UNIT_ENT (*PRV_CPSS_SIP6_HW_REG_ADDR_TO_UNIT_ID_CONRVERT_FUNC)
(
    IN GT_U32                   devNum,
    IN GT_U32                   regAddr
);

/**
* @internal prvCpssSip6RegDbInfoGet function
* @endinternal
*
* @brief   function to get the info to index in 'reg DB'
*
* @param[in] devNum          - The PP's device number.
* @param[in] portMacNum      - the global mac port number.
* @param[out] regDbType      - the type of regDbInfo.
* @param[out] regDbInfoPtr   - (pointer to) the reg db info
* @return - GT_OK on success
*/
GT_STATUS   prvCpssSip6RegDbInfoGet(
    IN GT_U8                       devNum,
    IN GT_U32                      portMacNum,
    IN PRV_CPSS_REG_DB_TYPE_ENT    regDbType,
    IN PRV_CPSS_REG_DB_INFO_STC   *regDbInfoPtr
);
/**
* @internal prvCpssSip6OffsetFromFirstInstanceGet function
* @endinternal
*
* @brief   for any instance of unit that is duplicated get the address offset from
*         first instance of the unit.
*
* @note   APPLICABLE DEVICES:      Falcon; AC5P; AC5X; Harrier; Ironman.
* @note   NOT APPLICABLE DEVICES:  Lion2; xCat3; AC5; Bobcat2; Caelum; Aldrin; AC3X; Bobcat3; Aldrin2.
*
* @param[in] devNum                   - the device number
* @param[in] instanceId               - the instance index in which the unitId exists.
* @param[in] instance0UnitId          - the unitId 'name' of first instance.
*                                       the address offset from instance 0
*/
GT_U32   prvCpssSip6OffsetFromFirstInstanceGet
(
    IN GT_SW_DEV_NUM            devNum,
    IN GT_U32                   instanceId,
    IN PRV_CPSS_DXCH_UNIT_ENT   instance0UnitId
);

/**
* @internal prvCpssSip6HwsUnitBaseAddrCalc function
* @endinternal
*
* @brief   function for HWS to call to cpss to use for Calculate the base address
*         of a global port, for next units :
*         MIB/SERDES/GOP
* @param[in] unitId                   - the unit : MIB/SERDES/GOP
* @param[in] portNum                  - the global port num (MAC number)
*                                       The address of the port in the unit
*/
GT_U32 /*GT_UREG_DATA*/   prvCpssSip6HwsUnitBaseAddrCalc(
    GT_U8                                   devNum,
    GT_U32/*HWS_UNIT_BASE_ADDR_TYPE_ENT*/   unitId,
    GT_U32/*GT_UOPT*/                       portNum
);

/**
* @internal prvCpssSip6TileOffsetGet function
* @endinternal
*
* @brief   get the address offset in bytes of tile 'x' from tile 0.
*
* @note   APPLICABLE DEVICES:      Falcon; AC5P; AC5X; Harrier; Ironman.
* @note   NOT APPLICABLE DEVICES:  Lion2; xCat3; AC5; Bobcat2; Caelum; Aldrin; AC3X; Bobcat3; Aldrin2.
*
* @param[in] devNum                   - the device number
* @param[in] tileId                   - the  to get offset from tile 0.
*                                       the tile address offset in bytes from tile 0
*/
GT_U32   prvCpssSip6TileOffsetGet
(
    IN GT_SW_DEV_NUM            devNum,
    IN GT_U32                   tileId
);

/**
* @internal prvCpssSip6UnitIdSizeInByteGet function
* @endinternal
*
* @brief   To get the size of the unit in bytes
*
* @note   APPLICABLE DEVICES:      Falcon; AC5P; AC5X; Harrier; Ironman.
* @note   NOT APPLICABLE DEVICES:  Lion2; xCat3; AC5; Bobcat2; Caelum; Aldrin; AC3X; Bobcat3; Aldrin2; Falcon; AC5P; AC5X; Harrier; Ironman.
*
* @param[in] devNum                   - the device number
* @param[in] prvUnitId                - Id of DxCh unit(one of the PRV_CPSS_DXCH_UNIT_ENT)
*
* @param[out] unitIdSize               - size of the unit in bytes
*/
GT_STATUS prvCpssSip6UnitIdSizeInByteGet
(
    IN  GT_U8                      devNum,
    IN  PRV_CPSS_DXCH_UNIT_ENT     prvUnitId,
    OUT GT_U32                    *unitIdSizePtr
);

#include <cpss/generic/cpssHwInit/private/prvCpssHwInit.h>
#include <cpss/dxCh/dxChxGen/cpssHwInit/private/prvCpssDxChHwFalconInfo.h>
#include <cpss/dxCh/dxChxGen/cpssHwInit/private/prvCpssDxChHwHawkInfo.h>
#include <cpss/dxCh/dxChxGen/cpssHwInit/private/prvCpssDxChHwPhoenixInfo.h>
#include <cpss/dxCh/dxChxGen/cpssHwInit/private/prvCpssDxChHwHarrierInfo.h>
#include <cpss/dxCh/dxChxGen/cpssHwInit/private/prvCpssDxChHwIronmanInfo.h>

#ifdef __cplusplus
}
#endif /* __cplusplus */


#endif /*__PRV_CPSS_DXCH_HW_REG_ADDR_VER1_PP_DB_H*/



