#
SHELL := /bin/bash

ECHO = echo
MKDIR = mkdir -p
CP = cp
RM = rm -rf

ifneq ("$(GREY_MODE)", "yes")
CROSS_COMPILE ?= /swtools/devtools/gnueabi/arm_le/arm-mv7_sft-linux-gnueabi/bin/arm-marvell-linux-gnueabi-
CROSS_LIB_PATH ?= /swtools/devtools/gnueabi/arm_le/arm-mv7_sft-linux-gnueabi/arm-marvell-linux-gnueabi/libc
else
CROSS_COMPILE ?= /usr/bin/
endif

CC = $(CROSS_COMPILE)gcc
LD = $(CROSS_COMPILE)gcc
AR = $(CROSS_COMPILE)ar

GNU_CC := $(CC)

OBJ_EXTENSION=o
DEP_EXTENSION=d
LIB_EXTENSION=a

ifneq ("$(GREY_MODE)", "yes")
BUILD_DIR := build_dir_bm
else
BUILD_DIR := build_dir_gm
endif

ifneq ($(strip $(BUILD_DIR_TARGET)),)
BUILD_DIR := $(BUILD_DIR)/$(BUILD_DIR_TARGET)
endif

OUT_DIR := $(BUILD_DIR)
OBJ_OUT_DIR = $(BUILD_DIR)/obj

HAL_PHY_LIB := $(OUT_DIR)/libmpd.a

# Name of makefile to include in each sub-module
MAKEFILE := Makefile

ifeq ($(PROJECT_ASLR_SUPPORT),yes)
ifeq ($(ASLR_SUPPORT),yes)
PIE_FLAG=-pie
PIC_FLAG=-fPIC
endif
endif

ifeq ($(PROJECT_FORTIFY_SOURCE_SUPPORT),yes)
ifeq ($(FORTIFY_SOURCE_SUPPORT),yes)
FORTIFY_SOURCE_FLAG=-O2 -D_FORTIFY_SOURCE=2
endif
endif

BASE_CFLAGS = $(DEBUG_CFLAGS) -Werror -Wall -pthread -Wextra -Wno-error=cpp -ansi -fno-builtin -funroll-loops $(PIC_FLAG) $(FORTIFY_SOURCE_FLAG)
override CFLAGS += $(BASE_CFLAGS)
ifneq ("$(GREY_MODE)", "yes")
	override CFLAGS += -DLINUX 
endif
override CFLAGS += \
 -I.\
 -Ih/ \
 -Iexternal_phy/alaska_c/src/\
 -Iexternal_phy/mtd/src/

ifeq ("$(GREY_MODE)", "yes")
	override CFLAGS+= -DPHY_SIMULATION
endif

.PHONY: all
all: $(HAL_PHY_LIB)

lib: $(HAL_PHY_LIB)

clean:
	$(RM) $(OUT_DIR) mpdSample

#######################################################

MODULES := \
	external_phy/mtd/src \
	external_phy/alaska_c/src \
	src

export BUILD_MODE = DEBUG
ifeq ($(BUILD_MODE),DEBUG)
    DEBUG_CFLAGS = -g -O0
else
    DEBUG_CFLAGS = -O2
endif
 
# Function compile(flags, output_folder)
#
# Compile a .c file into .o file using the defined toolchain, including dependecy .d file.
# Object and dependency files will be located together in output_folder,
# under the relative path to the source.
#
# Example: $(call compile $(CFLAGS),/local/objects)
# Source file: foo/bar/baz.c
# Targets: /local/objects/foo/bar/baz.o
#          /local/objects/foo/bar/baz.d

define make_depend
@# Create output folder
	@ $(MKDIR) $(dir $@)
@# print make_depend command
	@ echo $(GNU_CC) -MM -c $1 $< -o $2/$*.$(DEP_EXTENSION)
@# create dependency file
	@ $(GNU_CC) -MM -c $1 $< -o $2/$*.$(DEP_EXTENSION)
@# Duplicate it
	@ cp $2/$*.$(DEP_EXTENSION) $2/$*.tmp
@# Create empty rule per file in dependency rule to avoid "No rule to make target ..." Errors 
	@ sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' -e '/^$$/d' -e 's/$$/ :/' < $2/$*.$(DEP_EXTENSION) >> $2/$*.tmp
@# Change object filename to include full path
	@ sed -e 's/$(subst .,\.,$(notdir $*.o))/$(subst /,\/,$2/$*.$(OBJ_EXTENSION))/'  < $2/$*.tmp > $2/$*.$(DEP_EXTENSION)
@# Remove temporary file
	@ $(RM) $2/$*.tmp
endef

define compile
@#	update dependency file
	$(call make_depend,$1,$2)
@# print compilation msg
	@ $(ECHO) $(CC) $<
@# compile
	@ $(ECHO) $(CC) -c $1 $< -o $@
	@ $(CC) -c $1 $< -o $@
endef

define make_lib
	@ $(MKDIR) $(dir $@)
	@ $(ECHO) $(AR) $@
	@ $(AR) crs $@ $^
endef

PHY_SRC := 
DEP := 
include $(patsubst %,%/$(MAKEFILE),$(MODULES))

HAL_PHY_OBJ := $(patsubst %.c,$(OBJ_OUT_DIR)/%.$(OBJ_EXTENSION),$(PHY_SRC))
DEP += $(patsubst %.o,%.d,$(HAL_PHY_OBJ))

# linker options
SAMPLE_SRC=sample/src/mpdSample.c
SAMPLE_OBJ=$(patsubst %.c,$(OBJ_OUT_DIR)/%.$(OBJ_EXTENSION),$(SAMPLE_SRC))

LDFLAGS = -$(PIE_FLAG) lpthread -lrt -ldl -lm -rdynamic -Wl,-Map=$(OUT_DIR)/$@/link.map

# %.o - compile .c files to objects 
$(OBJ_OUT_DIR)/%.o:  %.c
	$(call compile,$(CFLAGS),$(OBJ_OUT_DIR))

$(HAL_PHY_LIB): $(HAL_PHY_OBJ)
	$(call make_lib)
	
$(SAMPLE_SRC):    
	$(call compile,$(CFLAGS),$(SAMPLE_SRC))

sample:$(SAMPLE_OBJ) $(HAL_PHY_OBJ)
	$(LD) -Xlinker --whole-archive $(filter %.a %.o, $^) -Xlinker --no-whole-archive \
    $(filter %.so, $^) $(LDFLAGS) -Xlinker -Map -Xlinker $(OBJ_OUT_DIR)/$@.map -o mpdSample


ifneq ($(MAKECMDGOALS),clean)
-include $(DEP)
endif



print-%  : ; @echo $* = $($*)

